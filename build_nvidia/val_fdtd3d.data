
/* WebCL Validator JSON header
{
    "version" : "1.0",
    "kernels" :
        {
            "FiniteDifferences" :
                {
                    "output" :
                        {
                            "index" : 0,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_output_size"
                        },
                    "_wcl_output_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "input" :
                        {
                            "index" : 2,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_input_size"
                        },
                    "_wcl_input_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "coeff" :
                        {
                            "index" : 4,
                            "type" : "float *",
                            "address-space" : "constant",
                            "size-parameter" : "_wcl_coeff_size"
                        },
                    "_wcl_coeff_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "dimx" :
                        {
                            "index" : 6,
                            "type" : "int"
                        },
                    "dimy" :
                        {
                            "index" : 7,
                            "type" : "int"
                        },
                    "dimz" :
                        {
                            "index" : 8,
                            "type" : "int"
                        },
                    "padding" :
                        {
                            "index" : 9,
                            "type" : "int"
                        }
                }
        }
}
*/

// WebCL Validator: validation stage.
#define _WCL_ADDRESS_SPACE_private_MIN (((32 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_private_ALIGNMENT (32/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_global_MIN (((32 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_global_ALIGNMENT (32/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_local_MIN (((1280 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_local_ALIGNMENT (1024/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_constant_MIN (((32 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_constant_ALIGNMENT (32/CHAR_BIT)
typedef struct {
    float _wcl_infront[4];
    float _wcl_behind[4];
    float _wcl_current;
} __attribute__ ((aligned (_WCL_ADDRESS_SPACE_private_ALIGNMENT))) _WclPrivates;

typedef struct {
    float [40] _wcl_tile[16];
} __attribute__ ((aligned (_WCL_ADDRESS_SPACE_local_ALIGNMENT))) _WclLocals;

typedef struct {
    __global float *const FiniteDifferences__output_min;
    __global float *const FiniteDifferences__output_max;
    const __global float *const FiniteDifferences__input_min;
    const __global float *const FiniteDifferences__input_max;
} _WclGlobalLimits;

typedef struct {
    __constant float *const FiniteDifferences__coeff_min;
    __constant float *const FiniteDifferences__coeff_max;
} _WclConstantLimits;

typedef struct {
    __local _WclLocals * _wcl_locals_min;
    __local _WclLocals * _wcl_locals_max;
} _WclLocalLimits;

typedef struct {
    _WclGlobalLimits gl;
    __global uint *gn;
    _WclConstantLimits cl;
    __constant uint *cn;
    _WclLocalLimits ll;
    __local uint *ln;
    _WclPrivates pa;
    __private uint *pn;
} _WclProgramAllocations;

__constant uint _wcl_constant_null[_WCL_ADDRESS_SPACE_constant_MIN] = { 0 };

// => General code that doesn't depend on input.

#define _WCL_MEMCPY(dst, src) for(ulong i = 0; i < sizeof((src))/sizeof((src)[0]); i++) { (dst)[i] = (src)[i]; }

#define _WCL_LAST(type, ptr) (((type)(ptr)) - 1)
#define _WCL_FILLCHAR ((uchar)0xCC)

// POCL crashes at run time if the parameters are local character
// pointers.
typedef uint _WclInitType;

// NOTE: this expects that null pointer is type of uint*
#define _WCL_SET_NULL(type, req_bytes, min, max, null) ( ((((type)max)-((type)min))*sizeof(uint) >= req_bytes) ? ((type)min) : (null) )

#ifdef cl_khr_initialize_memory
#pragma OPENCL EXTENSION cl_khr_initialize_memory : enable
#define _WCL_LOCAL_RANGE_INIT(begin, end)
#else

// be careful to edit this, this has been carefully tuned to work on every OpenCL driver
// e.g. % item_count was added to start[(items_offset+i)] = _WCL_FILLCHAR;
// to prevent compiler crash on Apple GeForce 640M
#define _WCL_LOCAL_RANGE_INIT(begin, end) do {               \
    __local uchar *start = (__local uchar *)begin;           \
    __local uchar *stop = (__local uchar *)end;              \
    const size_t z_items = get_local_size(2);                \
    const size_t yz_items = get_local_size(1) * z_items;     \
    const size_t xyz_items = get_local_size(0) * yz_items;   \
    const size_t item_index =                                \
        (get_local_id(0) * yz_items) +                       \
        (get_local_id(1) * z_items) +                        \
        get_local_id(2);                                     \
    size_t item_count = stop - start;                        \
    size_t items_per_kernel = item_count / xyz_items;        \
    size_t items_offset = items_per_kernel * item_index;     \
    size_t reminders = item_count % xyz_items;               \
    if (item_index < reminders) {                            \
        start[xyz_items*items_per_kernel + item_index] = _WCL_FILLCHAR; \
    }                                                                   \
    for (size_t i = 0; i < items_per_kernel; i++) {                     \
        start[(items_offset+i) % item_count] = _WCL_FILLCHAR;           \
    }                                                                   \
} while (0)                                                             \

#endif // cl_khr_initialize_memory

constant int hd4k_workaround_constant = 0;

// <= General code that doesn't depend on input.

bool _wcl_addr_check_private_1_float__Ptr(float *addr, unsigned size, float * min0, float * max0)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(float *, max0)) );
}
float *_wcl_addr_clamp_private_1_float__Ptr(float *addr, unsigned size, float * min0, float * max0, float * asnull)
{
     return _wcl_addr_check_private_1_float__Ptr(addr, size, min0, max0) ? addr : asnull;
}

bool _wcl_addr_check_global_2__u_uglobal__float__Ptr(__global float *addr, unsigned size, __global float * min0, __global float * max0, __global float * min1, __global float * max1)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max1)) );
}
__global float *_wcl_addr_clamp_global_2__u_uglobal__float__Ptr(__global float *addr, unsigned size, __global float * min0, __global float * max0, __global float * min1, __global float * max1, __global float * asnull)
{
     return _wcl_addr_check_global_2__u_uglobal__float__Ptr(addr, size, min0, max0, min1, max1) ? addr : asnull;
}

bool _wcl_addr_check_global_2_const___u_uglobal__float__Ptr(const __global float *addr, unsigned size, const __global float * min0, const __global float * max0, const __global float * min1, const __global float * max1)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(const __global float *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(const __global float *, max1)) );
}
const __global float *_wcl_addr_clamp_global_2_const___u_uglobal__float__Ptr(const __global float *addr, unsigned size, const __global float * min0, const __global float * max0, const __global float * min1, const __global float * max1, const __global float * asnull)
{
     return _wcl_addr_check_global_2_const___u_uglobal__float__Ptr(addr, size, min0, max0, min1, max1) ? addr : asnull;
}

bool _wcl_addr_check_local_1__u_ulocal__float__(Ptr)[40](__local float (*)[40]addr, unsigned size, __local float (*)[40] min0, __local float (*)[40] max0)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__local float (*)[40], max0)) );
}
__local float (*)[40]_wcl_addr_clamp_local_1__u_ulocal__float__(Ptr)[40](__local float (*)[40]addr, unsigned size, __local float (*)[40] min0, __local float (*)[40] max0, __local float (*)[40] asnull)
{
     return _wcl_addr_check_local_1__u_ulocal__float__(Ptr)[40](addr, size, min0, max0) ? addr : asnull;
}

bool _wcl_addr_check_local_1__u_ulocal__float__Ptr(__local float *addr, unsigned size, __local float * min0, __local float * max0)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__local float *, max0)) );
}
__local float *_wcl_addr_clamp_local_1__u_ulocal__float__Ptr(__local float *addr, unsigned size, __local float * min0, __local float * max0, __local float * asnull)
{
     return _wcl_addr_check_local_1__u_ulocal__float__Ptr(addr, size, min0, max0) ? addr : asnull;
}

bool _wcl_addr_check_constant_1__u_uconstant__float__Ptr(__constant float *addr, unsigned size, __constant float * min0, __constant float * max0)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__constant float *, max0)) );
}
__constant float *_wcl_addr_clamp_constant_1__u_uconstant__float__Ptr(__constant float *addr, unsigned size, __constant float * min0, __constant float * max0, __constant float * asnull)
{
     return _wcl_addr_check_constant_1__u_uconstant__float__Ptr(addr, size, min0, max0) ? addr : asnull;
}


// WebCL Validator: matching stage 2.
// WebCL Validator: matching stage 1.
/*
 * Copyright 1993-2010 NVIDIA Corporation.  All rights reserved.
 *
 * Please refer to the NVIDIA end user license agreement (EULA) associated
 * with this source code for terms and conditions that govern your use of
 * this software. Any use, reproduction, disclosure, or distribution of
 * this software and related documentation outside the terms of the EULA
 * is strictly prohibited.
 *
 */

__kernel void FiniteDifferences(__global float * const output, ulong _wcl_output_size,
                                __global const float * const input, ulong _wcl_input_size,
                                __constant float * const coeff, ulong _wcl_coeff_size,
                                const int dimx,
                                const int dimy,
                                const int dimz,
                                const int padding)
{

    __local _WclLocals _wcl_locals;
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { &output[0], &output[_wcl_output_size],&input[0], &input[_wcl_input_size] },
        0,
        { &coeff[0], &coeff[_wcl_coeff_size] },
        _wcl_constant_null,
        { &(&_wcl_locals)[0], &(&_wcl_locals)[1] },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.FiniteDifferences__output_min, _wcl_allocs->gl.FiniteDifferences__output_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.FiniteDifferences__input_min, _wcl_allocs->gl.FiniteDifferences__input_max, (__global uint*)0));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll._wcl_locals_min, _wcl_allocs->ll._wcl_locals_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    bool valid = true;
    const int gtidx = get_global_id(0);
    const int gtidy = get_global_id(1);
    const int ltidx = get_local_id(0);
    const int ltidy = get_local_id(1);
    const int workx = get_local_size(0);
    const int worky = get_local_size(1);
    __local float tile[8 + 2 * 4][32 + 2 * 4];

    const int stride_y = dimx + 2 * 4;
    const int stride_z = stride_y * (dimy + 2 * 4);

    int inputIndex = 0;
    int outputIndex = 0;

    // Advance inputIndex to start of inner volume
    inputIndex += 4 * stride_y + 4 + padding;

    // Advance inputIndex to target element
    inputIndex += gtidy * stride_y + gtidx;

    float infront[4];
    float behind[4];
    float current;

 const int tx = ltidx + 4;
 const int ty = ltidy + 4;

    if (gtidx >= dimx)
        valid = false;
    if (gtidy >= dimy)
        valid = false;

    // For simplicity we assume that the global size is equal to the actual
    // problem size; since the global size must be a multiple of the local size
    // this means the problem size must be a multiple of the local size (or
    // padded to meet this constraint).
    // Preload the "infront" and "behind" data
    for (int i = 4 - 2 ; i >= 0 ; i--)
    {
        (*(_wcl_addr_clamp_private_1_float__Ptr((_wcl_allocs->pa._wcl_behind)+(i), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = (*(_wcl_addr_clamp_global_2_const___u_uglobal__float__Ptr((input)+(inputIndex), 1, (const __global float *)_wcl_allocs->gl.FiniteDifferences__output_min, (const __global float *)_wcl_allocs->gl.FiniteDifferences__output_max, (const __global float *)_wcl_allocs->gl.FiniteDifferences__input_min, (const __global float *)_wcl_allocs->gl.FiniteDifferences__input_max, (const __global float *)_wcl_allocs->gn)));
        inputIndex += stride_z;
    }

    _wcl_allocs->pa._wcl_current = (*(_wcl_addr_clamp_global_2_const___u_uglobal__float__Ptr((input)+(inputIndex), 1, (const __global float *)_wcl_allocs->gl.FiniteDifferences__output_min, (const __global float *)_wcl_allocs->gl.FiniteDifferences__output_max, (const __global float *)_wcl_allocs->gl.FiniteDifferences__input_min, (const __global float *)_wcl_allocs->gl.FiniteDifferences__input_max, (const __global float *)_wcl_allocs->gn)));
    outputIndex = inputIndex;
    inputIndex += stride_z;

    for (int i = 0 ; i < 4 ; i++)
    {
        (*(_wcl_addr_clamp_private_1_float__Ptr((_wcl_allocs->pa._wcl_infront)+(i), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = (*(_wcl_addr_clamp_global_2_const___u_uglobal__float__Ptr((input)+(inputIndex), 1, (const __global float *)_wcl_allocs->gl.FiniteDifferences__output_min, (const __global float *)_wcl_allocs->gl.FiniteDifferences__output_max, (const __global float *)_wcl_allocs->gl.FiniteDifferences__input_min, (const __global float *)_wcl_allocs->gl.FiniteDifferences__input_max, (const __global float *)_wcl_allocs->gn)));
        inputIndex += stride_z;
    }

    // Step through the xy-planes
    for (int iz = 0 ; iz < dimz ; iz++)
    {
        // Advance the slice (move the thread-front)
        for (int i = 4 - 1 ; i > 0 ; i--)
            (*(_wcl_addr_clamp_private_1_float__Ptr((_wcl_allocs->pa._wcl_behind)+(i), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = (*(_wcl_addr_clamp_private_1_float__Ptr((_wcl_allocs->pa._wcl_behind)+(i - 1), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn)));
        (*(_wcl_addr_clamp_private_1_float__Ptr((_wcl_allocs->pa._wcl_behind)+(0), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = _wcl_allocs->pa._wcl_current;
        _wcl_allocs->pa._wcl_current = (*(_wcl_addr_clamp_private_1_float__Ptr((_wcl_allocs->pa._wcl_infront)+(0), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn)));
        for (int i = 0 ; i < 4 - 1 ; i++)
            (*(_wcl_addr_clamp_private_1_float__Ptr((_wcl_allocs->pa._wcl_infront)+(i), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = (*(_wcl_addr_clamp_private_1_float__Ptr((_wcl_allocs->pa._wcl_infront)+(i + 1), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn)));
        (*(_wcl_addr_clamp_private_1_float__Ptr((_wcl_allocs->pa._wcl_infront)+(4 - 1), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = (*(_wcl_addr_clamp_global_2_const___u_uglobal__float__Ptr((input)+(inputIndex), 1, (const __global float *)_wcl_allocs->gl.FiniteDifferences__output_min, (const __global float *)_wcl_allocs->gl.FiniteDifferences__output_max, (const __global float *)_wcl_allocs->gl.FiniteDifferences__input_min, (const __global float *)_wcl_allocs->gl.FiniteDifferences__input_max, (const __global float *)_wcl_allocs->gn)));

        inputIndex += stride_z;
        outputIndex += stride_z;
        barrier(CLK_LOCAL_MEM_FENCE);

        // Note that for the work items on the boundary of the problem, the
        // supplied index when reading the halo (below) may wrap to the
        // previous/next row or even the previous/next xy-plane. This is
        // acceptable since a) we disable the output write for these work
        // items and b) there is at least one xy-plane before/after the
        // current plane, so the access will be within bounds.

        // Update the data slice in the local tile
        // Halo above & below
        if (ltidy < 4)
        {
            (*(_wcl_addr_clamp_local_1__u_ulocal__float__(Ptr)[40]((_wcl_locals._wcl_tile)+(ltidy), 1, (__local float (*)[40])_wcl_allocs->ll._wcl_locals_min, (__local float (*)[40])_wcl_allocs->ll._wcl_locals_max, (__local float (*)[40])_wcl_allocs->ln)))[tx] = (*(_wcl_addr_clamp_global_2_const___u_uglobal__float__Ptr((input)+(outputIndex - 4 * stride_y), 1, (const __global float *)_wcl_allocs->gl.FiniteDifferences__output_min, (const __global float *)_wcl_allocs->gl.FiniteDifferences__output_max, (const __global float *)_wcl_allocs->gl.FiniteDifferences__input_min, (const __global float *)_wcl_allocs->gl.FiniteDifferences__input_max, (const __global float *)_wcl_allocs->gn)));
            (*(_wcl_addr_clamp_local_1__u_ulocal__float__(Ptr)[40]((_wcl_locals._wcl_tile)+(ltidy + worky + 4), 1, (__local float (*)[40])_wcl_allocs->ll._wcl_locals_min, (__local float (*)[40])_wcl_allocs->ll._wcl_locals_max, (__local float (*)[40])_wcl_allocs->ln)))[tx] = (*(_wcl_addr_clamp_global_2_const___u_uglobal__float__Ptr((input)+(outputIndex + worky * stride_y), 1, (const __global float *)_wcl_allocs->gl.FiniteDifferences__output_min, (const __global float *)_wcl_allocs->gl.FiniteDifferences__output_max, (const __global float *)_wcl_allocs->gl.FiniteDifferences__input_min, (const __global float *)_wcl_allocs->gl.FiniteDifferences__input_max, (const __global float *)_wcl_allocs->gn)));
        }
        // Halo left & right
        if (ltidx < 4)
        {
            (*(_wcl_addr_clamp_local_1__u_ulocal__float__(Ptr)[40]((_wcl_locals._wcl_tile)+(ty), 1, (__local float (*)[40])_wcl_allocs->ll._wcl_locals_min, (__local float (*)[40])_wcl_allocs->ll._wcl_locals_max, (__local float (*)[40])_wcl_allocs->ln)))[ltidx] = (*(_wcl_addr_clamp_global_2_const___u_uglobal__float__Ptr((input)+(outputIndex - 4), 1, (const __global float *)_wcl_allocs->gl.FiniteDifferences__output_min, (const __global float *)_wcl_allocs->gl.FiniteDifferences__output_max, (const __global float *)_wcl_allocs->gl.FiniteDifferences__input_min, (const __global float *)_wcl_allocs->gl.FiniteDifferences__input_max, (const __global float *)_wcl_allocs->gn)));
            (*(_wcl_addr_clamp_local_1__u_ulocal__float__(Ptr)[40]((_wcl_locals._wcl_tile)+(ty), 1, (__local float (*)[40])_wcl_allocs->ll._wcl_locals_min, (__local float (*)[40])_wcl_allocs->ll._wcl_locals_max, (__local float (*)[40])_wcl_allocs->ln)))[ltidx + workx + 4] = (*(_wcl_addr_clamp_global_2_const___u_uglobal__float__Ptr((input)+(outputIndex + workx), 1, (const __global float *)_wcl_allocs->gl.FiniteDifferences__output_min, (const __global float *)_wcl_allocs->gl.FiniteDifferences__output_max, (const __global float *)_wcl_allocs->gl.FiniteDifferences__input_min, (const __global float *)_wcl_allocs->gl.FiniteDifferences__input_max, (const __global float *)_wcl_allocs->gn)));
        }
        (*(_wcl_addr_clamp_local_1__u_ulocal__float__(Ptr)[40]((_wcl_locals._wcl_tile)+(ty), 1, (__local float (*)[40])_wcl_allocs->ll._wcl_locals_min, (__local float (*)[40])_wcl_allocs->ll._wcl_locals_max, (__local float (*)[40])_wcl_allocs->ln)))[tx] = _wcl_allocs->pa._wcl_current;
        barrier(CLK_LOCAL_MEM_FENCE);

        // Compute the output value
        float value = (*(_wcl_addr_clamp_constant_1__u_uconstant__float__Ptr((coeff)+(0), 1, (__constant float *)_wcl_allocs->cl.FiniteDifferences__coeff_min, (__constant float *)_wcl_allocs->cl.FiniteDifferences__coeff_max, (__constant float *)_wcl_allocs->cn))) * _wcl_allocs->pa._wcl_current;
#pragma unroll RADIUS
 for (int i = 1 ; i <= 4 ; i++)
        {
            value += (*(_wcl_addr_clamp_constant_1__u_uconstant__float__Ptr((coeff)+(i), 1, (__constant float *)_wcl_allocs->cl.FiniteDifferences__coeff_min, (__constant float *)_wcl_allocs->cl.FiniteDifferences__coeff_max, (__constant float *)_wcl_allocs->cn))) * ((*(_wcl_addr_clamp_private_1_float__Ptr((_wcl_allocs->pa._wcl_infront)+(i-1), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) + (*(_wcl_addr_clamp_private_1_float__Ptr((_wcl_allocs->pa._wcl_behind)+(i-1), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) + (*(_wcl_addr_clamp_local_1__u_ulocal__float__(Ptr)[40]((_wcl_locals._wcl_tile)+(ty - i), 1, (__local float (*)[40])_wcl_allocs->ll._wcl_locals_min, (__local float (*)[40])_wcl_allocs->ll._wcl_locals_max, (__local float (*)[40])_wcl_allocs->ln)))[tx] + (*(_wcl_addr_clamp_local_1__u_ulocal__float__(Ptr)[40]((_wcl_locals._wcl_tile)+(ty + i), 1, (__local float (*)[40])_wcl_allocs->ll._wcl_locals_min, (__local float (*)[40])_wcl_allocs->ll._wcl_locals_max, (__local float (*)[40])_wcl_allocs->ln)))[tx] + (*(_wcl_addr_clamp_local_1__u_ulocal__float__(Ptr)[40]((_wcl_locals._wcl_tile)+(ty), 1, (__local float (*)[40])_wcl_allocs->ll._wcl_locals_min, (__local float (*)[40])_wcl_allocs->ll._wcl_locals_max, (__local float (*)[40])_wcl_allocs->ln)))[tx - i] + (*(_wcl_addr_clamp_local_1__u_ulocal__float__(Ptr)[40]((_wcl_locals._wcl_tile)+(ty), 1, (__local float (*)[40])_wcl_allocs->ll._wcl_locals_min, (__local float (*)[40])_wcl_allocs->ll._wcl_locals_max, (__local float (*)[40])_wcl_allocs->ln)))[tx + i]);
        }

        // Store the output value
        if (valid)
            (*(_wcl_addr_clamp_global_2__u_uglobal__float__Ptr((output)+(outputIndex), 1, (__global float *)_wcl_allocs->gl.FiniteDifferences__output_min, (__global float *)_wcl_allocs->gl.FiniteDifferences__output_max, (__global float *)_wcl_allocs->gl.FiniteDifferences__input_min, (__global float *)_wcl_allocs->gl.FiniteDifferences__input_max, (__global float *)_wcl_allocs->gn))) = value;
    }
}
