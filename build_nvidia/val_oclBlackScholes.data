
/* WebCL Validator JSON header
{
    "version" : "1.0",
    "kernels" :
        {
            "BlackScholes" :
                {
                    "d_Call" :
                        {
                            "index" : 0,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_Call_size"
                        },
                    "_wcl_d_Call_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "d_Put" :
                        {
                            "index" : 2,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_Put_size"
                        },
                    "_wcl_d_Put_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "d_S" :
                        {
                            "index" : 4,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_S_size"
                        },
                    "_wcl_d_S_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "d_X" :
                        {
                            "index" : 6,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_X_size"
                        },
                    "_wcl_d_X_size" :
                        {
                            "index" : 7,
                            "type" : "ulong"
                        },
                    "d_T" :
                        {
                            "index" : 8,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_T_size"
                        },
                    "_wcl_d_T_size" :
                        {
                            "index" : 9,
                            "type" : "ulong"
                        },
                    "R" :
                        {
                            "index" : 10,
                            "type" : "float"
                        },
                    "V" :
                        {
                            "index" : 11,
                            "type" : "float"
                        },
                    "optN" :
                        {
                            "index" : 12,
                            "type" : "uint"
                        }
                }
        }
}
*/

// WebCL Validator: validation stage.
#define _WCL_ADDRESS_SPACE_private_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_private_ALIGNMENT (8/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_global_MIN (((32 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_global_ALIGNMENT (32/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_local_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_local_ALIGNMENT (8/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_constant_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_constant_ALIGNMENT (8/CHAR_BIT)
typedef struct {
    __global float *BlackScholes__d_Call_min;
    __global float *BlackScholes__d_Call_max;
    __global float *BlackScholes__d_Put_min;
    __global float *BlackScholes__d_Put_max;
    __global float *BlackScholes__d_S_min;
    __global float *BlackScholes__d_S_max;
    __global float *BlackScholes__d_X_min;
    __global float *BlackScholes__d_X_max;
    __global float *BlackScholes__d_T_min;
    __global float *BlackScholes__d_T_max;
} _WclGlobalLimits;

typedef struct {
    _WclGlobalLimits gl;
    __global uint *gn;
} _WclProgramAllocations;

__constant uint _wcl_constant_null[_WCL_ADDRESS_SPACE_constant_MIN] = { 0 };

// => General code that doesn't depend on input.

#define _WCL_MEMCPY(dst, src) for(ulong i = 0; i < sizeof((src))/sizeof((src)[0]); i++) { (dst)[i] = (src)[i]; }

#define _WCL_LAST(type, ptr) (((type)(ptr)) - 1)
#define _WCL_FILLCHAR ((uchar)0xCC)

// POCL crashes at run time if the parameters are local character
// pointers.
typedef uint _WclInitType;

// NOTE: this expects that null pointer is type of uint*
#define _WCL_SET_NULL(type, req_bytes, min, max, null) ( ((((type)max)-((type)min))*sizeof(uint) >= req_bytes) ? ((type)min) : (null) )

#ifdef cl_khr_initialize_memory
#pragma OPENCL EXTENSION cl_khr_initialize_memory : enable
#define _WCL_LOCAL_RANGE_INIT(begin, end)
#else

#define _WCL_LOCAL_RANGE_INIT(begin, end) do {               \
    __local uchar *start = (__local uchar *)begin;           \
    __local uchar *stop = (__local uchar *)end;              \
    const size_t z_items = get_local_size(2);                \
    const size_t yz_items = get_local_size(1) * z_items;     \
    const size_t xyz_items = get_local_size(0) * yz_items;   \
    const size_t item_index =                                \
        (get_local_id(0) * yz_items) +                       \
        (get_local_id(1) * z_items) +                        \
        get_local_id(2);                                     \
    size_t item_count = stop - start;                        \
    size_t items_per_kernel = item_count / xyz_items;        \
    size_t items_offset = items_per_kernel * item_index;     \
    size_t reminders = item_count % xyz_items;               \
    if (item_index < reminders) {                            \
        start[xyz_items*items_per_kernel + item_index] = _WCL_FILLCHAR; \
    }                                                                   \
    for (size_t i = 0; i < items_per_kernel; i++) {                     \
        start[items_offset+i] = _WCL_FILLCHAR;                          \
    }                                                                   \
} while (0)                                                             \

#endif // cl_khr_initialize_memory

// <= General code that doesn't depend on input.

bool _wcl_addr_check_global_5__u_uglobal__float__Ptr(__global float *addr, unsigned size, __global float * min0, __global float * max0, __global float * min1, __global float * max1, __global float * min2, __global float * max2, __global float * min3, __global float * max3, __global float * min4, __global float * max4)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max1)) )
        || ( ((addr) >= (min2)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max2)) )
        || ( ((addr) >= (min3)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max3)) )
        || ( ((addr) >= (min4)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max4)) );
}
__global float *_wcl_addr_clamp_global_5__u_uglobal__float__Ptr(__global float *addr, unsigned size, __global float * min0, __global float * max0, __global float * min1, __global float * max1, __global float * min2, __global float * max2, __global float * min3, __global float * max3, __global float * min4, __global float * max4, __global float * asnull)
{
     return _wcl_addr_check_global_5__u_uglobal__float__Ptr(addr, size, min0, max0, min1, max1, min2, max2, min3, max3, min4, max4) ? addr : asnull;
}


// WebCL Validator: matching stage 2.
// WebCL Validator: matching stage 1.
/*
 * Copyright 1993-2010 NVIDIA Corporation.  All rights reserved.
 *
 * Please refer to the NVIDIA end user license agreement (EULA) associated
 * with this source code for terms and conditions that govern your use of
 * this software. Any use, reproduction, disclosure, or distribution of
 * this software and related documentation outside the terms of the EULA
 * is strictly prohibited.
 *
 */
///////////////////////////////////////////////////////////////////////////////
// Predefine functions to avoid bug in OpenCL compiler on Mac OSX 10.7 systems
///////////////////////////////////////////////////////////////////////////////
float CND(_WclProgramAllocations *_wcl_allocs, float d);
void BlackScholesBody(_WclProgramAllocations *_wcl_allocs, __global float *call, __global float *put, float S,
       float X, float T, float R, float V);

///////////////////////////////////////////////////////////////////////////////
// Rational approximation of cumulative normal distribution function
///////////////////////////////////////////////////////////////////////////////
float CND(_WclProgramAllocations *_wcl_allocs, float d){
    const float A1 = 0.31938153f;
    const float A2 = -0.356563782f;
    const float A3 = 1.781477937f;
    const float A4 = -1.821255978f;
    const float A5 = 1.330274429f;
    const float RSQRT2PI = 0.39894228040143267793994605993438f;

    float
        K = 1.0f / (1.0f + 0.2316419f * fabs(d));

    float
        cnd = RSQRT2PI * exp(- 0.5f * d * d) *
        (K * (A1 + K * (A2 + K * (A3 + K * (A4 + K * A5)))));

    if(d > 0)
        cnd = 1.0f - cnd;

    return cnd;
}


///////////////////////////////////////////////////////////////////////////////
// Black-Scholes formula for both call and put
///////////////////////////////////////////////////////////////////////////////
void BlackScholesBody(_WclProgramAllocations *_wcl_allocs, 
    __global float *call, //Call option price
    __global float *put, //Put option price
    float S, //Current stock price
    float X, //Option strike price
    float T, //Option years
    float R, //Riskless rate of return
    float V //Stock volatility
){
    float sqrtT = sqrt(T);
    float d1 = (log(S / X) + (R + 0.5f * V * V) * T) / (V * sqrtT);
    float d2 = d1 - V * sqrtT;
    float CNDD1 = CND(_wcl_allocs, d1);
    float CNDD2 = CND(_wcl_allocs, d2);

    //Calculate Call and Put simultaneously
    float expRT = exp(- R * T);
    (*(_wcl_addr_clamp_global_5__u_uglobal__float__Ptr((call), 1, (__global float *)_wcl_allocs->gl.BlackScholes__d_Call_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_Call_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_Put_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_Put_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_S_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_S_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_X_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_X_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_T_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_T_max, (__global float *)_wcl_allocs->gn))) = (S * CNDD1 - X * expRT * CNDD2);
    (*(_wcl_addr_clamp_global_5__u_uglobal__float__Ptr((put), 1, (__global float *)_wcl_allocs->gl.BlackScholes__d_Call_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_Call_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_Put_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_Put_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_S_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_S_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_X_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_X_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_T_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_T_max, (__global float *)_wcl_allocs->gn))) = (X * expRT * (1.0f - CNDD2) - S * (1.0f - CNDD1));
}



__kernel void BlackScholes(
    __global float *d_Call, ulong _wcl_d_Call_size, //Call option price
    __global float *d_Put, ulong _wcl_d_Put_size, //Put option price
    __global float *d_S, ulong _wcl_d_S_size, //Current stock price
    __global float *d_X, ulong _wcl_d_X_size, //Option strike price
    __global float *d_T, ulong _wcl_d_T_size, //Option years
    float R, //Riskless rate of return
    float V, //Stock volatility
    unsigned int optN
){
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { &d_Call[0], &d_Call[_wcl_d_Call_size],&d_Put[0], &d_Put[_wcl_d_Put_size],&d_S[0], &d_S[_wcl_d_S_size],&d_X[0], &d_X[_wcl_d_X_size],&d_T[0], &d_T[_wcl_d_T_size] },
        0
    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.BlackScholes__d_Call_min, _wcl_allocs->gl.BlackScholes__d_Call_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.BlackScholes__d_Put_min, _wcl_allocs->gl.BlackScholes__d_Put_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.BlackScholes__d_S_min, _wcl_allocs->gl.BlackScholes__d_S_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.BlackScholes__d_X_min, _wcl_allocs->gl.BlackScholes__d_X_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.BlackScholes__d_T_min, _wcl_allocs->gl.BlackScholes__d_T_max, (__global uint*)0)))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    for(unsigned int opt = get_global_id(0); opt < optN; opt += get_global_size(0))
        BlackScholesBody(_wcl_allocs, 
            &(*(_wcl_addr_clamp_global_5__u_uglobal__float__Ptr((d_Call)+(opt), 1, (__global float *)_wcl_allocs->gl.BlackScholes__d_Call_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_Call_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_Put_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_Put_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_S_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_S_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_X_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_X_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_T_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_T_max, (__global float *)_wcl_allocs->gn))),
            &(*(_wcl_addr_clamp_global_5__u_uglobal__float__Ptr((d_Put)+(opt), 1, (__global float *)_wcl_allocs->gl.BlackScholes__d_Call_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_Call_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_Put_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_Put_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_S_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_S_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_X_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_X_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_T_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_T_max, (__global float *)_wcl_allocs->gn))),
            (*(_wcl_addr_clamp_global_5__u_uglobal__float__Ptr((d_S)+(opt), 1, (__global float *)_wcl_allocs->gl.BlackScholes__d_Call_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_Call_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_Put_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_Put_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_S_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_S_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_X_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_X_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_T_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_T_max, (__global float *)_wcl_allocs->gn))),
            (*(_wcl_addr_clamp_global_5__u_uglobal__float__Ptr((d_X)+(opt), 1, (__global float *)_wcl_allocs->gl.BlackScholes__d_Call_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_Call_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_Put_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_Put_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_S_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_S_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_X_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_X_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_T_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_T_max, (__global float *)_wcl_allocs->gn))),
            (*(_wcl_addr_clamp_global_5__u_uglobal__float__Ptr((d_T)+(opt), 1, (__global float *)_wcl_allocs->gl.BlackScholes__d_Call_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_Call_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_Put_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_Put_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_S_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_S_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_X_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_X_max, (__global float *)_wcl_allocs->gl.BlackScholes__d_T_min, (__global float *)_wcl_allocs->gl.BlackScholes__d_T_max, (__global float *)_wcl_allocs->gn))),
            R,
            V
        );
}
