
/* WebCL Validator JSON header
{
    "version" : "1.0",
    "kernels" :
        {
            "scanExclusiveLocal1" :
                {
                    "d_Dst" :
                        {
                            "index" : 0,
                            "type" : "uint4 *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_Dst_size"
                        },
                    "_wcl_d_Dst_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "d_Src" :
                        {
                            "index" : 2,
                            "type" : "uint4 *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_Src_size"
                        },
                    "_wcl_d_Src_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "l_Data" :
                        {
                            "index" : 4,
                            "type" : "uint *",
                            "address-space" : "local",
                            "size-parameter" : "_wcl_l_Data_size"
                        },
                    "_wcl_l_Data_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "size" :
                        {
                            "index" : 6,
                            "type" : "uint"
                        }
                },
            "scanExclusiveLocal2" :
                {
                    "d_Buf" :
                        {
                            "index" : 0,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_Buf_size"
                        },
                    "_wcl_d_Buf_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "d_Dst" :
                        {
                            "index" : 2,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_Dst_size"
                        },
                    "_wcl_d_Dst_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "d_Src" :
                        {
                            "index" : 4,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_Src_size"
                        },
                    "_wcl_d_Src_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "l_Data" :
                        {
                            "index" : 6,
                            "type" : "uint *",
                            "address-space" : "local",
                            "size-parameter" : "_wcl_l_Data_size"
                        },
                    "_wcl_l_Data_size" :
                        {
                            "index" : 7,
                            "type" : "ulong"
                        },
                    "N" :
                        {
                            "index" : 8,
                            "type" : "uint"
                        },
                    "arrayLength" :
                        {
                            "index" : 9,
                            "type" : "uint"
                        }
                },
            "uniformUpdate" :
                {
                    "d_Data" :
                        {
                            "index" : 0,
                            "type" : "uint4 *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_Data_size"
                        },
                    "_wcl_d_Data_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "d_Buf" :
                        {
                            "index" : 2,
                            "type" : "uint *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_Buf_size"
                        },
                    "_wcl_d_Buf_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        }
                }
        }
}
*/

// WebCL Validator: validation stage.
#define _WCL_ADDRESS_SPACE_private_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_private_ALIGNMENT (8/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_global_MIN (((128 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_global_ALIGNMENT (128/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_local_MIN (((32 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_local_ALIGNMENT (32/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_constant_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_constant_ALIGNMENT (8/CHAR_BIT)
typedef struct {
    uint _wcl_buf[1];
} __attribute__ ((aligned (_WCL_ADDRESS_SPACE_local_ALIGNMENT))) _WclLocals;

typedef struct {
    __global uint4 *scanExclusiveLocal1__d_Dst_min;
    __global uint4 *scanExclusiveLocal1__d_Dst_max;
    __global uint4 *scanExclusiveLocal1__d_Src_min;
    __global uint4 *scanExclusiveLocal1__d_Src_max;
    __global uint *scanExclusiveLocal2__d_Buf_min;
    __global uint *scanExclusiveLocal2__d_Buf_max;
    __global uint *scanExclusiveLocal2__d_Dst_min;
    __global uint *scanExclusiveLocal2__d_Dst_max;
    __global uint *scanExclusiveLocal2__d_Src_min;
    __global uint *scanExclusiveLocal2__d_Src_max;
    __global uint4 *uniformUpdate__d_Data_min;
    __global uint4 *uniformUpdate__d_Data_max;
    __global uint *uniformUpdate__d_Buf_min;
    __global uint *uniformUpdate__d_Buf_max;
} _WclGlobalLimits;

typedef struct {
    __local _WclLocals * _wcl_locals_min;
    __local _WclLocals * _wcl_locals_max;
    __local uint *scanExclusiveLocal1__l_Data_min;
    __local uint *scanExclusiveLocal1__l_Data_max;
    __local uint *scanExclusiveLocal2__l_Data_min;
    __local uint *scanExclusiveLocal2__l_Data_max;
} _WclLocalLimits;

typedef struct {
    _WclGlobalLimits gl;
    __global uint *gn;
    _WclLocalLimits ll;
    __local uint *ln;
} _WclProgramAllocations;

__constant uint _wcl_constant_null[_WCL_ADDRESS_SPACE_constant_MIN] = { 0 };

// => General code that doesn't depend on input.

#define _WCL_MEMCPY(dst, src) for(ulong i = 0; i < sizeof((src))/sizeof((src)[0]); i++) { (dst)[i] = (src)[i]; }

#define _WCL_LAST(type, ptr) (((type)(ptr)) - 1)
#define _WCL_FILLCHAR ((uchar)0xCC)

// POCL crashes at run time if the parameters are local character
// pointers.
typedef uint _WclInitType;

// NOTE: this expects that null pointer is type of uint*
#define _WCL_SET_NULL(type, req_bytes, min, max, null) ( ((((type)max)-((type)min))*sizeof(uint) >= req_bytes) ? ((type)min) : (null) )

#ifdef cl_khr_initialize_memory
#pragma OPENCL EXTENSION cl_khr_initialize_memory : enable
#define _WCL_LOCAL_RANGE_INIT(begin, end)
#else

// be careful to edit this, this has been carefully tuned to work on every OpenCL driver
// e.g. % item_count was added to start[(items_offset+i)] = _WCL_FILLCHAR;
// to prevent compiler crash on Apple GeForce 640M
#define _WCL_LOCAL_RANGE_INIT(begin, end) do {               \
    __local uchar *start = (__local uchar *)begin;           \
    __local uchar *stop = (__local uchar *)end;              \
    const size_t z_items = get_local_size(2);                \
    const size_t yz_items = get_local_size(1) * z_items;     \
    const size_t xyz_items = get_local_size(0) * yz_items;   \
    const size_t item_index =                                \
        (get_local_id(0) * yz_items) +                       \
        (get_local_id(1) * z_items) +                        \
        get_local_id(2);                                     \
    size_t item_count = stop - start;                        \
    size_t items_per_kernel = item_count / xyz_items;        \
    size_t items_offset = items_per_kernel * item_index;     \
    size_t reminders = item_count % xyz_items;               \
    if (item_index < reminders) {                            \
        start[xyz_items*items_per_kernel + item_index] = _WCL_FILLCHAR; \
    }                                                                   \
    for (size_t i = 0; i < items_per_kernel; i++) {                     \
        start[(items_offset+i) % item_count] = _WCL_FILLCHAR;           \
    }                                                                   \
} while (0)                                                             \

#endif // cl_khr_initialize_memory

constant int hd4k_workaround_constant = 0;

// <= General code that doesn't depend on input.

bool _wcl_addr_check_global_7__u_uglobal__uint__Ptr(__global uint *addr, unsigned size, __global uint * min0, __global uint * max0, __global uint * min1, __global uint * max1, __global uint * min2, __global uint * max2, __global uint * min3, __global uint * max3, __global uint * min4, __global uint * max4, __global uint * min5, __global uint * max5, __global uint * min6, __global uint * max6)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max1)) )
        || ( ((addr) >= (min2)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max2)) )
        || ( ((addr) >= (min3)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max3)) )
        || ( ((addr) >= (min4)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max4)) )
        || ( ((addr) >= (min5)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max5)) )
        || ( ((addr) >= (min6)) && ((addr + size - 1) <= _WCL_LAST(__global uint *, max6)) );
}
__global uint *_wcl_addr_clamp_global_7__u_uglobal__uint__Ptr(__global uint *addr, unsigned size, __global uint * min0, __global uint * max0, __global uint * min1, __global uint * max1, __global uint * min2, __global uint * max2, __global uint * min3, __global uint * max3, __global uint * min4, __global uint * max4, __global uint * min5, __global uint * max5, __global uint * min6, __global uint * max6, __global uint * asnull)
{
     return _wcl_addr_check_global_7__u_uglobal__uint__Ptr(addr, size, min0, max0, min1, max1, min2, max2, min3, max3, min4, max4, min5, max5, min6, max6) ? addr : asnull;
}

bool _wcl_addr_check_global_7__u_uglobal__uint4__Ptr(__global uint4 *addr, unsigned size, __global uint4 * min0, __global uint4 * max0, __global uint4 * min1, __global uint4 * max1, __global uint4 * min2, __global uint4 * max2, __global uint4 * min3, __global uint4 * max3, __global uint4 * min4, __global uint4 * max4, __global uint4 * min5, __global uint4 * max5, __global uint4 * min6, __global uint4 * max6)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__global uint4 *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(__global uint4 *, max1)) )
        || ( ((addr) >= (min2)) && ((addr + size - 1) <= _WCL_LAST(__global uint4 *, max2)) )
        || ( ((addr) >= (min3)) && ((addr + size - 1) <= _WCL_LAST(__global uint4 *, max3)) )
        || ( ((addr) >= (min4)) && ((addr + size - 1) <= _WCL_LAST(__global uint4 *, max4)) )
        || ( ((addr) >= (min5)) && ((addr + size - 1) <= _WCL_LAST(__global uint4 *, max5)) )
        || ( ((addr) >= (min6)) && ((addr + size - 1) <= _WCL_LAST(__global uint4 *, max6)) );
}
__global uint4 *_wcl_addr_clamp_global_7__u_uglobal__uint4__Ptr(__global uint4 *addr, unsigned size, __global uint4 * min0, __global uint4 * max0, __global uint4 * min1, __global uint4 * max1, __global uint4 * min2, __global uint4 * max2, __global uint4 * min3, __global uint4 * max3, __global uint4 * min4, __global uint4 * max4, __global uint4 * min5, __global uint4 * max5, __global uint4 * min6, __global uint4 * max6, __global uint4 * asnull)
{
     return _wcl_addr_check_global_7__u_uglobal__uint4__Ptr(addr, size, min0, max0, min1, max1, min2, max2, min3, max3, min4, max4, min5, max5, min6, max6) ? addr : asnull;
}

bool _wcl_addr_check_local_3__u_ulocal__uint__Ptr(__local uint *addr, unsigned size, __local uint * min0, __local uint * max0, __local uint * min1, __local uint * max1, __local uint * min2, __local uint * max2)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__local uint *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(__local uint *, max1)) )
        || ( ((addr) >= (min2)) && ((addr + size - 1) <= _WCL_LAST(__local uint *, max2)) );
}
__local uint *_wcl_addr_clamp_local_3__u_ulocal__uint__Ptr(__local uint *addr, unsigned size, __local uint * min0, __local uint * max0, __local uint * min1, __local uint * max1, __local uint * min2, __local uint * max2, __local uint * asnull)
{
     return _wcl_addr_check_local_3__u_ulocal__uint__Ptr(addr, size, min0, max0, min1, max1, min2, max2) ? addr : asnull;
}


// WebCL Validator: matching stage 2.
// WebCL Validator: matching stage 1.
/*
 * Copyright 1993-2010 NVIDIA Corporation.  All rights reserved.
 *
 * Please refer to the NVIDIA end user license agreement (EULA) associated
 * with this source code for terms and conditions that govern your use of
 * this software. Any use, reproduction, disclosure, or distribution of
 * this software and related documentation outside the terms of the EULA
 * is strictly prohibited.
 *
 */


//Passed down with -D option on clBuildProgram
//Must be a power of two
//#define WORKGROUP_SIZE 256



////////////////////////////////////////////////////////////////////////////////
// Scan codelets
////////////////////////////////////////////////////////////////////////////////

    //Naive inclusive scan: O(N * log2(N)) operations
    //Allocate 2 * 'size' local memory, initialize the first half
    //with 'size' zeros avoiding if(pos >= offset) condition evaluation
    //and saving instructions
    inline uint scan1Inclusive(_WclProgramAllocations *_wcl_allocs, uint idata, __local uint *l_Data, uint size){
        uint pos = 2 * get_local_id(0) - (get_local_id(0) & (size - 1));
        (*(_wcl_addr_clamp_local_3__u_ulocal__uint__Ptr((l_Data)+(pos), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal1__l_Data_min, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal1__l_Data_max, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal2__l_Data_min, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal2__l_Data_max, (__local uint *)_wcl_allocs->ln))) = 0;
        pos += size;
        (*(_wcl_addr_clamp_local_3__u_ulocal__uint__Ptr((l_Data)+(pos), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal1__l_Data_min, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal1__l_Data_max, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal2__l_Data_min, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal2__l_Data_max, (__local uint *)_wcl_allocs->ln))) = idata;

        for(uint offset = 1; offset < size; offset <<= 1){
            barrier(CLK_LOCAL_MEM_FENCE);
            uint t = (*(_wcl_addr_clamp_local_3__u_ulocal__uint__Ptr((l_Data)+(pos), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal1__l_Data_min, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal1__l_Data_max, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal2__l_Data_min, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal2__l_Data_max, (__local uint *)_wcl_allocs->ln))) + (*(_wcl_addr_clamp_local_3__u_ulocal__uint__Ptr((l_Data)+(pos - offset), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal1__l_Data_min, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal1__l_Data_max, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal2__l_Data_min, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal2__l_Data_max, (__local uint *)_wcl_allocs->ln)));
            barrier(CLK_LOCAL_MEM_FENCE);
            (*(_wcl_addr_clamp_local_3__u_ulocal__uint__Ptr((l_Data)+(pos), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal1__l_Data_min, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal1__l_Data_max, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal2__l_Data_min, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal2__l_Data_max, (__local uint *)_wcl_allocs->ln))) = t;
        }

        return (*(_wcl_addr_clamp_local_3__u_ulocal__uint__Ptr((l_Data)+(pos), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal1__l_Data_min, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal1__l_Data_max, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal2__l_Data_min, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal2__l_Data_max, (__local uint *)_wcl_allocs->ln)));
    }

    inline uint scan1Exclusive(_WclProgramAllocations *_wcl_allocs, uint idata, __local uint *l_Data, uint size){
        return scan1Inclusive(_wcl_allocs, idata, l_Data, size) - idata;
    }
//Vector scan: the array to be scanned is stored
//in work-item private memory as uint4
inline uint4 scan4Inclusive(_WclProgramAllocations *_wcl_allocs, uint4 data4, __local uint *l_Data, uint size){
    //Level-0 inclusive scan
    data4.y += data4.x;
    data4.z += data4.y;
    data4.w += data4.z;

    //Level-1 exclusive scan
    uint val = scan1Inclusive(_wcl_allocs, data4.w, l_Data, size / 4) - data4.w;

    return (data4 + (uint4)val);
}

inline uint4 scan4Exclusive(_WclProgramAllocations *_wcl_allocs, uint4 data4, __local uint *l_Data, uint size){
    return scan4Inclusive(_wcl_allocs, data4, l_Data, size) - data4;
}

////////////////////////////////////////////////////////////////////////////////
// Scan kernels
////////////////////////////////////////////////////////////////////////////////
__kernel __attribute__((reqd_work_group_size(256, 1, 1)))
void scanExclusiveLocal1(
    __global uint4 *d_Dst, ulong _wcl_d_Dst_size,
    __global uint4 *d_Src, ulong _wcl_d_Src_size,
    __local uint *l_Data, ulong _wcl_l_Data_size,
    uint size
){

    __local _WclLocals _wcl_locals;
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { &d_Dst[0], &d_Dst[_wcl_d_Dst_size],&d_Src[0], &d_Src[_wcl_d_Src_size],0, 0,0, 0,0, 0,0, 0,0, 0 },
        0,
        { &(&_wcl_locals)[0], &(&_wcl_locals)[1],&l_Data[0], &l_Data[_wcl_l_Data_size],0, 0 },
        _wcl_local_null
    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.scanExclusiveLocal1__d_Dst_min, _wcl_allocs->gl.scanExclusiveLocal1__d_Dst_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.scanExclusiveLocal1__d_Src_min, _wcl_allocs->gl.scanExclusiveLocal1__d_Src_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.scanExclusiveLocal2__d_Buf_min, _wcl_allocs->gl.scanExclusiveLocal2__d_Buf_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.scanExclusiveLocal2__d_Dst_min, _wcl_allocs->gl.scanExclusiveLocal2__d_Dst_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.scanExclusiveLocal2__d_Src_min, _wcl_allocs->gl.scanExclusiveLocal2__d_Src_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.uniformUpdate__d_Data_min, _wcl_allocs->gl.uniformUpdate__d_Data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.uniformUpdate__d_Buf_min, _wcl_allocs->gl.uniformUpdate__d_Buf_max, (__global uint*)0)))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll._wcl_locals_min, _wcl_allocs->ll._wcl_locals_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.scanExclusiveLocal1__l_Data_min, _wcl_allocs->ll.scanExclusiveLocal1__l_Data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.scanExclusiveLocal2__l_Data_min, _wcl_allocs->ll.scanExclusiveLocal2__l_Data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    //Load data
    uint4 idata4 = (*(_wcl_addr_clamp_global_7__u_uglobal__uint4__Ptr((d_Src)+(get_global_id(0)), 1, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal1__d_Dst_min, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal1__d_Dst_max, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal1__d_Src_min, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal1__d_Src_max, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal2__d_Buf_min, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal2__d_Buf_max, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal2__d_Dst_min, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal2__d_Dst_max, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal2__d_Src_min, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal2__d_Src_max, (__global uint4 *)_wcl_allocs->gl.uniformUpdate__d_Data_min, (__global uint4 *)_wcl_allocs->gl.uniformUpdate__d_Data_max, (__global uint4 *)_wcl_allocs->gl.uniformUpdate__d_Buf_min, (__global uint4 *)_wcl_allocs->gl.uniformUpdate__d_Buf_max, (__global uint4 *)_wcl_allocs->gn)));

    //Calculate exclusive scan
    uint4 odata4 = scan4Exclusive(_wcl_allocs, idata4, l_Data, size);

    //Write back
    (*(_wcl_addr_clamp_global_7__u_uglobal__uint4__Ptr((d_Dst)+(get_global_id(0)), 1, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal1__d_Dst_min, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal1__d_Dst_max, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal1__d_Src_min, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal1__d_Src_max, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal2__d_Buf_min, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal2__d_Buf_max, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal2__d_Dst_min, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal2__d_Dst_max, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal2__d_Src_min, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal2__d_Src_max, (__global uint4 *)_wcl_allocs->gl.uniformUpdate__d_Data_min, (__global uint4 *)_wcl_allocs->gl.uniformUpdate__d_Data_max, (__global uint4 *)_wcl_allocs->gl.uniformUpdate__d_Buf_min, (__global uint4 *)_wcl_allocs->gl.uniformUpdate__d_Buf_max, (__global uint4 *)_wcl_allocs->gn))) = odata4;
}

//Exclusive scan of top elements of bottom-level scans (4 * THREADBLOCK_SIZE)
__kernel __attribute__((reqd_work_group_size(256, 1, 1)))
void scanExclusiveLocal2(
    __global uint *d_Buf, ulong _wcl_d_Buf_size,
    __global uint *d_Dst, ulong _wcl_d_Dst_size,
    __global uint *d_Src, ulong _wcl_d_Src_size,
    __local uint *l_Data, ulong _wcl_l_Data_size,
    uint N,
    uint arrayLength
){

    __local _WclLocals _wcl_locals;
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,&d_Buf[0], &d_Buf[_wcl_d_Buf_size],&d_Dst[0], &d_Dst[_wcl_d_Dst_size],&d_Src[0], &d_Src[_wcl_d_Src_size],0, 0,0, 0 },
        0,
        { &(&_wcl_locals)[0], &(&_wcl_locals)[1],0, 0,&l_Data[0], &l_Data[_wcl_l_Data_size] },
        _wcl_local_null
    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.scanExclusiveLocal1__d_Dst_min, _wcl_allocs->gl.scanExclusiveLocal1__d_Dst_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.scanExclusiveLocal1__d_Src_min, _wcl_allocs->gl.scanExclusiveLocal1__d_Src_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.scanExclusiveLocal2__d_Buf_min, _wcl_allocs->gl.scanExclusiveLocal2__d_Buf_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.scanExclusiveLocal2__d_Dst_min, _wcl_allocs->gl.scanExclusiveLocal2__d_Dst_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.scanExclusiveLocal2__d_Src_min, _wcl_allocs->gl.scanExclusiveLocal2__d_Src_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.uniformUpdate__d_Data_min, _wcl_allocs->gl.uniformUpdate__d_Data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.uniformUpdate__d_Buf_min, _wcl_allocs->gl.uniformUpdate__d_Buf_max, (__global uint*)0)))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll._wcl_locals_min, _wcl_allocs->ll._wcl_locals_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.scanExclusiveLocal1__l_Data_min, _wcl_allocs->ll.scanExclusiveLocal1__l_Data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.scanExclusiveLocal2__l_Data_min, _wcl_allocs->ll.scanExclusiveLocal2__l_Data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    //Load top elements
    //Convert results of bottom-level scan back to inclusive
    //Skip loads and stores for inactive work-items of the work-group with highest index(pos >= N)
    uint data = 0;
    if(get_global_id(0) < N)
    data =
        (*(_wcl_addr_clamp_global_7__u_uglobal__uint__Ptr((d_Dst)+((4 * 256 - 1) + (4 * 256) * get_global_id(0)), 1, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal1__d_Dst_min, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal1__d_Dst_max, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal1__d_Src_min, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal1__d_Src_max, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal2__d_Buf_min, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal2__d_Buf_max, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal2__d_Dst_min, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal2__d_Dst_max, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal2__d_Src_min, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal2__d_Src_max, (__global uint *)_wcl_allocs->gl.uniformUpdate__d_Data_min, (__global uint *)_wcl_allocs->gl.uniformUpdate__d_Data_max, (__global uint *)_wcl_allocs->gl.uniformUpdate__d_Buf_min, (__global uint *)_wcl_allocs->gl.uniformUpdate__d_Buf_max, (__global uint *)_wcl_allocs->gn))) +
        (*(_wcl_addr_clamp_global_7__u_uglobal__uint__Ptr((d_Src)+((4 * 256 - 1) + (4 * 256) * get_global_id(0)), 1, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal1__d_Dst_min, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal1__d_Dst_max, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal1__d_Src_min, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal1__d_Src_max, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal2__d_Buf_min, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal2__d_Buf_max, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal2__d_Dst_min, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal2__d_Dst_max, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal2__d_Src_min, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal2__d_Src_max, (__global uint *)_wcl_allocs->gl.uniformUpdate__d_Data_min, (__global uint *)_wcl_allocs->gl.uniformUpdate__d_Data_max, (__global uint *)_wcl_allocs->gl.uniformUpdate__d_Buf_min, (__global uint *)_wcl_allocs->gl.uniformUpdate__d_Buf_max, (__global uint *)_wcl_allocs->gn)));

    //Compute
    uint odata = scan1Exclusive(_wcl_allocs, data, l_Data, arrayLength);

    //Avoid out-of-bound access
    if(get_global_id(0) < N)
        (*(_wcl_addr_clamp_global_7__u_uglobal__uint__Ptr((d_Buf)+(get_global_id(0)), 1, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal1__d_Dst_min, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal1__d_Dst_max, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal1__d_Src_min, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal1__d_Src_max, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal2__d_Buf_min, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal2__d_Buf_max, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal2__d_Dst_min, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal2__d_Dst_max, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal2__d_Src_min, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal2__d_Src_max, (__global uint *)_wcl_allocs->gl.uniformUpdate__d_Data_min, (__global uint *)_wcl_allocs->gl.uniformUpdate__d_Data_max, (__global uint *)_wcl_allocs->gl.uniformUpdate__d_Buf_min, (__global uint *)_wcl_allocs->gl.uniformUpdate__d_Buf_max, (__global uint *)_wcl_allocs->gn))) = odata;
}

//Final step of large-array scan: combine basic inclusive scan with exclusive scan of top elements of input arrays
__kernel __attribute__((reqd_work_group_size(256, 1, 1)))
void uniformUpdate(
    __global uint4 *d_Data, ulong _wcl_d_Data_size,
    __global uint *d_Buf, ulong _wcl_d_Buf_size
){

    __local _WclLocals _wcl_locals;
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,0, 0,&d_Data[0], &d_Data[_wcl_d_Data_size],&d_Buf[0], &d_Buf[_wcl_d_Buf_size] },
        0,
        { &(&_wcl_locals)[0], &(&_wcl_locals)[1],0, 0,0, 0 },
        _wcl_local_null
    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.scanExclusiveLocal1__d_Dst_min, _wcl_allocs->gl.scanExclusiveLocal1__d_Dst_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.scanExclusiveLocal1__d_Src_min, _wcl_allocs->gl.scanExclusiveLocal1__d_Src_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.scanExclusiveLocal2__d_Buf_min, _wcl_allocs->gl.scanExclusiveLocal2__d_Buf_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.scanExclusiveLocal2__d_Dst_min, _wcl_allocs->gl.scanExclusiveLocal2__d_Dst_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.scanExclusiveLocal2__d_Src_min, _wcl_allocs->gl.scanExclusiveLocal2__d_Src_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.uniformUpdate__d_Data_min, _wcl_allocs->gl.uniformUpdate__d_Data_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.uniformUpdate__d_Buf_min, _wcl_allocs->gl.uniformUpdate__d_Buf_max, (__global uint*)0)))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll._wcl_locals_min, _wcl_allocs->ll._wcl_locals_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.scanExclusiveLocal1__l_Data_min, _wcl_allocs->ll.scanExclusiveLocal1__l_Data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.scanExclusiveLocal2__l_Data_min, _wcl_allocs->ll.scanExclusiveLocal2__l_Data_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    __local uint buf[1];

    uint4 data4 = (*(_wcl_addr_clamp_global_7__u_uglobal__uint4__Ptr((d_Data)+(get_global_id(0)), 1, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal1__d_Dst_min, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal1__d_Dst_max, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal1__d_Src_min, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal1__d_Src_max, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal2__d_Buf_min, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal2__d_Buf_max, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal2__d_Dst_min, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal2__d_Dst_max, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal2__d_Src_min, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal2__d_Src_max, (__global uint4 *)_wcl_allocs->gl.uniformUpdate__d_Data_min, (__global uint4 *)_wcl_allocs->gl.uniformUpdate__d_Data_max, (__global uint4 *)_wcl_allocs->gl.uniformUpdate__d_Buf_min, (__global uint4 *)_wcl_allocs->gl.uniformUpdate__d_Buf_max, (__global uint4 *)_wcl_allocs->gn)));

    if(get_local_id(0) == 0)
        (*(_wcl_addr_clamp_local_3__u_ulocal__uint__Ptr((_wcl_locals._wcl_buf)+(0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal1__l_Data_min, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal1__l_Data_max, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal2__l_Data_min, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal2__l_Data_max, (__local uint *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_7__u_uglobal__uint__Ptr((d_Buf)+(get_group_id(0)), 1, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal1__d_Dst_min, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal1__d_Dst_max, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal1__d_Src_min, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal1__d_Src_max, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal2__d_Buf_min, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal2__d_Buf_max, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal2__d_Dst_min, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal2__d_Dst_max, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal2__d_Src_min, (__global uint *)_wcl_allocs->gl.scanExclusiveLocal2__d_Src_max, (__global uint *)_wcl_allocs->gl.uniformUpdate__d_Data_min, (__global uint *)_wcl_allocs->gl.uniformUpdate__d_Data_max, (__global uint *)_wcl_allocs->gl.uniformUpdate__d_Buf_min, (__global uint *)_wcl_allocs->gl.uniformUpdate__d_Buf_max, (__global uint *)_wcl_allocs->gn)));

    barrier(CLK_LOCAL_MEM_FENCE);
    data4 += (uint4)(*(_wcl_addr_clamp_local_3__u_ulocal__uint__Ptr((_wcl_locals._wcl_buf)+(0), 1, (__local uint *)_wcl_allocs->ll._wcl_locals_min, (__local uint *)_wcl_allocs->ll._wcl_locals_max, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal1__l_Data_min, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal1__l_Data_max, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal2__l_Data_min, (__local uint *)_wcl_allocs->ll.scanExclusiveLocal2__l_Data_max, (__local uint *)_wcl_allocs->ln)));
    (*(_wcl_addr_clamp_global_7__u_uglobal__uint4__Ptr((d_Data)+(get_global_id(0)), 1, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal1__d_Dst_min, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal1__d_Dst_max, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal1__d_Src_min, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal1__d_Src_max, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal2__d_Buf_min, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal2__d_Buf_max, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal2__d_Dst_min, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal2__d_Dst_max, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal2__d_Src_min, (__global uint4 *)_wcl_allocs->gl.scanExclusiveLocal2__d_Src_max, (__global uint4 *)_wcl_allocs->gl.uniformUpdate__d_Data_min, (__global uint4 *)_wcl_allocs->gl.uniformUpdate__d_Data_max, (__global uint4 *)_wcl_allocs->gl.uniformUpdate__d_Buf_min, (__global uint4 *)_wcl_allocs->gl.uniformUpdate__d_Buf_max, (__global uint4 *)_wcl_allocs->gn))) = data4;
}
