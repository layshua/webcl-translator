
/* WebCL Validator JSON header
{
    "version" : "1.0",
    "kernels" :
        {
            "QuasirandomGenerator" :
                {
                    "d_Output" :
                        {
                            "index" : 0,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_Output_size"
                        },
                    "_wcl_d_Output_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "c_Table" :
                        {
                            "index" : 2,
                            "type" : "uint *",
                            "address-space" : "constant",
                            "size-parameter" : "_wcl_c_Table_size"
                        },
                    "_wcl_c_Table_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "seed" :
                        {
                            "index" : 4,
                            "type" : "uint"
                        },
                    "N" :
                        {
                            "index" : 5,
                            "type" : "uint"
                        }
                },
            "InverseCND" :
                {
                    "d_Output" :
                        {
                            "index" : 0,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_Output_size"
                        },
                    "_wcl_d_Output_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "pathN" :
                        {
                            "index" : 2,
                            "type" : "uint"
                        },
                    "iDevice" :
                        {
                            "index" : 3,
                            "type" : "uint"
                        },
                    "nDevice" :
                        {
                            "index" : 4,
                            "type" : "uint"
                        }
                }
        }
}
*/

// WebCL Validator: validation stage.
#define _WCL_ADDRESS_SPACE_private_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_private_ALIGNMENT (8/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_global_MIN (((32 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_global_ALIGNMENT (32/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_local_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_local_ALIGNMENT (8/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_constant_MIN (((32 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_constant_ALIGNMENT (32/CHAR_BIT)
typedef struct {
    float _wcl_z;
} __attribute__ ((aligned (_WCL_ADDRESS_SPACE_private_ALIGNMENT))) _WclPrivates;

typedef struct {
    __global float *QuasirandomGenerator__d_Output_min;
    __global float *QuasirandomGenerator__d_Output_max;
    __global float *InverseCND__d_Output_min;
    __global float *InverseCND__d_Output_max;
} _WclGlobalLimits;

typedef struct {
    __constant unsigned int *QuasirandomGenerator__c_Table_min;
    __constant unsigned int *QuasirandomGenerator__c_Table_max;
} _WclConstantLimits;

typedef struct {
    _WclGlobalLimits gl;
    __global uint *gn;
    _WclConstantLimits cl;
    __constant uint *cn;
    _WclPrivates pa;
    __private uint *pn;
} _WclProgramAllocations;

__constant uint _wcl_constant_null[_WCL_ADDRESS_SPACE_constant_MIN] = { 0 };

// => General code that doesn't depend on input.

#define _WCL_MEMCPY(dst, src) for(ulong i = 0; i < sizeof((src))/sizeof((src)[0]); i++) { (dst)[i] = (src)[i]; }

#define _WCL_LAST(type, ptr) (((type)(ptr)) - 1)
#define _WCL_FILLCHAR ((uchar)0xCC)

// POCL crashes at run time if the parameters are local character
// pointers.
typedef uint _WclInitType;

// NOTE: this expects that null pointer is type of uint*
#define _WCL_SET_NULL(type, req_bytes, min, max, null) ( ((((type)max)-((type)min))*sizeof(uint) >= req_bytes) ? ((type)min) : (null) )

#ifdef cl_khr_initialize_memory
#pragma OPENCL EXTENSION cl_khr_initialize_memory : enable
#define _WCL_LOCAL_RANGE_INIT(begin, end)
#else

// be careful to edit this, this has been carefully tuned to work on every OpenCL driver
// e.g. % item_count was added to start[(items_offset+i)] = _WCL_FILLCHAR;
// to prevent compiler crash on Apple GeForce 640M
#define _WCL_LOCAL_RANGE_INIT(begin, end) do {               \
    __local uchar *start = (__local uchar *)begin;           \
    __local uchar *stop = (__local uchar *)end;              \
    const size_t z_items = get_local_size(2);                \
    const size_t yz_items = get_local_size(1) * z_items;     \
    const size_t xyz_items = get_local_size(0) * yz_items;   \
    const size_t item_index =                                \
        (get_local_id(0) * yz_items) +                       \
        (get_local_id(1) * z_items) +                        \
        get_local_id(2);                                     \
    size_t item_count = stop - start;                        \
    size_t items_per_kernel = item_count / xyz_items;        \
    size_t items_offset = items_per_kernel * item_index;     \
    size_t reminders = item_count % xyz_items;               \
    if (item_index < reminders) {                            \
        start[xyz_items*items_per_kernel + item_index] = _WCL_FILLCHAR; \
    }                                                                   \
    for (size_t i = 0; i < items_per_kernel; i++) {                     \
        start[(items_offset+i) % item_count] = _WCL_FILLCHAR;           \
    }                                                                   \
} while (0)                                                             \

#endif // cl_khr_initialize_memory

constant int hd4k_workaround_constant = 0;

// <= General code that doesn't depend on input.

bool _wcl_addr_check_global_2__u_uglobal__float__Ptr(__global float *addr, unsigned size, __global float * min0, __global float * max0, __global float * min1, __global float * max1)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max1)) );
}
__global float *_wcl_addr_clamp_global_2__u_uglobal__float__Ptr(__global float *addr, unsigned size, __global float * min0, __global float * max0, __global float * min1, __global float * max1, __global float * asnull)
{
     return _wcl_addr_check_global_2__u_uglobal__float__Ptr(addr, size, min0, max0, min1, max1) ? addr : asnull;
}

bool _wcl_addr_check_constant_1__u_uconstant__unsigned__int__Ptr(__constant unsigned int *addr, unsigned size, __constant unsigned int * min0, __constant unsigned int * max0)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__constant unsigned int *, max0)) );
}
__constant unsigned int *_wcl_addr_clamp_constant_1__u_uconstant__unsigned__int__Ptr(__constant unsigned int *addr, unsigned size, __constant unsigned int * min0, __constant unsigned int * max0, __constant unsigned int * asnull)
{
     return _wcl_addr_check_constant_1__u_uconstant__unsigned__int__Ptr(addr, size, min0, max0) ? addr : asnull;
}


// WebCL Validator: matching stage 2.
// WebCL Validator: matching stage 1.
/*
 * Copyright 1993-2010 NVIDIA Corporation.  All rights reserved.
 *
 * Please refer to the NVIDIA end user license agreement (EULA) associated
 * with this source code for terms and conditions that govern your use of
 * this software. Any use, reproduction, disclosure, or distribution of
 * this software and related documentation outside the terms of the EULA
 * is strictly prohibited.
 *
 */






////////////////////////////////////////////////////////////////////////////////
// Niederreiter quasirandom number generation kernel
////////////////////////////////////////////////////////////////////////////////
__kernel void QuasirandomGenerator(__global float *d_Output, ulong _wcl_d_Output_size,
                                   __constant unsigned int *c_Table, ulong _wcl_c_Table_size,
                       unsigned int seed,
                       unsigned int N)
{
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { &d_Output[0], &d_Output[_wcl_d_Output_size],0, 0 },
        0,
        { &c_Table[0], &c_Table[_wcl_c_Table_size] },
        _wcl_constant_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.QuasirandomGenerator__d_Output_min, _wcl_allocs->gl.QuasirandomGenerator__d_Output_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.InverseCND__d_Output_min, _wcl_allocs->gl.InverseCND__d_Output_max, (__global uint*)0));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    unsigned int globalID_x = get_global_id(0);
    unsigned int localID_y = get_local_id(1);
    unsigned int globalSize_x = get_global_size(0);

    for (unsigned int pos = globalID_x; pos < N; pos += globalSize_x) {
        unsigned int result = 0;
        unsigned int data = seed + pos;

        for(int bit = 0; bit < 31; bit++, data >>= 1)
            if(data & 1) result ^= (*(_wcl_addr_clamp_constant_1__u_uconstant__unsigned__int__Ptr((c_Table)+(bit+localID_y*31), 1, (__constant unsigned int *)_wcl_allocs->cl.QuasirandomGenerator__c_Table_min, (__constant unsigned int *)_wcl_allocs->cl.QuasirandomGenerator__c_Table_max, (__constant unsigned int *)_wcl_allocs->cn)));

        (*(_wcl_addr_clamp_global_2__u_uglobal__float__Ptr((d_Output)+(localID_y*N + pos), 1, (__global float *)_wcl_allocs->gl.QuasirandomGenerator__d_Output_min, (__global float *)_wcl_allocs->gl.QuasirandomGenerator__d_Output_max, (__global float *)_wcl_allocs->gl.InverseCND__d_Output_min, (__global float *)_wcl_allocs->gl.InverseCND__d_Output_max, (__global float *)_wcl_allocs->gn))) = (float)(result + 1) * (1.0f / (float)0x80000001U);
    }
}

////////////////////////////////////////////////////////////////////////////////
// Moro's Inverse Cumulative Normal Distribution function approximation
////////////////////////////////////////////////////////////////////////////////
float MoroInvCNDgpu(_WclProgramAllocations *_wcl_allocs, unsigned int x)
{
    const float a1 = 2.50662823884f;
    const float a2 = -18.61500062529f;
    const float a3 = 41.39119773534f;
    const float a4 = -25.44106049637f;
    const float b1 = -8.4735109309f;
    const float b2 = 23.08336743743f;
    const float b3 = -21.06224101826f;
    const float b4 = 3.13082909833f;
    const float c1 = 0.337475482272615f;
    const float c2 = 0.976169019091719f;
    const float c3 = 0.160797971491821f;
    const float c4 = 2.76438810333863E-02f;
    const float c5 = 3.8405729373609E-03f;
    const float c6 = 3.951896511919E-04f;
    const float c7 = 3.21767881768E-05f;
    const float c8 = 2.888167364E-07f;
    const float c9 = 3.960315187E-07f;

    float z;

    bool negate = false;

    // Ensure the conversion to floating point will give a value in the
    // range (0,0.5] by restricting the input to the bottom half of the
    // input domain. We will later reflect the result if the input was
    // originally in the top half of the input domain
    if (x >= 0x80000000UL)
    {
        x = 0xffffffffUL - x;
        negate = true;
    }

    // x is now in the range [0,0x80000000) (i.e. [0,0x7fffffff])
    // Convert to floating point in (0,0.5]
    const float x1 = 1.0f / (float)0xffffffffUL;
    const float x2 = x1 / 2.0f;
    float p1 = x * x1 + x2;
    // Convert to floating point in (-0.5,0]
    float p2 = p1 - 0.5f;

    // The input to the Moro inversion is p2 which is in the range
    // (-0.5,0]. This means that our output will be the negative side
    // of the bell curve (which we will reflect if "negate" is true).

    // Main body of the bell curve for |p| < 0.42
    if (p2 > -0.42f)
    {
        _wcl_allocs->pa._wcl_z = p2 * p2;
        _wcl_allocs->pa._wcl_z = p2 * (((a4 * _wcl_allocs->pa._wcl_z + a3) * _wcl_allocs->pa._wcl_z + a2) * _wcl_allocs->pa._wcl_z + a1) / ((((b4 * _wcl_allocs->pa._wcl_z + b3) * _wcl_allocs->pa._wcl_z + b2) * _wcl_allocs->pa._wcl_z + b1) * _wcl_allocs->pa._wcl_z + 1.0f);
    }
    // Special case (Chebychev) for tail
    else
    {
        _wcl_allocs->pa._wcl_z = log(-log(p1));
        _wcl_allocs->pa._wcl_z = - (c1 + _wcl_allocs->pa._wcl_z * (c2 + _wcl_allocs->pa._wcl_z * (c3 + _wcl_allocs->pa._wcl_z * (c4 + _wcl_allocs->pa._wcl_z * (c5 + _wcl_allocs->pa._wcl_z * (c6 + _wcl_allocs->pa._wcl_z * (c7 + _wcl_allocs->pa._wcl_z * (c8 + _wcl_allocs->pa._wcl_z * c9))))))));
    }

    // If the original input (x) was in the top half of the range, reflect
    // to get the positive side of the bell curve
    return negate ? -_wcl_allocs->pa._wcl_z : _wcl_allocs->pa._wcl_z;
}

__kernel void InverseCND(__global float *d_Output, ulong _wcl_d_Output_size,
                      const unsigned int pathN,
                         const unsigned int iDevice,
                         const unsigned int nDevice)
{
local int hd4k_workaround_local;
hd4k_workaround_local = hd4k_workaround_constant;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,&d_Output[0], &d_Output[_wcl_d_Output_size] },
        0,
        { 0, 0 },
        _wcl_constant_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.QuasirandomGenerator__d_Output_min, _wcl_allocs->gl.QuasirandomGenerator__d_Output_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.InverseCND__d_Output_min, _wcl_allocs->gl.InverseCND__d_Output_max, (__global uint*)0));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    const unsigned int distance = ((unsigned int)-1) / (pathN * nDevice + 1);
    const unsigned int globalID = get_global_id(0);
    const unsigned int globalSize = get_global_size(0);

    for(unsigned int pos = globalID; pos < pathN; pos += globalSize){
        unsigned int d = (iDevice*pathN + pos + 1) * distance;
        (*(_wcl_addr_clamp_global_2__u_uglobal__float__Ptr((d_Output)+(pos), 1, (__global float *)_wcl_allocs->gl.QuasirandomGenerator__d_Output_min, (__global float *)_wcl_allocs->gl.QuasirandomGenerator__d_Output_max, (__global float *)_wcl_allocs->gl.InverseCND__d_Output_min, (__global float *)_wcl_allocs->gl.InverseCND__d_Output_max, (__global float *)_wcl_allocs->gn))) = MoroInvCNDgpu(_wcl_allocs, d);
    }
}
