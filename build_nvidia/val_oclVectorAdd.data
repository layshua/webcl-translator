
/* WebCL Validator JSON header
{
    "version" : "1.0",
    "kernels" :
        {
            "VectorAdd" :
                {
                    "a" :
                        {
                            "index" : 0,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_a_size"
                        },
                    "_wcl_a_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "b" :
                        {
                            "index" : 2,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_b_size"
                        },
                    "_wcl_b_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "c" :
                        {
                            "index" : 4,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_c_size"
                        },
                    "_wcl_c_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "iNumElements" :
                        {
                            "index" : 6,
                            "type" : "int"
                        }
                }
        }
}
*/

// WebCL Validator: validation stage.
#define _WCL_ADDRESS_SPACE_private_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_private_ALIGNMENT (8/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_global_MIN (((32 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_global_ALIGNMENT (32/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_local_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_local_ALIGNMENT (8/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_constant_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_constant_ALIGNMENT (8/CHAR_BIT)
typedef struct {
    const __global float *VectorAdd__a_min;
    const __global float *VectorAdd__a_max;
    const __global float *VectorAdd__b_min;
    const __global float *VectorAdd__b_max;
    __global float *VectorAdd__c_min;
    __global float *VectorAdd__c_max;
} _WclGlobalLimits;

typedef struct {
    _WclGlobalLimits gl;
    __global uint *gn;
} _WclProgramAllocations;

__constant uint _wcl_constant_null[_WCL_ADDRESS_SPACE_constant_MIN] = { 0 };

// => General code that doesn't depend on input.

#define _WCL_MEMCPY(dst, src) for(ulong i = 0; i < sizeof((src))/sizeof((src)[0]); i++) { (dst)[i] = (src)[i]; }

#define _WCL_LAST(type, ptr) (((type)(ptr)) - 1)
#define _WCL_FILLCHAR ((uchar)0xCC)

// POCL crashes at run time if the parameters are local character
// pointers.
typedef uint _WclInitType;

// NOTE: this expects that null pointer is type of uint*
#define _WCL_SET_NULL(type, req_bytes, min, max, null) ( ((((type)max)-((type)min))*sizeof(uint) >= req_bytes) ? ((type)min) : (null) )

#ifdef cl_khr_initialize_memory
#pragma OPENCL EXTENSION cl_khr_initialize_memory : enable
#define _WCL_LOCAL_RANGE_INIT(begin, end)
#else

// be careful to edit this, this has been carefully tuned to work on every OpenCL driver
// e.g. % item_count was added to start[(items_offset+i)] = _WCL_FILLCHAR;
// to prevent compiler crash on Apple GeForce 640M
#define _WCL_LOCAL_RANGE_INIT(begin, end) do {               \
    __local uchar *start = (__local uchar *)begin;           \
    __local uchar *stop = (__local uchar *)end;              \
    const size_t z_items = get_local_size(2);                \
    const size_t yz_items = get_local_size(1) * z_items;     \
    const size_t xyz_items = get_local_size(0) * yz_items;   \
    const size_t item_index =                                \
        (get_local_id(0) * yz_items) +                       \
        (get_local_id(1) * z_items) +                        \
        get_local_id(2);                                     \
    size_t item_count = stop - start;                        \
    size_t items_per_kernel = item_count / xyz_items;        \
    size_t items_offset = items_per_kernel * item_index;     \
    size_t reminders = item_count % xyz_items;               \
    if (item_index < reminders) {                            \
        start[xyz_items*items_per_kernel + item_index] = _WCL_FILLCHAR; \
    }                                                                   \
    for (size_t i = 0; i < items_per_kernel; i++) {                     \
        start[(items_offset+i) % item_count] = _WCL_FILLCHAR;           \
    }                                                                   \
} while (0)                                                             \

#endif // cl_khr_initialize_memory

// <= General code that doesn't depend on input.

bool _wcl_addr_check_global_3__u_uglobal__float__Ptr(__global float *addr, unsigned size, __global float * min0, __global float * max0, __global float * min1, __global float * max1, __global float * min2, __global float * max2)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max1)) )
        || ( ((addr) >= (min2)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max2)) );
}
__global float *_wcl_addr_clamp_global_3__u_uglobal__float__Ptr(__global float *addr, unsigned size, __global float * min0, __global float * max0, __global float * min1, __global float * max1, __global float * min2, __global float * max2, __global float * asnull)
{
     return _wcl_addr_check_global_3__u_uglobal__float__Ptr(addr, size, min0, max0, min1, max1, min2, max2) ? addr : asnull;
}

bool _wcl_addr_check_global_3_const___u_uglobal__float__Ptr(const __global float *addr, unsigned size, const __global float * min0, const __global float * max0, const __global float * min1, const __global float * max1, const __global float * min2, const __global float * max2)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(const __global float *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(const __global float *, max1)) )
        || ( ((addr) >= (min2)) && ((addr + size - 1) <= _WCL_LAST(const __global float *, max2)) );
}
const __global float *_wcl_addr_clamp_global_3_const___u_uglobal__float__Ptr(const __global float *addr, unsigned size, const __global float * min0, const __global float * max0, const __global float * min1, const __global float * max1, const __global float * min2, const __global float * max2, const __global float * asnull)
{
     return _wcl_addr_check_global_3_const___u_uglobal__float__Ptr(addr, size, min0, max0, min1, max1, min2, max2) ? addr : asnull;
}


// WebCL Validator: matching stage 2.
// WebCL Validator: matching stage 1.
/*
 * Copyright 1993-2010 NVIDIA Corporation.  All rights reserved.
 *
 * Please refer to the NVIDIA end user license agreement (EULA) associated
 * with this source code for terms and conditions that govern your use of
 * this software. Any use, reproduction, disclosure, or distribution of
 * this software and related documentation outside the terms of the EULA
 * is strictly prohibited.
 *
 */

 // OpenCL Kernel Function for element by element vector addition
__kernel void VectorAdd(__global const float* a, ulong _wcl_a_size, __global const float* b, ulong _wcl_b_size, __global float* c, ulong _wcl_c_size, int iNumElements)
{
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { &a[0], &a[_wcl_a_size],&b[0], &b[_wcl_b_size],&c[0], &c[_wcl_c_size] },
        0
    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.VectorAdd__a_min, _wcl_allocs->gl.VectorAdd__a_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.VectorAdd__b_min, _wcl_allocs->gl.VectorAdd__b_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.VectorAdd__c_min, _wcl_allocs->gl.VectorAdd__c_max, (__global uint*)0)));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // get index into global data array
    int iGID = get_global_id(0);

    // bound check (equivalent to the limit on a 'for' loop for standard/serial C code
    if (iGID >= iNumElements)
    {
        return;
    }

    // add the vector elements
    (*(_wcl_addr_clamp_global_3__u_uglobal__float__Ptr((c)+(iGID), 1, (__global float *)_wcl_allocs->gl.VectorAdd__a_min, (__global float *)_wcl_allocs->gl.VectorAdd__a_max, (__global float *)_wcl_allocs->gl.VectorAdd__b_min, (__global float *)_wcl_allocs->gl.VectorAdd__b_max, (__global float *)_wcl_allocs->gl.VectorAdd__c_min, (__global float *)_wcl_allocs->gl.VectorAdd__c_max, (__global float *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_global_3_const___u_uglobal__float__Ptr((a)+(iGID), 1, (const __global float *)_wcl_allocs->gl.VectorAdd__a_min, (const __global float *)_wcl_allocs->gl.VectorAdd__a_max, (const __global float *)_wcl_allocs->gl.VectorAdd__b_min, (const __global float *)_wcl_allocs->gl.VectorAdd__b_max, (const __global float *)_wcl_allocs->gl.VectorAdd__c_min, (const __global float *)_wcl_allocs->gl.VectorAdd__c_max, (const __global float *)_wcl_allocs->gn))) + (*(_wcl_addr_clamp_global_3_const___u_uglobal__float__Ptr((b)+(iGID), 1, (const __global float *)_wcl_allocs->gl.VectorAdd__a_min, (const __global float *)_wcl_allocs->gl.VectorAdd__a_max, (const __global float *)_wcl_allocs->gl.VectorAdd__b_min, (const __global float *)_wcl_allocs->gl.VectorAdd__b_max, (const __global float *)_wcl_allocs->gl.VectorAdd__c_min, (const __global float *)_wcl_allocs->gl.VectorAdd__c_max, (const __global float *)_wcl_allocs->gn)));
}
