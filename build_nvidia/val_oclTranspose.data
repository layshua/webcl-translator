
/* WebCL Validator JSON header
{
    "version" : "1.0",
    "kernels" :
        {
            "transpose" :
                {
                    "odata" :
                        {
                            "index" : 0,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_odata_size"
                        },
                    "_wcl_odata_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "idata" :
                        {
                            "index" : 2,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_idata_size"
                        },
                    "_wcl_idata_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "offset" :
                        {
                            "index" : 4,
                            "type" : "int"
                        },
                    "width" :
                        {
                            "index" : 5,
                            "type" : "int"
                        },
                    "height" :
                        {
                            "index" : 6,
                            "type" : "int"
                        },
                    "block" :
                        {
                            "index" : 7,
                            "type" : "float *",
                            "address-space" : "local",
                            "size-parameter" : "_wcl_block_size"
                        },
                    "_wcl_block_size" :
                        {
                            "index" : 8,
                            "type" : "ulong"
                        }
                },
            "transpose_naive" :
                {
                    "odata" :
                        {
                            "index" : 0,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_odata_size"
                        },
                    "_wcl_odata_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "idata" :
                        {
                            "index" : 2,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_idata_size"
                        },
                    "_wcl_idata_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "offset" :
                        {
                            "index" : 4,
                            "type" : "int"
                        },
                    "width" :
                        {
                            "index" : 5,
                            "type" : "int"
                        },
                    "height" :
                        {
                            "index" : 6,
                            "type" : "int"
                        }
                },
            "simple_copy" :
                {
                    "odata" :
                        {
                            "index" : 0,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_odata_size"
                        },
                    "_wcl_odata_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "idata" :
                        {
                            "index" : 2,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_idata_size"
                        },
                    "_wcl_idata_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "offset" :
                        {
                            "index" : 4,
                            "type" : "int"
                        },
                    "width" :
                        {
                            "index" : 5,
                            "type" : "int"
                        },
                    "height" :
                        {
                            "index" : 6,
                            "type" : "int"
                        }
                },
            "shared_copy" :
                {
                    "odata" :
                        {
                            "index" : 0,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_odata_size"
                        },
                    "_wcl_odata_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "idata" :
                        {
                            "index" : 2,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_idata_size"
                        },
                    "_wcl_idata_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "offset" :
                        {
                            "index" : 4,
                            "type" : "int"
                        },
                    "width" :
                        {
                            "index" : 5,
                            "type" : "int"
                        },
                    "height" :
                        {
                            "index" : 6,
                            "type" : "int"
                        },
                    "block" :
                        {
                            "index" : 7,
                            "type" : "float *",
                            "address-space" : "local",
                            "size-parameter" : "_wcl_block_size"
                        },
                    "_wcl_block_size" :
                        {
                            "index" : 8,
                            "type" : "ulong"
                        }
                },
            "uncoalesced_copy" :
                {
                    "odata" :
                        {
                            "index" : 0,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_odata_size"
                        },
                    "_wcl_odata_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "idata" :
                        {
                            "index" : 2,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_idata_size"
                        },
                    "_wcl_idata_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "offset" :
                        {
                            "index" : 4,
                            "type" : "int"
                        },
                    "width" :
                        {
                            "index" : 5,
                            "type" : "int"
                        },
                    "height" :
                        {
                            "index" : 6,
                            "type" : "int"
                        }
                }
        }
}
*/

// WebCL Validator: validation stage.
#define _WCL_ADDRESS_SPACE_private_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_private_ALIGNMENT (8/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_global_MIN (((32 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_global_ALIGNMENT (32/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_local_MIN (((32 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_local_ALIGNMENT (32/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_constant_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_constant_ALIGNMENT (8/CHAR_BIT)
typedef struct {
    __global float *transpose__odata_min;
    __global float *transpose__odata_max;
    __global float *transpose__idata_min;
    __global float *transpose__idata_max;
    __global float *transpose_naive__odata_min;
    __global float *transpose_naive__odata_max;
    __global float *transpose_naive__idata_min;
    __global float *transpose_naive__idata_max;
    __global float *simple_copy__odata_min;
    __global float *simple_copy__odata_max;
    __global float *simple_copy__idata_min;
    __global float *simple_copy__idata_max;
    __global float *shared_copy__odata_min;
    __global float *shared_copy__odata_max;
    __global float *shared_copy__idata_min;
    __global float *shared_copy__idata_max;
    __global float *uncoalesced_copy__odata_min;
    __global float *uncoalesced_copy__odata_max;
    __global float *uncoalesced_copy__idata_min;
    __global float *uncoalesced_copy__idata_max;
} _WclGlobalLimits;

typedef struct {
    __local float *transpose__block_min;
    __local float *transpose__block_max;
    __local float *shared_copy__block_min;
    __local float *shared_copy__block_max;
} _WclLocalLimits;

typedef struct {
    _WclGlobalLimits gl;
    __global uint *gn;
    _WclLocalLimits ll;
    __local uint *ln;
} _WclProgramAllocations;

__constant uint _wcl_constant_null[_WCL_ADDRESS_SPACE_constant_MIN] = { 0 };

// => General code that doesn't depend on input.

#define _WCL_MEMCPY(dst, src) for(ulong i = 0; i < sizeof((src))/sizeof((src)[0]); i++) { (dst)[i] = (src)[i]; }

#define _WCL_LAST(type, ptr) (((type)(ptr)) - 1)
#define _WCL_FILLCHAR ((uchar)0xCC)

// POCL crashes at run time if the parameters are local character
// pointers.
typedef uint _WclInitType;

// NOTE: this expects that null pointer is type of uint*
#define _WCL_SET_NULL(type, req_bytes, min, max, null) ( ((((type)max)-((type)min))*sizeof(uint) >= req_bytes) ? ((type)min) : (null) )

#ifdef cl_khr_initialize_memory
#pragma OPENCL EXTENSION cl_khr_initialize_memory : enable
#define _WCL_LOCAL_RANGE_INIT(begin, end)
#else

#define _WCL_LOCAL_RANGE_INIT(begin, end) do {               \
    __local uchar *start = (__local uchar *)begin;           \
    __local uchar *stop = (__local uchar *)end;              \
    const size_t z_items = get_local_size(2);                \
    const size_t yz_items = get_local_size(1) * z_items;     \
    const size_t xyz_items = get_local_size(0) * yz_items;   \
    const size_t item_index =                                \
        (get_local_id(0) * yz_items) +                       \
        (get_local_id(1) * z_items) +                        \
        get_local_id(2);                                     \
    size_t item_count = stop - start;                        \
    size_t items_per_kernel = item_count / xyz_items;        \
    size_t items_offset = items_per_kernel * item_index;     \
    size_t reminders = item_count % xyz_items;               \
    if (item_index < reminders) {                            \
        start[xyz_items*items_per_kernel + item_index] = _WCL_FILLCHAR; \
    }                                                                   \
    for (size_t i = 0; i < items_per_kernel; i++) {                     \
        start[items_offset+i] = _WCL_FILLCHAR;                          \
    }                                                                   \
} while (0)                                                             \

#endif // cl_khr_initialize_memory

// <= General code that doesn't depend on input.

bool _wcl_addr_check_global_10__u_uglobal__float__Ptr(__global float *addr, unsigned size, __global float * min0, __global float * max0, __global float * min1, __global float * max1, __global float * min2, __global float * max2, __global float * min3, __global float * max3, __global float * min4, __global float * max4, __global float * min5, __global float * max5, __global float * min6, __global float * max6, __global float * min7, __global float * max7, __global float * min8, __global float * max8, __global float * min9, __global float * max9)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max1)) )
        || ( ((addr) >= (min2)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max2)) )
        || ( ((addr) >= (min3)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max3)) )
        || ( ((addr) >= (min4)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max4)) )
        || ( ((addr) >= (min5)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max5)) )
        || ( ((addr) >= (min6)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max6)) )
        || ( ((addr) >= (min7)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max7)) )
        || ( ((addr) >= (min8)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max8)) )
        || ( ((addr) >= (min9)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max9)) );
}
__global float *_wcl_addr_clamp_global_10__u_uglobal__float__Ptr(__global float *addr, unsigned size, __global float * min0, __global float * max0, __global float * min1, __global float * max1, __global float * min2, __global float * max2, __global float * min3, __global float * max3, __global float * min4, __global float * max4, __global float * min5, __global float * max5, __global float * min6, __global float * max6, __global float * min7, __global float * max7, __global float * min8, __global float * max8, __global float * min9, __global float * max9, __global float * asnull)
{
     return _wcl_addr_check_global_10__u_uglobal__float__Ptr(addr, size, min0, max0, min1, max1, min2, max2, min3, max3, min4, max4, min5, max5, min6, max6, min7, max7, min8, max8, min9, max9) ? addr : asnull;
}

bool _wcl_addr_check_local_2__u_ulocal__float__Ptr(__local float *addr, unsigned size, __local float * min0, __local float * max0, __local float * min1, __local float * max1)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__local float *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(__local float *, max1)) );
}
__local float *_wcl_addr_clamp_local_2__u_ulocal__float__Ptr(__local float *addr, unsigned size, __local float * min0, __local float * max0, __local float * min1, __local float * max1, __local float * asnull)
{
     return _wcl_addr_check_local_2__u_ulocal__float__Ptr(addr, size, min0, max0, min1, max1) ? addr : asnull;
}


// WebCL Validator: matching stage 2.
// WebCL Validator: matching stage 1.
/*
 * Copyright 1993-2010 NVIDIA Corporation.  All rights reserved.
 *
 * Please refer to the NVIDIA end user license agreement (EULA) associated
 * with this source code for terms and conditions that govern your use of
 * this software. Any use, reproduction, disclosure, or distribution of
 * this software and related documentation outside the terms of the EULA
 * is strictly prohibited.
 *
 */

/* Matrix transpose with OpenCL
* Device code.
*/



// This kernel is optimized to ensure all global reads and writes are coalesced,
// and to avoid bank conflicts in shared memory.  This kernel is up to 11x faster
// than the naive kernel below.  Note that the shared memory array is sized to 
// (BLOCK_DIM+1)*BLOCK_DIM.  This pads each row of the 2D block in shared memory 
// so that bank conflicts do not occur when threads address the array column-wise.
__kernel void transpose(__global float *odata, ulong _wcl_odata_size, __global float *idata, ulong _wcl_idata_size, int offset, int width, int height, __local float* block, ulong _wcl_block_size)
{
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { &odata[0], &odata[_wcl_odata_size],&idata[0], &idata[_wcl_idata_size],0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        0,
        { &block[0], &block[_wcl_block_size],0, 0 },
        _wcl_local_null
    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.transpose__odata_min, _wcl_allocs->gl.transpose__odata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.transpose__idata_min, _wcl_allocs->gl.transpose__idata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.transpose_naive__odata_min, _wcl_allocs->gl.transpose_naive__odata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.transpose_naive__idata_min, _wcl_allocs->gl.transpose_naive__idata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.simple_copy__odata_min, _wcl_allocs->gl.simple_copy__odata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.simple_copy__idata_min, _wcl_allocs->gl.simple_copy__idata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.shared_copy__odata_min, _wcl_allocs->gl.shared_copy__odata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.shared_copy__idata_min, _wcl_allocs->gl.shared_copy__idata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.uncoalesced_copy__odata_min, _wcl_allocs->gl.uncoalesced_copy__odata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.uncoalesced_copy__idata_min, _wcl_allocs->gl.uncoalesced_copy__idata_max, (__global uint*)0))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.transpose__block_min, _wcl_allocs->ll.transpose__block_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.shared_copy__block_min, _wcl_allocs->ll.shared_copy__block_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

 // read the matrix tile into shared memory
 unsigned int xIndex = get_global_id(0);
 unsigned int yIndex = get_global_id(1);

 if((xIndex + offset < width) && (yIndex < height))
 {
  unsigned int index_in = yIndex * width + xIndex + offset;
  (*(_wcl_addr_clamp_local_2__u_ulocal__float__Ptr((block)+(get_local_id(1)*(16 +1)+get_local_id(0)), 1, (__local float *)_wcl_allocs->ll.transpose__block_min, (__local float *)_wcl_allocs->ll.transpose__block_max, (__local float *)_wcl_allocs->ll.shared_copy__block_min, (__local float *)_wcl_allocs->ll.shared_copy__block_max, (__local float *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_10__u_uglobal__float__Ptr((idata)+(index_in), 1, (__global float *)_wcl_allocs->gl.transpose__odata_min, (__global float *)_wcl_allocs->gl.transpose__odata_max, (__global float *)_wcl_allocs->gl.transpose__idata_min, (__global float *)_wcl_allocs->gl.transpose__idata_max, (__global float *)_wcl_allocs->gl.transpose_naive__odata_min, (__global float *)_wcl_allocs->gl.transpose_naive__odata_max, (__global float *)_wcl_allocs->gl.transpose_naive__idata_min, (__global float *)_wcl_allocs->gl.transpose_naive__idata_max, (__global float *)_wcl_allocs->gl.simple_copy__odata_min, (__global float *)_wcl_allocs->gl.simple_copy__odata_max, (__global float *)_wcl_allocs->gl.simple_copy__idata_min, (__global float *)_wcl_allocs->gl.simple_copy__idata_max, (__global float *)_wcl_allocs->gl.shared_copy__odata_min, (__global float *)_wcl_allocs->gl.shared_copy__odata_max, (__global float *)_wcl_allocs->gl.shared_copy__idata_min, (__global float *)_wcl_allocs->gl.shared_copy__idata_max, (__global float *)_wcl_allocs->gl.uncoalesced_copy__odata_min, (__global float *)_wcl_allocs->gl.uncoalesced_copy__odata_max, (__global float *)_wcl_allocs->gl.uncoalesced_copy__idata_min, (__global float *)_wcl_allocs->gl.uncoalesced_copy__idata_max, (__global float *)_wcl_allocs->gn)));
 }

 barrier(CLK_LOCAL_MEM_FENCE);

 // write the transposed matrix tile to global memory
 xIndex = get_group_id(1) * 16 + get_local_id(0);
 yIndex = get_group_id(0) * 16 + get_local_id(1);
 if((xIndex < height) && (yIndex + offset < width))
    {
  unsigned int index_out = yIndex * height + xIndex;
  (*(_wcl_addr_clamp_global_10__u_uglobal__float__Ptr((odata)+(index_out), 1, (__global float *)_wcl_allocs->gl.transpose__odata_min, (__global float *)_wcl_allocs->gl.transpose__odata_max, (__global float *)_wcl_allocs->gl.transpose__idata_min, (__global float *)_wcl_allocs->gl.transpose__idata_max, (__global float *)_wcl_allocs->gl.transpose_naive__odata_min, (__global float *)_wcl_allocs->gl.transpose_naive__odata_max, (__global float *)_wcl_allocs->gl.transpose_naive__idata_min, (__global float *)_wcl_allocs->gl.transpose_naive__idata_max, (__global float *)_wcl_allocs->gl.simple_copy__odata_min, (__global float *)_wcl_allocs->gl.simple_copy__odata_max, (__global float *)_wcl_allocs->gl.simple_copy__idata_min, (__global float *)_wcl_allocs->gl.simple_copy__idata_max, (__global float *)_wcl_allocs->gl.shared_copy__odata_min, (__global float *)_wcl_allocs->gl.shared_copy__odata_max, (__global float *)_wcl_allocs->gl.shared_copy__idata_min, (__global float *)_wcl_allocs->gl.shared_copy__idata_max, (__global float *)_wcl_allocs->gl.uncoalesced_copy__odata_min, (__global float *)_wcl_allocs->gl.uncoalesced_copy__odata_max, (__global float *)_wcl_allocs->gl.uncoalesced_copy__idata_min, (__global float *)_wcl_allocs->gl.uncoalesced_copy__idata_max, (__global float *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_2__u_ulocal__float__Ptr((block)+(get_local_id(0)*(16 +1)+get_local_id(1)), 1, (__local float *)_wcl_allocs->ll.transpose__block_min, (__local float *)_wcl_allocs->ll.transpose__block_max, (__local float *)_wcl_allocs->ll.shared_copy__block_min, (__local float *)_wcl_allocs->ll.shared_copy__block_max, (__local float *)_wcl_allocs->ln)));
 }
}



// This naive transpose kernel suffers from completely non-coalesced writes.
// It can be up to 10x slower than the kernel above for large matrices.
__kernel void transpose_naive(__global float *odata, ulong _wcl_odata_size, __global float* idata, ulong _wcl_idata_size, int offset, int width, int height)
{
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,&odata[0], &odata[_wcl_odata_size],&idata[0], &idata[_wcl_idata_size],0, 0,0, 0,0, 0,0, 0,0, 0,0, 0 },
        0,
        { 0, 0,0, 0 },
        _wcl_local_null
    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.transpose__odata_min, _wcl_allocs->gl.transpose__odata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.transpose__idata_min, _wcl_allocs->gl.transpose__idata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.transpose_naive__odata_min, _wcl_allocs->gl.transpose_naive__odata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.transpose_naive__idata_min, _wcl_allocs->gl.transpose_naive__idata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.simple_copy__odata_min, _wcl_allocs->gl.simple_copy__odata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.simple_copy__idata_min, _wcl_allocs->gl.simple_copy__idata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.shared_copy__odata_min, _wcl_allocs->gl.shared_copy__odata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.shared_copy__idata_min, _wcl_allocs->gl.shared_copy__idata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.uncoalesced_copy__odata_min, _wcl_allocs->gl.uncoalesced_copy__odata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.uncoalesced_copy__idata_min, _wcl_allocs->gl.uncoalesced_copy__idata_max, (__global uint*)0))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.transpose__block_min, _wcl_allocs->ll.transpose__block_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.shared_copy__block_min, _wcl_allocs->ll.shared_copy__block_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    unsigned int xIndex = get_global_id(0);
    unsigned int yIndex = get_global_id(1);

    if (xIndex + offset < width && yIndex < height)
    {
        unsigned int index_in = xIndex + offset + width * yIndex;
        unsigned int index_out = yIndex + height * xIndex;
        (*(_wcl_addr_clamp_global_10__u_uglobal__float__Ptr((odata)+(index_out), 1, (__global float *)_wcl_allocs->gl.transpose__odata_min, (__global float *)_wcl_allocs->gl.transpose__odata_max, (__global float *)_wcl_allocs->gl.transpose__idata_min, (__global float *)_wcl_allocs->gl.transpose__idata_max, (__global float *)_wcl_allocs->gl.transpose_naive__odata_min, (__global float *)_wcl_allocs->gl.transpose_naive__odata_max, (__global float *)_wcl_allocs->gl.transpose_naive__idata_min, (__global float *)_wcl_allocs->gl.transpose_naive__idata_max, (__global float *)_wcl_allocs->gl.simple_copy__odata_min, (__global float *)_wcl_allocs->gl.simple_copy__odata_max, (__global float *)_wcl_allocs->gl.simple_copy__idata_min, (__global float *)_wcl_allocs->gl.simple_copy__idata_max, (__global float *)_wcl_allocs->gl.shared_copy__odata_min, (__global float *)_wcl_allocs->gl.shared_copy__odata_max, (__global float *)_wcl_allocs->gl.shared_copy__idata_min, (__global float *)_wcl_allocs->gl.shared_copy__idata_max, (__global float *)_wcl_allocs->gl.uncoalesced_copy__odata_min, (__global float *)_wcl_allocs->gl.uncoalesced_copy__odata_max, (__global float *)_wcl_allocs->gl.uncoalesced_copy__idata_min, (__global float *)_wcl_allocs->gl.uncoalesced_copy__idata_max, (__global float *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_global_10__u_uglobal__float__Ptr((idata)+(index_in), 1, (__global float *)_wcl_allocs->gl.transpose__odata_min, (__global float *)_wcl_allocs->gl.transpose__odata_max, (__global float *)_wcl_allocs->gl.transpose__idata_min, (__global float *)_wcl_allocs->gl.transpose__idata_max, (__global float *)_wcl_allocs->gl.transpose_naive__odata_min, (__global float *)_wcl_allocs->gl.transpose_naive__odata_max, (__global float *)_wcl_allocs->gl.transpose_naive__idata_min, (__global float *)_wcl_allocs->gl.transpose_naive__idata_max, (__global float *)_wcl_allocs->gl.simple_copy__odata_min, (__global float *)_wcl_allocs->gl.simple_copy__odata_max, (__global float *)_wcl_allocs->gl.simple_copy__idata_min, (__global float *)_wcl_allocs->gl.simple_copy__idata_max, (__global float *)_wcl_allocs->gl.shared_copy__odata_min, (__global float *)_wcl_allocs->gl.shared_copy__odata_max, (__global float *)_wcl_allocs->gl.shared_copy__idata_min, (__global float *)_wcl_allocs->gl.shared_copy__idata_max, (__global float *)_wcl_allocs->gl.uncoalesced_copy__odata_min, (__global float *)_wcl_allocs->gl.uncoalesced_copy__odata_max, (__global float *)_wcl_allocs->gl.uncoalesced_copy__idata_min, (__global float *)_wcl_allocs->gl.uncoalesced_copy__idata_max, (__global float *)_wcl_allocs->gn)));
    }
}


__kernel void simple_copy(__global float *odata, ulong _wcl_odata_size, __global float* idata, ulong _wcl_idata_size, int offset, int width, int height)
{
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,&odata[0], &odata[_wcl_odata_size],&idata[0], &idata[_wcl_idata_size],0, 0,0, 0,0, 0,0, 0 },
        0,
        { 0, 0,0, 0 },
        _wcl_local_null
    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.transpose__odata_min, _wcl_allocs->gl.transpose__odata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.transpose__idata_min, _wcl_allocs->gl.transpose__idata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.transpose_naive__odata_min, _wcl_allocs->gl.transpose_naive__odata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.transpose_naive__idata_min, _wcl_allocs->gl.transpose_naive__idata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.simple_copy__odata_min, _wcl_allocs->gl.simple_copy__odata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.simple_copy__idata_min, _wcl_allocs->gl.simple_copy__idata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.shared_copy__odata_min, _wcl_allocs->gl.shared_copy__odata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.shared_copy__idata_min, _wcl_allocs->gl.shared_copy__idata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.uncoalesced_copy__odata_min, _wcl_allocs->gl.uncoalesced_copy__odata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.uncoalesced_copy__idata_min, _wcl_allocs->gl.uncoalesced_copy__idata_max, (__global uint*)0))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.transpose__block_min, _wcl_allocs->ll.transpose__block_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.shared_copy__block_min, _wcl_allocs->ll.shared_copy__block_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    unsigned int xIndex = get_global_id(0);
    unsigned int yIndex = get_global_id(1);

    if (xIndex + offset < width && yIndex < height)
    {
        unsigned int index_in = xIndex + offset + width * yIndex;
        (*(_wcl_addr_clamp_global_10__u_uglobal__float__Ptr((odata)+(index_in), 1, (__global float *)_wcl_allocs->gl.transpose__odata_min, (__global float *)_wcl_allocs->gl.transpose__odata_max, (__global float *)_wcl_allocs->gl.transpose__idata_min, (__global float *)_wcl_allocs->gl.transpose__idata_max, (__global float *)_wcl_allocs->gl.transpose_naive__odata_min, (__global float *)_wcl_allocs->gl.transpose_naive__odata_max, (__global float *)_wcl_allocs->gl.transpose_naive__idata_min, (__global float *)_wcl_allocs->gl.transpose_naive__idata_max, (__global float *)_wcl_allocs->gl.simple_copy__odata_min, (__global float *)_wcl_allocs->gl.simple_copy__odata_max, (__global float *)_wcl_allocs->gl.simple_copy__idata_min, (__global float *)_wcl_allocs->gl.simple_copy__idata_max, (__global float *)_wcl_allocs->gl.shared_copy__odata_min, (__global float *)_wcl_allocs->gl.shared_copy__odata_max, (__global float *)_wcl_allocs->gl.shared_copy__idata_min, (__global float *)_wcl_allocs->gl.shared_copy__idata_max, (__global float *)_wcl_allocs->gl.uncoalesced_copy__odata_min, (__global float *)_wcl_allocs->gl.uncoalesced_copy__odata_max, (__global float *)_wcl_allocs->gl.uncoalesced_copy__idata_min, (__global float *)_wcl_allocs->gl.uncoalesced_copy__idata_max, (__global float *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_global_10__u_uglobal__float__Ptr((idata)+(index_in), 1, (__global float *)_wcl_allocs->gl.transpose__odata_min, (__global float *)_wcl_allocs->gl.transpose__odata_max, (__global float *)_wcl_allocs->gl.transpose__idata_min, (__global float *)_wcl_allocs->gl.transpose__idata_max, (__global float *)_wcl_allocs->gl.transpose_naive__odata_min, (__global float *)_wcl_allocs->gl.transpose_naive__odata_max, (__global float *)_wcl_allocs->gl.transpose_naive__idata_min, (__global float *)_wcl_allocs->gl.transpose_naive__idata_max, (__global float *)_wcl_allocs->gl.simple_copy__odata_min, (__global float *)_wcl_allocs->gl.simple_copy__odata_max, (__global float *)_wcl_allocs->gl.simple_copy__idata_min, (__global float *)_wcl_allocs->gl.simple_copy__idata_max, (__global float *)_wcl_allocs->gl.shared_copy__odata_min, (__global float *)_wcl_allocs->gl.shared_copy__odata_max, (__global float *)_wcl_allocs->gl.shared_copy__idata_min, (__global float *)_wcl_allocs->gl.shared_copy__idata_max, (__global float *)_wcl_allocs->gl.uncoalesced_copy__odata_min, (__global float *)_wcl_allocs->gl.uncoalesced_copy__odata_max, (__global float *)_wcl_allocs->gl.uncoalesced_copy__idata_min, (__global float *)_wcl_allocs->gl.uncoalesced_copy__idata_max, (__global float *)_wcl_allocs->gn)));
    }
}

__kernel void shared_copy(__global float *odata, ulong _wcl_odata_size, __global float *idata, ulong _wcl_idata_size, int offset, int width, int height, __local float* block, ulong _wcl_block_size)
{
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,&odata[0], &odata[_wcl_odata_size],&idata[0], &idata[_wcl_idata_size],0, 0,0, 0 },
        0,
        { 0, 0,&block[0], &block[_wcl_block_size] },
        _wcl_local_null
    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.transpose__odata_min, _wcl_allocs->gl.transpose__odata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.transpose__idata_min, _wcl_allocs->gl.transpose__idata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.transpose_naive__odata_min, _wcl_allocs->gl.transpose_naive__odata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.transpose_naive__idata_min, _wcl_allocs->gl.transpose_naive__idata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.simple_copy__odata_min, _wcl_allocs->gl.simple_copy__odata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.simple_copy__idata_min, _wcl_allocs->gl.simple_copy__idata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.shared_copy__odata_min, _wcl_allocs->gl.shared_copy__odata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.shared_copy__idata_min, _wcl_allocs->gl.shared_copy__idata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.uncoalesced_copy__odata_min, _wcl_allocs->gl.uncoalesced_copy__odata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.uncoalesced_copy__idata_min, _wcl_allocs->gl.uncoalesced_copy__idata_max, (__global uint*)0))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.transpose__block_min, _wcl_allocs->ll.transpose__block_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.shared_copy__block_min, _wcl_allocs->ll.shared_copy__block_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

 // read the matrix tile into shared memory
 unsigned int xIndex = get_global_id(0);
 unsigned int yIndex = get_global_id(1);

    unsigned int index_in = yIndex * width + xIndex + offset;
 if((xIndex + offset< width) && (yIndex < height))
 {
  (*(_wcl_addr_clamp_local_2__u_ulocal__float__Ptr((block)+(get_local_id(1)*(16 +1)+get_local_id(0)), 1, (__local float *)_wcl_allocs->ll.transpose__block_min, (__local float *)_wcl_allocs->ll.transpose__block_max, (__local float *)_wcl_allocs->ll.shared_copy__block_min, (__local float *)_wcl_allocs->ll.shared_copy__block_max, (__local float *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_10__u_uglobal__float__Ptr((idata)+(index_in), 1, (__global float *)_wcl_allocs->gl.transpose__odata_min, (__global float *)_wcl_allocs->gl.transpose__odata_max, (__global float *)_wcl_allocs->gl.transpose__idata_min, (__global float *)_wcl_allocs->gl.transpose__idata_max, (__global float *)_wcl_allocs->gl.transpose_naive__odata_min, (__global float *)_wcl_allocs->gl.transpose_naive__odata_max, (__global float *)_wcl_allocs->gl.transpose_naive__idata_min, (__global float *)_wcl_allocs->gl.transpose_naive__idata_max, (__global float *)_wcl_allocs->gl.simple_copy__odata_min, (__global float *)_wcl_allocs->gl.simple_copy__odata_max, (__global float *)_wcl_allocs->gl.simple_copy__idata_min, (__global float *)_wcl_allocs->gl.simple_copy__idata_max, (__global float *)_wcl_allocs->gl.shared_copy__odata_min, (__global float *)_wcl_allocs->gl.shared_copy__odata_max, (__global float *)_wcl_allocs->gl.shared_copy__idata_min, (__global float *)_wcl_allocs->gl.shared_copy__idata_max, (__global float *)_wcl_allocs->gl.uncoalesced_copy__odata_min, (__global float *)_wcl_allocs->gl.uncoalesced_copy__odata_max, (__global float *)_wcl_allocs->gl.uncoalesced_copy__idata_min, (__global float *)_wcl_allocs->gl.uncoalesced_copy__idata_max, (__global float *)_wcl_allocs->gn)));
 }

 barrier(CLK_LOCAL_MEM_FENCE);

 if((xIndex < height) && (yIndex+ offset < width))
    {
  (*(_wcl_addr_clamp_global_10__u_uglobal__float__Ptr((odata)+(index_in), 1, (__global float *)_wcl_allocs->gl.transpose__odata_min, (__global float *)_wcl_allocs->gl.transpose__odata_max, (__global float *)_wcl_allocs->gl.transpose__idata_min, (__global float *)_wcl_allocs->gl.transpose__idata_max, (__global float *)_wcl_allocs->gl.transpose_naive__odata_min, (__global float *)_wcl_allocs->gl.transpose_naive__odata_max, (__global float *)_wcl_allocs->gl.transpose_naive__idata_min, (__global float *)_wcl_allocs->gl.transpose_naive__idata_max, (__global float *)_wcl_allocs->gl.simple_copy__odata_min, (__global float *)_wcl_allocs->gl.simple_copy__odata_max, (__global float *)_wcl_allocs->gl.simple_copy__idata_min, (__global float *)_wcl_allocs->gl.simple_copy__idata_max, (__global float *)_wcl_allocs->gl.shared_copy__odata_min, (__global float *)_wcl_allocs->gl.shared_copy__odata_max, (__global float *)_wcl_allocs->gl.shared_copy__idata_min, (__global float *)_wcl_allocs->gl.shared_copy__idata_max, (__global float *)_wcl_allocs->gl.uncoalesced_copy__odata_min, (__global float *)_wcl_allocs->gl.uncoalesced_copy__odata_max, (__global float *)_wcl_allocs->gl.uncoalesced_copy__idata_min, (__global float *)_wcl_allocs->gl.uncoalesced_copy__idata_max, (__global float *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_local_2__u_ulocal__float__Ptr((block)+(get_local_id(1)*(16 +1)+get_local_id(0)), 1, (__local float *)_wcl_allocs->ll.transpose__block_min, (__local float *)_wcl_allocs->ll.transpose__block_max, (__local float *)_wcl_allocs->ll.shared_copy__block_min, (__local float *)_wcl_allocs->ll.shared_copy__block_max, (__local float *)_wcl_allocs->ln)));
 }
}


__kernel void uncoalesced_copy(__global float *odata, ulong _wcl_odata_size, __global float* idata, ulong _wcl_idata_size, int offset, int width, int height)
{
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,0, 0,&odata[0], &odata[_wcl_odata_size],&idata[0], &idata[_wcl_idata_size] },
        0,
        { 0, 0,0, 0 },
        _wcl_local_null
    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.transpose__odata_min, _wcl_allocs->gl.transpose__odata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.transpose__idata_min, _wcl_allocs->gl.transpose__idata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.transpose_naive__odata_min, _wcl_allocs->gl.transpose_naive__odata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.transpose_naive__idata_min, _wcl_allocs->gl.transpose_naive__idata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.simple_copy__odata_min, _wcl_allocs->gl.simple_copy__odata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.simple_copy__idata_min, _wcl_allocs->gl.simple_copy__idata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.shared_copy__odata_min, _wcl_allocs->gl.shared_copy__odata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.shared_copy__idata_min, _wcl_allocs->gl.shared_copy__idata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.uncoalesced_copy__odata_min, _wcl_allocs->gl.uncoalesced_copy__odata_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.uncoalesced_copy__idata_min, _wcl_allocs->gl.uncoalesced_copy__idata_max, (__global uint*)0))))))))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.transpose__block_min, _wcl_allocs->ll.transpose__block_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll.shared_copy__block_min, _wcl_allocs->ll.shared_copy__block_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    unsigned int xIndex = get_global_id(0);
    unsigned int yIndex = get_global_id(1);

    if (xIndex + offset < width && yIndex < height)
    {
        unsigned int index_in = yIndex + height * (xIndex+ offset);
        (*(_wcl_addr_clamp_global_10__u_uglobal__float__Ptr((odata)+(index_in), 1, (__global float *)_wcl_allocs->gl.transpose__odata_min, (__global float *)_wcl_allocs->gl.transpose__odata_max, (__global float *)_wcl_allocs->gl.transpose__idata_min, (__global float *)_wcl_allocs->gl.transpose__idata_max, (__global float *)_wcl_allocs->gl.transpose_naive__odata_min, (__global float *)_wcl_allocs->gl.transpose_naive__odata_max, (__global float *)_wcl_allocs->gl.transpose_naive__idata_min, (__global float *)_wcl_allocs->gl.transpose_naive__idata_max, (__global float *)_wcl_allocs->gl.simple_copy__odata_min, (__global float *)_wcl_allocs->gl.simple_copy__odata_max, (__global float *)_wcl_allocs->gl.simple_copy__idata_min, (__global float *)_wcl_allocs->gl.simple_copy__idata_max, (__global float *)_wcl_allocs->gl.shared_copy__odata_min, (__global float *)_wcl_allocs->gl.shared_copy__odata_max, (__global float *)_wcl_allocs->gl.shared_copy__idata_min, (__global float *)_wcl_allocs->gl.shared_copy__idata_max, (__global float *)_wcl_allocs->gl.uncoalesced_copy__odata_min, (__global float *)_wcl_allocs->gl.uncoalesced_copy__odata_max, (__global float *)_wcl_allocs->gl.uncoalesced_copy__idata_min, (__global float *)_wcl_allocs->gl.uncoalesced_copy__idata_max, (__global float *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_global_10__u_uglobal__float__Ptr((idata)+(index_in), 1, (__global float *)_wcl_allocs->gl.transpose__odata_min, (__global float *)_wcl_allocs->gl.transpose__odata_max, (__global float *)_wcl_allocs->gl.transpose__idata_min, (__global float *)_wcl_allocs->gl.transpose__idata_max, (__global float *)_wcl_allocs->gl.transpose_naive__odata_min, (__global float *)_wcl_allocs->gl.transpose_naive__odata_max, (__global float *)_wcl_allocs->gl.transpose_naive__idata_min, (__global float *)_wcl_allocs->gl.transpose_naive__idata_max, (__global float *)_wcl_allocs->gl.simple_copy__odata_min, (__global float *)_wcl_allocs->gl.simple_copy__odata_max, (__global float *)_wcl_allocs->gl.simple_copy__idata_min, (__global float *)_wcl_allocs->gl.simple_copy__idata_max, (__global float *)_wcl_allocs->gl.shared_copy__odata_min, (__global float *)_wcl_allocs->gl.shared_copy__odata_max, (__global float *)_wcl_allocs->gl.shared_copy__idata_min, (__global float *)_wcl_allocs->gl.shared_copy__idata_max, (__global float *)_wcl_allocs->gl.uncoalesced_copy__odata_min, (__global float *)_wcl_allocs->gl.uncoalesced_copy__odata_max, (__global float *)_wcl_allocs->gl.uncoalesced_copy__idata_min, (__global float *)_wcl_allocs->gl.uncoalesced_copy__idata_max, (__global float *)_wcl_allocs->gn)));
    }
}
