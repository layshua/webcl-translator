
/* WebCL Validator JSON header
{
    "version" : "1.0",
    "kernels" :
        {
            "DCT8x8" :
                {
                    "d_Dst" :
                        {
                            "index" : 0,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_Dst_size"
                        },
                    "_wcl_d_Dst_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "d_Src" :
                        {
                            "index" : 2,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_Src_size"
                        },
                    "_wcl_d_Src_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "stride" :
                        {
                            "index" : 4,
                            "type" : "uint"
                        },
                    "imageH" :
                        {
                            "index" : 5,
                            "type" : "uint"
                        },
                    "imageW" :
                        {
                            "index" : 6,
                            "type" : "uint"
                        }
                },
            "IDCT8x8" :
                {
                    "d_Dst" :
                        {
                            "index" : 0,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_Dst_size"
                        },
                    "_wcl_d_Dst_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "d_Src" :
                        {
                            "index" : 2,
                            "type" : "float *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_d_Src_size"
                        },
                    "_wcl_d_Src_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "stride" :
                        {
                            "index" : 4,
                            "type" : "uint"
                        },
                    "imageH" :
                        {
                            "index" : 5,
                            "type" : "uint"
                        },
                    "imageW" :
                        {
                            "index" : 6,
                            "type" : "uint"
                        }
                }
        }
}
*/

// WebCL Validator: validation stage.
#define _WCL_ADDRESS_SPACE_private_MIN (((32 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_private_ALIGNMENT (32/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_global_MIN (((32 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_global_ALIGNMENT (32/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_local_MIN (((1056 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_local_ALIGNMENT (1024/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_constant_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_constant_ALIGNMENT (8/CHAR_BIT)
typedef struct {
    __local float *_wcl_l_V;
    __local float *_wcl_l_H;
    float _wcl_D[8];
    __local float *_wcl_2_l_V;
    __local float *_wcl_2_l_H;
    float _wcl_2_D[8];
} __attribute__ ((aligned (_WCL_ADDRESS_SPACE_private_ALIGNMENT))) _WclPrivates;

typedef struct {
    float [33] _wcl_l_Transpose[16];
    float [33] _wcl_2_l_Transpose[16];
} __attribute__ ((aligned (_WCL_ADDRESS_SPACE_local_ALIGNMENT))) _WclLocals;

typedef struct {
    __global float *DCT8x8__d_Dst_min;
    __global float *DCT8x8__d_Dst_max;
    __global float *DCT8x8__d_Src_min;
    __global float *DCT8x8__d_Src_max;
    __global float *IDCT8x8__d_Dst_min;
    __global float *IDCT8x8__d_Dst_max;
    __global float *IDCT8x8__d_Src_min;
    __global float *IDCT8x8__d_Src_max;
} _WclGlobalLimits;

typedef struct {
    __local _WclLocals * _wcl_locals_min;
    __local _WclLocals * _wcl_locals_max;
} _WclLocalLimits;

typedef struct {
    _WclGlobalLimits gl;
    __global uint *gn;
    _WclLocalLimits ll;
    __local uint *ln;
    _WclPrivates pa;
    __private uint *pn;
} _WclProgramAllocations;

__constant uint _wcl_constant_null[_WCL_ADDRESS_SPACE_constant_MIN] = { 0 };

// => General code that doesn't depend on input.

#define _WCL_MEMCPY(dst, src) for(ulong i = 0; i < sizeof((src))/sizeof((src)[0]); i++) { (dst)[i] = (src)[i]; }

#define _WCL_LAST(type, ptr) (((type)(ptr)) - 1)
#define _WCL_FILLCHAR ((uchar)0xCC)

// POCL crashes at run time if the parameters are local character
// pointers.
typedef uint _WclInitType;

// NOTE: this expects that null pointer is type of uint*
#define _WCL_SET_NULL(type, req_bytes, min, max, null) ( ((((type)max)-((type)min))*sizeof(uint) >= req_bytes) ? ((type)min) : (null) )

#ifdef cl_khr_initialize_memory
#pragma OPENCL EXTENSION cl_khr_initialize_memory : enable
#define _WCL_LOCAL_RANGE_INIT(begin, end)
#else

#define _WCL_LOCAL_RANGE_INIT(begin, end) do {               \
    __local uchar *start = (__local uchar *)begin;           \
    __local uchar *stop = (__local uchar *)end;              \
    const size_t z_items = get_local_size(2);                \
    const size_t yz_items = get_local_size(1) * z_items;     \
    const size_t xyz_items = get_local_size(0) * yz_items;   \
    const size_t item_index =                                \
        (get_local_id(0) * yz_items) +                       \
        (get_local_id(1) * z_items) +                        \
        get_local_id(2);                                     \
    size_t item_count = stop - start;                        \
    size_t items_per_kernel = item_count / xyz_items;        \
    size_t items_offset = items_per_kernel * item_index;     \
    size_t reminders = item_count % xyz_items;               \
    if (item_index < reminders) {                            \
        start[xyz_items*items_per_kernel + item_index] = _WCL_FILLCHAR; \
    }                                                                   \
    for (size_t i = 0; i < items_per_kernel; i++) {                     \
        start[items_offset+i] = _WCL_FILLCHAR;                          \
    }                                                                   \
} while (0)                                                             \

#endif // cl_khr_initialize_memory

// <= General code that doesn't depend on input.

bool _wcl_addr_check_private_1_float__Ptr(float *addr, unsigned size, float * min0, float * max0)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(float *, max0)) );
}
float *_wcl_addr_clamp_private_1_float__Ptr(float *addr, unsigned size, float * min0, float * max0, float * asnull)
{
     return _wcl_addr_check_private_1_float__Ptr(addr, size, min0, max0) ? addr : asnull;
}

bool _wcl_addr_check_global_4__u_uglobal__float__Ptr(__global float *addr, unsigned size, __global float * min0, __global float * max0, __global float * min1, __global float * max1, __global float * min2, __global float * max2, __global float * min3, __global float * max3)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max1)) )
        || ( ((addr) >= (min2)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max2)) )
        || ( ((addr) >= (min3)) && ((addr + size - 1) <= _WCL_LAST(__global float *, max3)) );
}
__global float *_wcl_addr_clamp_global_4__u_uglobal__float__Ptr(__global float *addr, unsigned size, __global float * min0, __global float * max0, __global float * min1, __global float * max1, __global float * min2, __global float * max2, __global float * min3, __global float * max3, __global float * asnull)
{
     return _wcl_addr_check_global_4__u_uglobal__float__Ptr(addr, size, min0, max0, min1, max1, min2, max2, min3, max3) ? addr : asnull;
}

bool _wcl_addr_check_local_1__u_ulocal__float__(Ptr)[33](__local float (*)[33]addr, unsigned size, __local float (*)[33] min0, __local float (*)[33] max0)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__local float (*)[33], max0)) );
}
__local float (*)[33]_wcl_addr_clamp_local_1__u_ulocal__float__(Ptr)[33](__local float (*)[33]addr, unsigned size, __local float (*)[33] min0, __local float (*)[33] max0, __local float (*)[33] asnull)
{
     return _wcl_addr_check_local_1__u_ulocal__float__(Ptr)[33](addr, size, min0, max0) ? addr : asnull;
}

bool _wcl_addr_check_local_1__u_ulocal__float__Ptr(__local float *addr, unsigned size, __local float * min0, __local float * max0)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__local float *, max0)) );
}
__local float *_wcl_addr_clamp_local_1__u_ulocal__float__Ptr(__local float *addr, unsigned size, __local float * min0, __local float * max0, __local float * asnull)
{
     return _wcl_addr_check_local_1__u_ulocal__float__Ptr(addr, size, min0, max0) ? addr : asnull;
}


// WebCL Validator: matching stage 2.
// WebCL Validator: matching stage 1.
    /*
 * Copyright 1993-2010 NVIDIA Corporation.  All rights reserved.
 *
 * Please refer to the NVIDIA end user license agreement (EULA) associated
 * with this source code for terms and conditions that govern your use of
 * this software. Any use, reproduction, disclosure, or distribution of
 * this software and related documentation outside the terms of the EULA
 * is strictly prohibited.
 *
 */



////////////////////////////////////////////////////////////////////////////////
// Hardcoded unrolled fast 8-point (i)DCT routines
////////////////////////////////////////////////////////////////////////////////
inline void DCT8(_WclProgramAllocations *_wcl_allocs, float *D){
    float X07P = (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(0), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) + (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(7), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn)));
    float X16P = (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(1), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) + (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(6), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn)));
    float X25P = (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(2), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) + (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(5), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn)));
    float X34P = (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(3), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) + (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(4), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn)));

    float X07M = (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(0), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) - (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(7), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn)));
    float X61M = (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(6), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) - (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(1), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn)));
    float X25M = (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(2), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) - (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(5), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn)));
    float X43M = (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(4), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) - (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(3), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn)));

    float X07P34PP = X07P + X34P;
    float X07P34PM = X07P - X34P;
    float X16P25PP = X16P + X25P;
    float X16P25PM = X16P - X25P;

    (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(0), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = 0.35355339059327376220042218105242f * (X07P34PP + X16P25PP);
    (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(2), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = 0.35355339059327376220042218105242f * (1.3065629648763765278566431734272f * X07P34PM + 0.54119610014619698439972320536639f * X16P25PM);
    (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(4), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = 0.35355339059327376220042218105242f * (X07P34PP - X16P25PP);
    (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(6), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = 0.35355339059327376220042218105242f * (0.54119610014619698439972320536639f * X07P34PM - 1.3065629648763765278566431734272f * X16P25PM);

    (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(1), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = 0.35355339059327376220042218105242f * (1.3870398453221474618216191915664f * X07M - 1.1758756024193587169744671046113f * X61M + 0.78569495838710218127789736765722f * X25M - 0.27589937928294301233595756366937f * X43M);
    (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(3), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = 0.35355339059327376220042218105242f * (1.1758756024193587169744671046113f * X07M + 0.27589937928294301233595756366937f * X61M - 1.3870398453221474618216191915664f * X25M + 0.78569495838710218127789736765722f * X43M);
    (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(5), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = 0.35355339059327376220042218105242f * (0.78569495838710218127789736765722f * X07M + 1.3870398453221474618216191915664f * X61M + 0.27589937928294301233595756366937f * X25M - 1.1758756024193587169744671046113f * X43M);
    (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(7), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = 0.35355339059327376220042218105242f * (0.27589937928294301233595756366937f * X07M + 0.78569495838710218127789736765722f * X61M + 1.1758756024193587169744671046113f * X25M + 1.3870398453221474618216191915664f * X43M);
}

inline void IDCT8(_WclProgramAllocations *_wcl_allocs, float *D){
    float Y04P = (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(0), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) + (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(4), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn)));
    float Y2b6eP = 1.3065629648763765278566431734272f * (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(2), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) + 0.54119610014619698439972320536639f * (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(6), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn)));

    float Y04P2b6ePP = Y04P + Y2b6eP;
    float Y04P2b6ePM = Y04P - Y2b6eP;
    float Y7f1aP3c5dPP = 0.27589937928294301233595756366937f * (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(7), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) + 1.3870398453221474618216191915664f * (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(1), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) + 1.1758756024193587169744671046113f * (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(3), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) + 0.78569495838710218127789736765722f * (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(5), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn)));
    float Y7a1fM3d5cMP = 1.3870398453221474618216191915664f * (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(7), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) - 0.27589937928294301233595756366937f * (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(1), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) + 0.78569495838710218127789736765722f * (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(3), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) - 1.1758756024193587169744671046113f * (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(5), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn)));

    float Y04M = (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(0), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) - (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(4), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn)));
    float Y2e6bM = 0.54119610014619698439972320536639f * (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(2), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) - 1.3065629648763765278566431734272f * (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(6), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn)));

    float Y04M2e6bMP = Y04M + Y2e6bM;
    float Y04M2e6bMM = Y04M - Y2e6bM;
    float Y1c7dM3f5aPM = 1.1758756024193587169744671046113f * (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(1), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) - 0.78569495838710218127789736765722f * (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(7), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) - 0.27589937928294301233595756366937f * (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(3), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) - 1.3870398453221474618216191915664f * (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(5), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn)));
    float Y1d7cP3a5fMM = 0.78569495838710218127789736765722f * (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(1), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) + 1.1758756024193587169744671046113f * (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(7), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) - 1.3870398453221474618216191915664f * (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(3), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) + 0.27589937928294301233595756366937f * (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(5), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn)));

    (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(0), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = 0.35355339059327376220042218105242f * (Y04P2b6ePP + Y7f1aP3c5dPP);
    (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(7), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = 0.35355339059327376220042218105242f * (Y04P2b6ePP - Y7f1aP3c5dPP);
    (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(4), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = 0.35355339059327376220042218105242f * (Y04P2b6ePM + Y7a1fM3d5cMP);
    (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(3), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = 0.35355339059327376220042218105242f * (Y04P2b6ePM - Y7a1fM3d5cMP);

    (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(1), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = 0.35355339059327376220042218105242f * (Y04M2e6bMP + Y1c7dM3f5aPM);
    (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(5), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = 0.35355339059327376220042218105242f * (Y04M2e6bMM - Y1d7cP3a5fMM);
    (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(2), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = 0.35355339059327376220042218105242f * (Y04M2e6bMM + Y1d7cP3a5fMM);
    (*(_wcl_addr_clamp_private_1_float__Ptr((D)+(6), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = 0.35355339059327376220042218105242f * (Y04M2e6bMP - Y1c7dM3f5aPM);
}



////////////////////////////////////////////////////////////////////////////////
// 8x8 DCT kernels
////////////////////////////////////////////////////////////////////////////////



__kernel __attribute__((reqd_work_group_size(32, 16 / 8, 1)))
void DCT8x8(
    __global float *d_Dst, ulong _wcl_d_Dst_size,
    __global float *d_Src, ulong _wcl_d_Src_size,
    uint stride,
    uint imageH,
    uint imageW
){

    __local _WclLocals _wcl_locals;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { &d_Dst[0], &d_Dst[_wcl_d_Dst_size],&d_Src[0], &d_Src[_wcl_d_Src_size],0, 0,0, 0 },
        0,
        { &(&_wcl_locals)[0], &(&_wcl_locals)[1] },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.DCT8x8__d_Dst_min, _wcl_allocs->gl.DCT8x8__d_Dst_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.DCT8x8__d_Src_min, _wcl_allocs->gl.DCT8x8__d_Src_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.IDCT8x8__d_Dst_min, _wcl_allocs->gl.IDCT8x8__d_Dst_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.IDCT8x8__d_Src_min, _wcl_allocs->gl.IDCT8x8__d_Src_max, (__global uint*)0))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll._wcl_locals_min, _wcl_allocs->ll._wcl_locals_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    __local float l_Transpose[16][32 + 1];
    const uint localX = get_local_id(0);
    const uint localY = 8 * get_local_id(1);
    const uint modLocalX = localX & (8 - 1);
    const uint globalX = get_group_id(0) * 32 + localX;
    const uint globalY = get_group_id(1) * 16 + localY;

    //Process only full blocks
    if( (globalX - modLocalX + 8 - 1 >= imageW) || (globalY + 8 - 1 >= imageH) )
        return;

    __local float *l_V = &(*(_wcl_addr_clamp_local_1__u_ulocal__float__(Ptr)[33]((_wcl_locals._wcl_l_Transpose)+(localY + 0), 1, (__local float (*)[33])_wcl_allocs->ll._wcl_locals_min, (__local float (*)[33])_wcl_allocs->ll._wcl_locals_max, (__local float (*)[33])_wcl_allocs->ln)))[localX + 0];;_wcl_allocs->pa._wcl_2_l_V = l_V;
    __local float *l_H = &(*(_wcl_addr_clamp_local_1__u_ulocal__float__(Ptr)[33]((_wcl_locals._wcl_l_Transpose)+(localY + modLocalX), 1, (__local float (*)[33])_wcl_allocs->ll._wcl_locals_min, (__local float (*)[33])_wcl_allocs->ll._wcl_locals_max, (__local float (*)[33])_wcl_allocs->ln)))[localX - modLocalX];;_wcl_allocs->pa._wcl_2_l_H = l_H;
    d_Src += globalY * stride + globalX;
    d_Dst += globalY * stride + globalX;

    float D[8];
    for(uint i = 0; i < 8; i++)
        (*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_allocs->pa._wcl_2_l_V)+(i * (32 + 1)), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_4__u_uglobal__float__Ptr((d_Src)+(i * stride), 1, (__global float *)_wcl_allocs->gl.DCT8x8__d_Dst_min, (__global float *)_wcl_allocs->gl.DCT8x8__d_Dst_max, (__global float *)_wcl_allocs->gl.DCT8x8__d_Src_min, (__global float *)_wcl_allocs->gl.DCT8x8__d_Src_max, (__global float *)_wcl_allocs->gl.IDCT8x8__d_Dst_min, (__global float *)_wcl_allocs->gl.IDCT8x8__d_Dst_max, (__global float *)_wcl_allocs->gl.IDCT8x8__d_Src_min, (__global float *)_wcl_allocs->gl.IDCT8x8__d_Src_max, (__global float *)_wcl_allocs->gn)));

    for(uint i = 0; i < 8; i++)
        (*(_wcl_addr_clamp_private_1_float__Ptr((_wcl_allocs->pa._wcl_2_D)+(i), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_allocs->pa._wcl_2_l_H)+(i), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln)));
    DCT8(_wcl_allocs, _wcl_allocs->pa._wcl_2_D);
    for(uint i = 0; i < 8; i++)
        (*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_allocs->pa._wcl_2_l_H)+(i), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_private_1_float__Ptr((_wcl_allocs->pa._wcl_2_D)+(i), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn)));

    for(uint i = 0; i < 8; i++)
        (*(_wcl_addr_clamp_private_1_float__Ptr((_wcl_allocs->pa._wcl_2_D)+(i), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_allocs->pa._wcl_2_l_V)+(i * (32 + 1)), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln)));
    DCT8(_wcl_allocs, _wcl_allocs->pa._wcl_2_D);

    for(uint i = 0; i < 8; i++)
        (*(_wcl_addr_clamp_global_4__u_uglobal__float__Ptr((d_Dst)+(i * stride), 1, (__global float *)_wcl_allocs->gl.DCT8x8__d_Dst_min, (__global float *)_wcl_allocs->gl.DCT8x8__d_Dst_max, (__global float *)_wcl_allocs->gl.DCT8x8__d_Src_min, (__global float *)_wcl_allocs->gl.DCT8x8__d_Src_max, (__global float *)_wcl_allocs->gl.IDCT8x8__d_Dst_min, (__global float *)_wcl_allocs->gl.IDCT8x8__d_Dst_max, (__global float *)_wcl_allocs->gl.IDCT8x8__d_Src_min, (__global float *)_wcl_allocs->gl.IDCT8x8__d_Src_max, (__global float *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_private_1_float__Ptr((_wcl_allocs->pa._wcl_2_D)+(i), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn)));
}

__kernel __attribute__((reqd_work_group_size(32, 16 / 8, 1)))
void IDCT8x8(
    __global float *d_Dst, ulong _wcl_d_Dst_size,
    __global float *d_Src, ulong _wcl_d_Src_size,
    uint stride,
    uint imageH,
    uint imageW
){

    __local _WclLocals _wcl_locals;
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { 0, 0,0, 0,&d_Dst[0], &d_Dst[_wcl_d_Dst_size],&d_Src[0], &d_Src[_wcl_d_Src_size] },
        0,
        { &(&_wcl_locals)[0], &(&_wcl_locals)[1] },
        _wcl_local_null,
        { },
        0

    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.DCT8x8__d_Dst_min, _wcl_allocs->gl.DCT8x8__d_Dst_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.DCT8x8__d_Src_min, _wcl_allocs->gl.DCT8x8__d_Src_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.IDCT8x8__d_Dst_min, _wcl_allocs->gl.IDCT8x8__d_Dst_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.IDCT8x8__d_Src_min, _wcl_allocs->gl.IDCT8x8__d_Src_max, (__global uint*)0))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 
    _wcl_allocs->pn = _WCL_SET_NULL(__private uint*, _WCL_ADDRESS_SPACE_private_MIN, &_wcl_allocs->pa, (&_wcl_allocs->pa + 1), (__private uint*)0);
    if (_wcl_allocs->pn == (__private uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    // => Local memory zeroing.
    _WCL_LOCAL_RANGE_INIT(_wcl_allocs->ll._wcl_locals_min, _wcl_allocs->ll._wcl_locals_max);
    _WCL_LOCAL_RANGE_INIT(_wcl_local_null, _wcl_local_null + _WCL_ADDRESS_SPACE_local_MIN);
    barrier(CLK_LOCAL_MEM_FENCE);
    // <= Local memory zeroing.

    __local float l_Transpose[16][32 + 1];
    const uint localX = get_local_id(0);
    const uint localY = 8 * get_local_id(1);
    const uint modLocalX = localX & (8 - 1);
    const uint globalX = get_group_id(0) * 32 + localX;
    const uint globalY = get_group_id(1) * 16 + localY;

    //Process only full blocks
    if( (globalX - modLocalX + 8 - 1 >= imageW) || (globalY + 8 - 1 >= imageH) )
        return;

    __local float *l_V = &(*(_wcl_addr_clamp_local_1__u_ulocal__float__(Ptr)[33]((_wcl_locals._wcl_2_l_Transpose)+(localY + 0), 1, (__local float (*)[33])_wcl_allocs->ll._wcl_locals_min, (__local float (*)[33])_wcl_allocs->ll._wcl_locals_max, (__local float (*)[33])_wcl_allocs->ln)))[localX + 0];;_wcl_allocs->pa._wcl_l_V = l_V;
    __local float *l_H = &(*(_wcl_addr_clamp_local_1__u_ulocal__float__(Ptr)[33]((_wcl_locals._wcl_2_l_Transpose)+(localY + modLocalX), 1, (__local float (*)[33])_wcl_allocs->ll._wcl_locals_min, (__local float (*)[33])_wcl_allocs->ll._wcl_locals_max, (__local float (*)[33])_wcl_allocs->ln)))[localX - modLocalX];;_wcl_allocs->pa._wcl_l_H = l_H;
    d_Src += globalY * stride + globalX;
    d_Dst += globalY * stride + globalX;

    float D[8];
    for(uint i = 0; i < 8; i++)
        (*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_allocs->pa._wcl_l_V)+(i * (32 + 1)), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_global_4__u_uglobal__float__Ptr((d_Src)+(i * stride), 1, (__global float *)_wcl_allocs->gl.DCT8x8__d_Dst_min, (__global float *)_wcl_allocs->gl.DCT8x8__d_Dst_max, (__global float *)_wcl_allocs->gl.DCT8x8__d_Src_min, (__global float *)_wcl_allocs->gl.DCT8x8__d_Src_max, (__global float *)_wcl_allocs->gl.IDCT8x8__d_Dst_min, (__global float *)_wcl_allocs->gl.IDCT8x8__d_Dst_max, (__global float *)_wcl_allocs->gl.IDCT8x8__d_Src_min, (__global float *)_wcl_allocs->gl.IDCT8x8__d_Src_max, (__global float *)_wcl_allocs->gn)));

    for(uint i = 0; i < 8; i++)
        (*(_wcl_addr_clamp_private_1_float__Ptr((_wcl_allocs->pa._wcl_D)+(i), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_allocs->pa._wcl_l_H)+(i), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln)));
    IDCT8(_wcl_allocs, _wcl_allocs->pa._wcl_D);
    for(uint i = 0; i < 8; i++)
        (*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_allocs->pa._wcl_l_H)+(i), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln))) = (*(_wcl_addr_clamp_private_1_float__Ptr((_wcl_allocs->pa._wcl_D)+(i), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn)));

    for(uint i = 0; i < 8; i++)
        (*(_wcl_addr_clamp_private_1_float__Ptr((_wcl_allocs->pa._wcl_D)+(i), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn))) = (*(_wcl_addr_clamp_local_1__u_ulocal__float__Ptr((_wcl_allocs->pa._wcl_l_V)+(i * (32 + 1)), 1, (__local float *)_wcl_allocs->ll._wcl_locals_min, (__local float *)_wcl_allocs->ll._wcl_locals_max, (__local float *)_wcl_allocs->ln)));
    IDCT8(_wcl_allocs, _wcl_allocs->pa._wcl_D);
    for(uint i = 0; i < 8; i++)
        (*(_wcl_addr_clamp_global_4__u_uglobal__float__Ptr((d_Dst)+(i * stride), 1, (__global float *)_wcl_allocs->gl.DCT8x8__d_Dst_min, (__global float *)_wcl_allocs->gl.DCT8x8__d_Dst_max, (__global float *)_wcl_allocs->gl.DCT8x8__d_Src_min, (__global float *)_wcl_allocs->gl.DCT8x8__d_Src_max, (__global float *)_wcl_allocs->gl.IDCT8x8__d_Dst_min, (__global float *)_wcl_allocs->gl.IDCT8x8__d_Dst_max, (__global float *)_wcl_allocs->gl.IDCT8x8__d_Src_min, (__global float *)_wcl_allocs->gl.IDCT8x8__d_Src_max, (__global float *)_wcl_allocs->gn))) = (*(_wcl_addr_clamp_private_1_float__Ptr((_wcl_allocs->pa._wcl_D)+(i), 1, (float *)&_wcl_allocs->pa, (float *)(&_wcl_allocs->pa + 1), (float *)_wcl_allocs->pn)));
}
