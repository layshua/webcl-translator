
/* WebCL Validator JSON header
{
    "version" : "1.0",
    "kernels" :
        {
            "part2" :
                {
                    "pos" :
                        {
                            "index" : 0,
                            "type" : "float4 *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_pos_size"
                        },
                    "_wcl_pos_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "color" :
                        {
                            "index" : 2,
                            "type" : "float4 *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_color_size"
                        },
                    "_wcl_color_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "vel" :
                        {
                            "index" : 4,
                            "type" : "float4 *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_vel_size"
                        },
                    "_wcl_vel_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "pos_gen" :
                        {
                            "index" : 6,
                            "type" : "float4 *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_pos_gen_size"
                        },
                    "_wcl_pos_gen_size" :
                        {
                            "index" : 7,
                            "type" : "ulong"
                        },
                    "vel_gen" :
                        {
                            "index" : 8,
                            "type" : "float4 *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_vel_gen_size"
                        },
                    "_wcl_vel_gen_size" :
                        {
                            "index" : 9,
                            "type" : "ulong"
                        },
                    "dt" :
                        {
                            "index" : 10,
                            "type" : "float"
                        }
                }
        }
}
*/

// WebCL Validator: validation stage.
#define _WCL_ADDRESS_SPACE_private_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_private_ALIGNMENT (8/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_global_MIN (((128 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_global_ALIGNMENT (128/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_local_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_local_ALIGNMENT (8/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_constant_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_constant_ALIGNMENT (8/CHAR_BIT)
typedef struct {
    __global float4 *part2__pos_min;
    __global float4 *part2__pos_max;
    __global float4 *part2__color_min;
    __global float4 *part2__color_max;
    __global float4 *part2__vel_min;
    __global float4 *part2__vel_max;
    __global float4 *part2__pos_gen_min;
    __global float4 *part2__pos_gen_max;
    __global float4 *part2__vel_gen_min;
    __global float4 *part2__vel_gen_max;
} _WclGlobalLimits;

typedef struct {
    _WclGlobalLimits gl;
    __global uint *gn;
} _WclProgramAllocations;

__constant uint _wcl_constant_null[_WCL_ADDRESS_SPACE_constant_MIN] = { 0 };

// => General code that doesn't depend on input.

#define _WCL_MEMCPY(dst, src) for(ulong i = 0; i < sizeof((src))/sizeof((src)[0]); i++) { (dst)[i] = (src)[i]; }

#define _WCL_LAST(type, ptr) (((type)(ptr)) - 1)
#define _WCL_FILLCHAR ((uchar)0xCC)

// POCL crashes at run time if the parameters are local character
// pointers.
typedef uint _WclInitType;

// NOTE: this expects that null pointer is type of uint*
#define _WCL_SET_NULL(type, req_bytes, min, max, null) ( ((((type)max)-((type)min))*sizeof(uint) >= req_bytes) ? ((type)min) : (null) )

#ifdef cl_khr_initialize_memory
#pragma OPENCL EXTENSION cl_khr_initialize_memory : enable
#define _WCL_LOCAL_RANGE_INIT(begin, end)
#else

#define _WCL_LOCAL_RANGE_INIT(begin, end) do {               \
    __local uchar *start = (__local uchar *)begin;           \
    __local uchar *stop = (__local uchar *)end;              \
    const size_t z_items = get_local_size(2);                \
    const size_t yz_items = get_local_size(1) * z_items;     \
    const size_t xyz_items = get_local_size(0) * yz_items;   \
    const size_t item_index =                                \
        (get_local_id(0) * yz_items) +                       \
        (get_local_id(1) * z_items) +                        \
        get_local_id(2);                                     \
    size_t item_count = stop - start;                        \
    size_t items_per_kernel = item_count / xyz_items;        \
    size_t items_offset = items_per_kernel * item_index;     \
    size_t reminders = item_count % xyz_items;               \
    if (item_index < reminders) {                            \
        start[xyz_items*items_per_kernel + item_index] = _WCL_FILLCHAR; \
    }                                                                   \
    for (size_t i = 0; i < items_per_kernel; i++) {                     \
        start[items_offset+i] = _WCL_FILLCHAR;                          \
    }                                                                   \
} while (0)                                                             \

#endif // cl_khr_initialize_memory

// <= General code that doesn't depend on input.

#define _WCL_ADDR_CHECK_global_5(type, addr, size, min0, max0, min1, max1, min2, max2, min3, max3, min4, max4) \
    ( 0\
    || ( ((addr) >= ((type)min0)) && ((addr + size - 1) <= _WCL_LAST(type, max0)) ) \
        || ( ((addr) >= ((type)min1)) && ((addr + size - 1) <= _WCL_LAST(type, max1)) ) \
            || ( ((addr) >= ((type)min2)) && ((addr + size - 1) <= _WCL_LAST(type, max2)) ) \
                || ( ((addr) >= ((type)min3)) && ((addr + size - 1) <= _WCL_LAST(type, max3)) ) \
                    || ( ((addr) >= ((type)min4)) && ((addr + size - 1) <= _WCL_LAST(type, max4)) ) \
                         )
#define _WCL_ADDR_CLAMP_global_5(type, addr, size, min0, max0, min1, max1, min2, max2, min3, max3, min4, max4, asnull) \
    ( _WCL_ADDR_CHECK_global_5(type, addr, size, min0, max0, min1, max1, min2, max2, min3, max3, min4, max4) ? (addr) : (type)(asnull))


// WebCL Validator: matching stage 2.
// WebCL Validator: matching stage 1.
//#define STRINGIFY(A) #A

//std::string kernel_source = STRINGIFY(
__kernel void part2(__global float4* pos, ulong _wcl_pos_size, __global float4* color, ulong _wcl_color_size, __global float4* vel, ulong _wcl_vel_size, __global float4* pos_gen, ulong _wcl_pos_gen_size, __global float4* vel_gen, ulong _wcl_vel_gen_size, float dt)
{
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { &pos[0], &pos[_wcl_pos_size],&color[0], &color[_wcl_color_size],&vel[0], &vel[_wcl_vel_size],&pos_gen[0], &pos_gen[_wcl_pos_gen_size],&vel_gen[0], &vel_gen[_wcl_vel_gen_size] },
        0
    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.part2__pos_min, _wcl_allocs->gl.part2__pos_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.part2__color_min, _wcl_allocs->gl.part2__color_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.part2__vel_min, _wcl_allocs->gl.part2__vel_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.part2__pos_gen_min, _wcl_allocs->gl.part2__pos_gen_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.part2__vel_gen_min, _wcl_allocs->gl.part2__vel_gen_max, (__global uint*)0)))));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

    //get our index in the array
    unsigned int i = get_global_id(0);
    //copy position and velocity for this iteration to a local variable
    //note: if we were doing many more calculations we would want to have opencl
    //copy to a local memory array to speed up memory access (this will be the subject of a later tutorial)
    float4 p = (*(_WCL_ADDR_CLAMP_global_5(__global float4 *, (pos)+(i), 1, _wcl_allocs->gl.part2__pos_min, _wcl_allocs->gl.part2__pos_max, _wcl_allocs->gl.part2__color_min, _wcl_allocs->gl.part2__color_max, _wcl_allocs->gl.part2__vel_min, _wcl_allocs->gl.part2__vel_max, _wcl_allocs->gl.part2__pos_gen_min, _wcl_allocs->gl.part2__pos_gen_max, _wcl_allocs->gl.part2__vel_gen_min, _wcl_allocs->gl.part2__vel_gen_max, _wcl_allocs->gn)));
    float4 v = (*(_WCL_ADDR_CLAMP_global_5(__global float4 *, (vel)+(i), 1, _wcl_allocs->gl.part2__pos_min, _wcl_allocs->gl.part2__pos_max, _wcl_allocs->gl.part2__color_min, _wcl_allocs->gl.part2__color_max, _wcl_allocs->gl.part2__vel_min, _wcl_allocs->gl.part2__vel_max, _wcl_allocs->gl.part2__pos_gen_min, _wcl_allocs->gl.part2__pos_gen_max, _wcl_allocs->gl.part2__vel_gen_min, _wcl_allocs->gl.part2__vel_gen_max, _wcl_allocs->gn)));

    //we've stored the life in the fourth component of our velocity array
    float life = (*(_WCL_ADDR_CLAMP_global_5(__global float4 *, (vel)+(i), 1, _wcl_allocs->gl.part2__pos_min, _wcl_allocs->gl.part2__pos_max, _wcl_allocs->gl.part2__color_min, _wcl_allocs->gl.part2__color_max, _wcl_allocs->gl.part2__vel_min, _wcl_allocs->gl.part2__vel_max, _wcl_allocs->gl.part2__pos_gen_min, _wcl_allocs->gl.part2__pos_gen_max, _wcl_allocs->gl.part2__vel_gen_min, _wcl_allocs->gl.part2__vel_gen_max, _wcl_allocs->gn))).w;
    //decrease the life by the time step (this value could be adjusted to lengthen or shorten particle life
    life -= dt;
    //if the life is 0 or less we reset the particle's values back to the original values and set life to 1
    if(life <= 0)
    {
        p = (*(_WCL_ADDR_CLAMP_global_5(__global float4 *, (pos_gen)+(i), 1, _wcl_allocs->gl.part2__pos_min, _wcl_allocs->gl.part2__pos_max, _wcl_allocs->gl.part2__color_min, _wcl_allocs->gl.part2__color_max, _wcl_allocs->gl.part2__vel_min, _wcl_allocs->gl.part2__vel_max, _wcl_allocs->gl.part2__pos_gen_min, _wcl_allocs->gl.part2__pos_gen_max, _wcl_allocs->gl.part2__vel_gen_min, _wcl_allocs->gl.part2__vel_gen_max, _wcl_allocs->gn)));
        v = (*(_WCL_ADDR_CLAMP_global_5(__global float4 *, (vel_gen)+(i), 1, _wcl_allocs->gl.part2__pos_min, _wcl_allocs->gl.part2__pos_max, _wcl_allocs->gl.part2__color_min, _wcl_allocs->gl.part2__color_max, _wcl_allocs->gl.part2__vel_min, _wcl_allocs->gl.part2__vel_max, _wcl_allocs->gl.part2__pos_gen_min, _wcl_allocs->gl.part2__pos_gen_max, _wcl_allocs->gl.part2__vel_gen_min, _wcl_allocs->gl.part2__vel_gen_max, _wcl_allocs->gn)));
        life = 1.0;
    }

    //we use a first order euler method to integrate the velocity and position (i'll expand on this in another tutorial)
    //update the velocity to be affected by "gravity" in the z direction
    v.z -= 9.8*dt;
    //update the position with the new velocity
    p.z += v.z*dt;
    //store the updated life in the velocity array
    v.w = life;

    //update the arrays with our newly computed values
    (*(_WCL_ADDR_CLAMP_global_5(__global float4 *, (pos)+(i), 1, _wcl_allocs->gl.part2__pos_min, _wcl_allocs->gl.part2__pos_max, _wcl_allocs->gl.part2__color_min, _wcl_allocs->gl.part2__color_max, _wcl_allocs->gl.part2__vel_min, _wcl_allocs->gl.part2__vel_max, _wcl_allocs->gl.part2__pos_gen_min, _wcl_allocs->gl.part2__pos_gen_max, _wcl_allocs->gl.part2__vel_gen_min, _wcl_allocs->gl.part2__vel_gen_max, _wcl_allocs->gn))) = p;
    (*(_WCL_ADDR_CLAMP_global_5(__global float4 *, (vel)+(i), 1, _wcl_allocs->gl.part2__pos_min, _wcl_allocs->gl.part2__pos_max, _wcl_allocs->gl.part2__color_min, _wcl_allocs->gl.part2__color_max, _wcl_allocs->gl.part2__vel_min, _wcl_allocs->gl.part2__vel_max, _wcl_allocs->gl.part2__pos_gen_min, _wcl_allocs->gl.part2__pos_gen_max, _wcl_allocs->gl.part2__vel_gen_min, _wcl_allocs->gl.part2__vel_gen_max, _wcl_allocs->gn))) = v;

    //you can manipulate the color based on properties of the system
    //here we adjust the alpha
    (*(_WCL_ADDR_CLAMP_global_5(__global float4 *, (color)+(i), 1, _wcl_allocs->gl.part2__pos_min, _wcl_allocs->gl.part2__pos_max, _wcl_allocs->gl.part2__color_min, _wcl_allocs->gl.part2__color_max, _wcl_allocs->gl.part2__vel_min, _wcl_allocs->gl.part2__vel_max, _wcl_allocs->gl.part2__pos_gen_min, _wcl_allocs->gl.part2__pos_gen_max, _wcl_allocs->gl.part2__vel_gen_min, _wcl_allocs->gl.part2__vel_gen_max, _wcl_allocs->gn))).w = life;

}
//);
