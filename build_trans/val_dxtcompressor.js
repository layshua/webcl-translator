
var Module;
if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    }
    var PACKAGE_NAME = '/Volumes/APPLE_MEDIA/WORKSPACE/webcl/webcl-translator/webcl/js/val_dxtcompressor.data';
    var REMOTE_PACKAGE_BASE = 'val_dxtcompressor.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      Module.printErr('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = typeof Module['locateFile'] === 'function' ?
                              Module['locateFile'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);
    var REMOTE_PACKAGE_SIZE = 1040795;
    var PACKAGE_UUID = 'c042f726-f7c1-4736-b656-15b872bf8347';
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onload = function(event) {
        var packageData = xhr.response;
        callback(packageData);
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}
Module['FS_createPath']('/', 'data', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;
        Module['FS_createPreloadedFile'](this.name, null, byteArray, true, true, function() {
          Module['removeRunDependency']('fp ' + that.name);
        }, function() {
          if (that.audio) {
            Module['removeRunDependency']('fp ' + that.name); // workaround for chromium bug 124926 (still no audio with this, but at least we don't hang)
          } else {
            Module.printErr('Preloading file ' + that.name + ' failed');
          }
        }, false, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        this.requests[this.name] = null;
      },
    };
      new DataRequest(0, 131200, 0, 0).open('GET', '/data/lena_ref.dds');
    new DataRequest(131200, 917647, 0, 0).open('GET', '/data/lena.ppm');
    new DataRequest(917647, 1040795, 0, 0).open('GET', '/DXTCompressor_kernel.cl');

    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
      // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though.
      var ptr = Module['_malloc'](byteArray.length);
      Module['HEAPU8'].set(byteArray, ptr);
      DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
          DataRequest.prototype.requests["/data/lena_ref.dds"].onload();
          DataRequest.prototype.requests["/data/lena.ppm"].onload();
          DataRequest.prototype.requests["/DXTCompressor_kernel.cl"].onload();
          Module['removeRunDependency']('datafile_/Volumes/APPLE_MEDIA/WORKSPACE/webcl/webcl-translator/webcl/js/val_dxtcompressor.data');

    };
    Module['addRunDependency']('datafile_/Volumes/APPLE_MEDIA/WORKSPACE/webcl/webcl-translator/webcl/js/val_dxtcompressor.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  } else {
    Module['thisProgram'] = 'unknown-program';
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 21728;
  /* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__I_a() } });
  

/* memory initializer */ allocate([32,32,67,76,95,68,69,86,73,67,69,95,78,65,77,69,58,32,9,9,9,37,115,10,0,0,0,0,0,0,0,0,32,32,67,76,95,68,69,86,73,67,69,95,86,69,78,68,79,82,58,32,9,9,9,37,115,10,0,0,0,0,0,0,32,32,67,76,95,68,82,73,86,69,82,95,86,69,82,83,73,79,78,58,32,9,9,9,37,115,10,0,0,0,0,0,32,32,67,76,95,68,69,86,73,67,69,95,84,89,80,69,58,9,9,9,37,115,10,0,67,76,95,68,69,86,73,67,69,95,84,89,80,69,95,67,80,85,0,0,0,0,0,0,67,76,95,68,69,86,73,67,69,95,84,89,80,69,95,71,80,85,0,0,0,0,0,0,67,76,95,68,69,86,73,67,69,95,84,89,80,69,95,65,67,67,69,76,69,82,65,84,79,82,0,0,0,0,0,0,67,76,95,68,69,86,73,67,69,95,84,89,80,69,95,68,69,70,65,85,76,84,0,0,32,32,67,76,95,68,69,86,73,67,69,95,77,65,88,95,67,79,77,80,85,84,69,95,85,78,73,84,83,58,9,9,37,117,10,0,0,0,0,0,32,32,67,76,95,68,69,86,73,67,69,95,77,65,88,95,87,79,82,75,95,73,84,69,77,95,68,73,77,69,78,83,73,79,78,83,58,9,37,117,10,0,0,0,0,0,0,0,32,32,67,76,95,68,69,86,73,67,69,95,77,65,88,95,87,79,82,75,95,73,84,69,77,95,83,73,90,69,83,58,9,37,117,32,47,32,37,117,32,47,32,37,117,32,10,0,32,32,67,76,95,68,69,86,73,67,69,95,77,65,88,95,87,79,82,75,95,71,82,79,85,80,95,83,73,90,69,58,9,37,117,10,0,0,0,0,32,32,67,76,95,68,69,86,73,67,69,95,77,65,88,95,67,76,79,67,75,95,70,82,69,81,85,69,78,67,89,58,9,37,117,32,77,72,122,10,0,0,0,0,0,0,0,0,32,32,67,76,95,68,69,86,73,67,69,95,65,68,68,82,69,83,83,95,66,73,84,83,58,9,9,37,117,10,0,0,32,32,67,76,95,68,69,86,73,67,69,95,77,65,88,95,77,69,77,95,65,76,76,79,67,95,83,73,90,69,58,9,9,37,117,32,77,66,121,116,101,10,0,0,0,0,0,0,32,32,67,76,95,68,69,86,73,67,69,95,71,76,79,66,65,76,95,77,69,77,95,83,73,90,69,58,9,9,37,117,32,77,66,121,116,101,10,0,32,32,67,76,95,68,69,86,73,67,69,95,69,82,82,79,82,95,67,79,82,82,69,67,84,73,79,78,95,83,85,80,80,79,82,84,58,9,37,115,10,0,0,0,0,0,0,0,121,101,115,0,0,0,0,0,110,111,0,0,0,0,0,0,32,32,67,76,95,68,69,86,73,67,69,95,76,79,67,65,76,95,77,69,77,95,84,89,80,69,58,9,9,37,115,10,0,0,0,0,0,0,0,0,108,111,99,97,108,0,0,0,103,108,111,98,97,108,0,0,32,32,67,76,95,68,69,86,73,67,69,95,76,79,67,65,76,95,77,69,77,95,83,73,90,69,58,9,9,37,117,32,75,66,121,116,101,10,0,0,32,32,67,76,95,68,69,86,73,67,69,95,77,65,88,95,67,79,78,83,84,65,78,84,95,66,85,70,70,69,82,95,83,73,90,69,58,9,37,117,32,75,66,121,116,101,10,0,32,32,67,76,95,68,69,86,73,67,69,95,81,85,69,85,69,95,80,82,79,80,69,82,84,73,69,83,58,9,9,37,115,10,0,0,0,0,0,0,67,76,95,81,85,69,85,69,95,79,85,84,95,79,70,95,79,82,68,69,82,95,69,88,69,67,95,77,79,68,69,95,69,78,65,66,76,69,0,0,67,76,95,81,85,69,85,69,95,80,82,79,70,73,76,73,78,71,95,69,78,65,66,76,69,0,0,0,0,0,0,0,32,32,67,76,95,68,69,86,73,67,69,95,73,77,65,71,69,95,83,85,80,80,79,82,84,58,9,9,37,117,10,0,32,32,67,76,95,68,69,86,73,67,69,95,77,65,88,95,82,69,65,68,95,73,77,65,71,69,95,65,82,71,83,58,9,37,117,10,0,0,0,0,32,32,67,76,95,68,69,86,73,67,69,95,77,65,88,95,87,82,73,84,69,95,73,77,65,71,69,95,65,82,71,83,58,9,37,117,10,0,0,0,10,32,32,67,76,95,68,69,86,73,67,69,95,73,77,65,71,69,32,60,100,105,109,62,0,0,0,0,0,0,0,0,9,9,9,50,68,95,77,65,88,95,87,73,68,84,72,9,32,37,117,10,0,0,0,0,9,9,9,9,9,50,68,95,77,65,88,95,72,69,73,71,72,84,9,32,37,117,10,0,9,9,9,9,9,51,68,95,77,65,88,95,87,73,68,84,72,9,32,37,117,10,0,0,9,9,9,9,9,51,68,95,77,65,88,95,72,69,73,71,72,84,9,32,37,117,10,0,9,9,9,9,9,51,68,95,77,65,88,95,68,69,80,84,72,9,32,37,117,10,0,0,10,32,32,67,76,95,68,69,86,73,67,69,95,69,88,84,69,78,83,73,79,78,83,58,0,0,0,0,0,0,0,0,99,108,95,110,118,95,100,101,118,105,99,101,95,97,116,116,114,105,98,117,116,101,95,113,117,101,114,121,0,0,0,0,9,9,0,0,0,0,0,0,9,9,9,37,115,10,0,0,10,32,32,67,76,95,78,86,95,68,69,86,73,67,69,95,67,79,77,80,85,84,69,95,67,65,80,65,66,73,76,73,84,89,58,9,37,117,46,37,117,10,0,0,0,0,0,0,32,32,67,76,95,78,86,95,68,69,86,73,67,69,95,82,69,71,73,83,84,69,82,83,95,80,69,82,95,66,76,79,67,75,58,9,37,117,10,0,32,32,67,76,95,78,86,95,68,69,86,73,67,69,95,87,65,82,80,95,83,73,90,69,58,9,9,37,117,10,0,0,32,32,67,76,95,78,86,95,68,69,86,73,67,69,95,71,80,85,95,79,86,69,82,76,65,80,58,9,9,37,115,10,0,0,0,0,0,0,0,0,67,76,95,84,82,85,69,0,67,76,95,70,65,76,83,69,0,0,0,0,0,0,0,0,32,32,67,76,95,78,86,95,68,69,86,73,67,69,95,75,69,82,78,69,76,95,69,88,69,67,95,84,73,77,69,79,85,84,58,9,37,115,10,0,32,32,67,76,95,78,86,95,68,69,86,73,67,69,95,73,78,84,69,71,82,65,84,69,68,95,77,69,77,79,82,89,58,9,37,115,10,0,0,0,32,32,67,76,95,68,69,86,73,67,69,95,80,82,69,70,69,82,82,69,68,95,86,69,67,84,79,82,95,87,73,68,84,72,95,60,116,62,9,0,67,72,65,82,32,37,117,44,32,83,72,79,82,84,32,37,117,44,32,73,78,84,32,37,117,44,32,70,76,79,65,84,32,37,117,44,32,68,79,85,66,76,69,32,37,117,10,10,10,0,0,0,0,0,0,0,114,98,0,0,0,0,0,0,10,87,114,105,116,105,110,103,32,112,116,120,32,116,111,32,115,101,112,97,114,97,116,101,32,102,105,108,101,58,32,37,115,32,46,46,46,10,10,0,119,98,0,0,0,0,0,0,10,37,115,10,80,114,111,103,114,97,109,32,66,105,110,97,114,121,58,10,37,115,10,37,115,10,0,0,0,0,0,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,10,0,0,0,0,10,37,115,10,66,117,105,108,100,32,76,111,103,58,10,37,115,10,37,115,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,47,115,104,97,114,101,100,47,115,114,99,47,99,109,100,95,97,114,103,95,114,101,97,100,101,114,46,99,112,112,0,78,111,32,99,111,109,109,97,110,100,32,108,105,110,101,32,97,114,103,117,109,101,110,116,115,32,103,105,118,101,110,46,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,0,0,168,77,0,0,144,7,0,0,152,78,0,0,80,7,0,0,0,0,0,0,1,0,0,0,184,7,0,0,0,0,0,0,73,110,118,97,108,105,100,32,99,111,109,109,97,110,100,32,108,105,110,101,32,97,114,103,117,109,101,110,116,46,0,0,70,76,65,71,0,0,0,0,69,120,99,101,112,116,105,111,110,32,105,110,32,102,105,108,101,32,39,0,0,0,0,0,39,32,105,110,32,108,105,110,101,32,0,0,0,0,0,0,10,0,0,0,0,0,0,0,68,101,116,97,105,108,101,100,32,100,101,115,99,114,105,112,116,105,111,110,58,32,0,0,57,69,120,99,101,112,116,105,111,110,73,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,69,0,0,0,0,0,56,78,0,0,72,8,0,0,168,75,0,0,0,0,0,0,64,0,0,0,0,0,0,0,184,9,0,0,1,0,0,0,2,0,0,0,56,0,0,0,248,255,255,255,184,9,0,0,3,0,0,0,4,0,0,0,192,255,255,255,192,255,255,255,184,9,0,0,5,0,0,0,6,0,0,0,0,0,0,0,132,8,0,0,236,8,0,0,44,9,0,0,64,9,0,0,84,9,0,0,104,9,0,0,20,9,0,0,0,9,0,0,172,8,0,0,152,8,0,0,64,0,0,0,0,0,0,0,136,35,0,0,7,0,0,0,8,0,0,0,56,0,0,0,248,255,255,255,136,35,0,0,9,0,0,0,10,0,0,0,192,255,255,255,192,255,255,255,136,35,0,0,11,0,0,0,12,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,104,34,0,0,13,0,0,0,14,0,0,0,192,255,255,255,192,255,255,255,104,34,0,0,15,0,0,0,16,0,0,0,56,0,0,0,0,0,0,0,248,34,0,0,17,0,0,0,18,0,0,0,200,255,255,255,200,255,255,255,248,34,0,0,19,0,0,0,20,0,0,0,78,83,116,51,95,95,49,49,56,98,97,115,105,99,95,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,0,56,78,0,0,112,9,0,0,136,35,0,0,0,0,0,0,0,0,0,0,80,10,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,105,110,103,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,0,0,0,0,56,78,0,0,8,10,0,0,240,33,0,0,0,0,0,0,0,0,0,0,104,8,0,0,35,0,0,0,36,0,0,0,37,0,0,0,0,0,0,0,57,69,120,99,101,112,116,105,111,110,73,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,69,0,0,0,56,78,0,0,120,10,0,0,80,76,0,0,0,0,0,0,0,0,0,0,152,10,0,0,38,0,0,0,39,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,100,107,76,111,103,102,105,108,101,79,112,101,110,67,76,46,116,120,116,0,0,0,0,97,43,0,0,0,0,0,0,119,0,0,0,0,0,0,0,83,100,107,77,97,115,116,101,114,76,111,103,79,112,101,110,67,76,46,99,115,118,0,0,10,32,33,33,33,32,69,114,114,111,114,32,35,32,37,105,32,97,116,32,0,0,0,0,37,115,0,0,0,0,0,0,37,105,0,0,0,0,0,0,37,117,0,0,0,0,0,0,37,101,0,0,0,0,0,0,37,102,0,0,0,0,0,0,37,46,51,102,0,0,0,0,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,10,0,0,0,0,46,47,0,0,0,0,0,0,46,47,100,97,116,97,47,0,46,47,115,114,99,47,0,0,46,47,105,110,99,47,0,0,46,46,47,0,0,0,0,0,46,46,47,100,97,116,97,47,0,0,0,0,0,0,0,0,46,46,47,115,114,99,47,0,46,46,47,105,110,99,47,0,46,46,47,46,46,47,0,0,46,46,47,46,46,47,100,97,116,97,47,0,0,0,0,0,46,46,47,46,46,47,115,114,99,47,0,0,0,0,0,0,46,46,47,46,46,47,105,110,99,47,0,0,0,0,0,0,46,46,47,46,46,47,46,46,47,115,114,99,47,60,101,120,101,99,117,116,97,98,108,101,95,110,97,109,101,62,47,0,46,46,47,46,46,47,46,46,47,115,114,99,47,60,101,120,101,99,117,116,97,98,108,101,95,110,97,109,101,62,47,100,97,116,97,47,0,0,0,0,46,46,47,46,46,47,46,46,47,115,114,99,47,60,101,120,101,99,117,116,97,98,108,101,95,110,97,109,101,62,47,115,114,99,47,0,0,0,0,0,46,46,47,46,46,47,46,46,47,115,114,99,47,60,101,120,101,99,117,116,97,98,108,101,95,110,97,109,101,62,47,105,110,99,47,0,0,0,0,0,46,46,47,46,46,47,46,46,47,115,97,109,112,108,101,115,95,110,118,105,100,105,97,47,60,101,120,101,99,117,116,97,98,108,101,95,110,97,109,101,62,47,0,0,0,0,0,0,46,46,47,46,46,47,46,46,47,115,97,109,112,108,101,115,95,110,118,105,100,105,97,47,60,101,120,101,99,117,116,97,98,108,101,95,110,97,109,101,62,47,100,97,116,97,47,0,46,46,47,46,46,47,46,46,47,115,97,109,112,108,101,115,95,110,118,105,100,105,97,47,60,101,120,101,99,117,116,97,98,108,101,95,110,97,109,101,62,47,115,114,99,47,0,0,46,46,47,46,46,47,46,46,47,115,97,109,112,108,101,115,95,110,118,105,100,105,97,47,60,101,120,101,99,117,116,97,98,108,101,95,110,97,109,101,62,47,105,110,99,47,0,0,46,46,47,46,46,47,46,46,47,115,97,110,100,98,111,120,47,60,101,120,101,99,117,116,97,98,108,101,95,110,97,109,101,62,47,0,0,0,0,0,46,46,47,46,46,47,46,46,47,115,97,110,100,98,111,120,47,60,101,120,101,99,117,116,97,98,108,101,95,110,97,109,101,62,47,100,97,116,97,47,0,0,0,0,0,0,0,0,46,46,47,46,46,47,46,46,47,115,97,110,100,98,111,120,47,60,101,120,101,99,117,116,97,98,108,101,95,110,97,109,101,62,47,115,114,99,47,0,46,46,47,46,46,47,46,46,47,115,97,110,100,98,111,120,47,60,101,120,101,99,117,116,97,98,108,101,95,110,97,109,101,62,47,105,110,99,47,0,192,11,0,0,200,11,0,0,208,11,0,0,216,11,0,0,224,11,0,0,232,11,0,0,248,11,0,0,0,12,0,0,8,12,0,0,16,12,0,0,32,12,0,0,48,12,0,0,64,12,0,0,96,12,0,0,136,12,0,0,176,12,0,0,216,12,0,0,8,13,0,0,56,13,0,0,104,13,0,0,152,13,0,0,192,13,0,0,240,13,0,0,24,14,0,0,60,101,120,101,99,117,116,97,98,108,101,95,110,97,109,101,62,0,0,0,0,0,0,0,114,98,0,0,0,0,0,0,108,111,97,100,80,80,77,40,41,32,58,32,70,97,105,108,101,100,32,116,111,32,111,112,101,110,32,102,105,108,101,58,32,0,0,0,0,0,0,0,108,111,97,100,80,80,77,40,41,32,58,32,70,105,108,101,32,105,115,32,110,111,116,32,97,32,118,97,108,105,100,32,80,80,77,32,111,114,32,80,71,77,32,105,109,97,103,101,0,0,0,0,0,0,0,0,80,53,0,0,0,0,0,0,80,54,0,0,0,0,0,0,108,111,97,100,80,80,77,40,41,32,58,32,70,105,108,101,32,105,115,32,110,111,116,32,97,32,80,80,77,32,111,114,32,80,71,77,32,105,109,97,103,101,0,0,0,0,0,0,37,117,32,37,117,32,37,117,0,0,0,0,0,0,0,0,37,117,32,37,117,0,0,0,108,111,97,100,80,80,77,40,41,32,58,32,73,110,118,97,108,105,100,32,105,109,97,103,101,32,100,105,109,101,110,115,105,111,110,115,46,0,0,0,108,111,97,100,80,80,77,40,41,32,58,32,73,110,118,97,108,105,100,32,105,109,97,103,101,46,0,0,0,0,0,0,69,114,114,111,114,32,119,104,101,110,32,112,97,114,115,105,110,103,32,99,111,109,109,97,110,100,32,108,105,110,101,32,97,114,103,117,109,101,110,116,32,115,116,114,105,110,103,46,0,0,0,0,0,0,0,0,46,47,115,104,97,114,101,100,47,105,110,99,47,99,109,100,95,97,114,103,95,114,101,97,100,101,114,46,104,0,0,0,67,109,100,65,114,103,82,101,97,100,101,114,58,58,103,101,116,65,114,103,40,41,58,32,67,109,100,65,114,103,82,101,97,100,101,114,32,110,111,116,32,105,110,105,116,105,97,108,105,122,101,100,46,0,0,0,60,0,0,0,0,0,0,0,248,16,0,0,41,0,0,0,42,0,0,0,196,255,255,255,196,255,255,255,248,16,0,0,43,0,0,0,44,0,0,0,92,16,0,0,148,16,0,0,168,16,0,0,112,16,0,0,60,0,0,0,0,0,0,0,104,34,0,0,13,0,0,0,14,0,0,0,196,255,255,255,196,255,255,255,104,34,0,0,15,0,0,0,16,0,0,0,78,83,116,51,95,95,49,49,57,98,97,115,105,99,95,105,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,56,78,0,0,176,16,0,0,104,34,0,0,0,0,0,0,112,0,0,0,0,0,0,0,48,18,0,0,45,0,0,0,46,0,0,0,104,0,0,0,248,255,255,255,48,18,0,0,47,0,0,0,48,0,0,0,144,255,255,255,144,255,255,255,48,18,0,0,49,0,0,0,50,0,0,0,0,0,0,0,20,17,0,0,124,17,0,0,188,17,0,0,208,17,0,0,228,17,0,0,248,17,0,0,164,17,0,0,144,17,0,0,60,17,0,0,40,17,0,0,112,0,0,0,0,0,0,0,136,35,0,0,7,0,0,0,8,0,0,0,104,0,0,0,248,255,255,255,136,35,0,0,9,0,0,0,10,0,0,0,144,255,255,255,144,255,255,255,136,35,0,0,11,0,0,0,12,0,0,0,0,0,0,0,112,0,0,0,0,0,0,0,104,34,0,0,13,0,0,0,14,0,0,0,144,255,255,255,144,255,255,255,104,34,0,0,15,0,0,0,16,0,0,0,104,0,0,0,0,0,0,0,248,34,0,0,17,0,0,0,18,0,0,0,152,255,255,255,152,255,255,255,248,34,0,0,19,0,0,0,20,0,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,102,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,56,78,0,0,0,18,0,0,136,35,0,0,0,0,0,0,0,0,0,0,176,18,0,0,51,0,0,0,52,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,28,0,0,0,29,0,0,0,58,0,0,0,31,0,0,0,59,0,0,0,33,0,0,0,60,0,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,102,105,108,101,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,56,78,0,0,128,18,0,0,240,33,0,0,0,0,0,0,97,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,114,43,0,0,0,0,0,0,119,43,0,0,0,0,0,0,119,98,0,0,0,0,0,0,97,98,0,0,0,0,0,0,114,43,98,0,0,0,0,0,119,43,98,0,0,0,0,0,97,43,98,0,0,0,0,0,108,101,110,97,46,112,112,109,0,0,0,0,0,0,0,0,8,19,0,0,0,0,0,0,108,101,110,97,95,114,101,102,46,100,100,115,0,0,0,0,32,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,77,83,40,114,101,102,101,114,101,110,99,101,44,32,114,101,115,117,108,116,41,32,61,32,37,102,10,10,0,0,0,84,69,83,84,32,37,115,10,10,0,0,0,0,0,0,0,80,65,83,83,69,68,0,0,70,65,73,76,69,68,32,33,33,33,0,0,0,0,0,0,85,110,97,98,108,101,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,83,68,76,58,32,37,115,10,0,0,0,85,110,97,98,108,101,32,116,111,32,115,101,116,32,118,105,100,101,111,32,109,111,100,101,58,32,37,115,10,0,0,0,71,76,95,65,82,66,95,116,101,120,116,117,114,101,95,99,111,109,112,114,101,115,115,105,111,110,0,0,0,0,0,0,104,97,115,101,120,116,40,101,120,116,115,44,32,34,71,76,95,65,82,66,95,116,101,120,116,117,114,101,95,99,111,109,112,114,101,115,115,105,111,110,34,41,0,0,0,0,0,0,68,88,84,67,111,109,112,114,101,115,115,111,114,46,99,112,112,0,0,0,0,0,0,0,115,104,111,119,116,101,120,116,117,114,101,0,0,0,0,0,71,76,95,69,88,84,95,116,101,120,116,117,114,101,95,99,111,109,112,114,101,115,115,105,111,110,95,115,51,116,99,0,104,97,115,101,120,116,40,101,120,116,115,44,32,34,71,76,95,69,88,84,95,116,101,120,116,117,114,101,95,99,111,109,112,114,101,115,115,105,111,110,95,115,51,116,99,34,41,0,46,47,100,97,116,97,47,108,101,110,97,46,100,100,115,0,114,98,0,0,0,0,0,0,82,101,97,100,32,34,46,47,100,97,116,97,47,108,101,110,97,46,100,100,115,34,32,58,32,83,105,122,101,32,37,100,32,58,32,72,101,97,100,101,114,32,37,100,10,0,0,0,102,114,101,97,100,40,100,100,115,103,101,110,100,97,116,97,44,32,49,44,32,100,100,115,95,103,101,110,95,115,105,122,101,44,32,100,100,115,95,103,101,110,41,32,61,61,32,100,100,115,95,103,101,110,95,115,105,122,101,0,0,0,0,0,33,103,108,71,101,116,69,114,114,111,114,40,41,0,0,0,0,0,0,0,0,0,0,0,0,0,160,64,0,0,160,64,0,0,128,63,0,0,0,0,0,192,70,68,0,0,160,64,0,0,128,63,0,0,128,63,0,192,70,68,0,192,70,68,0,0,0,0,0,0,128,63,0,0,160,64,0,192,70,68,111,99,108,68,88,84,67,111,109,112,114,101,115,115,105,111,110,46,116,120,116,0,0,0,37,115,32,83,116,97,114,116,105,110,103,46,46,46,10,10,0,0,0,0,0,0,0,0,99,112,117,0,0,0,0,0,103,112,117,0,0,0,0,0,105,109,97,103,101,0,0,0,76,111,97,100,101,100,32,39,37,115,39,44,32,37,100,32,120,32,37,100,32,112,105,120,101,108,115,10,0,0,0,0,100,101,118,105,99,101,0,0,220,16,0,0,0,0,0,0,220,16,0,0,0,0,0,0,220,16,0,0,0,0,0,0,68,88,84,67,111,109,112,114,101,115,115,111,114,95,107,101,114,110,101,108,46,99,108,0,37,115,10,0,0,0,0,0,0,0,0,0,0,0,0,0,45,99,108,45,109,97,100,45,101,110,97,98,108,101,0,0,102,105,108,101,32,37,115,44,32,108,105,110,101,32,37,105,10,10,0,0,0,0,0,0,111,99,108,68,88,84,67,111,109,112,114,101,115,115,105,111,110,46,112,116,120,0,0,0,99,111,109,112,114,101,115,115,0,0,0,0,0,0,0,0,82,117,110,110,105,110,103,32,68,88,84,32,67,111,109,112,114,101,115,115,105,111,110,32,111,110,32,37,117,32,120,32,37,117,32,105,109,97,103,101,46,46,46,10,10,0,0,0,220,16,0,0,0,0,0,0,87,111,114,107,45,105,116,101,109,32,58,32,91,37,100,32,45,32,37,100,93,10,0,0,111,99,108,68,88,84,67,111,109,112,114,101,115,115,105,111,110,44,32,84,104,114,111,117,103,104,112,117,116,32,61,32,37,46,52,102,44,32,84,105,109,101,32,61,32,37,46,53,102,44,32,83,105,122,101,32,61,32,37,117,44,32,78,117,109,68,101,118,115,85,115,101,100,32,61,32,37,105,10,0,220,16,0,0,0,0,0,0,100,100,115,0,0,0,0,0,119,98,0,0,0,0,0,0,46,47,100,97,116,97,47,108,101,110,97,95,114,101,102,46,100,100,115,0,0,0,0,0,100,120,116,99,111,109,112,114,101,115,115,111,114,95,119,111,114,107,101,114,46,106,115,0,10,67,111,109,112,97,114,105,110,103,32,97,103,97,105,110,115,116,32,72,111,115,116,47,67,43,43,32,99,111,109,112,117,116,97,116,105,111,110,32,98,121,32,119,111,114,107,101,114,46,46,46,10,0,0,0,99,104,101,99,107,82,101,115,117,108,116,0,0,0,0,0,10,67,111,109,112,97,114,105,110,103,32,97,103,97,105,110,115,116,32,72,111,115,116,47,67,43,43,32,99,111,109,112,117,116,97,116,105,111,110,46,46,46,10,0,0,0,0,0,82,101,102,101,114,101,110,99,101,32,58,32,37,100,10,0,108,105,110,101,32,37,105,32,44,32,105,110,32,102,105,108,101,32,37,115,32,33,33,33,10,10,0,0,0,0,0,0,69,120,105,116,105,110,103,46,46,46,10], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([168,28,0,0,61,0,0,0,62,0,0,0,63,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,73,0,0,0,74,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,56,78,0,0,136,28,0,0,48,34,0,0,0,0,0,0,0,0,0,0,16,29,0,0,61,0,0,0,75,0,0,0,76,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,77,0,0,0,68,0,0,0,69,0,0,0,78,0,0,0,79,0,0,0,80,0,0,0,81,0,0,0,82,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,56,78,0,0,248,28,0,0,48,34,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,0,0,0,0,168,29,0,0,83,0,0,0,84,0,0,0,85,0,0,0,24,0,0,0,86,0,0,0,87,0,0,0,88,0,0,0,28,0,0,0,29,0,0,0,89,0,0,0,31,0,0,0,90,0,0,0,91,0,0,0,92,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,56,78,0,0,136,29,0,0,240,33,0,0,0,0,0,0,0,0,0,0,16,30,0,0,83,0,0,0,93,0,0,0,94,0,0,0,24,0,0,0,86,0,0,0,87,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,95,0,0,0,96,0,0,0,97,0,0,0,33,0,0,0,98,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,56,78,0,0,248,29,0,0,240,33,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,168,77,0,0,32,30,0,0,58,32,0,0,0,0,0,0,0,0,0,0,128,30,0,0,99,0,0,0,100,0,0,0,40,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,56,78,0,0,104,30,0,0,80,76,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,168,77,0,0,144,30,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,56,78,0,0,184,30,0,0,176,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,0,0,0,0,104,33,0,0,101,0,0,0,102,0,0,0,0,0,0,0,240,33,0,0,103,0,0,0,104,0,0,0,23,0,0,0,24,0,0,0,86,0,0,0,87,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,89,0,0,0,31,0,0,0,90,0,0,0,33,0,0,0,98,0,0,0,0,0,0,0,48,34,0,0,105,0,0,0,106,0,0,0,107,0,0,0,64,0,0,0,65,0,0,0,66,0,0,0,77,0,0,0,68,0,0,0,69,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,81,0,0,0,82,0,0,0,8,0,0,0,0,0,0,0,104,34,0,0,13,0,0,0,14,0,0,0,248,255,255,255,248,255,255,255,104,34,0,0,15,0,0,0,16,0,0,0,8,0,0,0,0,0,0,0,176,34,0,0,108,0,0,0,109,0,0,0,248,255,255,255,248,255,255,255,176,34,0,0,110,0,0,0,111,0,0,0,4,0,0,0,0,0,0,0,248,34,0,0,17,0,0,0,18,0,0,0,252,255,255,255,252,255,255,255,248,34,0,0,19,0,0,0,20,0,0,0,4,0,0,0,0,0,0,0,64,35,0,0,112,0,0,0,113,0,0,0,252,255,255,255,252,255,255,255,64,35,0,0,114,0,0,0,115,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,33,0,0,116,0,0,0,117,0,0,0,40,0,0,0,0,0,0,0,0,0,0,0,48,33,0,0,118,0,0,0,119,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,56,78,0,0,232,32,0,0,128,30,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,168,77,0,0,24,33,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,56,78,0,0,56,33,0,0,48,33,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,56,78,0,0,120,33,0,0,48,33,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,168,77,0,0,184,33,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,168,77,0,0,248,33,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,152,78,0,0,56,34,0,0,0,0,0,0,1,0,0,0,104,33,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,152,78,0,0,128,34,0,0,0,0,0,0,1,0,0,0,168,33,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,152,78,0,0,200,34,0,0,0,0,0,0,1,0,0,0,104,33,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,152,78,0,0,16,35,0,0,0,0,0,0,1,0,0,0,168,33,0,0,3,244,255,255,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,105,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,152,78,0,0,88,35,0,0,3,0,0,0,2,0,0,0,104,34,0,0,2,0,0,0,248,34,0,0,2,8,0,0,0,0,0,0,240,35,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,56,78,0,0,208,35,0,0,208,30,0,0,0,0,0,0,0,0,0,0,56,50,0,0,127,0,0,0,128,0,0,0,129,0,0,0,130,0,0,0,131,0,0,0,132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,50,0,0,133,0,0,0,134,0,0,0,129,0,0,0,135,0,0,0,136,0,0,0,137,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,55,0,0,138,0,0,0,139,0,0,0,129,0,0,0,140,0,0,0,141,0,0,0,142,0,0,0,143,0,0,0,144,0,0,0,145,0,0,0,146,0,0,0,147,0,0,0,148,0,0,0,149,0,0,0,150,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,168,55,0,0,151,0,0,0,152,0,0,0,129,0,0,0,153,0,0,0,154,0,0,0,155,0,0,0,156,0,0,0,157,0,0,0,158,0,0,0,159,0,0,0,160,0,0,0,161,0,0,0,162,0,0,0,163,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,56,0,0,164,0,0,0,165,0,0,0,129,0,0,0,166,0,0,0,167,0,0,0,168,0,0,0,169,0,0,0,170,0,0,0,171,0,0,0,172,0,0,0,173,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,108,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0,0,57,0,0,174,0,0,0,175,0,0,0,129,0,0,0,176,0,0,0,177,0,0,0,178,0,0,0,179,0,0,0,180,0,0,0,181,0,0,0,182,0,0,0,183,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,40,52,0,0,184,0,0,0,185,0,0,0,129,0,0,0,186,0,0,0,187,0,0,0,188,0,0,0,189,0,0,0,190,0,0,0,191,0,0,0,192,0,0,0,248,255,255,255,40,52,0,0,193,0,0,0,194,0,0,0,195,0,0,0,196,0,0,0,197,0,0,0,198,0,0,0,199,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,72,58,37,77,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,200,52,0,0,200,0,0,0,201,0,0,0,129,0,0,0,202,0,0,0,203,0,0,0,204,0,0,0,205,0,0,0,206,0,0,0,207,0,0,0,208,0,0,0,248,255,255,255,200,52,0,0,209,0,0,0,210,0,0,0,211,0,0,0,212,0,0,0,213,0,0,0,214,0,0,0,215,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,88,53,0,0,216,0,0,0,217,0,0,0,129,0,0,0,218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,53,0,0,219,0,0,0,220,0,0,0,129,0,0,0,221,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,50,0,0,222,0,0,0,223,0,0,0,129,0,0,0,224,0,0,0,225,0,0,0,226,0,0,0,227,0,0,0,228,0,0,0,229,0,0,0,230,0,0,0,231,0,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,50,0,0,233,0,0,0,234,0,0,0,129,0,0,0,235,0,0,0,236,0,0,0,237,0,0,0,238,0,0,0,239,0,0,0,240,0,0,0,241,0,0,0,242,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,51,0,0,244,0,0,0,245,0,0,0,129,0,0,0,246,0,0,0,247,0,0,0,248,0,0,0,249,0,0,0,250,0,0,0,251,0,0,0,252,0,0,0,253,0,0,0,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,51,0,0,255,0,0,0,0,1,0,0,129,0,0,0,1,1,0,0,2,1,0,0,3,1,0,0,4,1,0,0,5,1,0,0,6,1,0,0,7,1,0,0,8,1,0,0,9,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,57,0,0,10,1,0,0,11,1,0,0,129,0,0,0,12,1,0,0,13,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,76,102,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,0,0,0,0,32,58,0,0,14,1,0,0,15,1,0,0,129,0,0,0,16,1,0,0,17,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,176,58,0,0,18,1,0,0,19,1,0,0,129,0,0,0,20,1,0,0,21,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,0,0,0,0,64,59,0,0,22,1,0,0,23,1,0,0,129,0,0,0,24,1,0,0,25,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,54,0,0,26,1,0,0,27,1,0,0,129,0,0,0,28,1,0,0,29,1,0,0,30,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,54,0,0,31,1,0,0,32,1,0,0,129,0,0,0,33,1,0,0,34,1,0,0,35,1,0,0,0,0,0,0,0,0,0,0,118,101,99,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,16,50,0,0,36,1,0,0,37,1,0,0,129,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,46,0,0,38,1,0,0,39,1,0,0,129,0,0,0,40,1,0,0,41,1,0,0,42,1,0,0,43,1,0,0,44,1,0,0,45,1,0,0,46,1,0,0,47,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,47,0,0,48,1,0,0,49,1,0,0,129,0,0,0,50,1,0,0,51,1,0,0,52,1,0,0,53,1,0,0,54,1,0,0,55,1,0,0,56,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,49,0,0,57,1,0,0,58,1,0,0,129,0,0,0,59,1,0,0,60,1,0,0,61,1,0,0,62,1,0,0,63,1,0,0,0,0,0,0,232,49,0,0,64,1,0,0,65,1,0,0,129,0,0,0,66,1,0,0,67,1,0,0,68,1,0,0,69,1,0,0,70,1,0,0,116,114,117,101,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,0,32,46,0,0,71,1,0,0,72,1,0,0,129,0,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,56,78,0,0,8,46,0,0,64,30,0,0,0,0,0,0,0,0,0,0,176,46,0,0,71,1,0,0,73,1,0,0,129,0,0,0,74,1,0,0,75,1,0,0,76,1,0,0,77,1,0,0,78,1,0,0,79,1,0,0,80,1,0,0,81,1,0,0,82,1,0,0,83,1,0,0,84,1,0,0,85,1,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,168,77,0,0,144,46,0,0,152,78,0,0,120,46,0,0,0,0,0,0,2,0,0,0,32,46,0,0,2,0,0,0,168,46,0,0,2,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,152,78,0,0,208,46,0,0,0,0,0,0,2,0,0,0,32,46,0,0,2,0,0,0,168,46,0,0,2,0,0,0,0,0,0,0,128,47,0,0,71,1,0,0,86,1,0,0,129,0,0,0,87,1,0,0,88,1,0,0,89,1,0,0,90,1,0,0,91,1,0,0,92,1,0,0,93,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,168,77,0,0,96,47,0,0,152,78,0,0,56,47,0,0,0,0,0,0,2,0,0,0,32,46,0,0,2,0,0,0,120,47,0,0,2,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,152,78,0,0,160,47,0,0,0,0,0,0,2,0,0,0,32,46,0,0,2,0,0,0,120,47,0,0,2,0,0,0,0,0,0,0,64,48,0,0,71,1,0,0,94,1,0,0,129,0,0,0,95,1,0,0,96,1,0,0,97,1,0,0,98,1,0,0,99,1,0,0,100,1,0,0,101,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,152,78,0,0,24,48,0,0,0,0,0,0,2,0,0,0,32,46,0,0,2,0,0,0,120,47,0,0,2,0,0,0,0,0,0,0,184,48,0,0,71,1,0,0,102,1,0,0,129,0,0,0,103,1,0,0,104,1,0,0,105,1,0,0,106,1,0,0,107,1,0,0,108,1,0,0,109,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,152,78,0,0,144,48,0,0,0,0,0,0,2,0,0,0,32,46,0,0,2,0,0,0,120,47,0,0,2,0,0,0,0,0,0,0,48,49,0,0,71,1,0,0,110,1,0,0,129,0,0,0,103,1,0,0,104,1,0,0,105,1,0,0,106,1,0,0,107,1,0,0,108,1,0,0,109,1,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,56,78,0,0,8,49,0,0,184,48,0,0,0,0,0,0,0,0,0,0,152,49,0,0,71,1,0,0,111,1,0,0,129,0,0,0,103,1,0,0,104,1,0,0,105,1,0,0,106,1,0,0,107,1,0,0,108,1,0,0,109,1,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,56,78,0,0,112,49,0,0,184,48,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,56,78,0,0,168,49,0,0,32,46,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,56,78,0,0,208,49,0,0,32,46,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,56,78,0,0,248,49,0,0,32,46,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,56,78,0,0,32,50,0,0,32,46,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,56,78,0,0,72,50,0,0,32,46,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,168,77,0,0,144,50,0,0,152,78,0,0,112,50,0,0,0,0,0,0,2,0,0,0,32,46,0,0,2,0,0,0,168,50,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,152,78,0,0,208,50,0,0,0,0,0,0,2,0,0,0,32,46,0,0,2,0,0,0,168,50,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,152,78,0,0,16,51,0,0,0,0,0,0,2,0,0,0,32,46,0,0,2,0,0,0,168,50,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,152,78,0,0,80,51,0,0,0,0,0,0,2,0,0,0,32,46,0,0,2,0,0,0,168,50,0,0,2,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,168,77,0,0,216,51,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,168,77,0,0,248,51,0,0,152,78,0,0,144,51,0,0,0,0,0,0,3,0,0,0,32,46,0,0,2,0,0,0,240,51,0,0,2,0,0,0,32,52,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,168,77,0,0,152,52,0,0,152,78,0,0,80,52,0,0,0,0,0,0,3,0,0,0,32,46,0,0,2,0,0,0,240,51,0,0,2,0,0,0,192,52,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,168,77,0,0,56,53,0,0,152,78,0,0,240,52,0,0,0,0,0,0,2,0,0,0,32,46,0,0,2,0,0,0,80,53,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,152,78,0,0,120,53,0,0,0,0,0,0,2,0,0,0,32,46,0,0,2,0,0,0,80,53,0,0,0,8,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,168,77,0,0,248,53,0,0,152,78,0,0,224,53,0,0,0,0,0,0,2,0,0,0,32,46,0,0,2,0,0,0,16,54,0,0,2,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,152,78,0,0,56,54,0,0,0,0,0,0,2,0,0,0,32,46,0,0,2,0,0,0,16,54,0,0,2,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,168,77,0,0,208,54,0,0,152,78,0,0,184,54,0,0,0,0,0,0,1,0,0,0,240,54,0,0,0,0,0,0,152,78,0,0,112,54,0,0,0,0,0,0,2,0,0,0,32,46,0,0,2,0,0,0,248,54,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,152,78,0,0,120,55,0,0,0,0,0,0,1,0,0,0,240,54,0,0,0,0,0,0,152,78,0,0,48,55,0,0,0,0,0,0,2,0,0,0,32,46,0,0,2,0,0,0,144,55,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,168,77,0,0,40,56,0,0,152,78,0,0,16,56,0,0,0,0,0,0,1,0,0,0,72,56,0,0,0,0,0,0,152,78,0,0,200,55,0,0,0,0,0,0,2,0,0,0,32,46,0,0,2,0,0,0,80,56,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,152,78,0,0,208,56,0,0,0,0,0,0,1,0,0,0,72,56,0,0,0,0,0,0,152,78,0,0,136,56,0,0,0,0,0,0,2,0,0,0,32,46,0,0,2,0,0,0,232,56,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,168,77,0,0,104,57,0,0,152,78,0,0,32,57,0,0,0,0,0,0,2,0,0,0,32,46,0,0,2,0,0,0,136,57,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,168,77,0,0,248,57,0,0,152,78,0,0,176,57,0,0,0,0,0,0,2,0,0,0,32,46,0,0,2,0,0,0,24,58,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,168,77,0,0,136,58,0,0,152,78,0,0,64,58,0,0,0,0,0,0,2,0,0,0,32,46,0,0,2,0,0,0,168,58,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,168,77,0,0,24,59,0,0,152,78,0,0,208,58,0,0,0,0,0,0,2,0,0,0,32,46,0,0,2,0,0,0,56,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,65,112,114,105], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+7236);
/* memory initializer */ allocate([108,0,0,0,77,97,121,0,0,0,0,0,74,117,110,101,0,0,0,0,74,117,108,121,0,0,0,0,65,117,103,117,115,116,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,74,97,110,0,0,0,0,0,70,101,98,0,0,0,0,0,77,97,114,0,0,0,0,0,65,112,114,0,0,0,0,0,74,117,110,0,0,0,0,0,74,117,108,0,0,0,0,0,65,117,103,0,0,0,0,0,83,101,112,0,0,0,0,0,79,99,116,0,0,0,0,0,78,111,118,0,0,0,0,0,68,101,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,117,110,100,97,121,0,0,77,111,110,100,97,121,0,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,83,117,110,0,0,0,0,0,77,111,110,0,0,0,0,0,84,117,101,0,0,0,0,0,87,101,100,0,0,0,0,0,84,104,117,0,0,0,0,0,70,114,105,0,0,0,0,0,83,97,116,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,1,0,0,0,0,0,0,64,73,0,0,0,0,0,0,117,110,99,97,117,103,104,116,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,0,0,116,101,114,109,105,110,97,116,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,0,0,0,0,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,0,216,74,0,0,113,1,0,0,114,1,0,0,115,1,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,56,78,0,0,200,74,0,0,96,75,0,0,0,0,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,168,77,0,0,80,75,0,0,0,0,0,0,168,75,0,0,116,1,0,0,117,1,0,0,37,0,0,0,0,0,0,0,0,0,0,0,80,76,0,0,118,1,0,0,119,1,0,0,40,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,56,78,0,0,152,75,0,0,96,75,0,0,0,0,0,0,0,0,0,0,232,75,0,0,116,1,0,0,120,1,0,0,37,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,56,78,0,0,208,75,0,0,168,75,0,0,0,0,0,0,0,0,0,0,40,76,0,0,116,1,0,0,121,1,0,0,37,0,0,0,0,0,0,0,83,116,49,50,111,117,116,95,111,102,95,114,97,110,103,101,0,0,0,0,0,0,0,0,56,78,0,0,16,76,0,0,168,75,0,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,56,78,0,0,56,76,0,0,96,75,0,0,0,0,0,0,0,0,0,0,176,76,0,0,122,1,0,0,123,1,0,0,124,1,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,168,77,0,0,136,76,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,56,78,0,0,160,76,0,0,96,75,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,56,78,0,0,192,76,0,0,152,76,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,56,78,0,0,248,76,0,0,232,76,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,56,78,0,0,88,77,0,0,232,76,0,0,0,0,0,0,56,78,0,0,48,77,0,0,128,77,0,0,0,0,0,0,0,0,0,0,32,77,0,0,125,1,0,0,126,1,0,0,127,1,0,0,128,1,0,0,129,1,0,0,130,1,0,0,131,1,0,0,132,1,0,0,0,0,0,0,16,78,0,0,125,1,0,0,133,1,0,0,127,1,0,0,128,1,0,0,134,1,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,56,78,0,0,232,77,0,0,232,76,0,0,0,0,0,0,105,0,0,0,0,0,0,0,208,77,0,0,32,78,0,0,0,0,0,0,128,78,0,0,125,1,0,0,135,1,0,0,127,1,0,0,128,1,0,0,129,1,0,0,136,1,0,0,137,1,0,0,138,1,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,56,78,0,0,88,78,0,0,32,77,0,0,0,0,0,0,0,0,0,0,224,78,0,0,125,1,0,0,139,1,0,0,127,1,0,0,128,1,0,0,129,1,0,0,140,1,0,0,141,1,0,0,142,1,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,56,78,0,0,184,78,0,0,32,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+17476);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_i64Subtract"] = _i64Subtract;

  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currArrayBuffer:0,currElementArrayBuffer:0,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.createLog2ceilLookup(GL.MAX_TEMP_BUFFER_SIZE);
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],MAX_TEMP_BUFFER_SIZE:2097152,numTempVertexBuffersPerSize:64,log2ceilLookup:null,createLog2ceilLookup:function (maxValue) {
        GL.log2ceilLookup = new Uint8Array(maxValue+1);
        var log2 = 0;
        var pow2 = 1;
        GL.log2ceilLookup[0] = 0;
        for(var i = 1; i <= maxValue; ++i) {
          if (i > pow2) {
            pow2 <<= 1;
            ++log2;
          }
          GL.log2ceilLookup[i] = log2;
        }
      },generateTempBuffers:function (quads, context) {
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        context.tempVertexBufferCounters1 = [];
        context.tempVertexBufferCounters2 = [];
        context.tempVertexBufferCounters1.length = context.tempVertexBufferCounters2.length = largestIndex+1;
        context.tempVertexBuffers1 = [];
        context.tempVertexBuffers2 = [];
        context.tempVertexBuffers1.length = context.tempVertexBuffers2.length = largestIndex+1;
        context.tempIndexBuffers = [];
        context.tempIndexBuffers.length = largestIndex+1;
        for(var i = 0; i <= largestIndex; ++i) {
          context.tempIndexBuffers[i] = null; // Created on-demand
          context.tempVertexBufferCounters1[i] = context.tempVertexBufferCounters2[i] = 0;
          var ringbufferLength = GL.numTempVertexBuffersPerSize;
          context.tempVertexBuffers1[i] = [];
          context.tempVertexBuffers2[i] = [];
          var ringbuffer1 = context.tempVertexBuffers1[i];
          var ringbuffer2 = context.tempVertexBuffers2[i];
          ringbuffer1.length = ringbuffer2.length = ringbufferLength;
          for(var j = 0; j < ringbufferLength; ++j) {
            ringbuffer1[j] = ringbuffer2[j] = null; // Created on-demand
          }
        }
  
        if (quads) {
          // GL_QUAD indexes can be precalculated
          context.tempQuadIndexBuffer = GLctx.createBuffer();
          context.GLctx.bindBuffer(context.GLctx.ELEMENT_ARRAY_BUFFER, context.tempQuadIndexBuffer);
          var numIndexes = GL.MAX_TEMP_BUFFER_SIZE >> 1;
          var quadIndexes = new Uint16Array(numIndexes);
          var i = 0, v = 0;
          while (1) {
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+1;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+3;
            if (i >= numIndexes) break;
            v += 4;
          }
          context.GLctx.bufferData(context.GLctx.ELEMENT_ARRAY_BUFFER, quadIndexes, context.GLctx.STATIC_DRAW);
          context.GLctx.bindBuffer(context.GLctx.ELEMENT_ARRAY_BUFFER, null);
        }
      },getTempVertexBuffer:function getTempVertexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ringbuffer = GL.currentContext.tempVertexBuffers1[idx];
        var nextFreeBufferIndex = GL.currentContext.tempVertexBufferCounters1[idx];
        GL.currentContext.tempVertexBufferCounters1[idx] = (GL.currentContext.tempVertexBufferCounters1[idx]+1) & (GL.numTempVertexBuffersPerSize-1);
        var vbo = ringbuffer[nextFreeBufferIndex];
        if (vbo) {
          return vbo;
        }
        var prevVBO = GLctx.getParameter(GLctx.ARRAY_BUFFER_BINDING);
        ringbuffer[nextFreeBufferIndex] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, ringbuffer[nextFreeBufferIndex]);
        GLctx.bufferData(GLctx.ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, prevVBO);
        return ringbuffer[nextFreeBufferIndex];
      },getTempIndexBuffer:function getTempIndexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ibo = GL.currentContext.tempIndexBuffers[idx];
        if (ibo) {
          return ibo;
        }
        var prevIBO = GLctx.getParameter(GLctx.ELEMENT_ARRAY_BUFFER_BINDING);
        GL.currentContext.tempIndexBuffers[idx] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.currentContext.tempIndexBuffers[idx]);
        GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, prevIBO);
        return GL.currentContext.tempIndexBuffers[idx];
      },newRenderingFrameStarted:function newRenderingFrameStarted() {
        if (!GL.currentContext) {
          return;
        }
        var vb = GL.currentContext.tempVertexBuffers1;
        GL.currentContext.tempVertexBuffers1 = GL.currentContext.tempVertexBuffers2;
        GL.currentContext.tempVertexBuffers2 = vb;
        vb = GL.currentContext.tempVertexBufferCounters1;
        GL.currentContext.tempVertexBufferCounters1 = GL.currentContext.tempVertexBufferCounters2;
        GL.currentContext.tempVertexBufferCounters2 = vb;
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        for(var i = 0; i <= largestIndex; ++i) {
          GL.currentContext.tempVertexBufferCounters1[i] = 0;
        }
      },findToken:function (source, token) {
        function isIdentChar(ch) {
          if (ch >= 48 && ch <= 57) // 0-9
            return true;
          if (ch >= 65 && ch <= 90) // A-Z
            return true;
          if (ch >= 97 && ch <= 122) // a-z
            return true;
          return false;
        }
        var i = -1;
        do {
          i = source.indexOf(token, i + 1);
          if (i < 0) {
            break;
          }
          if (i > 0 && isIdentChar(source[i - 1])) {
            continue;
          }
          i += token.length;
          if (i < source.length - 1 && isIdentChar(source[i + 1])) {
            continue;
          }
          return true;
        } while (true);
        return false;
      },getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        // Let's see if we need to enable the standard derivatives extension
        type = GLctx.getShaderParameter(GL.shaders[shader], 0x8B4F /* GL_SHADER_TYPE */);
        if (type == 0x8B30 /* GL_FRAGMENT_SHADER */) {
          if (GL.findToken(source, "dFdx") ||
              GL.findToken(source, "dFdy") ||
              GL.findToken(source, "fwidth")) {
            source = "#extension GL_OES_standard_derivatives : enable\n" + source;
            var extension = GLctx.getExtension("OES_standard_derivatives");
          }
        }
        return source;
      },computeImageSize:function (width, height, sizePerPixel, alignment) {
        function roundedToNextMultipleOf(x, y) {
          return Math.floor((x + y - 1) / y) * y
        }
        var plainRowSize = width * sizePerPixel;
        var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
        return (height <= 0) ? 0 :
                 ((height - 1) * alignedRowSize + plainRowSize);
      },get:function (name_, p, type) {
        // Guard against user passing a null pointer.
        // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
        // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
        // better to report an error instead of doing anything random.
        if (!p) {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
          return;
        }
        var ret = undefined;
        switch(name_) { // Handle a few trivial GLES values
          case 0x8DFA: // GL_SHADER_COMPILER
            ret = 1;
            break;
          case 0x8DF8: // GL_SHADER_BINARY_FORMATS
            if (type !== 'Integer') {
              GL.recordError(0x0500); // GL_INVALID_ENUM
            }
            return; // Do not write anything to the out pointer, since no binary formats are supported.
          case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
            ret = 0;
            break;
          case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
            // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
            // so implement it ourselves to allow C++ GLES2 code get the length.
            var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
            ret = formats.length;
            break;
          case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
            ret = 0x1401; // GL_UNSIGNED_BYTE
            break;
          case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
            ret = 0x1908; // GL_RGBA
            break;
        }
  
        if (ret === undefined) {
          var result = GLctx.getParameter(name_);
          switch (typeof(result)) {
            case "number":
              ret = result;
              break;
            case "boolean":
              ret = result ? 1 : 0;
              break;
            case "string":
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            case "object":
              if (result === null) {
                // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
                // can mean an invalid name_, which we need to report as an error
                switch(name_) {
                  case 0x8894: // ARRAY_BUFFER_BINDING
                  case 0x8B8D: // CURRENT_PROGRAM
                  case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                  case 0x8CA6: // FRAMEBUFFER_BINDING
                  case 0x8CA7: // RENDERBUFFER_BINDING
                  case 0x8069: // TEXTURE_BINDING_2D
                  case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                    ret = 0;
                    break;
                  }
                  default: {
                    GL.recordError(0x0500); // GL_INVALID_ENUM
                    return;
                  }
                }
              } else if (result instanceof Float32Array ||
                         result instanceof Uint32Array ||
                         result instanceof Int32Array ||
                         result instanceof Array) {
                for (var i = 0; i < result.length; ++i) {
                  switch (type) {
                    case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                    case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                    case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                    default: throw 'internal glGet error, bad type: ' + type;
                  }
                }
                return;
              } else if (result instanceof WebGLBuffer ||
                         result instanceof WebGLProgram ||
                         result instanceof WebGLFramebuffer ||
                         result instanceof WebGLRenderbuffer ||
                         result instanceof WebGLTexture) {
                ret = result.name | 0;
              } else {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return;
              }
              break;
            default:
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
          }
        }
  
        switch (type) {
          case 'Integer': HEAP32[((p)>>2)]=ret;    break;
          case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
          case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
          default: throw 'internal glGet error, bad type: ' + type;
        }
      },getTexPixelData:function (type, format, width, height, pixels, internalFormat) {
        var sizePerPixel;
        switch (type) {
          case 0x1401 /* GL_UNSIGNED_BYTE */:
            switch (format) {
              case 0x1906 /* GL_ALPHA */:
              case 0x1909 /* GL_LUMINANCE */:
                sizePerPixel = 1;
                break;
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4;
                break;
              case 0x190A /* GL_LUMINANCE_ALPHA */:
                sizePerPixel = 2;
                break;
              default:
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return {
                  pixels: null,
                  internalFormat: 0x0
                };
            }
            break;
          case 0x1403 /* GL_UNSIGNED_SHORT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 2;
            } else {
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return {
                pixels: null,
                internalFormat: 0x0
              };
            }
            break;
          case 0x1405 /* GL_UNSIGNED_INT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 4;
            } else {
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return {
                pixels: null,
                internalFormat: 0x0
              };
            }
            break;
          case 0x84FA /* UNSIGNED_INT_24_8_WEBGL */:
            sizePerPixel = 4;
            break;
          case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
          case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
          case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
            sizePerPixel = 2;
            break;
          case 0x1406 /* GL_FLOAT */:
            switch (format) {
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3*4;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4*4;
                break;
              default:
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return {
                  pixels: null,
                  internalFormat: 0x0
                };
            }
            internalFormat = GLctx.RGBA;
            break;
          case 0x8D61 /* GL_HALF_FLOAT_OES */:
            switch (format) {
              case 0x1903 /* GL_RED */:
                sizePerPixel = 2;
                break;
              case 0x8277 /* GL_RG */:
                sizePerPixel = 2*2;
                break;
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3*2;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4*2;
                break;
              default:
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return {
                  pixels: null,
                  internalFormat: 0x0
                };
            }
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return {
              pixels: null,
              internalFormat: 0x0
            };
        }
        var bytes = GL.computeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
        if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
          pixels = HEAPU8.subarray((pixels),(pixels+bytes));
        } else if (type == 0x1406 /* GL_FLOAT */) {
          pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
          pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else {
          pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        }
        return {
          pixels: pixels,
          internalFormat: internalFormat
        };
      },enabledClientAttribIndices:[],enableVertexAttribArray:function enableVertexAttribArray(index) {
        if (!GL.enabledClientAttribIndices[index]) {
          GL.enabledClientAttribIndices[index] = true;
          GLctx.enableVertexAttribArray(index);
        }
      },disableVertexAttribArray:function disableVertexAttribArray(index) {
        if (GL.enabledClientAttribIndices[index]) {
          GL.enabledClientAttribIndices[index] = false;
          GLctx.disableVertexAttribArray(index);
        }
      },validateBufferTarget:function (target) {
        switch (target) {
          case 0x8892: // GL_ARRAY_BUFFER
          case 0x8893: // GL_ELEMENT_ARRAY_BUFFER
          case 0x8F36: // GL_COPY_READ_BUFFER
          case 0x8F37: // GL_COPY_WRITE_BUFFER
          case 0x88EB: // GL_PIXEL_PACK_BUFFER
          case 0x88EC: // GL_PIXEL_UNPACK_BUFFER
          case 0x8C2A: // GL_TEXTURE_BUFFER
          case 0x8C8E: // GL_TRANSFORM_FEEDBACK_BUFFER
          case 0x8A11: // GL_UNIFORM_BUFFER
            return true;
          default:
            return false;
        }
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes.majorVersion === 'undefined' && typeof webGLContextAttributes.minorVersion === 'undefined') {
          webGLContextAttributes.majorVersion = 1;
          webGLContextAttributes.minorVersion = 0;
        }
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes.majorVersion == 2 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['webGLContextAttributes'] === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = 0;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
  
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
        context.compressionExt = GLctx.getExtension('WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('MOZ_WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
  
        context.anisotropicExt = GLctx.getExtension('EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('MOZ_EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
  
        context.floatExt = GLctx.getExtension('OES_texture_float');
  
        // Extension available from Firefox 26 and Google Chrome 30
        context.instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
        
        // Extension available from Firefox 25 and WebKit
        context.vaoExt = GLctx.getExtension('OES_vertex_array_object');
  
        if (context.version === 2) {
          // drawBuffers is available in WebGL2 by default.
          context.drawBuffersExt = function(n, bufs) {
            GLctx.drawBuffers(n, bufs);
          };
        } else {
          var ext = GLctx.getExtension('WEBGL_draw_buffers');
          if (ext) {
            context.drawBuffersExt = function(n, bufs) {
              ext.drawBuffersWEBGL(n, bufs);
            };
          }
        }
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
   
        GLctx.getSupportedExtensions().forEach(function(ext) {
          ext = ext.replace('MOZ_', '').replace('WEBKIT_', '');
          if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
            GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
          }
        });
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }

   
  Module["_i64Add"] = _i64Add;

  
  var CL={cl_init:0,cl_extensions:["KHR_gl_sharing","KHR_fp16","KHR_fp64"],cl_digits:[1,2,3,4,5,6,7,8,9,0],cl_kernels_sig:{},cl_structs_sig:{},cl_pn_type:[],cl_objects:{},cl_objects_map:{},cl_objects_retains:{},cl_objects_mem_callback:{},cl_validator:{},cl_validator_argsize:{},init:function () {
        if (CL.cl_init == 0) {
  
          if (ENVIRONMENT_IS_NODE) {
            console.log('WebCL-Translator + Validator V2.0 !');
            try {
  
              WebCLEvent      = webcl.WebCLEvent;
              WebCLSampler    = webcl.WebCLSampler;
              WebCLContext    = webcl.WebCLContext;
              WebCLProgram    = webcl.WebCLProgram;
              WebCLException  = webcl.WebCLException;
  
            } catch (e) {
              console.error("Unfortunately your system does not support WebCL.\n");
              console.error("You are using node, make sure you have node-webcl modules from Motorola.\n");
              console.error("You must define webcl=require('webcl-node'); before require this file.\n");
  
              exit(1);
            }
  
          } else {
            console.log('%c WebCL-Translator + Validator V2.0 ! ', 'background: #222; color: #bada55');
            try {
  
              // Add webcl constant for parser
              /*
              Object.defineProperty(webcl, "SAMPLER"      , { value : 0x1300,writable : false });
              Object.defineProperty(webcl, "IMAGE2D"      , { value : 0x1301,writable : false });
              Object.defineProperty(webcl, "IMAGE3D"      , { value : 0x1302,writable : false });
              Object.defineProperty(webcl, "UNSIGNED_LONG", { value : 0x1304,writable : false });
              Object.defineProperty(webcl, "LONG"         , { value : 0x1303,writable : false });
              Object.defineProperty(webcl, "MAP_READ"     , { value : 0x1   ,writable : false });
              Object.defineProperty(webcl, "MAP_WRITE"    , { value : 0x2   ,writable : false });
              */
              webcl["SAMPLER"      ] = 0x1300; 
              webcl["IMAGE2D"      ] = 0x1301;
              webcl["IMAGE3D"      ] = 0x1302;
              webcl["UNSIGNED_LONG"] = 0x1304;
              webcl["LONG"         ] = 0x1303;
              webcl["MAP_READ"     ] = 0x1;
              webcl["MAP_WRITE"    ] = 0x2;
  
            } catch (e) {
              alert("Unfortunately your system does not support WebCL. " +
              "Make sure that you have WebKit Samsung or Firefox Nokia plugin. ");
  
              console.error("Unfortunately your system does not support WebCL.\n");
              console.error("Make sure that you have WebKit Samsung or Firefox Nokia plugin.\n");
  
              exit(1);
            }
          }
  
          for (var i = 0; i < CL.cl_extensions.length; i ++) {
  
            if (webcl.enableExtension(CL.cl_extensions[i])) {
              console.info("WebCL Init : extension "+CL.cl_extensions[i]+" supported.");
            } else {
              console.info("WebCL Init : extension "+CL.cl_extensions[i]+" not supported !!!");
            }
          }
          CL.cl_init = 1;
        }
  
        return CL.cl_init;
      },udid:function (obj) {
        var _id;
  
        if (obj !== undefined) {
  
          if ( obj.hasOwnProperty('udid') ) {
           _id = obj.udid;
  
           if (_id !== undefined) {
             return _id;
           }
          }
        }
        var _security = 10;
        do {
          //var _uuid = [];
          //_uuid[0] = CL.cl_digits[0 | Math.random()*CL.cl_digits.length-1]; // First digit of udid can't be 0
          //for (var i = 1; i < 7; i++) _uuid[i] = CL.cl_digits[0 | Math.random()*CL.cl_digits.length];
          //_id = _uuid.join('');
  
          _id = Math.random() * 9000000 | 0 + 1000000
        } while (_id in CL.cl_objects && --_security > 0)
  
        assert(!(_id in CL.cl_objects), 'UDID not unique !!!!!!');
  
        // /!\ Call udid when you add inside cl_objects if you pass object in parameter
        if (obj !== undefined) {
          //Object.defineProperty(obj, "udid", { value : _id,writable : false });
          obj["udid"] = _id;
          CL.cl_objects[_id]=obj;
        }
  
        return _id;
      },cast_long:function (arg_size) {
        var _sizelong = [];
        _sizelong.push(((arg_size & 0xFFFFFFFF00000000) >> 32));
        _sizelong.push((arg_size & 0xFFFFFFFF));
        // var _origin = x << 32 | y;
        return new Int32Array(_sizelong);
      },stringType:function (pn_type) {
        switch(pn_type) {
          case webcl.SIGNED_INT8:
            return 'INT8';
          case webcl.SIGNED_INT16:
            return 'INT16';
          case webcl.SIGNED_INT32:
            return 'INT32';
          case webcl.UNSIGNED_INT8:
            return 'UINT8';
          case webcl.UNSIGNED_INT16:
            return 'UINT16';
          case webcl.UNSIGNED_INT32:
            return 'UINT32';
          case 0x1304 /*webcl.UNSIGNED_LONG*/:
            return 'ULONG';
          case 0x1303 /*webcl.SIGNED_LONG*/:
            return 'LONG';
          case webcl.FLOAT:
            return 'FLOAT';
          case webcl.LOCAL:
            return '__local';
          case 0x1300 /*webcl.SAMPLER*/:
            return 'sampler_t';
          case 0x1301 /*webcl.IMAGE2D*/:
            return 'image2d_t';
          case 0x1302 /*webcl.IMAGE3D*/:
            return 'image3d_t';
          default:
            if (typeof(pn_type) == "string") return 'struct';
            return 'UNKNOWN';
        }
      },parseType:function (string) {
        var _value = -1;
  
        // First ulong for the webcl validator
        if ( (string.indexOf("ulong") >= 0 ) || (string.indexOf("unsigned long") >= 0 ) ) {
          // \todo : long ????
          _value = 0x1304 /*webcl.UNSIGNED_LONG*/;
        } else if ( string.indexOf("long") >= 0 ) {
          _value = 0x1303 /*webcl.SIGNED_LONG*/;
        } else if (string.indexOf("float") >= 0 ) {
          _value = webcl.FLOAT;
        } else if ( (string.indexOf("uchar") >= 0 ) || (string.indexOf("unsigned char") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT8;
        } else if ( string.indexOf("char") >= 0 ) {
          _value = webcl.SIGNED_INT8;
        } else if ( (string.indexOf("ushort") >= 0 ) || (string.indexOf("unsigned short") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT16;
        } else if ( string.indexOf("short") >= 0 ) {
          _value = webcl.SIGNED_INT16;
        } else if ( (string.indexOf("uint") >= 0 ) || (string.indexOf("unsigned int") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT32;
        } else if ( ( string.indexOf("int") >= 0 ) || ( string.indexOf("enum") >= 0 ) ) {
          _value = webcl.SIGNED_INT32;
        } else if ( string.indexOf("image3d_t") >= 0 ) {
          _value = 0x1302 /*webcl.IMAGE3D*/;
        } else if ( string.indexOf("image2d_t") >= 0 ) {
          _value = 0x1301 /*webcl.IMAGE2D*/;
        } else if ( string.indexOf("sampler_t") >= 0 ) {
          _value = 0x1300 /*webcl.SAMPLER*/;
        }
  
        return _value;
      },parseStruct:function (kernel_string,struct_name) {
  
        // Experimental parse of Struct
        // Search kernel function like 'struct_name { }' or '{ } struct_name'
        // --------------------------------------------------------------------------------
        // Step 1 : Search pattern struct_name { }
        // Step 2 : if no result : Search pattern { } struct_name
        // Step 3 : if no result : return
        // Step 4 : split by ; // Num of variable of the structure  : int toto; float tata;
        // Step 5 : split by , // Num of variable for each type     : float toto,tata,titi;
        // Step 6 : Search pattern [num] // Array Variable          : float toto[4];
        // Step 7 : Search type of the line
        // Step 8 : if exist add type else search other struct
        // --------------------------------------------------------------------------------
  
        CL.cl_structs_sig[struct_name] = [];
  
        // First search if is #define
        var _re_define = new RegExp("#[\ ]*define[\ ]*"+struct_name+"[\ ]*[A-Za-z0-9_\s]*");
        var _define = kernel_string.match(_re_define);
  
        if (_define != null && _define.length == 1) {
  
          // Get type of the line
          var _str = _define[0];
          var _type = CL.parseType(_str);
  
          if (_type != -1) {
            CL.cl_structs_sig[struct_name].push(_type);
          } else {
            var _lastSpace = _str.lastIndexOf(" ");
            var _res = _str.substr(_lastSpace + 1,_str.length - _lastSpace);
  
            CL.parseStruct(kernel_string,_res);
          }
  
          return;
        }
  
        // Second search if is typedef type name;
        var _re_typedef = new RegExp("typedef[\ ]*[A-Za-z0-9_\s]*[\ ]*"+struct_name+"[\ ]*;");
        var _typedef = kernel_string.match(_re_typedef);
  
        if (_typedef != null && _typedef.length == 1) {
  
          // Get type of the line
          var _str = _typedef[0];
          var _type = CL.parseType(_str);
  
          if (_type != -1) {
            CL.cl_structs_sig[struct_name].push(_type);
          } else {
            _str = _str.replace(/^\s+|\s+$/g, ""); // trim
            var _firstSpace = _str.indexOf(" ");
            var _lastSpace = _str.lastIndexOf(" ");
            var _res = _str.substr(_firstSpace + 1,_lastSpace - _firstSpace - 1);
  
            CL.parseStruct(kernel_string,_res);
          }
  
          return;
        }
  
        // search pattern : struct_name { } ;
        var _re_before = new RegExp(struct_name+"[\ ]"+"\{([^}]+)\}");
  
        // search pattern : { } struct_name;
        var _re_after = new RegExp("\{([^}]+)\}"+"[\ ]"+struct_name);
  
        var _res = kernel_string.match(_re_before);
        var _contains_struct = "";
  
        if (_res != null && _res.length == 2) {
          _contains_struct = _res[1];
        } else {
          _res = kernel_string.match(_re_after);
          if (_res != null && _res.length == 2) {
              _contains_struct = _res[1];
          } else {
            return;
          }
        }
  
        var _var = _contains_struct.split(";");
        for (var i = 0; i < _var.length-1; i++ ) {
          // Need for unsigned int width, height;
          var _subvar = _var[i].split(",");
  
          // Get type of the line
          var _type = CL.parseType(_var[i]);
  
          // Need for float mu[4];
          var _arrayNum = 0;
          _res = _var[i].match(/[0-9]+/);
          if (_res != null) _arrayNum = _res;
  
          if ( _type != -1) {
            for (var j = 0; j < Math.max(_subvar.length,_arrayNum) ; j++ ) {
              CL.cl_structs_sig[struct_name].push(_type);
            }
          } else {
            // Search name of the parameter
            var _struct = _subvar[0].replace(/^\s+|\s+$/g, ""); // trim
            var _name = "";
            var _start = _struct.lastIndexOf(" ");
            for (var j = _start - 1; j >= 0 ; j--) {
              var _chara = _struct.charAt(j);
              if (_chara == ' ' && _name.length > 0) {
                break;
              } else if (_chara != ' ') {
                _name = _chara + _name;
              }
            }
  
            // If struct is unknow search it
            if (!(_name in CL.cl_structs_sig && CL.cl_structs_sig[_name].length > 0)) {
              CL.parseStruct(kernel_string,_name);
            }
  
            for (var j = 0; j < Math.max(_subvar.length,_arrayNum) ; j++ ) {
              CL.cl_structs_sig[struct_name] = CL.cl_structs_sig[struct_name].concat(CL.cl_structs_sig[_name]);
            }
          }
        }
      },parseKernel:function (kernel_string) {
  
  
        // Experimental parse of Kernel
        // ----------------------------
        //
        // /!\ The minify kernel could be use by the program but some trouble with line
        // /!\ containing macro #define, for the moment only use the minify kernel for
        // /!\ parsing __kernel and struct
        //
        // Search kernel function like __kernel ... NAME ( p1 , p2 , p3)
        // --------------------------------------------------------------------------------
        // Step 1 : Minimize kernel removing all the comment and \r \n \t and multispace
        // Step 2 : Search pattern __kernel ... ( ... )
        // Step 3 : For each kernel
        // Step 3 . 1 : Search Open Brace
        // Step 3 . 2 : Search Kernel Name
        // Step 3 . 3 : Search Kernel Parameter
        // Step 3 . 4 : Grab { name : [ param, ... ] }
        // --------------------------------------------------------------------------------
  
        // Remove all comments ...
        var _mini_kernel_string  = kernel_string.replace(/(?:((["'])(?:(?:\\\\)|\\\2|(?!\\\2)\\|(?!\2).|[\n\r])*\2)|(\/\*(?:(?!\*\/).|[\n\r])*\*\/)|(\/\/[^\n\r]*(?:[\n\r]+|$))|((?:=|:)\s*(?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/))|((?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/)[gimy]?\.(?:exec|test|match|search|replace|split)\()|(\.(?:exec|test|match|search|replace|split)\((?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/))|(<!--(?:(?!-->).)*-->))/g
  , "");
  
        // Remove all char \n \r \t ...
        _mini_kernel_string = _mini_kernel_string.replace(/\n/g, " ");
        _mini_kernel_string = _mini_kernel_string.replace(/\r/g, " ");
  
        // Remove all the multispace
        _mini_kernel_string = _mini_kernel_string.replace(/\s{2,}/g, " ");
  
        // Search pattern : __kernel ... ( ... )
        // var _matches = _mini_kernel_string.match(/__kernel[A-Za-z0-9_\s]+\(([^)]+)\)/g);
        // if (_matches == null) {
        //   console.error("/!\\ Not found kernel !!!");
        //   return;
        // }
  
        // Search kernel (Pattern doesn't work with extra __attribute__)
        var _matches = [];
        var _found = 1;
        var _stringKern = _mini_kernel_string;
        var _security = 50;
  
        // Search all the kernel
        while (_found && _security) {
          // Just in case no more than 50 loop
          _security --;
  
          var _pattern = "__kernel ";
          var _kern = _stringKern.indexOf(_pattern);
  
          if (_kern == -1) {
            _pattern = " kernel ";
            _kern = _stringKern.indexOf(" kernel ");
            if (_kern == -1) {
              _pattern = "kernel ";
              _kern = _stringKern.indexOf("kernel ");
              if (_kern == -1) {
                _found = 0;
                continue;
              } else if (_kern != 0) {
                console.error("/!\\ Find word 'kernel' but is not a real kernel  .. ("+_kern+")");
                _stringKern = _stringKern.substr(_kern + _pattern.length,_stringKern.length - _kern);
                continue;
              }
            }
          }
  
          _stringKern = _stringKern.substr(_kern + _pattern.length,_stringKern.length - _kern);
  
          var _brace = _stringKern.indexOf("{");
          var _stringKern2 = _stringKern.substr(0,_brace);
          var _braceOpen = _stringKern2.lastIndexOf("(");
          var _braceClose = _stringKern2.lastIndexOf(")");
          var _stringKern3 = _stringKern2.substr(0,_braceOpen).replace(/^\s+|\s+$/g, ""); // trim
          var _space = _stringKern3.lastIndexOf(" ");
  
          _stringKern2 = _stringKern2.substr(_space + 1,_braceClose);
  
          // Add the kernel result like name_kernel(..., ... ,...)
          _matches.push(_stringKern2);
        }
  
        // For each kernel ....
        for (var i = 0; i < _matches.length; i ++) {
          // Search the open Brace
          var _brace = _matches[i].lastIndexOf("(");
  
          // Part before '('
          var _first_part = _matches[i].substr(0,_brace);
          _first_part = _first_part.replace(/^\s+|\s+$/g, ""); // trim
  
          // Part after ')'
          var _second_part = _matches[i].substr(_brace+1,_matches[i].length-_brace-2);
          _second_part = _second_part.replace(/^\s+|\s+$/g, ""); // trim
  
          // Search name part
          var _name = _first_part.substr(_first_part.lastIndexOf(" ") + 1);
  
          // If name already present reparse it may be is another test with not the same num of parameter ....
          if (_name in CL.cl_kernels_sig) {
            delete CL.cl_kernels_sig[_name]
          }
  
          // Search parameter part
          var _param = [];
  
          var _param_validator = [];
          var _param_argsize_validator = [];
          var _array = _second_part.split(",");
          for (var j = 0; j < _array.length; j++) {
            var _type = CL.parseType(_array[j]);
  
            if (_array[j].indexOf("__local") >= 0 ) {
              _param.push(webcl.LOCAL);
  
              if (_array[j].indexOf("ulong _wcl") == -1 ) {
                _param_validator.push(_param.length - 1);
              } else {
                _param_argsize_validator.push(_param.length - 1);
              }
  
            } else if (_type == -1) {
  
              _array[j] = _array[j].replace(/^\s+|\s+$/g, "");
              _array[j] = _array[j].replace("*", "");
  
              var _start = _array[j].lastIndexOf(" ");
              if (_start != -1) {
                var _kernels_struct_name = "";
                // Search Parameter type Name
                for (var k = _start - 1; k >= 0 ; k--) {
  
                  var _chara = _array[j].charAt(k);
                  if (_chara == ' ' && _kernels_struct_name.length > 0) {
                    break;
                  } else if (_chara != ' ') {
                    _kernels_struct_name = _chara + _kernels_struct_name;
                  }
                }
  
                // Parse struct only if is not already inside the map
                if (!(_kernels_struct_name in CL.cl_structs_sig))
                  CL.parseStruct(_mini_kernel_string, _kernels_struct_name);
  
                // Add the name of the struct inside the map of param kernel
                _param.push(_kernels_struct_name);
  
              } else {
                _param.push(webcl.FLOAT);
              }
  
              if (_array[j].indexOf("ulong _wcl") == -1 ) {
                _param_validator.push(_param.length - 1);
              } else {
                _param_argsize_validator.push(_param.length - 1);
              }
  
            } else {
              _param.push(_type);
  
              if (_array[j].indexOf("ulong _wcl") == -1 ) {
                _param_validator.push(_param.length - 1);
              } else {
                _param_argsize_validator.push(_param.length - 1);
              }
            }
          }
  
          CL.cl_kernels_sig[_name] = _param;
  
          CL.cl_validator[_name] = _param_validator;
          CL.cl_validator_argsize[_name] = _param_argsize_validator;
        }
  
        return _mini_kernel_string;
  
      },getImageSizeType:function (image) {
        var _sizeType = 0;
  
  
        var _info = CL.cl_objects[image].getInfo();
  
        switch (_info.channelType) {
          case webcl.SNORM_INT8:
          case webcl.SIGNED_INT8:
          case webcl.UNORM_INT8:
          case webcl.UNSIGNED_INT8:
            _sizeType = 1;
            break;
          case webcl.SNORM_INT16:
          case webcl.SIGNED_INT16:
          case webcl.UNORM_INT16:
          case webcl.UNSIGNED_INT16:
          case webcl.HALF_FLOAT:
            _sizeType = 2;
            break;
          case webcl.SIGNED_INT32:
          case webcl.UNSIGNED_INT32:
          case webcl.FLOAT:
            _sizeType = 4;
            break;
          default:
            console.error("getImageSizeType : This channel type is not yet implemented => "+_info.channelType);
        }
  
        return _sizeType;
      },getImageFormatType:function (image) {
        var _type = 0;
  
  
        var _info = CL.cl_objects[image].getInfo();
  
        switch (_info.channelType) {
          case webcl.SNORM_INT8:
          case webcl.SIGNED_INT8:
            _type = webcl.SIGNED_INT8;
            break;
          case webcl.UNORM_INT8:
          case webcl.UNSIGNED_INT8:
            _type = webcl.UNSIGNED_INT8;
            break;
          case webcl.SNORM_INT16:
          case webcl.SIGNED_INT16:
            _type = webcl.SIGNED_INT16;
            break;
          case webcl.UNORM_INT16:
          case webcl.UNSIGNED_INT16:
            _type = webcl.UNSIGNED_INT16;
            break;
          case webcl.SIGNED_INT32:
            _type = webcl.SIGNED_INT32;
          case webcl.UNSIGNED_INT32:
            _type = webcl.UNSIGNED_INT32;
            break;
          case webcl.FLOAT:
            _type = webcl.FLOAT;
            break;
          case webcl.HALF_FLOAT:
            _type = webcl.HALF_FLOAT;
            break;
          default:
            console.error("getImageFormatType : This channel type is not yet implemented => "+_info.channelType);
        }
  
        return _type;
      },getImageSizeOrder:function (image) {
        var _sizeOrder = 0;
  
  
        var _info = CL.cl_objects[image].getInfo();
  
        switch (_info.channelOrder) {
          case webcl.R:
          case webcl.A:
          case webcl.INTENSITY:
          case webcl.LUMINANCE:
            _sizeOrder = 1;
            break;
          case webcl.RG:
          case webcl.RA:
            _sizeOrder = 2;
            break;
          case webcl.RGB:
            _sizeOrder = 3;
            break;
          case webcl.RGBA:
          case webcl.BGRA:
          case webcl.ARGB:
            _sizeOrder = 4;
            break;
          default:
            console.error("getImageFormatType : This channel order is not yet implemented => "+_info.channelOrder);
        }
  
        return _sizeOrder;
      },getHostPtrArray:function (size,type) {
  
        var _host_ptr = null;
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              _host_ptr = new Int8Array( size );
              break;
            case webcl.SIGNED_INT16:
              _host_ptr = new Int16Array( size >> 1 );
              break;
            case webcl.SIGNED_INT32:
              _host_ptr = new Int32Array( size >> 2 );
              break;
            case webcl.UNSIGNED_INT8:
              _host_ptr = new Uint8Array( size );
              break;
            case webcl.UNSIGNED_INT16:
              _host_ptr = new Uint16Array( size >> 1 );
              break;
            case webcl.UNSIGNED_INT32:
              _host_ptr = new Uint32Array( size >> 2 );
              break;
            default:
              _host_ptr = new Float32Array( size >> 2 );
              break;
          }
        } else {
          _host_ptr = new Float32Array( size >> 2 );
        }
  
        return _host_ptr;
      },getCopyPointerToArray:function (ptr,size,type) {
        var _host_ptr = null;
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              _host_ptr = new Int8Array( HEAP8.subarray((ptr),(ptr+size)) );
              break;
            case webcl.SIGNED_INT16:
              _host_ptr = new Int16Array( HEAP16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;
            case webcl.SIGNED_INT32:
              _host_ptr = new Int32Array( HEAP32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
            case webcl.UNSIGNED_INT8:
              _host_ptr = new Uint8Array( HEAPU8.subarray((ptr),(ptr+size)) );
              break;
            case webcl.UNSIGNED_INT16:
              _host_ptr = new Uint16Array( HEAPU16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;
            case webcl.UNSIGNED_INT32:
              _host_ptr = new Uint32Array( HEAPU32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
            default:
              _host_ptr = new Float32Array( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
          }
        } else {
          _host_ptr = new Float32Array( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
        }
  
        return _host_ptr;
      },getCopyPointerToArrayPowTwo:function (ptr,size,type) {
        var _host_ptr = null
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              var _size = size;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Int8Array(_offset);
              _host_ptr.set( HEAP8.subarray((ptr),(ptr+size)) );
              break;
            case webcl.SIGNED_INT16:
              var _size = size >> 1;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Int16Array(_offset);
              _host_ptr.set( HEAP16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;
            case webcl.SIGNED_INT32:
              var _size = size >> 2;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Int32Array(_offset);
              _host_ptr.set( HEAP32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
            case webcl.UNSIGNED_INT8:
              var _size = size;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Uint8Array(_offset);
              _host_ptr.set( HEAPU8.subarray((ptr),(ptr+size)) );
              break;
            case webcl.UNSIGNED_INT16:
              var _size = size >> 1;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Uint16Array(_offset);
              _host_ptr.set( HEAPU16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;
            case webcl.UNSIGNED_INT32:
              var _size = size >> 2;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Uint32Array(_offset);
              _host_ptr.set( HEAPU32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
            default:
              var _size = size >> 2;
              var _offset = CL.getNextPowOfTwo(_size);
              _host_ptr = new Float32Array(_offset);
              _host_ptr.set( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
          }
        } else {
          var _size = size >> 2;
          var _offset = CL.getNextPowOfTwo(_size);
          _host_ptr = new Float32Array(_offset);
          _host_ptr.set( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
        }
  
        return _host_ptr;
      },getNextPowOfTwo:function (v) {
        // Accept 1 / 2 / 3 / 4
        if (v <= 4) return v;
        // Accept 8 / 16 / 32
        var _v = v;
        _v--;
        _v |= _v >> 1;
        _v |= _v >> 2;
        _v |= _v >> 4;
        _v |= _v >> 8;
        _v |= _v >> 16;
        _v++;
        return _v
      },copyDataToHeap:function (dest, src, size, type) {
  
        // Copy data to Emscripten heap
        //var dataHeap = new Uint8Array(Module.HEAPU8.buffer, dataPtr, nDataBytes);
        //dataHeap.set( new Uint8Array(_host_ptr.buffer) );
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              var _data_heap = new Int8Array(Module.HEAP8.buffer, dest, size);
              _data_heap.set( new Int8Array(src) );
              break;
            case webcl.SIGNED_INT16:
              var _data_heap = new Int16Array(Module.HEAP16.buffer, dest, size >> 1);
              _data_heap.set( new Int16Array(src) );
              break;
            case webcl.SIGNED_INT32:
              var _data_heap = new Int32Array(Module.HEAP32.buffer, dest, size >> 2);
              _data_heap.set( new Int32Array(src) );
              break;
            case webcl.UNSIGNED_INT8:
              var _data_heap = new Uint8Array(Module.HEAPU8.buffer, dest, size);
              _data_heap.set( new Uint8Array(src) );
              break;
            case webcl.UNSIGNED_INT16:
              var _data_heap = new Uint16Array(Module.HEAPU16.buffer, dest, size >> 1);
              _data_heap.set( new Uint16Array(src) );
              break;
            case webcl.UNSIGNED_INT32:
              var _data_heap = new Uint32Array(Module.HEAPU32.buffer, dest, size >> 2);
              _data_heap.set( new Uint32Array(src) );
              break;
            default:
              var _data_heap = new Float32Array(Module.HEAPF32.buffer, dest, size >> 2);
              _data_heap.set( new Float32Array(src) );
              break;
          }
        } else {
          var _data_heap = new Float32Array(Module.HEAPF32.buffer, dest, size >> 2);
          _data_heap.set( new Float32Array(src) );
        }
      },catchError:function (e) {
        console.error(e);
        var _error = -1;
        if (e instanceof WebCLException) {
          var _str=e.message;
          var _n=_str.lastIndexOf(" ");
          _error = _str.substr(_n+1,_str.length-_n-1);
        }
  
        return _error;
      }};function _clReleaseMemObject(memobj) {
  
      // If is an object retain don't release it until retains > 0...
      if (memobj in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[memobj] - 1;
  
        CL.cl_objects_retains[memobj] = _retain;
  
        if (_retain >= 0) {
  
          // Call the callback
          if (memobj in CL.cl_objects_mem_callback) {
            if (CL.cl_objects_mem_callback[memobj].length > 0)
              CL.cl_objects_mem_callback[memobj].pop()();
          }
  
          return webcl.SUCCESS;
        }
      }
  
      try {
  
        // Call the callback
        if (memobj in CL.cl_objects_mem_callback) {
          if (CL.cl_objects_mem_callback[memobj].length > 0)
            CL.cl_objects_mem_callback[memobj].pop()();
        }
  
        CL.cl_objects[memobj].release();
        delete CL.cl_objects[memobj];
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  
  
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          }
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  var _emscripten_resume=true;

  function _pthread_mutex_lock() {}

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  
  
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  
  
  
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
        GL.newRenderingFrameStarted();
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};var GLImmediate={MapTreeLib:null,spawnMapTreeLib:function () {
        /* A naive implementation of a map backed by an array, and accessed by
         * naive iteration along the array. (hashmap with only one bucket)
         */
        function CNaiveListMap() {
          var list = [];
  
          this.insert = function CNaiveListMap_insert(key, val) {
            if (this.contains(key|0)) return false;
            list.push([key, val]);
            return true;
          };
  
          var __contains_i;
          this.contains = function CNaiveListMap_contains(key) {
            for (__contains_i = 0; __contains_i < list.length; ++__contains_i) {
              if (list[__contains_i][0] === key) return true;
            }
            return false;
          };
  
          var __get_i;
          this.get = function CNaiveListMap_get(key) {
            for (__get_i = 0; __get_i < list.length; ++__get_i) {
              if (list[__get_i][0] === key) return list[__get_i][1];
            }
            return undefined;
          };
        };
  
        /* A tree of map nodes.
          Uses `KeyView`s to allow descending the tree without garbage.
          Example: {
            // Create our map object.
            var map = new ObjTreeMap();
  
            // Grab the static keyView for the map.
            var keyView = map.GetStaticKeyView();
  
            // Let's make a map for:
            // root: <undefined>
            //   1: <undefined>
            //     2: <undefined>
            //       5: "Three, sir!"
            //       3: "Three!"
  
            // Note how we can chain together `Reset` and `Next` to
            // easily descend based on multiple key fragments.
            keyView.Reset().Next(1).Next(2).Next(5).Set("Three, sir!");
            keyView.Reset().Next(1).Next(2).Next(3).Set("Three!");
          }
        */
        function CMapTree() {
          function CNLNode() {
            var map = new CNaiveListMap();
  
            this.child = function CNLNode_child(keyFrag) {
              if (!map.contains(keyFrag|0)) {
                map.insert(keyFrag|0, new CNLNode());
              }
              return map.get(keyFrag|0);
            };
  
            this.value = undefined;
            this.get = function CNLNode_get() {
              return this.value;
            };
  
            this.set = function CNLNode_set(val) {
              this.value = val;
            };
          }
  
          function CKeyView(root) {
            var cur;
  
            this.reset = function CKeyView_reset() {
              cur = root;
              return this;
            };
            this.reset();
  
            this.next = function CKeyView_next(keyFrag) {
              cur = cur.child(keyFrag);
              return this;
            };
  
            this.get = function CKeyView_get() {
              return cur.get();
            };
  
            this.set = function CKeyView_set(val) {
              cur.set(val);
            };
          };
  
          var root;
          var staticKeyView;
  
          this.createKeyView = function CNLNode_createKeyView() {
            return new CKeyView(root);
          }
  
          this.clear = function CNLNode_clear() {
            root = new CNLNode();
            staticKeyView = this.createKeyView();
          };
          this.clear();
  
          this.getStaticKeyView = function CNLNode_getStaticKeyView() {
            staticKeyView.reset();
            return staticKeyView;
          };
        };
  
        // Exports:
        return {
          create: function() {
            return new CMapTree();
          },
        };
      },TexEnvJIT:null,spawnTexEnvJIT:function () {
        // GL defs:
        var GL_TEXTURE0 = 0x84C0;
        var GL_TEXTURE_1D = 0x0DE0;
        var GL_TEXTURE_2D = 0x0DE1;
        var GL_TEXTURE_3D = 0x806f;
        var GL_TEXTURE_CUBE_MAP = 0x8513;
        var GL_TEXTURE_ENV = 0x2300;
        var GL_TEXTURE_ENV_MODE = 0x2200;
        var GL_TEXTURE_ENV_COLOR = 0x2201;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
        var GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
        var GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
  
        var GL_SRC0_RGB = 0x8580;
        var GL_SRC1_RGB = 0x8581;
        var GL_SRC2_RGB = 0x8582;
  
        var GL_SRC0_ALPHA = 0x8588;
        var GL_SRC1_ALPHA = 0x8589;
        var GL_SRC2_ALPHA = 0x858A;
  
        var GL_OPERAND0_RGB = 0x8590;
        var GL_OPERAND1_RGB = 0x8591;
        var GL_OPERAND2_RGB = 0x8592;
  
        var GL_OPERAND0_ALPHA = 0x8598;
        var GL_OPERAND1_ALPHA = 0x8599;
        var GL_OPERAND2_ALPHA = 0x859A;
  
        var GL_COMBINE_RGB = 0x8571;
        var GL_COMBINE_ALPHA = 0x8572;
  
        var GL_RGB_SCALE = 0x8573;
        var GL_ALPHA_SCALE = 0x0D1C;
  
        // env.mode
        var GL_ADD      = 0x0104;
        var GL_BLEND    = 0x0BE2;
        var GL_REPLACE  = 0x1E01;
        var GL_MODULATE = 0x2100;
        var GL_DECAL    = 0x2101;
        var GL_COMBINE  = 0x8570;
  
        // env.color/alphaCombiner
        //var GL_ADD         = 0x0104;
        //var GL_REPLACE     = 0x1E01;
        //var GL_MODULATE    = 0x2100;
        var GL_SUBTRACT    = 0x84E7;
        var GL_INTERPOLATE = 0x8575;
  
        // env.color/alphaSrc
        var GL_TEXTURE       = 0x1702;
        var GL_CONSTANT      = 0x8576;
        var GL_PRIMARY_COLOR = 0x8577;
        var GL_PREVIOUS      = 0x8578;
  
        // env.color/alphaOp
        var GL_SRC_COLOR           = 0x0300;
        var GL_ONE_MINUS_SRC_COLOR = 0x0301;
        var GL_SRC_ALPHA           = 0x0302;
        var GL_ONE_MINUS_SRC_ALPHA = 0x0303;
  
        var GL_RGB  = 0x1907;
        var GL_RGBA = 0x1908;
  
        // Our defs:
        var TEXENVJIT_NAMESPACE_PREFIX = "tej_";
        // Not actually constant, as they can be changed between JIT passes:
        var TEX_UNIT_UNIFORM_PREFIX = "uTexUnit";
        var TEX_COORD_VARYING_PREFIX = "vTexCoord";
        var PRIM_COLOR_VARYING = "vPrimColor";
        var TEX_MATRIX_UNIFORM_PREFIX = "uTexMatrix";
  
        // Static vars:
        var s_texUnits = null; //[];
        var s_activeTexture = 0;
  
        var s_requiredTexUnitsForPass = [];
  
        // Static funcs:
        function abort(info) {
          assert(false, "[TexEnvJIT] ABORT: " + info);
        }
  
        function abort_noSupport(info) {
          abort("No support: " + info);
        }
  
        function abort_sanity(info) {
          abort("Sanity failure: " + info);
        }
  
        function genTexUnitSampleExpr(texUnitID) {
          var texUnit = s_texUnits[texUnitID];
          var texType = texUnit.getTexType();
  
          var func = null;
          switch (texType) {
            case GL_TEXTURE_1D:
              func = "texture2D";
              break;
            case GL_TEXTURE_2D:
              func = "texture2D";
              break;
            case GL_TEXTURE_3D:
              return abort_noSupport("No support for 3D textures.");
            case GL_TEXTURE_CUBE_MAP:
              func = "textureCube";
              break;
            default:
              return abort_sanity("Unknown texType: 0x" + texType.toString(16));
          }
  
          var texCoordExpr = TEX_COORD_VARYING_PREFIX + texUnitID;
          if (TEX_MATRIX_UNIFORM_PREFIX != null) {
            texCoordExpr = "(" + TEX_MATRIX_UNIFORM_PREFIX + texUnitID + " * " + texCoordExpr + ")";
          }
          return func + "(" + TEX_UNIT_UNIFORM_PREFIX + texUnitID + ", " + texCoordExpr + ".xy)";
        }
  
        function getTypeFromCombineOp(op) {
          switch (op) {
            case GL_SRC_COLOR:
            case GL_ONE_MINUS_SRC_COLOR:
              return "vec3";
            case GL_SRC_ALPHA:
            case GL_ONE_MINUS_SRC_ALPHA:
              return "float";
          }
  
          return abort_noSupport("Unsupported combiner op: 0x" + op.toString(16));
        }
  
        function getCurTexUnit() {
          return s_texUnits[s_activeTexture];
        }
  
        function genCombinerSourceExpr(texUnitID, constantExpr, previousVar,
                                       src, op)
        {
          var srcExpr = null;
          switch (src) {
            case GL_TEXTURE:
              srcExpr = genTexUnitSampleExpr(texUnitID);
              break;
            case GL_CONSTANT:
              srcExpr = constantExpr;
              break;
            case GL_PRIMARY_COLOR:
              srcExpr = PRIM_COLOR_VARYING;
              break;
            case GL_PREVIOUS:
              srcExpr = previousVar;
              break;
            default:
                return abort_noSupport("Unsupported combiner src: 0x" + src.toString(16));
          }
  
          var expr = null;
          switch (op) {
            case GL_SRC_COLOR:
              expr = srcExpr + ".rgb";
              break;
            case GL_ONE_MINUS_SRC_COLOR:
              expr = "(vec3(1.0) - " + srcExpr + ".rgb)";
              break;
            case GL_SRC_ALPHA:
              expr = srcExpr + ".a";
              break;
            case GL_ONE_MINUS_SRC_ALPHA:
              expr = "(1.0 - " + srcExpr + ".a)";
              break;
            default:
              return abort_noSupport("Unsupported combiner op: 0x" + op.toString(16));
          }
  
          return expr;
        }
  
        function valToFloatLiteral(val) {
          if (val == Math.round(val)) return val + '.0';
          return val;
        }
  
  
        // Classes:
        function CTexEnv() {
          this.mode = GL_MODULATE;
          this.colorCombiner = GL_MODULATE;
          this.alphaCombiner = GL_MODULATE;
          this.colorScale = 1;
          this.alphaScale = 1;
          this.envColor = [0, 0, 0, 0];
  
          this.colorSrc = [
            GL_TEXTURE,
            GL_PREVIOUS,
            GL_CONSTANT
          ];
          this.alphaSrc = [
            GL_TEXTURE,
            GL_PREVIOUS,
            GL_CONSTANT
          ];
          this.colorOp = [
            GL_SRC_COLOR,
            GL_SRC_COLOR,
            GL_SRC_ALPHA
          ];
          this.alphaOp = [
            GL_SRC_ALPHA,
            GL_SRC_ALPHA,
            GL_SRC_ALPHA
          ];
  
          // Map GLenums to small values to efficiently pack the enums to bits for tighter access.
          this.traverseKey = {
            // mode
            0x1E01 /* GL_REPLACE */: 0,
            0x2100 /* GL_MODULATE */: 1,
            0x0104 /* GL_ADD */: 2,
            0x0BE2 /* GL_BLEND */: 3,
            0x2101 /* GL_DECAL */: 4,
            0x8570 /* GL_COMBINE */: 5,
  
            // additional color and alpha combiners
            0x84E7 /* GL_SUBTRACT */: 3,
            0x8575 /* GL_INTERPOLATE */: 4,
  
            // color and alpha src
            0x1702 /* GL_TEXTURE */: 0,
            0x8576 /* GL_CONSTANT */: 1,
            0x8577 /* GL_PRIMARY_COLOR */: 2,
            0x8578 /* GL_PREVIOUS */: 3,
  
            // color and alpha op
            0x0300 /* GL_SRC_COLOR */: 0,
            0x0301 /* GL_ONE_MINUS_SRC_COLOR */: 1,
            0x0302 /* GL_SRC_ALPHA */: 2,
            0x0300 /* GL_ONE_MINUS_SRC_ALPHA */: 3
          };
  
          // The tuple (key0,key1,key2) uniquely identifies the state of the variables in CTexEnv.
          // -1 on key0 denotes 'the whole cached key is dirty'
          this.key0 = -1;
          this.key1 = 0;
          this.key2 = 0;
  
          this.computeKey0 = function() {
            var k = this.traverseKey;
            var key = k[this.mode] * 1638400; // 6 distinct values.
            key += k[this.colorCombiner] * 327680; // 5 distinct values.
            key += k[this.alphaCombiner] * 65536; // 5 distinct values.
            // The above three fields have 6*5*5=150 distinct values -> 8 bits.
            key += (this.colorScale-1) * 16384; // 10 bits used.
            key += (this.alphaScale-1) * 4096; // 12 bits used.
            key += k[this.colorSrc[0]] * 1024; // 14
            key += k[this.colorSrc[1]] * 256; // 16
            key += k[this.colorSrc[2]] * 64; // 18
            key += k[this.alphaSrc[0]] * 16; // 20
            key += k[this.alphaSrc[1]] * 4; // 22
            key += k[this.alphaSrc[2]]; // 24 bits used total.
            return key;
          }
          this.computeKey1 = function() {
            var k = this.traverseKey;
            key = k[this.colorOp[0]] * 4096;
            key += k[this.colorOp[1]] * 1024;             
            key += k[this.colorOp[2]] * 256;
            key += k[this.alphaOp[0]] * 16;
            key += k[this.alphaOp[1]] * 4;
            key += k[this.alphaOp[2]];
            return key;            
          }
          // TODO: remove this. The color should not be part of the key!
          this.computeKey2 = function() {
            return this.envColor[0] * 16777216 + this.envColor[1] * 65536 + this.envColor[2] * 256 + 1 + this.envColor[3];
          }
          this.recomputeKey = function() {
            this.key0 = this.computeKey0();
            this.key1 = this.computeKey1();
            this.key2 = this.computeKey2();
          }
          this.invalidateKey = function() {
            this.key0 = -1; // The key of this texture unit must be recomputed when rendering the next time.
            GLImmediate.currentRenderer = null; // The currently used renderer must be re-evaluated at next render.
          }
        }
  
        function CTexUnit() {
          this.env = new CTexEnv();
          this.enabled_tex1D   = false;
          this.enabled_tex2D   = false;
          this.enabled_tex3D   = false;
          this.enabled_texCube = false;
          this.texTypesEnabled = 0; // A bitfield combination of the four flags above, used for fast access to operations.
  
          this.traverseState = function CTexUnit_traverseState(keyView) {
            if (this.texTypesEnabled) {
              if (this.env.key0 == -1) {
                this.env.recomputeKey();
              }
              keyView.next(this.texTypesEnabled | (this.env.key0 << 4));
              keyView.next(this.env.key1);
              keyView.next(this.env.key2);
            } else {
              // For correctness, must traverse a zero value, theoretically a subsequent integer key could collide with this value otherwise.
              keyView.next(0);
            }
          };
        };
  
        // Class impls:
        CTexUnit.prototype.enabled = function CTexUnit_enabled() {
          return this.texTypesEnabled;
        }
  
        CTexUnit.prototype.genPassLines = function CTexUnit_genPassLines(passOutputVar, passInputVar, texUnitID) {
          if (!this.enabled()) {
            return ["vec4 " + passOutputVar + " = " + passInputVar + ";"];
          }
          var lines = this.env.genPassLines(passOutputVar, passInputVar, texUnitID).join('\n');
  
          var texLoadLines = '';
          var texLoadRegex = /(texture.*?\(.*?\))/g;
          var loadCounter = 0;
          var load;
  
          // As an optimization, merge duplicate identical texture loads to one var.
          while(load = texLoadRegex.exec(lines)) {
            var texLoadExpr = load[1];
            var secondOccurrence = lines.slice(load.index+1).indexOf(texLoadExpr);
            if (secondOccurrence != -1) { // And also has a second occurrence of same load expression..
              // Create new var to store the common load.
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texLoadVar = prefix + 'texload' + loadCounter++;
              var texLoadLine = 'vec4 ' + texLoadVar + ' = ' + texLoadExpr + ';\n';
              texLoadLines += texLoadLine + '\n'; // Store the generated texture load statements in a temp string to not confuse regex search in progress.
              lines = lines.split(texLoadExpr).join(texLoadVar);
              // Reset regex search, since we modified the string.
              texLoadRegex = /(texture.*\(.*\))/g;
            }
          }
          return [texLoadLines + lines];
        }
  
        CTexUnit.prototype.getTexType = function CTexUnit_getTexType() {
          if (this.enabled_texCube) {
            return GL_TEXTURE_CUBE_MAP;
          } else if (this.enabled_tex3D) {
            return GL_TEXTURE_3D;
          } else if (this.enabled_tex2D) {
            return GL_TEXTURE_2D;
          } else if (this.enabled_tex1D) {
            return GL_TEXTURE_1D;
          }
          return 0;
        }
  
        CTexEnv.prototype.genPassLines = function CTexEnv_genPassLines(passOutputVar, passInputVar, texUnitID) {
          switch (this.mode) {
            case GL_REPLACE: {
              /* RGB:
               * Cv = Cs
               * Av = Ap // Note how this is different, and that we'll
               *            need to track the bound texture internalFormat
               *            to get this right.
               *
               * RGBA:
               * Cv = Cs
               * Av = As
               */
              return [
                "vec4 " + passOutputVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
              ];
            }
            case GL_ADD: {
              /* RGBA:
               * Cv = Cp + Cs
               * Av = ApAs
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
  
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                "vec3 " + colorVar + " = " + passInputVar + ".rgb + " + texVar + ".rgb;",
                "float " + alphaVar + " = " + passInputVar + ".a * " + texVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_MODULATE: {
              /* RGBA:
               * Cv = CpCs
               * Av = ApAs
               */
              var line = [
                "vec4 " + passOutputVar,
                " = ",
                  passInputVar,
                  " * ",
                  genTexUnitSampleExpr(texUnitID),
                ";",
              ];
              return [line.join("")];
            }
            case GL_DECAL: {
              /* RGBA:
               * Cv = Cp(1 - As) + CsAs
               * Av = Ap
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
  
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                [
                  "vec3 " + colorVar + " = ",
                    passInputVar + ".rgb * (1.0 - " + texVar + ".a)",
                      " + ",
                    texVar + ".rgb * " + texVar + ".a",
                  ";"
                ].join(""),
                "float " + alphaVar + " = " + passInputVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_BLEND: {
              /* RGBA:
               * Cv = Cp(1 - Cs) + CcCs
               * Av = As
               */
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var texVar = prefix + "tex";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
  
              return [
                "vec4 " + texVar + " = " + genTexUnitSampleExpr(texUnitID) + ";",
                [
                  "vec3 " + colorVar + " = ",
                    passInputVar + ".rgb * (1.0 - " + texVar + ".rgb)",
                      " + ",
                    PRIM_COLOR_VARYING + ".rgb * " + texVar + ".rgb",
                  ";"
                ].join(""),
                "float " + alphaVar + " = " + texVar + ".a;",
                "vec4 " + passOutputVar + " = vec4(" + colorVar + ", " + alphaVar + ");",
              ];
            }
            case GL_COMBINE: {
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var colorVar = prefix + "color";
              var alphaVar = prefix + "alpha";
              var colorLines = this.genCombinerLines(true, colorVar,
                                                     passInputVar, texUnitID,
                                                     this.colorCombiner, this.colorSrc, this.colorOp);
              var alphaLines = this.genCombinerLines(false, alphaVar,
                                                     passInputVar, texUnitID,
                                                     this.alphaCombiner, this.alphaSrc, this.alphaOp);
  
              // Generate scale, but avoid generating an identity op that multiplies by one.
              var scaledColor = (this.colorScale == 1) ? colorVar : (colorVar + " * " + valToFloatLiteral(this.colorScale));
              var scaledAlpha = (this.alphaScale == 1) ? alphaVar : (alphaVar + " * " + valToFloatLiteral(this.alphaScale));
  
              var line = [
                "vec4 " + passOutputVar,
                " = ",
                  "vec4(",
                      scaledColor,
                      ", ",
                      scaledAlpha,
                  ")",
                ";",
              ].join("");
              return [].concat(colorLines, alphaLines, [line]);
            }
          }
  
          return abort_noSupport("Unsupported TexEnv mode: 0x" + this.mode.toString(16));
        }
  
        CTexEnv.prototype.genCombinerLines = function CTexEnv_getCombinerLines(isColor, outputVar,
                                                                               passInputVar, texUnitID,
                                                                               combiner, srcArr, opArr)
        {
          var argsNeeded = null;
          switch (combiner) {
            case GL_REPLACE:
              argsNeeded = 1;
              break;
  
            case GL_MODULATE:
            case GL_ADD:
            case GL_SUBTRACT:
              argsNeeded = 2;
              break;
  
            case GL_INTERPOLATE:
              argsNeeded = 3;
              break;
  
            default:
              return abort_noSupport("Unsupported combiner: 0x" + combiner.toString(16));
          }
  
          var constantExpr = [
            "vec4(",
              valToFloatLiteral(this.envColor[0]),
              ", ",
              valToFloatLiteral(this.envColor[1]),
              ", ",
              valToFloatLiteral(this.envColor[2]),
              ", ",
              valToFloatLiteral(this.envColor[3]),
            ")",
          ].join("");
          var src0Expr = (argsNeeded >= 1) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[0], opArr[0])
                                           : null;
          var src1Expr = (argsNeeded >= 2) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[1], opArr[1])
                                           : null;
          var src2Expr = (argsNeeded >= 3) ? genCombinerSourceExpr(texUnitID, constantExpr, passInputVar, srcArr[2], opArr[2])
                                           : null;
  
          var outputType = isColor ? "vec3" : "float";
          var lines = null;
          switch (combiner) {
            case GL_REPLACE: {
              var line = [
                outputType + " " + outputVar,
                " = ",
                  src0Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_MODULATE: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " * " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_ADD: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " + " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_SUBTRACT: {
              var line = [
                outputType + " " + outputVar + " = ",
                  src0Expr + " - " + src1Expr,
                ";",
              ];
              lines = [line.join("")];
              break;
            }
            case GL_INTERPOLATE: {
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + texUnitID + "_";
              var arg2Var = prefix + "colorSrc2";
              var arg2Line = getTypeFromCombineOp(this.colorOp[2]) + " " + arg2Var + " = " + src2Expr + ";";
  
              var line = [
                outputType + " " + outputVar,
                " = ",
                  src0Expr + " * " + arg2Var,
                  " + ",
                  src1Expr + " * (1.0 - " + arg2Var + ")",
                ";",
              ];
              lines = [
                arg2Line,
                line.join(""),
              ];
              break;
            }
  
            default:
              return abort_sanity("Unmatched TexEnv.colorCombiner?");
          }
  
          return lines;
        }
  
        return {
          // Exports:
          init: function(gl, specifiedMaxTextureImageUnits) {
            var maxTexUnits = 0;
            if (specifiedMaxTextureImageUnits) {
              maxTexUnits = specifiedMaxTextureImageUnits;
            } else if (gl) {
              maxTexUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
            }
            assert(maxTexUnits > 0);
            s_texUnits = [];
            for (var i = 0; i < maxTexUnits; i++) {
              s_texUnits.push(new CTexUnit());
            }
          },
  
          setGLSLVars: function(uTexUnitPrefix, vTexCoordPrefix, vPrimColor, uTexMatrixPrefix) {
            TEX_UNIT_UNIFORM_PREFIX   = uTexUnitPrefix;
            TEX_COORD_VARYING_PREFIX  = vTexCoordPrefix;
            PRIM_COLOR_VARYING        = vPrimColor;
            TEX_MATRIX_UNIFORM_PREFIX = uTexMatrixPrefix;
          },
  
          genAllPassLines: function(resultDest, indentSize) {
            indentSize = indentSize || 0;
  
            s_requiredTexUnitsForPass.length = 0; // Clear the list.
            var lines = [];
            var lastPassVar = PRIM_COLOR_VARYING;
            for (var i = 0; i < s_texUnits.length; i++) {
              if (!s_texUnits[i].enabled()) continue;
  
              s_requiredTexUnitsForPass.push(i);
  
              var prefix = TEXENVJIT_NAMESPACE_PREFIX + 'env' + i + "_";
              var passOutputVar = prefix + "result";
  
              var newLines = s_texUnits[i].genPassLines(passOutputVar, lastPassVar, i);
              lines = lines.concat(newLines, [""]);
  
              lastPassVar = passOutputVar;
            }
            lines.push(resultDest + " = " + lastPassVar + ";");
  
            var indent = "";
            for (var i = 0; i < indentSize; i++) indent += " ";
  
            var output = indent + lines.join("\n" + indent);
  
            return output;
          },
  
          getUsedTexUnitList: function() {
            return s_requiredTexUnitsForPass;
          },
  
          traverseState: function(keyView) {
            for (var i = 0; i < s_texUnits.length; i++) {
              s_texUnits[i].traverseState(keyView);
            }
          },
  
          getTexUnitType: function(texUnitID) {
            assert(texUnitID >= 0 &&
                   texUnitID < s_texUnits.length);
            return s_texUnits[texUnitID].getTexType();
          },
  
          // Hooks:
          hook_activeTexture: function(texture) {
            s_activeTexture = texture - GL_TEXTURE0;
          },
  
          hook_enable: function(cap) {
            var cur = getCurTexUnit();
            switch (cap) {
              case GL_TEXTURE_1D:
                if (!cur.enabled_tex1D) {
                  GLImmediate.currentRenderer = null; // Renderer state changed, and must be recreated or looked up again.
                  cur.enabled_tex1D = true;
                  cur.texTypesEnabled |= 1;
                }
                break;
              case GL_TEXTURE_2D:
                if (!cur.enabled_tex2D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex2D = true;
                  cur.texTypesEnabled |= 2;
                }
                break;
              case GL_TEXTURE_3D:
                if (!cur.enabled_tex3D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex3D = true;
                  cur.texTypesEnabled |= 4;
                }
                break;
              case GL_TEXTURE_CUBE_MAP:
                if (!cur.enabled_texCube) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_texCube = true;
                  cur.texTypesEnabled |= 8;
                }
                break;
            }
          },
  
          hook_disable: function(cap) {
            var cur = getCurTexUnit();
            switch (cap) {
              case GL_TEXTURE_1D:
                if (cur.enabled_tex1D) {
                  GLImmediate.currentRenderer = null; // Renderer state changed, and must be recreated or looked up again.
                  cur.enabled_tex1D = false;
                  cur.texTypesEnabled &= ~1;
                }
                break;
              case GL_TEXTURE_2D:
                if (cur.enabled_tex2D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex2D = false;
                  cur.texTypesEnabled &= ~2;
                }
                break;
              case GL_TEXTURE_3D:
                if (cur.enabled_tex3D) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_tex3D = false;
                  cur.texTypesEnabled &= ~4;
                }
                break;
              case GL_TEXTURE_CUBE_MAP:
                if (cur.enabled_texCube) {
                  GLImmediate.currentRenderer = null;
                  cur.enabled_texCube = false;
                  cur.texTypesEnabled &= ~8;
                }
                break;
            }
          },
  
          hook_texEnvf: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_RGB_SCALE:
                if (env.colorScale != param) {
                  env.invalidateKey(); // We changed FFP emulation renderer state.
                  env.colorScale = param;
                }
                break;
              case GL_ALPHA_SCALE:
                if (env.alphaScale != param) {
                  env.invalidateKey();
                  env.alphaScale = param;
                }
                break;
  
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvf`.');
            }
          },
  
          hook_texEnvi: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_MODE:
                if (env.mode != param) {
                  env.invalidateKey(); // We changed FFP emulation renderer state.
                  env.mode = param;
                }
                break;
  
              case GL_COMBINE_RGB:
                if (env.colorCombiner != param) {
                  env.invalidateKey();
                  env.colorCombiner = param;
                }
                break;
              case GL_COMBINE_ALPHA:
                if (env.alphaCombiner != param) {
                  env.invalidateKey();
                  env.alphaCombiner = param;
                }
                break;
  
              case GL_SRC0_RGB:
                if (env.colorSrc[0] != param) {
                  env.invalidateKey();
                  env.colorSrc[0] = param;
                }
                break;
              case GL_SRC1_RGB:
                if (env.colorSrc[1] != param) {
                  env.invalidateKey();
                  env.colorSrc[1] = param;
                }
                break;
              case GL_SRC2_RGB:
                if (env.colorSrc[2] != param) {
                  env.invalidateKey();
                  env.colorSrc[2] = param;
                }
                break;
  
              case GL_SRC0_ALPHA:
                if (env.alphaSrc[0] != param) {
                  env.invalidateKey();
                  env.alphaSrc[0] = param;
                }
                break;
              case GL_SRC1_ALPHA:
                if (env.alphaSrc[1] != param) {
                  env.invalidateKey();
                  env.alphaSrc[1] = param;
                }
                break;
              case GL_SRC2_ALPHA:
                if (env.alphaSrc[2] != param) {
                  env.invalidateKey();
                  env.alphaSrc[2] = param;
                }
                break;
  
              case GL_OPERAND0_RGB:
                if (env.colorOp[0] != param) {
                  env.invalidateKey();
                  env.colorOp[0] = param;
                }
                break;
              case GL_OPERAND1_RGB:
                if (env.colorOp[1] != param) {
                  env.invalidateKey();
                  env.colorOp[1] = param;
                }
                break;
              case GL_OPERAND2_RGB:
                if (env.colorOp[2] != param) {
                  env.invalidateKey();
                  env.colorOp[2] = param;
                }
                break;
  
              case GL_OPERAND0_ALPHA:
                if (env.alphaOp[0] != param) {
                  env.invalidateKey();
                  env.alphaOp[0] = param;
                }
                break;
              case GL_OPERAND1_ALPHA:
                if (env.alphaOp[1] != param) {
                  env.invalidateKey();
                  env.alphaOp[1] = param;
                }
                break;
              case GL_OPERAND2_ALPHA:
                if (env.alphaOp[2] != param) {
                  env.invalidateKey();
                  env.alphaOp[2] = param;
                }
                break;
  
              case GL_RGB_SCALE:
                if (env.colorScale != param) {
                  env.invalidateKey();
                  env.colorScale = param;
                }
                break;
              case GL_ALPHA_SCALE:
                if (env.alphaScale != param) {
                  env.invalidateKey();
                  env.alphaScale = param;
                }
                break;
  
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvi`.');
            }
          },
  
          hook_texEnvfv: function(target, pname, params) {
            if (target != GL_TEXTURE_ENV) return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_COLOR: {
                for (var i = 0; i < 4; i++) {
                  var param = HEAPF32[(((params)+(i*4))>>2)];
                  if (env.envColor[i] != param) {
                    env.invalidateKey(); // We changed FFP emulation renderer state.
                    env.envColor[i] = param;
                  }
                }
                break
              }
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glTexEnvfv`.');
            }
          },
  
          hook_getTexEnviv: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_MODE:
                HEAP32[((param)>>2)]=env.mode;
                return;
  
              case GL_TEXTURE_ENV_COLOR:
                HEAP32[((param)>>2)]=Math.max(Math.min(env.envColor[0]*255, 255, -255));
                HEAP32[(((param)+(1))>>2)]=Math.max(Math.min(env.envColor[1]*255, 255, -255));
                HEAP32[(((param)+(2))>>2)]=Math.max(Math.min(env.envColor[2]*255, 255, -255));
                HEAP32[(((param)+(3))>>2)]=Math.max(Math.min(env.envColor[3]*255, 255, -255));
                return;
  
              case GL_COMBINE_RGB:
                HEAP32[((param)>>2)]=env.colorCombiner;
                return;
  
              case GL_COMBINE_ALPHA:
                HEAP32[((param)>>2)]=env.alphaCombiner;
                return;
  
              case GL_SRC0_RGB:
                HEAP32[((param)>>2)]=env.colorSrc[0];
                return;
  
              case GL_SRC1_RGB:
                HEAP32[((param)>>2)]=env.colorSrc[1];
                return;
  
              case GL_SRC2_RGB:
                HEAP32[((param)>>2)]=env.colorSrc[2];
                return;
  
              case GL_SRC0_ALPHA:
                HEAP32[((param)>>2)]=env.alphaSrc[0];
                return;
  
              case GL_SRC1_ALPHA:
                HEAP32[((param)>>2)]=env.alphaSrc[1];
                return;
  
              case GL_SRC2_ALPHA:
                HEAP32[((param)>>2)]=env.alphaSrc[2];
                return;
  
              case GL_OPERAND0_RGB:
                HEAP32[((param)>>2)]=env.colorOp[0];
                return;
  
              case GL_OPERAND1_RGB:
                HEAP32[((param)>>2)]=env.colorOp[1];
                return;
  
              case GL_OPERAND2_RGB:
                HEAP32[((param)>>2)]=env.colorOp[2];
                return;
  
              case GL_OPERAND0_ALPHA:
                HEAP32[((param)>>2)]=env.alphaOp[0];
                return;
  
              case GL_OPERAND1_ALPHA:
                HEAP32[((param)>>2)]=env.alphaOp[1];
                return;
  
              case GL_OPERAND2_ALPHA:
                HEAP32[((param)>>2)]=env.alphaOp[2];
                return;
  
              case GL_RGB_SCALE:
                HEAP32[((param)>>2)]=env.colorScale;
                return;
  
              case GL_ALPHA_SCALE:
                HEAP32[((param)>>2)]=env.alphaScale;
                return;
  
              default:
                Module.printErr('WARNING: Unhandled `pname` in call to `glGetTexEnvi`.');
            }
          },
  
          hook_getTexEnvfv: function(target, pname, param) {
            if (target != GL_TEXTURE_ENV)
              return;
  
            var env = getCurTexUnit().env;
            switch (pname) {
              case GL_TEXTURE_ENV_COLOR:
                HEAPF32[((param)>>2)]=env.envColor[0];
                HEAPF32[(((param)+(4))>>2)]=env.envColor[1];
                HEAPF32[(((param)+(8))>>2)]=env.envColor[2];
                HEAPF32[(((param)+(12))>>2)]=env.envColor[3];
                return;
            }
          }
        };
      },vertexData:null,vertexDataU8:null,tempData:null,indexData:null,vertexCounter:0,mode:-1,rendererCache:null,rendererComponents:[],rendererComponentPointer:0,lastRenderer:null,lastArrayBuffer:null,lastProgram:null,lastStride:-1,matrix:[],matrixStack:[],currentMatrix:0,tempMatrix:null,matricesModified:false,useTextureMatrix:false,VERTEX:0,NORMAL:1,COLOR:2,TEXTURE0:3,NUM_ATTRIBUTES:-1,MAX_TEXTURES:-1,totalEnabledClientAttributes:0,enabledClientAttributes:[0,0],clientAttributes:[],liveClientAttributes:[],currentRenderer:null,modifiedClientAttributes:false,clientActiveTexture:0,clientColor:null,usedTexUnitList:[],fixedFunctionProgram:null,setClientAttribute:function setClientAttribute(name, size, type, stride, pointer) {
        var attrib = GLImmediate.clientAttributes[name];
        if (!attrib) {
          for (var i = 0; i <= name; i++) { // keep flat
            if (!GLImmediate.clientAttributes[i]) {
              GLImmediate.clientAttributes[i] = {
                name: name,
                size: size,
                type: type,
                stride: stride,
                pointer: pointer,
                offset: 0
              };
            }
          }
        } else {
          attrib.name = name;
          attrib.size = size;
          attrib.type = type;
          attrib.stride = stride;
          attrib.pointer = pointer;
          attrib.offset = 0;
        }
        GLImmediate.modifiedClientAttributes = true;
      },addRendererComponent:function addRendererComponent(name, size, type) {
        if (!GLImmediate.rendererComponents[name]) {
          GLImmediate.rendererComponents[name] = 1;
          if (GLImmediate.enabledClientAttributes[name]) {
            console.log("Warning: glTexCoord used after EnableClientState for TEXTURE_COORD_ARRAY for TEXTURE0. Disabling TEXTURE_COORD_ARRAY...");
          }
          GLImmediate.enabledClientAttributes[name] = true;
          GLImmediate.setClientAttribute(name, size, type, 0, GLImmediate.rendererComponentPointer);
          GLImmediate.rendererComponentPointer += size * GL.byteSizeByType[type - GL.byteSizeByTypeRoot];
          // We can enable the correct attribute stream index immediately here, since the same attribute in each shader
          // will be bound to this same index.
          GL.enableVertexAttribArray(name);
        } else {
          GLImmediate.rendererComponents[name]++;
        }
      },disableBeginEndClientAttributes:function disableBeginEndClientAttributes() {
        for (var i = 0; i < GLImmediate.NUM_ATTRIBUTES; i++) {
          if (GLImmediate.rendererComponents[i]) GLImmediate.enabledClientAttributes[i] = false;
        }
      },getRenderer:function getRenderer() {
        // If no FFP state has changed that would have forced to re-evaluate which FFP emulation shader to use,
        // we have the currently used renderer in cache, and can immediately return that.
        if (GLImmediate.currentRenderer) {
          return GLImmediate.currentRenderer;
        }
        // return a renderer object given the liveClientAttributes
        // we maintain a cache of renderers, optimized to not generate garbage
        var attributes = GLImmediate.liveClientAttributes;
        var cacheMap = GLImmediate.rendererCache;
        var keyView = cacheMap.getStaticKeyView().reset();
  
        // By attrib state:
        var enabledAttributesKey = 0;
        for (var i = 0; i < attributes.length; i++) {
          enabledAttributesKey |= 1 << attributes[i].name;
        }
  
        // By fog state:
        var fogParam = 0;
        if (GLEmulation.fogEnabled) {
          switch (GLEmulation.fogMode) {
            case 0x0801: // GL_EXP2
              fogParam = 1;
              break;
            case 0x2601: // GL_LINEAR
              fogParam = 2;
              break;
            default: // default to GL_EXP
              fogParam = 3;
              break;
          }
        }
        keyView.next((enabledAttributesKey << 2) | fogParam);
  
          GLImmediate.TexEnvJIT.traverseState(keyView);
  
        // If we don't already have it, create it.
        var renderer = keyView.get();
        if (!renderer) {
          renderer = GLImmediate.createRenderer();
          GLImmediate.currentRenderer = renderer;
          keyView.set(renderer);
          return renderer;
        }
        GLImmediate.currentRenderer = renderer; // Cache the currently used renderer, so later lookups without state changes can get this fast.
        return renderer;
      },createRenderer:function createRenderer(renderer) {
        var useCurrProgram = !!GL.currProgram;
        var hasTextures = false;
        for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
          var texAttribName = GLImmediate.TEXTURE0 + i;
          if (!GLImmediate.enabledClientAttributes[texAttribName])
            continue;
  
          if (!useCurrProgram) {
            if (GLImmediate.TexEnvJIT.getTexUnitType(i) == 0) {
               Runtime.warnOnce("GL_TEXTURE" + i + " coords are supplied, but that texture unit is disabled in the fixed-function pipeline.");
            }
          }
  
          hasTextures = true;
        }
  
        var ret = {
          init: function init() {
            // For fixed-function shader generation.
            var uTexUnitPrefix = 'u_texUnit';
            var aTexCoordPrefix = 'a_texCoord';
            var vTexCoordPrefix = 'v_texCoord';
            var vPrimColor = 'v_color';
            var uTexMatrixPrefix = GLImmediate.useTextureMatrix ? 'u_textureMatrix' : null;
  
            if (useCurrProgram) {
              if (GL.shaderInfos[GL.programShaders[GL.currProgram][0]].type == GLctx.VERTEX_SHADER) {
                this.vertexShader = GL.shaders[GL.programShaders[GL.currProgram][0]];
                this.fragmentShader = GL.shaders[GL.programShaders[GL.currProgram][1]];
              } else {
                this.vertexShader = GL.shaders[GL.programShaders[GL.currProgram][1]];
                this.fragmentShader = GL.shaders[GL.programShaders[GL.currProgram][0]];
              }
              this.program = GL.programs[GL.currProgram];
              this.usedTexUnitList = [];
            } else {
              // IMPORTANT NOTE: If you parameterize the shader source based on any runtime values
              // in order to create the least expensive shader possible based on the features being
              // used, you should also update the code in the beginning of getRenderer to make sure
              // that you cache the renderer based on the said parameters.
              if (GLEmulation.fogEnabled) {
                switch (GLEmulation.fogMode) {
                  case 0x0801: // GL_EXP2
                    // fog = exp(-(gl_Fog.density * gl_FogFragCoord)^2)
                    var fogFormula = '  float fog = exp(-u_fogDensity * u_fogDensity * ecDistance * ecDistance); \n';
                    break;
                  case 0x2601: // GL_LINEAR
                    // fog = (gl_Fog.end - gl_FogFragCoord) * gl_fog.scale
                    var fogFormula = '  float fog = (u_fogEnd - ecDistance) * u_fogScale; \n';
                    break;
                  default: // default to GL_EXP
                    // fog = exp(-gl_Fog.density * gl_FogFragCoord)
                    var fogFormula = '  float fog = exp(-u_fogDensity * ecDistance); \n';
                    break;
                }
              }
  
              GLImmediate.TexEnvJIT.setGLSLVars(uTexUnitPrefix, vTexCoordPrefix, vPrimColor, uTexMatrixPrefix);
              var fsTexEnvPass = GLImmediate.TexEnvJIT.genAllPassLines('gl_FragColor', 2);
  
              var texUnitAttribList = '';
              var texUnitVaryingList = '';
              var texUnitUniformList = '';
              var vsTexCoordInits = '';
              this.usedTexUnitList = GLImmediate.TexEnvJIT.getUsedTexUnitList();
              for (var i = 0; i < this.usedTexUnitList.length; i++) {
                var texUnit = this.usedTexUnitList[i];
                texUnitAttribList += 'attribute vec4 ' + aTexCoordPrefix + texUnit + ';\n';
                texUnitVaryingList += 'varying vec4 ' + vTexCoordPrefix + texUnit + ';\n';
                texUnitUniformList += 'uniform sampler2D ' + uTexUnitPrefix + texUnit + ';\n';
                vsTexCoordInits += '  ' + vTexCoordPrefix + texUnit + ' = ' + aTexCoordPrefix + texUnit + ';\n';
  
                if (GLImmediate.useTextureMatrix) {
                  texUnitUniformList += 'uniform mat4 ' + uTexMatrixPrefix + texUnit + ';\n';
                }
              }
  
              var vsFogVaryingInit = null;
              if (GLEmulation.fogEnabled) {
                vsFogVaryingInit = '  v_fogFragCoord = abs(ecPosition.z);\n';
              }
  
              var vsSource = [
                'attribute vec4 a_position;',
                'attribute vec4 a_color;',
                'varying vec4 v_color;',
                texUnitAttribList,
                texUnitVaryingList,
                (GLEmulation.fogEnabled ? 'varying float v_fogFragCoord;' : null),
                'uniform mat4 u_modelView;',
                'uniform mat4 u_projection;',
                'void main()',
                '{',
                '  vec4 ecPosition = u_modelView * a_position;', // eye-coordinate position
                '  gl_Position = u_projection * ecPosition;',
                '  v_color = a_color;',
                vsTexCoordInits,
                vsFogVaryingInit,
                '}',
                ''
              ].join('\n').replace(/\n\n+/g, '\n');
  
              this.vertexShader = GLctx.createShader(GLctx.VERTEX_SHADER);
              GLctx.shaderSource(this.vertexShader, vsSource);
              GLctx.compileShader(this.vertexShader);
  
              var fogHeaderIfNeeded = null;
              if (GLEmulation.fogEnabled) {
                fogHeaderIfNeeded = [
                  '',
                  'varying float v_fogFragCoord; ',
                  'uniform vec4 u_fogColor;      ',
                  'uniform float u_fogEnd;       ',
                  'uniform float u_fogScale;     ',
                  'uniform float u_fogDensity;   ',
                  'float ffog(in float ecDistance) { ',
                  fogFormula,
                  '  fog = clamp(fog, 0.0, 1.0); ',
                  '  return fog;                 ',
                  '}',
                  '',
                ].join("\n");
              }
  
              var fogPass = null;
              if (GLEmulation.fogEnabled) {
                fogPass = 'gl_FragColor = vec4(mix(u_fogColor.rgb, gl_FragColor.rgb, ffog(v_fogFragCoord)), gl_FragColor.a);\n';
              }
  
              var fsSource = [
                'precision mediump float;',
                texUnitVaryingList,
                texUnitUniformList,
                'varying vec4 v_color;',
                fogHeaderIfNeeded,
                'void main()',
                '{',
                fsTexEnvPass,
                fogPass,
                '}',
                ''
              ].join("\n").replace(/\n\n+/g, '\n');
  
              this.fragmentShader = GLctx.createShader(GLctx.FRAGMENT_SHADER);
              GLctx.shaderSource(this.fragmentShader, fsSource);
              GLctx.compileShader(this.fragmentShader);
  
              this.program = GLctx.createProgram();
              GLctx.attachShader(this.program, this.vertexShader);
              GLctx.attachShader(this.program, this.fragmentShader);
  
              // As optimization, bind all attributes to prespecified locations, so that the FFP emulation
              // code can submit attributes to any generated FFP shader without having to examine each shader in turn.
              // These prespecified locations are only assumed if GL_FFP_ONLY is specified, since user could also create their
              // own shaders that didn't have attributes in the same locations.
              GLctx.bindAttribLocation(this.program, GLImmediate.VERTEX, 'a_position');
              GLctx.bindAttribLocation(this.program, GLImmediate.COLOR, 'a_color');
              GLctx.bindAttribLocation(this.program, GLImmediate.NORMAL, 'a_normal');
              var maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
              for (var i = 0; i < GLImmediate.MAX_TEXTURES && GLImmediate.TEXTURE0 + i < maxVertexAttribs; i++) {
                GLctx.bindAttribLocation(this.program, GLImmediate.TEXTURE0 + i, 'a_texCoord'+i);
                GLctx.bindAttribLocation(this.program, GLImmediate.TEXTURE0 + i, aTexCoordPrefix+i);
              }
              GLctx.linkProgram(this.program);
            }
  
            // Stores an array that remembers which matrix uniforms are up-to-date in this FFP renderer, so they don't need to be resubmitted
            // each time we render with this program.
            this.textureMatrixVersion = [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ];
  
            this.positionLocation = GLctx.getAttribLocation(this.program, 'a_position');
  
            this.texCoordLocations = [];
  
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              if (!GLImmediate.enabledClientAttributes[GLImmediate.TEXTURE0 + i]) {
                this.texCoordLocations[i] = -1;
                continue;
              }
  
              if (useCurrProgram) {
                this.texCoordLocations[i] = GLctx.getAttribLocation(this.program, 'a_texCoord' + i);
              } else {
                this.texCoordLocations[i] = GLctx.getAttribLocation(this.program, aTexCoordPrefix + i);
              }
            }
            this.colorLocation = GLctx.getAttribLocation(this.program, 'a_color');
            if (!useCurrProgram) {
              // Temporarily switch to the program so we can set our sampler uniforms early.
              var prevBoundProg = GLctx.getParameter(GLctx.CURRENT_PROGRAM);
              GLctx.useProgram(this.program);
              {
                for (var i = 0; i < this.usedTexUnitList.length; i++) {
                  var texUnitID = this.usedTexUnitList[i];
                  var texSamplerLoc = GLctx.getUniformLocation(this.program, uTexUnitPrefix + texUnitID);
                  GLctx.uniform1i(texSamplerLoc, texUnitID);
                }
              }
              // The default color attribute value is not the same as the default for all other attribute streams (0,0,0,1) but (1,1,1,1),
              // so explicitly set it right at start.
              GLctx.vertexAttrib4fv(this.colorLocation, [1,1,1,1]);
              GLctx.useProgram(prevBoundProg);
            }
  
            this.textureMatrixLocations = [];
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              this.textureMatrixLocations[i] = GLctx.getUniformLocation(this.program, 'u_textureMatrix' + i);
            }
            this.normalLocation = GLctx.getAttribLocation(this.program, 'a_normal');
  
            this.modelViewLocation = GLctx.getUniformLocation(this.program, 'u_modelView');
            this.projectionLocation = GLctx.getUniformLocation(this.program, 'u_projection');
  
            this.hasTextures = hasTextures;
            this.hasNormal = GLImmediate.enabledClientAttributes[GLImmediate.NORMAL] &&
                             GLImmediate.clientAttributes[GLImmediate.NORMAL].size > 0 &&
                             this.normalLocation >= 0;
            this.hasColor = (this.colorLocation === 0) || this.colorLocation > 0;
  
            this.floatType = GLctx.FLOAT; // minor optimization
  
            this.fogColorLocation = GLctx.getUniformLocation(this.program, 'u_fogColor');
            this.fogEndLocation = GLctx.getUniformLocation(this.program, 'u_fogEnd');
            this.fogScaleLocation = GLctx.getUniformLocation(this.program, 'u_fogScale');
            this.fogDensityLocation = GLctx.getUniformLocation(this.program, 'u_fogDensity');
            this.hasFog = !!(this.fogColorLocation || this.fogEndLocation ||
                             this.fogScaleLocation || this.fogDensityLocation);
          },
  
          prepare: function prepare() {
            // Calculate the array buffer
            var arrayBuffer;
            if (!GL.currArrayBuffer) {
              var start = GLImmediate.firstVertex*GLImmediate.stride;
              var end = GLImmediate.lastVertex*GLImmediate.stride;
              assert(end <= GL.MAX_TEMP_BUFFER_SIZE, 'too much vertex data');
              arrayBuffer = GL.getTempVertexBuffer(end);
              // TODO: consider using the last buffer we bound, if it was larger. downside is larger buffer, but we might avoid rebinding and preparing
            } else {
              arrayBuffer = GL.currArrayBuffer;
            }
  
            // If the array buffer is unchanged and the renderer as well, then we can avoid all the work here
            // XXX We use some heuristics here, and this may not work in all cases. Try disabling GL_UNSAFE_OPTS if you
            // have odd glitches
            var lastRenderer = GLImmediate.lastRenderer;
            var canSkip = this == lastRenderer &&
                          arrayBuffer == GLImmediate.lastArrayBuffer &&
                          (GL.currProgram || this.program) == GLImmediate.lastProgram &&
                          GLImmediate.stride == GLImmediate.lastStride &&
                          !GLImmediate.matricesModified;
            if (!canSkip && lastRenderer) lastRenderer.cleanup();
            if (!GL.currArrayBuffer) {
              // Bind the array buffer and upload data after cleaning up the previous renderer
  
              if (arrayBuffer != GLImmediate.lastArrayBuffer) {
                GLctx.bindBuffer(GLctx.ARRAY_BUFFER, arrayBuffer);
                GLImmediate.lastArrayBuffer = arrayBuffer;
              }
  
              GLctx.bufferSubData(GLctx.ARRAY_BUFFER, start, GLImmediate.vertexData.subarray(start >> 2, end >> 2));
            }
            if (canSkip) return;
            GLImmediate.lastRenderer = this;
            GLImmediate.lastProgram = GL.currProgram || this.program;
            GLImmediate.lastStride == GLImmediate.stride;
            GLImmediate.matricesModified = false;
  
            if (!GL.currProgram) {
              if (GLImmediate.fixedFunctionProgram != this.program) {
                GLctx.useProgram(this.program);
                GLImmediate.fixedFunctionProgram = this.program;
              }
            }
  
            if (this.modelViewLocation && this.modelViewMatrixVersion != GLImmediate.matrixVersion[0/*m*/]) {
              this.modelViewMatrixVersion = GLImmediate.matrixVersion[0/*m*/];
              GLctx.uniformMatrix4fv(this.modelViewLocation, false, GLImmediate.matrix[0/*m*/]);
            }
            if (this.projectionLocation && this.projectionMatrixVersion != GLImmediate.matrixVersion[1/*p*/]) {
              this.projectionMatrixVersion = GLImmediate.matrixVersion[1/*p*/];
              GLctx.uniformMatrix4fv(this.projectionLocation, false, GLImmediate.matrix[1/*p*/]);
            }
  
            var clientAttributes = GLImmediate.clientAttributes;
            var posAttr = clientAttributes[GLImmediate.VERTEX];
  
  
            if (!GL.currArrayBuffer) {
              GLctx.vertexAttribPointer(GLImmediate.VERTEX, posAttr.size, posAttr.type, false, GLImmediate.stride, posAttr.offset);
              if (this.hasNormal) {
                var normalAttr = clientAttributes[GLImmediate.NORMAL];
                GLctx.vertexAttribPointer(GLImmediate.NORMAL, normalAttr.size, normalAttr.type, true, GLImmediate.stride, normalAttr.offset);
              }
            }
            if (this.hasTextures) {
              for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
                if (!GL.currArrayBuffer) {
                  var attribLoc = GLImmediate.TEXTURE0+i;
                  var texAttr = clientAttributes[attribLoc];
                  if (texAttr.size) {
                    GLctx.vertexAttribPointer(attribLoc, texAttr.size, texAttr.type, false, GLImmediate.stride, texAttr.offset);
                  } else {
                    // These two might be dangerous, but let's try them.
                    GLctx.vertexAttrib4f(attribLoc, 0, 0, 0, 1);
                  }
                }
                var t = 2/*t*/+i;
                if (this.textureMatrixLocations[i] && this.textureMatrixVersion[t] != GLImmediate.matrixVersion[t]) { // XXX might we need this even without the condition we are currently in?
                  this.textureMatrixVersion[t] = GLImmediate.matrixVersion[t];
                  GLctx.uniformMatrix4fv(this.textureMatrixLocations[i], false, GLImmediate.matrix[t]);
                }
              }
            }
            if (GLImmediate.enabledClientAttributes[GLImmediate.COLOR]) {
              var colorAttr = clientAttributes[GLImmediate.COLOR];
              if (!GL.currArrayBuffer) {
                GLctx.vertexAttribPointer(GLImmediate.COLOR, colorAttr.size, colorAttr.type, true, GLImmediate.stride, colorAttr.offset);
              }
            }
            if (this.hasFog) {
              if (this.fogColorLocation) GLctx.uniform4fv(this.fogColorLocation, GLEmulation.fogColor);
              if (this.fogEndLocation) GLctx.uniform1f(this.fogEndLocation, GLEmulation.fogEnd);
              if (this.fogScaleLocation) GLctx.uniform1f(this.fogScaleLocation, 1/(GLEmulation.fogEnd - GLEmulation.fogStart));
              if (this.fogDensityLocation) GLctx.uniform1f(this.fogDensityLocation, GLEmulation.fogDensity);
            }
          },
  
          cleanup: function cleanup() {
          }
        };
        ret.init();
        return ret;
      },setupFuncs:function () {
        // Replace some functions with immediate-mode aware versions. If there are no client
        // attributes enabled, and we use webgl-friendly modes (no GL_QUADS), then no need
        // for emulation
        _glDrawArrays = _emscripten_glDrawArrays = function _glDrawArrays(mode, first, count) {
          if (GLImmediate.totalEnabledClientAttributes == 0 && mode <= 6) {
            GLctx.drawArrays(mode, first, count);
            return;
          }
          GLImmediate.prepareClientAttributes(count, false);
          GLImmediate.mode = mode;
          if (!GL.currArrayBuffer) {
            GLImmediate.vertexData = HEAPF32.subarray((GLImmediate.vertexPointer)>>2,(GLImmediate.vertexPointer + (first+count)*GLImmediate.stride)>>2); // XXX assuming float
            GLImmediate.firstVertex = first;
            GLImmediate.lastVertex = first + count;
          }
          GLImmediate.flush(null, first);
          GLImmediate.mode = -1;
        };
  
        _glDrawElements = _emscripten_glDrawElements = function _glDrawElements(mode, count, type, indices, start, end) { // start, end are given if we come from glDrawRangeElements
          if (GLImmediate.totalEnabledClientAttributes == 0 && mode <= 6 && GL.currElementArrayBuffer) {
            GLctx.drawElements(mode, count, type, indices);
            return;
          }
          if (!GL.currElementArrayBuffer) {
            assert(type == GLctx.UNSIGNED_SHORT); // We can only emulate buffers of this kind, for now
          }
          console.log("DrawElements doesn't actually prepareClientAttributes properly.");
          GLImmediate.prepareClientAttributes(count, false);
          GLImmediate.mode = mode;
          if (!GL.currArrayBuffer) {
            GLImmediate.firstVertex = end ? start : TOTAL_MEMORY; // if we don't know the start, set an invalid value and we will calculate it later from the indices
            GLImmediate.lastVertex = end ? end+1 : 0;
            GLImmediate.vertexData = HEAPF32.subarray((GLImmediate.vertexPointer)>>2,((end ? GLImmediate.vertexPointer + (end+1)*GLImmediate.stride : TOTAL_MEMORY))>>2); // XXX assuming float
          }
          GLImmediate.flush(count, 0, indices);
          GLImmediate.mode = -1;
        };
  
        // TexEnv stuff needs to be prepared early, so do it here.
        // init() is too late for -O2, since it freezes the GL functions
        // by that point.
        GLImmediate.MapTreeLib = GLImmediate.spawnMapTreeLib();
        GLImmediate.spawnMapTreeLib = null;
  
        GLImmediate.TexEnvJIT = GLImmediate.spawnTexEnvJIT();
        GLImmediate.spawnTexEnvJIT = null;
  
        GLImmediate.setupHooks();
      },setupHooks:function () {
        if (!GLEmulation.hasRunInit) {
          GLEmulation.init();
        }
  
        var glActiveTexture = _glActiveTexture;
        _glActiveTexture = _emscripten_glActiveTexture = function _glActiveTexture(texture) {
          GLImmediate.TexEnvJIT.hook_activeTexture(texture);
          glActiveTexture(texture);
        };
  
        var glEnable = _glEnable;
        _glEnable = _emscripten_glEnable = function _glEnable(cap) {
          GLImmediate.TexEnvJIT.hook_enable(cap);
          glEnable(cap);
        };
        var glDisable = _glDisable;
        _glDisable = _emscripten_glDisable = function _glDisable(cap) {
          GLImmediate.TexEnvJIT.hook_disable(cap);
          glDisable(cap);
        };
  
        var glTexEnvf = (typeof(_glTexEnvf) != 'undefined') ? _glTexEnvf : function(){};
        _glTexEnvf = _emscripten_glTexEnvf = function _glTexEnvf(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_texEnvf(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvf(target, pname, param);
        };
        var glTexEnvi = (typeof(_glTexEnvi) != 'undefined') ? _glTexEnvi : function(){};
        _glTexEnvi = _emscripten_glTexEnvi = function _glTexEnvi(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_texEnvi(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvi(target, pname, param);
        };
        var glTexEnvfv = (typeof(_glTexEnvfv) != 'undefined') ? _glTexEnvfv : function(){};
        _glTexEnvfv = _emscripten_glTexEnvfv = function _glTexEnvfv(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_texEnvfv(target, pname, param);
          // Don't call old func, since we are the implementor.
          //glTexEnvfv(target, pname, param);
        };
  
        _glGetTexEnviv = function _glGetTexEnviv(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_getTexEnviv(target, pname, param);
        };
  
        _glGetTexEnvfv = function _glGetTexEnvfv(target, pname, param) {
          GLImmediate.TexEnvJIT.hook_getTexEnvfv(target, pname, param);
        };
  
        var glGetIntegerv = _glGetIntegerv;
        _glGetIntegerv = _emscripten_glGetIntegerv = function _glGetIntegerv(pname, params) {
          switch (pname) {
            case 0x8B8D: { // GL_CURRENT_PROGRAM
              // Just query directly so we're working with WebGL objects.
              var cur = GLctx.getParameter(GLctx.CURRENT_PROGRAM);
              if (cur == GLImmediate.fixedFunctionProgram) {
                // Pretend we're not using a program.
                HEAP32[((params)>>2)]=0;
                return;
              }
              break;
            }
          }
          glGetIntegerv(pname, params);
        };
      },initted:false,init:function () {
        Module.printErr('WARNING: using emscripten GL immediate mode emulation. This is very limited in what it supports');
        GLImmediate.initted = true;
  
        if (!Module.useWebGL) return; // a 2D canvas may be currently used TODO: make sure we are actually called in that case
  
        // User can override the maximum number of texture units that we emulate. Using fewer texture units increases runtime performance
        // slightly, so it is advantageous to choose as small value as needed.
        GLImmediate.MAX_TEXTURES = Module['GL_MAX_TEXTURE_IMAGE_UNITS'] || GLctx.getParameter(GLctx.MAX_TEXTURE_IMAGE_UNITS);
  
        GLImmediate.TexEnvJIT.init(GLctx, GLImmediate.MAX_TEXTURES);
  
        GLImmediate.NUM_ATTRIBUTES = 3 /*pos+normal+color attributes*/ + GLImmediate.MAX_TEXTURES;
        GLImmediate.clientAttributes = [];
        GLEmulation.enabledClientAttribIndices = [];
        for (var i = 0; i < GLImmediate.NUM_ATTRIBUTES; i++) {
          GLImmediate.clientAttributes.push({});
          GLEmulation.enabledClientAttribIndices.push(false);
        }
  
        // Initialize matrix library
        // When user sets a matrix, increment a 'version number' on the new data, and when rendering, submit
        // the matrices to the shader program only if they have an old version of the data.
        GLImmediate.matrix = [];
        GLImmediate.matrixStack = [];
        GLImmediate.matrixVersion = [];
        for (var i = 0; i < 2 + GLImmediate.MAX_TEXTURES; i++) { // Modelview, Projection, plus one matrix for each texture coordinate.
          GLImmediate.matrixStack.push([]);
          GLImmediate.matrixVersion.push(0);
          GLImmediate.matrix.push(GLImmediate.matrixLib.mat4.create());
          GLImmediate.matrixLib.mat4.identity(GLImmediate.matrix[i]);
        }
  
        // Renderer cache
        GLImmediate.rendererCache = GLImmediate.MapTreeLib.create();
  
        // Buffers for data
        GLImmediate.tempData = new Float32Array(GL.MAX_TEMP_BUFFER_SIZE >> 2);
        GLImmediate.indexData = new Uint16Array(GL.MAX_TEMP_BUFFER_SIZE >> 1);
  
        GLImmediate.vertexDataU8 = new Uint8Array(GLImmediate.tempData.buffer);
  
        GL.generateTempBuffers(true, GL.currentContext);
  
        GLImmediate.clientColor = new Float32Array([1, 1, 1, 1]);
      },prepareClientAttributes:function prepareClientAttributes(count, beginEnd) {
        // If no client attributes were modified since we were last called, do nothing. Note that this
        // does not work for glBegin/End, where we generate renderer components dynamically and then
        // disable them ourselves, but it does help with glDrawElements/Arrays.
        if (!GLImmediate.modifiedClientAttributes) {
          GLImmediate.vertexCounter = (GLImmediate.stride * count) / 4; // XXX assuming float
          return;
        }
        GLImmediate.modifiedClientAttributes = false;
  
        // The role of prepareClientAttributes is to examine the set of client-side vertex attribute buffers
        // that user code has submitted, and to prepare them to be uploaded to a VBO in GPU memory
        // (since WebGL does not support client-side rendering, i.e. rendering from vertex data in CPU memory)
        // User can submit vertex data generally in three different configurations:
        // 1. Fully planar: all attributes are in their own separate tightly-packed arrays in CPU memory.
        // 2. Fully interleaved: all attributes share a single array where data is interleaved something like (pos,uv,normal), (pos,uv,normal), ...
        // 3. Complex hybrid: Multiple separate arrays that either are sparsely strided, and/or partially interleave vertex attributes.
  
        // For simplicity, we support the case (2) as the fast case. For (1) and (3), we do a memory copy of the
        // vertex data here to prepare a relayouted buffer that is of the structure in case (2). The reason
        // for this is that it allows the emulation code to get away with using just one VBO buffer for rendering,
        // and not have to maintain multiple ones. Therefore cases (1) and (3) will be very slow, and case (2) is fast.
  
        // Detect which case we are in by using a quick heuristic by examining the strides of the buffers. If all the buffers have identical 
        // stride, we assume we have case (2), otherwise we have something more complex.
        var clientStartPointer = 0x7FFFFFFF;
        var bytes = 0; // Total number of bytes taken up by a single vertex.
        var minStride = 0x7FFFFFFF;
        var maxStride = 0;
        var attributes = GLImmediate.liveClientAttributes;
        attributes.length = 0;
        for (var i = 0; i < 3+GLImmediate.MAX_TEXTURES; i++) {
          if (GLImmediate.enabledClientAttributes[i]) {
            var attr = GLImmediate.clientAttributes[i];
            attributes.push(attr);
            clientStartPointer = Math.min(clientStartPointer, attr.pointer);
            attr.sizeBytes = attr.size * GL.byteSizeByType[attr.type - GL.byteSizeByTypeRoot];
            bytes += attr.sizeBytes;
            minStride = Math.min(minStride, attr.stride);
            maxStride = Math.max(maxStride, attr.stride);
          }
        }
  
        if ((minStride != maxStride || maxStride < bytes) && !beginEnd) {
          // We are in cases (1) or (3): slow path, shuffle the data around into a single interleaved vertex buffer.
          // The immediate-mode glBegin()/glEnd() vertex submission gets automatically generated in appropriate layout,
          // so never need to come down this path if that was used.
          if (!GLImmediate.restrideBuffer) GLImmediate.restrideBuffer = _malloc(GL.MAX_TEMP_BUFFER_SIZE);
          var start = GLImmediate.restrideBuffer;
          bytes = 0;
          // calculate restrided offsets and total size
          for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            var size = attr.sizeBytes;
            if (size % 4 != 0) size += 4 - (size % 4); // align everything
            attr.offset = bytes;
            bytes += size;
          }
          // copy out the data (we need to know the stride for that, and define attr.pointer)
          for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            var srcStride = Math.max(attr.sizeBytes, attr.stride);
            if ((srcStride & 3) == 0 && (attr.sizeBytes & 3) == 0) {
              var size4 = attr.sizeBytes>>2;
              var srcStride4 = Math.max(attr.sizeBytes, attr.stride)>>2;
              for (var j = 0; j < count; j++) {
                for (var k = 0; k < size4; k++) { // copy in chunks of 4 bytes, our alignment makes this possible
                  HEAP32[((start + attr.offset + bytes*j)>>2) + k] = HEAP32[(attr.pointer>>2) + j*srcStride4 + k];
                }
              }
            } else {
              for (var j = 0; j < count; j++) {
                for (var k = 0; k < attr.sizeBytes; k++) { // source data was not aligned to multiples of 4, must copy byte by byte.
                  HEAP8[start + attr.offset + bytes*j + k] = HEAP8[attr.pointer + j*srcStride + k];
                }
              }
            }
            attr.pointer = start + attr.offset;
          }
          GLImmediate.stride = bytes;
          GLImmediate.vertexPointer = start;
        } else {
          // case (2): fast path, all data is interleaved to a single vertex array so we can get away with a single VBO upload.
          if (GL.currArrayBuffer) {
            GLImmediate.vertexPointer = 0;
          } else {
            GLImmediate.vertexPointer = clientStartPointer;
          }
          for (var i = 0; i < attributes.length; i++) {
            var attr = attributes[i];
            attr.offset = attr.pointer - GLImmediate.vertexPointer; // Compute what will be the offset of this attribute in the VBO after we upload.
          }
          GLImmediate.stride = Math.max(maxStride, bytes);
        }
        if (!beginEnd) {
          GLImmediate.vertexCounter = (GLImmediate.stride * count) / 4; // XXX assuming float
        }
      },flush:function flush(numProvidedIndexes, startIndex, ptr) {
        assert(numProvidedIndexes >= 0 || !numProvidedIndexes);
        startIndex = startIndex || 0;
        ptr = ptr || 0;
  
        var renderer = GLImmediate.getRenderer();
  
        // Generate index data in a format suitable for GLES 2.0/WebGL
        var numVertexes = 4 * GLImmediate.vertexCounter / GLImmediate.stride;
        assert(numVertexes % 1 == 0, "`numVertexes` must be an integer.");
        var emulatedElementArrayBuffer = false;
        var numIndexes = 0;
        if (numProvidedIndexes) {
          numIndexes = numProvidedIndexes;
          if (!GL.currArrayBuffer && GLImmediate.firstVertex > GLImmediate.lastVertex) {
            // Figure out the first and last vertex from the index data
            assert(!GL.currElementArrayBuffer); // If we are going to upload array buffer data, we need to find which range to
                                                // upload based on the indices. If they are in a buffer on the GPU, that is very
                                                // inconvenient! So if you do not have an array buffer, you should also not have
                                                // an element array buffer. But best is to use both buffers!
            for (var i = 0; i < numProvidedIndexes; i++) {
              var currIndex = HEAPU16[(((ptr)+(i*2))>>1)];
              GLImmediate.firstVertex = Math.min(GLImmediate.firstVertex, currIndex);
              GLImmediate.lastVertex = Math.max(GLImmediate.lastVertex, currIndex+1);
            }
          }
          if (!GL.currElementArrayBuffer) {
            // If no element array buffer is bound, then indices is a literal pointer to clientside data
            assert(numProvidedIndexes << 1 <= GL.MAX_TEMP_BUFFER_SIZE, 'too many immediate mode indexes (a)');
            var indexBuffer = GL.getTempIndexBuffer(numProvidedIndexes << 1);
            GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, indexBuffer);
            GLctx.bufferSubData(GLctx.ELEMENT_ARRAY_BUFFER, 0, HEAPU16.subarray((ptr)>>1,(ptr + (numProvidedIndexes << 1))>>1));
            ptr = 0;
            emulatedElementArrayBuffer = true;
          }
        } else if (GLImmediate.mode > 6) { // above GL_TRIANGLE_FAN are the non-GL ES modes
          if (GLImmediate.mode != 7) throw 'unsupported immediate mode ' + GLImmediate.mode; // GL_QUADS
          // GLImmediate.firstVertex is the first vertex we want. Quad indexes are in the pattern
          // 0 1 2, 0 2 3, 4 5 6, 4 6 7, so we need to look at index firstVertex * 1.5 to see it.
          // Then since indexes are 2 bytes each, that means 3
          assert(GLImmediate.firstVertex % 4 == 0);
          ptr = GLImmediate.firstVertex*3;
          var numQuads = numVertexes / 4;
          numIndexes = numQuads * 6; // 0 1 2, 0 2 3 pattern
          assert(ptr + (numIndexes << 1) <= GL.MAX_TEMP_BUFFER_SIZE, 'too many immediate mode indexes (b)');
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.currentContext.tempQuadIndexBuffer);
          emulatedElementArrayBuffer = true;
        }
  
        renderer.prepare();
  
        if (numIndexes) {
          GLctx.drawElements(GLctx.TRIANGLES, numIndexes, GLctx.UNSIGNED_SHORT, ptr);
        } else {
          GLctx.drawArrays(GLImmediate.mode, startIndex, numVertexes);
        }
  
        if (emulatedElementArrayBuffer) {
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.buffers[GL.currElementArrayBuffer] || null);
        }
  
      }};
  GLImmediate.matrixLib = (function() {
  
  /**
   * @fileoverview gl-matrix - High performance matrix and vector operations for WebGL
   * @author Brandon Jones
   * @version 1.2.4
   */
  
  // Modifed for emscripten: Global scoping etc.
  
  /*
   * Copyright (c) 2011 Brandon Jones
   *
   * This software is provided 'as-is', without any express or implied
   * warranty. In no event will the authors be held liable for any damages
   * arising from the use of this software.
   *
   * Permission is granted to anyone to use this software for any purpose,
   * including commercial applications, and to alter it and redistribute it
   * freely, subject to the following restrictions:
   *
   *    1. The origin of this software must not be misrepresented; you must not
   *    claim that you wrote the original software. If you use this software
   *    in a product, an acknowledgment in the product documentation would be
   *    appreciated but is not required.
   *
   *    2. Altered source versions must be plainly marked as such, and must not
   *    be misrepresented as being the original software.
   *
   *    3. This notice may not be removed or altered from any source
   *    distribution.
   */
  
  
  /**
   * @class 3 Dimensional Vector
   * @name vec3
   */
  var vec3 = {};
  
  /**
   * @class 3x3 Matrix
   * @name mat3
   */
  var mat3 = {};
  
  /**
   * @class 4x4 Matrix
   * @name mat4
   */
  var mat4 = {};
  
  /**
   * @class Quaternion
   * @name quat4
   */
  var quat4 = {};
  
  var MatrixArray = Float32Array;
  
  /*
   * vec3
   */
   
  /**
   * Creates a new instance of a vec3 using the default array type
   * Any javascript array-like objects containing at least 3 numeric elements can serve as a vec3
   *
   * @param {vec3} [vec] vec3 containing values to initialize with
   *
   * @returns {vec3} New vec3
   */
  vec3.create = function (vec) {
      var dest = new MatrixArray(3);
  
      if (vec) {
          dest[0] = vec[0];
          dest[1] = vec[1];
          dest[2] = vec[2];
      } else {
          dest[0] = dest[1] = dest[2] = 0;
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one vec3 to another
   *
   * @param {vec3} vec vec3 containing values to copy
   * @param {vec3} dest vec3 receiving copied values
   *
   * @returns {vec3} dest
   */
  vec3.set = function (vec, dest) {
      dest[0] = vec[0];
      dest[1] = vec[1];
      dest[2] = vec[2];
  
      return dest;
  };
  
  /**
   * Performs a vector addition
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.add = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] += vec2[0];
          vec[1] += vec2[1];
          vec[2] += vec2[2];
          return vec;
      }
  
      dest[0] = vec[0] + vec2[0];
      dest[1] = vec[1] + vec2[1];
      dest[2] = vec[2] + vec2[2];
      return dest;
  };
  
  /**
   * Performs a vector subtraction
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.subtract = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] -= vec2[0];
          vec[1] -= vec2[1];
          vec[2] -= vec2[2];
          return vec;
      }
  
      dest[0] = vec[0] - vec2[0];
      dest[1] = vec[1] - vec2[1];
      dest[2] = vec[2] - vec2[2];
      return dest;
  };
  
  /**
   * Performs a vector multiplication
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.multiply = function (vec, vec2, dest) {
      if (!dest || vec === dest) {
          vec[0] *= vec2[0];
          vec[1] *= vec2[1];
          vec[2] *= vec2[2];
          return vec;
      }
  
      dest[0] = vec[0] * vec2[0];
      dest[1] = vec[1] * vec2[1];
      dest[2] = vec[2] * vec2[2];
      return dest;
  };
  
  /**
   * Negates the components of a vec3
   *
   * @param {vec3} vec vec3 to negate
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.negate = function (vec, dest) {
      if (!dest) { dest = vec; }
  
      dest[0] = -vec[0];
      dest[1] = -vec[1];
      dest[2] = -vec[2];
      return dest;
  };
  
  /**
   * Multiplies the components of a vec3 by a scalar value
   *
   * @param {vec3} vec vec3 to scale
   * @param {number} val Value to scale by
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.scale = function (vec, val, dest) {
      if (!dest || vec === dest) {
          vec[0] *= val;
          vec[1] *= val;
          vec[2] *= val;
          return vec;
      }
  
      dest[0] = vec[0] * val;
      dest[1] = vec[1] * val;
      dest[2] = vec[2] * val;
      return dest;
  };
  
  /**
   * Generates a unit vector of the same direction as the provided vec3
   * If vector length is 0, returns [0, 0, 0]
   *
   * @param {vec3} vec vec3 to normalize
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.normalize = function (vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2],
          len = Math.sqrt(x * x + y * y + z * z);
  
      if (!len) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          return dest;
      } else if (len === 1) {
          dest[0] = x;
          dest[1] = y;
          dest[2] = z;
          return dest;
      }
  
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      return dest;
  };
  
  /**
   * Generates the cross product of two vec3s
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.cross = function (vec, vec2, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2],
          x2 = vec2[0], y2 = vec2[1], z2 = vec2[2];
  
      dest[0] = y * z2 - z * y2;
      dest[1] = z * x2 - x * z2;
      dest[2] = x * y2 - y * x2;
      return dest;
  };
  
  /**
   * Caclulates the length of a vec3
   *
   * @param {vec3} vec vec3 to calculate length of
   *
   * @returns {number} Length of vec
   */
  vec3.length = function (vec) {
      var x = vec[0], y = vec[1], z = vec[2];
      return Math.sqrt(x * x + y * y + z * z);
  };
  
  /**
   * Caclulates the dot product of two vec3s
   *
   * @param {vec3} vec First operand
   * @param {vec3} vec2 Second operand
   *
   * @returns {number} Dot product of vec and vec2
   */
  vec3.dot = function (vec, vec2) {
      return vec[0] * vec2[0] + vec[1] * vec2[1] + vec[2] * vec2[2];
  };
  
  /**
   * Generates a unit vector pointing from one vector to another
   *
   * @param {vec3} vec Origin vec3
   * @param {vec3} vec2 vec3 to point to
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.direction = function (vec, vec2, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0] - vec2[0],
          y = vec[1] - vec2[1],
          z = vec[2] - vec2[2],
          len = Math.sqrt(x * x + y * y + z * z);
  
      if (!len) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          return dest;
      }
  
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      return dest;
  };
  
  /**
   * Performs a linear interpolation between two vec3
   *
   * @param {vec3} vec First vector
   * @param {vec3} vec2 Second vector
   * @param {number} lerp Interpolation amount between the two inputs
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.lerp = function (vec, vec2, lerp, dest) {
      if (!dest) { dest = vec; }
  
      dest[0] = vec[0] + lerp * (vec2[0] - vec[0]);
      dest[1] = vec[1] + lerp * (vec2[1] - vec[1]);
      dest[2] = vec[2] + lerp * (vec2[2] - vec[2]);
  
      return dest;
  };
  
  /**
   * Calculates the euclidian distance between two vec3
   *
   * Params:
   * @param {vec3} vec First vector
   * @param {vec3} vec2 Second vector
   *
   * @returns {number} Distance between vec and vec2
   */
  vec3.dist = function (vec, vec2) {
      var x = vec2[0] - vec[0],
          y = vec2[1] - vec[1],
          z = vec2[2] - vec[2];
          
      return Math.sqrt(x*x + y*y + z*z);
  };
  
  /**
   * Projects the specified vec3 from screen space into object space
   * Based on the <a href="http://webcvs.freedesktop.org/mesa/Mesa/src/glu/mesa/project.c?revision=1.4&view=markup">Mesa gluUnProject implementation</a>
   *
   * @param {vec3} vec Screen-space vector to project
   * @param {mat4} view View matrix
   * @param {mat4} proj Projection matrix
   * @param {vec4} viewport Viewport as given to gl.viewport [x, y, width, height]
   * @param {vec3} [dest] vec3 receiving unprojected result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  vec3.unproject = function (vec, view, proj, viewport, dest) {
      if (!dest) { dest = vec; }
  
      var m = mat4.create();
      var v = new MatrixArray(4);
      
      v[0] = (vec[0] - viewport[0]) * 2.0 / viewport[2] - 1.0;
      v[1] = (vec[1] - viewport[1]) * 2.0 / viewport[3] - 1.0;
      v[2] = 2.0 * vec[2] - 1.0;
      v[3] = 1.0;
      
      mat4.multiply(proj, view, m);
      if(!mat4.inverse(m)) { return null; }
      
      mat4.multiplyVec4(m, v);
      if(v[3] === 0.0) { return null; }
  
      dest[0] = v[0] / v[3];
      dest[1] = v[1] / v[3];
      dest[2] = v[2] / v[3];
      
      return dest;
  };
  
  /**
   * Returns a string representation of a vector
   *
   * @param {vec3} vec Vector to represent as a string
   *
   * @returns {string} String representation of vec
   */
  vec3.str = function (vec) {
      return '[' + vec[0] + ', ' + vec[1] + ', ' + vec[2] + ']';
  };
  
  /*
   * mat3
   */
  
  /**
   * Creates a new instance of a mat3 using the default array type
   * Any javascript array-like object containing at least 9 numeric elements can serve as a mat3
   *
   * @param {mat3} [mat] mat3 containing values to initialize with
   *
   * @returns {mat3} New mat3
   */
  mat3.create = function (mat) {
      var dest = new MatrixArray(9);
  
      if (mat) {
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
          dest[8] = mat[8];
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one mat3 to another
   *
   * @param {mat3} mat mat3 containing values to copy
   * @param {mat3} dest mat3 receiving copied values
   *
   * @returns {mat3} dest
   */
  mat3.set = function (mat, dest) {
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      return dest;
  };
  
  /**
   * Sets a mat3 to an identity matrix
   *
   * @param {mat3} dest mat3 to set
   *
   * @returns dest if specified, otherwise a new mat3
   */
  mat3.identity = function (dest) {
      if (!dest) { dest = mat3.create(); }
      dest[0] = 1;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 1;
      dest[5] = 0;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 1;
      return dest;
  };
  
  /**
   * Transposes a mat3 (flips the values over the diagonal)
   *
   * Params:
   * @param {mat3} mat mat3 to transpose
   * @param {mat3} [dest] mat3 receiving transposed values. If not specified result is written to mat
   *
   * @returns {mat3} dest is specified, mat otherwise
   */
  mat3.transpose = function (mat, dest) {
      // If we are transposing ourselves we can skip a few steps but have to cache some values
      if (!dest || mat === dest) {
          var a01 = mat[1], a02 = mat[2],
              a12 = mat[5];
  
          mat[1] = mat[3];
          mat[2] = mat[6];
          mat[3] = a01;
          mat[5] = mat[7];
          mat[6] = a02;
          mat[7] = a12;
          return mat;
      }
  
      dest[0] = mat[0];
      dest[1] = mat[3];
      dest[2] = mat[6];
      dest[3] = mat[1];
      dest[4] = mat[4];
      dest[5] = mat[7];
      dest[6] = mat[2];
      dest[7] = mat[5];
      dest[8] = mat[8];
      return dest;
  };
  
  /**
   * Copies the elements of a mat3 into the upper 3x3 elements of a mat4
   *
   * @param {mat3} mat mat3 containing values to copy
   * @param {mat4} [dest] mat4 receiving copied values
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat3.toMat4 = function (mat, dest) {
      if (!dest) { dest = mat4.create(); }
  
      dest[15] = 1;
      dest[14] = 0;
      dest[13] = 0;
      dest[12] = 0;
  
      dest[11] = 0;
      dest[10] = mat[8];
      dest[9] = mat[7];
      dest[8] = mat[6];
  
      dest[7] = 0;
      dest[6] = mat[5];
      dest[5] = mat[4];
      dest[4] = mat[3];
  
      dest[3] = 0;
      dest[2] = mat[2];
      dest[1] = mat[1];
      dest[0] = mat[0];
  
      return dest;
  };
  
  /**
   * Returns a string representation of a mat3
   *
   * @param {mat3} mat mat3 to represent as a string
   *
   * @param {string} String representation of mat
   */
  mat3.str = function (mat) {
      return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] +
          ', ' + mat[3] + ', ' + mat[4] + ', ' + mat[5] +
          ', ' + mat[6] + ', ' + mat[7] + ', ' + mat[8] + ']';
  };
  
  /*
   * mat4
   */
  
  /**
   * Creates a new instance of a mat4 using the default array type
   * Any javascript array-like object containing at least 16 numeric elements can serve as a mat4
   *
   * @param {mat4} [mat] mat4 containing values to initialize with
   *
   * @returns {mat4} New mat4
   */
  mat4.create = function (mat) {
      var dest = new MatrixArray(16);
  
      if (mat) {
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
          dest[8] = mat[8];
          dest[9] = mat[9];
          dest[10] = mat[10];
          dest[11] = mat[11];
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one mat4 to another
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat4} dest mat4 receiving copied values
   *
   * @returns {mat4} dest
   */
  mat4.set = function (mat, dest) {
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      dest[9] = mat[9];
      dest[10] = mat[10];
      dest[11] = mat[11];
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
      return dest;
  };
  
  /**
   * Sets a mat4 to an identity matrix
   *
   * @param {mat4} dest mat4 to set
   *
   * @returns {mat4} dest
   */
  mat4.identity = function (dest) {
      if (!dest) { dest = mat4.create(); }
      dest[0] = 1;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = 1;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 0;
      dest[9] = 0;
      dest[10] = 1;
      dest[11] = 0;
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
      return dest;
  };
  
  /**
   * Transposes a mat4 (flips the values over the diagonal)
   *
   * @param {mat4} mat mat4 to transpose
   * @param {mat4} [dest] mat4 receiving transposed values. If not specified result is written to mat
   *
   * @param {mat4} dest is specified, mat otherwise
   */
  mat4.transpose = function (mat, dest) {
      // If we are transposing ourselves we can skip a few steps but have to cache some values
      if (!dest || mat === dest) {
          var a01 = mat[1], a02 = mat[2], a03 = mat[3],
              a12 = mat[6], a13 = mat[7],
              a23 = mat[11];
  
          mat[1] = mat[4];
          mat[2] = mat[8];
          mat[3] = mat[12];
          mat[4] = a01;
          mat[6] = mat[9];
          mat[7] = mat[13];
          mat[8] = a02;
          mat[9] = a12;
          mat[11] = mat[14];
          mat[12] = a03;
          mat[13] = a13;
          mat[14] = a23;
          return mat;
      }
  
      dest[0] = mat[0];
      dest[1] = mat[4];
      dest[2] = mat[8];
      dest[3] = mat[12];
      dest[4] = mat[1];
      dest[5] = mat[5];
      dest[6] = mat[9];
      dest[7] = mat[13];
      dest[8] = mat[2];
      dest[9] = mat[6];
      dest[10] = mat[10];
      dest[11] = mat[14];
      dest[12] = mat[3];
      dest[13] = mat[7];
      dest[14] = mat[11];
      dest[15] = mat[15];
      return dest;
  };
  
  /**
   * Calculates the determinant of a mat4
   *
   * @param {mat4} mat mat4 to calculate determinant of
   *
   * @returns {number} determinant of mat
   */
  mat4.determinant = function (mat) {
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15];
  
      return (a30 * a21 * a12 * a03 - a20 * a31 * a12 * a03 - a30 * a11 * a22 * a03 + a10 * a31 * a22 * a03 +
              a20 * a11 * a32 * a03 - a10 * a21 * a32 * a03 - a30 * a21 * a02 * a13 + a20 * a31 * a02 * a13 +
              a30 * a01 * a22 * a13 - a00 * a31 * a22 * a13 - a20 * a01 * a32 * a13 + a00 * a21 * a32 * a13 +
              a30 * a11 * a02 * a23 - a10 * a31 * a02 * a23 - a30 * a01 * a12 * a23 + a00 * a31 * a12 * a23 +
              a10 * a01 * a32 * a23 - a00 * a11 * a32 * a23 - a20 * a11 * a02 * a33 + a10 * a21 * a02 * a33 +
              a20 * a01 * a12 * a33 - a00 * a21 * a12 * a33 - a10 * a01 * a22 * a33 + a00 * a11 * a22 * a33);
  };
  
  /**
   * Calculates the inverse matrix of a mat4
   *
   * @param {mat4} mat mat4 to calculate inverse of
   * @param {mat4} [dest] mat4 receiving inverse matrix. If not specified result is written to mat
   *
   * @param {mat4} dest is specified, mat otherwise, null if matrix cannot be inverted
   */
  mat4.inverse = function (mat, dest) {
      if (!dest) { dest = mat; }
  
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],
  
          b00 = a00 * a11 - a01 * a10,
          b01 = a00 * a12 - a02 * a10,
          b02 = a00 * a13 - a03 * a10,
          b03 = a01 * a12 - a02 * a11,
          b04 = a01 * a13 - a03 * a11,
          b05 = a02 * a13 - a03 * a12,
          b06 = a20 * a31 - a21 * a30,
          b07 = a20 * a32 - a22 * a30,
          b08 = a20 * a33 - a23 * a30,
          b09 = a21 * a32 - a22 * a31,
          b10 = a21 * a33 - a23 * a31,
          b11 = a22 * a33 - a23 * a32,
  
          d = (b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06),
          invDet;
  
          // Calculate the determinant
          if (!d) { return null; }
          invDet = 1 / d;
  
      dest[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
      dest[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
      dest[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
      dest[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
      dest[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;
      dest[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
      dest[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;
      dest[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
      dest[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
      dest[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
      dest[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
      dest[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
      dest[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;
      dest[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
      dest[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;
      dest[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
  
      return dest;
  };
  
  /**
   * Copies the upper 3x3 elements of a mat4 into another mat4
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat4} [dest] mat4 receiving copied values
   *
   * @returns {mat4} dest is specified, a new mat4 otherwise
   */
  mat4.toRotationMat = function (mat, dest) {
      if (!dest) { dest = mat4.create(); }
  
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[3];
      dest[4] = mat[4];
      dest[5] = mat[5];
      dest[6] = mat[6];
      dest[7] = mat[7];
      dest[8] = mat[8];
      dest[9] = mat[9];
      dest[10] = mat[10];
      dest[11] = mat[11];
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
  
      return dest;
  };
  
  /**
   * Copies the upper 3x3 elements of a mat4 into a mat3
   *
   * @param {mat4} mat mat4 containing values to copy
   * @param {mat3} [dest] mat3 receiving copied values
   *
   * @returns {mat3} dest is specified, a new mat3 otherwise
   */
  mat4.toMat3 = function (mat, dest) {
      if (!dest) { dest = mat3.create(); }
  
      dest[0] = mat[0];
      dest[1] = mat[1];
      dest[2] = mat[2];
      dest[3] = mat[4];
      dest[4] = mat[5];
      dest[5] = mat[6];
      dest[6] = mat[8];
      dest[7] = mat[9];
      dest[8] = mat[10];
  
      return dest;
  };
  
  /**
   * Calculates the inverse of the upper 3x3 elements of a mat4 and copies the result into a mat3
   * The resulting matrix is useful for calculating transformed normals
   *
   * Params:
   * @param {mat4} mat mat4 containing values to invert and copy
   * @param {mat3} [dest] mat3 receiving values
   *
   * @returns {mat3} dest is specified, a new mat3 otherwise, null if the matrix cannot be inverted
   */
  mat4.toInverseMat3 = function (mat, dest) {
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2],
          a10 = mat[4], a11 = mat[5], a12 = mat[6],
          a20 = mat[8], a21 = mat[9], a22 = mat[10],
  
          b01 = a22 * a11 - a12 * a21,
          b11 = -a22 * a10 + a12 * a20,
          b21 = a21 * a10 - a11 * a20,
  
          d = a00 * b01 + a01 * b11 + a02 * b21,
          id;
  
      if (!d) { return null; }
      id = 1 / d;
  
      if (!dest) { dest = mat3.create(); }
  
      dest[0] = b01 * id;
      dest[1] = (-a22 * a01 + a02 * a21) * id;
      dest[2] = (a12 * a01 - a02 * a11) * id;
      dest[3] = b11 * id;
      dest[4] = (a22 * a00 - a02 * a20) * id;
      dest[5] = (-a12 * a00 + a02 * a10) * id;
      dest[6] = b21 * id;
      dest[7] = (-a21 * a00 + a01 * a20) * id;
      dest[8] = (a11 * a00 - a01 * a10) * id;
  
      return dest;
  };
  
  /**
   * Performs a matrix multiplication
   *
   * @param {mat4} mat First operand
   * @param {mat4} mat2 Second operand
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.multiply = function (mat, mat2, dest) {
      if (!dest) { dest = mat; }
  
      // Cache the matrix values (makes for huge speed increases!)
      var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3],
          a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7],
          a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11],
          a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15],
  
          b00 = mat2[0], b01 = mat2[1], b02 = mat2[2], b03 = mat2[3],
          b10 = mat2[4], b11 = mat2[5], b12 = mat2[6], b13 = mat2[7],
          b20 = mat2[8], b21 = mat2[9], b22 = mat2[10], b23 = mat2[11],
          b30 = mat2[12], b31 = mat2[13], b32 = mat2[14], b33 = mat2[15];
  
      dest[0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;
      dest[1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;
      dest[2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;
      dest[3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;
      dest[4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;
      dest[5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;
      dest[6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;
      dest[7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;
      dest[8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;
      dest[9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;
      dest[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;
      dest[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;
      dest[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;
      dest[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;
      dest[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;
      dest[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;
  
      return dest;
  };
  
  /**
   * Transforms a vec3 with the given matrix
   * 4th vector component is implicitly '1'
   *
   * @param {mat4} mat mat4 to transform the vector with
   * @param {vec3} vec vec3 to transform
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec3} dest if specified, vec otherwise
   */
  mat4.multiplyVec3 = function (mat, vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2];
  
      dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];
      dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];
      dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];
  
      return dest;
  };
  
  /**
   * Transforms a vec4 with the given matrix
   *
   * @param {mat4} mat mat4 to transform the vector with
   * @param {vec4} vec vec4 to transform
   * @param {vec4} [dest] vec4 receiving operation result. If not specified result is written to vec
   *
   * @returns {vec4} dest if specified, vec otherwise
   */
  mat4.multiplyVec4 = function (mat, vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2], w = vec[3];
  
      dest[0] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12] * w;
      dest[1] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13] * w;
      dest[2] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14] * w;
      dest[3] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15] * w;
  
      return dest;
  };
  
  /**
   * Translates a matrix by the given vector
   *
   * @param {mat4} mat mat4 to translate
   * @param {vec3} vec vec3 specifying the translation
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.translate = function (mat, vec, dest) {
      var x = vec[0], y = vec[1], z = vec[2],
          a00, a01, a02, a03,
          a10, a11, a12, a13,
          a20, a21, a22, a23;
  
      if (!dest || mat === dest) {
          mat[12] = mat[0] * x + mat[4] * y + mat[8] * z + mat[12];
          mat[13] = mat[1] * x + mat[5] * y + mat[9] * z + mat[13];
          mat[14] = mat[2] * x + mat[6] * y + mat[10] * z + mat[14];
          mat[15] = mat[3] * x + mat[7] * y + mat[11] * z + mat[15];
          return mat;
      }
  
      a00 = mat[0]; a01 = mat[1]; a02 = mat[2]; a03 = mat[3];
      a10 = mat[4]; a11 = mat[5]; a12 = mat[6]; a13 = mat[7];
      a20 = mat[8]; a21 = mat[9]; a22 = mat[10]; a23 = mat[11];
  
      dest[0] = a00; dest[1] = a01; dest[2] = a02; dest[3] = a03;
      dest[4] = a10; dest[5] = a11; dest[6] = a12; dest[7] = a13;
      dest[8] = a20; dest[9] = a21; dest[10] = a22; dest[11] = a23;
  
      dest[12] = a00 * x + a10 * y + a20 * z + mat[12];
      dest[13] = a01 * x + a11 * y + a21 * z + mat[13];
      dest[14] = a02 * x + a12 * y + a22 * z + mat[14];
      dest[15] = a03 * x + a13 * y + a23 * z + mat[15];
      return dest;
  };
  
  /**
   * Scales a matrix by the given vector
   *
   * @param {mat4} mat mat4 to scale
   * @param {vec3} vec vec3 specifying the scale for each axis
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @param {mat4} dest if specified, mat otherwise
   */
  mat4.scale = function (mat, vec, dest) {
      var x = vec[0], y = vec[1], z = vec[2];
  
      if (!dest || mat === dest) {
          mat[0] *= x;
          mat[1] *= x;
          mat[2] *= x;
          mat[3] *= x;
          mat[4] *= y;
          mat[5] *= y;
          mat[6] *= y;
          mat[7] *= y;
          mat[8] *= z;
          mat[9] *= z;
          mat[10] *= z;
          mat[11] *= z;
          return mat;
      }
  
      dest[0] = mat[0] * x;
      dest[1] = mat[1] * x;
      dest[2] = mat[2] * x;
      dest[3] = mat[3] * x;
      dest[4] = mat[4] * y;
      dest[5] = mat[5] * y;
      dest[6] = mat[6] * y;
      dest[7] = mat[7] * y;
      dest[8] = mat[8] * z;
      dest[9] = mat[9] * z;
      dest[10] = mat[10] * z;
      dest[11] = mat[11] * z;
      dest[12] = mat[12];
      dest[13] = mat[13];
      dest[14] = mat[14];
      dest[15] = mat[15];
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the specified axis
   * If rotating around a primary axis (X,Y,Z) one of the specialized rotation functions should be used instead for performance
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {vec3} axis vec3 representing the axis to rotate around 
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotate = function (mat, angle, axis, dest) {
      var x = axis[0], y = axis[1], z = axis[2],
          len = Math.sqrt(x * x + y * y + z * z),
          s, c, t,
          a00, a01, a02, a03,
          a10, a11, a12, a13,
          a20, a21, a22, a23,
          b00, b01, b02,
          b10, b11, b12,
          b20, b21, b22;
  
      if (!len) { return null; }
      if (len !== 1) {
          len = 1 / len;
          x *= len;
          y *= len;
          z *= len;
      }
  
      s = Math.sin(angle);
      c = Math.cos(angle);
      t = 1 - c;
  
      a00 = mat[0]; a01 = mat[1]; a02 = mat[2]; a03 = mat[3];
      a10 = mat[4]; a11 = mat[5]; a12 = mat[6]; a13 = mat[7];
      a20 = mat[8]; a21 = mat[9]; a22 = mat[10]; a23 = mat[11];
  
      // Construct the elements of the rotation matrix
      b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
      b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
      b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged last row
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform rotation-specific matrix multiplication
      dest[0] = a00 * b00 + a10 * b01 + a20 * b02;
      dest[1] = a01 * b00 + a11 * b01 + a21 * b02;
      dest[2] = a02 * b00 + a12 * b01 + a22 * b02;
      dest[3] = a03 * b00 + a13 * b01 + a23 * b02;
  
      dest[4] = a00 * b10 + a10 * b11 + a20 * b12;
      dest[5] = a01 * b10 + a11 * b11 + a21 * b12;
      dest[6] = a02 * b10 + a12 * b11 + a22 * b12;
      dest[7] = a03 * b10 + a13 * b11 + a23 * b12;
  
      dest[8] = a00 * b20 + a10 * b21 + a20 * b22;
      dest[9] = a01 * b20 + a11 * b21 + a21 * b22;
      dest[10] = a02 * b20 + a12 * b21 + a22 * b22;
      dest[11] = a03 * b20 + a13 * b21 + a23 * b22;
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the X axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateX = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a10 = mat[4],
          a11 = mat[5],
          a12 = mat[6],
          a13 = mat[7],
          a20 = mat[8],
          a21 = mat[9],
          a22 = mat[10],
          a23 = mat[11];
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged rows
          dest[0] = mat[0];
          dest[1] = mat[1];
          dest[2] = mat[2];
          dest[3] = mat[3];
  
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform axis-specific matrix multiplication
      dest[4] = a10 * c + a20 * s;
      dest[5] = a11 * c + a21 * s;
      dest[6] = a12 * c + a22 * s;
      dest[7] = a13 * c + a23 * s;
  
      dest[8] = a10 * -s + a20 * c;
      dest[9] = a11 * -s + a21 * c;
      dest[10] = a12 * -s + a22 * c;
      dest[11] = a13 * -s + a23 * c;
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the Y axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateY = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a00 = mat[0],
          a01 = mat[1],
          a02 = mat[2],
          a03 = mat[3],
          a20 = mat[8],
          a21 = mat[9],
          a22 = mat[10],
          a23 = mat[11];
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged rows
          dest[4] = mat[4];
          dest[5] = mat[5];
          dest[6] = mat[6];
          dest[7] = mat[7];
  
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform axis-specific matrix multiplication
      dest[0] = a00 * c + a20 * -s;
      dest[1] = a01 * c + a21 * -s;
      dest[2] = a02 * c + a22 * -s;
      dest[3] = a03 * c + a23 * -s;
  
      dest[8] = a00 * s + a20 * c;
      dest[9] = a01 * s + a21 * c;
      dest[10] = a02 * s + a22 * c;
      dest[11] = a03 * s + a23 * c;
      return dest;
  };
  
  /**
   * Rotates a matrix by the given angle around the Z axis
   *
   * @param {mat4} mat mat4 to rotate
   * @param {number} angle Angle (in radians) to rotate
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to mat
   *
   * @returns {mat4} dest if specified, mat otherwise
   */
  mat4.rotateZ = function (mat, angle, dest) {
      var s = Math.sin(angle),
          c = Math.cos(angle),
          a00 = mat[0],
          a01 = mat[1],
          a02 = mat[2],
          a03 = mat[3],
          a10 = mat[4],
          a11 = mat[5],
          a12 = mat[6],
          a13 = mat[7];
  
      if (!dest) {
          dest = mat;
      } else if (mat !== dest) { // If the source and destination differ, copy the unchanged last row
          dest[8] = mat[8];
          dest[9] = mat[9];
          dest[10] = mat[10];
          dest[11] = mat[11];
  
          dest[12] = mat[12];
          dest[13] = mat[13];
          dest[14] = mat[14];
          dest[15] = mat[15];
      }
  
      // Perform axis-specific matrix multiplication
      dest[0] = a00 * c + a10 * s;
      dest[1] = a01 * c + a11 * s;
      dest[2] = a02 * c + a12 * s;
      dest[3] = a03 * c + a13 * s;
  
      dest[4] = a00 * -s + a10 * c;
      dest[5] = a01 * -s + a11 * c;
      dest[6] = a02 * -s + a12 * c;
      dest[7] = a03 * -s + a13 * c;
  
      return dest;
  };
  
  /**
   * Generates a frustum matrix with the given bounds
   *
   * @param {number} left Left bound of the frustum
   * @param {number} right Right bound of the frustum
   * @param {number} bottom Bottom bound of the frustum
   * @param {number} top Top bound of the frustum
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.frustum = function (left, right, bottom, top, near, far, dest) {
      if (!dest) { dest = mat4.create(); }
      var rl = (right - left),
          tb = (top - bottom),
          fn = (far - near);
      dest[0] = (near * 2) / rl;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = (near * 2) / tb;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = (right + left) / rl;
      dest[9] = (top + bottom) / tb;
      dest[10] = -(far + near) / fn;
      dest[11] = -1;
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = -(far * near * 2) / fn;
      dest[15] = 0;
      return dest;
  };
  
  /**
   * Generates a perspective projection matrix with the given bounds
   *
   * @param {number} fovy Vertical field of view
   * @param {number} aspect Aspect ratio. typically viewport width/height
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.perspective = function (fovy, aspect, near, far, dest) {
      var top = near * Math.tan(fovy * Math.PI / 360.0),
          right = top * aspect;
      return mat4.frustum(-right, right, -top, top, near, far, dest);
  };
  
  /**
   * Generates a orthogonal projection matrix with the given bounds
   *
   * @param {number} left Left bound of the frustum
   * @param {number} right Right bound of the frustum
   * @param {number} bottom Bottom bound of the frustum
   * @param {number} top Top bound of the frustum
   * @param {number} near Near bound of the frustum
   * @param {number} far Far bound of the frustum
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.ortho = function (left, right, bottom, top, near, far, dest) {
      if (!dest) { dest = mat4.create(); }
      var rl = (right - left),
          tb = (top - bottom),
          fn = (far - near);
      dest[0] = 2 / rl;
      dest[1] = 0;
      dest[2] = 0;
      dest[3] = 0;
      dest[4] = 0;
      dest[5] = 2 / tb;
      dest[6] = 0;
      dest[7] = 0;
      dest[8] = 0;
      dest[9] = 0;
      dest[10] = -2 / fn;
      dest[11] = 0;
      dest[12] = -(left + right) / rl;
      dest[13] = -(top + bottom) / tb;
      dest[14] = -(far + near) / fn;
      dest[15] = 1;
      return dest;
  };
  
  /**
   * Generates a look-at matrix with the given eye position, focal point, and up axis
   *
   * @param {vec3} eye Position of the viewer
   * @param {vec3} center Point the viewer is looking at
   * @param {vec3} up vec3 pointing "up"
   * @param {mat4} [dest] mat4 frustum matrix will be written into
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.lookAt = function (eye, center, up, dest) {
      if (!dest) { dest = mat4.create(); }
  
      var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
          eyex = eye[0],
          eyey = eye[1],
          eyez = eye[2],
          upx = up[0],
          upy = up[1],
          upz = up[2],
          centerx = center[0],
          centery = center[1],
          centerz = center[2];
  
      if (eyex === centerx && eyey === centery && eyez === centerz) {
          return mat4.identity(dest);
      }
  
      //vec3.direction(eye, center, z);
      z0 = eyex - centerx;
      z1 = eyey - centery;
      z2 = eyez - centerz;
  
      // normalize (no check needed for 0 because of early return)
      len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
      z0 *= len;
      z1 *= len;
      z2 *= len;
  
      //vec3.normalize(vec3.cross(up, z, x));
      x0 = upy * z2 - upz * z1;
      x1 = upz * z0 - upx * z2;
      x2 = upx * z1 - upy * z0;
      len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
      if (!len) {
          x0 = 0;
          x1 = 0;
          x2 = 0;
      } else {
          len = 1 / len;
          x0 *= len;
          x1 *= len;
          x2 *= len;
      }
  
      //vec3.normalize(vec3.cross(z, x, y));
      y0 = z1 * x2 - z2 * x1;
      y1 = z2 * x0 - z0 * x2;
      y2 = z0 * x1 - z1 * x0;
  
      len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
      if (!len) {
          y0 = 0;
          y1 = 0;
          y2 = 0;
      } else {
          len = 1 / len;
          y0 *= len;
          y1 *= len;
          y2 *= len;
      }
  
      dest[0] = x0;
      dest[1] = y0;
      dest[2] = z0;
      dest[3] = 0;
      dest[4] = x1;
      dest[5] = y1;
      dest[6] = z1;
      dest[7] = 0;
      dest[8] = x2;
      dest[9] = y2;
      dest[10] = z2;
      dest[11] = 0;
      dest[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
      dest[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
      dest[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
      dest[15] = 1;
  
      return dest;
  };
  
  /**
   * Creates a matrix from a quaternion rotation and vector translation
   * This is equivalent to (but much faster than):
   *
   *     mat4.identity(dest);
   *     mat4.translate(dest, vec);
   *     var quatMat = mat4.create();
   *     quat4.toMat4(quat, quatMat);
   *     mat4.multiply(dest, quatMat);
   *
   * @param {quat4} quat Rotation quaternion
   * @param {vec3} vec Translation vector
   * @param {mat4} [dest] mat4 receiving operation result. If not specified result is written to a new mat4
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  mat4.fromRotationTranslation = function (quat, vec, dest) {
      if (!dest) { dest = mat4.create(); }
  
      // Quaternion math
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
  
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
  
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
      dest[3] = 0;
      dest[4] = xy - wz;
      dest[5] = 1 - (xx + zz);
      dest[6] = yz + wx;
      dest[7] = 0;
      dest[8] = xz + wy;
      dest[9] = yz - wx;
      dest[10] = 1 - (xx + yy);
      dest[11] = 0;
      dest[12] = vec[0];
      dest[13] = vec[1];
      dest[14] = vec[2];
      dest[15] = 1;
      
      return dest;
  };
  
  /**
   * Returns a string representation of a mat4
   *
   * @param {mat4} mat mat4 to represent as a string
   *
   * @returns {string} String representation of mat
   */
  mat4.str = function (mat) {
      return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] + ', ' + mat[3] +
          ', ' + mat[4] + ', ' + mat[5] + ', ' + mat[6] + ', ' + mat[7] +
          ', ' + mat[8] + ', ' + mat[9] + ', ' + mat[10] + ', ' + mat[11] +
          ', ' + mat[12] + ', ' + mat[13] + ', ' + mat[14] + ', ' + mat[15] + ']';
  };
  
  /*
   * quat4
   */
  
  /**
   * Creates a new instance of a quat4 using the default array type
   * Any javascript array containing at least 4 numeric elements can serve as a quat4
   *
   * @param {quat4} [quat] quat4 containing values to initialize with
   *
   * @returns {quat4} New quat4
   */
  quat4.create = function (quat) {
      var dest = new MatrixArray(4);
  
      if (quat) {
          dest[0] = quat[0];
          dest[1] = quat[1];
          dest[2] = quat[2];
          dest[3] = quat[3];
      }
  
      return dest;
  };
  
  /**
   * Copies the values of one quat4 to another
   *
   * @param {quat4} quat quat4 containing values to copy
   * @param {quat4} dest quat4 receiving copied values
   *
   * @returns {quat4} dest
   */
  quat4.set = function (quat, dest) {
      dest[0] = quat[0];
      dest[1] = quat[1];
      dest[2] = quat[2];
      dest[3] = quat[3];
  
      return dest;
  };
  
  /**
   * Calculates the W component of a quat4 from the X, Y, and Z components.
   * Assumes that quaternion is 1 unit in length. 
   * Any existing W component will be ignored. 
   *
   * @param {quat4} quat quat4 to calculate W component of
   * @param {quat4} [dest] quat4 receiving calculated values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.calculateW = function (quat, dest) {
      var x = quat[0], y = quat[1], z = quat[2];
  
      if (!dest || quat === dest) {
          quat[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
          return quat;
      }
      dest[0] = x;
      dest[1] = y;
      dest[2] = z;
      dest[3] = -Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
      return dest;
  };
  
  /**
   * Calculates the dot product of two quaternions
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   *
   * @return {number} Dot product of quat and quat2
   */
  quat4.dot = function(quat, quat2){
      return quat[0]*quat2[0] + quat[1]*quat2[1] + quat[2]*quat2[2] + quat[3]*quat2[3];
  };
  
  /**
   * Calculates the inverse of a quat4
   *
   * @param {quat4} quat quat4 to calculate inverse of
   * @param {quat4} [dest] quat4 receiving inverse values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.inverse = function(quat, dest) {
      var q0 = quat[0], q1 = quat[1], q2 = quat[2], q3 = quat[3],
          dot = q0*q0 + q1*q1 + q2*q2 + q3*q3,
          invDot = dot ? 1.0/dot : 0;
      
      // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0
      
      if(!dest || quat === dest) {
          quat[0] *= -invDot;
          quat[1] *= -invDot;
          quat[2] *= -invDot;
          quat[3] *= invDot;
          return quat;
      }
      dest[0] = -quat[0]*invDot;
      dest[1] = -quat[1]*invDot;
      dest[2] = -quat[2]*invDot;
      dest[3] = quat[3]*invDot;
      return dest;
  };
  
  
  /**
   * Calculates the conjugate of a quat4
   * If the quaternion is normalized, this function is faster than quat4.inverse and produces the same result.
   *
   * @param {quat4} quat quat4 to calculate conjugate of
   * @param {quat4} [dest] quat4 receiving conjugate values. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.conjugate = function (quat, dest) {
      if (!dest || quat === dest) {
          quat[0] *= -1;
          quat[1] *= -1;
          quat[2] *= -1;
          return quat;
      }
      dest[0] = -quat[0];
      dest[1] = -quat[1];
      dest[2] = -quat[2];
      dest[3] = quat[3];
      return dest;
  };
  
  /**
   * Calculates the length of a quat4
   *
   * Params:
   * @param {quat4} quat quat4 to calculate length of
   *
   * @returns Length of quat
   */
  quat4.length = function (quat) {
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3];
      return Math.sqrt(x * x + y * y + z * z + w * w);
  };
  
  /**
   * Generates a unit quaternion of the same direction as the provided quat4
   * If quaternion length is 0, returns [0, 0, 0, 0]
   *
   * @param {quat4} quat quat4 to normalize
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.normalize = function (quat, dest) {
      if (!dest) { dest = quat; }
  
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          len = Math.sqrt(x * x + y * y + z * z + w * w);
      if (len === 0) {
          dest[0] = 0;
          dest[1] = 0;
          dest[2] = 0;
          dest[3] = 0;
          return dest;
      }
      len = 1 / len;
      dest[0] = x * len;
      dest[1] = y * len;
      dest[2] = z * len;
      dest[3] = w * len;
  
      return dest;
  };
  
  /**
   * Performs quaternion addition
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.add = function (quat, quat2, dest) {
      if(!dest || quat === dest) {
          quat[0] += quat2[0];
          quat[1] += quat2[1];
          quat[2] += quat2[2];
          quat[3] += quat2[3];
          return quat;
      }
      dest[0] = quat[0]+quat2[0];
      dest[1] = quat[1]+quat2[1];
      dest[2] = quat[2]+quat2[2];
      dest[3] = quat[3]+quat2[3];
      return dest;
  };
  
  /**
   * Performs a quaternion multiplication
   *
   * @param {quat4} quat First operand
   * @param {quat4} quat2 Second operand
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.multiply = function (quat, quat2, dest) {
      if (!dest) { dest = quat; }
  
      var qax = quat[0], qay = quat[1], qaz = quat[2], qaw = quat[3],
          qbx = quat2[0], qby = quat2[1], qbz = quat2[2], qbw = quat2[3];
  
      dest[0] = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
      dest[1] = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
      dest[2] = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
      dest[3] = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
  
      return dest;
  };
  
  /**
   * Transforms a vec3 with the given quaternion
   *
   * @param {quat4} quat quat4 to transform the vector with
   * @param {vec3} vec vec3 to transform
   * @param {vec3} [dest] vec3 receiving operation result. If not specified result is written to vec
   *
   * @returns dest if specified, vec otherwise
   */
  quat4.multiplyVec3 = function (quat, vec, dest) {
      if (!dest) { dest = vec; }
  
      var x = vec[0], y = vec[1], z = vec[2],
          qx = quat[0], qy = quat[1], qz = quat[2], qw = quat[3],
  
          // calculate quat * vec
          ix = qw * x + qy * z - qz * y,
          iy = qw * y + qz * x - qx * z,
          iz = qw * z + qx * y - qy * x,
          iw = -qx * x - qy * y - qz * z;
  
      // calculate result * inverse quat
      dest[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
      dest[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
      dest[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  
      return dest;
  };
  
  /**
   * Multiplies the components of a quaternion by a scalar value
   *
   * @param {quat4} quat to scale
   * @param {number} val Value to scale by
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.scale = function (quat, val, dest) {
      if(!dest || quat === dest) {
          quat[0] *= val;
          quat[1] *= val;
          quat[2] *= val;
          quat[3] *= val;
          return quat;
      }
      dest[0] = quat[0]*val;
      dest[1] = quat[1]*val;
      dest[2] = quat[2]*val;
      dest[3] = quat[3]*val;
      return dest;
  };
  
  /**
   * Calculates a 3x3 matrix from the given quat4
   *
   * @param {quat4} quat quat4 to create matrix from
   * @param {mat3} [dest] mat3 receiving operation result
   *
   * @returns {mat3} dest if specified, a new mat3 otherwise
   */
  quat4.toMat3 = function (quat, dest) {
      if (!dest) { dest = mat3.create(); }
  
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
  
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
  
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
  
      dest[3] = xy - wz;
      dest[4] = 1 - (xx + zz);
      dest[5] = yz + wx;
  
      dest[6] = xz + wy;
      dest[7] = yz - wx;
      dest[8] = 1 - (xx + yy);
  
      return dest;
  };
  
  /**
   * Calculates a 4x4 matrix from the given quat4
   *
   * @param {quat4} quat quat4 to create matrix from
   * @param {mat4} [dest] mat4 receiving operation result
   *
   * @returns {mat4} dest if specified, a new mat4 otherwise
   */
  quat4.toMat4 = function (quat, dest) {
      if (!dest) { dest = mat4.create(); }
  
      var x = quat[0], y = quat[1], z = quat[2], w = quat[3],
          x2 = x + x,
          y2 = y + y,
          z2 = z + z,
  
          xx = x * x2,
          xy = x * y2,
          xz = x * z2,
          yy = y * y2,
          yz = y * z2,
          zz = z * z2,
          wx = w * x2,
          wy = w * y2,
          wz = w * z2;
  
      dest[0] = 1 - (yy + zz);
      dest[1] = xy + wz;
      dest[2] = xz - wy;
      dest[3] = 0;
  
      dest[4] = xy - wz;
      dest[5] = 1 - (xx + zz);
      dest[6] = yz + wx;
      dest[7] = 0;
  
      dest[8] = xz + wy;
      dest[9] = yz - wx;
      dest[10] = 1 - (xx + yy);
      dest[11] = 0;
  
      dest[12] = 0;
      dest[13] = 0;
      dest[14] = 0;
      dest[15] = 1;
  
      return dest;
  };
  
  /**
   * Performs a spherical linear interpolation between two quat4
   *
   * @param {quat4} quat First quaternion
   * @param {quat4} quat2 Second quaternion
   * @param {number} slerp Interpolation amount between the two inputs
   * @param {quat4} [dest] quat4 receiving operation result. If not specified result is written to quat
   *
   * @returns {quat4} dest if specified, quat otherwise
   */
  quat4.slerp = function (quat, quat2, slerp, dest) {
      if (!dest) { dest = quat; }
  
      var cosHalfTheta = quat[0] * quat2[0] + quat[1] * quat2[1] + quat[2] * quat2[2] + quat[3] * quat2[3],
          halfTheta,
          sinHalfTheta,
          ratioA,
          ratioB;
  
      if (Math.abs(cosHalfTheta) >= 1.0) {
          if (dest !== quat) {
              dest[0] = quat[0];
              dest[1] = quat[1];
              dest[2] = quat[2];
              dest[3] = quat[3];
          }
          return dest;
      }
  
      halfTheta = Math.acos(cosHalfTheta);
      sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta * cosHalfTheta);
  
      if (Math.abs(sinHalfTheta) < 0.001) {
          dest[0] = (quat[0] * 0.5 + quat2[0] * 0.5);
          dest[1] = (quat[1] * 0.5 + quat2[1] * 0.5);
          dest[2] = (quat[2] * 0.5 + quat2[2] * 0.5);
          dest[3] = (quat[3] * 0.5 + quat2[3] * 0.5);
          return dest;
      }
  
      ratioA = Math.sin((1 - slerp) * halfTheta) / sinHalfTheta;
      ratioB = Math.sin(slerp * halfTheta) / sinHalfTheta;
  
      dest[0] = (quat[0] * ratioA + quat2[0] * ratioB);
      dest[1] = (quat[1] * ratioA + quat2[1] * ratioB);
      dest[2] = (quat[2] * ratioA + quat2[2] * ratioB);
      dest[3] = (quat[3] * ratioA + quat2[3] * ratioB);
  
      return dest;
  };
  
  /**
   * Returns a string representation of a quaternion
   *
   * @param {quat4} quat quat4 to represent as a string
   *
   * @returns {string} String representation of quat
   */
  quat4.str = function (quat) {
      return '[' + quat[0] + ', ' + quat[1] + ', ' + quat[2] + ', ' + quat[3] + ']';
  };
  
  
  return {
    vec3: vec3,
    mat3: mat3,
    mat4: mat4,
    quat4: quat4
  };
  
  })();
  
  ;
  var GLImmediateSetup={};
  
  function _glEnable(x0) { GLctx.enable(x0) }
  
  function _glDisable(x0) { GLctx.disable(x0) }
  
  function _glIsEnabled(x0) { return GLctx.isEnabled(x0) }
  
  function _glGetBooleanv(name_, p) {
      return GL.get(name_, p, 'Boolean');
    }
  
  function _glGetIntegerv(name_, p) {
      return GL.get(name_, p, 'Integer');
    }
  
  function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          ret = allocate(intArrayFromString('OpenGL ES GLSL 1.00 (WebGL)'), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }
  
  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }
  
  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }
  
  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }
  
  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }
  
  function _glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }
  
  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }
  
  function _glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }
  
  function _glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }
  
  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }
  
  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
      if (target == GLctx.ARRAY_BUFFER) {
        GL.currArrayBuffer = buffer;
        GLImmediate.lastArrayBuffer = buffer;
      } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
        GL.currElementArrayBuffer = buffer;
      }
  
      GLctx.bindBuffer(target, bufferObj);
    }
  
  function _glGetFloatv(name_, p) {
      return GL.get(name_, p, 'Float');
    }
  
  function _glHint(x0, x1) { GLctx.hint(x0, x1) }
  
  function _glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }
  
  function _glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }
  
  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }
  
  function _glActiveTexture(x0) { GLctx.activeTexture(x0) }var GLEmulation={fogStart:0,fogEnd:1,fogDensity:1,fogColor:null,fogMode:2048,fogEnabled:false,vaos:[],currentVao:null,enabledVertexAttribArrays:{},hasRunInit:false,init:function () {
        // Do not activate immediate/emulation code (e.g. replace glDrawElements) when in FULL_ES2 mode.
        // We do not need full emulation, we instead emulate client-side arrays etc. in FULL_ES2 code in
        // a straightforward manner, and avoid not having a bound buffer be ambiguous between es2 emulation
        // code and legacy gl emulation code.
  
        if (GLEmulation.hasRunInit) {
          return;
        }
        GLEmulation.hasRunInit = true;
  
        GLEmulation.fogColor = new Float32Array(4);
  
        // Add some emulation workarounds
        Module.printErr('WARNING: using emscripten GL emulation. This is a collection of limited workarounds, do not expect it to work.');
        Module.printErr('WARNING: using emscripten GL emulation unsafe opts. If weirdness happens, try -s GL_UNSAFE_OPTS=0');
  
        // XXX some of the capabilities we don't support may lead to incorrect rendering, if we do not emulate them in shaders
        var validCapabilities = {
          0x0B44: 1, // GL_CULL_FACE
          0x0BE2: 1, // GL_BLEND
          0x0BD0: 1, // GL_DITHER,
          0x0B90: 1, // GL_STENCIL_TEST
          0x0B71: 1, // GL_DEPTH_TEST
          0x0C11: 1, // GL_SCISSOR_TEST
          0x8037: 1, // GL_POLYGON_OFFSET_FILL
          0x809E: 1, // GL_SAMPLE_ALPHA_TO_COVERAGE
          0x80A0: 1  // GL_SAMPLE_COVERAGE
        };
  
        var glEnable = _glEnable;
        _glEnable = _emscripten_glEnable = function _glEnable(cap) {
          // Clean up the renderer on any change to the rendering state. The optimization of
          // skipping renderer setup is aimed at the case of multiple glDraw* right after each other
          if (GLImmediate.lastRenderer) GLImmediate.lastRenderer.cleanup();
          if (cap == 0x0B60 /* GL_FOG */) {
            if (GLEmulation.fogEnabled != true) {
              GLImmediate.currentRenderer = null; // Fog parameter is part of the FFP shader state, we must re-lookup the renderer to use.
              GLEmulation.fogEnabled = true;
            }
            return;
          } else if (cap == 0x0de1 /* GL_TEXTURE_2D */) {
            // XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support
            // it by forwarding to glEnableClientState
            /* Actually, let's not, for now. (This sounds exceedingly broken)
             * This is in gl_ps_workaround2.c.
            _glEnableClientState(cap);
            */
            return;
          } else if (!(cap in validCapabilities)) {
            return;
          }
          glEnable(cap);
        };
  
        var glDisable = _glDisable;
        _glDisable = _emscripten_glDisable = function _glDisable(cap) {
          if (GLImmediate.lastRenderer) GLImmediate.lastRenderer.cleanup();
          if (cap == 0x0B60 /* GL_FOG */) {
            if (GLEmulation.fogEnabled != false) {
              GLImmediate.currentRenderer = null; // Fog parameter is part of the FFP shader state, we must re-lookup the renderer to use.
              GLEmulation.fogEnabled = false;
            }
            return;
          } else if (cap == 0x0de1 /* GL_TEXTURE_2D */) {
            // XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support
            // it by forwarding to glDisableClientState
            /* Actually, let's not, for now. (This sounds exceedingly broken)
             * This is in gl_ps_workaround2.c.
            _glDisableClientState(cap);
            */
            return;
          } else if (!(cap in validCapabilities)) {
            return;
          }
          glDisable(cap);
        };
        _glIsEnabled = _emscripten_glIsEnabled = function _glIsEnabled(cap) {
          if (cap == 0x0B60 /* GL_FOG */) {
            return GLEmulation.fogEnabled ? 1 : 0;
          } else if (!(cap in validCapabilities)) {
            return 0;
          }
          return GLctx.isEnabled(cap);
        };
  
        var glGetBooleanv = _glGetBooleanv;
        _glGetBooleanv = _emscripten_glGetBooleanv = function _glGetBooleanv(pname, p) {
          var attrib = GLEmulation.getAttributeFromCapability(pname);
          if (attrib !== null) {
            var result = GLImmediate.enabledClientAttributes[attrib];
            HEAP8[((p)>>0)]=result === true ? 1 : 0;
            return;
          }
          glGetBooleanv(pname, p);
        };
  
        var glGetIntegerv = _glGetIntegerv;
        _glGetIntegerv = _emscripten_glGetIntegerv = function _glGetIntegerv(pname, params) {
          switch (pname) {
            case 0x84E2: pname = GLctx.MAX_TEXTURE_IMAGE_UNITS /* fake it */; break; // GL_MAX_TEXTURE_UNITS
            case 0x8B4A: { // GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
              var result = GLctx.getParameter(GLctx.MAX_VERTEX_UNIFORM_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8B49: { // GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
              var result = GLctx.getParameter(GLctx.MAX_FRAGMENT_UNIFORM_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8B4B: { // GL_MAX_VARYING_FLOATS_ARB
              var result = GLctx.getParameter(GLctx.MAX_VARYING_VECTORS);
              HEAP32[((params)>>2)]=result*4; // GLES gives num of 4-element vectors, GL wants individual components, so multiply
              return;
            }
            case 0x8871: pname = GLctx.MAX_COMBINED_TEXTURE_IMAGE_UNITS /* close enough */; break; // GL_MAX_TEXTURE_COORDS
            case 0x807A: { // GL_VERTEX_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x807B: { // GL_VERTEX_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x807C: { // GL_VERTEX_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.VERTEX];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
            case 0x8081: { // GL_COLOR_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x8082: { // GL_COLOR_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x8083: { // GL_COLOR_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.COLOR];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
            case 0x8088: { // GL_TEXTURE_COORD_ARRAY_SIZE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.size : 0;
              return;
            }
            case 0x8089: { // GL_TEXTURE_COORD_ARRAY_TYPE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.type : 0;
              return;
            }
            case 0x808A: { // GL_TEXTURE_COORD_ARRAY_STRIDE
              var attribute = GLImmediate.clientAttributes[GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture];
              HEAP32[((params)>>2)]=attribute ? attribute.stride : 0;
              return;
            }
          }
          glGetIntegerv(pname, params);
        };
  
        var glGetString = _glGetString;
        _glGetString = _emscripten_glGetString = function _glGetString(name_) {
          if (GL.stringCache[name_]) return GL.stringCache[name_];
          switch(name_) {
            case 0x1F03 /* GL_EXTENSIONS */: // Add various extensions that we can support
              var ret = allocate(intArrayFromString(GLctx.getSupportedExtensions().join(' ') +
                     ' GL_EXT_texture_env_combine GL_ARB_texture_env_crossbar GL_ATI_texture_env_combine3 GL_NV_texture_env_combine4 GL_EXT_texture_env_dot3 GL_ARB_multitexture GL_ARB_vertex_buffer_object GL_EXT_framebuffer_object GL_ARB_vertex_program GL_ARB_fragment_program GL_ARB_shading_language_100 GL_ARB_shader_objects GL_ARB_vertex_shader GL_ARB_fragment_shader GL_ARB_texture_cube_map GL_EXT_draw_range_elements' +
                     (GL.currentContext.compressionExt ? ' GL_ARB_texture_compression GL_EXT_texture_compression_s3tc' : '') +
                     (GL.currentContext.anisotropicExt ? ' GL_EXT_texture_filter_anisotropic' : '')
              ), 'i8', ALLOC_NORMAL);
              GL.stringCache[name_] = ret;
              return ret;
          }
          return glGetString(name_);
        };
  
        // Do some automatic rewriting to work around GLSL differences. Note that this must be done in
        // tandem with the rest of the program, by itself it cannot suffice.
        // Note that we need to remember shader types for this rewriting, saving sources makes it easier to debug.
        GL.shaderInfos = {};
        var glCreateShader = _glCreateShader;
        _glCreateShader = _emscripten_glCreateShader = function _glCreateShader(shaderType) {
          var id = glCreateShader(shaderType);
          GL.shaderInfos[id] = {
            type: shaderType,
            ftransform: false
          };
          return id;
        };
  
        function ensurePrecision(source) {
          if (!/precision +(low|medium|high)p +float *;/.test(source)) {
            source = 'precision mediump float;\n' + source;
          }
          return source;
        }
  
        var glShaderSource = _glShaderSource;
        _glShaderSource = _emscripten_glShaderSource = function _glShaderSource(shader, count, string, length) {
          var source = GL.getSource(shader, count, string, length);
          // XXX We add attributes and uniforms to shaders. The program can ask for the # of them, and see the
          // ones we generated, potentially confusing it? Perhaps we should hide them.
          if (GL.shaderInfos[shader].type == GLctx.VERTEX_SHADER) {
            // Replace ftransform() with explicit project/modelview transforms, and add position and matrix info.
            var has_pm = source.search(/u_projection/) >= 0;
            var has_mm = source.search(/u_modelView/) >= 0;
            var has_pv = source.search(/a_position/) >= 0;
            var need_pm = 0, need_mm = 0, need_pv = 0;
            var old = source;
            source = source.replace(/ftransform\(\)/g, '(u_projection * u_modelView * a_position)');
            if (old != source) need_pm = need_mm = need_pv = 1;
            old = source;
            source = source.replace(/gl_ProjectionMatrix/g, 'u_projection');
            if (old != source) need_pm = 1;
            old = source;
            source = source.replace(/gl_ModelViewMatrixTranspose\[2\]/g, 'vec4(u_modelView[0][2], u_modelView[1][2], u_modelView[2][2], u_modelView[3][2])'); // XXX extremely inefficient
            if (old != source) need_mm = 1;
            old = source;
            source = source.replace(/gl_ModelViewMatrix/g, 'u_modelView');
            if (old != source) need_mm = 1;
            old = source;
            source = source.replace(/gl_Vertex/g, 'a_position');
            if (old != source) need_pv = 1;
            old = source;
            source = source.replace(/gl_ModelViewProjectionMatrix/g, '(u_projection * u_modelView)');
            if (old != source) need_pm = need_mm = 1;
            if (need_pv && !has_pv) source = 'attribute vec4 a_position; \n' + source;
            if (need_mm && !has_mm) source = 'uniform mat4 u_modelView; \n' + source;
            if (need_pm && !has_pm) source = 'uniform mat4 u_projection; \n' + source;
            GL.shaderInfos[shader].ftransform = need_pm || need_mm || need_pv; // we will need to provide the fixed function stuff as attributes and uniforms
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              // XXX To handle both regular texture mapping and cube mapping, we use vec4 for tex coordinates.
              var old = source;
              var need_vtc = source.search('v_texCoord' + i) == -1;
              source = source.replace(new RegExp('gl_TexCoord\\[' + i + '\\]', 'g'), 'v_texCoord' + i)
                             .replace(new RegExp('gl_MultiTexCoord' + i, 'g'), 'a_texCoord' + i);
              if (source != old) {
                source = 'attribute vec4 a_texCoord' + i + '; \n' + source;
                if (need_vtc) {
                  source = 'varying vec4 v_texCoord' + i + ';   \n' + source;
                }
              }
  
              old = source;
              source = source.replace(new RegExp('gl_TextureMatrix\\[' + i + '\\]', 'g'), 'u_textureMatrix' + i);
              if (source != old) {
                source = 'uniform mat4 u_textureMatrix' + i + '; \n' + source;
              }
            }
            if (source.indexOf('gl_FrontColor') >= 0) {
              source = 'varying vec4 v_color; \n' +
                       source.replace(/gl_FrontColor/g, 'v_color');
            }
            if (source.indexOf('gl_Color') >= 0) {
              source = 'attribute vec4 a_color; \n' +
                       source.replace(/gl_Color/g, 'a_color');
            }
            if (source.indexOf('gl_Normal') >= 0) {
              source = 'attribute vec3 a_normal; \n' +
                       source.replace(/gl_Normal/g, 'a_normal');
            }
            // fog
            if (source.indexOf('gl_FogFragCoord') >= 0) {
              source = 'varying float v_fogFragCoord;   \n' +
                       source.replace(/gl_FogFragCoord/g, 'v_fogFragCoord');
            }
            source = ensurePrecision(source);
          } else { // Fragment shader
            for (var i = 0; i < GLImmediate.MAX_TEXTURES; i++) {
              var old = source;
              source = source.replace(new RegExp('gl_TexCoord\\[' + i + '\\]', 'g'), 'v_texCoord' + i);
              if (source != old) {
                source = 'varying vec4 v_texCoord' + i + ';   \n' + source;
              }
            }
            if (source.indexOf('gl_Color') >= 0) {
              source = 'varying vec4 v_color; \n' + source.replace(/gl_Color/g, 'v_color');
            }
            if (source.indexOf('gl_Fog.color') >= 0) {
              source = 'uniform vec4 u_fogColor;   \n' +
                       source.replace(/gl_Fog.color/g, 'u_fogColor');
            }
            if (source.indexOf('gl_Fog.end') >= 0) {
              source = 'uniform float u_fogEnd;   \n' +
                       source.replace(/gl_Fog.end/g, 'u_fogEnd');
            }
            if (source.indexOf('gl_Fog.scale') >= 0) {
              source = 'uniform float u_fogScale;   \n' +
                       source.replace(/gl_Fog.scale/g, 'u_fogScale');
            }
            if (source.indexOf('gl_Fog.density') >= 0) {
              source = 'uniform float u_fogDensity;   \n' +
                       source.replace(/gl_Fog.density/g, 'u_fogDensity');
            }
            if (source.indexOf('gl_FogFragCoord') >= 0) {
              source = 'varying float v_fogFragCoord;   \n' +
                       source.replace(/gl_FogFragCoord/g, 'v_fogFragCoord');
            }
            source = ensurePrecision(source);
          }
          GLctx.shaderSource(GL.shaders[shader], source);
        };
  
        var glCompileShader = _glCompileShader;
        _glCompileShader = _emscripten_glCompileShader = function _glCompileShader(shader) {
          GLctx.compileShader(GL.shaders[shader]);
        };
  
        GL.programShaders = {};
        var glAttachShader = _glAttachShader;
        _glAttachShader = _emscripten_glAttachShader = function _glAttachShader(program, shader) {
          if (!GL.programShaders[program]) GL.programShaders[program] = [];
          GL.programShaders[program].push(shader);
          glAttachShader(program, shader);
        };
  
        var glDetachShader = _glDetachShader;
        _glDetachShader = _emscripten_glDetachShader = function _glDetachShader(program, shader) {
          var programShader = GL.programShaders[program];
          if (!programShader) {
            Module.printErr('WARNING: _glDetachShader received invalid program: ' + program);
            return;
          }
          var index = programShader.indexOf(shader);
          programShader.splice(index, 1);
          glDetachShader(program, shader);
        };
  
        var glUseProgram = _glUseProgram;
        _glUseProgram = _emscripten_glUseProgram = function _glUseProgram(program) {
          if (GL.currProgram != program) {
            GLImmediate.currentRenderer = null; // This changes the FFP emulation shader program, need to recompute that.
            GL.currProgram = program;
            GLImmediate.fixedFunctionProgram = 0;
            glUseProgram(program);
          }
        }
  
        var glDeleteProgram = _glDeleteProgram;
        _glDeleteProgram = _emscripten_glDeleteProgram = function _glDeleteProgram(program) {
          glDeleteProgram(program);
          if (program == GL.currProgram) {
            GLImmediate.currentRenderer = null; // This changes the FFP emulation shader program, need to recompute that.
            GL.currProgram = 0;
          }
        };
  
        // If attribute 0 was not bound, bind it to 0 for WebGL performance reasons. Track if 0 is free for that.
        var zeroUsedPrograms = {};
        var glBindAttribLocation = _glBindAttribLocation;
        _glBindAttribLocation = _emscripten_glBindAttribLocation = function _glBindAttribLocation(program, index, name) {
          if (index == 0) zeroUsedPrograms[program] = true;
          glBindAttribLocation(program, index, name);
        };
        var glLinkProgram = _glLinkProgram;
        _glLinkProgram = _emscripten_glLinkProgram = function _glLinkProgram(program) {
          if (!(program in zeroUsedPrograms)) {
            GLctx.bindAttribLocation(GL.programs[program], 0, 'a_position');
          }
          glLinkProgram(program);
        };
  
        var glBindBuffer = _glBindBuffer;
        _glBindBuffer = _emscripten_glBindBuffer = function _glBindBuffer(target, buffer) {
          glBindBuffer(target, buffer);
          if (target == GLctx.ARRAY_BUFFER) {
            if (GLEmulation.currentVao) {
              assert(GLEmulation.currentVao.arrayBuffer == buffer || GLEmulation.currentVao.arrayBuffer == 0 || buffer == 0, 'TODO: support for multiple array buffers in vao');
              GLEmulation.currentVao.arrayBuffer = buffer;
            }
          } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
            if (GLEmulation.currentVao) GLEmulation.currentVao.elementArrayBuffer = buffer;
          }
        };
  
        var glGetFloatv = _glGetFloatv;
        _glGetFloatv = _emscripten_glGetFloatv = function _glGetFloatv(pname, params) {
          if (pname == 0x0BA6) { // GL_MODELVIEW_MATRIX
            HEAPF32.set(GLImmediate.matrix[0/*m*/], params >> 2);
          } else if (pname == 0x0BA7) { // GL_PROJECTION_MATRIX
            HEAPF32.set(GLImmediate.matrix[1/*p*/], params >> 2);
          } else if (pname == 0x0BA8) { // GL_TEXTURE_MATRIX
            HEAPF32.set(GLImmediate.matrix[2/*t*/ + GLImmediate.clientActiveTexture], params >> 2);
          } else if (pname == 0x0B66) { // GL_FOG_COLOR
            HEAPF32.set(GLEmulation.fogColor, params >> 2);
          } else if (pname == 0x0B63) { // GL_FOG_START
            HEAPF32[((params)>>2)]=GLEmulation.fogStart;
          } else if (pname == 0x0B64) { // GL_FOG_END
            HEAPF32[((params)>>2)]=GLEmulation.fogEnd;
          } else if (pname == 0x0B62) { // GL_FOG_DENSITY
            HEAPF32[((params)>>2)]=GLEmulation.fogDensity;
          } else if (pname == 0x0B65) { // GL_FOG_MODE
            HEAPF32[((params)>>2)]=GLEmulation.fogMode;
          } else {
            glGetFloatv(pname, params);
          }
        };
  
        var glHint = _glHint;
        _glHint = _emscripten_glHint = function _glHint(target, mode) {
          if (target == 0x84EF) { // GL_TEXTURE_COMPRESSION_HINT
            return;
          }
          glHint(target, mode);
        };
  
        var glEnableVertexAttribArray = _glEnableVertexAttribArray;
        _glEnableVertexAttribArray = _emscripten_glEnableVertexAttribArray = function _glEnableVertexAttribArray(index) {
          glEnableVertexAttribArray(index);
          GLEmulation.enabledVertexAttribArrays[index] = 1;
          if (GLEmulation.currentVao) GLEmulation.currentVao.enabledVertexAttribArrays[index] = 1;
        };
  
        var glDisableVertexAttribArray = _glDisableVertexAttribArray;
        _glDisableVertexAttribArray = _emscripten_glDisableVertexAttribArray = function _glDisableVertexAttribArray(index) {
          glDisableVertexAttribArray(index);
          delete GLEmulation.enabledVertexAttribArrays[index];
          if (GLEmulation.currentVao) delete GLEmulation.currentVao.enabledVertexAttribArrays[index];
        };
  
        var glVertexAttribPointer = _glVertexAttribPointer;
        _glVertexAttribPointer = _emscripten_glVertexAttribPointer = function _glVertexAttribPointer(index, size, type, normalized, stride, pointer) {
          glVertexAttribPointer(index, size, type, normalized, stride, pointer);
          if (GLEmulation.currentVao) { // TODO: avoid object creation here? likely not hot though
            GLEmulation.currentVao.vertexAttribPointers[index] = [index, size, type, normalized, stride, pointer];
          }
        };
      },getAttributeFromCapability:function (cap) {
        var attrib = null;
        switch (cap) {
          case 0x0de1: // GL_TEXTURE_2D - XXX not according to spec, and not in desktop GL, but works in some GLES1.x apparently, so support it
            abort("GL_TEXTURE_2D is not a spec-defined capability for gl{Enable,Disable}ClientState.");
            // Fall through:
          case 0x8078: // GL_TEXTURE_COORD_ARRAY
            attrib = GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture; break;
          case 0x8074: // GL_VERTEX_ARRAY
            attrib = GLImmediate.VERTEX; break;
          case 0x8075: // GL_NORMAL_ARRAY
            attrib = GLImmediate.NORMAL; break;
          case 0x8076: // GL_COLOR_ARRAY
            attrib = GLImmediate.COLOR; break;
        }
        return attrib;
      }};function _glVertexPointer(size, type, stride, pointer) {
      GLImmediate.setClientAttribute(GLImmediate.VERTEX, size, type, stride, pointer);
      if (GL.currArrayBuffer) {
        GLctx.vertexAttribPointer(GLImmediate.VERTEX, size, type, false, stride, pointer);
      }
    }


  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  function _glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }


  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  var _emscripten_postinvoke=true;


  function _glClear(x0) { GLctx.clear(x0) }

  function _clGetDeviceInfo(device,param_name,param_value_size,param_value,param_value_size_ret) {
  
  
      var  _info = null;
  
      try {
  
          var _object = CL.cl_objects[device];
  
        switch (param_name) {
          case 0x102B /*CL_DEVICE_NAME*/ :
            var _type = _object.getInfo(webcl.DEVICE_TYPE);
            switch (_type) {
              case webcl.DEVICE_TYPE_CPU:
                _info = "WEBCL_DEVICE_CPU";
              break;
              case webcl.DEVICE_TYPE_GPU:
                _info = "WEBCL_DEVICE_GPU";
              break;
              case webcl.DEVICE_TYPE_ACCELERATOR:
                _info = "WEBCL_DEVICE_ACCELERATOR";
              break;
              case webcl.DEVICE_TYPE_DEFAULT:
                _info = "WEBCL_DEVICE_DEFAULT";
              break;
            }
          break;
          case 0x102C /*CL_DEVICE_VENDOR*/ :
            _info = "WEBCL_DEVICE_VENDOR";
          break;
          case 0x100B /*CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE*/ :
            _info = 0;
          break;
          case 0x1030 /*CL_DEVICE_EXTENSIONS*/ :
            _info = webcl.getSupportedExtensions().join(' ') ;
          break;
          case 0x101A /*CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE*/ :
            _info = _object.getInfo(webcl.DEVICE_MEM_BASE_ADDR_ALIGN) >> 3;
          break;
          default:
            _info = _object.getInfo(param_name);
        }
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (param_value != 0) {
          HEAP32[((param_value)>>2)]=0;
        }
  
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=0;
        }
  
        return _error;
      }
  
      if(typeof(_info) == "number") {
  
        if (param_value_size == 8) {
          if (param_value != 0) (tempI64 = [_info>>>0,((+(Math_abs(_info))) >= 1.0 ? (_info > 0.0 ? ((Math_min((+(Math_floor((_info)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((_info - +(((~~(_info)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((param_value)>>2)]=tempI64[0],HEAP32[(((param_value)+(4))>>2)]=tempI64[1]);
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=8;
        } else {
          if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
        }
  
      } else if(typeof(_info) == "boolean") {
  
        if (param_value != 0) (_info == true) ? HEAP32[((param_value)>>2)]=1 : HEAP32[((param_value)>>2)]=0;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
      } else if(typeof(_info) == "string") {
  
        if (param_name != webcl.DEVICE_PROFILE) _info += " ";
        if (param_value != 0) writeStringToMemory(_info, param_value);
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=_info.length + 1;
  
      } else if(typeof(_info) == "object") {
  
        if (_info instanceof Array) {
  
          for (var i = 0; i < Math.min(param_value_size>>2,_info.length); i++) {
            if (param_value != 0) HEAP32[(((param_value)+(i*4))>>2)]=_info[i];
          }
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=_info.length * 4;
  
        } else if (_info instanceof WebCLPlatform) {
  
          var _id = CL.udid(_info);
          if (param_value != 0) HEAP32[((param_value)>>2)]=_id;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
        } else if (_info == null) {
  
          if (param_value != 0) HEAP32[((param_value)>>2)]=0;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=0;
  
        } else {
          return webcl.INVALID_VALUE;
        }
      } else {
        return webcl.INVALID_VALUE;
      }
  
      return webcl.SUCCESS;
    }

  function _clEnqueueNDRangeKernel(command_queue,kernel,work_dim,global_work_offset,global_work_size,local_work_size,num_events_in_wait_list,event_wait_list,event) {
  
      var _event = null;
      var _event_wait_list = num_events_in_wait_list > 0 ? [] : null;
      var _local_work_size = (local_work_size != 0) ? [] : null;
  
      var _global_work_offset = [];
      var _global_work_size = [];
  
  
      for (var i = 0; i < work_dim; i++) {
        _global_work_size.push(HEAP32[(((global_work_size)+(i*4))>>2)]);
  
        if (global_work_offset != 0)
          _global_work_offset.push(HEAP32[(((global_work_offset)+(i*4))>>2)]);
        else
          _global_work_offset.push(0);
  
        if (local_work_size != 0)
          _local_work_size.push(HEAP32[(((local_work_size)+(i*4))>>2)]);
      }
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      }
  
      try {
  
        if (event != 0) {
          _event = new WebCLEvent();
        }
  
        CL.cl_objects[command_queue].enqueueNDRangeKernel(CL.cl_objects[kernel],work_dim,_global_work_offset,_global_work_size,_local_work_size,_event_wait_list,_event);
  
        if (event != 0) {
          HEAP32[((event)>>2)]=CL.udid(_event);
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
  
    }

  function _clReleaseProgram(program) {
  
  
      // If is an object retain don't release it until retains > 0...
      if (program in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[program] - 1;
  
        CL.cl_objects_retains[program] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
      try {
  
          CL.cl_objects[program].release();
          delete CL.cl_objects[program];
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
  
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _putc() {
  return _fputc.apply(null, arguments)
  }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  
  
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }
  
  function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }
  
  function _SDL_RWFromConstMem(mem, size) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      SDL.rwops.push({ bytes: mem, count: size });
      return id;
    }function _TTF_FontHeight(font) {
      var fontData = SDL.fonts[font];
      return fontData.size;
    }function _TTF_SizeText(font, text, w, h) {
      var fontData = SDL.fonts[font];
      if (w) {
        HEAP32[((w)>>2)]=SDL.estimateTextWidth(fontData, Pointer_stringify(text));
      }
      if (h) {
        HEAP32[((h)>>2)]=fontData.size;
      }
      return 0;
    }function _TTF_RenderText_Solid(font, text, color) {
      // XXX the font and color are ignored
      text = Pointer_stringify(text) || ' '; // if given an empty string, still return a valid surface
      var fontData = SDL.fonts[font];
      var w = SDL.estimateTextWidth(fontData, text);
      var h = fontData.size;
      var color = SDL.loadColorToCSSRGB(color); // XXX alpha breaks fonts?
      var fontString = h + 'px ' + fontData.name;
      var surf = SDL.makeSurface(w, h, 0, false, 'text:' + text); // bogus numbers..
      var surfData = SDL.surfaces[surf];
      surfData.ctx.save();
      surfData.ctx.fillStyle = color;
      surfData.ctx.font = fontString;
      surfData.ctx.textBaseline = 'top';
      surfData.ctx.fillText(text, 0, 0);
      surfData.ctx.restore();
      return surf;
    }function _Mix_HaltMusic() {
      var audio = SDL.music.audio;
      if (audio) {
        audio.src = audio.src; // rewind <media> element
        audio.currentPosition = 0; // rewind Web Audio graph playback.
        audio.pause();
      }
      SDL.music.audio = null;
      if (SDL.hookMusicFinished) {
        Runtime.dynCall('v', SDL.hookMusicFinished);
      }
      return 0;
    }function _Mix_PlayMusic(id, loops) {
      // Pause old music if it exists.
      if (SDL.music.audio) {
        if (!SDL.music.audio.paused) Module.printErr('Music is already playing. ' + SDL.music.source);
        SDL.music.audio.pause();
      }
      var info = SDL.audios[id];
      var audio;
      if (info.webAudio) { // Play via Web Audio API
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new webAudio object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else if (info.audio) { // Play via the <audio> element
        audio = info.audio;
      }
      audio['onended'] = function() { if (SDL.music.audio == this) _Mix_HaltMusic(); } // will send callback
      audio.loop = loops != 0; // TODO: handle N loops for finite N
      audio.volume = SDL.music.volume;
      SDL.music.audio = audio;
      audio.play();
      return 0;
    }function _Mix_FreeChunk(id) {
      SDL.audios[id] = null;
    }function _Mix_LoadWAV_RW(rwopsID, freesrc) {
      var rwops = SDL.rwops[rwopsID];
  
      if (rwops === undefined)
        return 0;
  
      var filename = '';
      var audio;
      var webAudio;
      var bytes;
  
      if (rwops.filename !== undefined) {
        filename = PATH.resolve(rwops.filename);
        var raw = Module["preloadedAudios"][filename];
        if (!raw) {
          if (raw === null) Module.printErr('Trying to reuse preloaded audio, but freePreloadedMediaOnUse is set!');
          if (!Module.noAudioDecoding) Runtime.warnOnce('Cannot find preloaded audio ' + filename);
  
          // see if we can read the file-contents from the in-memory FS
          try {
            bytes = FS.readFile(filename);
          } catch (e) {
            Module.printErr('Couldn\'t find file for: ' + filename);
            return 0;
          }
        }
        if (Module['freePreloadedMediaOnUse']) {
          Module["preloadedAudios"][filename] = null;
        }
        audio = raw;
      }
      else if (rwops.bytes !== undefined) {
        // For Web Audio context buffer decoding, we must make a clone of the audio data, but for <media> element,
        // a view to existing data is sufficient.
        if (SDL.webAudioAvailable()) bytes = HEAPU8.buffer.slice(rwops.bytes, rwops.bytes + rwops.count);
        else bytes = HEAPU8.subarray(rwops.bytes, rwops.bytes + rwops.count);
      }
      else {
        return 0;
      }
  
      var arrayBuffer = bytes ? bytes.buffer || bytes : bytes;
  
      // To allow user code to work around browser bugs with audio playback on <audio> elements an Web Audio, enable
      // the user code to hook in a callback to decide on a file basis whether each file should use Web Audio or <audio> for decoding and playback.
      // In particular, see https://bugzilla.mozilla.org/show_bug.cgi?id=654787 and ?id=1012801 for tradeoffs.
      var canPlayWithWebAudio = Module['SDL_canPlayWithWebAudio'] === undefined || Module['SDL_canPlayWithWebAudio'](filename, arrayBuffer);
  
      if (bytes !== undefined && SDL.webAudioAvailable() && canPlayWithWebAudio) {
        audio = undefined;
        webAudio = {};
        // The audio decoding process is asynchronous, which gives trouble if user code plays the audio data back immediately
        // after loading. Therefore prepare an array of callback handlers to run when this audio decoding is complete, which
        // will then start the playback (with some delay).
        webAudio.onDecodeComplete = []; // While this member array exists, decoding hasn't finished yet.
        function onDecodeComplete(data) {
          webAudio.decodedBuffer = data;
          // Call all handlers that were waiting for this decode to finish, and clear the handler list.
          webAudio.onDecodeComplete.forEach(function(e) { e(); });
          webAudio.onDecodeComplete = undefined; // Don't allow more callback handlers since audio has finished decoding.
        }
  
        SDL.audioContext['decodeAudioData'](arrayBuffer, onDecodeComplete);
      } else if (audio === undefined && bytes) {
        // Here, we didn't find a preloaded audio but we either were passed a filepath for
        // which we loaded bytes, or we were passed some bytes
        var blob = new Blob([bytes], {type: rwops.mimetype});
        var url = URL.createObjectURL(blob);
        audio = new Audio();
        audio.src = url;
        audio.mozAudioChannelType = 'content'; // bugzilla 910340
      }
  
      var id = SDL.audios.length;
      // Keep the loaded audio in the audio arrays, ready for playback
      SDL.audios.push({
        source: filename,
        audio: audio, // Points to the <audio> element, if loaded
        webAudio: webAudio // Points to a Web Audio -specific resource object, if loaded
      });
      return id;
    }function _Mix_PlayChannel(channel, id, loops) {
      // TODO: handle fixed amount of N loops. Currently loops either 0 or infinite times.
  
      // Get the audio element associated with the ID
      var info = SDL.audios[id];
      if (!info) return -1;
      if (!info.audio && !info.webAudio) return -1;
  
      // If the user asks us to allocate a channel automatically, get the first
      // free one.
      if (channel == -1) {
        for (var i = SDL.channelMinimumNumber; i < SDL.numChannels; i++) {
          if (!SDL.channels[i].audio) {
            channel = i;
            break;
          }
        }
        if (channel == -1) {
          Module.printErr('All ' + SDL.numChannels + ' channels in use!');
          return -1;
        }
      }
      var channelInfo = SDL.channels[channel];
      var audio;
      if (info.webAudio) {
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        // Make our instance look similar to the instance of a <media> to make api simple.
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else {
        // We clone the audio node to utilize the preloaded audio buffer, since
        // the browser has already preloaded the audio file.
        audio = info.audio.cloneNode(true);
        audio.numChannels = info.audio.numChannels;
        audio.frequency = info.audio.frequency;
      }
      audio['onended'] = function SDL_audio_onended() { // TODO: cache these
        if (channelInfo.audio == this) { channelInfo.audio.paused = true; channelInfo.audio = null; }
        if (SDL.channelFinished) Runtime.getFuncWrapper(SDL.channelFinished, 'vi')(channel);
      }
      channelInfo.audio = audio;
      // TODO: handle N loops. Behavior matches Mix_PlayMusic
      audio.loop = loops != 0;
      audio.volume = channelInfo.volume;
      audio.play();
      return channel;
    }function _SDL_PauseAudio(pauseOn) {
      if (!SDL.audio) {
        return;
      }
      if (pauseOn) {
        if (SDL.audio.timer !== undefined) {
          clearTimeout(SDL.audio.timer);
          SDL.audio.numAudioTimersPending = 0;
          SDL.audio.timer = undefined;
        }
      } else if (!SDL.audio.timer) {
        // Start the audio playback timer callback loop.
        SDL.audio.numAudioTimersPending = 1;
        SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, 1);
      }
      SDL.audio.paused = pauseOn;
    }function _SDL_CloseAudio() {
      if (SDL.audio) {
        _SDL_PauseAudio(1);
        _free(SDL.audio.buffer);
        SDL.audio = null;
        SDL.allocateChannels(0);
      }
    }function _SDL_LockSurface(surf) {
      var surfData = SDL.surfaces[surf];
  
      surfData.locked++;
      if (surfData.locked > 1) return 0;
  
      if (!surfData.buffer) {
        surfData.buffer = _malloc(surfData.width * surfData.height * 4);
        HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
      }
  
      // Mark in C/C++-accessible SDL structure
      // SDL_Surface has the following fields: Uint32 flags, SDL_PixelFormat *format; int w, h; Uint16 pitch; void *pixels; ...
      // So we have fields all of the same size, and 5 of them before us.
      // TODO: Use macros like in library.js
      HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
  
      if (surf == SDL.screen && Module.screenIsReadOnly && surfData.image) return 0;
  
      if (SDL.defaults.discardOnLock) {
        if (!surfData.image) {
          surfData.image = surfData.ctx.createImageData(surfData.width, surfData.height);
        }
        if (!SDL.defaults.opaqueFrontBuffer) return;
      } else {
        surfData.image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
      }
  
      // Emulate desktop behavior and kill alpha values on the locked surface. (very costly!) Set SDL.defaults.opaqueFrontBuffer = false
      // if you don't want this.
      if (surf == SDL.screen && SDL.defaults.opaqueFrontBuffer) {
        var data = surfData.image.data;
        var num = data.length;
        for (var i = 0; i < num/4; i++) {
          data[i*4+3] = 255; // opacity, as canvases blend alpha
        }
      }
  
      if (SDL.defaults.copyOnLock && !SDL.defaults.discardOnLock) {
        // Copy pixel data to somewhere accessible to 'C/C++'
        if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
          // If this is neaded then
          // we should compact the data from 32bpp to 8bpp index.
          // I think best way to implement this is use
          // additional colorMap hash (color->index).
          // Something like this:
          //
          // var size = surfData.width * surfData.height;
          // var data = '';
          // for (var i = 0; i<size; i++) {
          //   var color = SDL.translateRGBAToColor(
          //     surfData.image.data[i*4   ], 
          //     surfData.image.data[i*4 +1], 
          //     surfData.image.data[i*4 +2], 
          //     255);
          //   var index = surfData.colorMap[color];
          //   HEAP8[(((surfData.buffer)+(i))>>0)]=index;
          // }
          throw 'CopyOnLock is not supported for SDL_LockSurface with SDL_HWPALETTE flag set' + new Error().stack;
        } else {
        HEAPU8.set(surfData.image.data, surfData.buffer);
        }
      }
  
      return 0;
    }
  
  function _SDL_FreeRW(rwopsID) {
      SDL.rwops[rwopsID] = null;
      while (SDL.rwops.length > 0 && SDL.rwops[SDL.rwops.length-1] === null) {
        SDL.rwops.pop();
      }
    }function _IMG_Load_RW(rwopsID, freeSrc) {
      try {
        // stb_image integration support
        function cleanup() {
          if (rwops && freeSrc) _SDL_FreeRW(rwopsID);
        };
        function addCleanup(func) {
          var old = cleanup;
          cleanup = function added_cleanup() {
            old();
            func();
          }
        }
        function callStbImage(func, params) {
          var x = Module['_malloc'](4);
          var y = Module['_malloc'](4);
          var comp = Module['_malloc'](4);
          addCleanup(function() {
            Module['_free'](x);
            Module['_free'](y);
            Module['_free'](comp);
            if (data) Module['_stbi_image_free'](data);
          });
          var data = Module['_' + func].apply(null, params.concat([x, y, comp, 0]));
          if (!data) return null;
          return {
            rawData: true,
            data: data,
            width: HEAP32[((x)>>2)],
            height: HEAP32[((y)>>2)],
            size: HEAP32[((x)>>2)] * HEAP32[((y)>>2)] * HEAP32[((comp)>>2)],
            bpp: HEAP32[((comp)>>2)]
          };
        }
  
        var rwops = SDL.rwops[rwopsID];
        if (rwops === undefined) {
          return 0;
        }
  
        var filename = rwops.filename;
        if (filename === undefined) {
          Runtime.warnOnce('Only file names that have been preloaded are supported for IMG_Load_RW. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js)');
          return 0;
        }
  
        if (!raw) {
          filename = PATH.resolve(filename);
          var raw = Module["preloadedImages"][filename];
          if (!raw) {
            if (raw === null) Module.printErr('Trying to reuse preloaded image, but freePreloadedMediaOnUse is set!');
            Runtime.warnOnce('Cannot find preloaded image ' + filename);
            Runtime.warnOnce('Cannot find preloaded image ' + filename + '. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js)');
            return 0;
          } else if (Module['freePreloadedMediaOnUse']) {
            Module["preloadedImages"][filename] = null;
          }
        }
  
        var surf = SDL.makeSurface(raw.width, raw.height, 0, false, 'load:' + filename);
        var surfData = SDL.surfaces[surf];
        surfData.ctx.globalCompositeOperation = "copy";
        if (!raw.rawData) {
          surfData.ctx.drawImage(raw, 0, 0, raw.width, raw.height, 0, 0, raw.width, raw.height);
        } else {
          var imageData = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
          if (raw.bpp == 4) {
            // rgba
            imageData.data.set(HEAPU8.subarray((raw.data),(raw.data+raw.size)));
          } else if (raw.bpp == 3) {
            // rgb
            var pixels = raw.size/3;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = 255;
            }
          } else if (raw.bpp == 1) {
            // grayscale
            var pixels = raw.size;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              var value = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = 255;
            }
          } else {
            Module.printErr('cannot handle bpp ' + raw.bpp);
            return 0;
          }
          surfData.ctx.putImageData(imageData, 0, 0);
        }
        surfData.ctx.globalCompositeOperation = "source-over";
        // XXX SDL does not specify that loaded images must have available pixel data, in fact
        //     there are cases where you just want to blit them, so you just need the hardware
        //     accelerated version. However, code everywhere seems to assume that the pixels
        //     are in fact available, so we retrieve it here. This does add overhead though.
        _SDL_LockSurface(surf);
        surfData.locked--; // The surface is not actually locked in this hack
        if (SDL.GL) {
          // After getting the pixel data, we can free the canvas and context if we do not need to do 2D canvas blitting
          surfData.canvas = surfData.ctx = null;
        }
        return surf;
      } finally {
        cleanup();
      }
    }
  
  function _SDL_RWFromFile(_name, mode) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      var name = Pointer_stringify(_name)
      SDL.rwops.push({ filename: name, mimetype: Browser.getMimetype(name) });
      return id;
    }function _IMG_Load(filename){
      var rwops = _SDL_RWFromFile(filename);
      var result = _IMG_Load_RW(rwops, 1);
      return result;
    }function _SDL_UpperBlitScaled(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, true);
    }function _SDL_UpperBlit(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, false);
    }function _SDL_GetTicks() {
      return (Date.now() - SDL.startTime)|0;
    }var SDL={defaults:{width:320,height:200,copyOnLock:true,discardOnLock:false,opaqueFrontBuffer:true},version:null,surfaces:{},canvasPool:[],events:[],fonts:[null],audios:[null],rwops:[null],music:{audio:null,volume:1},mixerFrequency:22050,mixerFormat:32784,mixerNumChannels:2,mixerChunkSize:1024,channelMinimumNumber:0,GL:false,glAttributes:{0:3,1:3,2:2,3:0,4:0,5:1,6:16,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:1,16:0,17:0,18:0},keyboardState:null,keyboardMap:{},canRequestFullscreen:false,isRequestingFullscreen:false,textInput:false,startTime:null,initFlags:0,buttonState:0,modState:0,DOMButtons:[0,0,0],DOMEventToSDLEvent:{},TOUCH_DEFAULT_ID:0,eventHandler:null,eventHandlerContext:null,keyCodes:{16:1249,17:1248,18:1250,20:1081,33:1099,34:1102,35:1101,36:1098,37:1104,38:1106,39:1103,40:1105,44:316,45:1097,46:127,91:1251,93:1125,96:1122,97:1113,98:1114,99:1115,100:1116,101:1117,102:1118,103:1119,104:1120,105:1121,106:1109,107:1111,109:1110,110:1123,111:1108,112:1082,113:1083,114:1084,115:1085,116:1086,117:1087,118:1088,119:1089,120:1090,121:1091,122:1092,123:1093,124:1128,125:1129,126:1130,127:1131,128:1132,129:1133,130:1134,131:1135,132:1136,133:1137,134:1138,135:1139,144:1107,160:94,161:33,162:34,163:35,164:36,165:37,166:38,167:95,168:40,169:41,170:42,171:43,172:124,173:45,174:123,175:125,176:126,181:127,182:129,183:128,188:44,190:46,191:47,192:96,219:91,220:92,221:93,222:39},scanCodes:{8:42,9:43,13:40,27:41,32:44,35:204,39:53,44:54,46:55,47:56,48:39,49:30,50:31,51:32,52:33,53:34,54:35,55:36,56:37,57:38,58:203,59:51,61:46,91:47,92:49,93:48,96:52,97:4,98:5,99:6,100:7,101:8,102:9,103:10,104:11,105:12,106:13,107:14,108:15,109:16,110:17,111:18,112:19,113:20,114:21,115:22,116:23,117:24,118:25,119:26,120:27,121:28,122:29,127:76,305:224,308:226,316:70},loadRect:function (rect) {
        return {
          x: HEAP32[((rect + 0)>>2)],
          y: HEAP32[((rect + 4)>>2)],
          w: HEAP32[((rect + 8)>>2)],
          h: HEAP32[((rect + 12)>>2)]
        };
      },updateRect:function (rect, r) {
        HEAP32[((rect)>>2)]=r.x;
        HEAP32[(((rect)+(4))>>2)]=r.y;
        HEAP32[(((rect)+(8))>>2)]=r.w;
        HEAP32[(((rect)+(12))>>2)]=r.h;
      },intersectionOfRects:function (first, second) {
        var leftX = Math.max(first.x, second.x);
        var leftY = Math.max(first.y, second.y);
        var rightX = Math.min(first.x + first.w, second.x + second.w);
        var rightY = Math.min(first.y + first.h, second.y + second.h);
  
        return {
          x: leftX,
          y: leftY,
          w: Math.max(leftX, rightX) - leftX,
          h: Math.max(leftY, rightY) - leftY
        }
      },checkPixelFormat:function (fmt) {
        // Canvas screens are always RGBA.
        var format = HEAP32[((fmt)>>2)];
        if (format != -2042224636) {
          Runtime.warnOnce('Unsupported pixel format!');
        }
      },loadColorToCSSRGB:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgb(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ')';
      },loadColorToCSSRGBA:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgba(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ',' + (((rgba >> 24)&255)/255) + ')';
      },translateColorToCSSRGBA:function (rgba) {
        return 'rgba(' + (rgba&0xff) + ',' + (rgba>>8 & 0xff) + ',' + (rgba>>16 & 0xff) + ',' + (rgba>>>24)/0xff + ')';
      },translateRGBAToCSSRGBA:function (r, g, b, a) {
        return 'rgba(' + (r&0xff) + ',' + (g&0xff) + ',' + (b&0xff) + ',' + (a&0xff)/255 + ')';
      },translateRGBAToColor:function (r, g, b, a) {
        return r | g << 8 | b << 16 | a << 24;
      },makeSurface:function (width, height, flags, usePageCanvas, source, rmask, gmask, bmask, amask) {
        flags = flags || 0;
        var is_SDL_HWSURFACE = flags & 0x00000001;
        var is_SDL_HWPALETTE = flags & 0x00200000;
        var is_SDL_OPENGL = flags & 0x04000000;
  
        var surf = _malloc(60);
        var pixelFormat = _malloc(44);
        //surface with SDL_HWPALETTE flag is 8bpp surface (1 byte)
        var bpp = is_SDL_HWPALETTE ? 1 : 4;
        var buffer = 0;
  
        // preemptively initialize this for software surfaces,
        // otherwise it will be lazily initialized inside of SDL_LockSurface
        if (!is_SDL_HWSURFACE && !is_SDL_OPENGL) {
          buffer = _malloc(width * height * 4);
        }
  
        HEAP32[((surf)>>2)]=flags;
        HEAP32[(((surf)+(4))>>2)]=pixelFormat;
        HEAP32[(((surf)+(8))>>2)]=width;
        HEAP32[(((surf)+(12))>>2)]=height;
        HEAP32[(((surf)+(16))>>2)]=width * bpp;  // assuming RGBA or indexed for now,
                                                                                          // since that is what ImageData gives us in browsers
        HEAP32[(((surf)+(20))>>2)]=buffer;
  
        HEAP32[(((surf)+(36))>>2)]=0;
        HEAP32[(((surf)+(40))>>2)]=0;
        HEAP32[(((surf)+(44))>>2)]=Module["canvas"].width;
        HEAP32[(((surf)+(48))>>2)]=Module["canvas"].height;
  
        HEAP32[(((surf)+(56))>>2)]=1;
  
        HEAP32[((pixelFormat)>>2)]=-2042224636;
        HEAP32[(((pixelFormat)+(4))>>2)]=0;// TODO
        HEAP8[(((pixelFormat)+(8))>>0)]=bpp * 8;
        HEAP8[(((pixelFormat)+(9))>>0)]=bpp;
  
        HEAP32[(((pixelFormat)+(12))>>2)]=rmask || 0x000000ff;
        HEAP32[(((pixelFormat)+(16))>>2)]=gmask || 0x0000ff00;
        HEAP32[(((pixelFormat)+(20))>>2)]=bmask || 0x00ff0000;
        HEAP32[(((pixelFormat)+(24))>>2)]=amask || 0xff000000;
  
        // Decide if we want to use WebGL or not
        SDL.GL = SDL.GL || is_SDL_OPENGL;
        var canvas;
        if (!usePageCanvas) {
          if (SDL.canvasPool.length > 0) {
            canvas = SDL.canvasPool.pop();
          } else {
            canvas = document.createElement('canvas');
          }
          canvas.width = width;
          canvas.height = height;
        } else {
          canvas = Module['canvas'];
        }
  
        var webGLContextAttributes = {
          antialias: ((SDL.glAttributes[13 /*SDL_GL_MULTISAMPLEBUFFERS*/] != 0) && (SDL.glAttributes[14 /*SDL_GL_MULTISAMPLESAMPLES*/] > 1)),
          depth: (SDL.glAttributes[6 /*SDL_GL_DEPTH_SIZE*/] > 0),
          stencil: (SDL.glAttributes[7 /*SDL_GL_STENCIL_SIZE*/] > 0)
        };
        
        var ctx = Browser.createContext(canvas, is_SDL_OPENGL, usePageCanvas, webGLContextAttributes);
              
        SDL.surfaces[surf] = {
          width: width,
          height: height,
          canvas: canvas,
          ctx: ctx,
          surf: surf,
          buffer: buffer,
          pixelFormat: pixelFormat,
          alpha: 255,
          flags: flags,
          locked: 0,
          usePageCanvas: usePageCanvas,
          source: source,
  
          isFlagSet: function(flag) {
            return flags & flag;
          }
        };
  
        return surf;
      },copyIndexedColorData:function (surfData, rX, rY, rW, rH) {
        // HWPALETTE works with palette
        // setted by SDL_SetColors
        if (!surfData.colors) {
          return;
        }
        
        var fullWidth  = Module['canvas'].width;
        var fullHeight = Module['canvas'].height;
  
        var startX  = rX || 0;
        var startY  = rY || 0;
        var endX    = (rW || (fullWidth - startX)) + startX;
        var endY    = (rH || (fullHeight - startY)) + startY;
        
        var buffer  = surfData.buffer;
  
        if (!surfData.image.data32) {
          surfData.image.data32 = new Uint32Array(surfData.image.data.buffer);
        }
        var data32   = surfData.image.data32;
  
        var colors32 = surfData.colors32;
  
        for (var y = startY; y < endY; ++y) {
          var base = y * fullWidth;
          for (var x = startX; x < endX; ++x) {
            data32[base + x] = colors32[HEAPU8[((buffer + base + x)>>0)]];
          }
        }
      },freeSurface:function (surf) {
        var refcountPointer = surf + 56;
        var refcount = HEAP32[((refcountPointer)>>2)];
        if (refcount > 1) {
          HEAP32[((refcountPointer)>>2)]=refcount - 1;
          return;
        }
  
        var info = SDL.surfaces[surf];
        if (!info.usePageCanvas && info.canvas) SDL.canvasPool.push(info.canvas);
        if (info.buffer) _free(info.buffer);
        _free(info.pixelFormat);
        _free(surf);
        SDL.surfaces[surf] = null;
  
        if (surf === SDL.screen) {
          SDL.screen = null;
        }
      },blitSurface__deps:["SDL_LockSurface"],blitSurface:function (src, srcrect, dst, dstrect, scale) {
        var srcData = SDL.surfaces[src];
        var dstData = SDL.surfaces[dst];
        var sr, dr;
        if (srcrect) {
          sr = SDL.loadRect(srcrect);
        } else {
          sr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstrect) {
          dr = SDL.loadRect(dstrect);
        } else {
          dr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstData.clipRect) {
          var widthScale = (!scale || sr.w === 0) ? 1 : sr.w / dr.w;
          var heightScale = (!scale || sr.h === 0) ? 1 : sr.h / dr.h;
          
          dr = SDL.intersectionOfRects(dstData.clipRect, dr);
          
          sr.w = dr.w * widthScale;
          sr.h = dr.h * heightScale;
          
          if (dstrect) {
            SDL.updateRect(dstrect, dr);
          }
        }
        var blitw, blitr;
        if (scale) {
          blitw = dr.w; blith = dr.h;
        } else {
          blitw = sr.w; blith = sr.h;
        }
        if (sr.w === 0 || sr.h === 0 || blitw === 0 || blith === 0) {
          return 0;
        }
        var oldAlpha = dstData.ctx.globalAlpha;
        dstData.ctx.globalAlpha = srcData.alpha/255;
        dstData.ctx.drawImage(srcData.canvas, sr.x, sr.y, sr.w, sr.h, dr.x, dr.y, blitw, blith);
        dstData.ctx.globalAlpha = oldAlpha;
        if (dst != SDL.screen) {
          // XXX As in IMG_Load, for compatibility we write out |pixels|
          Runtime.warnOnce('WARNING: copying canvas data to memory for compatibility');
          _SDL_LockSurface(dst);
          dstData.locked--; // The surface is not actually locked in this hack
        }
        return 0;
      },downFingers:{},savedKeydown:null,receiveEvent:function (event) {
        function unpressAllPressedKeys() {
          // Un-press all pressed keys: TODO
          for (var code in SDL.keyboardMap) {
            SDL.events.push({
              type: 'keyup',
              keyCode: SDL.keyboardMap[code]
            });
          }
        };
        switch(event.type) {
          case 'touchstart': case 'touchmove': {
            event.preventDefault();
  
            var touches = [];
            
            // Clear out any touchstart events that we've already processed
            if (event.type === 'touchstart') {
              for (var i = 0; i < event.touches.length; i++) {
                var touch = event.touches[i];
                if (SDL.downFingers[touch.identifier] != true) {
                  SDL.downFingers[touch.identifier] = true;
                  touches.push(touch);
                }
              }
            } else {
              touches = event.touches;
            }
            
            var firstTouch = touches[0];
            if (event.type == 'touchstart') {
              SDL.DOMButtons[0] = 1;
            }
            var mouseEventType;
            switch(event.type) {
              case 'touchstart': mouseEventType = 'mousedown'; break;
              case 'touchmove': mouseEventType = 'mousemove'; break;
            }
            var mouseEvent = {
              type: mouseEventType,
              button: 0,
              pageX: firstTouch.clientX,
              pageY: firstTouch.clientY
            };
            SDL.events.push(mouseEvent);
  
            for (var i = 0; i < touches.length; i++) {
              var touch = touches[i];
              SDL.events.push({
                type: event.type,
                touch: touch
              });
            };
            break;
          }
          case 'touchend': {
            event.preventDefault();
            
            // Remove the entry in the SDL.downFingers hash
            // because the finger is no longer down.
            for(var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              if (SDL.downFingers[touch.identifier] === true) {
                delete SDL.downFingers[touch.identifier];
              }
            }
  
            var mouseEvent = {
              type: 'mouseup',
              button: 0,
              pageX: event.changedTouches[0].clientX,
              pageY: event.changedTouches[0].clientY
            };
            SDL.DOMButtons[0] = 0;
            SDL.events.push(mouseEvent);
            
            for (var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              SDL.events.push({
                type: 'touchend',
                touch: touch
              });
            };
            break;
          }
          case 'DOMMouseScroll': case 'mousewheel': case 'wheel':
            var delta = -Browser.getMouseWheelDelta(event); // Flip the wheel direction to translate from browser wheel direction (+:down) to SDL direction (+:up)
            delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
  
            // Simulate old-style SDL events representing mouse wheel input as buttons
            var button = delta > 0 ? 3 /*SDL_BUTTON_WHEELUP-1*/ : 4 /*SDL_BUTTON_WHEELDOWN-1*/; // Subtract one since JS->C marshalling is defined to add one back.
            SDL.events.push({ type: 'mousedown', button: button, pageX: event.pageX, pageY: event.pageY });
            SDL.events.push({ type: 'mouseup', button: button, pageX: event.pageX, pageY: event.pageY });
  
            // Pass a delta motion event.
            SDL.events.push({ type: 'wheel', deltaX: 0, deltaY: delta });
            event.preventDefault(); // If we don't prevent this, then 'wheel' event will be sent again by the browser as 'DOMMouseScroll' and we will receive this same event the second time.
            break;
          case 'mousemove':
            if (SDL.DOMButtons[0] === 1) {
              SDL.events.push({
                type: 'touchmove',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            }
            if (Browser.pointerLock) {
              // workaround for firefox bug 750111
              if ('mozMovementX' in event) {
                event['movementX'] = event['mozMovementX'];
                event['movementY'] = event['mozMovementY'];
              }
              // workaround for Firefox bug 782777
              if (event['movementX'] == 0 && event['movementY'] == 0) {
                // ignore a mousemove event if it doesn't contain any movement info
                // (without pointer lock, we infer movement from pageX/pageY, so this check is unnecessary)
                event.preventDefault();
                return;
              }
            }
            // fall through
          case 'keydown': case 'keyup': case 'keypress': case 'mousedown': case 'mouseup':
            // If we preventDefault on keydown events, the subsequent keypress events
            // won't fire. However, it's fine (and in some cases necessary) to
            // preventDefault for keys that don't generate a character. Otherwise,
            // preventDefault is the right thing to do in general.
            if (event.type !== 'keydown' || (!SDL.unicode && !SDL.textInput) || (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */)) {
              event.preventDefault();
            }
  
            if (event.type == 'mousedown') {
              SDL.DOMButtons[event.button] = 1;
              SDL.events.push({
                type: 'touchstart',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            } else if (event.type == 'mouseup') {
              // ignore extra ups, can happen if we leave the canvas while pressing down, then return,
              // since we add a mouseup in that case
              if (!SDL.DOMButtons[event.button]) {
                return;
              }
  
              SDL.events.push({
                type: 'touchend',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
              SDL.DOMButtons[event.button] = 0;
            }
  
            // We can only request fullscreen as the result of user input.
            // Due to this limitation, we toggle a boolean on keydown which
            // SDL_WM_ToggleFullScreen will check and subsequently set another
            // flag indicating for us to request fullscreen on the following
            // keyup. This isn't perfect, but it enables SDL_WM_ToggleFullScreen
            // to work as the result of a keypress (which is an extremely
            // common use case).
            if (event.type === 'keydown' || event.type === 'mousedown') {
              SDL.canRequestFullscreen = true;
            } else if (event.type === 'keyup' || event.type === 'mouseup') {
              if (SDL.isRequestingFullscreen) {
                Module['requestFullScreen'](true, true);
                SDL.isRequestingFullscreen = false;
              }
              SDL.canRequestFullscreen = false;
            }
  
            // SDL expects a unicode character to be passed to its keydown events.
            // Unfortunately, the browser APIs only provide a charCode property on
            // keypress events, so we must backfill in keydown events with their
            // subsequent keypress event's charCode.
            if (event.type === 'keypress' && SDL.savedKeydown) {
              // charCode is read-only
              SDL.savedKeydown.keypressCharCode = event.charCode;
              SDL.savedKeydown = null;
            } else if (event.type === 'keydown') {
              SDL.savedKeydown = event;
            }
  
            // Don't push keypress events unless SDL_StartTextInput has been called.
            if (event.type !== 'keypress' || SDL.textInput) {
              SDL.events.push(event);
            }
            break;
          case 'mouseout':
            // Un-press all pressed mouse buttons, because we might miss the release outside of the canvas
            for (var i = 0; i < 3; i++) {
              if (SDL.DOMButtons[i]) {
                SDL.events.push({
                  type: 'mouseup',
                  button: i,
                  pageX: event.pageX,
                  pageY: event.pageY
                });
                SDL.DOMButtons[i] = 0;
              }
            }
            event.preventDefault();
            break;
          case 'focus':
            SDL.events.push(event);
            event.preventDefault();
            break;
          case 'blur':
            SDL.events.push(event);
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'visibilitychange':
            SDL.events.push({
              type: 'visibilitychange',
              visible: !document.hidden
            });
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'unload':
            if (Browser.mainLoop.runner) {
              SDL.events.push(event);
              // Force-run a main event loop, since otherwise this event will never be caught!
              Browser.mainLoop.runner();
            }
            return;
          case 'resize':
            SDL.events.push(event);
            // manually triggered resize event doesn't have a preventDefault member
            if (event.preventDefault) {
              event.preventDefault();
            }
            break;
        }
        if (SDL.events.length >= 10000) {
          Module.printErr('SDL event queue full, dropping events');
          SDL.events = SDL.events.slice(0, 10000);
        }
        // If we have a handler installed, this will push the events to the app
        // instead of the app polling for them.
        SDL.flushEventsToHandler();
        return;
      },lookupKeyCodeForEvent:function (event) {
          var code = event.keyCode;
          if (code >= 65 && code <= 90) {
            code += 32; // make lowercase for SDL
          } else {
            code = SDL.keyCodes[event.keyCode] || event.keyCode;
            // If this is one of the modifier keys (224 | 1<<10 - 227 | 1<<10), and the event specifies that it is
            // a right key, add 4 to get the right key SDL key code.
            if (event.location === KeyboardEvent.DOM_KEY_LOCATION_RIGHT && code >= (224 | 1<<10) && code <= (227 | 1<<10)) {
              code += 4;
            }
          }
          return code;
      },handleEvent:function (event) {
        if (event.handled) return;
        event.handled = true;
  
        switch (event.type) {
          case 'touchstart': case 'touchend': case 'touchmove': {
            Browser.calculateMouseEvent(event);
            break;
          }
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            var code = SDL.lookupKeyCodeForEvent(event);
            HEAP8[(((SDL.keyboardState)+(code))>>0)]=down;
            // TODO: lmeta, rmeta, numlock, capslock, KMOD_MODE, KMOD_RESERVED
            SDL.modState = (HEAP8[(((SDL.keyboardState)+(1248))>>0)] ? 0x0040 : 0) | // KMOD_LCTRL
              (HEAP8[(((SDL.keyboardState)+(1249))>>0)] ? 0x0001 : 0) | // KMOD_LSHIFT
              (HEAP8[(((SDL.keyboardState)+(1250))>>0)] ? 0x0100 : 0) | // KMOD_LALT
              (HEAP8[(((SDL.keyboardState)+(1252))>>0)] ? 0x0080 : 0) | // KMOD_RCTRL
              (HEAP8[(((SDL.keyboardState)+(1253))>>0)] ? 0x0002 : 0) | // KMOD_RSHIFT
              (HEAP8[(((SDL.keyboardState)+(1254))>>0)] ? 0x0200 : 0); //  KMOD_RALT
            if (down) {
              SDL.keyboardMap[code] = event.keyCode; // save the DOM input, which we can use to unpress it during blur
            } else {
              delete SDL.keyboardMap[code];
            }
  
            break;
          }
          case 'mousedown': case 'mouseup':
            if (event.type == 'mousedown') {
              // SDL_BUTTON(x) is defined as (1 << ((x)-1)).  SDL buttons are 1-3,
              // and DOM buttons are 0-2, so this means that the below formula is
              // correct.
              SDL.buttonState |= 1 << event.button;
            } else if (event.type == 'mouseup') {
              SDL.buttonState &= ~(1 << event.button);
            }
            // fall through
          case 'mousemove': {
            Browser.calculateMouseEvent(event);
            break;
          }
        }
      },flushEventsToHandler:function () {
        if (!SDL.eventHandler) return;
  
        // All SDLEvents take the same amount of memory
        var sdlEventPtr = allocate(28, "i8", ALLOC_STACK);
  
        while (SDL.pollEvent(sdlEventPtr)) {
          Runtime.dynCall('iii', SDL.eventHandler, [SDL.eventHandlerContext, sdlEventPtr]);
        }
      },pollEvent:function (ptr) {
        if (SDL.initFlags & 0x200 && SDL.joystickEventState) {
          // If SDL_INIT_JOYSTICK was supplied AND the joystick system is configured
          // to automatically query for events, query for joystick events.
          SDL.queryJoysticks();
        }
        if (ptr) {
          while (SDL.events.length > 0) {
            if (SDL.makeCEvent(SDL.events.shift(), ptr) !== false) return 1;
          }
          return 0;
        } else {
          // XXX: somewhat risky in that we do not check if the event is real or not (makeCEvent returns false) if no pointer supplied
          return SDL.events.length > 0;
        }
      },makeCEvent:function (event, ptr) {
        if (typeof event === 'number') {
          // This is a pointer to a copy of a native C event that was SDL_PushEvent'ed
          _memcpy(ptr, event, 28);
          _free(event); // the copy is no longer needed
          return;
        }
  
        SDL.handleEvent(event);
  
        switch (event.type) {
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            //Module.print('Received key event: ' + event.keyCode);
            var key = SDL.lookupKeyCodeForEvent(event);
            var scan;
            if (key >= 1024) {
              scan = key - 1024;
            } else {
              scan = SDL.scanCodes[key] || key;
            }
  
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(8))>>0)]=down ? 1 : 0;
            HEAP8[(((ptr)+(9))>>0)]=0; // TODO
            HEAP32[(((ptr)+(12))>>2)]=scan;
            HEAP32[(((ptr)+(16))>>2)]=key;
            HEAP16[(((ptr)+(20))>>1)]=SDL.modState;
            // some non-character keys (e.g. backspace and tab) won't have keypressCharCode set, fill in with the keyCode.
            HEAP32[(((ptr)+(24))>>2)]=event.keypressCharCode || key;
  
            break;
          }
          case 'keypress': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            // Not filling in windowID for now
            var cStr = intArrayFromString(String.fromCharCode(event.charCode));
            for (var i = 0; i < cStr.length; ++i) {
              HEAP8[(((ptr)+(8 + i))>>0)]=cStr[i];
            }
            break;
          }
          case 'mousedown': case 'mouseup': case 'mousemove': {
            if (event.type != 'mousemove') {
              var down = event.type === 'mousedown';
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP8[(((ptr)+(16))>>0)]=event.button+1; // DOM buttons are 0-2, SDL 1-3
              HEAP8[(((ptr)+(17))>>0)]=down ? 1 : 0;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
            } else {
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP32[(((ptr)+(16))>>2)]=SDL.buttonState;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
              HEAP32[(((ptr)+(28))>>2)]=Browser.mouseMovementX;
              HEAP32[(((ptr)+(32))>>2)]=Browser.mouseMovementY;
            }
            break;
          }
          case 'wheel': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(16))>>2)]=event.deltaX;
            HEAP32[(((ptr)+(20))>>2)]=event.deltaY; 
            break;       
          }
          case 'touchstart': case 'touchend': case 'touchmove': {
            var touch = event.touch;
            if (!Browser.touches[touch.identifier]) break;
            var w = Module['canvas'].width;
            var h = Module['canvas'].height;
            var x = Browser.touches[touch.identifier].x / w;
            var y = Browser.touches[touch.identifier].y / h;
            var lx = Browser.lastTouches[touch.identifier].x / w;
            var ly = Browser.lastTouches[touch.identifier].y / h;
            var dx = x - lx;
            var dy = y - ly;
            if (touch['deviceID'] === undefined) touch.deviceID = SDL.TOUCH_DEFAULT_ID;
            if (dx === 0 && dy === 0 && event.type === 'touchmove') return false; // don't send these if nothing happened
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=_SDL_GetTicks();
            (tempI64 = [touch.deviceID>>>0,(tempDouble=touch.deviceID,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(8))>>2)]=tempI64[0],HEAP32[(((ptr)+(12))>>2)]=tempI64[1]);
            (tempI64 = [touch.identifier>>>0,(tempDouble=touch.identifier,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(16))>>2)]=tempI64[0],HEAP32[(((ptr)+(20))>>2)]=tempI64[1]);
            HEAPF32[(((ptr)+(24))>>2)]=x;
            HEAPF32[(((ptr)+(28))>>2)]=y;
            HEAPF32[(((ptr)+(32))>>2)]=dx;
            HEAPF32[(((ptr)+(36))>>2)]=dy;
            if (touch.force !== undefined) {
              HEAPF32[(((ptr)+(40))>>2)]=touch.force;
            } else { // No pressure data, send a digital 0/1 pressure.
              HEAPF32[(((ptr)+(40))>>2)]=event.type == "touchend" ? 0 : 1;
            }
            break;
          }
          case 'unload': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            break;
          }
          case 'resize': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=event.w;
            HEAP32[(((ptr)+(8))>>2)]=event.h;
            break;
          }
          case 'joystick_button_up': case 'joystick_button_down': {
            var state = event.type === 'joystick_button_up' ? 0 : 1;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.button;
            HEAP8[(((ptr)+(6))>>0)]=state;
            break;
          }
          case 'joystick_axis_motion': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.axis;
            HEAP32[(((ptr)+(8))>>2)]=SDL.joystickAxisValueConversion(event.value);
            break;
          }
          case 'focus': {
            var SDL_WINDOWEVENT_FOCUS_GAINED = 12 /* SDL_WINDOWEVENT_FOCUS_GAINED */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_GAINED;
            break;
          }
          case 'blur': {
            var SDL_WINDOWEVENT_FOCUS_LOST = 13 /* SDL_WINDOWEVENT_FOCUS_LOST */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_LOST;
            break;
          }
          case 'visibilitychange': {
            var SDL_WINDOWEVENT_SHOWN  = 1 /* SDL_WINDOWEVENT_SHOWN */;
            var SDL_WINDOWEVENT_HIDDEN = 2 /* SDL_WINDOWEVENT_HIDDEN */;
            var visibilityEventID = event.visible ? SDL_WINDOWEVENT_SHOWN : SDL_WINDOWEVENT_HIDDEN;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=visibilityEventID;
            break;
          }
          default: throw 'Unhandled SDL event: ' + event.type;
        }
      },estimateTextWidth:function (fontData, text) {
        var h = fontData.size;
        var fontString = h + 'px ' + fontData.name;
        var tempCtx = SDL.ttfContext;
        assert(tempCtx, 'TTF_Init must have been called');
        tempCtx.save();
        tempCtx.font = fontString;
        var ret = tempCtx.measureText(text).width | 0;
        tempCtx.restore();
        return ret;
      },allocateChannels:function (num) { // called from Mix_AllocateChannels and init
        if (SDL.numChannels && SDL.numChannels >= num && num != 0) return;
        SDL.numChannels = num;
        SDL.channels = [];
        for (var i = 0; i < num; i++) {
          SDL.channels[i] = {
            audio: null,
            volume: 1.0
          };
        }
      },setGetVolume:function (info, volume) {
        if (!info) return 0;
        var ret = info.volume * 128; // MIX_MAX_VOLUME
        if (volume != -1) {
          info.volume = Math.min(Math.max(volume, 0), 128) / 128;
          if (info.audio) {
            try {
              info.audio.volume = info.volume; // For <audio> element
              if (info.audio.webAudioGainNode) info.audio.webAudioGainNode['gain']['value'] = info.volume; // For WebAudio playback
            } catch(e) {
              Module.printErr('setGetVolume failed to set audio volume: ' + e);
            }
          }
        }
        return ret;
      },setPannerPosition:function (info, x, y, z) {
        if (!info) return;
        if (info.audio) {
          if (info.audio.webAudioPannerNode) {
            info.audio.webAudioPannerNode['setPosition'](x, y, z);
          }
        }
      },playWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) return; // This instance is already playing, don't start again.
        if (!SDL.webAudioAvailable()) return;
        try {
          var webAudio = audio.resource.webAudio;
          audio.paused = false;
          if (!webAudio.decodedBuffer) {
            if (webAudio.onDecodeComplete === undefined) abort("Cannot play back audio object that was not loaded");
            webAudio.onDecodeComplete.push(function() { if (!audio.paused) SDL.playWebAudio(audio); });
            return;
          }
          audio.webAudioNode = SDL.audioContext['createBufferSource']();
          audio.webAudioNode['buffer'] = webAudio.decodedBuffer;
          audio.webAudioNode['loop'] = audio.loop;
          audio.webAudioNode['onended'] = function() { audio['onended'](); } // For <media> element compatibility, route the onended signal to the instance.
  
          audio.webAudioPannerNode = SDL.audioContext['createPanner']();
          audio.webAudioPannerNode['panningModel'] = 'equalpower';
  
          // Add an intermediate gain node to control volume.
          audio.webAudioGainNode = SDL.audioContext['createGain']();
          audio.webAudioGainNode['gain']['value'] = audio.volume;
  
          audio.webAudioNode['connect'](audio.webAudioPannerNode);
          audio.webAudioPannerNode['connect'](audio.webAudioGainNode);
          audio.webAudioGainNode['connect'](SDL.audioContext['destination']);
  
          audio.webAudioNode['start'](0, audio.currentPosition);
          audio.startTime = SDL.audioContext['currentTime'] - audio.currentPosition;
        } catch(e) {
          Module.printErr('playWebAudio failed: ' + e);
        }
      },pauseWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) {
          try {
            // Remember where we left off, so that if/when we resume, we can restart the playback at a proper place.
            audio.currentPosition = (SDL.audioContext['currentTime'] - audio.startTime) % audio.resource.webAudio.decodedBuffer.duration;
            // Important: When we reach here, the audio playback is stopped by the user. But when calling .stop() below, the Web Audio
            // graph will send the onended signal, but we don't want to process that, since pausing should not clear/destroy the audio
            // channel.
            audio.webAudioNode['onended'] = undefined;
            audio.webAudioNode.stop();
            audio.webAudioNode = undefined;
          } catch(e) {
            Module.printErr('pauseWebAudio failed: ' + e);
          }
        }
        audio.paused = true;
      },openAudioContext:function () {
        // Initialize Web Audio API if we haven't done so yet. Note: Only initialize Web Audio context ever once on the web page,
        // since initializing multiple times fails on Chrome saying 'audio resources have been exhausted'.
        if (!SDL.audioContext) {
          if (typeof(AudioContext) !== 'undefined') SDL.audioContext = new AudioContext();
          else if (typeof(webkitAudioContext) !== 'undefined') SDL.audioContext = new webkitAudioContext();
        }
      },webAudioAvailable:function () { return !!SDL.audioContext; },fillWebAudioBufferFromHeap:function (heapPtr, sizeSamplesPerChannel, dstAudioBuffer) {
        // The input audio data is interleaved across the channels, i.e. [L, R, L, R, L, R, ...] and is either 8-bit or 16-bit as
        // supported by the SDL API. The output audio wave data for Web Audio API must be in planar buffers of [-1,1]-normalized Float32 data,
        // so perform a buffer conversion for the data.
        var numChannels = SDL.audio.channels;
        for(var c = 0; c < numChannels; ++c) {
          var channelData = dstAudioBuffer['getChannelData'](c);
          if (channelData.length != sizeSamplesPerChannel) {
            throw 'Web Audio output buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + sizeSamplesPerChannel + ' samples!';
          }
          if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              channelData[j] = (HEAP16[(((heapPtr)+((j*numChannels + c)*2))>>1)]) / 0x8000;
            }
          } else if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              var v = (HEAP8[(((heapPtr)+(j*numChannels + c))>>0)]);
              channelData[j] = ((v >= 0) ? v-128 : v+128) /128;
            }
          }
        }
      },debugSurface:function (surfData) {
        console.log('dumping surface ' + [surfData.surf, surfData.source, surfData.width, surfData.height]);
        var image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
        var data = image.data;
        var num = Math.min(surfData.width, surfData.height);
        for (var i = 0; i < num; i++) {
          console.log('   diagonal ' + i + ':' + [data[i*surfData.width*4 + i*4 + 0], data[i*surfData.width*4 + i*4 + 1], data[i*surfData.width*4 + i*4 + 2], data[i*surfData.width*4 + i*4 + 3]]);
        }
      },joystickEventState:1,lastJoystickState:{},joystickNamePool:{},recordJoystickState:function (joystick, state) {
        // Standardize button state.
        var buttons = new Array(state.buttons.length);
        for (var i = 0; i < state.buttons.length; i++) {
          buttons[i] = SDL.getJoystickButtonState(state.buttons[i]);
        }
  
        SDL.lastJoystickState[joystick] = {
          buttons: buttons,
          axes: state.axes.slice(0),
          timestamp: state.timestamp,
          index: state.index,
          id: state.id
        };
      },getJoystickButtonState:function (button) {
        if (typeof button === 'object') {
          // Current gamepad API editor's draft (Firefox Nightly)
          // https://dvcs.w3.org/hg/gamepad/raw-file/default/gamepad.html#idl-def-GamepadButton
          return button.pressed;
        } else {
          // Current gamepad API working draft (Firefox / Chrome Stable)
          // http://www.w3.org/TR/2012/WD-gamepad-20120529/#gamepad-interface
          return button > 0;
        }
      },queryJoysticks:function () {
        for (var joystick in SDL.lastJoystickState) {
          var state = SDL.getGamepad(joystick - 1);
          var prevState = SDL.lastJoystickState[joystick];
          // Check only if the timestamp has differed.
          // NOTE: Timestamp is not available in Firefox.
          if (typeof state.timestamp !== 'number' || state.timestamp !== prevState.timestamp) {
            var i;
            for (i = 0; i < state.buttons.length; i++) {
              var buttonState = SDL.getJoystickButtonState(state.buttons[i]);
              // NOTE: The previous state already has a boolean representation of
              //       its button, so no need to standardize its button state here.
              if (buttonState !== prevState.buttons[i]) {
                // Insert button-press event.
                SDL.events.push({
                  type: buttonState ? 'joystick_button_down' : 'joystick_button_up',
                  joystick: joystick,
                  index: joystick - 1,
                  button: i
                });
              }
            }
            for (i = 0; i < state.axes.length; i++) {
              if (state.axes[i] !== prevState.axes[i]) {
                // Insert axes-change event.
                SDL.events.push({
                  type: 'joystick_axis_motion',
                  joystick: joystick,
                  index: joystick - 1,
                  axis: i,
                  value: state.axes[i]
                });
              }
            }
  
            SDL.recordJoystickState(joystick, state);
          }
        }
      },joystickAxisValueConversion:function (value) {
        // Ensures that 0 is 0, 1 is 32767, and -1 is 32768.
        return Math.ceil(((value+1) * 32767.5) - 32768);
      },getGamepads:function () {
        var fcn = navigator.getGamepads || navigator.webkitGamepads || navigator.mozGamepads || navigator.gamepads || navigator.webkitGetGamepads;
        if (fcn !== undefined) {
          // The function must be applied on the navigator object.
          return fcn.apply(navigator);
        } else {
          return [];
        }
      },getGamepad:function (deviceIndex) {
        var gamepads = SDL.getGamepads();
        if (gamepads.length > deviceIndex && deviceIndex >= 0) {
          return gamepads[deviceIndex];
        }
        return null;
      }};function _SDL_GetError() {
      if (!SDL.errorMessage) {
        SDL.errorMessage = allocate(intArrayFromString("unknown SDL-emscripten error"), 'i8', ALLOC_NORMAL);
      }
      return SDL.errorMessage;
    }

  function _clSetKernelArg(kernel,arg_index,arg_size,arg_value) {
      if (CL.cl_objects[kernel].sig.length < arg_index) {
        return webcl.INVALID_KERNEL;
      }
  
      var _kernel = CL.cl_objects[kernel];
  
      var _posarg = _kernel.val_param[arg_index];
  
      var _sig = _kernel.sig[_posarg];
  
      try {
  
        // LOCAL ARG
        if (_sig == webcl.LOCAL) {
  
          var _array = new Uint32Array([arg_size]);
  
          _kernel.setArg(_posarg,_array);
  
          var _sizearg = CL.cast_long(arg_size);
  
          if (_kernel.val_param_argsize.indexOf(_posarg+1) >= 0) {
            _kernel.setArg(_posarg+1,_sizearg);
          }
  
        } else {
  
          var _value = HEAP32[((arg_value)>>2)];
  
          // WEBCL OBJECT ARG
          if (_value in CL.cl_objects) {
  
            _kernel.setArg(_posarg,CL.cl_objects[_value]);
  
  
            if (! (CL.cl_objects[_value] instanceof WebCLSampler)) {
  
              var _size = CL.cl_objects[_value].getInfo(webcl.MEM_SIZE);
              var _sizearg = CL.cast_long(_size);
  
              if (_kernel.val_param_argsize.indexOf(_posarg+1) >= 0) {
                _kernel.setArg(_posarg+1,_sizearg);
              }
            }
  
  
          } else {
  
            var _array = CL.getCopyPointerToArrayPowTwo(arg_value,arg_size,[[_sig,1]]);
  
            _kernel.setArg(_posarg,_array);
  
            var _sizearg = CL.cast_long(arg_size);
  
            if (_kernel.val_param_argsize.indexOf(_posarg+1) >= 0) {
              _kernel.setArg(_posarg+1,_sizearg);
            }
          }
        }
      } catch (e) {
  
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
    }

  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }

  function _clReleaseCommandQueue(command_queue) {
  
      // If is an object retain don't release it until retains > 0...
      if (command_queue in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[command_queue] - 1;
  
        CL.cl_objects_retains[command_queue] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
      try {
  
          CL.cl_objects[command_queue].release();
          delete CL.cl_objects[command_queue];
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }


  function _clReleaseKernel(kernel) {
  
      // If is an object retain don't release it until retains > 0...
      if (kernel in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[kernel] - 1;
  
        CL.cl_objects_retains[kernel] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
  
      try {
  
        CL.cl_objects[kernel].release();
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      delete CL.cl_objects[kernel];
  
  
      return webcl.SUCCESS;
    }

  var _BDtoIHigh=true;

  
  var PTHREAD_SPECIFIC={};
  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _clEnqueueReadBuffer(command_queue,buffer,blocking_read,offset,cb,ptr,num_events_in_wait_list,event_wait_list,event) {
  
      var _block = blocking_read ? true : false;
      var _event = null;
      var _event_wait_list = [];
      var _host_ptr = CL.getHostPtrArray(cb,CL.cl_pn_type);
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      }
  
      try {
  
        if (event != 0) {
          _event = new WebCLEvent();
        }
  
        CL.cl_objects[command_queue].enqueueReadBuffer(CL.cl_objects[buffer],_block,offset,cb,_host_ptr,_event_wait_list,_event);
  
  
        // Copy array to heap
        CL.copyDataToHeap(ptr,_host_ptr.buffer,cb,CL.cl_pn_type);
  
        if (event != 0) {
          HEAP32[((event)>>2)]=CL.udid(_event);
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  function _glGetError() {
      // First return any GL error generated by the emscripten library_gl.js interop layer.
      if (GL.lastError) {
        var error = GL.lastError;
        GL.lastError = 0/*GL_NO_ERROR*/;
        return error;
      } else { // If there were none, return the GL error from the browser GL context.
        return GLctx.getError();
      }
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }

  function _clGetContextInfo(context,param_name,param_value_size,param_value,param_value_size_ret) {
  
  
      var _info = null;
  
      try {
  
  
        if (param_name == 0x1080 /* CL_CONTEXT_REFERENCE_COUNT */) {
          _info = 0;
  
          if (context in CL.cl_objects) {
            _info++;
          }
  
          if (context in CL.cl_objects_retains) {
            _info+=CL.cl_objects_retains[context];
          }
  
        }  else if (param_name == 0x1082 /* CL_CONTEXT_PROPERTIES */) {
  
          _info = "WebCLContextProperties";
  
        } else {
  
          _info = CL.cl_objects[context].getInfo(param_name);
  
        }
  
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (param_value != 0) {
          HEAP32[((param_value)>>2)]=0;
        }
  
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=0;
        }
  
        return _error;
      }
  
       if (_info == "WebCLContextProperties") {
  
        var _size = 0;
  
        if (param_value != 0) {
  
          if ( CL.cl_objects[context].hasOwnProperty('properties') ) {
            var _properties = CL.cl_objects[context].properties;
  
            for (elt in _properties) {
              HEAP32[(((param_value)+(_size*4))>>2)]=_properties[elt];
              _size ++;
  
            }
          }
        }
  
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=_size*4;
  
      } else if(typeof(_info) == "number") {
  
        if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
      } else if(typeof(_info) == "boolean") {
  
        if (param_value != 0) (_info == true) ? HEAP32[((param_value)>>2)]=1 : HEAP32[((param_value)>>2)]=0;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
      } else if(typeof(_info) == "object") {
  
        if (_info instanceof WebCLPlatform) {
  
          var _id = CL.udid(_info);
          if (param_value != 0) HEAP32[((param_value)>>2)]=_id;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
        } else if (_info instanceof Array) {
  
          for (var i = 0; i < Math.min(param_value_size>>2,_info.length); i++) {
            var _id = CL.udid(_info[i]);
            if (param_value != 0) HEAP32[(((param_value)+(i*4))>>2)]=_id;
          }
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=_info.length*4;
  
        } else if (_info == null) {
  
          if (param_value != 0) HEAP32[((param_value)>>2)]=0;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=0;
  
        } else {
          return webcl.INVALID_VALUE;
        }
      } else {
        return webcl.INVALID_VALUE;
      }
  
      return webcl.SUCCESS;
    }

  function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function _pthread_cond_broadcast() {
      return 0;
    }

  function _pthread_mutex_unlock() {}

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _emscripten_landingpad=true;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = GL.getNewId(GL.textures);
        var texture = GLctx.createTexture();
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  
  var LOCALE={curr:0,check:function (locale) {
        if (locale) locale = Pointer_stringify(locale);
        return locale === 'C' || locale === 'POSIX' || !locale;
      }};
  
  function _calloc(n, s) {
      var ret = _malloc(n*s);
      _memset(ret, 0, n*s);
      return ret;
    }
  Module["_calloc"] = _calloc;function _newlocale(mask, locale, base) {
      if (!LOCALE.check(locale)) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      if (!base) base = _calloc(1, 4);
      return base;
    }

  var _emscripten_preinvoke=true;

  function ___gxx_personality_v0() {
    }

  function _pthread_cond_wait() {
      return 0;
    }

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = EXCEPTIONS.caught.pop();
      EXCEPTIONS.last = ptr;
      throw ptr;
    }

  function _clGetProgramBuildInfo(program,device,param_name,param_value_size,param_value,param_value_size_ret) {
  
      var _info = null;
  
      try {
  
  
        _info = CL.cl_objects[program].getBuildInfo(CL.cl_objects[device], param_name);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (param_value != 0) {
          HEAP32[((param_value)>>2)]=0;
        }
  
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=0;
        }
  
        return _error;
      }
  
      if(typeof(_info) == "number") {
  
        if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
      } else if(typeof(_info) == "string") {
        if (param_value != 0) {
          writeStringToMemory(_info, param_value);
        }
  
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=_info.length + 1;
        }
      } else {
        return webcl.INVALID_VALUE;
      }
  
      return webcl.SUCCESS;
    }

  function ___cxa_guard_release() {}

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  function _glTexCoordPointer(size, type, stride, pointer) {
      GLImmediate.setClientAttribute(GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture, size, type, stride, pointer);
      if (GL.currArrayBuffer) {
        var loc = GLImmediate.TEXTURE0 + GLImmediate.clientActiveTexture;
        GLctx.vertexAttribPointer(loc, size, type, false, stride, pointer);
      }
    }

  function _uselocale(locale) {
      var old = LOCALE.curr;
      if (locale) LOCALE.curr = locale;
      return old;
    }

  function _glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      assert(GL.currentContext.compressionExt);
      if (data) {
        data = HEAPU8.subarray((data),(data+imageSize));
      } else {
        data = null;
      }
      // N.b. using array notation explicitly to not confuse Closure minification.
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, data);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function ___errno_location() {
      return ___errno_state;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  function _clReleaseContext(context) {
  
  
      // If is an object retain don't release it until retains > 0...
      if (context in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[context] - 1;
  
        CL.cl_objects_retains[context] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
      try {
  
          CL.cl_objects[context].release();
          delete CL.cl_objects[context];
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  var _BItoD=true;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }


  function _glLoadMatrixf(matrix) {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.set(HEAPF32.subarray((matrix)>>2,(matrix+64)>>2), GLImmediate.matrix[GLImmediate.currentMatrix]);
    }


  
  function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _fgets(s, n, stream) {
      // char *fgets(char *restrict s, int n, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgets.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return 0;
      if (streamObj.error || streamObj.eof) return 0;
      var byte_;
      for (var i = 0; i < n - 1 && byte_ != 10; i++) {
        byte_ = _fgetc(stream);
        if (byte_ == -1) {
          if (streamObj.error || (streamObj.eof && i == 0)) return 0;
          else if (streamObj.eof) break;
        }
        HEAP8[(((s)+(i))>>0)]=byte_;
      }
      HEAP8[(((s)+(i))>>0)]=0;
      return s;
    }

  function _clCreateKernel(program,kernel_name,cl_errcode_ret) {
  
  
      var _id = null;
      var _kernel = null;
      var _name = (kernel_name == 0) ? "" : Pointer_stringify(kernel_name);
  
      // program must be created
      try {
  
  
        _kernel = CL.cl_objects[program].createKernel(_name);
  
        //Object.defineProperty(_kernel, "name", { value : _name,writable : false });
        //Object.defineProperty(_kernel, "sig", { value : CL.cl_kernels_sig[_name],writable : false });
        _kernel["name"] = _name;
        _kernel["sig"] = CL.cl_kernels_sig[_name];
  
        //Object.defineProperty(_kernel, "val_param", { value : CL.cl_validator[_name],writable : false });
        //Object.defineProperty(_kernel, "val_param_argsize", { value : CL.cl_validator_argsize[_name],writable : false });
        _kernel["val_param"] = CL.cl_validator[_name];
        _kernel["val_param_argsize"] = CL.CL.cl_validator_argsize[_name];
  
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_kernel);
  
  
      return _id;
    }

  function _emscripten_create_worker(url) {
      url = Pointer_stringify(url);
      var id = Browser.workers.length;
      var info = {
        worker: new Worker(url),
        callbacks: [],
        awaited: 0,
        buffer: 0,
        bufferSize: 0
      };
      info.worker.onmessage = function info_worker_onmessage(msg) {
        if (ABORT) return;
        var info = Browser.workers[id];
        if (!info) return; // worker was destroyed meanwhile
        var callbackId = msg.data['callbackId'];
        var callbackInfo = info.callbacks[callbackId];
        if (!callbackInfo) return; // no callback or callback removed meanwhile
        // Don't trash our callback state if we expect additional calls.
        if (msg.data['finalResponse']) {
          info.awaited--;
          info.callbacks[callbackId] = null; // TODO: reuse callbackIds, compress this
        }
        var data = msg.data['data'];
        if (data) {
          if (!data.byteLength) data = new Uint8Array(data);
          if (!info.buffer || info.bufferSize < data.length) {
            if (info.buffer) _free(info.buffer);
            info.bufferSize = data.length;
            info.buffer = _malloc(data.length);
          }
          HEAPU8.set(data, info.buffer);
          callbackInfo.func(info.buffer, data.length, callbackInfo.arg);
        } else {
          callbackInfo.func(0, 0, callbackInfo.arg);
        }
      };
      Browser.workers.push(info);
      return id;
    }

  function _emscripten_call_worker(id, funcName, data, size, callback, arg) {
      Module['noExitRuntime'] = true; // should we only do this if there is a callback?
  
      funcName = Pointer_stringify(funcName);
      var info = Browser.workers[id];
      var callbackId = -1;
      if (callback) {
        callbackId = info.callbacks.length;
        info.callbacks.push({
          func: Runtime.getFuncWrapper(callback, 'viii'),
          arg: arg
        });
        info.awaited++;
      }
      info.worker.postMessage({
        'funcName': funcName,
        'callbackId': callbackId,
        'data': data ? new Uint8Array(HEAPU8.subarray((data),(data + size))) : 0 // XXX copy to a new typed array as a workaround for chrome bug 169705
      });
    }

  function _SDL_SetVideoMode(width, height, depth, flags) {
      ['touchstart', 'touchend', 'touchmove', 'mousedown', 'mouseup', 'mousemove', 'DOMMouseScroll', 'mousewheel', 'wheel', 'mouseout'].forEach(function(event) {
        Module['canvas'].addEventListener(event, SDL.receiveEvent, true);
      });
  
      var canvas = Module['canvas'];
  
      // (0,0) means 'use fullscreen' in native; in Emscripten, use the current canvas size.
      if (width == 0 && height == 0) {
        width = canvas.width;
        height = canvas.height;
      }
  
      if (!SDL.addedResizeListener) {
        SDL.addedResizeListener = true;
        Browser.resizeListeners.push(function(w, h) {
          if (!SDL.settingVideoMode) {
            SDL.receiveEvent({
              type: 'resize',
              w: w,
              h: h
            });
          }
        });
      }
  
      if (width !== canvas.width || height !== canvas.height) {
        SDL.settingVideoMode = true; // SetVideoMode itself should not trigger resize events
        Browser.setCanvasSize(width, height);
        SDL.settingVideoMode = false;
      }
  
      // Free the old surface first if there is one
      if (SDL.screen) {
        SDL.freeSurface(SDL.screen);
        assert(!SDL.screen);
      }
  
      if (SDL.GL) flags = flags | 0x04000000; // SDL_OPENGL - if we are using GL, then later calls to SetVideoMode may not mention GL, but we do need it. Once in GL mode, we never leave it.
  
      SDL.screen = SDL.makeSurface(width, height, flags, true, 'screen');
  
      return SDL.screen;
    }

  function _clCreateProgramWithSource(context,count,strings,lengths,cl_errcode_ret) {
  
  
      var _id = null;
      var _program = null;
  
      // Context must be created
  
      try {
  
        var _string = "";
  
        for (var i = 0; i < count; i++) {
          if (lengths) {
            var _len = HEAP32[(((lengths)+(i*4))>>2)];
            if (_len < 0) {
              _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)]);
            } else {
              _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)], _len);
            }
          } else {
            _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)]);
          }
        }
  
        CL.parseKernel(_string);
  
  
        _program = CL.cl_objects[context].createProgram(_string);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_program);
  
  
      return _id;
    }

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;


  var _fabs=Math_abs;

  
  function _clEnqueueWriteBuffer(command_queue,buffer,blocking_write,offset,cb,ptr,num_events_in_wait_list,event_wait_list,event) {
  
      var _event = null;
      var _block = blocking_write ? true : false;
      var _event_wait_list = [];
      var _host_ptr = CL.getCopyPointerToArray(ptr,cb,CL.cl_pn_type);
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      }
  
      try {
  
        if (event != 0) {
          _event = new WebCLEvent();
        }
  
        CL.cl_objects[command_queue].enqueueWriteBuffer(CL.cl_objects[buffer],_block,offset,cb,_host_ptr,_event_wait_list,_event);
  
        if (event != 0) {
          HEAP32[((event)>>2)]=CL.udid(_event);
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
    }function _clCreateBuffer(context,flags_i64_1,flags_i64_2,size,host_ptr,cl_errcode_ret) {
      // Assume the flags is i32
      assert(flags_i64_2 == 0, 'Invalid flags i64');
  
  
      var _id = null;
      var _buffer = null;
  
      // Context must be created
  
      var _flags;
  
      if (flags_i64_1 & webcl.MEM_READ_WRITE) {
        _flags = webcl.MEM_READ_WRITE;
      } else if (flags_i64_1 & webcl.MEM_WRITE_ONLY) {
        _flags = webcl.MEM_WRITE_ONLY;
      } else if (flags_i64_1 & webcl.MEM_READ_ONLY) {
        _flags = webcl.MEM_READ_ONLY;
      } else {
        _flags |= webcl.MEM_READ_WRITE;
      }
  
      var _host_ptr = null;
  
      if ( host_ptr != 0 ) _host_ptr = CL.getCopyPointerToArray(host_ptr,size,CL.cl_pn_type);
      else if (
        (flags_i64_1 & (1 << 4) /* CL_MEM_ALLOC_HOST_PTR  */) ||
        (flags_i64_1 & (1 << 5) /* CL_MEM_COPY_HOST_PTR   */) ||
        (flags_i64_1 & (1 << 3) /* CL_MEM_USE_HOST_PTR    */)
        ) {
        _host_ptr = CL.getHostPtrArray(size,CL.cl_pn_type);
      }
  
      try {
  
  
        if (_host_ptr != null) {
          _buffer = CL.cl_objects[context].createBuffer(_flags,size,_host_ptr);
        } else
          _buffer = CL.cl_objects[context].createBuffer(_flags,size);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      // Add flags property
      //Object.defineProperty(_buffer, "flags", { value : flags_i64_1,writable : false });
      _buffer["flags"] = flags_i64_1;
      _id = CL.udid(_buffer);
  
      // \todo need to be remove when firefox will be support hot_ptr
      /**** **** **** **** **** **** **** ****
      if (_host_ptr != null) {
        if (navigator.userAgent.toLowerCase().indexOf('firefox') != -1) {
          // Search command
          var commandqueue = null;
          for (var obj in CL.cl_objects) {
            if (CL.cl_objects[obj] instanceof WebCLCommandQueue) {
              commandqueue = CL.cl_objects[obj];
              break;
            }
          }
  
          if (commandqueue != null) {
            _clEnqueueWriteBuffer(obj,_id,true,0,size,host_ptr,0,0,0);
          } else {
            if (cl_errcode_ret != 0) {
              HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_VALUE;
            }
  
            return 0;
          }
        }
      }
      **** **** **** **** **** **** **** ****/
  
  
      return _id;
    }

  function ___cxa_guard_abort() {}

  
  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }function _ftello() {
  return _ftell.apply(null, arguments)
  }

  function _getc() {
  return _fgetc.apply(null, arguments)
  }

  function _glDisableClientState(cap) {
      var attrib = GLEmulation.getAttributeFromCapability(cap);
      if (attrib === null) {
        Module.printErr('WARNING: unhandled clientstate: ' + cap);
        return;
      }
      if (GLImmediate.enabledClientAttributes[attrib]) {
        GLImmediate.enabledClientAttributes[attrib] = false;
        GLImmediate.totalEnabledClientAttributes--;
        GLImmediate.currentRenderer = null; // Will need to change current renderer, since the set of active vertex pointers changed.
        // In GL_FFP_ONLY mode, attributes are bound to the same index in each FFP emulation shader, so we can immediately apply the change here.
        GL.disableVertexAttribArray(attrib);
        if (GLEmulation.currentVao) delete GLEmulation.currentVao.enabledClientStates[cap];
        GLImmediate.modifiedClientAttributes = true;
      }
    }

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }function _copysignl() {
  return _copysign.apply(null, arguments)
  }

  function _clCreateCommandQueue(context,device,properties_1,properties_2,cl_errcode_ret) {
      // Assume the properties is i32
      assert(properties_2 == 0, 'Invalid properties i64');
  
  
      var _id = null;
      var _command = null;
  
      // Context must be created
  
      // Context must be created
  
      try {
  
  
        _command = CL.cl_objects[context].createCommandQueue(CL.cl_objects[device],properties_1);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_command);
  
  
      return _id;
    }



  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function _clGetProgramInfo(program,param_name,param_value_size,param_value,param_value_size_ret) {
  
      var _info = null;
  
      try {
        if (param_name == 0x1160 /* CL_PROGRAM_REFERENCE_COUNT */) {
          _info = 0;
  
          if (program in CL.cl_objects) {
            _info++;
          }
  
          if (program in CL.cl_objects_retains) {
            _info+=CL.cl_objects_retains[program];
          }
  
        } else {
          _info = CL.cl_objects[program].getInfo(param_name);
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (param_value != 0) {
          HEAP32[((param_value)>>2)]=0;
        }
  
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=0;
        }
  
        return _error;
      }
  
      if(typeof(_info) == "number") {
  
        if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
      } else if(typeof(_info) == "string") {
        if (param_value != 0) {
          writeStringToMemory(_info, param_value);
        }
  
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=_info.length + 1;
        }
      } else if(typeof(_info) == "object") {
  
        if (_info instanceof WebCLContext) {
  
          var _id = CL.udid(_info);
          if (param_value != 0) HEAP32[((param_value)>>2)]=_id;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
        } else if (_info instanceof Array) {
  
          for (var i = 0; i < Math.min(param_value_size>>2,_info.length); i++) {
            var _id = CL.udid(_info[i]);
            if (param_value != 0) HEAP32[(((param_value)+(i*4))>>2)]=_id;
          }
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=_info.length * 4;
  
        } else if (_info == null) {
  
          if (param_value != 0) HEAP32[((param_value)>>2)]=0;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=0;
  
        } else {
          return webcl.INVALID_VALUE;
        }
      } else {
        return webcl.INVALID_VALUE;
      }
  
      return webcl.SUCCESS;
    }

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _glLoadIdentity() {
      GLImmediate.matricesModified = true;
      GLImmediate.matrixVersion[GLImmediate.currentMatrix] = (GLImmediate.matrixVersion[GLImmediate.currentMatrix] + 1)|0;
      GLImmediate.matrixLib.mat4.identity(GLImmediate.matrix[GLImmediate.currentMatrix]);
    }

  function _freelocale(locale) {
      _free(locale);
    }

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  function _fmod(x, y) {
      return x % y;
    }function _fmodl() {
  return _fmod.apply(null, arguments)
  }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  function _SDL_GL_SetAttribute(attr, value) {
      if (!(attr in SDL.glAttributes)) {
        abort('Unknown SDL GL attribute (' + attr + '). Please check if your SDL version is supported.');
      }
  
      SDL.glAttributes[attr] = value;
    }

  function _glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }

  function _ferror(stream) {
      // int ferror(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.error);
    }

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _glEnableClientState(cap) {
      var attrib = GLEmulation.getAttributeFromCapability(cap);
      if (attrib === null) {
        Module.printErr('WARNING: unhandled clientstate: ' + cap);
        return;
      }
      if (!GLImmediate.enabledClientAttributes[attrib]) {
        GLImmediate.enabledClientAttributes[attrib] = true;
        GLImmediate.totalEnabledClientAttributes++;
        GLImmediate.currentRenderer = null; // Will need to change current renderer, since the set of active vertex pointers changed.
        // In GL_FFP_ONLY mode, attributes are bound to the same index in each FFP emulation shader, so we can immediately apply the change here.
        GL.enableVertexAttribArray(attrib);
        if (GLEmulation.currentVao) GLEmulation.currentVao.enabledClientStates[cap] = 1;
        GLImmediate.modifiedClientAttributes = true;
      }
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function _llvm_eh_typeid_for(type) {
      return type;
    }



  function _SDL_GL_SwapBuffers() {
      if (Browser.doSwapBuffers) Browser.doSwapBuffers(); // in workers, this is used to send out a buffered frame
    }

  
  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }function _fseeko() {
  return _fseek.apply(null, arguments)
  }

  function _clSetTypePointer(pn_type, num_pn_type) {
      /*pn_type : CL_SIGNED_INT8,CL_SIGNED_INT16,CL_SIGNED_INT32,CL_UNSIGNED_INT8,CL_UNSIGNED_INT16,CL_UNSIGNED_INT32,CL_FLOAT*/
  
      // Clean
      CL.cl_pn_type = [];
  
  
      var _old_pn_type = -1;
      var _num_pn_type = 0;
      for (var i = 0; i < num_pn_type ; i++) {
        var _pn_type = HEAP32[(((pn_type)+(i*4))>>2)]
  
        if (_pn_type != _old_pn_type) {
          if (_num_pn_type > 0)
            CL.cl_pn_type.push([_old_pn_type,_num_pn_type]);
  
          _old_pn_type = _pn_type;
          _num_pn_type = 1;
        } else {
          _num_pn_type ++;
        }
  
  
      }
  
      if (_num_pn_type > 0)
        CL.cl_pn_type.push([_old_pn_type,_num_pn_type]);
  
  
      return webcl.SUCCESS;
    }

  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }

  function _SDL_Init(initFlags) {
      SDL.startTime = Date.now();
      SDL.initFlags = initFlags;
  
      // capture all key events. we just keep down and up, but also capture press to prevent default actions
      if (!Module['doNotCaptureKeyboard']) {
        var keyboardListeningElement = Module['keyboardListeningElement'] || document;
        keyboardListeningElement.addEventListener("keydown", SDL.receiveEvent);
        keyboardListeningElement.addEventListener("keyup", SDL.receiveEvent);
        keyboardListeningElement.addEventListener("keypress", SDL.receiveEvent);
        window.addEventListener("focus", SDL.receiveEvent);
        window.addEventListener("blur", SDL.receiveEvent);
        document.addEventListener("visibilitychange", SDL.receiveEvent);
      }
  
      if (initFlags & 0x200) {
        // SDL_INIT_JOYSTICK
        // Firefox will not give us Joystick data unless we register this NOP
        // callback.
        // https://bugzilla.mozilla.org/show_bug.cgi?id=936104
        addEventListener("gamepadconnected", function() {});
      }
  
      window.addEventListener("unload", SDL.receiveEvent);
      SDL.keyboardState = _malloc(0x10000); // Our SDL needs 512, but 64K is safe for older SDLs
      _memset(SDL.keyboardState, 0, 0x10000);
      // Initialize this structure carefully for closure
      SDL.DOMEventToSDLEvent['keydown']    = 0x300  /* SDL_KEYDOWN */;
      SDL.DOMEventToSDLEvent['keyup']      = 0x301  /* SDL_KEYUP */;
      SDL.DOMEventToSDLEvent['keypress']   = 0x303  /* SDL_TEXTINPUT */;
      SDL.DOMEventToSDLEvent['mousedown']  = 0x401  /* SDL_MOUSEBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['mouseup']    = 0x402  /* SDL_MOUSEBUTTONUP */;
      SDL.DOMEventToSDLEvent['mousemove']  = 0x400  /* SDL_MOUSEMOTION */;
      SDL.DOMEventToSDLEvent['wheel']      = 0x403  /* SDL_MOUSEWHEEL */; 
      SDL.DOMEventToSDLEvent['touchstart'] = 0x700  /* SDL_FINGERDOWN */;
      SDL.DOMEventToSDLEvent['touchend']   = 0x701  /* SDL_FINGERUP */;
      SDL.DOMEventToSDLEvent['touchmove']  = 0x702  /* SDL_FINGERMOTION */;
      SDL.DOMEventToSDLEvent['unload']     = 0x100  /* SDL_QUIT */;
      SDL.DOMEventToSDLEvent['resize']     = 0x7001 /* SDL_VIDEORESIZE/SDL_EVENT_COMPAT2 */;
      SDL.DOMEventToSDLEvent['visibilitychange'] = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['focus']      = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['blur']       = 0x200 /* SDL_WINDOWEVENT */;
  
      // These are not technically DOM events; the HTML gamepad API is poll-based.
      // However, we define them here, as the rest of the SDL code assumes that
      // all SDL events originate as DOM events.
      SDL.DOMEventToSDLEvent['joystick_axis_motion'] = 0x600 /* SDL_JOYAXISMOTION */;
      SDL.DOMEventToSDLEvent['joystick_button_down'] = 0x603 /* SDL_JOYBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['joystick_button_up'] = 0x604 /* SDL_JOYBUTTONUP */;
      return 0; // success
    }

  function _glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }

  function _glMatrixMode(mode) {
      if (mode == 0x1700 /* GL_MODELVIEW */) {
        GLImmediate.currentMatrix = 0/*m*/;
      } else if (mode == 0x1701 /* GL_PROJECTION */) {
        GLImmediate.currentMatrix = 1/*p*/;
      } else if (mode == 0x1702) { // GL_TEXTURE
        GLImmediate.useTextureMatrix = true;
        GLImmediate.currentMatrix = 2/*t*/ + GLImmediate.clientActiveTexture;
      } else {
        throw "Wrong mode " + mode + " passed to glMatrixMode";
      }
    }


  function _clFinish(command_queue) {
  
  
      try {
  
        CL.cl_objects[command_queue].finish();
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

   
  Module["_strcpy"] = _strcpy;

  function _clBuildProgram(program,num_devices,device_list,options,pfn_notify,user_data) {
  
      try {
  
        var _devices = [];
        var _option = (options == 0) ? "" : Pointer_stringify(options);
  
        if (_option) {
          // Add space after -D
          _option = _option.replace(/-D/g, "-D ");
  
          // Remove all the multispace
          _option = _option.replace(/\s{2,}/g, " ");
        }
  
        if (device_list != 0 && num_devices > 0 ) {
          for (var i = 0; i < num_devices ; i++) {
            var _device = HEAP32[(((device_list)+(i*4))>>2)]
              _devices.push(CL.cl_objects[_device]);
          }
        }
  
        // If device_list is NULL value, the program executable is built for all devices associated with program.
        if (_devices.length == 0) {
          var _num_devices = CL.cl_objects[program].getInfo(webcl.PROGRAM_NUM_DEVICES);
  
          _devices = CL.cl_objects[program].getInfo(webcl.PROGRAM_DEVICES);
  
          _devices = _devices.slice(0,_num_devices);
        }
  
        var _callback = null
        if (pfn_notify != 0) {
          /**
           * Description
           * @return
           */
          _callback = function() {
            console.info("\nCall ( clBuildProgram ) callback function : FUNCTION_TABLE["+pfn_notify+"]("+program+", "+user_data+")");
            FUNCTION_TABLE[pfn_notify](program, user_data)
          };
        }
  
  
        CL.cl_objects[program].build(_devices,_option,_callback);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
  
    }

  function _clCreateContextFromType(properties,device_type_i64_1,device_type_i64_2,pfn_notify,user_data,cl_errcode_ret) {
      // Assume the device_type is i32
      assert(device_type_i64_2 == 0, 'Invalid device_type i64');
  
  
      // Init webcl variable if necessary
      if (CL.init() == 0) {
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_VALUE;
        }
  
        return 0; // NULL Pointer
      }
  
      var _id = null;
      var _context = null;
  
      try {
  
        var _platform = null;
        var _deviceType = device_type_i64_1;
        var _glclSharedContext = false;
        var _properties = [];
  
        // Verify the property
        if (properties != 0) {
          var _propertiesCounter = 0;
          while(1) {
            var _readprop = HEAP32[(((properties)+(_propertiesCounter*4))>>2)];
            _properties.push(_readprop);
  
            if (_readprop == 0) break;
  
            switch (_readprop) {
              case webcl.CONTEXT_PLATFORM:
                _propertiesCounter ++;
                var _idxPlatform = HEAP32[(((properties)+(_propertiesCounter*4))>>2)];
                _properties.push(_idxPlatform);
  
                  _platform = CL.cl_objects[_idxPlatform];
                break;
  
              // /!\ This part, it's for the CL_GL_Interop
              case (0x200B) /*CL_WGL_HDC_KHR*/:
              case (0x200A) /*CL_GLX_DISPLAY_KHR*/:
              case (0x2008) /*CL_GL_CONTEXT_KHR*/:
              case (0x200C) /*CL_CGL_SHAREGROUP_KHR*/:
                _propertiesCounter ++;
                _glclSharedContext = true;
                break;
  
              default:
                if (cl_errcode_ret != 0) {
                  HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_PROPERTY;
                }
  
                return 0;
            };
  
            _propertiesCounter ++;
          }
        }
  
        if (_deviceType != 0 && _platform != null) {
  
          if (_glclSharedContext && (navigator.userAgent.toLowerCase().indexOf('firefox') == -1) ) {
            _context = webcl.createContext(Module.ctx, _platform,_deviceType);
          } else {
            _context = webcl.createContext(_platform,_deviceType);
          }
  
        } else if (_deviceType != 0) {
  
          if (_glclSharedContext && (navigator.userAgent.toLowerCase().indexOf('firefox') == -1) ) {
            _context = webcl.createContext(Module.ctx,_deviceType);
          } else {
            _context = webcl.createContext(_deviceType);
          }
  
        } else {
          if (cl_errcode_ret != 0) {
            HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_CONTEXT;
          }
  
          return 0; // NULL Pointer
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_context);
  
      // Add properties array for getInfo
      //Object.defineProperty(_context, "properties", { value : _properties,writable : false });
      _context["properties"] = _properties;
  
  
      return _id;
    }

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);




___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
var GLctx; GL.init()
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
GLEmulation.init();
GLImmediate.setupFuncs(); Browser.moduleContextCreatedCallbacks.push(function() { GLImmediate.init() });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
___buildEnvironment(ENV);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiid"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "min": Math_min, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_viiiiid": nullFunc_viiiiid, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiid": nullFunc_viiiiiid, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_diii": nullFunc_diii, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viiiiid": invoke_viiiiid, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiid": invoke_viiiiiid, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_diii": invoke_diii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_viiii": invoke_viiii, "_glUseProgram": _glUseProgram, "_fabs": _fabs, "_clReleaseProgram": _clReleaseProgram, "_fread": _fread, "___cxa_guard_acquire": ___cxa_guard_acquire, "_SDL_RWFromFile": _SDL_RWFromFile, "_clEnqueueNDRangeKernel": _clEnqueueNDRangeKernel, "___assert_fail": ___assert_fail, "_glDeleteProgram": _glDeleteProgram, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___ctype_toupper_loc": ___ctype_toupper_loc, "_glBindBuffer": _glBindBuffer, "__addDays": __addDays, "_ftell": _ftell, "_SDL_GetError": _SDL_GetError, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "_glDisableVertexAttribArray": _glDisableVertexAttribArray, "_Mix_PlayChannel": _Mix_PlayChannel, "_glCreateShader": _glCreateShader, "_sysconf": _sysconf, "_close": _close, "_ferror": _ferror, "_Mix_PlayMusic": _Mix_PlayMusic, "_clCreateCommandQueue": _clCreateCommandQueue, "_glLoadIdentity": _glLoadIdentity, "_IMG_Load": _IMG_Load, "_Mix_FreeChunk": _Mix_FreeChunk, "_write": _write, "__isLeapYear": __isLeapYear, "_fsync": _fsync, "_strerror": _strerror, "_glShaderSource": _glShaderSource, "___cxa_atexit": ___cxa_atexit, "___cxa_rethrow": ___cxa_rethrow, "_catclose": _catclose, "_glVertexPointer": _glVertexPointer, "_Mix_HaltMusic": _Mix_HaltMusic, "_TTF_FontHeight": _TTF_FontHeight, "_fmodl": _fmodl, "__formatString": __formatString, "_glVertexAttribPointer": _glVertexAttribPointer, "_glHint": _glHint, "_uselocale": _uselocale, "_SDL_GL_SetAttribute": _SDL_GL_SetAttribute, "_clReleaseKernel": _clReleaseKernel, "_clSetTypePointer": _clSetTypePointer, "_SDL_GetTicks": _SDL_GetTicks, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_strftime": _strftime, "_clGetProgramBuildInfo": _clGetProgramBuildInfo, "___cxa_guard_release": ___cxa_guard_release, "_SDL_LockSurface": _SDL_LockSurface, "_strerror_r": _strerror_r, "_glViewport": _glViewport, "_glGetBooleanv": _glGetBooleanv, "___setErrNo": ___setErrNo, "_newlocale": _newlocale, "___resumeException": ___resumeException, "_clCreateProgramWithSource": _clCreateProgramWithSource, "_freelocale": _freelocale, "___cxa_call_unexpected": ___cxa_call_unexpected, "_glEnable": _glEnable, "_printf": _printf, "_glGenTextures": _glGenTextures, "_clReleaseCommandQueue": _clReleaseCommandQueue, "_glGetIntegerv": _glGetIntegerv, "_glGetString": _glGetString, "_glAttachShader": _glAttachShader, "_emscripten_create_worker": _emscripten_create_worker, "_mkport": _mkport, "_read": _read, "_clSetKernelArg": _clSetKernelArg, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_glDetachShader": _glDetachShader, "_gettimeofday": _gettimeofday, "_SDL_UpperBlitScaled": _SDL_UpperBlitScaled, "_catopen": _catopen, "_exit": _exit, "___cxa_guard_abort": ___cxa_guard_abort, "_putenv": _putenv, "_glLoadMatrixf": _glLoadMatrixf, "___ctype_b_loc": ___ctype_b_loc, "_fmod": _fmod, "_lseek": _lseek, "_vfprintf": _vfprintf, "_clGetDeviceInfo": _clGetDeviceInfo, "___cxa_allocate_exception": ___cxa_allocate_exception, "___buildEnvironment": ___buildEnvironment, "_glCompressedTexImage2D": _glCompressedTexImage2D, "_glEnableClientState": _glEnableClientState, "_pwrite": _pwrite, "_clGetProgramInfo": _clGetProgramInfo, "_glBindTexture": _glBindTexture, "_open": _open, "_glClearColor": _glClearColor, "_pthread_once": _pthread_once, "_glIsEnabled": _glIsEnabled, "_SDL_Init": _SDL_Init, "_clReleaseMemObject": _clReleaseMemObject, "___cxa_end_catch": ___cxa_end_catch, "_glGetFloatv": _glGetFloatv, "___cxa_begin_catch": ___cxa_begin_catch, "_pthread_getspecific": _pthread_getspecific, "_glDrawArrays": _glDrawArrays, "_TTF_RenderText_Solid": _TTF_RenderText_Solid, "_clFinish": _clFinish, "_glGetError": _glGetError, "_fseek": _fseek, "_send": _send, "_getenv": _getenv, "_fclose": _fclose, "_pthread_key_create": _pthread_key_create, "_glActiveTexture": _glActiveTexture, "_pthread_cond_broadcast": _pthread_cond_broadcast, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_clCreateBuffer": _clCreateBuffer, "_glTexCoordPointer": _glTexCoordPointer, "_recv": _recv, "_fgetc": _fgetc, "_glCompileShader": _glCompileShader, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_abort": _abort, "_clBuildProgram": _clBuildProgram, "_fopen": _fopen, "_clGetContextInfo": _clGetContextInfo, "_clCreateKernel": _clCreateKernel, "_glDisableClientState": _glDisableClientState, "_putc": _putc, "_pthread_cond_wait": _pthread_cond_wait, "_emscripten_call_worker": _emscripten_call_worker, "_SDL_SetVideoMode": _SDL_SetVideoMode, "_clReleaseContext": _clReleaseContext, "_SDL_CloseAudio": _SDL_CloseAudio, "___gxx_personality_v0": ___gxx_personality_v0, "_ungetc": _ungetc, "_glMatrixMode": _glMatrixMode, "_clEnqueueWriteBuffer": _clEnqueueWriteBuffer, "_glLinkProgram": _glLinkProgram, "_SDL_FreeRW": _SDL_FreeRW, "_strftime_l": _strftime_l, "_pthread_mutex_lock": _pthread_mutex_lock, "__reallyNegative": __reallyNegative, "_llvm_eh_typeid_for": _llvm_eh_typeid_for, "_catgets": _catgets, "_glTexParameteri": _glTexParameteri, "_glClear": _glClear, "_fileno": _fileno, "_Mix_LoadWAV_RW": _Mix_LoadWAV_RW, "__exit": __exit, "_IMG_Load_RW": _IMG_Load_RW, "_glBindAttribLocation": _glBindAttribLocation, "__arraySum": __arraySum, "_fseeko": _fseeko, "_calloc": _calloc, "___ctype_tolower_loc": ___ctype_tolower_loc, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_pread": _pread, "_TTF_SizeText": _TTF_SizeText, "_getc": _getc, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fflush": _fflush, "_clEnqueueReadBuffer": _clEnqueueReadBuffer, "___errno_location": ___errno_location, "_pthread_setspecific": _pthread_setspecific, "_copysign": _copysign, "_fputc": _fputc, "___cxa_throw": ___cxa_throw, "_SDL_PauseAudio": _SDL_PauseAudio, "_copysignl": _copysignl, "_SDL_GL_SwapBuffers": _SDL_GL_SwapBuffers, "_glDisable": _glDisable, "_clCreateContextFromType": _clCreateContextFromType, "_ftello": _ftello, "_fgets": _fgets, "_atexit": _atexit, "_SDL_UpperBlit": _SDL_UpperBlit, "_SDL_RWFromConstMem": _SDL_RWFromConstMem, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var nullFunc_viiiiid=env.nullFunc_viiiiid;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiid=env.nullFunc_viiiiiid;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var invoke_viiiiid=env.invoke_viiiiid;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiid=env.invoke_viiiiiid;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_diii=env.invoke_diii;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _glUseProgram=env._glUseProgram;
  var _fabs=env._fabs;
  var _clReleaseProgram=env._clReleaseProgram;
  var _fread=env._fread;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var _SDL_RWFromFile=env._SDL_RWFromFile;
  var _clEnqueueNDRangeKernel=env._clEnqueueNDRangeKernel;
  var ___assert_fail=env.___assert_fail;
  var _glDeleteProgram=env._glDeleteProgram;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___ctype_toupper_loc=env.___ctype_toupper_loc;
  var _glBindBuffer=env._glBindBuffer;
  var __addDays=env.__addDays;
  var _ftell=env._ftell;
  var _SDL_GetError=env._SDL_GetError;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _glDisableVertexAttribArray=env._glDisableVertexAttribArray;
  var _Mix_PlayChannel=env._Mix_PlayChannel;
  var _glCreateShader=env._glCreateShader;
  var _sysconf=env._sysconf;
  var _close=env._close;
  var _ferror=env._ferror;
  var _Mix_PlayMusic=env._Mix_PlayMusic;
  var _clCreateCommandQueue=env._clCreateCommandQueue;
  var _glLoadIdentity=env._glLoadIdentity;
  var _IMG_Load=env._IMG_Load;
  var _Mix_FreeChunk=env._Mix_FreeChunk;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var _fsync=env._fsync;
  var _strerror=env._strerror;
  var _glShaderSource=env._glShaderSource;
  var ___cxa_atexit=env.___cxa_atexit;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var _catclose=env._catclose;
  var _glVertexPointer=env._glVertexPointer;
  var _Mix_HaltMusic=env._Mix_HaltMusic;
  var _TTF_FontHeight=env._TTF_FontHeight;
  var _fmodl=env._fmodl;
  var __formatString=env.__formatString;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _glHint=env._glHint;
  var _uselocale=env._uselocale;
  var _SDL_GL_SetAttribute=env._SDL_GL_SetAttribute;
  var _clReleaseKernel=env._clReleaseKernel;
  var _clSetTypePointer=env._clSetTypePointer;
  var _SDL_GetTicks=env._SDL_GetTicks;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _strftime=env._strftime;
  var _clGetProgramBuildInfo=env._clGetProgramBuildInfo;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _SDL_LockSurface=env._SDL_LockSurface;
  var _strerror_r=env._strerror_r;
  var _glViewport=env._glViewport;
  var _glGetBooleanv=env._glGetBooleanv;
  var ___setErrNo=env.___setErrNo;
  var _newlocale=env._newlocale;
  var ___resumeException=env.___resumeException;
  var _clCreateProgramWithSource=env._clCreateProgramWithSource;
  var _freelocale=env._freelocale;
  var ___cxa_call_unexpected=env.___cxa_call_unexpected;
  var _glEnable=env._glEnable;
  var _printf=env._printf;
  var _glGenTextures=env._glGenTextures;
  var _clReleaseCommandQueue=env._clReleaseCommandQueue;
  var _glGetIntegerv=env._glGetIntegerv;
  var _glGetString=env._glGetString;
  var _glAttachShader=env._glAttachShader;
  var _emscripten_create_worker=env._emscripten_create_worker;
  var _mkport=env._mkport;
  var _read=env._read;
  var _clSetKernelArg=env._clSetKernelArg;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _glDetachShader=env._glDetachShader;
  var _gettimeofday=env._gettimeofday;
  var _SDL_UpperBlitScaled=env._SDL_UpperBlitScaled;
  var _catopen=env._catopen;
  var _exit=env._exit;
  var ___cxa_guard_abort=env.___cxa_guard_abort;
  var _putenv=env._putenv;
  var _glLoadMatrixf=env._glLoadMatrixf;
  var ___ctype_b_loc=env.___ctype_b_loc;
  var _fmod=env._fmod;
  var _lseek=env._lseek;
  var _vfprintf=env._vfprintf;
  var _clGetDeviceInfo=env._clGetDeviceInfo;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___buildEnvironment=env.___buildEnvironment;
  var _glCompressedTexImage2D=env._glCompressedTexImage2D;
  var _glEnableClientState=env._glEnableClientState;
  var _pwrite=env._pwrite;
  var _clGetProgramInfo=env._clGetProgramInfo;
  var _glBindTexture=env._glBindTexture;
  var _open=env._open;
  var _glClearColor=env._glClearColor;
  var _pthread_once=env._pthread_once;
  var _glIsEnabled=env._glIsEnabled;
  var _SDL_Init=env._SDL_Init;
  var _clReleaseMemObject=env._clReleaseMemObject;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _glGetFloatv=env._glGetFloatv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _pthread_getspecific=env._pthread_getspecific;
  var _glDrawArrays=env._glDrawArrays;
  var _TTF_RenderText_Solid=env._TTF_RenderText_Solid;
  var _clFinish=env._clFinish;
  var _glGetError=env._glGetError;
  var _fseek=env._fseek;
  var _send=env._send;
  var _getenv=env._getenv;
  var _fclose=env._fclose;
  var _pthread_key_create=env._pthread_key_create;
  var _glActiveTexture=env._glActiveTexture;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _clCreateBuffer=env._clCreateBuffer;
  var _glTexCoordPointer=env._glTexCoordPointer;
  var _recv=env._recv;
  var _fgetc=env._fgetc;
  var _glCompileShader=env._glCompileShader;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _abort=env._abort;
  var _clBuildProgram=env._clBuildProgram;
  var _fopen=env._fopen;
  var _clGetContextInfo=env._clGetContextInfo;
  var _clCreateKernel=env._clCreateKernel;
  var _glDisableClientState=env._glDisableClientState;
  var _putc=env._putc;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _emscripten_call_worker=env._emscripten_call_worker;
  var _SDL_SetVideoMode=env._SDL_SetVideoMode;
  var _clReleaseContext=env._clReleaseContext;
  var _SDL_CloseAudio=env._SDL_CloseAudio;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _ungetc=env._ungetc;
  var _glMatrixMode=env._glMatrixMode;
  var _clEnqueueWriteBuffer=env._clEnqueueWriteBuffer;
  var _glLinkProgram=env._glLinkProgram;
  var _SDL_FreeRW=env._SDL_FreeRW;
  var _strftime_l=env._strftime_l;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var __reallyNegative=env.__reallyNegative;
  var _llvm_eh_typeid_for=env._llvm_eh_typeid_for;
  var _catgets=env._catgets;
  var _glTexParameteri=env._glTexParameteri;
  var _glClear=env._glClear;
  var _fileno=env._fileno;
  var _Mix_LoadWAV_RW=env._Mix_LoadWAV_RW;
  var __exit=env.__exit;
  var _IMG_Load_RW=env._IMG_Load_RW;
  var _glBindAttribLocation=env._glBindAttribLocation;
  var __arraySum=env.__arraySum;
  var _fseeko=env._fseeko;
  var _calloc=env._calloc;
  var ___ctype_tolower_loc=env.___ctype_tolower_loc;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pread=env._pread;
  var _TTF_SizeText=env._TTF_SizeText;
  var _getc=env._getc;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fflush=env._fflush;
  var _clEnqueueReadBuffer=env._clEnqueueReadBuffer;
  var ___errno_location=env.___errno_location;
  var _pthread_setspecific=env._pthread_setspecific;
  var _copysign=env._copysign;
  var _fputc=env._fputc;
  var ___cxa_throw=env.___cxa_throw;
  var _SDL_PauseAudio=env._SDL_PauseAudio;
  var _copysignl=env._copysignl;
  var _SDL_GL_SwapBuffers=env._SDL_GL_SwapBuffers;
  var _glDisable=env._glDisable;
  var _clCreateContextFromType=env._clCreateContextFromType;
  var _ftello=env._ftello;
  var _fgets=env._fgets;
  var _atexit=env._atexit;
  var _SDL_UpperBlit=env._SDL_UpperBlit;
  var _SDL_RWFromConstMem=env._SDL_RWFromConstMem;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _oclPrintDevInfo($iLogMode,$device) {
 $iLogMode = $iLogMode|0;
 $device = $device|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, $addr_bits = 0, $clock_frequency = 0, $compute_capability_major = 0, $compute_capability_minor = 0, $compute_units = 0, $device_string = 0, $error_correction_support = 0, $exec_timeout = 0, $gpu_overlap = 0, $image_support = 0, $integrated_memory = 0, $local_mem_type = 0, $max_mem_alloc_size = 0, $max_read_image_args = 0;
 var $max_write_image_args = 0, $mem_size = 0, $nv_device_attibute_query = 0, $queue_properties = 0, $regs_per_block = 0, $stdDevString = 0, $szMaxDims = 0, $szOldPos = 0, $szSpacePos = 0, $type = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer100 = 0, $vararg_buffer103 = 0, $vararg_buffer106 = 0, $vararg_buffer109 = 0, $vararg_buffer112 = 0, $vararg_buffer115 = 0, $vararg_buffer117 = 0;
 var $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer4 = 0, $vararg_buffer42 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer51 = 0, $vararg_buffer54 = 0, $vararg_buffer57 = 0, $vararg_buffer60 = 0, $vararg_buffer63 = 0, $vararg_buffer66 = 0, $vararg_buffer69 = 0;
 var $vararg_buffer7 = 0, $vararg_buffer72 = 0, $vararg_buffer74 = 0, $vararg_buffer77 = 0, $vararg_buffer80 = 0, $vararg_buffer83 = 0, $vararg_buffer86 = 0, $vararg_buffer89 = 0, $vararg_buffer91 = 0, $vararg_buffer93 = 0, $vararg_buffer96 = 0, $vararg_ptr120 = 0, $vararg_ptr121 = 0, $vararg_ptr122 = 0, $vararg_ptr123 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr99 = 0, $vec_width = 0, $warp_size = 0;
 var $workgroup_size = 0, $workitem_dims = 0, $workitem_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1856|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer117 = sp + 112|0;
 $vararg_buffer115 = sp + 288|0;
 $vararg_buffer112 = sp + 328|0;
 $vararg_buffer109 = sp + 320|0;
 $vararg_buffer106 = sp + 264|0;
 $vararg_buffer103 = sp + 368|0;
 $vararg_buffer100 = sp + 184|0;
 $vararg_buffer96 = sp + 144|0;
 $vararg_buffer93 = sp + 136|0;
 $vararg_buffer91 = sp + 304|0;
 $vararg_buffer89 = sp + 248|0;
 $vararg_buffer86 = sp + 312|0;
 $vararg_buffer83 = sp + 96|0;
 $vararg_buffer80 = sp + 216|0;
 $vararg_buffer77 = sp + 32|0;
 $vararg_buffer74 = sp + 80|0;
 $vararg_buffer72 = sp + 192|0;
 $vararg_buffer69 = sp + 24|0;
 $vararg_buffer66 = sp + 376|0;
 $vararg_buffer63 = sp + 64|0;
 $vararg_buffer60 = sp + 344|0;
 $vararg_buffer57 = sp + 160|0;
 $vararg_buffer54 = sp + 336|0;
 $vararg_buffer51 = sp + 352|0;
 $vararg_buffer48 = sp + 16|0;
 $vararg_buffer45 = sp + 56|0;
 $vararg_buffer42 = sp + 224|0;
 $vararg_buffer39 = sp + 88|0;
 $vararg_buffer36 = sp + 280|0;
 $vararg_buffer33 = sp + 272|0;
 $vararg_buffer30 = sp + 208|0;
 $vararg_buffer25 = sp + 232|0;
 $vararg_buffer22 = sp + 200|0;
 $vararg_buffer19 = sp + 256|0;
 $vararg_buffer16 = sp + 104|0;
 $vararg_buffer13 = sp;
 $vararg_buffer10 = sp + 72|0;
 $vararg_buffer7 = sp + 8|0;
 $vararg_buffer4 = sp + 176|0;
 $vararg_buffer1 = sp + 360|0;
 $vararg_buffer = sp + 168|0;
 $device_string = sp + 816|0;
 $type = sp + 152|0;
 $compute_units = sp + 736|0;
 $workitem_dims = sp + 740|0;
 $workitem_size = sp + 744|0;
 $workgroup_size = sp + 756|0;
 $clock_frequency = sp + 760|0;
 $addr_bits = sp + 764|0;
 $max_mem_alloc_size = sp + 296|0;
 $mem_size = sp + 48|0;
 $error_correction_support = sp + 796|0;
 $local_mem_type = sp + 800|0;
 $queue_properties = sp + 40|0;
 $image_support = sp + 808|0;
 $max_read_image_args = sp + 720|0;
 $max_write_image_args = sp + 812|0;
 $szMaxDims = sp + 384|0;
 $stdDevString = sp + 528|0;
 $59 = sp + 488|0;
 $62 = sp + 768|0;
 $63 = sp + 780|0;
 $compute_capability_major = sp + 792|0;
 $compute_capability_minor = sp + 732|0;
 $regs_per_block = sp + 420|0;
 $warp_size = sp + 804|0;
 $gpu_overlap = sp + 608|0;
 $exec_timeout = sp + 440|0;
 $integrated_memory = sp + 436|0;
 $vec_width = sp + 640|0;
 $57 = $iLogMode;
 $58 = $device;
 $nv_device_attibute_query = 0;
 $64 = $58;
 (_clGetDeviceInfo(($64|0),4139,1024,($device_string|0),(0|0))|0);
 $65 = $57;
 HEAP32[$vararg_buffer>>2] = $device_string;
 (_shrLog($65,0,8,$vararg_buffer)|0);
 $66 = $58;
 (_clGetDeviceInfo(($66|0),4140,1024,($device_string|0),(0|0))|0);
 $67 = $57;
 HEAP32[$vararg_buffer1>>2] = $device_string;
 (_shrLog($67,0,40,$vararg_buffer1)|0);
 $68 = $58;
 (_clGetDeviceInfo(($68|0),4141,1024,($device_string|0),(0|0))|0);
 $69 = $57;
 HEAP32[$vararg_buffer4>>2] = $device_string;
 (_shrLog($69,0,72,$vararg_buffer4)|0);
 $70 = $58;
 (_clGetDeviceInfo(($70|0),4096,8,($type|0),(0|0))|0);
 $71 = $type;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = (($71) + 4)|0;
 $75 = $74;
 $76 = HEAP32[$75>>2]|0;
 $77 = $73 & 2;
 $78 = ($77|0)!=(0);
 $79 = (0)!=(0);
 $80 = $78 | $79;
 if ($80) {
  $81 = $57;
  HEAP32[$vararg_buffer7>>2] = 128;
  (_shrLog($81,0,104,$vararg_buffer7)|0);
 }
 $82 = $type;
 $83 = $82;
 $84 = HEAP32[$83>>2]|0;
 $85 = (($82) + 4)|0;
 $86 = $85;
 $87 = HEAP32[$86>>2]|0;
 $88 = $84 & 4;
 $89 = ($88|0)!=(0);
 $90 = (0)!=(0);
 $91 = $89 | $90;
 if ($91) {
  $92 = $57;
  HEAP32[$vararg_buffer10>>2] = 152;
  (_shrLog($92,0,104,$vararg_buffer10)|0);
 }
 $93 = $type;
 $94 = $93;
 $95 = HEAP32[$94>>2]|0;
 $96 = (($93) + 4)|0;
 $97 = $96;
 $98 = HEAP32[$97>>2]|0;
 $99 = $95 & 8;
 $100 = ($99|0)!=(0);
 $101 = (0)!=(0);
 $102 = $100 | $101;
 if ($102) {
  $103 = $57;
  HEAP32[$vararg_buffer13>>2] = 176;
  (_shrLog($103,0,104,$vararg_buffer13)|0);
 }
 $104 = $type;
 $105 = $104;
 $106 = HEAP32[$105>>2]|0;
 $107 = (($104) + 4)|0;
 $108 = $107;
 $109 = HEAP32[$108>>2]|0;
 $110 = $106 & 1;
 $111 = ($110|0)!=(0);
 $112 = (0)!=(0);
 $113 = $111 | $112;
 if ($113) {
  $114 = $57;
  HEAP32[$vararg_buffer16>>2] = 208;
  (_shrLog($114,0,104,$vararg_buffer16)|0);
 }
 $115 = $58;
 (_clGetDeviceInfo(($115|0),4098,4,($compute_units|0),(0|0))|0);
 $116 = $57;
 $117 = HEAP32[$compute_units>>2]|0;
 HEAP32[$vararg_buffer19>>2] = $117;
 (_shrLog($116,0,232,$vararg_buffer19)|0);
 $118 = $58;
 (_clGetDeviceInfo(($118|0),4099,4,($workitem_dims|0),(0|0))|0);
 $119 = $57;
 $120 = HEAP32[$workitem_dims>>2]|0;
 HEAP32[$vararg_buffer22>>2] = $120;
 (_shrLog($119,0,272,$vararg_buffer22)|0);
 $121 = $58;
 (_clGetDeviceInfo(($121|0),4101,12,($workitem_size|0),(0|0))|0);
 $122 = $57;
 $123 = HEAP32[$workitem_size>>2]|0;
 $124 = (($workitem_size) + 4|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = (($workitem_size) + 8|0);
 $127 = HEAP32[$126>>2]|0;
 HEAP32[$vararg_buffer25>>2] = $123;
 $vararg_ptr28 = (($vararg_buffer25) + 4|0);
 HEAP32[$vararg_ptr28>>2] = $125;
 $vararg_ptr29 = (($vararg_buffer25) + 8|0);
 HEAP32[$vararg_ptr29>>2] = $127;
 (_shrLog($122,0,320,$vararg_buffer25)|0);
 $128 = $58;
 (_clGetDeviceInfo(($128|0),4100,4,($workgroup_size|0),(0|0))|0);
 $129 = $57;
 $130 = HEAP32[$workgroup_size>>2]|0;
 HEAP32[$vararg_buffer30>>2] = $130;
 (_shrLog($129,0,368,$vararg_buffer30)|0);
 $131 = $58;
 (_clGetDeviceInfo(($131|0),4108,4,($clock_frequency|0),(0|0))|0);
 $132 = $57;
 $133 = HEAP32[$clock_frequency>>2]|0;
 HEAP32[$vararg_buffer33>>2] = $133;
 (_shrLog($132,0,408,$vararg_buffer33)|0);
 $134 = $58;
 (_clGetDeviceInfo(($134|0),4109,4,($addr_bits|0),(0|0))|0);
 $135 = $57;
 $136 = HEAP32[$addr_bits>>2]|0;
 HEAP32[$vararg_buffer36>>2] = $136;
 (_shrLog($135,0,456,$vararg_buffer36)|0);
 $137 = $58;
 (_clGetDeviceInfo(($137|0),4112,8,($max_mem_alloc_size|0),(0|0))|0);
 $138 = $57;
 $139 = $max_mem_alloc_size;
 $140 = $139;
 $141 = HEAP32[$140>>2]|0;
 $142 = (($139) + 4)|0;
 $143 = $142;
 $144 = HEAP32[$143>>2]|0;
 $145 = (___udivdi3(($141|0),($144|0),1048576,0)|0);
 $146 = tempRet0;
 HEAP32[$vararg_buffer39>>2] = $145;
 (_shrLog($138,0,488,$vararg_buffer39)|0);
 $147 = $58;
 (_clGetDeviceInfo(($147|0),4127,8,($mem_size|0),(0|0))|0);
 $148 = $57;
 $149 = $mem_size;
 $150 = $149;
 $151 = HEAP32[$150>>2]|0;
 $152 = (($149) + 4)|0;
 $153 = $152;
 $154 = HEAP32[$153>>2]|0;
 $155 = (___udivdi3(($151|0),($154|0),1048576,0)|0);
 $156 = tempRet0;
 HEAP32[$vararg_buffer42>>2] = $155;
 (_shrLog($148,0,536,$vararg_buffer42)|0);
 $157 = $58;
 (_clGetDeviceInfo(($157|0),4132,4,($error_correction_support|0),(0|0))|0);
 $158 = $57;
 $159 = HEAP32[$error_correction_support>>2]|0;
 $160 = ($159|0)==(1);
 $161 = $160 ? 624 : 632;
 HEAP32[$vararg_buffer45>>2] = $161;
 (_shrLog($158,0,576,$vararg_buffer45)|0);
 $162 = $58;
 (_clGetDeviceInfo(($162|0),4130,4,($local_mem_type|0),(0|0))|0);
 $163 = $57;
 $164 = HEAP32[$local_mem_type>>2]|0;
 $165 = ($164|0)==(1);
 $166 = $165 ? 680 : 688;
 HEAP32[$vararg_buffer48>>2] = $166;
 (_shrLog($163,0,640,$vararg_buffer48)|0);
 $167 = $58;
 (_clGetDeviceInfo(($167|0),4131,8,($mem_size|0),(0|0))|0);
 $168 = $57;
 $169 = $mem_size;
 $170 = $169;
 $171 = HEAP32[$170>>2]|0;
 $172 = (($169) + 4)|0;
 $173 = $172;
 $174 = HEAP32[$173>>2]|0;
 $175 = (___udivdi3(($171|0),($174|0),1024,0)|0);
 $176 = tempRet0;
 HEAP32[$vararg_buffer51>>2] = $175;
 (_shrLog($168,0,696,$vararg_buffer51)|0);
 $177 = $58;
 (_clGetDeviceInfo(($177|0),4128,8,($mem_size|0),(0|0))|0);
 $178 = $57;
 $179 = $mem_size;
 $180 = $179;
 $181 = HEAP32[$180>>2]|0;
 $182 = (($179) + 4)|0;
 $183 = $182;
 $184 = HEAP32[$183>>2]|0;
 $185 = (___udivdi3(($181|0),($184|0),1024,0)|0);
 $186 = tempRet0;
 HEAP32[$vararg_buffer54>>2] = $185;
 (_shrLog($178,0,736,$vararg_buffer54)|0);
 $187 = $58;
 (_clGetDeviceInfo(($187|0),4138,8,($queue_properties|0),(0|0))|0);
 $188 = $queue_properties;
 $189 = $188;
 $190 = HEAP32[$189>>2]|0;
 $191 = (($188) + 4)|0;
 $192 = $191;
 $193 = HEAP32[$192>>2]|0;
 $194 = $190 & 1;
 $195 = ($194|0)!=(0);
 $196 = (0)!=(0);
 $197 = $195 | $196;
 if ($197) {
  $198 = $57;
  HEAP32[$vararg_buffer57>>2] = 824;
  (_shrLog($198,0,784,$vararg_buffer57)|0);
 }
 $199 = $queue_properties;
 $200 = $199;
 $201 = HEAP32[$200>>2]|0;
 $202 = (($199) + 4)|0;
 $203 = $202;
 $204 = HEAP32[$203>>2]|0;
 $205 = $201 & 2;
 $206 = ($205|0)!=(0);
 $207 = (0)!=(0);
 $208 = $206 | $207;
 if ($208) {
  $209 = $57;
  HEAP32[$vararg_buffer60>>2] = 864;
  (_shrLog($209,0,784,$vararg_buffer60)|0);
 }
 $210 = $58;
 (_clGetDeviceInfo(($210|0),4118,4,($image_support|0),(0|0))|0);
 $211 = $57;
 $212 = HEAP32[$image_support>>2]|0;
 HEAP32[$vararg_buffer63>>2] = $212;
 (_shrLog($211,0,896,$vararg_buffer63)|0);
 $213 = $58;
 (_clGetDeviceInfo(($213|0),4110,4,($max_read_image_args|0),(0|0))|0);
 $214 = $57;
 $215 = HEAP32[$max_read_image_args>>2]|0;
 HEAP32[$vararg_buffer66>>2] = $215;
 (_shrLog($214,0,928,$vararg_buffer66)|0);
 $216 = $58;
 (_clGetDeviceInfo(($216|0),4111,4,($max_write_image_args|0),(0|0))|0);
 $217 = $57;
 $218 = HEAP32[$max_write_image_args>>2]|0;
 HEAP32[$vararg_buffer69>>2] = $218;
 (_shrLog($217,0,968,$vararg_buffer69)|0);
 $219 = $57;
 (_shrLog($219,0,1008,$vararg_buffer72)|0);
 $220 = $58;
 (_clGetDeviceInfo(($220|0),4113,4,($szMaxDims|0),(0|0))|0);
 $221 = $57;
 $222 = HEAP32[$szMaxDims>>2]|0;
 HEAP32[$vararg_buffer74>>2] = $222;
 (_shrLog($221,0,1040,$vararg_buffer74)|0);
 $223 = $58;
 $224 = (($szMaxDims) + 4|0);
 (_clGetDeviceInfo(($223|0),4114,4,($224|0),(0|0))|0);
 $225 = $57;
 $226 = (($szMaxDims) + 4|0);
 $227 = HEAP32[$226>>2]|0;
 HEAP32[$vararg_buffer77>>2] = $227;
 (_shrLog($225,0,1064,$vararg_buffer77)|0);
 $228 = $58;
 $229 = (($szMaxDims) + 8|0);
 (_clGetDeviceInfo(($228|0),4115,4,($229|0),(0|0))|0);
 $230 = $57;
 $231 = (($szMaxDims) + 8|0);
 $232 = HEAP32[$231>>2]|0;
 HEAP32[$vararg_buffer80>>2] = $232;
 (_shrLog($230,0,1088,$vararg_buffer80)|0);
 $233 = $58;
 $234 = (($szMaxDims) + 12|0);
 (_clGetDeviceInfo(($233|0),4116,4,($234|0),(0|0))|0);
 $235 = $57;
 $236 = (($szMaxDims) + 12|0);
 $237 = HEAP32[$236>>2]|0;
 HEAP32[$vararg_buffer83>>2] = $237;
 (_shrLog($235,0,1112,$vararg_buffer83)|0);
 $238 = $58;
 $239 = (($szMaxDims) + 16|0);
 (_clGetDeviceInfo(($238|0),4117,4,($239|0),(0|0))|0);
 $240 = $57;
 $241 = (($szMaxDims) + 16|0);
 $242 = HEAP32[$241>>2]|0;
 HEAP32[$vararg_buffer86>>2] = $242;
 (_shrLog($240,0,1136,$vararg_buffer86)|0);
 $243 = $58;
 (_clGetDeviceInfo(($243|0),4144,1024,($device_string|0),(0|0))|0);
 $244 = $57;
 (_shrLog($244,0,1160,$vararg_buffer89)|0);
 $56 = $stdDevString;
 $245 = $56;
 $55 = $245;
 $246 = $55;
 $54 = $246;
 $247 = $54;
 $53 = $247;
 $248 = $53;
 $52 = $248;
 $51 = $246;
 $249 = $51;
 $50 = $249;
 $250 = $50;
 $49 = $250;
 $251 = $49;
 $__a$i$i$i = $251;
 $__i$i$i$i = 0;
 while(1) {
  $252 = $__i$i$i$i;
  $253 = ($252>>>0)<(3);
  if (!($253)) {
   break;
  }
  $254 = $__i$i$i$i;
  $255 = $__a$i$i$i;
  $256 = (($255) + ($254<<2)|0);
  HEAP32[$256>>2] = 0;
  $257 = $__i$i$i$i;
  $258 = (($257) + 1)|0;
  $__i$i$i$i = $258;
 }
 $47 = $59;
 $48 = $device_string;
 $259 = $47;
 $260 = $48;
 $45 = $259;
 $46 = $260;
 $261 = $45;
 $44 = $261;
 $262 = $44;
 $43 = $262;
 $263 = $43;
 $42 = $263;
 $264 = $46;
 $265 = $46;
 __THREW__ = 0;
 $266 = (invoke_ii(400,($265|0))|0);
 $267 = __THREW__; __THREW__ = 0;
 $268 = $267&1;
 L23: do {
  if ($268) {
   label = 34;
  } else {
   __THREW__ = 0;
   invoke_viii(401,($261|0),($264|0),($266|0));
   $269 = __THREW__; __THREW__ = 0;
   $270 = $269&1;
   if ($270) {
    label = 34;
   } else {
    __THREW__ = 0;
    (invoke_iii(402,($stdDevString|0),($59|0))|0);
    $271 = __THREW__; __THREW__ = 0;
    $272 = $271&1;
    if ($272) {
     $326 = ___cxa_find_matching_catch()|0;
     $327 = tempRet0;
     $60 = $326;
     $61 = $327;
     __THREW__ = 0;
     invoke_vi(403,($59|0));
     $328 = __THREW__; __THREW__ = 0;
     $329 = $328&1;
     if ($329) {
      $441 = ___cxa_find_matching_catch(0|0)|0;
      $442 = tempRet0;
      ___clang_call_terminate($441);
      // unreachable;
     } else {
      break;
     }
    }
    __THREW__ = 0;
    invoke_vi(403,($59|0));
    $273 = __THREW__; __THREW__ = 0;
    $274 = $273&1;
    if ($274) {
     label = 34;
    } else {
     $szOldPos = 0;
     $275 = $szOldPos;
     $276 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($stdDevString,32,$275)|0);
     $szSpacePos = $276;
     while(1) {
      $277 = $szSpacePos;
      $278 = ($277|0)!=(-1);
      if ($278) {
       $279 = $szSpacePos;
       $280 = $szOldPos;
       $281 = (($279) - ($280))|0;
       $282 = ($281>>>0)>(0);
       $443 = $282;
      } else {
       $443 = 0;
      }
      if (!($443)) {
       label = 52;
       break;
      }
      $283 = $szOldPos;
      $284 = $szSpacePos;
      $285 = $szOldPos;
      $286 = (($284) - ($285))|0;
      $39 = $stdDevString;
      $40 = $283;
      $41 = $286;
      $287 = $39;
      $288 = $40;
      $289 = $41;
      $38 = $287;
      $290 = $38;
      $37 = $290;
      $291 = $37;
      $36 = $291;
      $292 = $36;
      __THREW__ = 0;
      invoke_viiiii(404,($62|0),($287|0),($288|0),($289|0),($292|0));
      $293 = __THREW__; __THREW__ = 0;
      $294 = $293&1;
      if ($294) {
       label = 34;
       break L23;
      }
      $35 = $62;
      $295 = $35;
      $34 = $295;
      $296 = $34;
      $33 = $296;
      $297 = $33;
      $32 = $297;
      $298 = $32;
      $31 = $298;
      $299 = $31;
      $30 = $299;
      $300 = $30;
      $301 = HEAP8[$300>>0]|0;
      $302 = $301&255;
      $303 = $302 & 1;
      $304 = ($303|0)!=(0);
      if ($304) {
       $24 = $297;
       $305 = $24;
       $23 = $305;
       $306 = $23;
       $22 = $306;
       $307 = $22;
       $308 = (($307) + 8|0);
       $309 = HEAP32[$308>>2]|0;
       $316 = $309;
      } else {
       $29 = $297;
       $310 = $29;
       $28 = $310;
       $311 = $28;
       $27 = $311;
       $312 = $27;
       $313 = (($312) + 1|0);
       $26 = $313;
       $314 = $26;
       $25 = $314;
       $315 = $25;
       $316 = $315;
      }
      $21 = $316;
      $317 = $21;
      __THREW__ = 0;
      $318 = (invoke_iii(405,(1192|0),($317|0))|0);
      $319 = __THREW__; __THREW__ = 0;
      $320 = $319&1;
      if ($320) {
       label = 37;
       break;
      }
      $321 = ($318|0)==(0);
      __THREW__ = 0;
      invoke_vi(403,($62|0));
      $322 = __THREW__; __THREW__ = 0;
      $323 = $322&1;
      if ($323) {
       label = 34;
       break L23;
      }
      if ($321) {
       $nv_device_attibute_query = 1;
      }
      $334 = $szOldPos;
      $335 = ($334>>>0)>(0);
      if ($335) {
       $336 = $57;
       __THREW__ = 0;
       (invoke_iiiii(406,($336|0),0,(1224|0),($vararg_buffer91|0))|0);
       $337 = __THREW__; __THREW__ = 0;
       $338 = $337&1;
       if ($338) {
        label = 34;
        break L23;
       }
      }
      $339 = $57;
      $340 = $szOldPos;
      $341 = $szSpacePos;
      $342 = $szOldPos;
      $343 = (($341) - ($342))|0;
      $18 = $stdDevString;
      $19 = $340;
      $20 = $343;
      $344 = $18;
      $345 = $19;
      $346 = $20;
      $17 = $344;
      $347 = $17;
      $16 = $347;
      $348 = $16;
      $15 = $348;
      $349 = $15;
      __THREW__ = 0;
      invoke_viiiii(404,($63|0),($344|0),($345|0),($346|0),($349|0));
      $350 = __THREW__; __THREW__ = 0;
      $351 = $350&1;
      if ($351) {
       label = 34;
       break L23;
      }
      $14 = $63;
      $352 = $14;
      $13 = $352;
      $353 = $13;
      $12 = $353;
      $354 = $12;
      $11 = $354;
      $355 = $11;
      $10 = $355;
      $356 = $10;
      $9 = $356;
      $357 = $9;
      $358 = HEAP8[$357>>0]|0;
      $359 = $358&255;
      $360 = $359 & 1;
      $361 = ($360|0)!=(0);
      if ($361) {
       $3 = $354;
       $362 = $3;
       $2 = $362;
       $363 = $2;
       $1 = $363;
       $364 = $1;
       $365 = (($364) + 8|0);
       $366 = HEAP32[$365>>2]|0;
       $373 = $366;
      } else {
       $8 = $354;
       $367 = $8;
       $7 = $367;
       $368 = $7;
       $6 = $368;
       $369 = $6;
       $370 = (($369) + 1|0);
       $5 = $370;
       $371 = $5;
       $4 = $371;
       $372 = $4;
       $373 = $372;
      }
      $0 = $373;
      $374 = $0;
      __THREW__ = 0;
      HEAP32[$vararg_buffer93>>2] = $374;
      (invoke_iiiii(406,($339|0),0,(1232|0),($vararg_buffer93|0))|0);
      $375 = __THREW__; __THREW__ = 0;
      $376 = $375&1;
      if ($376) {
       label = 50;
       break;
      }
      __THREW__ = 0;
      invoke_vi(403,($63|0));
      $377 = __THREW__; __THREW__ = 0;
      $378 = $377&1;
      if ($378) {
       label = 34;
       break L23;
      }
      $379 = $szSpacePos;
      $380 = (($379) + 1)|0;
      $szOldPos = $380;
      $381 = $szOldPos;
      $382 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($stdDevString,32,$381)|0);
      $szSpacePos = $382;
     }
     if ((label|0) == 37) {
      $330 = ___cxa_find_matching_catch()|0;
      $331 = tempRet0;
      $60 = $330;
      $61 = $331;
      __THREW__ = 0;
      invoke_vi(403,($62|0));
      $332 = __THREW__; __THREW__ = 0;
      $333 = $332&1;
      if ($333) {
       $441 = ___cxa_find_matching_catch(0|0)|0;
       $442 = tempRet0;
       ___clang_call_terminate($441);
       // unreachable;
      } else {
       break;
      }
     }
     else if ((label|0) == 50) {
      $383 = ___cxa_find_matching_catch()|0;
      $384 = tempRet0;
      $60 = $383;
      $61 = $384;
      __THREW__ = 0;
      invoke_vi(403,($63|0));
      $385 = __THREW__; __THREW__ = 0;
      $386 = $385&1;
      if ($386) {
       $441 = ___cxa_find_matching_catch(0|0)|0;
       $442 = tempRet0;
       ___clang_call_terminate($441);
       // unreachable;
      } else {
       break;
      }
     }
     else if ((label|0) == 52) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($stdDevString);
      $387 = $nv_device_attibute_query;
      $388 = $387&1;
      if (!($388)) {
       $417 = $57;
       (_shrLog($417,0,1504,$vararg_buffer115)|0);
       $418 = $58;
       (_clGetDeviceInfo(($418|0),4102,4,($vec_width|0),(0|0))|0);
       $419 = $58;
       $420 = (($vec_width) + 4|0);
       (_clGetDeviceInfo(($419|0),4103,4,($420|0),(0|0))|0);
       $421 = $58;
       $422 = (($vec_width) + 8|0);
       (_clGetDeviceInfo(($421|0),4104,4,($422|0),(0|0))|0);
       $423 = $58;
       $424 = (($vec_width) + 12|0);
       (_clGetDeviceInfo(($423|0),4105,4,($424|0),(0|0))|0);
       $425 = $58;
       $426 = (($vec_width) + 16|0);
       (_clGetDeviceInfo(($425|0),4106,4,($426|0),(0|0))|0);
       $427 = $58;
       $428 = (($vec_width) + 20|0);
       (_clGetDeviceInfo(($427|0),4107,4,($428|0),(0|0))|0);
       $429 = $57;
       $430 = HEAP32[$vec_width>>2]|0;
       $431 = (($vec_width) + 4|0);
       $432 = HEAP32[$431>>2]|0;
       $433 = (($vec_width) + 8|0);
       $434 = HEAP32[$433>>2]|0;
       $435 = (($vec_width) + 12|0);
       $436 = HEAP32[$435>>2]|0;
       $437 = (($vec_width) + 16|0);
       $438 = HEAP32[$437>>2]|0;
       HEAP32[$vararg_buffer117>>2] = $430;
       $vararg_ptr120 = (($vararg_buffer117) + 4|0);
       HEAP32[$vararg_ptr120>>2] = $432;
       $vararg_ptr121 = (($vararg_buffer117) + 8|0);
       HEAP32[$vararg_ptr121>>2] = $434;
       $vararg_ptr122 = (($vararg_buffer117) + 12|0);
       HEAP32[$vararg_ptr122>>2] = $436;
       $vararg_ptr123 = (($vararg_buffer117) + 16|0);
       HEAP32[$vararg_ptr123>>2] = $438;
       (_shrLog($429,0,1544,$vararg_buffer117)|0);
       STACKTOP = sp;return;
      }
      $389 = $58;
      (_clGetDeviceInfo(($389|0),16384,4,($compute_capability_major|0),(0|0))|0);
      $390 = $58;
      (_clGetDeviceInfo(($390|0),16385,4,($compute_capability_minor|0),(0|0))|0);
      $391 = $57;
      $392 = HEAP32[$compute_capability_major>>2]|0;
      $393 = HEAP32[$compute_capability_minor>>2]|0;
      HEAP32[$vararg_buffer96>>2] = $392;
      $vararg_ptr99 = (($vararg_buffer96) + 4|0);
      HEAP32[$vararg_ptr99>>2] = $393;
      (_shrLog($391,0,1240,$vararg_buffer96)|0);
      $394 = $58;
      (_clGetDeviceInfo(($394|0),16386,4,($regs_per_block|0),(0|0))|0);
      $395 = $57;
      $396 = HEAP32[$regs_per_block>>2]|0;
      HEAP32[$vararg_buffer100>>2] = $396;
      (_shrLog($395,0,1288,$vararg_buffer100)|0);
      $397 = $58;
      (_clGetDeviceInfo(($397|0),16387,4,($warp_size|0),(0|0))|0);
      $398 = $57;
      $399 = HEAP32[$warp_size>>2]|0;
      HEAP32[$vararg_buffer103>>2] = $399;
      (_shrLog($398,0,1328,$vararg_buffer103)|0);
      $400 = $58;
      (_clGetDeviceInfo(($400|0),16388,4,($gpu_overlap|0),(0|0))|0);
      $401 = $57;
      $402 = HEAP32[$gpu_overlap>>2]|0;
      $403 = ($402|0)==(1);
      $404 = $403 ? 1400 : 1408;
      HEAP32[$vararg_buffer106>>2] = $404;
      (_shrLog($401,0,1360,$vararg_buffer106)|0);
      $405 = $58;
      (_clGetDeviceInfo(($405|0),16389,4,($exec_timeout|0),(0|0))|0);
      $406 = $57;
      $407 = HEAP32[$exec_timeout>>2]|0;
      $408 = ($407|0)==(1);
      $409 = $408 ? 1400 : 1408;
      HEAP32[$vararg_buffer109>>2] = $409;
      (_shrLog($406,0,1424,$vararg_buffer109)|0);
      $410 = $58;
      (_clGetDeviceInfo(($410|0),16390,4,($integrated_memory|0),(0|0))|0);
      $411 = $57;
      $412 = HEAP32[$integrated_memory>>2]|0;
      $413 = ($412|0)==(1);
      $414 = $413 ? 1400 : 1408;
      HEAP32[$vararg_buffer112>>2] = $414;
      (_shrLog($411,0,1464,$vararg_buffer112)|0);
      $417 = $57;
      (_shrLog($417,0,1504,$vararg_buffer115)|0);
      $418 = $58;
      (_clGetDeviceInfo(($418|0),4102,4,($vec_width|0),(0|0))|0);
      $419 = $58;
      $420 = (($vec_width) + 4|0);
      (_clGetDeviceInfo(($419|0),4103,4,($420|0),(0|0))|0);
      $421 = $58;
      $422 = (($vec_width) + 8|0);
      (_clGetDeviceInfo(($421|0),4104,4,($422|0),(0|0))|0);
      $423 = $58;
      $424 = (($vec_width) + 12|0);
      (_clGetDeviceInfo(($423|0),4105,4,($424|0),(0|0))|0);
      $425 = $58;
      $426 = (($vec_width) + 16|0);
      (_clGetDeviceInfo(($425|0),4106,4,($426|0),(0|0))|0);
      $427 = $58;
      $428 = (($vec_width) + 20|0);
      (_clGetDeviceInfo(($427|0),4107,4,($428|0),(0|0))|0);
      $429 = $57;
      $430 = HEAP32[$vec_width>>2]|0;
      $431 = (($vec_width) + 4|0);
      $432 = HEAP32[$431>>2]|0;
      $433 = (($vec_width) + 8|0);
      $434 = HEAP32[$433>>2]|0;
      $435 = (($vec_width) + 12|0);
      $436 = HEAP32[$435>>2]|0;
      $437 = (($vec_width) + 16|0);
      $438 = HEAP32[$437>>2]|0;
      HEAP32[$vararg_buffer117>>2] = $430;
      $vararg_ptr120 = (($vararg_buffer117) + 4|0);
      HEAP32[$vararg_ptr120>>2] = $432;
      $vararg_ptr121 = (($vararg_buffer117) + 8|0);
      HEAP32[$vararg_ptr121>>2] = $434;
      $vararg_ptr122 = (($vararg_buffer117) + 12|0);
      HEAP32[$vararg_ptr122>>2] = $436;
      $vararg_ptr123 = (($vararg_buffer117) + 16|0);
      HEAP32[$vararg_ptr123>>2] = $438;
      (_shrLog($429,0,1544,$vararg_buffer117)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 34) {
  $324 = ___cxa_find_matching_catch()|0;
  $325 = tempRet0;
  $60 = $324;
  $61 = $325;
 }
 __THREW__ = 0;
 invoke_vi(403,($stdDevString|0));
 $415 = __THREW__; __THREW__ = 0;
 $416 = $415&1;
 if ($416) {
  $441 = ___cxa_find_matching_catch(0|0)|0;
  $442 = tempRet0;
  ___clang_call_terminate($441);
  // unreachable;
 }
 $439 = $60;
 $440 = $61;
 ___resumeException($439|0);
 // unreachable;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function _oclGetFirstDev($cxGPUContext) {
 $cxGPUContext = $cxGPUContext|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cdDevices = 0, $first = 0, $szParmDataBytes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $szParmDataBytes = sp + 8|0;
 $0 = $cxGPUContext;
 $1 = $0;
 (_clGetContextInfo(($1|0),4225,0,(0|0),($szParmDataBytes|0))|0);
 $2 = HEAP32[$szParmDataBytes>>2]|0;
 $3 = (_malloc($2)|0);
 $cdDevices = $3;
 $4 = $0;
 $5 = HEAP32[$szParmDataBytes>>2]|0;
 $6 = $cdDevices;
 (_clGetContextInfo(($4|0),4225,($5|0),($6|0),(0|0))|0);
 $7 = $cdDevices;
 $8 = HEAP32[$7>>2]|0;
 $first = $8;
 $9 = $cdDevices;
 _free($9);
 $10 = $first;
 STACKTOP = sp;return ($10|0);
}
function _oclGetMaxFlopsDev($cxGPUContext) {
 $cxGPUContext = $cxGPUContext|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cdDevices = 0, $clock_frequency = 0, $clock_frequency2 = 0, $compute_units = 0, $compute_units1 = 0, $current_device = 0, $device_count = 0, $flops = 0, $max_flops = 0, $max_flops_device = 0;
 var $szParmDataBytes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $szParmDataBytes = sp + 16|0;
 $compute_units = sp + 24|0;
 $clock_frequency = sp + 20|0;
 $compute_units1 = sp + 8|0;
 $clock_frequency2 = sp + 12|0;
 $0 = $cxGPUContext;
 $1 = $0;
 (_clGetContextInfo(($1|0),4225,0,(0|0),($szParmDataBytes|0))|0);
 $2 = HEAP32[$szParmDataBytes>>2]|0;
 $3 = (_malloc($2)|0);
 $cdDevices = $3;
 $4 = HEAP32[$szParmDataBytes>>2]|0;
 $5 = (($4>>>0) / 4)&-1;
 $device_count = $5;
 $6 = $0;
 $7 = HEAP32[$szParmDataBytes>>2]|0;
 $8 = $cdDevices;
 (_clGetContextInfo(($6|0),4225,($7|0),($8|0),(0|0))|0);
 $9 = $cdDevices;
 $10 = HEAP32[$9>>2]|0;
 $max_flops_device = $10;
 $max_flops = 0;
 $current_device = 0;
 $11 = $current_device;
 $12 = $cdDevices;
 $13 = (($12) + ($11<<2)|0);
 $14 = HEAP32[$13>>2]|0;
 (_clGetDeviceInfo(($14|0),4098,4,($compute_units|0),(0|0))|0);
 $15 = $current_device;
 $16 = $cdDevices;
 $17 = (($16) + ($15<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 (_clGetDeviceInfo(($18|0),4108,4,($clock_frequency|0),(0|0))|0);
 $19 = HEAP32[$compute_units>>2]|0;
 $20 = HEAP32[$clock_frequency>>2]|0;
 $21 = Math_imul($19, $20)|0;
 $max_flops = $21;
 $22 = $current_device;
 $23 = (($22) + 1)|0;
 $current_device = $23;
 while(1) {
  $24 = $current_device;
  $25 = $device_count;
  $26 = ($24>>>0)<($25>>>0);
  if (!($26)) {
   break;
  }
  $27 = $current_device;
  $28 = $cdDevices;
  $29 = (($28) + ($27<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  (_clGetDeviceInfo(($30|0),4098,4,($compute_units1|0),(0|0))|0);
  $31 = $current_device;
  $32 = $cdDevices;
  $33 = (($32) + ($31<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  (_clGetDeviceInfo(($34|0),4108,4,($clock_frequency2|0),(0|0))|0);
  $35 = HEAP32[$compute_units1>>2]|0;
  $36 = HEAP32[$clock_frequency2>>2]|0;
  $37 = Math_imul($35, $36)|0;
  $flops = $37;
  $38 = $flops;
  $39 = $max_flops;
  $40 = ($38|0)>($39|0);
  if ($40) {
   $41 = $flops;
   $max_flops = $41;
   $42 = $current_device;
   $43 = $cdDevices;
   $44 = (($43) + ($42<<2)|0);
   $45 = HEAP32[$44>>2]|0;
   $max_flops_device = $45;
  }
  $46 = $current_device;
  $47 = (($46) + 1)|0;
  $current_device = $47;
 }
 $48 = $cdDevices;
 _free($48);
 $49 = $max_flops_device;
 STACKTOP = sp;return ($49|0);
}
function _oclLoadProgSource($cFilename,$cPreamble,$szFinalLength) {
 $cFilename = $cFilename|0;
 $cPreamble = $cPreamble|0;
 $szFinalLength = $szFinalLength|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cSourceString = 0, $pFileStream = 0, $szPreambleLength = 0, $szSourceLength = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $cFilename;
 $2 = $cPreamble;
 $3 = $szFinalLength;
 $pFileStream = 0;
 $4 = $1;
 $5 = (_fopen(($4|0),(1600|0))|0);
 $pFileStream = $5;
 $6 = $pFileStream;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $0 = 0;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 $8 = $2;
 $9 = (_strlen(($8|0))|0);
 $szPreambleLength = $9;
 $10 = $pFileStream;
 (_fseek(($10|0),0,2)|0);
 $11 = $pFileStream;
 $12 = (_ftell(($11|0))|0);
 $szSourceLength = $12;
 $13 = $pFileStream;
 (_fseek(($13|0),0,0)|0);
 $14 = $szSourceLength;
 $15 = $szPreambleLength;
 $16 = (($14) + ($15))|0;
 $17 = (($16) + 1)|0;
 $18 = (_malloc($17)|0);
 $cSourceString = $18;
 $19 = $cSourceString;
 $20 = $2;
 $21 = $szPreambleLength;
 _memcpy(($19|0),($20|0),($21|0))|0;
 $22 = $cSourceString;
 $23 = $szPreambleLength;
 $24 = (($22) + ($23)|0);
 $25 = $szSourceLength;
 $26 = $pFileStream;
 $27 = (_fread(($24|0),($25|0),1,($26|0))|0);
 $28 = ($27|0)!=(1);
 if ($28) {
  $29 = $pFileStream;
  (_fclose(($29|0))|0);
  $30 = $cSourceString;
  _free($30);
  $0 = 0;
  $44 = $0;
  STACKTOP = sp;return ($44|0);
 }
 $31 = $pFileStream;
 (_fclose(($31|0))|0);
 $32 = $3;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = $szSourceLength;
  $35 = $szPreambleLength;
  $36 = (($34) + ($35))|0;
  $37 = $3;
  HEAP32[$37>>2] = $36;
 }
 $38 = $szSourceLength;
 $39 = $szPreambleLength;
 $40 = (($38) + ($39))|0;
 $41 = $cSourceString;
 $42 = (($41) + ($40)|0);
 HEAP8[$42>>0] = 0;
 $43 = $cSourceString;
 $0 = $43;
 $44 = $0;
 STACKTOP = sp;return ($44|0);
}
function _oclGetDev($cxGPUContext,$nr) {
 $cxGPUContext = $cxGPUContext|0;
 $nr = $nr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $cdDevices = 0, $device = 0, $szParmDataBytes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $szParmDataBytes = sp + 8|0;
 $1 = $cxGPUContext;
 $2 = $nr;
 $3 = $1;
 (_clGetContextInfo(($3|0),4225,0,(0|0),($szParmDataBytes|0))|0);
 $4 = HEAP32[$szParmDataBytes>>2]|0;
 $5 = (($4>>>0) / 4)&-1;
 $6 = $2;
 $7 = ($5>>>0)<($6>>>0);
 if ($7) {
  $0 = (-1);
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 } else {
  $8 = HEAP32[$szParmDataBytes>>2]|0;
  $9 = (_malloc($8)|0);
  $cdDevices = $9;
  $10 = $1;
  $11 = HEAP32[$szParmDataBytes>>2]|0;
  $12 = $cdDevices;
  (_clGetContextInfo(($10|0),4225,($11|0),($12|0),(0|0))|0);
  $13 = $2;
  $14 = $cdDevices;
  $15 = (($14) + ($13<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $device = $16;
  $17 = $cdDevices;
  _free($17);
  $18 = $device;
  $0 = $18;
  $19 = $0;
  STACKTOP = sp;return ($19|0);
 }
 return 0|0;
}
function _oclLogPtx($cpProgram,$cdDevice,$cPtxFileName) {
 $cpProgram = $cpProgram|0;
 $cdDevice = $cdDevice|0;
 $cPtxFileName = $cPtxFileName|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $binary_sizes = 0, $devices = 0, $i = 0, $i1 = 0, $idx = 0, $num_devices = 0, $pFileStream = 0, $ptx_code = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 16|0;
 $num_devices = sp + 20|0;
 $0 = $cpProgram;
 $1 = $cdDevice;
 $2 = $cPtxFileName;
 $3 = $0;
 (_clGetProgramInfo(($3|0),4450,4,($num_devices|0),(0|0))|0);
 $4 = HEAP32[$num_devices>>2]|0;
 $5 = $4<<2;
 $6 = (_malloc($5)|0);
 $devices = $6;
 $7 = $0;
 $8 = HEAP32[$num_devices>>2]|0;
 $9 = $8<<2;
 $10 = $devices;
 (_clGetProgramInfo(($7|0),4451,($9|0),($10|0),(0|0))|0);
 $11 = HEAP32[$num_devices>>2]|0;
 $12 = $11<<2;
 $13 = (_malloc($12)|0);
 $binary_sizes = $13;
 $14 = $0;
 $15 = HEAP32[$num_devices>>2]|0;
 $16 = $15<<2;
 $17 = $binary_sizes;
 (_clGetProgramInfo(($14|0),4453,($16|0),($17|0),(0|0))|0);
 $18 = HEAP32[$num_devices>>2]|0;
 $19 = $18<<2;
 $20 = (_malloc($19)|0);
 $ptx_code = $20;
 $i = 0;
 while(1) {
  $21 = $i;
  $22 = HEAP32[$num_devices>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if (!($23)) {
   break;
  }
  $24 = $i;
  $25 = $binary_sizes;
  $26 = (($25) + ($24<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (_malloc($27)|0);
  $29 = $i;
  $30 = $ptx_code;
  $31 = (($30) + ($29<<2)|0);
  HEAP32[$31>>2] = $28;
  $32 = $i;
  $33 = (($32) + 1)|0;
  $i = $33;
 }
 $34 = $0;
 $35 = $ptx_code;
 (_clGetProgramInfo(($34|0),4454,0,($35|0),(0|0))|0);
 $idx = 0;
 while(1) {
  $36 = $idx;
  $37 = HEAP32[$num_devices>>2]|0;
  $38 = ($36>>>0)<($37>>>0);
  if ($38) {
   $39 = $idx;
   $40 = $devices;
   $41 = (($40) + ($39<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $1;
   $44 = ($42|0)!=($43|0);
   $81 = $44;
  } else {
   $81 = 0;
  }
  if (!($81)) {
   break;
  }
  $45 = $idx;
  $46 = (($45) + 1)|0;
  $idx = $46;
 }
 $47 = $idx;
 $48 = HEAP32[$num_devices>>2]|0;
 $49 = ($47>>>0)<($48>>>0);
 if ($49) {
  $50 = $2;
  $51 = (0|0)!=($50|0);
  if ($51) {
   $52 = $2;
   HEAP32[$vararg_buffer>>2] = $52;
   (_shrLog(3,0,1608,$vararg_buffer)|0);
   $pFileStream = 0;
   $53 = $2;
   $54 = (_fopen(($53|0),(1648|0))|0);
   $pFileStream = $54;
   $55 = $idx;
   $56 = $ptx_code;
   $57 = (($56) + ($55<<2)|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $idx;
   $60 = $binary_sizes;
   $61 = (($60) + ($59<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = $pFileStream;
   (_fwrite(($58|0),($62|0),1,($63|0))|0);
   $64 = $pFileStream;
   (_fclose(($64|0))|0);
  } else {
   $65 = $idx;
   $66 = $ptx_code;
   $67 = (($66) + ($65<<2)|0);
   $68 = HEAP32[$67>>2]|0;
   HEAP32[$vararg_buffer1>>2] = 1688;
   $vararg_ptr4 = (($vararg_buffer1) + 4|0);
   HEAP32[$vararg_ptr4>>2] = $68;
   $vararg_ptr5 = (($vararg_buffer1) + 8|0);
   HEAP32[$vararg_ptr5>>2] = 1688;
   (_shrLog(3,0,1656,$vararg_buffer1)|0);
  }
 }
 $69 = $devices;
 _free($69);
 $70 = $binary_sizes;
 _free($70);
 $i1 = 0;
 while(1) {
  $71 = $i1;
  $72 = HEAP32[$num_devices>>2]|0;
  $73 = ($71>>>0)<($72>>>0);
  if (!($73)) {
   break;
  }
  $74 = $i1;
  $75 = $ptx_code;
  $76 = (($75) + ($74<<2)|0);
  $77 = HEAP32[$76>>2]|0;
  _free($77);
  $78 = $i1;
  $79 = (($78) + 1)|0;
  $i1 = $79;
 }
 $80 = $ptx_code;
 _free($80);
 STACKTOP = sp;return;
}
function _oclLogBuildInfo($cpProgram,$cdDevice) {
 $cpProgram = $cpProgram|0;
 $cdDevice = $cdDevice|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $cBuildLog = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 10272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $cBuildLog = sp + 24|0;
 $0 = $cpProgram;
 $1 = $cdDevice;
 $2 = $0;
 $3 = $1;
 (_clGetProgramBuildInfo(($2|0),($3|0),4483,10240,($cBuildLog|0),(0|0))|0);
 HEAP32[$vararg_buffer>>2] = 1688;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $cBuildLog;
 $vararg_ptr2 = (($vararg_buffer) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 1688;
 (_shrLog(3,0,1752,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _oclDeleteMemObjs($cmMemObjs,$iNumObjs) {
 $cmMemObjs = $cmMemObjs|0;
 $iNumObjs = $iNumObjs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cmMemObjs;
 $1 = $iNumObjs;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $1;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = $0;
  $7 = (($6) + ($5<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = $i;
   $11 = $0;
   $12 = (($11) + ($10<<2)|0);
   $13 = HEAP32[$12>>2]|0;
   (_clReleaseMemObject(($13|0))|0);
  }
  $14 = $i;
  $15 = (($14) + 1)|0;
  $i = $15;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__s;
 $1 = $0;
 $2 = (_strlen(($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN12CmdArgReader4initEiPPKc($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $argc;
 $1 = $argv;
 $4 = HEAP32[1776>>2]|0;
 $5 = (0|0)!=($4|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 $6 = $0;
 $7 = (0)==($6|0);
 if ($7) {
  label = 5;
 } else {
  $8 = $1;
  $9 = (0|0)==($8|0);
  if ($9) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  __ZN9ExceptionISt11logic_errorE8throw_itEPKciS3_(1800,59,1832);
 }
 $10 = (__Znwj(32)|0);
 __THREW__ = 0;
 invoke_vi(407,($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $2 = $18;
  $3 = $19;
  __ZdlPv($10);
  $20 = $2;
  $21 = $3;
  ___resumeException($20|0);
  // unreachable;
 } else {
  HEAP32[1776>>2] = $10;
  $13 = HEAP32[1776>>2]|0;
  $14 = $0;
  $15 = $1;
  __ZN12CmdArgReader14createArgsMapsEiPPKc($13,$14,$15);
  $16 = $0;
  HEAP32[1792>>2] = $16;
  $17 = $1;
  HEAP32[1784>>2] = $17;
  STACKTOP = sp;return;
 }
}
function __ZN12CmdArgReader14createArgsMapsEiPPKc($this,$argc,$argv) {
 $this = $this|0;
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__a$i$i$i1 = 0, $__a$i$i$i4 = 0, $__i$i$i$i = 0, $__i$i$i$i2 = 0, $__i$i$i$i5 = 0, $arg = 0, $args = 0, $i = 0, $numDashes = 0, $pos = 0;
 var $token = 0, $val_str = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $66 = sp;
 $68 = sp + 477|0;
 $69 = sp + 479|0;
 $token = sp + 12|0;
 $val_str = sp + 300|0;
 $args = sp + 192|0;
 $arg = sp + 208|0;
 $91 = sp + 228|0;
 $92 = sp + 480|0;
 $93 = sp + 328|0;
 $94 = sp + 478|0;
 $95 = sp + 316|0;
 $96 = sp + 476|0;
 $86 = $this;
 $87 = $argc;
 $88 = $argv;
 $97 = $86;
 $85 = $token;
 $98 = $85;
 $84 = $98;
 $99 = $84;
 $83 = $99;
 $100 = $83;
 $82 = $100;
 $101 = $82;
 $81 = $101;
 $80 = $99;
 $102 = $80;
 $79 = $102;
 $103 = $79;
 $78 = $103;
 $104 = $78;
 $__a$i$i$i = $104;
 $__i$i$i$i = 0;
 while(1) {
  $105 = $__i$i$i$i;
  $106 = ($105>>>0)<(3);
  if (!($106)) {
   break;
  }
  $107 = $__i$i$i$i;
  $108 = $__a$i$i$i;
  $109 = (($108) + ($107<<2)|0);
  HEAP32[$109>>2] = 0;
  $110 = $__i$i$i$i;
  $111 = (($110) + 1)|0;
  $__i$i$i$i = $111;
 }
 $77 = $val_str;
 $112 = $77;
 $76 = $112;
 $113 = $76;
 $75 = $113;
 $114 = $75;
 $74 = $114;
 $115 = $74;
 $73 = $115;
 $72 = $113;
 $116 = $72;
 $71 = $116;
 $117 = $71;
 $70 = $117;
 $118 = $70;
 $__a$i$i$i1 = $118;
 $__i$i$i$i2 = 0;
 while(1) {
  $119 = $__i$i$i$i2;
  $120 = ($119>>>0)<(3);
  if (!($120)) {
   break;
  }
  $121 = $__i$i$i$i2;
  $122 = $__a$i$i$i1;
  $123 = (($122) + ($121<<2)|0);
  HEAP32[$123>>2] = 0;
  $124 = $__i$i$i$i2;
  $125 = (($124) + 1)|0;
  $__i$i$i$i2 = $125;
 }
 $67 = $args;
 $126 = $67;
 ;HEAP8[$66+0>>0]=HEAP8[$69+0>>0]|0;
 $65 = $68;
 __THREW__ = 0;
 invoke_vii(408,($126|0),($68|0));
 $127 = __THREW__; __THREW__ = 0;
 $128 = $127&1;
 L10: do {
  if ($128) {
   label = 26;
  } else {
   $64 = $arg;
   $129 = $64;
   $63 = $129;
   $130 = $63;
   $62 = $130;
   $131 = $62;
   $61 = $131;
   $132 = $61;
   $60 = $132;
   $59 = $130;
   $133 = $59;
   $58 = $133;
   $134 = $58;
   $57 = $134;
   $135 = $57;
   $__a$i$i$i4 = $135;
   $__i$i$i$i5 = 0;
   while(1) {
    $136 = $__i$i$i$i5;
    $137 = ($136>>>0)<(3);
    if (!($137)) {
     break;
    }
    $138 = $__i$i$i$i5;
    $139 = $__a$i$i$i4;
    $140 = (($139) + ($138<<2)|0);
    HEAP32[$140>>2] = 0;
    $141 = $__i$i$i$i5;
    $142 = (($141) + 1)|0;
    $__i$i$i$i5 = $142;
   }
   $i = 1;
   while(1) {
    $143 = $i;
    $144 = $87;
    $145 = ($143|0)<($144|0);
    if (!($145)) {
     label = 62;
     break;
    }
    $146 = $i;
    $147 = $88;
    $148 = (($147) + ($146<<2)|0);
    $149 = HEAP32[$148>>2]|0;
    $55 = $arg;
    $56 = $149;
    $150 = $55;
    $151 = $56;
    __THREW__ = 0;
    (invoke_iii(409,($150|0),($151|0))|0);
    $152 = __THREW__; __THREW__ = 0;
    $153 = $152&1;
    if ($153) {
     label = 28;
     break;
    }
    $53 = $arg;
    $54 = 0;
    $154 = $53;
    $52 = $154;
    $155 = $52;
    $51 = $155;
    $156 = $51;
    $50 = $156;
    $157 = $50;
    $49 = $157;
    $158 = $49;
    $159 = HEAP8[$158>>0]|0;
    $160 = $159&255;
    $161 = $160 & 1;
    $162 = ($161|0)!=(0);
    if ($162) {
     $43 = $155;
     $163 = $43;
     $42 = $163;
     $164 = $42;
     $41 = $164;
     $165 = $41;
     $166 = (($165) + 8|0);
     $167 = HEAP32[$166>>2]|0;
     $176 = $167;
    } else {
     $48 = $155;
     $168 = $48;
     $47 = $168;
     $169 = $47;
     $46 = $169;
     $170 = $46;
     $171 = (($170) + 1|0);
     $45 = $171;
     $172 = $45;
     $44 = $172;
     $173 = $44;
     $176 = $173;
    }
    $174 = $54;
    $175 = (($176) + ($174)|0);
    $177 = HEAP8[$175>>0]|0;
    $178 = $177 << 24 >> 24;
    $179 = ($178|0)!=(45);
    if ($179) {
     __THREW__ = 0;
     invoke_viii(410,(1800|0),139,(2008|0));
     $180 = __THREW__; __THREW__ = 0;
     $181 = $180&1;
     if ($181) {
      label = 28;
      break;
     }
    }
    $27 = $arg;
    $28 = 1;
    $190 = $27;
    $26 = $190;
    $191 = $26;
    $25 = $191;
    $192 = $25;
    $24 = $192;
    $193 = $24;
    $23 = $193;
    $194 = $23;
    $195 = HEAP8[$194>>0]|0;
    $196 = $195&255;
    $197 = $196 & 1;
    $198 = ($197|0)!=(0);
    if ($198) {
     $17 = $191;
     $199 = $17;
     $16 = $199;
     $200 = $16;
     $15 = $200;
     $201 = $15;
     $202 = (($201) + 8|0);
     $203 = HEAP32[$202>>2]|0;
     $212 = $203;
    } else {
     $22 = $191;
     $204 = $22;
     $21 = $204;
     $205 = $21;
     $20 = $205;
     $206 = $20;
     $207 = (($206) + 1|0);
     $19 = $207;
     $208 = $19;
     $18 = $208;
     $209 = $18;
     $212 = $209;
    }
    $210 = $28;
    $211 = (($212) + ($210)|0);
    $213 = HEAP8[$211>>0]|0;
    $214 = $213 << 24 >> 24;
    $215 = ($214|0)==(45);
    $216 = $215 ? 2 : 1;
    $numDashes = $216;
    $217 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($arg,61,0)|0);
    $pos = $217;
    $218 = ($217|0)==(-1);
    if ($218) {
     $219 = (($97) + 12|0);
     $220 = $numDashes;
     $11 = $arg;
     $221 = $11;
     $10 = $221;
     $222 = $10;
     $9 = $222;
     $223 = $9;
     $8 = $223;
     $224 = $8;
     $7 = $224;
     $225 = $7;
     $226 = HEAP8[$225>>0]|0;
     $227 = $226&255;
     $228 = $227 & 1;
     $229 = ($228|0)!=(0);
     if ($229) {
      $3 = $222;
      $230 = $3;
      $2 = $230;
      $231 = $2;
      $1 = $231;
      $232 = $1;
      $233 = (($232) + 4|0);
      $234 = HEAP32[$233>>2]|0;
      $243 = $234;
     } else {
      $6 = $222;
      $235 = $6;
      $5 = $235;
      $236 = $5;
      $4 = $236;
      $237 = $4;
      $238 = HEAP8[$237>>0]|0;
      $239 = $238&255;
      $240 = $239 >> 1;
      $243 = $240;
     }
     $241 = $numDashes;
     $242 = (($243) - ($241))|0;
     $0 = $92;
     __THREW__ = 0;
     invoke_viiiii(404,($91|0),($arg|0),($220|0),($242|0),($92|0));
     $244 = __THREW__; __THREW__ = 0;
     $245 = $244&1;
     if ($245) {
      label = 28;
      break;
     }
     __THREW__ = 0;
     $246 = (invoke_iii(411,($219|0),($91|0))|0);
     $247 = __THREW__; __THREW__ = 0;
     $248 = $247&1;
     if ($248) {
      label = 43;
      break;
     }
     $12 = $246;
     $13 = 2040;
     $249 = $12;
     $250 = $13;
     __THREW__ = 0;
     (invoke_iii(409,($249|0),($250|0))|0);
     $251 = __THREW__; __THREW__ = 0;
     $252 = $251&1;
     if ($252) {
      label = 43;
      break;
     }
     __THREW__ = 0;
     invoke_vi(403,($91|0));
     $253 = __THREW__; __THREW__ = 0;
     $254 = $253&1;
     if ($254) {
      label = 28;
      break;
     }
    } else {
     $259 = (($97) + 12|0);
     $260 = $numDashes;
     $261 = $pos;
     $262 = $numDashes;
     $263 = (($261) - ($262))|0;
     $14 = $94;
     __THREW__ = 0;
     invoke_viiiii(404,($93|0),($arg|0),($260|0),($263|0),($94|0));
     $264 = __THREW__; __THREW__ = 0;
     $265 = $264&1;
     if ($265) {
      label = 28;
      break;
     }
     __THREW__ = 0;
     $266 = (invoke_iii(411,($259|0),($93|0))|0);
     $267 = __THREW__; __THREW__ = 0;
     $268 = $267&1;
     if ($268) {
      label = 55;
      break;
     }
     $269 = $pos;
     $270 = (($269) + 1)|0;
     $39 = $arg;
     $271 = $39;
     $38 = $271;
     $272 = $38;
     $37 = $272;
     $273 = $37;
     $36 = $273;
     $274 = $36;
     $35 = $274;
     $275 = $35;
     $276 = HEAP8[$275>>0]|0;
     $277 = $276&255;
     $278 = $277 & 1;
     $279 = ($278|0)!=(0);
     if ($279) {
      $31 = $272;
      $280 = $31;
      $30 = $280;
      $281 = $30;
      $29 = $281;
      $282 = $29;
      $283 = (($282) + 4|0);
      $284 = HEAP32[$283>>2]|0;
      $292 = $284;
     } else {
      $34 = $272;
      $285 = $34;
      $33 = $285;
      $286 = $33;
      $32 = $286;
      $287 = $32;
      $288 = HEAP8[$287>>0]|0;
      $289 = $288&255;
      $290 = $289 >> 1;
      $292 = $290;
     }
     $291 = (($292) - 1)|0;
     $40 = $96;
     __THREW__ = 0;
     invoke_viiiii(404,($95|0),($arg|0),($270|0),($291|0),($96|0));
     $293 = __THREW__; __THREW__ = 0;
     $294 = $293&1;
     if ($294) {
      label = 55;
      break;
     }
     __THREW__ = 0;
     (invoke_iii(402,($266|0),($95|0))|0);
     $295 = __THREW__; __THREW__ = 0;
     $296 = $295&1;
     if ($296) {
      label = 56;
      break;
     }
     __THREW__ = 0;
     invoke_vi(403,($95|0));
     $297 = __THREW__; __THREW__ = 0;
     $298 = $297&1;
     if ($298) {
      label = 55;
      break;
     }
     __THREW__ = 0;
     invoke_vi(403,($93|0));
     $299 = __THREW__; __THREW__ = 0;
     $300 = $299&1;
     if ($300) {
      label = 28;
      break;
     }
    }
    $309 = $i;
    $310 = (($309) + 1)|0;
    $i = $310;
   }
   do {
    if ((label|0) == 28) {
     $188 = ___cxa_find_matching_catch()|0;
     $189 = tempRet0;
     $89 = $188;
     $90 = $189;
     label = 66;
    }
    else if ((label|0) == 43) {
     $255 = ___cxa_find_matching_catch()|0;
     $256 = tempRet0;
     $89 = $255;
     $90 = $256;
     __THREW__ = 0;
     invoke_vi(403,($91|0));
     $257 = __THREW__; __THREW__ = 0;
     $258 = $257&1;
     if ($258) {
      $327 = ___cxa_find_matching_catch(0|0)|0;
      $328 = tempRet0;
      ___clang_call_terminate($327);
      // unreachable;
     } else {
      label = 66;
      break;
     }
    }
    else if ((label|0) == 55) {
     $301 = ___cxa_find_matching_catch()|0;
     $302 = tempRet0;
     $89 = $301;
     $90 = $302;
     label = 58;
    }
    else if ((label|0) == 56) {
     $303 = ___cxa_find_matching_catch()|0;
     $304 = tempRet0;
     $89 = $303;
     $90 = $304;
     __THREW__ = 0;
     invoke_vi(403,($95|0));
     $305 = __THREW__; __THREW__ = 0;
     $306 = $305&1;
     if ($306) {
      $327 = ___cxa_find_matching_catch(0|0)|0;
      $328 = tempRet0;
      ___clang_call_terminate($327);
      // unreachable;
     } else {
      label = 58;
      break;
     }
    }
    else if ((label|0) == 62) {
     __THREW__ = 0;
     invoke_vi(403,($arg|0));
     $311 = __THREW__; __THREW__ = 0;
     $312 = $311&1;
     if ($312) {
      $186 = ___cxa_find_matching_catch()|0;
      $187 = tempRet0;
      $89 = $186;
      $90 = $187;
      break;
     }
     __THREW__ = 0;
     invoke_vi(412,($args|0));
     $313 = __THREW__; __THREW__ = 0;
     $314 = $313&1;
     if ($314) {
      label = 26;
      break L10;
     }
     __THREW__ = 0;
     invoke_vi(403,($val_str|0));
     $315 = __THREW__; __THREW__ = 0;
     $316 = $315&1;
     if ($316) {
      $182 = ___cxa_find_matching_catch()|0;
      $183 = tempRet0;
      $89 = $182;
      $90 = $183;
      break L10;
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($token);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   do {
    if ((label|0) == 58) {
     __THREW__ = 0;
     invoke_vi(403,($93|0));
     $307 = __THREW__; __THREW__ = 0;
     $308 = $307&1;
     if ($308) {
      $327 = ___cxa_find_matching_catch(0|0)|0;
      $328 = tempRet0;
      ___clang_call_terminate($327);
      // unreachable;
     } else {
      label = 66;
      break;
     }
    }
   } while(0);
   do {
    if ((label|0) == 66) {
     __THREW__ = 0;
     invoke_vi(403,($arg|0));
     $317 = __THREW__; __THREW__ = 0;
     $318 = $317&1;
     if ($318) {
      $327 = ___cxa_find_matching_catch(0|0)|0;
      $328 = tempRet0;
      ___clang_call_terminate($327);
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(412,($args|0));
   $319 = __THREW__; __THREW__ = 0;
   $320 = $319&1;
   if ($320) {
    $327 = ___cxa_find_matching_catch(0|0)|0;
    $328 = tempRet0;
    ___clang_call_terminate($327);
    // unreachable;
   } else {
    label = 70;
    break;
   }
  }
 } while(0);
 if ((label|0) == 26) {
  $184 = ___cxa_find_matching_catch()|0;
  $185 = tempRet0;
  $89 = $184;
  $90 = $185;
  label = 70;
 }
 do {
  if ((label|0) == 70) {
   __THREW__ = 0;
   invoke_vi(403,($val_str|0));
   $321 = __THREW__; __THREW__ = 0;
   $322 = $321&1;
   if ($322) {
    $327 = ___cxa_find_matching_catch(0|0)|0;
    $328 = tempRet0;
    ___clang_call_terminate($327);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(403,($token|0));
 $323 = __THREW__; __THREW__ = 0;
 $324 = $323&1;
 if ($324) {
  $327 = ___cxa_find_matching_catch(0|0)|0;
  $328 = tempRet0;
  ___clang_call_terminate($327);
  // unreachable;
 }
 $325 = $89;
 $326 = $90;
 ___resumeException($325|0);
 // unreachable;
}
function __ZN12CmdArgReaderC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $7 = sp + 56|0;
 $8 = sp + 57|0;
 $10 = sp;
 $12 = sp + 58|0;
 $13 = sp + 59|0;
 $14 = $this;
 $17 = $14;
 $11 = $17;
 $18 = $11;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $9 = $12;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEEEENS_19__map_value_compareIS7_SE_NS_4lessIS7_EELb1EEENS5_ISE_EEEC2ERKSI_($18,$12);
 $19 = (($17) + 12|0);
 $6 = $19;
 $20 = $6;
 ;HEAP8[$5+0>>0]=HEAP8[$8+0>>0]|0;
 $4 = $7;
 __THREW__ = 0;
 invoke_vii(408,($20|0),($7|0));
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 if (!($22)) {
  $23 = (($17) + 24|0);
  $3 = $23;
  $24 = $3;
  $2 = $24;
  $25 = (($17) + 28|0);
  $1 = $25;
  $26 = $1;
  $0 = $26;
  STACKTOP = sp;return;
 }
 $27 = ___cxa_find_matching_catch()|0;
 $28 = tempRet0;
 $15 = $27;
 $16 = $28;
 __THREW__ = 0;
 invoke_vi(413,($17|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $33 = ___cxa_find_matching_catch(0|0)|0;
  $34 = tempRet0;
  ___clang_call_terminate($33);
  // unreachable;
 }
 $31 = $15;
 $32 = $16;
 ___resumeException($31|0);
 // unreachable;
}
function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vii(414,($3|0),(2232|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $6 = (($3) + 64|0);
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($6);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 $9 = (($3) + 64|0);
 __THREW__ = 0;
 invoke_vi(415,($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 $12 = $1;
 $13 = $2;
 ___resumeException($12|0);
 // unreachable;
}
function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(1,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + -8|0);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 STACKTOP = sp;return;
}
function __ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + -8|0);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($2);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($5);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (2504 + 8|0);
 HEAP32[$3>>2] = $4;
 $5 = (($3) + 32|0);
 __THREW__ = 0;
 invoke_vi(403,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(83,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 $12 = $1;
 $13 = $2;
 ___resumeException($12|0);
 // unreachable;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(21,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$__way,$__wch) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $__way = $__way|0;
 $__wch = $__wch|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__noff = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 8|0;
 $6 = sp + 56|0;
 $26 = sp + 32|0;
 $42 = sp;
 $45 = sp + 40|0;
 $48 = sp + 24|0;
 $63 = sp + 64|0;
 $66 = sp + 16|0;
 $__noff = sp + 48|0;
 $65 = $this;
 $69 = $66;
 $70 = $69;
 HEAP32[$70>>2] = $0;
 $71 = (($69) + 4)|0;
 $72 = $71;
 HEAP32[$72>>2] = $1;
 $67 = $__way;
 $68 = $__wch;
 $73 = $65;
 $74 = (($73) + 44|0);
 $75 = HEAP32[$74>>2]|0;
 $64 = $73;
 $76 = $64;
 $77 = (($76) + 24|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($75>>>0)<($78>>>0);
 if ($79) {
  $2 = $73;
  $80 = $2;
  $81 = (($80) + 24|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($73) + 44|0);
  HEAP32[$83>>2] = $82;
 }
 $84 = $68;
 $85 = $84 & 24;
 $86 = ($85|0)==(0);
 if ($86) {
  $3 = $agg$result;
  $87 = $4;
  $88 = $87;
  HEAP32[$88>>2] = -1;
  $89 = (($87) + 4)|0;
  $90 = $89;
  HEAP32[$90>>2] = -1;
  $91 = $3;
  ;HEAP32[$91+0>>2]=0|0;HEAP32[$91+4>>2]=0|0;
  $92 = (($91) + 8|0);
  $93 = $4;
  $94 = $93;
  $95 = HEAP32[$94>>2]|0;
  $96 = (($93) + 4)|0;
  $97 = $96;
  $98 = HEAP32[$97>>2]|0;
  $99 = $92;
  $100 = $99;
  HEAP32[$100>>2] = $95;
  $101 = (($99) + 4)|0;
  $102 = $101;
  HEAP32[$102>>2] = $98;
  STACKTOP = sp;return;
 }
 $103 = $68;
 $104 = $103 & 24;
 $105 = ($104|0)==(24);
 if ($105) {
  $106 = $67;
  $107 = ($106|0)==(1);
  if ($107) {
   $5 = $agg$result;
   $108 = $6;
   $109 = $108;
   HEAP32[$109>>2] = -1;
   $110 = (($108) + 4)|0;
   $111 = $110;
   HEAP32[$111>>2] = -1;
   $112 = $5;
   ;HEAP32[$112+0>>2]=0|0;HEAP32[$112+4>>2]=0|0;
   $113 = (($112) + 8|0);
   $114 = $6;
   $115 = $114;
   $116 = HEAP32[$115>>2]|0;
   $117 = (($114) + 4)|0;
   $118 = $117;
   $119 = HEAP32[$118>>2]|0;
   $120 = $113;
   $121 = $120;
   HEAP32[$121>>2] = $116;
   $122 = (($120) + 4)|0;
   $123 = $122;
   HEAP32[$123>>2] = $119;
   STACKTOP = sp;return;
  }
 }
 $124 = $67;
 if ((($124|0) == 0)) {
  $125 = $__noff;
  $126 = $125;
  HEAP32[$126>>2] = 0;
  $127 = (($125) + 4)|0;
  $128 = $127;
  HEAP32[$128>>2] = 0;
 } else if ((($124|0) == 1)) {
  $129 = $68;
  $130 = $129 & 8;
  $131 = ($130|0)!=(0);
  if ($131) {
   $7 = $73;
   $132 = $7;
   $133 = (($132) + 12|0);
   $134 = HEAP32[$133>>2]|0;
   $8 = $73;
   $135 = $8;
   $136 = (($135) + 8|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = $134;
   $139 = $137;
   $140 = (($138) - ($139))|0;
   $141 = ($140|0)<(0);
   $142 = $141 << 31 >> 31;
   $143 = $__noff;
   $144 = $143;
   HEAP32[$144>>2] = $140;
   $145 = (($143) + 4)|0;
   $146 = $145;
   HEAP32[$146>>2] = $142;
  } else {
   $9 = $73;
   $147 = $9;
   $148 = (($147) + 24|0);
   $149 = HEAP32[$148>>2]|0;
   $10 = $73;
   $150 = $10;
   $151 = (($150) + 20|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = $149;
   $154 = $152;
   $155 = (($153) - ($154))|0;
   $156 = ($155|0)<(0);
   $157 = $156 << 31 >> 31;
   $158 = $__noff;
   $159 = $158;
   HEAP32[$159>>2] = $155;
   $160 = (($158) + 4)|0;
   $161 = $160;
   HEAP32[$161>>2] = $157;
  }
 } else if ((($124|0) == 2)) {
  $162 = (($73) + 44|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($73) + 32|0);
  $24 = $164;
  $165 = $24;
  $23 = $165;
  $166 = $23;
  $22 = $166;
  $167 = $22;
  $21 = $167;
  $168 = $21;
  $20 = $168;
  $169 = $20;
  $170 = HEAP8[$169>>0]|0;
  $171 = $170&255;
  $172 = $171 & 1;
  $173 = ($172|0)!=(0);
  if ($173) {
   $14 = $166;
   $174 = $14;
   $13 = $174;
   $175 = $13;
   $12 = $175;
   $176 = $12;
   $177 = (($176) + 8|0);
   $178 = HEAP32[$177>>2]|0;
   $185 = $178;
  } else {
   $19 = $166;
   $179 = $19;
   $18 = $179;
   $180 = $18;
   $17 = $180;
   $181 = $17;
   $182 = (($181) + 1|0);
   $16 = $182;
   $183 = $16;
   $15 = $183;
   $184 = $15;
   $185 = $184;
  }
  $11 = $185;
  $186 = $11;
  $187 = $163;
  $188 = $186;
  $189 = (($187) - ($188))|0;
  $190 = ($189|0)<(0);
  $191 = $190 << 31 >> 31;
  $192 = $__noff;
  $193 = $192;
  HEAP32[$193>>2] = $189;
  $194 = (($192) + 4)|0;
  $195 = $194;
  HEAP32[$195>>2] = $191;
 } else {
  $25 = $agg$result;
  $196 = $26;
  $197 = $196;
  HEAP32[$197>>2] = -1;
  $198 = (($196) + 4)|0;
  $199 = $198;
  HEAP32[$199>>2] = -1;
  $200 = $25;
  ;HEAP32[$200+0>>2]=0|0;HEAP32[$200+4>>2]=0|0;
  $201 = (($200) + 8|0);
  $202 = $26;
  $203 = $202;
  $204 = HEAP32[$203>>2]|0;
  $205 = (($202) + 4)|0;
  $206 = $205;
  $207 = HEAP32[$206>>2]|0;
  $208 = $201;
  $209 = $208;
  HEAP32[$209>>2] = $204;
  $210 = (($208) + 4)|0;
  $211 = $210;
  HEAP32[$211>>2] = $207;
  STACKTOP = sp;return;
 }
 $212 = $66;
 $213 = $212;
 $214 = HEAP32[$213>>2]|0;
 $215 = (($212) + 4)|0;
 $216 = $215;
 $217 = HEAP32[$216>>2]|0;
 $218 = $__noff;
 $219 = $218;
 $220 = HEAP32[$219>>2]|0;
 $221 = (($218) + 4)|0;
 $222 = $221;
 $223 = HEAP32[$222>>2]|0;
 $224 = (_i64Add(($220|0),($223|0),($214|0),($217|0))|0);
 $225 = tempRet0;
 $226 = $__noff;
 $227 = $226;
 HEAP32[$227>>2] = $224;
 $228 = (($226) + 4)|0;
 $229 = $228;
 HEAP32[$229>>2] = $225;
 $230 = $__noff;
 $231 = $230;
 $232 = HEAP32[$231>>2]|0;
 $233 = (($230) + 4)|0;
 $234 = $233;
 $235 = HEAP32[$234>>2]|0;
 $236 = ($235|0)<(0);
 if (!($236)) {
  $237 = (($73) + 44|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = (($73) + 32|0);
  $40 = $239;
  $240 = $40;
  $39 = $240;
  $241 = $39;
  $38 = $241;
  $242 = $38;
  $37 = $242;
  $243 = $37;
  $36 = $243;
  $244 = $36;
  $245 = HEAP8[$244>>0]|0;
  $246 = $245&255;
  $247 = $246 & 1;
  $248 = ($247|0)!=(0);
  if ($248) {
   $30 = $241;
   $249 = $30;
   $29 = $249;
   $250 = $29;
   $28 = $250;
   $251 = $28;
   $252 = (($251) + 8|0);
   $253 = HEAP32[$252>>2]|0;
   $260 = $253;
  } else {
   $35 = $241;
   $254 = $35;
   $34 = $254;
   $255 = $34;
   $33 = $255;
   $256 = $33;
   $257 = (($256) + 1|0);
   $32 = $257;
   $258 = $32;
   $31 = $258;
   $259 = $31;
   $260 = $259;
  }
  $27 = $260;
  $261 = $27;
  $262 = $238;
  $263 = $261;
  $264 = (($262) - ($263))|0;
  $265 = ($264|0)<(0);
  $266 = $265 << 31 >> 31;
  $267 = $__noff;
  $268 = $267;
  $269 = HEAP32[$268>>2]|0;
  $270 = (($267) + 4)|0;
  $271 = $270;
  $272 = HEAP32[$271>>2]|0;
  $273 = ($266|0)<($272|0);
  $274 = ($264>>>0)<($269>>>0);
  $275 = ($266|0)==($272|0);
  $276 = $275 & $274;
  $277 = $273 | $276;
  if (!($277)) {
   $294 = $__noff;
   $295 = $294;
   $296 = HEAP32[$295>>2]|0;
   $297 = (($294) + 4)|0;
   $298 = $297;
   $299 = HEAP32[$298>>2]|0;
   $300 = ($296|0)!=(0);
   $301 = ($299|0)!=(0);
   $302 = $300 | $301;
   if ($302) {
    $303 = $68;
    $304 = $303 & 8;
    $305 = ($304|0)!=(0);
    if ($305) {
     $43 = $73;
     $306 = $43;
     $307 = (($306) + 12|0);
     $308 = HEAP32[$307>>2]|0;
     $309 = ($308|0)==(0|0);
     if ($309) {
      $44 = $agg$result;
      $310 = $45;
      $311 = $310;
      HEAP32[$311>>2] = -1;
      $312 = (($310) + 4)|0;
      $313 = $312;
      HEAP32[$313>>2] = -1;
      $314 = $44;
      ;HEAP32[$314+0>>2]=0|0;HEAP32[$314+4>>2]=0|0;
      $315 = (($314) + 8|0);
      $316 = $45;
      $317 = $316;
      $318 = HEAP32[$317>>2]|0;
      $319 = (($316) + 4)|0;
      $320 = $319;
      $321 = HEAP32[$320>>2]|0;
      $322 = $315;
      $323 = $322;
      HEAP32[$323>>2] = $318;
      $324 = (($322) + 4)|0;
      $325 = $324;
      HEAP32[$325>>2] = $321;
      STACKTOP = sp;return;
     }
    }
    $326 = $68;
    $327 = $326 & 16;
    $328 = ($327|0)!=(0);
    if ($328) {
     $46 = $73;
     $329 = $46;
     $330 = (($329) + 24|0);
     $331 = HEAP32[$330>>2]|0;
     $332 = ($331|0)==(0|0);
     if ($332) {
      $47 = $agg$result;
      $333 = $48;
      $334 = $333;
      HEAP32[$334>>2] = -1;
      $335 = (($333) + 4)|0;
      $336 = $335;
      HEAP32[$336>>2] = -1;
      $337 = $47;
      ;HEAP32[$337+0>>2]=0|0;HEAP32[$337+4>>2]=0|0;
      $338 = (($337) + 8|0);
      $339 = $48;
      $340 = $339;
      $341 = HEAP32[$340>>2]|0;
      $342 = (($339) + 4)|0;
      $343 = $342;
      $344 = HEAP32[$343>>2]|0;
      $345 = $338;
      $346 = $345;
      HEAP32[$346>>2] = $341;
      $347 = (($345) + 4)|0;
      $348 = $347;
      HEAP32[$348>>2] = $344;
      STACKTOP = sp;return;
     }
    }
   }
   $349 = $68;
   $350 = $349 & 8;
   $351 = ($350|0)!=(0);
   if ($351) {
    $49 = $73;
    $352 = $49;
    $353 = (($352) + 8|0);
    $354 = HEAP32[$353>>2]|0;
    $50 = $73;
    $355 = $50;
    $356 = (($355) + 8|0);
    $357 = HEAP32[$356>>2]|0;
    $358 = $__noff;
    $359 = $358;
    $360 = HEAP32[$359>>2]|0;
    $361 = (($358) + 4)|0;
    $362 = $361;
    $363 = HEAP32[$362>>2]|0;
    $364 = (($357) + ($360)|0);
    $365 = (($73) + 44|0);
    $366 = HEAP32[$365>>2]|0;
    $51 = $73;
    $52 = $354;
    $53 = $364;
    $54 = $366;
    $367 = $51;
    $368 = $52;
    $369 = (($367) + 8|0);
    HEAP32[$369>>2] = $368;
    $370 = $53;
    $371 = (($367) + 12|0);
    HEAP32[$371>>2] = $370;
    $372 = $54;
    $373 = (($367) + 16|0);
    HEAP32[$373>>2] = $372;
   }
   $374 = $68;
   $375 = $374 & 16;
   $376 = ($375|0)!=(0);
   if ($376) {
    $55 = $73;
    $377 = $55;
    $378 = (($377) + 20|0);
    $379 = HEAP32[$378>>2]|0;
    $56 = $73;
    $380 = $56;
    $381 = (($380) + 28|0);
    $382 = HEAP32[$381>>2]|0;
    $57 = $73;
    $58 = $379;
    $59 = $382;
    $383 = $57;
    $384 = $58;
    $385 = (($383) + 24|0);
    HEAP32[$385>>2] = $384;
    $386 = (($383) + 20|0);
    HEAP32[$386>>2] = $384;
    $387 = $59;
    $388 = (($383) + 28|0);
    HEAP32[$388>>2] = $387;
    $389 = $__noff;
    $390 = $389;
    $391 = HEAP32[$390>>2]|0;
    $392 = (($389) + 4)|0;
    $393 = $392;
    $394 = HEAP32[$393>>2]|0;
    $60 = $73;
    $61 = $391;
    $395 = $60;
    $396 = $61;
    $397 = (($395) + 24|0);
    $398 = HEAP32[$397>>2]|0;
    $399 = (($398) + ($396)|0);
    HEAP32[$397>>2] = $399;
   }
   $400 = $__noff;
   $401 = $400;
   $402 = HEAP32[$401>>2]|0;
   $403 = (($400) + 4)|0;
   $404 = $403;
   $405 = HEAP32[$404>>2]|0;
   $62 = $agg$result;
   $406 = $63;
   $407 = $406;
   HEAP32[$407>>2] = $402;
   $408 = (($406) + 4)|0;
   $409 = $408;
   HEAP32[$409>>2] = $405;
   $410 = $62;
   ;HEAP32[$410+0>>2]=0|0;HEAP32[$410+4>>2]=0|0;
   $411 = (($410) + 8|0);
   $412 = $63;
   $413 = $412;
   $414 = HEAP32[$413>>2]|0;
   $415 = (($412) + 4)|0;
   $416 = $415;
   $417 = HEAP32[$416>>2]|0;
   $418 = $411;
   $419 = $418;
   HEAP32[$419>>2] = $414;
   $420 = (($418) + 4)|0;
   $421 = $420;
   HEAP32[$421>>2] = $417;
   STACKTOP = sp;return;
  }
 }
 $41 = $agg$result;
 $278 = $42;
 $279 = $278;
 HEAP32[$279>>2] = -1;
 $280 = (($278) + 4)|0;
 $281 = $280;
 HEAP32[$281>>2] = -1;
 $282 = $41;
 ;HEAP32[$282+0>>2]=0|0;HEAP32[$282+4>>2]=0|0;
 $283 = (($282) + 8|0);
 $284 = $42;
 $285 = $284;
 $286 = HEAP32[$285>>2]|0;
 $287 = (($284) + 4)|0;
 $288 = $287;
 $289 = HEAP32[$288>>2]|0;
 $290 = $283;
 $291 = $290;
 HEAP32[$291>>2] = $286;
 $292 = (($290) + 4)|0;
 $293 = $292;
 HEAP32[$293>>2] = $289;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$__sp,$__wch) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__sp = $__sp|0;
 $__wch = $__wch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $__wch;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $0 = $__sp;
 $7 = $0;
 $8 = (($7) + 8|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 FUNCTION_TABLE_viiiiii[$6 & 511]($agg$result,$3,$11,$14,0,$15);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = $this;
 $14 = $13;
 $15 = (($14) + 44|0);
 $16 = HEAP32[$15>>2]|0;
 $11 = $14;
 $17 = $11;
 $18 = (($17) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16>>>0)<($19>>>0);
 if ($20) {
  $10 = $14;
  $21 = $10;
  $22 = (($21) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($14) + 44|0);
  HEAP32[$24>>2] = $23;
 }
 $25 = (($14) + 48|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 & 8;
 $28 = ($27|0)!=(0);
 do {
  if ($28) {
   $9 = $14;
   $29 = $9;
   $30 = (($29) + 16|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($14) + 44|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31>>>0)<($33>>>0);
   if ($34) {
    $0 = $14;
    $35 = $0;
    $36 = (($35) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    $1 = $14;
    $38 = $1;
    $39 = (($38) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($14) + 44|0);
    $42 = HEAP32[$41>>2]|0;
    $2 = $14;
    $3 = $37;
    $4 = $40;
    $5 = $42;
    $43 = $2;
    $44 = $3;
    $45 = (($43) + 8|0);
    HEAP32[$45>>2] = $44;
    $46 = $4;
    $47 = (($43) + 12|0);
    HEAP32[$47>>2] = $46;
    $48 = $5;
    $49 = (($43) + 16|0);
    HEAP32[$49>>2] = $48;
   }
   $6 = $14;
   $50 = $6;
   $51 = (($50) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $7 = $14;
   $53 = $7;
   $54 = (($53) + 16|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($52>>>0)<($55>>>0);
   if (!($56)) {
    break;
   }
   $8 = $14;
   $57 = $8;
   $58 = (($57) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP8[$59>>0]|0;
   $61 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($60)|0);
   $12 = $61;
   $63 = $12;
   STACKTOP = sp;return ($63|0);
  }
 } while(0);
 $62 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $12 = $62;
 $63 = $12;
 STACKTOP = sp;return ($63|0);
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $__c;
 $21 = $19;
 $22 = (($21) + 44|0);
 $23 = HEAP32[$22>>2]|0;
 $17 = $21;
 $24 = $17;
 $25 = (($24) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($23>>>0)<($26>>>0);
 if ($27) {
  $16 = $21;
  $28 = $16;
  $29 = (($28) + 24|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($21) + 44|0);
  HEAP32[$31>>2] = $30;
 }
 $14 = $21;
 $32 = $14;
 $33 = (($32) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $7 = $21;
 $35 = $7;
 $36 = (($35) + 12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($34>>>0)<($37>>>0);
 do {
  if ($38) {
   $39 = $20;
   $40 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $41 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($39,$40)|0);
   if ($41) {
    $5 = $21;
    $42 = $5;
    $43 = (($42) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $4 = $21;
    $45 = $4;
    $46 = (($45) + 12|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) + -1|0);
    $49 = (($21) + 44|0);
    $50 = HEAP32[$49>>2]|0;
    $0 = $21;
    $1 = $44;
    $2 = $48;
    $3 = $50;
    $51 = $0;
    $52 = $1;
    $53 = (($51) + 8|0);
    HEAP32[$53>>2] = $52;
    $54 = $2;
    $55 = (($51) + 12|0);
    HEAP32[$55>>2] = $54;
    $56 = $3;
    $57 = (($51) + 16|0);
    HEAP32[$57>>2] = $56;
    $58 = $20;
    $59 = (__ZNSt3__111char_traitsIcE7not_eofEi($58)|0);
    $18 = $59;
    $95 = $18;
    STACKTOP = sp;return ($95|0);
   }
   $60 = (($21) + 48|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & 16;
   $63 = ($62|0)!=(0);
   if (!($63)) {
    $64 = $20;
    $65 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($64)|0);
    $6 = $21;
    $66 = $6;
    $67 = (($66) + 12|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (($68) + -1|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = (__ZNSt3__111char_traitsIcE2eqEcc($65,$70)|0);
    if (!($71)) {
     break;
    }
   }
   $8 = $21;
   $72 = $8;
   $73 = (($72) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $9 = $21;
   $75 = $9;
   $76 = (($75) + 12|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($77) + -1|0);
   $79 = (($21) + 44|0);
   $80 = HEAP32[$79>>2]|0;
   $10 = $21;
   $11 = $74;
   $12 = $78;
   $13 = $80;
   $81 = $10;
   $82 = $11;
   $83 = (($81) + 8|0);
   HEAP32[$83>>2] = $82;
   $84 = $12;
   $85 = (($81) + 12|0);
   HEAP32[$85>>2] = $84;
   $86 = $13;
   $87 = (($81) + 16|0);
   HEAP32[$87>>2] = $86;
   $88 = $20;
   $89 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($88)|0);
   $15 = $21;
   $90 = $15;
   $91 = (($90) + 12|0);
   $92 = HEAP32[$91>>2]|0;
   HEAP8[$92>>0] = $89;
   $93 = $20;
   $18 = $93;
   $95 = $18;
   STACKTOP = sp;return ($95|0);
  }
 } while(0);
 $94 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $18 = $94;
 $95 = $18;
 STACKTOP = sp;return ($95|0);
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__hm = 0, $__ninp = 0, $__nout = 0, $__p = 0, $__p1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $47 = sp;
 $50 = sp + 348|0;
 $83 = sp + 292|0;
 $78 = $this;
 $79 = $__c;
 $84 = $78;
 $85 = $79;
 $86 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $87 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($85,$86)|0);
 if ($87) {
  $299 = $79;
  $300 = (__ZNSt3__111char_traitsIcE7not_eofEi($299)|0);
  $77 = $300;
  $301 = $77;
  STACKTOP = sp;return ($301|0);
 }
 $76 = $84;
 $88 = $76;
 $89 = (($88) + 12|0);
 $90 = HEAP32[$89>>2]|0;
 $75 = $84;
 $91 = $75;
 $92 = (($91) + 8|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = $90;
 $95 = $93;
 $96 = (($94) - ($95))|0;
 $__ninp = $96;
 $71 = $84;
 $97 = $71;
 $98 = (($97) + 24|0);
 $99 = HEAP32[$98>>2]|0;
 $70 = $84;
 $100 = $70;
 $101 = (($100) + 28|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($99|0)==($102|0);
 do {
  if ($103) {
   $104 = (($84) + 48|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $105 & 16;
   $107 = ($106|0)!=(0);
   if (!($107)) {
    $108 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
    $77 = $108;
    $301 = $77;
    STACKTOP = sp;return ($301|0);
   }
   $69 = $84;
   $109 = $69;
   $110 = (($109) + 24|0);
   $111 = HEAP32[$110>>2]|0;
   $40 = $84;
   $112 = $40;
   $113 = (($112) + 20|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = $111;
   $116 = $114;
   $117 = (($115) - ($116))|0;
   $__nout = $117;
   $118 = (($84) + 44|0);
   $119 = HEAP32[$118>>2]|0;
   $7 = $84;
   $120 = $7;
   $121 = (($120) + 20|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = $119;
   $124 = $122;
   $125 = (($123) - ($124))|0;
   $__hm = $125;
   $126 = (($84) + 32|0);
   __THREW__ = 0;
   invoke_vii(416,($126|0),0);
   $127 = __THREW__; __THREW__ = 0;
   $128 = $127&1;
   if (!($128)) {
    $129 = (($84) + 32|0);
    $130 = (($84) + 32|0);
    $6 = $130;
    $131 = $6;
    $5 = $131;
    $132 = $5;
    $4 = $132;
    $133 = $4;
    $3 = $133;
    $134 = $3;
    $135 = HEAP8[$134>>0]|0;
    $136 = $135&255;
    $137 = $136 & 1;
    $138 = ($137|0)!=(0);
    if ($138) {
     $2 = $131;
     $139 = $2;
     $1 = $139;
     $140 = $1;
     $0 = $140;
     $141 = $0;
     $142 = HEAP32[$141>>2]|0;
     $143 = $142 & -2;
     $145 = $143;
    } else {
     $145 = 11;
    }
    $144 = (($145) - 1)|0;
    $8 = $129;
    $9 = $144;
    $146 = $8;
    $147 = $9;
    __THREW__ = 0;
    invoke_viii(417,($146|0),($147|0),0);
    $148 = __THREW__; __THREW__ = 0;
    $149 = $148&1;
    if (!($149)) {
     $150 = (($84) + 32|0);
     $23 = $150;
     $151 = $23;
     $22 = $151;
     $152 = $22;
     $21 = $152;
     $153 = $21;
     $20 = $153;
     $154 = $20;
     $19 = $154;
     $155 = $19;
     $156 = HEAP8[$155>>0]|0;
     $157 = $156&255;
     $158 = $157 & 1;
     $159 = ($158|0)!=(0);
     if ($159) {
      $13 = $152;
      $160 = $13;
      $12 = $160;
      $161 = $12;
      $11 = $161;
      $162 = $11;
      $163 = (($162) + 8|0);
      $164 = HEAP32[$163>>2]|0;
      $171 = $164;
     } else {
      $18 = $152;
      $165 = $18;
      $17 = $165;
      $166 = $17;
      $16 = $166;
      $167 = $16;
      $168 = (($167) + 1|0);
      $15 = $168;
      $169 = $15;
      $14 = $169;
      $170 = $14;
      $171 = $170;
     }
     $10 = $171;
     $172 = $10;
     $__p = $172;
     $173 = $__p;
     $174 = $__p;
     $175 = (($84) + 32|0);
     $33 = $175;
     $176 = $33;
     $32 = $176;
     $177 = $32;
     $31 = $177;
     $178 = $31;
     $30 = $178;
     $179 = $30;
     $180 = HEAP8[$179>>0]|0;
     $181 = $180&255;
     $182 = $181 & 1;
     $183 = ($182|0)!=(0);
     if ($183) {
      $26 = $176;
      $184 = $26;
      $25 = $184;
      $185 = $25;
      $24 = $185;
      $186 = $24;
      $187 = (($186) + 4|0);
      $188 = HEAP32[$187>>2]|0;
      $196 = $188;
     } else {
      $29 = $176;
      $189 = $29;
      $28 = $189;
      $190 = $28;
      $27 = $190;
      $191 = $27;
      $192 = HEAP8[$191>>0]|0;
      $193 = $192&255;
      $194 = $193 >> 1;
      $196 = $194;
     }
     $195 = (($174) + ($196)|0);
     $34 = $84;
     $35 = $173;
     $36 = $195;
     $197 = $34;
     $198 = $35;
     $199 = (($197) + 24|0);
     HEAP32[$199>>2] = $198;
     $200 = (($197) + 20|0);
     HEAP32[$200>>2] = $198;
     $201 = $36;
     $202 = (($197) + 28|0);
     HEAP32[$202>>2] = $201;
     $203 = $__nout;
     $37 = $84;
     $38 = $203;
     $204 = $37;
     $205 = $38;
     $206 = (($204) + 24|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = (($207) + ($205)|0);
     HEAP32[$206>>2] = $208;
     $39 = $84;
     $209 = $39;
     $210 = (($209) + 20|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = $__hm;
     $213 = (($211) + ($212)|0);
     $214 = (($84) + 44|0);
     HEAP32[$214>>2] = $213;
     break;
    }
   }
   $215 = ___cxa_find_matching_catch(0|0)|0;
   $216 = tempRet0;
   $80 = $215;
   $81 = $216;
   $217 = $80;
   (___cxa_begin_catch(($217|0))|0);
   $218 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $77 = $218;
   $82 = 1;
   ___cxa_end_catch();
   $301 = $77;
   STACKTOP = sp;return ($301|0);
  }
 } while(0);
 $41 = $84;
 $219 = $41;
 $220 = (($219) + 24|0);
 $221 = HEAP32[$220>>2]|0;
 $222 = (($221) + 1|0);
 HEAP32[$83>>2] = $222;
 $223 = (($84) + 44|0);
 $48 = $83;
 $49 = $223;
 $224 = $48;
 $225 = $49;
 ;HEAP8[$47+0>>0]=HEAP8[$50+0>>0]|0;
 $45 = $224;
 $46 = $225;
 $226 = $45;
 $227 = $46;
 $42 = $47;
 $43 = $226;
 $44 = $227;
 $228 = $43;
 $229 = HEAP32[$228>>2]|0;
 $230 = $44;
 $231 = HEAP32[$230>>2]|0;
 $232 = ($229>>>0)<($231>>>0);
 if ($232) {
  $233 = $46;
  $236 = $233;
 } else {
  $234 = $45;
  $236 = $234;
 }
 $235 = HEAP32[$236>>2]|0;
 $237 = (($84) + 44|0);
 HEAP32[$237>>2] = $235;
 $238 = (($84) + 48|0);
 $239 = HEAP32[$238>>2]|0;
 $240 = $239 & 8;
 $241 = ($240|0)!=(0);
 if ($241) {
  $242 = (($84) + 32|0);
  $64 = $242;
  $243 = $64;
  $63 = $243;
  $244 = $63;
  $62 = $244;
  $245 = $62;
  $61 = $245;
  $246 = $61;
  $60 = $246;
  $247 = $60;
  $248 = HEAP8[$247>>0]|0;
  $249 = $248&255;
  $250 = $249 & 1;
  $251 = ($250|0)!=(0);
  if ($251) {
   $54 = $244;
   $252 = $54;
   $53 = $252;
   $253 = $53;
   $52 = $253;
   $254 = $52;
   $255 = (($254) + 8|0);
   $256 = HEAP32[$255>>2]|0;
   $263 = $256;
  } else {
   $59 = $244;
   $257 = $59;
   $58 = $257;
   $258 = $58;
   $57 = $258;
   $259 = $57;
   $260 = (($259) + 1|0);
   $56 = $260;
   $261 = $56;
   $55 = $261;
   $262 = $55;
   $263 = $262;
  }
  $51 = $263;
  $264 = $51;
  $__p1 = $264;
  $265 = $__p1;
  $266 = $__p1;
  $267 = $__ninp;
  $268 = (($266) + ($267)|0);
  $269 = (($84) + 44|0);
  $270 = HEAP32[$269>>2]|0;
  $65 = $84;
  $66 = $265;
  $67 = $268;
  $68 = $270;
  $271 = $65;
  $272 = $66;
  $273 = (($271) + 8|0);
  HEAP32[$273>>2] = $272;
  $274 = $67;
  $275 = (($271) + 12|0);
  HEAP32[$275>>2] = $274;
  $276 = $68;
  $277 = (($271) + 16|0);
  HEAP32[$277>>2] = $276;
 }
 $278 = $79;
 $279 = $278&255;
 $73 = $84;
 $74 = $279;
 $280 = $73;
 $281 = (($280) + 24|0);
 $282 = HEAP32[$281>>2]|0;
 $283 = (($280) + 28|0);
 $284 = HEAP32[$283>>2]|0;
 $285 = ($282|0)==($284|0);
 if ($285) {
  $286 = HEAP32[$280>>2]|0;
  $287 = (($286) + 52|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = $74;
  $290 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($289)|0);
  $291 = (FUNCTION_TABLE_iii[$288 & 1023]($280,$290)|0);
  $72 = $291;
 } else {
  $292 = $74;
  $293 = (($280) + 24|0);
  $294 = HEAP32[$293>>2]|0;
  $295 = (($294) + 1|0);
  HEAP32[$293>>2] = $295;
  HEAP8[$294>>0] = $292;
  $296 = $74;
  $297 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($296)|0);
  $72 = $297;
 }
 $298 = $72;
 $77 = $298;
 $301 = $77;
 STACKTOP = sp;return ($301|0);
}
function __ZN9ExceptionISt11logic_errorED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt11logic_errorD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN9ExceptionISt11logic_errorED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9ExceptionISt11logic_errorED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN9ExceptionISt13runtime_errorED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt13runtime_errorD2Ev($1);
 STACKTOP = sp;return;
}
function __ZN9ExceptionISt13runtime_errorED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN9ExceptionISt13runtime_errorED2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN9ExceptionISt11logic_errorE8throw_itEPKciS3_($file,$line,$detailed) {
 $file = $file|0;
 $line = $line|0;
 $detailed = $detailed|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i$i = 0, $__a$i$i$i1$i$i = 0, $__i$i$i$i$i$i = 0, $__i$i$i$i2$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $s = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $21 = sp + 344|0;
 $s = sp + 80|0;
 $43 = sp + 316|0;
 $38 = $file;
 $39 = $line;
 $40 = $detailed;
 $34 = $s;
 $35 = 24;
 $45 = $34;
 $46 = (($45) + 64|0);
 $33 = $46;
 $47 = $33;
 $32 = $47;
 $48 = $32;
 $49 = (8392 + 8|0);
 HEAP32[$48>>2] = $49;
 $50 = (7992 + 8|0);
 HEAP32[$47>>2] = $50;
 $51 = (2168 + 12|0);
 HEAP32[$45>>2] = $51;
 $52 = (($45) + 64|0);
 $53 = (2168 + 52|0);
 HEAP32[$52>>2] = $53;
 $54 = (($45) + 8|0);
 $55 = (2168 + 32|0);
 HEAP32[$54>>2] = $55;
 $56 = (($45) + 12|0);
 $29 = $45;
 $57 = (2232 + 4|0);
 $30 = $57;
 $31 = $56;
 $58 = $29;
 $59 = $30;
 $60 = (($59) + 4|0);
 $61 = $31;
 $26 = $58;
 $27 = $60;
 $28 = $61;
 $62 = $26;
 $63 = $27;
 $64 = HEAP32[$63>>2]|0;
 HEAP32[$62>>2] = $64;
 $65 = (($63) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$62>>2]|0;
 $68 = (($67) + -12|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($62) + ($69)|0);
 HEAP32[$70>>2] = $66;
 $71 = (($62) + 4|0);
 HEAP32[$71>>2] = 0;
 $72 = HEAP32[$62>>2]|0;
 $73 = (($72) + -12|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($62) + ($74)|0);
 $76 = $28;
 $24 = $75;
 $25 = $76;
 $77 = $24;
 $78 = $25;
 __THREW__ = 0;
 invoke_vii(418,($77|0),($78|0));
 $79 = __THREW__; __THREW__ = 0;
 $80 = $79&1;
 do {
  if ($80) {
   $166 = ___cxa_find_matching_catch()|0;
   $167 = tempRet0;
   $36 = $166;
   $37 = $167;
  } else {
   $81 = (($77) + 72|0);
   HEAP32[$81>>2] = 0;
   $82 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $83 = (($77) + 76|0);
   HEAP32[$83>>2] = $82;
   $84 = (($58) + 8|0);
   $85 = (($59) + 12|0);
   $22 = $84;
   $23 = $85;
   $86 = $22;
   $87 = $23;
   $88 = HEAP32[$87>>2]|0;
   HEAP32[$86>>2] = $88;
   $89 = (($87) + 4|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = HEAP32[$86>>2]|0;
   $92 = (($91) + -12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($86) + ($93)|0);
   HEAP32[$94>>2] = $90;
   $95 = HEAP32[$59>>2]|0;
   HEAP32[$58>>2] = $95;
   $96 = (($59) + 20|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = HEAP32[$58>>2]|0;
   $99 = (($98) + -12|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = (($58) + ($100)|0);
   HEAP32[$101>>2] = $97;
   $102 = (($59) + 24|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (($58) + 8|0);
   HEAP32[$104>>2] = $103;
   $105 = (2168 + 12|0);
   HEAP32[$45>>2] = $105;
   $106 = (($45) + 64|0);
   $107 = (2168 + 52|0);
   HEAP32[$106>>2] = $107;
   $108 = (($45) + 8|0);
   $109 = (2168 + 32|0);
   HEAP32[$108>>2] = $109;
   $110 = (($45) + 12|0);
   $111 = $35;
   $17 = $110;
   $18 = $111;
   $112 = $17;
   __THREW__ = 0;
   invoke_vi(419,($112|0));
   $113 = __THREW__; __THREW__ = 0;
   $114 = $113&1;
   do {
    if ($114) {
     $168 = ___cxa_find_matching_catch()|0;
     $169 = tempRet0;
     $eh$lpad$body$i$index2Z2D = $169;$eh$lpad$body$i$indexZ2D = $168;
    } else {
     $115 = (2504 + 8|0);
     HEAP32[$112>>2] = $115;
     $116 = (($112) + 32|0);
     $16 = $116;
     $117 = $16;
     $15 = $117;
     $118 = $15;
     $14 = $118;
     $119 = $14;
     $13 = $119;
     $120 = $13;
     $12 = $120;
     $11 = $118;
     $121 = $11;
     $10 = $121;
     $122 = $10;
     $9 = $122;
     $123 = $9;
     $__a$i$i$i$i$i = $123;
     $__i$i$i$i$i$i = 0;
     while(1) {
      $124 = $__i$i$i$i$i$i;
      $125 = ($124>>>0)<(3);
      if (!($125)) {
       break;
      }
      $126 = $__i$i$i$i$i$i;
      $127 = $__a$i$i$i$i$i;
      $128 = (($127) + ($126<<2)|0);
      HEAP32[$128>>2] = 0;
      $129 = $__i$i$i$i$i$i;
      $130 = (($129) + 1)|0;
      $__i$i$i$i$i$i = $130;
     }
     $131 = (($112) + 44|0);
     HEAP32[$131>>2] = 0;
     $132 = (($112) + 48|0);
     $133 = $18;
     HEAP32[$132>>2] = $133;
     $8 = $21;
     $134 = $8;
     $7 = $134;
     $135 = $7;
     $6 = $135;
     $136 = $6;
     $5 = $136;
     $137 = $5;
     $4 = $137;
     $3 = $135;
     $138 = $3;
     $2 = $138;
     $139 = $2;
     $1 = $139;
     $140 = $1;
     $__a$i$i$i1$i$i = $140;
     $__i$i$i$i2$i$i = 0;
     while(1) {
      $141 = $__i$i$i$i2$i$i;
      $142 = ($141>>>0)<(3);
      if (!($142)) {
       break;
      }
      $143 = $__i$i$i$i2$i$i;
      $144 = $__a$i$i$i1$i$i;
      $145 = (($144) + ($143<<2)|0);
      HEAP32[$145>>2] = 0;
      $146 = $__i$i$i$i2$i$i;
      $147 = (($146) + 1)|0;
      $__i$i$i$i2$i$i = $147;
     }
     __THREW__ = 0;
     invoke_vii(420,($112|0),($21|0));
     $148 = __THREW__; __THREW__ = 0;
     $149 = $148&1;
     do {
      if ($149) {
       $154 = ___cxa_find_matching_catch()|0;
       $155 = tempRet0;
       $19 = $154;
       $20 = $155;
       __THREW__ = 0;
       invoke_vi(403,($21|0));
       $156 = __THREW__; __THREW__ = 0;
       $157 = $156&1;
       if ($157) {
        $164 = ___cxa_find_matching_catch(0|0)|0;
        $165 = tempRet0;
        ___clang_call_terminate($164);
        // unreachable;
       } else {
        break;
       }
      } else {
       __THREW__ = 0;
       invoke_vi(403,($21|0));
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        $152 = ___cxa_find_matching_catch()|0;
        $153 = tempRet0;
        $19 = $152;
        $20 = $153;
        break;
       }
       $179 = (($s) + 8|0);
       __THREW__ = 0;
       $180 = (invoke_iii(421,($179|0),(2048|0))|0);
       $181 = __THREW__; __THREW__ = 0;
       $182 = $181&1;
       if ($182) {
        label = 37;
       } else {
        $183 = $38;
        __THREW__ = 0;
        $184 = (invoke_iii(421,($180|0),($183|0))|0);
        $185 = __THREW__; __THREW__ = 0;
        $186 = $185&1;
        if ($186) {
         label = 37;
        } else {
         __THREW__ = 0;
         $187 = (invoke_iii(421,($184|0),(2072|0))|0);
         $188 = __THREW__; __THREW__ = 0;
         $189 = $188&1;
         if ($189) {
          label = 37;
         } else {
          $190 = $39;
          __THREW__ = 0;
          $191 = (invoke_iii(422,($187|0),($190|0))|0);
          $192 = __THREW__; __THREW__ = 0;
          $193 = $192&1;
          if ($193) {
           label = 37;
          } else {
           __THREW__ = 0;
           $194 = (invoke_iii(421,($191|0),(2088|0))|0);
           $195 = __THREW__; __THREW__ = 0;
           $196 = $195&1;
           if ($196) {
            label = 37;
           } else {
            __THREW__ = 0;
            $197 = (invoke_iii(421,($194|0),(2096|0))|0);
            $198 = __THREW__; __THREW__ = 0;
            $199 = $198&1;
            if ($199) {
             label = 37;
            } else {
             $200 = $40;
             __THREW__ = 0;
             $201 = (invoke_iii(421,($197|0),($200|0))|0);
             $202 = __THREW__; __THREW__ = 0;
             $203 = $202&1;
             if ($203) {
              label = 37;
             } else {
              __THREW__ = 0;
              (invoke_iii(421,($201|0),(2088|0))|0);
              $204 = __THREW__; __THREW__ = 0;
              $205 = $204&1;
              if ($205) {
               label = 37;
              } else {
               $206 = (___cxa_allocate_exception(8)|0);
               $$expand_i1_val = 1;
               $44 = $$expand_i1_val;
               $0 = $s;
               $207 = $0;
               $208 = (($207) + 12|0);
               __THREW__ = 0;
               invoke_vii(423,($43|0),($208|0));
               $209 = __THREW__; __THREW__ = 0;
               $210 = $209&1;
               do {
                if ($210) {
                 $217 = ___cxa_find_matching_catch()|0;
                 $218 = tempRet0;
                 $41 = $217;
                 $42 = $218;
                } else {
                 __THREW__ = 0;
                 invoke_vii(424,($206|0),($43|0));
                 $211 = __THREW__; __THREW__ = 0;
                 $212 = $211&1;
                 do {
                  if (!($212)) {
                   $$expand_i1_val7 = 0;
                   $44 = $$expand_i1_val7;
                   __THREW__ = 0;
                   invoke_viii(425,($206|0),(2152|0),(35|0));
                   $213 = __THREW__; __THREW__ = 0;
                   $214 = $213&1;
                   if ($214) {
                    break;
                   }
                   // unreachable;
                  }
                 } while(0);
                 $219 = ___cxa_find_matching_catch()|0;
                 $220 = tempRet0;
                 $41 = $219;
                 $42 = $220;
                 __THREW__ = 0;
                 invoke_vi(403,($43|0));
                 $221 = __THREW__; __THREW__ = 0;
                 $222 = $221&1;
                 if ($222) {
                  $228 = ___cxa_find_matching_catch(0|0)|0;
                  $229 = tempRet0;
                  ___clang_call_terminate($228);
                  // unreachable;
                 } else {
                  break;
                 }
                }
               } while(0);
               $$pre_trunc = $44;
               $223 = $$pre_trunc&1;
               if ($223) {
                ___cxa_free_exception(($206|0));
               }
              }
             }
            }
           }
          }
         }
        }
       }
       if ((label|0) == 37) {
        $215 = ___cxa_find_matching_catch()|0;
        $216 = tempRet0;
        $41 = $215;
        $42 = $216;
       }
       __THREW__ = 0;
       invoke_vi(1,($s|0));
       $224 = __THREW__; __THREW__ = 0;
       $225 = $224&1;
       if ($225) {
        $228 = ___cxa_find_matching_catch(0|0)|0;
        $229 = tempRet0;
        ___clang_call_terminate($228);
        // unreachable;
       }
       $226 = $41;
       $227 = $42;
       ___resumeException($226|0);
       // unreachable;
      }
     } while(0);
     __THREW__ = 0;
     invoke_vi(403,($116|0));
     $158 = __THREW__; __THREW__ = 0;
     $159 = $158&1;
     if ($159) {
      $164 = ___cxa_find_matching_catch(0|0)|0;
      $165 = tempRet0;
      ___clang_call_terminate($164);
      // unreachable;
     }
     __THREW__ = 0;
     invoke_vi(83,($112|0));
     $160 = __THREW__; __THREW__ = 0;
     $161 = $160&1;
     if ($161) {
      $164 = ___cxa_find_matching_catch(0|0)|0;
      $165 = tempRet0;
      ___clang_call_terminate($164);
      // unreachable;
     } else {
      $162 = $19;
      $163 = $20;
      $eh$lpad$body$i$index2Z2D = $163;$eh$lpad$body$i$indexZ2D = $162;
      break;
     }
    }
   } while(0);
   $36 = $eh$lpad$body$i$indexZ2D;
   $37 = $eh$lpad$body$i$index2Z2D;
   __THREW__ = 0;
   $170 = __THREW__; __THREW__ = 0;
   $171 = $170&1;
   if ($171) {
    $177 = ___cxa_find_matching_catch(0|0)|0;
    $178 = tempRet0;
    ___clang_call_terminate($177);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $172 = (($45) + 64|0);
 __THREW__ = 0;
 invoke_vi(415,($172|0));
 $173 = __THREW__; __THREW__ = 0;
 $174 = $173&1;
 if ($174) {
  $177 = ___cxa_find_matching_catch(0|0)|0;
  $178 = tempRet0;
  ___clang_call_terminate($177);
  // unreachable;
 } else {
  $175 = $36;
  $176 = $37;
  ___resumeException($175|0);
  // unreachable;
 }
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEEC2ERKSC_($this,$__comp) {
 $this = $this|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 72|0;
 $5 = sp;
 $8 = sp + 68|0;
 $9 = sp + 93|0;
 $10 = sp + 8|0;
 $23 = sp + 92|0;
 $21 = $this;
 $22 = $__comp;
 $24 = $21;
 $25 = (($24) + 4|0);
 $20 = $25;
 $26 = $20;
 $19 = $26;
 $27 = $19;
 $18 = $27;
 $17 = $27;
 $28 = $17;
 HEAP32[$28>>2] = 0;
 $29 = (($24) + 8|0);
 ;HEAP8[$10+0>>0]=HEAP8[$23+0>>0]|0;
 $7 = $29;
 HEAP32[$8>>2] = 0;
 $30 = $7;
 $6 = $8;
 $31 = $6;
 $32 = HEAP32[$31>>2]|0;
 $0 = $10;
 ;HEAP8[$5+0>>0]=HEAP8[$9+0>>0]|0;
 $3 = $30;
 HEAP32[$4>>2] = $32;
 $33 = $3;
 $2 = $5;
 $1 = $4;
 $34 = $1;
 $35 = HEAP32[$34>>2]|0;
 HEAP32[$33>>2] = $35;
 $15 = $24;
 $36 = $15;
 $37 = (($36) + 4|0);
 $14 = $37;
 $38 = $14;
 $13 = $38;
 $39 = $13;
 $12 = $39;
 $40 = $12;
 $11 = $40;
 $41 = $11;
 $16 = $24;
 $42 = $16;
 HEAP32[$42>>2] = $41;
 STACKTOP = sp;return;
}
function __ZN9ExceptionISt13runtime_errorE8throw_itEPKciS3_($file,$line,$detailed) {
 $file = $file|0;
 $line = $line|0;
 $detailed = $detailed|0;
 var $$expand_i1_val = 0, $$expand_i1_val7 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i$i = 0, $__a$i$i$i1$i$i = 0, $__i$i$i$i$i$i = 0, $__i$i$i$i2$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $s = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $21 = sp + 344|0;
 $s = sp + 80|0;
 $43 = sp + 316|0;
 $38 = $file;
 $39 = $line;
 $40 = $detailed;
 $34 = $s;
 $35 = 24;
 $45 = $34;
 $46 = (($45) + 64|0);
 $33 = $46;
 $47 = $33;
 $32 = $47;
 $48 = $32;
 $49 = (8392 + 8|0);
 HEAP32[$48>>2] = $49;
 $50 = (7992 + 8|0);
 HEAP32[$47>>2] = $50;
 $51 = (2168 + 12|0);
 HEAP32[$45>>2] = $51;
 $52 = (($45) + 64|0);
 $53 = (2168 + 52|0);
 HEAP32[$52>>2] = $53;
 $54 = (($45) + 8|0);
 $55 = (2168 + 32|0);
 HEAP32[$54>>2] = $55;
 $56 = (($45) + 12|0);
 $29 = $45;
 $57 = (2232 + 4|0);
 $30 = $57;
 $31 = $56;
 $58 = $29;
 $59 = $30;
 $60 = (($59) + 4|0);
 $61 = $31;
 $26 = $58;
 $27 = $60;
 $28 = $61;
 $62 = $26;
 $63 = $27;
 $64 = HEAP32[$63>>2]|0;
 HEAP32[$62>>2] = $64;
 $65 = (($63) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$62>>2]|0;
 $68 = (($67) + -12|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($62) + ($69)|0);
 HEAP32[$70>>2] = $66;
 $71 = (($62) + 4|0);
 HEAP32[$71>>2] = 0;
 $72 = HEAP32[$62>>2]|0;
 $73 = (($72) + -12|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($62) + ($74)|0);
 $76 = $28;
 $24 = $75;
 $25 = $76;
 $77 = $24;
 $78 = $25;
 __THREW__ = 0;
 invoke_vii(418,($77|0),($78|0));
 $79 = __THREW__; __THREW__ = 0;
 $80 = $79&1;
 do {
  if ($80) {
   $166 = ___cxa_find_matching_catch()|0;
   $167 = tempRet0;
   $36 = $166;
   $37 = $167;
  } else {
   $81 = (($77) + 72|0);
   HEAP32[$81>>2] = 0;
   $82 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $83 = (($77) + 76|0);
   HEAP32[$83>>2] = $82;
   $84 = (($58) + 8|0);
   $85 = (($59) + 12|0);
   $22 = $84;
   $23 = $85;
   $86 = $22;
   $87 = $23;
   $88 = HEAP32[$87>>2]|0;
   HEAP32[$86>>2] = $88;
   $89 = (($87) + 4|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = HEAP32[$86>>2]|0;
   $92 = (($91) + -12|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($86) + ($93)|0);
   HEAP32[$94>>2] = $90;
   $95 = HEAP32[$59>>2]|0;
   HEAP32[$58>>2] = $95;
   $96 = (($59) + 20|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = HEAP32[$58>>2]|0;
   $99 = (($98) + -12|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = (($58) + ($100)|0);
   HEAP32[$101>>2] = $97;
   $102 = (($59) + 24|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (($58) + 8|0);
   HEAP32[$104>>2] = $103;
   $105 = (2168 + 12|0);
   HEAP32[$45>>2] = $105;
   $106 = (($45) + 64|0);
   $107 = (2168 + 52|0);
   HEAP32[$106>>2] = $107;
   $108 = (($45) + 8|0);
   $109 = (2168 + 32|0);
   HEAP32[$108>>2] = $109;
   $110 = (($45) + 12|0);
   $111 = $35;
   $17 = $110;
   $18 = $111;
   $112 = $17;
   __THREW__ = 0;
   invoke_vi(419,($112|0));
   $113 = __THREW__; __THREW__ = 0;
   $114 = $113&1;
   do {
    if ($114) {
     $168 = ___cxa_find_matching_catch()|0;
     $169 = tempRet0;
     $eh$lpad$body$i$index2Z2D = $169;$eh$lpad$body$i$indexZ2D = $168;
    } else {
     $115 = (2504 + 8|0);
     HEAP32[$112>>2] = $115;
     $116 = (($112) + 32|0);
     $16 = $116;
     $117 = $16;
     $15 = $117;
     $118 = $15;
     $14 = $118;
     $119 = $14;
     $13 = $119;
     $120 = $13;
     $12 = $120;
     $11 = $118;
     $121 = $11;
     $10 = $121;
     $122 = $10;
     $9 = $122;
     $123 = $9;
     $__a$i$i$i$i$i = $123;
     $__i$i$i$i$i$i = 0;
     while(1) {
      $124 = $__i$i$i$i$i$i;
      $125 = ($124>>>0)<(3);
      if (!($125)) {
       break;
      }
      $126 = $__i$i$i$i$i$i;
      $127 = $__a$i$i$i$i$i;
      $128 = (($127) + ($126<<2)|0);
      HEAP32[$128>>2] = 0;
      $129 = $__i$i$i$i$i$i;
      $130 = (($129) + 1)|0;
      $__i$i$i$i$i$i = $130;
     }
     $131 = (($112) + 44|0);
     HEAP32[$131>>2] = 0;
     $132 = (($112) + 48|0);
     $133 = $18;
     HEAP32[$132>>2] = $133;
     $8 = $21;
     $134 = $8;
     $7 = $134;
     $135 = $7;
     $6 = $135;
     $136 = $6;
     $5 = $136;
     $137 = $5;
     $4 = $137;
     $3 = $135;
     $138 = $3;
     $2 = $138;
     $139 = $2;
     $1 = $139;
     $140 = $1;
     $__a$i$i$i1$i$i = $140;
     $__i$i$i$i2$i$i = 0;
     while(1) {
      $141 = $__i$i$i$i2$i$i;
      $142 = ($141>>>0)<(3);
      if (!($142)) {
       break;
      }
      $143 = $__i$i$i$i2$i$i;
      $144 = $__a$i$i$i1$i$i;
      $145 = (($144) + ($143<<2)|0);
      HEAP32[$145>>2] = 0;
      $146 = $__i$i$i$i2$i$i;
      $147 = (($146) + 1)|0;
      $__i$i$i$i2$i$i = $147;
     }
     __THREW__ = 0;
     invoke_vii(420,($112|0),($21|0));
     $148 = __THREW__; __THREW__ = 0;
     $149 = $148&1;
     do {
      if ($149) {
       $154 = ___cxa_find_matching_catch()|0;
       $155 = tempRet0;
       $19 = $154;
       $20 = $155;
       __THREW__ = 0;
       invoke_vi(403,($21|0));
       $156 = __THREW__; __THREW__ = 0;
       $157 = $156&1;
       if ($157) {
        $164 = ___cxa_find_matching_catch(0|0)|0;
        $165 = tempRet0;
        ___clang_call_terminate($164);
        // unreachable;
       } else {
        break;
       }
      } else {
       __THREW__ = 0;
       invoke_vi(403,($21|0));
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        $152 = ___cxa_find_matching_catch()|0;
        $153 = tempRet0;
        $19 = $152;
        $20 = $153;
        break;
       }
       $179 = (($s) + 8|0);
       __THREW__ = 0;
       $180 = (invoke_iii(421,($179|0),(2048|0))|0);
       $181 = __THREW__; __THREW__ = 0;
       $182 = $181&1;
       if ($182) {
        label = 37;
       } else {
        $183 = $38;
        __THREW__ = 0;
        $184 = (invoke_iii(421,($180|0),($183|0))|0);
        $185 = __THREW__; __THREW__ = 0;
        $186 = $185&1;
        if ($186) {
         label = 37;
        } else {
         __THREW__ = 0;
         $187 = (invoke_iii(421,($184|0),(2072|0))|0);
         $188 = __THREW__; __THREW__ = 0;
         $189 = $188&1;
         if ($189) {
          label = 37;
         } else {
          $190 = $39;
          __THREW__ = 0;
          $191 = (invoke_iii(422,($187|0),($190|0))|0);
          $192 = __THREW__; __THREW__ = 0;
          $193 = $192&1;
          if ($193) {
           label = 37;
          } else {
           __THREW__ = 0;
           $194 = (invoke_iii(421,($191|0),(2088|0))|0);
           $195 = __THREW__; __THREW__ = 0;
           $196 = $195&1;
           if ($196) {
            label = 37;
           } else {
            __THREW__ = 0;
            $197 = (invoke_iii(421,($194|0),(2096|0))|0);
            $198 = __THREW__; __THREW__ = 0;
            $199 = $198&1;
            if ($199) {
             label = 37;
            } else {
             $200 = $40;
             __THREW__ = 0;
             $201 = (invoke_iii(421,($197|0),($200|0))|0);
             $202 = __THREW__; __THREW__ = 0;
             $203 = $202&1;
             if ($203) {
              label = 37;
             } else {
              __THREW__ = 0;
              (invoke_iii(421,($201|0),(2088|0))|0);
              $204 = __THREW__; __THREW__ = 0;
              $205 = $204&1;
              if ($205) {
               label = 37;
              } else {
               $206 = (___cxa_allocate_exception(8)|0);
               $$expand_i1_val = 1;
               $44 = $$expand_i1_val;
               $0 = $s;
               $207 = $0;
               $208 = (($207) + 12|0);
               __THREW__ = 0;
               invoke_vii(423,($43|0),($208|0));
               $209 = __THREW__; __THREW__ = 0;
               $210 = $209&1;
               do {
                if ($210) {
                 $217 = ___cxa_find_matching_catch()|0;
                 $218 = tempRet0;
                 $41 = $217;
                 $42 = $218;
                } else {
                 __THREW__ = 0;
                 invoke_vii(426,($206|0),($43|0));
                 $211 = __THREW__; __THREW__ = 0;
                 $212 = $211&1;
                 do {
                  if (!($212)) {
                   $$expand_i1_val7 = 0;
                   $44 = $$expand_i1_val7;
                   __THREW__ = 0;
                   invoke_viii(425,($206|0),(2712|0),(38|0));
                   $213 = __THREW__; __THREW__ = 0;
                   $214 = $213&1;
                   if ($214) {
                    break;
                   }
                   // unreachable;
                  }
                 } while(0);
                 $219 = ___cxa_find_matching_catch()|0;
                 $220 = tempRet0;
                 $41 = $219;
                 $42 = $220;
                 __THREW__ = 0;
                 invoke_vi(403,($43|0));
                 $221 = __THREW__; __THREW__ = 0;
                 $222 = $221&1;
                 if ($222) {
                  $228 = ___cxa_find_matching_catch(0|0)|0;
                  $229 = tempRet0;
                  ___clang_call_terminate($228);
                  // unreachable;
                 } else {
                  break;
                 }
                }
               } while(0);
               $$pre_trunc = $44;
               $223 = $$pre_trunc&1;
               if ($223) {
                ___cxa_free_exception(($206|0));
               }
              }
             }
            }
           }
          }
         }
        }
       }
       if ((label|0) == 37) {
        $215 = ___cxa_find_matching_catch()|0;
        $216 = tempRet0;
        $41 = $215;
        $42 = $216;
       }
       __THREW__ = 0;
       invoke_vi(1,($s|0));
       $224 = __THREW__; __THREW__ = 0;
       $225 = $224&1;
       if ($225) {
        $228 = ___cxa_find_matching_catch(0|0)|0;
        $229 = tempRet0;
        ___clang_call_terminate($228);
        // unreachable;
       }
       $226 = $41;
       $227 = $42;
       ___resumeException($226|0);
       // unreachable;
      }
     } while(0);
     __THREW__ = 0;
     invoke_vi(403,($116|0));
     $158 = __THREW__; __THREW__ = 0;
     $159 = $158&1;
     if ($159) {
      $164 = ___cxa_find_matching_catch(0|0)|0;
      $165 = tempRet0;
      ___clang_call_terminate($164);
      // unreachable;
     }
     __THREW__ = 0;
     invoke_vi(83,($112|0));
     $160 = __THREW__; __THREW__ = 0;
     $161 = $160&1;
     if ($161) {
      $164 = ___cxa_find_matching_catch(0|0)|0;
      $165 = tempRet0;
      ___clang_call_terminate($164);
      // unreachable;
     } else {
      $162 = $19;
      $163 = $20;
      $eh$lpad$body$i$index2Z2D = $163;$eh$lpad$body$i$indexZ2D = $162;
      break;
     }
    }
   } while(0);
   $36 = $eh$lpad$body$i$indexZ2D;
   $37 = $eh$lpad$body$i$index2Z2D;
   __THREW__ = 0;
   $170 = __THREW__; __THREW__ = 0;
   $171 = $170&1;
   if ($171) {
    $177 = ___cxa_find_matching_catch(0|0)|0;
    $178 = tempRet0;
    ___clang_call_terminate($177);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $172 = (($45) + 64|0);
 __THREW__ = 0;
 invoke_vi(415,($172|0));
 $173 = __THREW__; __THREW__ = 0;
 $174 = $173&1;
 if ($174) {
  $177 = ___cxa_find_matching_catch(0|0)|0;
  $178 = tempRet0;
  ___clang_call_terminate($177);
  // unreachable;
 } else {
  $175 = $36;
  $176 = $37;
  ___resumeException($175|0);
  // unreachable;
 }
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEEixERSA_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__child = 0, $__h = 0, $__parent = 0, $__r = 0, $__t$i = 0, $__t$i$i = 0, $__tmp$i$i = 0, $__tmp$i$i11 = 0, $__tmp$i$i2 = 0, $__tmp$i$i20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 832|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 24|0;
 $9 = sp + 818|0;
 $13 = sp + 40|0;
 $16 = sp + 815|0;
 $40 = sp + 64|0;
 $43 = sp + 812|0;
 $47 = sp + 48|0;
 $50 = sp + 819|0;
 $82 = sp;
 $85 = sp + 817|0;
 $89 = sp + 32|0;
 $92 = sp + 814|0;
 $124 = sp + 488|0;
 $125 = sp + 72|0;
 $128 = sp + 576|0;
 $129 = sp + 584|0;
 $130 = sp + 8|0;
 $133 = sp + 608|0;
 $134 = sp + 56|0;
 $144 = sp + 80|0;
 $147 = sp + 816|0;
 $151 = sp + 16|0;
 $154 = sp + 813|0;
 $175 = sp + 728|0;
 $__parent = sp + 504|0;
 $178 = sp + 424|0;
 $__h = sp + 768|0;
 $179 = sp + 248|0;
 $180 = sp + 212|0;
 $176 = $this;
 $177 = $__k;
 $183 = $176;
 $184 = $177;
 $185 = (__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSA_($183,$__parent,$184)|0);
 $__child = $185;
 $186 = $__child;
 $187 = HEAP32[$186>>2]|0;
 $__r = $187;
 $188 = $__child;
 $189 = HEAP32[$188>>2]|0;
 $173 = $175;
 $174 = -1;
 $190 = $173;
 HEAP32[$190>>2] = 0;
 $191 = HEAP32[$175>>2]|0;
 HEAP32[$178>>2] = $191;
 $172 = $178;
 $192 = ($189|0)==(0|0);
 if (!($192)) {
  $396 = $__r;
  $397 = (($396) + 16|0);
  $398 = (($397) + 12|0);
  STACKTOP = sp;return ($398|0);
 }
 $193 = $177;
 __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEE25__construct_node_with_keyERSA_($180,$183,$193);
 $137 = $180;
 $194 = $137;
 $135 = $179;
 $136 = $194;
 $195 = $135;
 $196 = $136;
 HEAP32[$195>>2] = $196;
 ;HEAP8[$134+0>>0]=HEAP8[$179+0>>0]|0;HEAP8[$134+1>>0]=HEAP8[$179+1>>0]|0;HEAP8[$134+2>>0]=HEAP8[$179+2>>0]|0;HEAP8[$134+3>>0]=HEAP8[$179+3>>0]|0;
 $132 = $__h;
 $197 = $132;
 $131 = $134;
 $198 = $131;
 $199 = HEAP32[$198>>2]|0;
 $114 = $199;
 $200 = $114;
 $113 = $200;
 $201 = $113;
 $112 = $201;
 $202 = $112;
 $203 = HEAP32[$202>>2]|0;
 $__t$i$i = $203;
 $111 = $200;
 $204 = $111;
 $110 = $204;
 $205 = $110;
 HEAP32[$205>>2] = 0;
 $206 = $__t$i$i;
 $115 = $134;
 $207 = $115;
 $208 = HEAP32[$207>>2]|0;
 $118 = $208;
 $209 = $118;
 $117 = $209;
 $210 = $117;
 $116 = $210;
 $211 = $116;
 $212 = (($211) + 4|0);
 $119 = $212;
 $213 = $119;
 ;HEAP32[$133+0>>2]=HEAP32[$213+0>>2]|0;HEAP32[$133+4>>2]=HEAP32[$213+4>>2]|0;
 ;HEAP8[$130+0>>0]=HEAP8[$133+0>>0]|0;HEAP8[$130+1>>0]=HEAP8[$133+1>>0]|0;HEAP8[$130+2>>0]=HEAP8[$133+2>>0]|0;HEAP8[$130+3>>0]=HEAP8[$133+3>>0]|0;HEAP8[$130+4>>0]=HEAP8[$133+4>>0]|0;HEAP8[$130+5>>0]=HEAP8[$133+5>>0]|0;HEAP8[$130+6>>0]=HEAP8[$133+6>>0]|0;HEAP8[$130+7>>0]=HEAP8[$133+7>>0]|0;
 $127 = $197;
 HEAP32[$128>>2] = $206;
 $214 = $127;
 $126 = $128;
 $215 = $126;
 $216 = HEAP32[$215>>2]|0;
 $120 = $130;
 $217 = $120;
 ;HEAP32[$129+0>>2]=HEAP32[$217+0>>2]|0;HEAP32[$129+4>>2]=HEAP32[$217+4>>2]|0;
 ;HEAP8[$125+0>>0]=HEAP8[$129+0>>0]|0;HEAP8[$125+1>>0]=HEAP8[$129+1>>0]|0;HEAP8[$125+2>>0]=HEAP8[$129+2>>0]|0;HEAP8[$125+3>>0]=HEAP8[$129+3>>0]|0;HEAP8[$125+4>>0]=HEAP8[$129+4>>0]|0;HEAP8[$125+5>>0]=HEAP8[$129+5>>0]|0;HEAP8[$125+6>>0]=HEAP8[$129+6>>0]|0;HEAP8[$125+7>>0]=HEAP8[$129+7>>0]|0;
 $123 = $214;
 HEAP32[$124>>2] = $216;
 $218 = $123;
 $122 = $124;
 $219 = $122;
 $220 = HEAP32[$219>>2]|0;
 HEAP32[$218>>2] = $220;
 $221 = (($218) + 4|0);
 $121 = $125;
 $222 = $121;
 ;HEAP32[$221+0>>2]=HEAP32[$222+0>>2]|0;HEAP32[$221+4>>2]=HEAP32[$222+4>>2]|0;
 $109 = $180;
 $223 = $109;
 $107 = $223;
 $108 = 0;
 $224 = $107;
 $106 = $224;
 $225 = $106;
 $105 = $225;
 $226 = $105;
 $227 = HEAP32[$226>>2]|0;
 $__tmp$i$i2 = $227;
 $228 = $108;
 $79 = $224;
 $229 = $79;
 $78 = $229;
 $230 = $78;
 HEAP32[$230>>2] = $228;
 $231 = $__tmp$i$i2;
 $232 = ($231|0)!=(0|0);
 if ($232) {
  $77 = $224;
  $233 = $77;
  $76 = $233;
  $234 = $76;
  $235 = (($234) + 4|0);
  $236 = $__tmp$i$i2;
  $101 = $235;
  $102 = $236;
  $237 = $101;
  $238 = (($237) + 5|0);
  $239 = HEAP8[$238>>0]|0;
  $240 = $239&1;
  do {
   if ($240) {
    $241 = HEAP32[$237>>2]|0;
    $242 = $102;
    $243 = (($242) + 16|0);
    $244 = (($243) + 12|0);
    $100 = $244;
    $245 = $100;
    $90 = $241;
    $91 = $245;
    $246 = $90;
    $247 = $91;
    ;HEAP8[$89+0>>0]=HEAP8[$92+0>>0]|0;
    $87 = $246;
    $88 = $247;
    $248 = $88;
    __THREW__ = 0;
    invoke_vi(403,($248|0));
    $249 = __THREW__; __THREW__ = 0;
    $250 = $249&1;
    if ($250) {
     $251 = ___cxa_find_matching_catch()|0;
     $252 = tempRet0;
     $103 = $251;
     $104 = $252;
     $253 = $103;
     ___cxa_call_unexpected(($253|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $254 = (($237) + 4|0);
  $255 = HEAP8[$254>>0]|0;
  $256 = $255&1;
  do {
   if ($256) {
    $257 = HEAP32[$237>>2]|0;
    $258 = $102;
    $259 = (($258) + 16|0);
    $86 = $259;
    $260 = $86;
    $83 = $257;
    $84 = $260;
    $261 = $83;
    $262 = $84;
    ;HEAP8[$82+0>>0]=HEAP8[$85+0>>0]|0;
    $80 = $261;
    $81 = $262;
    $263 = $81;
    __THREW__ = 0;
    invoke_vi(403,($263|0));
    $264 = __THREW__; __THREW__ = 0;
    $265 = $264&1;
    if ($265) {
     $251 = ___cxa_find_matching_catch()|0;
     $252 = tempRet0;
     $103 = $251;
     $104 = $252;
     $253 = $103;
     ___cxa_call_unexpected(($253|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $266 = $102;
  $267 = ($266|0)!=(0|0);
  if ($267) {
   $268 = HEAP32[$237>>2]|0;
   $269 = $102;
   $97 = $268;
   $98 = $269;
   $99 = 1;
   $270 = $97;
   $271 = $98;
   $272 = $99;
   $94 = $270;
   $95 = $271;
   $96 = $272;
   $273 = $95;
   $93 = $273;
   $274 = $93;
   __ZdlPv($274);
  }
 }
 $275 = HEAP32[$__parent>>2]|0;
 $276 = $__child;
 $75 = $__h;
 $277 = $75;
 $74 = $277;
 $278 = $74;
 $73 = $278;
 $279 = $73;
 $280 = HEAP32[$279>>2]|0;
 __THREW__ = 0;
 invoke_viiii(427,($183|0),($275|0),($276|0),($280|0));
 $281 = __THREW__; __THREW__ = 0;
 $282 = $281&1;
 if (!($282)) {
  $72 = $__h;
  $283 = $72;
  $71 = $283;
  $284 = $71;
  $70 = $284;
  $285 = $70;
  $286 = HEAP32[$285>>2]|0;
  $__t$i = $286;
  $69 = $283;
  $287 = $69;
  $68 = $287;
  $288 = $68;
  HEAP32[$288>>2] = 0;
  $289 = $__t$i;
  $__r = $289;
  $67 = $__h;
  $290 = $67;
  $65 = $290;
  $66 = 0;
  $291 = $65;
  $64 = $291;
  $292 = $64;
  $63 = $292;
  $293 = $63;
  $294 = HEAP32[$293>>2]|0;
  $__tmp$i$i11 = $294;
  $295 = $66;
  $37 = $291;
  $296 = $37;
  $36 = $296;
  $297 = $36;
  HEAP32[$297>>2] = $295;
  $298 = $__tmp$i$i11;
  $299 = ($298|0)!=(0|0);
  if ($299) {
   $35 = $291;
   $300 = $35;
   $34 = $300;
   $301 = $34;
   $302 = (($301) + 4|0);
   $303 = $__tmp$i$i11;
   $59 = $302;
   $60 = $303;
   $304 = $59;
   $305 = (($304) + 5|0);
   $306 = HEAP8[$305>>0]|0;
   $307 = $306&1;
   do {
    if ($307) {
     $308 = HEAP32[$304>>2]|0;
     $309 = $60;
     $310 = (($309) + 16|0);
     $311 = (($310) + 12|0);
     $58 = $311;
     $312 = $58;
     $48 = $308;
     $49 = $312;
     $313 = $48;
     $314 = $49;
     ;HEAP8[$47+0>>0]=HEAP8[$50+0>>0]|0;
     $45 = $313;
     $46 = $314;
     $315 = $46;
     __THREW__ = 0;
     invoke_vi(403,($315|0));
     $316 = __THREW__; __THREW__ = 0;
     $317 = $316&1;
     if ($317) {
      $318 = ___cxa_find_matching_catch()|0;
      $319 = tempRet0;
      $61 = $318;
      $62 = $319;
      $320 = $61;
      ___cxa_call_unexpected(($320|0));
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   $321 = (($304) + 4|0);
   $322 = HEAP8[$321>>0]|0;
   $323 = $322&1;
   do {
    if ($323) {
     $324 = HEAP32[$304>>2]|0;
     $325 = $60;
     $326 = (($325) + 16|0);
     $44 = $326;
     $327 = $44;
     $41 = $324;
     $42 = $327;
     $328 = $41;
     $329 = $42;
     ;HEAP8[$40+0>>0]=HEAP8[$43+0>>0]|0;
     $38 = $328;
     $39 = $329;
     $330 = $39;
     __THREW__ = 0;
     invoke_vi(403,($330|0));
     $331 = __THREW__; __THREW__ = 0;
     $332 = $331&1;
     if ($332) {
      $318 = ___cxa_find_matching_catch()|0;
      $319 = tempRet0;
      $61 = $318;
      $62 = $319;
      $320 = $61;
      ___cxa_call_unexpected(($320|0));
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   $333 = $60;
   $334 = ($333|0)!=(0|0);
   if ($334) {
    $335 = HEAP32[$304>>2]|0;
    $336 = $60;
    $55 = $335;
    $56 = $336;
    $57 = 1;
    $337 = $55;
    $338 = $56;
    $339 = $57;
    $52 = $337;
    $53 = $338;
    $54 = $339;
    $340 = $53;
    $51 = $340;
    $341 = $51;
    __ZdlPv($341);
   }
  }
  $396 = $__r;
  $397 = (($396) + 16|0);
  $398 = (($397) + 12|0);
  STACKTOP = sp;return ($398|0);
 }
 $342 = ___cxa_find_matching_catch()|0;
 $343 = tempRet0;
 $181 = $342;
 $182 = $343;
 $171 = $__h;
 $344 = $171;
 $169 = $344;
 $170 = 0;
 $345 = $169;
 $168 = $345;
 $346 = $168;
 $167 = $346;
 $347 = $167;
 $348 = HEAP32[$347>>2]|0;
 $__tmp$i$i = $348;
 $349 = $170;
 $141 = $345;
 $350 = $141;
 $140 = $350;
 $351 = $140;
 HEAP32[$351>>2] = $349;
 $352 = $__tmp$i$i;
 $353 = ($352|0)!=(0|0);
 if ($353) {
  $139 = $345;
  $354 = $139;
  $138 = $354;
  $355 = $138;
  $356 = (($355) + 4|0);
  $357 = $__tmp$i$i;
  $163 = $356;
  $164 = $357;
  $358 = $163;
  $359 = (($358) + 5|0);
  $360 = HEAP8[$359>>0]|0;
  $361 = $360&1;
  do {
   if ($361) {
    $362 = HEAP32[$358>>2]|0;
    $363 = $164;
    $364 = (($363) + 16|0);
    $365 = (($364) + 12|0);
    $162 = $365;
    $366 = $162;
    $152 = $362;
    $153 = $366;
    $367 = $152;
    $368 = $153;
    ;HEAP8[$151+0>>0]=HEAP8[$154+0>>0]|0;
    $149 = $367;
    $150 = $368;
    $369 = $150;
    __THREW__ = 0;
    invoke_vi(403,($369|0));
    $370 = __THREW__; __THREW__ = 0;
    $371 = $370&1;
    if ($371) {
     $372 = ___cxa_find_matching_catch(0|0)|0;
     $373 = tempRet0;
     $165 = $372;
     $166 = $373;
     $374 = $165;
     ___cxa_call_unexpected(($374|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $375 = (($358) + 4|0);
  $376 = HEAP8[$375>>0]|0;
  $377 = $376&1;
  do {
   if ($377) {
    $378 = HEAP32[$358>>2]|0;
    $379 = $164;
    $380 = (($379) + 16|0);
    $148 = $380;
    $381 = $148;
    $145 = $378;
    $146 = $381;
    $382 = $145;
    $383 = $146;
    ;HEAP8[$144+0>>0]=HEAP8[$147+0>>0]|0;
    $142 = $382;
    $143 = $383;
    $384 = $143;
    __THREW__ = 0;
    invoke_vi(403,($384|0));
    $385 = __THREW__; __THREW__ = 0;
    $386 = $385&1;
    if ($386) {
     $372 = ___cxa_find_matching_catch(0|0)|0;
     $373 = tempRet0;
     $165 = $372;
     $166 = $373;
     $374 = $165;
     ___cxa_call_unexpected(($374|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $387 = $164;
  $388 = ($387|0)!=(0|0);
  if ($388) {
   $389 = HEAP32[$358>>2]|0;
   $390 = $164;
   $159 = $389;
   $160 = $390;
   $161 = 1;
   $391 = $159;
   $392 = $160;
   $393 = $161;
   $156 = $391;
   $157 = $392;
   $158 = $393;
   $394 = $157;
   $155 = $394;
   $395 = $155;
   __ZdlPv($395);
  }
 }
 $399 = $181;
 $400 = $182;
 ___resumeException($399|0);
 // unreachable;
 return 0|0;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEEEENS_19__map_value_compareIS7_SE_NS_4lessIS7_EELb1EEENS5_ISE_EEEC2ERKSI_($this,$__comp) {
 $this = $this|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 72|0;
 $5 = sp;
 $8 = sp + 68|0;
 $9 = sp + 93|0;
 $10 = sp + 8|0;
 $23 = sp + 92|0;
 $21 = $this;
 $22 = $__comp;
 $24 = $21;
 $25 = (($24) + 4|0);
 $20 = $25;
 $26 = $20;
 $19 = $26;
 $27 = $19;
 $18 = $27;
 $17 = $27;
 $28 = $17;
 HEAP32[$28>>2] = 0;
 $29 = (($24) + 8|0);
 ;HEAP8[$10+0>>0]=HEAP8[$23+0>>0]|0;
 $7 = $29;
 HEAP32[$8>>2] = 0;
 $30 = $7;
 $6 = $8;
 $31 = $6;
 $32 = HEAP32[$31>>2]|0;
 $0 = $10;
 ;HEAP8[$5+0>>0]=HEAP8[$9+0>>0]|0;
 $3 = $30;
 HEAP32[$4>>2] = $32;
 $33 = $3;
 $2 = $5;
 $1 = $4;
 $34 = $1;
 $35 = HEAP32[$34>>2]|0;
 HEAP32[$33>>2] = $35;
 $15 = $24;
 $36 = $15;
 $37 = (($36) + 4|0);
 $14 = $37;
 $38 = $14;
 $13 = $38;
 $39 = $13;
 $12 = $39;
 $40 = $12;
 $11 = $40;
 $41 = $11;
 $16 = $24;
 $42 = $16;
 HEAP32[$42>>2] = $41;
 STACKTOP = sp;return;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEENS_4lessIS6_EENS4_INS7_IKS6_SC_EEEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEEEENS_19__map_value_compareIS7_SE_NS_4lessIS7_EELb1EEENS5_ISE_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $vtt;
 $4 = $0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$4>>2] = $6;
 $7 = (($5) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$4>>2]|0;
 $10 = (($9) + -12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($4) + ($11)|0);
 HEAP32[$12>>2] = $8;
 $13 = (($5) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($4) + 8|0);
 HEAP32[$15>>2] = $14;
 $16 = (($4) + 12|0);
 __THREW__ = 0;
 invoke_vi(21,($16|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 $2 = $19;
 $3 = $20;
 __THREW__ = 0;
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 if ($22) {
  $25 = ___cxa_find_matching_catch(0|0)|0;
  $26 = tempRet0;
  ___clang_call_terminate($25);
  // unreachable;
 }
 $23 = $2;
 $24 = $3;
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__111char_traitsIcE11to_int_typeEc($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = $1&255;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__111char_traitsIcE3eofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__111char_traitsIcE11eq_int_typeEii($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNSt3__111char_traitsIcE7not_eofEi($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $3 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($1,$2)|0);
 if ($3) {
  $4 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $5 = $4 ^ -1;
  $7 = $5;
  STACKTOP = sp;return ($7|0);
 } else {
  $6 = $0;
  $7 = $6;
  STACKTOP = sp;return ($7|0);
 }
 return 0|0;
}
function __ZNSt3__111char_traitsIcE12to_char_typeEi($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = $1&255;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__111char_traitsIcE2eqEcc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $0;
 $3 = $2 << 24 >> 24;
 $4 = $1;
 $5 = $4 << 24 >> 24;
 $6 = ($3|0)==($5|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $132 = $this;
 $133 = $__s;
 $134 = $132;
 $135 = (($134) + 32|0);
 $136 = $133;
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($135,$136)|0);
 $137 = (($134) + 44|0);
 HEAP32[$137>>2] = 0;
 $138 = (($134) + 48|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = $139 & 8;
 $141 = ($140|0)!=(0);
 if ($141) {
  $142 = (($134) + 32|0);
  $131 = $142;
  $143 = $131;
  $130 = $143;
  $144 = $130;
  $129 = $144;
  $145 = $129;
  $128 = $145;
  $146 = $128;
  $127 = $146;
  $147 = $127;
  $148 = HEAP8[$147>>0]|0;
  $149 = $148&255;
  $150 = $149 & 1;
  $151 = ($150|0)!=(0);
  if ($151) {
   $121 = $144;
   $152 = $121;
   $120 = $152;
   $153 = $120;
   $119 = $153;
   $154 = $119;
   $155 = (($154) + 8|0);
   $156 = HEAP32[$155>>2]|0;
   $163 = $156;
  } else {
   $126 = $144;
   $157 = $126;
   $125 = $157;
   $158 = $125;
   $124 = $158;
   $159 = $124;
   $160 = (($159) + 1|0);
   $123 = $160;
   $161 = $123;
   $122 = $161;
   $162 = $122;
   $163 = $162;
  }
  $118 = $163;
  $164 = $118;
  $165 = (($134) + 32|0);
  $72 = $165;
  $166 = $72;
  $71 = $166;
  $167 = $71;
  $70 = $167;
  $168 = $70;
  $69 = $168;
  $169 = $69;
  $170 = HEAP8[$169>>0]|0;
  $171 = $170&255;
  $172 = $171 & 1;
  $173 = ($172|0)!=(0);
  if ($173) {
   $65 = $166;
   $174 = $65;
   $64 = $174;
   $175 = $64;
   $63 = $175;
   $176 = $63;
   $177 = (($176) + 4|0);
   $178 = HEAP32[$177>>2]|0;
   $186 = $178;
  } else {
   $68 = $166;
   $179 = $68;
   $67 = $179;
   $180 = $67;
   $66 = $180;
   $181 = $66;
   $182 = HEAP8[$181>>0]|0;
   $183 = $182&255;
   $184 = $183 >> 1;
   $186 = $184;
  }
  $185 = (($164) + ($186)|0);
  $187 = (($134) + 44|0);
  HEAP32[$187>>2] = $185;
  $188 = (($134) + 32|0);
  $13 = $188;
  $189 = $13;
  $12 = $189;
  $190 = $12;
  $11 = $190;
  $191 = $11;
  $10 = $191;
  $192 = $10;
  $9 = $192;
  $193 = $9;
  $194 = HEAP8[$193>>0]|0;
  $195 = $194&255;
  $196 = $195 & 1;
  $197 = ($196|0)!=(0);
  if ($197) {
   $3 = $190;
   $198 = $3;
   $2 = $198;
   $199 = $2;
   $1 = $199;
   $200 = $1;
   $201 = (($200) + 8|0);
   $202 = HEAP32[$201>>2]|0;
   $209 = $202;
  } else {
   $8 = $190;
   $203 = $8;
   $7 = $203;
   $204 = $7;
   $6 = $204;
   $205 = $6;
   $206 = (($205) + 1|0);
   $5 = $206;
   $207 = $5;
   $4 = $207;
   $208 = $4;
   $209 = $208;
  }
  $0 = $209;
  $210 = $0;
  $211 = (($134) + 32|0);
  $27 = $211;
  $212 = $27;
  $26 = $212;
  $213 = $26;
  $25 = $213;
  $214 = $25;
  $24 = $214;
  $215 = $24;
  $23 = $215;
  $216 = $23;
  $217 = HEAP8[$216>>0]|0;
  $218 = $217&255;
  $219 = $218 & 1;
  $220 = ($219|0)!=(0);
  if ($220) {
   $17 = $213;
   $221 = $17;
   $16 = $221;
   $222 = $16;
   $15 = $222;
   $223 = $15;
   $224 = (($223) + 8|0);
   $225 = HEAP32[$224>>2]|0;
   $232 = $225;
  } else {
   $22 = $213;
   $226 = $22;
   $21 = $226;
   $227 = $21;
   $20 = $227;
   $228 = $20;
   $229 = (($228) + 1|0);
   $19 = $229;
   $230 = $19;
   $18 = $230;
   $231 = $18;
   $232 = $231;
  }
  $14 = $232;
  $233 = $14;
  $234 = (($134) + 44|0);
  $235 = HEAP32[$234>>2]|0;
  $28 = $134;
  $29 = $210;
  $30 = $233;
  $31 = $235;
  $236 = $28;
  $237 = $29;
  $238 = (($236) + 8|0);
  HEAP32[$238>>2] = $237;
  $239 = $30;
  $240 = (($236) + 12|0);
  HEAP32[$240>>2] = $239;
  $241 = $31;
  $242 = (($236) + 16|0);
  HEAP32[$242>>2] = $241;
 }
 $243 = (($134) + 48|0);
 $244 = HEAP32[$243>>2]|0;
 $245 = $244 & 16;
 $246 = ($245|0)!=(0);
 if (!($246)) {
  STACKTOP = sp;return;
 }
 $247 = (($134) + 32|0);
 $41 = $247;
 $248 = $41;
 $40 = $248;
 $249 = $40;
 $39 = $249;
 $250 = $39;
 $38 = $250;
 $251 = $38;
 $252 = HEAP8[$251>>0]|0;
 $253 = $252&255;
 $254 = $253 & 1;
 $255 = ($254|0)!=(0);
 if ($255) {
  $34 = $248;
  $256 = $34;
  $33 = $256;
  $257 = $33;
  $32 = $257;
  $258 = $32;
  $259 = (($258) + 4|0);
  $260 = HEAP32[$259>>2]|0;
  $267 = $260;
 } else {
  $37 = $248;
  $261 = $37;
  $36 = $261;
  $262 = $36;
  $35 = $262;
  $263 = $35;
  $264 = HEAP8[$263>>0]|0;
  $265 = $264&255;
  $266 = $265 >> 1;
  $267 = $266;
 }
 $__sz = $267;
 $268 = (($134) + 32|0);
 $55 = $268;
 $269 = $55;
 $54 = $269;
 $270 = $54;
 $53 = $270;
 $271 = $53;
 $52 = $271;
 $272 = $52;
 $51 = $272;
 $273 = $51;
 $274 = HEAP8[$273>>0]|0;
 $275 = $274&255;
 $276 = $275 & 1;
 $277 = ($276|0)!=(0);
 if ($277) {
  $45 = $270;
  $278 = $45;
  $44 = $278;
  $279 = $44;
  $43 = $279;
  $280 = $43;
  $281 = (($280) + 8|0);
  $282 = HEAP32[$281>>2]|0;
  $289 = $282;
 } else {
  $50 = $270;
  $283 = $50;
  $49 = $283;
  $284 = $49;
  $48 = $284;
  $285 = $48;
  $286 = (($285) + 1|0);
  $47 = $286;
  $287 = $47;
  $46 = $287;
  $288 = $46;
  $289 = $288;
 }
 $42 = $289;
 $290 = $42;
 $291 = $__sz;
 $292 = (($290) + ($291)|0);
 $293 = (($134) + 44|0);
 HEAP32[$293>>2] = $292;
 $294 = (($134) + 32|0);
 $295 = (($134) + 32|0);
 $62 = $295;
 $296 = $62;
 $61 = $296;
 $297 = $61;
 $60 = $297;
 $298 = $60;
 $59 = $298;
 $299 = $59;
 $300 = HEAP8[$299>>0]|0;
 $301 = $300&255;
 $302 = $301 & 1;
 $303 = ($302|0)!=(0);
 if ($303) {
  $58 = $296;
  $304 = $58;
  $57 = $304;
  $305 = $57;
  $56 = $305;
  $306 = $56;
  $307 = HEAP32[$306>>2]|0;
  $308 = $307 & -2;
  $310 = $308;
 } else {
  $310 = 11;
 }
 $309 = (($310) - 1)|0;
 $73 = $294;
 $74 = $309;
 $311 = $73;
 $312 = $74;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($311,$312,0);
 $313 = (($134) + 32|0);
 $88 = $313;
 $314 = $88;
 $87 = $314;
 $315 = $87;
 $86 = $315;
 $316 = $86;
 $85 = $316;
 $317 = $85;
 $84 = $317;
 $318 = $84;
 $319 = HEAP8[$318>>0]|0;
 $320 = $319&255;
 $321 = $320 & 1;
 $322 = ($321|0)!=(0);
 if ($322) {
  $78 = $315;
  $323 = $78;
  $77 = $323;
  $324 = $77;
  $76 = $324;
  $325 = $76;
  $326 = (($325) + 8|0);
  $327 = HEAP32[$326>>2]|0;
  $334 = $327;
 } else {
  $83 = $315;
  $328 = $83;
  $82 = $328;
  $329 = $82;
  $81 = $329;
  $330 = $81;
  $331 = (($330) + 1|0);
  $80 = $331;
  $332 = $80;
  $79 = $332;
  $333 = $79;
  $334 = $333;
 }
 $75 = $334;
 $335 = $75;
 $336 = (($134) + 32|0);
 $102 = $336;
 $337 = $102;
 $101 = $337;
 $338 = $101;
 $100 = $338;
 $339 = $100;
 $99 = $339;
 $340 = $99;
 $98 = $340;
 $341 = $98;
 $342 = HEAP8[$341>>0]|0;
 $343 = $342&255;
 $344 = $343 & 1;
 $345 = ($344|0)!=(0);
 if ($345) {
  $92 = $338;
  $346 = $92;
  $91 = $346;
  $347 = $91;
  $90 = $347;
  $348 = $90;
  $349 = (($348) + 8|0);
  $350 = HEAP32[$349>>2]|0;
  $357 = $350;
 } else {
  $97 = $338;
  $351 = $97;
  $96 = $351;
  $352 = $96;
  $95 = $352;
  $353 = $95;
  $354 = (($353) + 1|0);
  $94 = $354;
  $355 = $94;
  $93 = $355;
  $356 = $93;
  $357 = $356;
 }
 $89 = $357;
 $358 = $89;
 $359 = (($134) + 32|0);
 $112 = $359;
 $360 = $112;
 $111 = $360;
 $361 = $111;
 $110 = $361;
 $362 = $110;
 $109 = $362;
 $363 = $109;
 $364 = HEAP8[$363>>0]|0;
 $365 = $364&255;
 $366 = $365 & 1;
 $367 = ($366|0)!=(0);
 if ($367) {
  $105 = $360;
  $368 = $105;
  $104 = $368;
  $369 = $104;
  $103 = $369;
  $370 = $103;
  $371 = (($370) + 4|0);
  $372 = HEAP32[$371>>2]|0;
  $380 = $372;
 } else {
  $108 = $360;
  $373 = $108;
  $107 = $373;
  $374 = $107;
  $106 = $374;
  $375 = $106;
  $376 = HEAP8[$375>>0]|0;
  $377 = $376&255;
  $378 = $377 >> 1;
  $380 = $378;
 }
 $379 = (($358) + ($380)|0);
 $113 = $134;
 $114 = $335;
 $115 = $379;
 $381 = $113;
 $382 = $114;
 $383 = (($381) + 24|0);
 HEAP32[$383>>2] = $382;
 $384 = (($381) + 20|0);
 HEAP32[$384>>2] = $382;
 $385 = $115;
 $386 = (($381) + 28|0);
 HEAP32[$386>>2] = $385;
 $387 = (($134) + 48|0);
 $388 = HEAP32[$387>>2]|0;
 $389 = $388 & 3;
 $390 = ($389|0)!=(0);
 if ($390) {
  $391 = $__sz;
  $116 = $134;
  $117 = $391;
  $392 = $116;
  $393 = $117;
  $394 = (($392) + 24|0);
  $395 = HEAP32[$394>>2]|0;
  $396 = (($395) + ($393)|0);
  HEAP32[$394>>2] = $396;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($__os,$__str) {
 $__os = $__os|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__os;
 $1 = $__str;
 $2 = $0;
 $3 = $1;
 $4 = $1;
 $5 = (__ZNSt3__111char_traitsIcE6lengthEPKc($4)|0);
 $6 = (__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($2,$3,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = sp + 24|0;
 $10 = sp + 232|0;
 $11 = sp + 16|0;
 $16 = sp + 240|0;
 $26 = sp + 8|0;
 $29 = sp + 234|0;
 $30 = sp;
 $35 = sp + 233|0;
 $45 = sp + 40|0;
 $48 = sp + 239|0;
 $49 = sp + 32|0;
 $52 = sp + 236|0;
 $57 = sp + 235|0;
 $58 = sp + 238|0;
 $59 = sp + 237|0;
 $56 = $this;
 $60 = $56;
 $61 = (($60) + 48|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62 & 16;
 $64 = ($63|0)!=(0);
 if ($64) {
  $65 = (($60) + 44|0);
  $66 = HEAP32[$65>>2]|0;
  $55 = $60;
  $67 = $55;
  $68 = (($67) + 24|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ($66>>>0)<($69>>>0);
  if ($70) {
   $23 = $60;
   $71 = $23;
   $72 = (($71) + 24|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($60) + 44|0);
   HEAP32[$74>>2] = $73;
  }
  $4 = $60;
  $75 = $4;
  $76 = (($75) + 20|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($60) + 44|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($60) + 32|0);
  $3 = $80;
  $81 = $3;
  $2 = $81;
  $82 = $2;
  $1 = $82;
  $83 = $1;
  $0 = $83;
  $12 = $agg$result;
  $13 = $77;
  $14 = $79;
  $15 = $57;
  $84 = $12;
  ;HEAP8[$11+0>>0]=HEAP8[$16+0>>0]|0;
  $9 = $84;
  $85 = $9;
  $8 = $11;
  ;HEAP8[$7+0>>0]=HEAP8[$10+0>>0]|0;
  $6 = $85;
  $5 = $7;
  $86 = $13;
  $87 = $14;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($84,$86,$87);
  STACKTOP = sp;return;
 }
 $88 = (($60) + 48|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $89 & 8;
 $91 = ($90|0)!=(0);
 if ($91) {
  $17 = $60;
  $92 = $17;
  $93 = (($92) + 8|0);
  $94 = HEAP32[$93>>2]|0;
  $18 = $60;
  $95 = $18;
  $96 = (($95) + 16|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (($60) + 32|0);
  $22 = $98;
  $99 = $22;
  $21 = $99;
  $100 = $21;
  $20 = $100;
  $101 = $20;
  $19 = $101;
  $31 = $agg$result;
  $32 = $94;
  $33 = $97;
  $34 = $58;
  $102 = $31;
  ;HEAP8[$30+0>>0]=HEAP8[$35+0>>0]|0;
  $28 = $102;
  $103 = $28;
  $27 = $30;
  ;HEAP8[$26+0>>0]=HEAP8[$29+0>>0]|0;
  $25 = $103;
  $24 = $26;
  $104 = $32;
  $105 = $33;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($102,$104,$105);
  STACKTOP = sp;return;
 }
 $106 = (($60) + 32|0);
 $39 = $106;
 $107 = $39;
 $38 = $107;
 $108 = $38;
 $37 = $108;
 $109 = $37;
 $36 = $109;
 $53 = $agg$result;
 $54 = $59;
 $110 = $53;
 $111 = $54;
 $50 = $110;
 $51 = $111;
 $112 = $50;
 ;HEAP8[$49+0>>0]=HEAP8[$52+0>>0]|0;
 $47 = $112;
 $113 = $47;
 $46 = $49;
 ;HEAP8[$45+0>>0]=HEAP8[$48+0>>0]|0;
 $44 = $113;
 $43 = $45;
 $42 = $112;
 $114 = $42;
 $41 = $114;
 $115 = $41;
 $40 = $115;
 $116 = $40;
 $__a$i$i$i = $116;
 $__i$i$i$i = 0;
 while(1) {
  $117 = $__i$i$i$i;
  $118 = ($117>>>0)<(3);
  if (!($118)) {
   break;
  }
  $119 = $__i$i$i$i;
  $120 = $__a$i$i$i;
  $121 = (($120) + ($119<<2)|0);
  HEAP32[$121>>2] = 0;
  $122 = $__i$i$i$i;
  $123 = (($122) + 1)|0;
  $__i$i$i$i = $123;
 }
 STACKTOP = sp;return;
}
function __ZN9ExceptionISt11logic_errorEC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $s;
 $2 = $0;
 $3 = $1;
 __ZNSt11logic_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($2,$3);
 $4 = (2656 + 8|0);
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN9ExceptionISt13runtime_errorEC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $s;
 $2 = $0;
 $3 = $1;
 __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($2,$3);
 $4 = (2728 + 8|0);
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEE16__find_equal_keyERPNS_16__tree_node_baseIPvEERSA_($this,$__parent,$__k) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__lhs_sz$i$i$i = 0, $__lhs_sz$i$i$i1 = 0, $__nd = 0, $__result$i$i$i = 0, $__result$i$i$i3 = 0, $__rhs_sz$i$i$i = 0, $__rhs_sz$i$i$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $37 = sp + 8|0;
 $40 = sp + 712|0;
 $__lhs_sz$i$i$i1 = sp + 64|0;
 $__rhs_sz$i$i$i2 = sp + 260|0;
 $73 = sp + 304|0;
 $82 = sp + 684|0;
 $116 = sp;
 $119 = sp + 713|0;
 $__lhs_sz$i$i$i = sp + 584|0;
 $__rhs_sz$i$i$i = sp + 588|0;
 $152 = sp + 632|0;
 $169 = sp + 352|0;
 $170 = sp + 488|0;
 $171 = sp + 160|0;
 $166 = $this;
 $167 = $__parent;
 $168 = $__k;
 $172 = $166;
 $164 = $172;
 $173 = $164;
 $163 = $173;
 $174 = $163;
 $175 = (($174) + 4|0);
 $162 = $175;
 $176 = $162;
 $161 = $176;
 $177 = $161;
 $160 = $177;
 $178 = $160;
 $159 = $178;
 $179 = $159;
 $180 = HEAP32[$179>>2]|0;
 $__nd = $180;
 $181 = $__nd;
 $80 = $82;
 $81 = -1;
 $182 = $80;
 HEAP32[$182>>2] = 0;
 $183 = HEAP32[$82>>2]|0;
 HEAP32[$169>>2] = $183;
 $79 = $169;
 $184 = ($181|0)!=(0|0);
 if (!($184)) {
  $158 = $172;
  $471 = $158;
  $472 = (($471) + 4|0);
  $157 = $472;
  $473 = $157;
  $156 = $473;
  $474 = $156;
  $155 = $474;
  $475 = $155;
  $154 = $475;
  $476 = $154;
  $477 = $167;
  HEAP32[$477>>2] = $476;
  $478 = $167;
  $479 = HEAP32[$478>>2]|0;
  $165 = $479;
  $480 = $165;
  STACKTOP = sp;return ($480|0);
 }
 while(1) {
  $3 = $172;
  $185 = $3;
  $186 = (($185) + 8|0);
  $2 = $186;
  $187 = $2;
  $1 = $187;
  $188 = $1;
  $0 = $188;
  $189 = $0;
  $190 = $168;
  $191 = $__nd;
  $192 = (($191) + 16|0);
  $68 = $189;
  $69 = $190;
  $70 = $192;
  $193 = $69;
  $194 = $70;
  $66 = $193;
  $67 = $194;
  $195 = $66;
  $196 = $67;
  $62 = $195;
  $63 = $196;
  $197 = $62;
  $60 = $197;
  $198 = $60;
  $59 = $198;
  $199 = $59;
  $58 = $199;
  $200 = $58;
  $57 = $200;
  $201 = $57;
  $202 = HEAP8[$201>>0]|0;
  $203 = $202&255;
  $204 = $203 & 1;
  $205 = ($204|0)!=(0);
  if ($205) {
   $53 = $198;
   $206 = $53;
   $52 = $206;
   $207 = $52;
   $51 = $207;
   $208 = $51;
   $209 = (($208) + 4|0);
   $210 = HEAP32[$209>>2]|0;
   $217 = $210;
  } else {
   $56 = $198;
   $211 = $56;
   $55 = $211;
   $212 = $55;
   $54 = $212;
   $213 = $54;
   $214 = HEAP8[$213>>0]|0;
   $215 = $214&255;
   $216 = $215 >> 1;
   $217 = $216;
  }
  HEAP32[$__lhs_sz$i$i$i1>>2] = $217;
  $218 = $63;
  $50 = $218;
  $219 = $50;
  $49 = $219;
  $220 = $49;
  $48 = $220;
  $221 = $48;
  $47 = $221;
  $222 = $47;
  $223 = HEAP8[$222>>0]|0;
  $224 = $223&255;
  $225 = $224 & 1;
  $226 = ($225|0)!=(0);
  if ($226) {
   $43 = $219;
   $227 = $43;
   $42 = $227;
   $228 = $42;
   $41 = $228;
   $229 = $41;
   $230 = (($229) + 4|0);
   $231 = HEAP32[$230>>2]|0;
   $238 = $231;
  } else {
   $46 = $219;
   $232 = $46;
   $45 = $232;
   $233 = $45;
   $44 = $233;
   $234 = $44;
   $235 = HEAP8[$234>>0]|0;
   $236 = $235&255;
   $237 = $236 >> 1;
   $238 = $237;
  }
  HEAP32[$__rhs_sz$i$i$i2>>2] = $238;
  $17 = $197;
  $239 = $17;
  $16 = $239;
  $240 = $16;
  $15 = $240;
  $241 = $15;
  $14 = $241;
  $242 = $14;
  $13 = $242;
  $243 = $13;
  $244 = HEAP8[$243>>0]|0;
  $245 = $244&255;
  $246 = $245 & 1;
  $247 = ($246|0)!=(0);
  if ($247) {
   $7 = $240;
   $248 = $7;
   $6 = $248;
   $249 = $6;
   $5 = $249;
   $250 = $5;
   $251 = (($250) + 8|0);
   $252 = HEAP32[$251>>2]|0;
   $259 = $252;
  } else {
   $12 = $240;
   $253 = $12;
   $11 = $253;
   $254 = $11;
   $10 = $254;
   $255 = $10;
   $256 = (($255) + 1|0);
   $9 = $256;
   $257 = $9;
   $8 = $257;
   $258 = $8;
   $259 = $258;
  }
  $4 = $259;
  $260 = $4;
  $261 = $63;
  $31 = $261;
  $262 = $31;
  $30 = $262;
  $263 = $30;
  $29 = $263;
  $264 = $29;
  $28 = $264;
  $265 = $28;
  $27 = $265;
  $266 = $27;
  $267 = HEAP8[$266>>0]|0;
  $268 = $267&255;
  $269 = $268 & 1;
  $270 = ($269|0)!=(0);
  if ($270) {
   $21 = $263;
   $271 = $21;
   $20 = $271;
   $272 = $20;
   $19 = $272;
   $273 = $19;
   $274 = (($273) + 8|0);
   $275 = HEAP32[$274>>2]|0;
   $282 = $275;
  } else {
   $26 = $263;
   $276 = $26;
   $25 = $276;
   $277 = $25;
   $24 = $277;
   $278 = $24;
   $279 = (($278) + 1|0);
   $23 = $279;
   $280 = $23;
   $22 = $280;
   $281 = $22;
   $282 = $281;
  }
  $18 = $282;
  $283 = $18;
  $38 = $__lhs_sz$i$i$i1;
  $39 = $__rhs_sz$i$i$i2;
  $284 = $38;
  $285 = $39;
  ;HEAP8[$37+0>>0]=HEAP8[$40+0>>0]|0;
  $35 = $284;
  $36 = $285;
  $286 = $36;
  $287 = $35;
  $32 = $37;
  $33 = $286;
  $34 = $287;
  $288 = $33;
  $289 = HEAP32[$288>>2]|0;
  $290 = $34;
  $291 = HEAP32[$290>>2]|0;
  $292 = ($289>>>0)<($291>>>0);
  if ($292) {
   $293 = $36;
   $296 = $293;
  } else {
   $294 = $35;
   $296 = $294;
  }
  $295 = HEAP32[$296>>2]|0;
  __THREW__ = 0;
  $297 = (invoke_iiii(428,($260|0),($283|0),($295|0))|0);
  $298 = __THREW__; __THREW__ = 0;
  $299 = $298&1;
  if ($299) {
   label = 21;
   break;
  }
  $__result$i$i$i3 = $297;
  $300 = $__result$i$i$i3;
  $301 = ($300|0)!=(0);
  do {
   if ($301) {
    $302 = $__result$i$i$i3;
    $61 = $302;
   } else {
    $306 = HEAP32[$__lhs_sz$i$i$i1>>2]|0;
    $307 = HEAP32[$__rhs_sz$i$i$i2>>2]|0;
    $308 = ($306>>>0)<($307>>>0);
    if ($308) {
     $61 = -1;
     break;
    }
    $309 = HEAP32[$__lhs_sz$i$i$i1>>2]|0;
    $310 = HEAP32[$__rhs_sz$i$i$i2>>2]|0;
    $311 = ($309>>>0)>($310>>>0);
    if ($311) {
     $61 = 1;
     break;
    } else {
     $61 = 0;
     break;
    }
   }
  } while(0);
  $312 = $61;
  $313 = ($312|0)<(0);
  if ($313) {
   $314 = $__nd;
   $315 = HEAP32[$314>>2]|0;
   $71 = $73;
   $72 = -1;
   $316 = $71;
   HEAP32[$316>>2] = 0;
   $317 = HEAP32[$73>>2]|0;
   HEAP32[$170>>2] = $317;
   $74 = $170;
   $318 = ($315|0)!=(0|0);
   if (!($318)) {
    label = 30;
    break;
   }
   $319 = $__nd;
   $320 = HEAP32[$319>>2]|0;
   $__nd = $320;
  } else {
   $77 = $172;
   $325 = $77;
   $326 = (($325) + 8|0);
   $76 = $326;
   $327 = $76;
   $75 = $327;
   $328 = $75;
   $78 = $328;
   $329 = $78;
   $330 = $__nd;
   $331 = (($330) + 16|0);
   $332 = $168;
   $147 = $329;
   $148 = $331;
   $149 = $332;
   $333 = $148;
   $334 = $149;
   $145 = $333;
   $146 = $334;
   $335 = $145;
   $336 = $146;
   $141 = $335;
   $142 = $336;
   $337 = $141;
   $139 = $337;
   $338 = $139;
   $138 = $338;
   $339 = $138;
   $137 = $339;
   $340 = $137;
   $136 = $340;
   $341 = $136;
   $342 = HEAP8[$341>>0]|0;
   $343 = $342&255;
   $344 = $343 & 1;
   $345 = ($344|0)!=(0);
   if ($345) {
    $132 = $338;
    $346 = $132;
    $131 = $346;
    $347 = $131;
    $130 = $347;
    $348 = $130;
    $349 = (($348) + 4|0);
    $350 = HEAP32[$349>>2]|0;
    $357 = $350;
   } else {
    $135 = $338;
    $351 = $135;
    $134 = $351;
    $352 = $134;
    $133 = $352;
    $353 = $133;
    $354 = HEAP8[$353>>0]|0;
    $355 = $354&255;
    $356 = $355 >> 1;
    $357 = $356;
   }
   HEAP32[$__lhs_sz$i$i$i>>2] = $357;
   $358 = $142;
   $129 = $358;
   $359 = $129;
   $128 = $359;
   $360 = $128;
   $127 = $360;
   $361 = $127;
   $126 = $361;
   $362 = $126;
   $363 = HEAP8[$362>>0]|0;
   $364 = $363&255;
   $365 = $364 & 1;
   $366 = ($365|0)!=(0);
   if ($366) {
    $122 = $359;
    $367 = $122;
    $121 = $367;
    $368 = $121;
    $120 = $368;
    $369 = $120;
    $370 = (($369) + 4|0);
    $371 = HEAP32[$370>>2]|0;
    $378 = $371;
   } else {
    $125 = $359;
    $372 = $125;
    $124 = $372;
    $373 = $124;
    $123 = $373;
    $374 = $123;
    $375 = HEAP8[$374>>0]|0;
    $376 = $375&255;
    $377 = $376 >> 1;
    $378 = $377;
   }
   HEAP32[$__rhs_sz$i$i$i>>2] = $378;
   $96 = $337;
   $379 = $96;
   $95 = $379;
   $380 = $95;
   $94 = $380;
   $381 = $94;
   $93 = $381;
   $382 = $93;
   $92 = $382;
   $383 = $92;
   $384 = HEAP8[$383>>0]|0;
   $385 = $384&255;
   $386 = $385 & 1;
   $387 = ($386|0)!=(0);
   if ($387) {
    $86 = $380;
    $388 = $86;
    $85 = $388;
    $389 = $85;
    $84 = $389;
    $390 = $84;
    $391 = (($390) + 8|0);
    $392 = HEAP32[$391>>2]|0;
    $399 = $392;
   } else {
    $91 = $380;
    $393 = $91;
    $90 = $393;
    $394 = $90;
    $89 = $394;
    $395 = $89;
    $396 = (($395) + 1|0);
    $88 = $396;
    $397 = $88;
    $87 = $397;
    $398 = $87;
    $399 = $398;
   }
   $83 = $399;
   $400 = $83;
   $401 = $142;
   $110 = $401;
   $402 = $110;
   $109 = $402;
   $403 = $109;
   $108 = $403;
   $404 = $108;
   $107 = $404;
   $405 = $107;
   $106 = $405;
   $406 = $106;
   $407 = HEAP8[$406>>0]|0;
   $408 = $407&255;
   $409 = $408 & 1;
   $410 = ($409|0)!=(0);
   if ($410) {
    $100 = $403;
    $411 = $100;
    $99 = $411;
    $412 = $99;
    $98 = $412;
    $413 = $98;
    $414 = (($413) + 8|0);
    $415 = HEAP32[$414>>2]|0;
    $422 = $415;
   } else {
    $105 = $403;
    $416 = $105;
    $104 = $416;
    $417 = $104;
    $103 = $417;
    $418 = $103;
    $419 = (($418) + 1|0);
    $102 = $419;
    $420 = $102;
    $101 = $420;
    $421 = $101;
    $422 = $421;
   }
   $97 = $422;
   $423 = $97;
   $117 = $__lhs_sz$i$i$i;
   $118 = $__rhs_sz$i$i$i;
   $424 = $117;
   $425 = $118;
   ;HEAP8[$116+0>>0]=HEAP8[$119+0>>0]|0;
   $114 = $424;
   $115 = $425;
   $426 = $115;
   $427 = $114;
   $111 = $116;
   $112 = $426;
   $113 = $427;
   $428 = $112;
   $429 = HEAP32[$428>>2]|0;
   $430 = $113;
   $431 = HEAP32[$430>>2]|0;
   $432 = ($429>>>0)<($431>>>0);
   if ($432) {
    $433 = $115;
    $436 = $433;
   } else {
    $434 = $114;
    $436 = $434;
   }
   $435 = HEAP32[$436>>2]|0;
   __THREW__ = 0;
   $437 = (invoke_iiii(428,($400|0),($423|0),($435|0))|0);
   $438 = __THREW__; __THREW__ = 0;
   $439 = $438&1;
   if ($439) {
    label = 50;
    break;
   }
   $__result$i$i$i = $437;
   $440 = $__result$i$i$i;
   $441 = ($440|0)!=(0);
   do {
    if ($441) {
     $442 = $__result$i$i$i;
     $140 = $442;
    } else {
     $446 = HEAP32[$__lhs_sz$i$i$i>>2]|0;
     $447 = HEAP32[$__rhs_sz$i$i$i>>2]|0;
     $448 = ($446>>>0)<($447>>>0);
     if ($448) {
      $140 = -1;
      break;
     }
     $449 = HEAP32[$__lhs_sz$i$i$i>>2]|0;
     $450 = HEAP32[$__rhs_sz$i$i$i>>2]|0;
     $451 = ($449>>>0)>($450>>>0);
     if ($451) {
      $140 = 1;
      break;
     } else {
      $140 = 0;
      break;
     }
    }
   } while(0);
   $452 = $140;
   $453 = ($452|0)<(0);
   if (!($453)) {
    label = 61;
    break;
   }
   $454 = $__nd;
   $455 = (($454) + 4|0);
   $456 = HEAP32[$455>>2]|0;
   $150 = $152;
   $151 = -1;
   $457 = $150;
   HEAP32[$457>>2] = 0;
   $458 = HEAP32[$152>>2]|0;
   HEAP32[$171>>2] = $458;
   $153 = $171;
   $459 = ($456|0)!=(0|0);
   if (!($459)) {
    label = 59;
    break;
   }
   $460 = $__nd;
   $461 = (($460) + 4|0);
   $462 = HEAP32[$461>>2]|0;
   $__nd = $462;
  }
 }
 if ((label|0) == 21) {
  $303 = ___cxa_find_matching_catch()|0;
  $304 = tempRet0;
  $64 = $303;
  $65 = $304;
  $305 = $64;
  ___cxa_call_unexpected(($305|0));
  // unreachable;
 }
 else if ((label|0) == 30) {
  $321 = $__nd;
  $322 = $167;
  HEAP32[$322>>2] = $321;
  $323 = $167;
  $324 = HEAP32[$323>>2]|0;
  $165 = $324;
  $480 = $165;
  STACKTOP = sp;return ($480|0);
 }
 else if ((label|0) == 50) {
  $443 = ___cxa_find_matching_catch()|0;
  $444 = tempRet0;
  $143 = $443;
  $144 = $444;
  $445 = $143;
  ___cxa_call_unexpected(($445|0));
  // unreachable;
 }
 else if ((label|0) == 59) {
  $463 = $__nd;
  $464 = $167;
  HEAP32[$464>>2] = $463;
  $465 = $167;
  $466 = HEAP32[$465>>2]|0;
  $467 = (($466) + 4|0);
  $165 = $467;
  $480 = $165;
  STACKTOP = sp;return ($480|0);
 }
 else if ((label|0) == 61) {
  $468 = $__nd;
  $469 = $167;
  HEAP32[$469>>2] = $468;
  $470 = $167;
  $165 = $470;
  $480 = $165;
  STACKTOP = sp;return ($480|0);
 }
 return 0|0;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEE25__construct_node_with_keyERSA_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i = 0, $__h = 0, $__i$i$i$i$i = 0, $__na = 0;
 var $__t$i$i = 0, $__t$i$i$i = 0, $__t$i$i4$i = 0, $__tmp$i$i = 0, $__tmp$i$i11 = 0, $__tmp$i$i2 = 0, $__tmp$i$i30 = 0, $__tmp$i$i9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1472|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 104|0;
 $9 = sp + 1458|0;
 $13 = sp + 144|0;
 $16 = sp + 1461|0;
 $48 = sp + 284|0;
 $49 = sp + 120|0;
 $52 = sp + 300|0;
 $53 = sp + 304|0;
 $54 = sp + 168|0;
 $57 = sp + 328|0;
 $58 = sp + 160|0;
 $68 = sp + 152|0;
 $71 = sp + 1462|0;
 $75 = sp + 72|0;
 $78 = sp + 1459|0;
 $110 = sp + 552|0;
 $111 = sp + 48|0;
 $114 = sp + 568|0;
 $115 = sp + 576|0;
 $116 = sp + 56|0;
 $119 = sp + 600|0;
 $120 = sp + 136|0;
 $138 = sp + 684|0;
 $139 = sp + 32|0;
 $142 = sp + 700|0;
 $143 = sp + 704|0;
 $144 = sp + 80|0;
 $147 = sp + 728|0;
 $148 = sp + 96|0;
 $152 = sp + 1416|0;
 $153 = sp + 1424|0;
 $154 = sp + 760|0;
 $161 = sp + 24|0;
 $164 = sp + 1465|0;
 $168 = sp + 16|0;
 $171 = sp + 1464|0;
 $212 = sp + 112|0;
 $215 = sp + 1457|0;
 $219 = sp + 88|0;
 $222 = sp + 1463|0;
 $255 = sp + 1204|0;
 $256 = sp + 8|0;
 $259 = sp + 1384|0;
 $260 = sp + 1224|0;
 $261 = sp + 64|0;
 $264 = sp + 1244|0;
 $265 = sp + 1248|0;
 $266 = sp + 40|0;
 $273 = sp;
 $276 = sp + 1460|0;
 $280 = sp + 128|0;
 $283 = sp + 1456|0;
 $__h = sp + 1032|0;
 $314 = sp + 840|0;
 $317 = sp + 388|0;
 $318 = sp + 816|0;
 $312 = $this;
 $313 = $__k;
 $320 = $312;
 $311 = $320;
 $321 = $311;
 $322 = (($321) + 4|0);
 $310 = $322;
 $323 = $310;
 $309 = $323;
 $324 = $309;
 $__na = $324;
 $325 = $__na;
 $307 = $325;
 $308 = 1;
 $326 = $307;
 $327 = $308;
 $304 = $326;
 $305 = $327;
 $306 = 0;
 $328 = $305;
 $329 = ($328*40)|0;
 $303 = $329;
 $330 = $303;
 $331 = (__Znwj($330)|0);
 $332 = $__na;
 $301 = $314;
 $302 = $332;
 $333 = $301;
 $334 = $302;
 HEAP32[$333>>2] = $334;
 $335 = (($333) + 4|0);
 HEAP8[$335>>0] = 0;
 $336 = (($333) + 5|0);
 HEAP8[$336>>0] = 0;
 ;HEAP8[$266+0>>0]=HEAP8[$314+0>>0]|0;HEAP8[$266+1>>0]=HEAP8[$314+1>>0]|0;HEAP8[$266+2>>0]=HEAP8[$314+2>>0]|0;HEAP8[$266+3>>0]=HEAP8[$314+3>>0]|0;HEAP8[$266+4>>0]=HEAP8[$314+4>>0]|0;HEAP8[$266+5>>0]=HEAP8[$314+5>>0]|0;HEAP8[$266+6>>0]=HEAP8[$314+6>>0]|0;HEAP8[$266+7>>0]=HEAP8[$314+7>>0]|0;
 $263 = $__h;
 HEAP32[$264>>2] = $331;
 $337 = $263;
 $262 = $264;
 $338 = $262;
 $339 = HEAP32[$338>>2]|0;
 $250 = $266;
 $340 = $250;
 ;HEAP32[$265+0>>2]=HEAP32[$340+0>>2]|0;HEAP32[$265+4>>2]=HEAP32[$340+4>>2]|0;
 ;HEAP8[$261+0>>0]=HEAP8[$265+0>>0]|0;HEAP8[$261+1>>0]=HEAP8[$265+1>>0]|0;HEAP8[$261+2>>0]=HEAP8[$265+2>>0]|0;HEAP8[$261+3>>0]=HEAP8[$265+3>>0]|0;HEAP8[$261+4>>0]=HEAP8[$265+4>>0]|0;HEAP8[$261+5>>0]=HEAP8[$265+5>>0]|0;HEAP8[$261+6>>0]=HEAP8[$265+6>>0]|0;HEAP8[$261+7>>0]=HEAP8[$265+7>>0]|0;
 $258 = $337;
 HEAP32[$259>>2] = $339;
 $341 = $258;
 $257 = $259;
 $342 = $257;
 $343 = HEAP32[$342>>2]|0;
 $251 = $261;
 $344 = $251;
 ;HEAP32[$260+0>>2]=HEAP32[$344+0>>2]|0;HEAP32[$260+4>>2]=HEAP32[$344+4>>2]|0;
 ;HEAP8[$256+0>>0]=HEAP8[$260+0>>0]|0;HEAP8[$256+1>>0]=HEAP8[$260+1>>0]|0;HEAP8[$256+2>>0]=HEAP8[$260+2>>0]|0;HEAP8[$256+3>>0]=HEAP8[$260+3>>0]|0;HEAP8[$256+4>>0]=HEAP8[$260+4>>0]|0;HEAP8[$256+5>>0]=HEAP8[$260+5>>0]|0;HEAP8[$256+6>>0]=HEAP8[$260+6>>0]|0;HEAP8[$256+7>>0]=HEAP8[$260+7>>0]|0;
 $254 = $341;
 HEAP32[$255>>2] = $343;
 $345 = $254;
 $253 = $255;
 $346 = $253;
 $347 = HEAP32[$346>>2]|0;
 HEAP32[$345>>2] = $347;
 $348 = (($345) + 4|0);
 $252 = $256;
 $349 = $252;
 ;HEAP32[$348+0>>2]=HEAP32[$349+0>>2]|0;HEAP32[$348+4>>2]=HEAP32[$349+4>>2]|0;
 $350 = $__na;
 $249 = $__h;
 $351 = $249;
 $248 = $351;
 $352 = $248;
 $247 = $352;
 $353 = $247;
 $354 = HEAP32[$353>>2]|0;
 $355 = (($354) + 16|0);
 $246 = $355;
 $356 = $246;
 $357 = $313;
 $243 = $350;
 $244 = $356;
 $245 = $357;
 $358 = $244;
 $359 = ($358|0)==(0|0);
 do {
  if (!($359)) {
   $360 = $245;
   __THREW__ = 0;
   invoke_vii(429,($358|0),($360|0));
   $361 = __THREW__; __THREW__ = 0;
   $362 = $361&1;
   if (!($362)) {
    break;
   }
   $640 = ___cxa_find_matching_catch()|0;
   $641 = tempRet0;
   $315 = $640;
   $316 = $641;
   $300 = $__h;
   $642 = $300;
   $298 = $642;
   $299 = 0;
   $643 = $298;
   $297 = $643;
   $644 = $297;
   $296 = $644;
   $645 = $296;
   $646 = HEAP32[$645>>2]|0;
   $__tmp$i$i = $646;
   $647 = $299;
   $270 = $643;
   $648 = $270;
   $269 = $648;
   $649 = $269;
   HEAP32[$649>>2] = $647;
   $650 = $__tmp$i$i;
   $651 = ($650|0)!=(0|0);
   if ($651) {
    $268 = $643;
    $652 = $268;
    $267 = $652;
    $653 = $267;
    $654 = (($653) + 4|0);
    $655 = $__tmp$i$i;
    $292 = $654;
    $293 = $655;
    $656 = $292;
    $657 = (($656) + 5|0);
    $658 = HEAP8[$657>>0]|0;
    $659 = $658&1;
    do {
     if ($659) {
      $660 = HEAP32[$656>>2]|0;
      $661 = $293;
      $662 = (($661) + 16|0);
      $663 = (($662) + 12|0);
      $291 = $663;
      $664 = $291;
      $281 = $660;
      $282 = $664;
      $665 = $281;
      $666 = $282;
      ;HEAP8[$280+0>>0]=HEAP8[$283+0>>0]|0;
      $278 = $665;
      $279 = $666;
      $667 = $279;
      __THREW__ = 0;
      invoke_vi(403,($667|0));
      $668 = __THREW__; __THREW__ = 0;
      $669 = $668&1;
      if ($669) {
       $670 = ___cxa_find_matching_catch(0|0)|0;
       $671 = tempRet0;
       $294 = $670;
       $295 = $671;
       $672 = $294;
       ___cxa_call_unexpected(($672|0));
       // unreachable;
      } else {
       break;
      }
     }
    } while(0);
    $673 = (($656) + 4|0);
    $674 = HEAP8[$673>>0]|0;
    $675 = $674&1;
    do {
     if ($675) {
      $676 = HEAP32[$656>>2]|0;
      $677 = $293;
      $678 = (($677) + 16|0);
      $277 = $678;
      $679 = $277;
      $274 = $676;
      $275 = $679;
      $680 = $274;
      $681 = $275;
      ;HEAP8[$273+0>>0]=HEAP8[$276+0>>0]|0;
      $271 = $680;
      $272 = $681;
      $682 = $272;
      __THREW__ = 0;
      invoke_vi(403,($682|0));
      $683 = __THREW__; __THREW__ = 0;
      $684 = $683&1;
      if ($684) {
       $670 = ___cxa_find_matching_catch(0|0)|0;
       $671 = tempRet0;
       $294 = $670;
       $295 = $671;
       $672 = $294;
       ___cxa_call_unexpected(($672|0));
       // unreachable;
      } else {
       break;
      }
     }
    } while(0);
    $685 = $293;
    $686 = ($685|0)!=(0|0);
    if ($686) {
     $687 = HEAP32[$656>>2]|0;
     $688 = $293;
     $288 = $687;
     $289 = $688;
     $290 = 1;
     $689 = $288;
     $690 = $289;
     $691 = $290;
     $285 = $689;
     $286 = $690;
     $287 = $691;
     $692 = $286;
     $284 = $692;
     $693 = $284;
     __ZdlPv($693);
    }
   }
   $694 = $315;
   $695 = $316;
   ___resumeException($694|0);
   // unreachable;
  }
 } while(0);
 $242 = $__h;
 $363 = $242;
 $241 = $363;
 $364 = $241;
 $240 = $364;
 $365 = $240;
 $366 = (($365) + 4|0);
 $367 = (($366) + 4|0);
 HEAP8[$367>>0] = 1;
 $368 = $__na;
 $205 = $__h;
 $369 = $205;
 $204 = $369;
 $370 = $204;
 $203 = $370;
 $371 = $203;
 $372 = HEAP32[$371>>2]|0;
 $373 = (($372) + 16|0);
 $374 = (($373) + 12|0);
 $202 = $374;
 $375 = $202;
 $200 = $368;
 $201 = $375;
 $376 = $201;
 $377 = ($376|0)==(0|0);
 if (!($377)) {
  $199 = $376;
  $378 = $199;
  $198 = $378;
  $379 = $198;
  $197 = $379;
  $380 = $197;
  $196 = $380;
  $381 = $196;
  $195 = $381;
  $194 = $379;
  $382 = $194;
  $193 = $382;
  $383 = $193;
  $192 = $383;
  $384 = $192;
  $__a$i$i$i$i = $384;
  $__i$i$i$i$i = 0;
  while(1) {
   $385 = $__i$i$i$i$i;
   $386 = ($385>>>0)<(3);
   if (!($386)) {
    break;
   }
   $387 = $__i$i$i$i$i;
   $388 = $__a$i$i$i$i;
   $389 = (($388) + ($387<<2)|0);
   HEAP32[$389>>2] = 0;
   $390 = $__i$i$i$i$i;
   $391 = (($390) + 1)|0;
   $__i$i$i$i$i = $391;
  }
 }
 $191 = $__h;
 $392 = $191;
 $190 = $392;
 $393 = $190;
 $189 = $393;
 $394 = $189;
 $395 = (($394) + 4|0);
 $396 = (($395) + 5|0);
 HEAP8[$396>>0] = 1;
 $151 = $__h;
 $397 = $151;
 $149 = $154;
 $150 = $397;
 $398 = $149;
 $399 = $150;
 HEAP32[$398>>2] = $399;
 ;HEAP8[$148+0>>0]=HEAP8[$154+0>>0]|0;HEAP8[$148+1>>0]=HEAP8[$154+1>>0]|0;HEAP8[$148+2>>0]=HEAP8[$154+2>>0]|0;HEAP8[$148+3>>0]=HEAP8[$154+3>>0]|0;
 $146 = $153;
 $400 = $146;
 $145 = $148;
 $401 = $145;
 $402 = HEAP32[$401>>2]|0;
 $128 = $402;
 $403 = $128;
 $127 = $403;
 $404 = $127;
 $126 = $404;
 $405 = $126;
 $406 = HEAP32[$405>>2]|0;
 $__t$i$i$i = $406;
 $125 = $403;
 $407 = $125;
 $124 = $407;
 $408 = $124;
 HEAP32[$408>>2] = 0;
 $409 = $__t$i$i$i;
 $129 = $148;
 $410 = $129;
 $411 = HEAP32[$410>>2]|0;
 $132 = $411;
 $412 = $132;
 $131 = $412;
 $413 = $131;
 $130 = $413;
 $414 = $130;
 $415 = (($414) + 4|0);
 $133 = $415;
 $416 = $133;
 ;HEAP32[$147+0>>2]=HEAP32[$416+0>>2]|0;HEAP32[$147+4>>2]=HEAP32[$416+4>>2]|0;
 ;HEAP8[$144+0>>0]=HEAP8[$147+0>>0]|0;HEAP8[$144+1>>0]=HEAP8[$147+1>>0]|0;HEAP8[$144+2>>0]=HEAP8[$147+2>>0]|0;HEAP8[$144+3>>0]=HEAP8[$147+3>>0]|0;HEAP8[$144+4>>0]=HEAP8[$147+4>>0]|0;HEAP8[$144+5>>0]=HEAP8[$147+5>>0]|0;HEAP8[$144+6>>0]=HEAP8[$147+6>>0]|0;HEAP8[$144+7>>0]=HEAP8[$147+7>>0]|0;
 $141 = $400;
 HEAP32[$142>>2] = $409;
 $417 = $141;
 $140 = $142;
 $418 = $140;
 $419 = HEAP32[$418>>2]|0;
 $134 = $144;
 $420 = $134;
 ;HEAP32[$143+0>>2]=HEAP32[$420+0>>2]|0;HEAP32[$143+4>>2]=HEAP32[$420+4>>2]|0;
 ;HEAP8[$139+0>>0]=HEAP8[$143+0>>0]|0;HEAP8[$139+1>>0]=HEAP8[$143+1>>0]|0;HEAP8[$139+2>>0]=HEAP8[$143+2>>0]|0;HEAP8[$139+3>>0]=HEAP8[$143+3>>0]|0;HEAP8[$139+4>>0]=HEAP8[$143+4>>0]|0;HEAP8[$139+5>>0]=HEAP8[$143+5>>0]|0;HEAP8[$139+6>>0]=HEAP8[$143+6>>0]|0;HEAP8[$139+7>>0]=HEAP8[$143+7>>0]|0;
 $137 = $417;
 HEAP32[$138>>2] = $419;
 $421 = $137;
 $136 = $138;
 $422 = $136;
 $423 = HEAP32[$422>>2]|0;
 HEAP32[$421>>2] = $423;
 $424 = (($421) + 4|0);
 $135 = $139;
 $425 = $135;
 ;HEAP32[$424+0>>2]=HEAP32[$425+0>>2]|0;HEAP32[$424+4>>2]=HEAP32[$425+4>>2]|0;
 $123 = $153;
 $426 = $123;
 $121 = $152;
 $122 = $426;
 $427 = $121;
 $428 = $122;
 HEAP32[$427>>2] = $428;
 ;HEAP8[$120+0>>0]=HEAP8[$152+0>>0]|0;HEAP8[$120+1>>0]=HEAP8[$152+1>>0]|0;HEAP8[$120+2>>0]=HEAP8[$152+2>>0]|0;HEAP8[$120+3>>0]=HEAP8[$152+3>>0]|0;
 $118 = $318;
 $429 = $118;
 $117 = $120;
 $430 = $117;
 $431 = HEAP32[$430>>2]|0;
 $100 = $431;
 $432 = $100;
 $99 = $432;
 $433 = $99;
 $98 = $433;
 $434 = $98;
 $435 = HEAP32[$434>>2]|0;
 $__t$i$i4$i = $435;
 $97 = $432;
 $436 = $97;
 $96 = $436;
 $437 = $96;
 HEAP32[$437>>2] = 0;
 $438 = $__t$i$i4$i;
 $101 = $120;
 $439 = $101;
 $440 = HEAP32[$439>>2]|0;
 $104 = $440;
 $441 = $104;
 $103 = $441;
 $442 = $103;
 $102 = $442;
 $443 = $102;
 $444 = (($443) + 4|0);
 $105 = $444;
 $445 = $105;
 ;HEAP32[$119+0>>2]=HEAP32[$445+0>>2]|0;HEAP32[$119+4>>2]=HEAP32[$445+4>>2]|0;
 ;HEAP8[$116+0>>0]=HEAP8[$119+0>>0]|0;HEAP8[$116+1>>0]=HEAP8[$119+1>>0]|0;HEAP8[$116+2>>0]=HEAP8[$119+2>>0]|0;HEAP8[$116+3>>0]=HEAP8[$119+3>>0]|0;HEAP8[$116+4>>0]=HEAP8[$119+4>>0]|0;HEAP8[$116+5>>0]=HEAP8[$119+5>>0]|0;HEAP8[$116+6>>0]=HEAP8[$119+6>>0]|0;HEAP8[$116+7>>0]=HEAP8[$119+7>>0]|0;
 $113 = $429;
 HEAP32[$114>>2] = $438;
 $446 = $113;
 $112 = $114;
 $447 = $112;
 $448 = HEAP32[$447>>2]|0;
 $106 = $116;
 $449 = $106;
 ;HEAP32[$115+0>>2]=HEAP32[$449+0>>2]|0;HEAP32[$115+4>>2]=HEAP32[$449+4>>2]|0;
 ;HEAP8[$111+0>>0]=HEAP8[$115+0>>0]|0;HEAP8[$111+1>>0]=HEAP8[$115+1>>0]|0;HEAP8[$111+2>>0]=HEAP8[$115+2>>0]|0;HEAP8[$111+3>>0]=HEAP8[$115+3>>0]|0;HEAP8[$111+4>>0]=HEAP8[$115+4>>0]|0;HEAP8[$111+5>>0]=HEAP8[$115+5>>0]|0;HEAP8[$111+6>>0]=HEAP8[$115+6>>0]|0;HEAP8[$111+7>>0]=HEAP8[$115+7>>0]|0;
 $109 = $446;
 HEAP32[$110>>2] = $448;
 $450 = $109;
 $108 = $110;
 $451 = $108;
 $452 = HEAP32[$451>>2]|0;
 HEAP32[$450>>2] = $452;
 $453 = (($450) + 4|0);
 $107 = $111;
 $454 = $107;
 ;HEAP32[$453+0>>2]=HEAP32[$454+0>>2]|0;HEAP32[$453+4>>2]=HEAP32[$454+4>>2]|0;
 $95 = $153;
 $455 = $95;
 $93 = $455;
 $94 = 0;
 $456 = $93;
 $92 = $456;
 $457 = $92;
 $91 = $457;
 $458 = $91;
 $459 = HEAP32[$458>>2]|0;
 $__tmp$i$i9$i = $459;
 $460 = $94;
 $65 = $456;
 $461 = $65;
 $64 = $461;
 $462 = $64;
 HEAP32[$462>>2] = $460;
 $463 = $__tmp$i$i9$i;
 $464 = ($463|0)!=(0|0);
 if ($464) {
  $63 = $456;
  $465 = $63;
  $62 = $465;
  $466 = $62;
  $467 = (($466) + 4|0);
  $468 = $__tmp$i$i9$i;
  $87 = $467;
  $88 = $468;
  $469 = $87;
  $470 = (($469) + 5|0);
  $471 = HEAP8[$470>>0]|0;
  $472 = $471&1;
  do {
   if ($472) {
    $473 = HEAP32[$469>>2]|0;
    $474 = $88;
    $475 = (($474) + 16|0);
    $476 = (($475) + 12|0);
    $86 = $476;
    $477 = $86;
    $76 = $473;
    $77 = $477;
    $478 = $76;
    $479 = $77;
    ;HEAP8[$75+0>>0]=HEAP8[$78+0>>0]|0;
    $73 = $478;
    $74 = $479;
    $480 = $74;
    __THREW__ = 0;
    invoke_vi(403,($480|0));
    $481 = __THREW__; __THREW__ = 0;
    $482 = $481&1;
    if ($482) {
     $483 = ___cxa_find_matching_catch()|0;
     $484 = tempRet0;
     $89 = $483;
     $90 = $484;
     $485 = $89;
     ___cxa_call_unexpected(($485|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $486 = (($469) + 4|0);
  $487 = HEAP8[$486>>0]|0;
  $488 = $487&1;
  do {
   if ($488) {
    $489 = HEAP32[$469>>2]|0;
    $490 = $88;
    $491 = (($490) + 16|0);
    $72 = $491;
    $492 = $72;
    $69 = $489;
    $70 = $492;
    $493 = $69;
    $494 = $70;
    ;HEAP8[$68+0>>0]=HEAP8[$71+0>>0]|0;
    $66 = $493;
    $67 = $494;
    $495 = $67;
    __THREW__ = 0;
    invoke_vi(403,($495|0));
    $496 = __THREW__; __THREW__ = 0;
    $497 = $496&1;
    if ($497) {
     $483 = ___cxa_find_matching_catch()|0;
     $484 = tempRet0;
     $89 = $483;
     $90 = $484;
     $485 = $89;
     ___cxa_call_unexpected(($485|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $498 = $88;
  $499 = ($498|0)!=(0|0);
  if ($499) {
   $500 = HEAP32[$469>>2]|0;
   $501 = $88;
   $83 = $500;
   $84 = $501;
   $85 = 1;
   $502 = $83;
   $503 = $84;
   $504 = $85;
   $80 = $502;
   $81 = $503;
   $82 = $504;
   $505 = $81;
   $79 = $505;
   $506 = $79;
   __ZdlPv($506);
  }
 }
 $61 = $318;
 $507 = $61;
 $59 = $317;
 $60 = $507;
 $508 = $59;
 $509 = $60;
 HEAP32[$508>>2] = $509;
 ;HEAP8[$58+0>>0]=HEAP8[$317+0>>0]|0;HEAP8[$58+1>>0]=HEAP8[$317+1>>0]|0;HEAP8[$58+2>>0]=HEAP8[$317+2>>0]|0;HEAP8[$58+3>>0]=HEAP8[$317+3>>0]|0;
 $56 = $agg$result;
 $510 = $56;
 $55 = $58;
 $511 = $55;
 $512 = HEAP32[$511>>2]|0;
 $38 = $512;
 $513 = $38;
 $37 = $513;
 $514 = $37;
 $36 = $514;
 $515 = $36;
 $516 = HEAP32[$515>>2]|0;
 $__t$i$i = $516;
 $35 = $513;
 $517 = $35;
 $34 = $517;
 $518 = $34;
 HEAP32[$518>>2] = 0;
 $519 = $__t$i$i;
 $39 = $58;
 $520 = $39;
 $521 = HEAP32[$520>>2]|0;
 $42 = $521;
 $522 = $42;
 $41 = $522;
 $523 = $41;
 $40 = $523;
 $524 = $40;
 $525 = (($524) + 4|0);
 $43 = $525;
 $526 = $43;
 ;HEAP32[$57+0>>2]=HEAP32[$526+0>>2]|0;HEAP32[$57+4>>2]=HEAP32[$526+4>>2]|0;
 ;HEAP8[$54+0>>0]=HEAP8[$57+0>>0]|0;HEAP8[$54+1>>0]=HEAP8[$57+1>>0]|0;HEAP8[$54+2>>0]=HEAP8[$57+2>>0]|0;HEAP8[$54+3>>0]=HEAP8[$57+3>>0]|0;HEAP8[$54+4>>0]=HEAP8[$57+4>>0]|0;HEAP8[$54+5>>0]=HEAP8[$57+5>>0]|0;HEAP8[$54+6>>0]=HEAP8[$57+6>>0]|0;HEAP8[$54+7>>0]=HEAP8[$57+7>>0]|0;
 $51 = $510;
 HEAP32[$52>>2] = $519;
 $527 = $51;
 $50 = $52;
 $528 = $50;
 $529 = HEAP32[$528>>2]|0;
 $44 = $54;
 $530 = $44;
 ;HEAP32[$53+0>>2]=HEAP32[$530+0>>2]|0;HEAP32[$53+4>>2]=HEAP32[$530+4>>2]|0;
 ;HEAP8[$49+0>>0]=HEAP8[$53+0>>0]|0;HEAP8[$49+1>>0]=HEAP8[$53+1>>0]|0;HEAP8[$49+2>>0]=HEAP8[$53+2>>0]|0;HEAP8[$49+3>>0]=HEAP8[$53+3>>0]|0;HEAP8[$49+4>>0]=HEAP8[$53+4>>0]|0;HEAP8[$49+5>>0]=HEAP8[$53+5>>0]|0;HEAP8[$49+6>>0]=HEAP8[$53+6>>0]|0;HEAP8[$49+7>>0]=HEAP8[$53+7>>0]|0;
 $47 = $527;
 HEAP32[$48>>2] = $529;
 $531 = $47;
 $46 = $48;
 $532 = $46;
 $533 = HEAP32[$532>>2]|0;
 HEAP32[$531>>2] = $533;
 $534 = (($531) + 4|0);
 $45 = $49;
 $535 = $45;
 ;HEAP32[$534+0>>2]=HEAP32[$535+0>>2]|0;HEAP32[$534+4>>2]=HEAP32[$535+4>>2]|0;
 $33 = $318;
 $536 = $33;
 $31 = $536;
 $32 = 0;
 $537 = $31;
 $30 = $537;
 $538 = $30;
 $29 = $538;
 $539 = $29;
 $540 = HEAP32[$539>>2]|0;
 $__tmp$i$i30 = $540;
 $541 = $32;
 $3 = $537;
 $542 = $3;
 $2 = $542;
 $543 = $2;
 HEAP32[$543>>2] = $541;
 $544 = $__tmp$i$i30;
 $545 = ($544|0)!=(0|0);
 if ($545) {
  $1 = $537;
  $546 = $1;
  $0 = $546;
  $547 = $0;
  $548 = (($547) + 4|0);
  $549 = $__tmp$i$i30;
  $25 = $548;
  $26 = $549;
  $550 = $25;
  $551 = (($550) + 5|0);
  $552 = HEAP8[$551>>0]|0;
  $553 = $552&1;
  do {
   if ($553) {
    $554 = HEAP32[$550>>2]|0;
    $555 = $26;
    $556 = (($555) + 16|0);
    $557 = (($556) + 12|0);
    $24 = $557;
    $558 = $24;
    $14 = $554;
    $15 = $558;
    $559 = $14;
    $560 = $15;
    ;HEAP8[$13+0>>0]=HEAP8[$16+0>>0]|0;
    $11 = $559;
    $12 = $560;
    $561 = $12;
    __THREW__ = 0;
    invoke_vi(403,($561|0));
    $562 = __THREW__; __THREW__ = 0;
    $563 = $562&1;
    if ($563) {
     $564 = ___cxa_find_matching_catch()|0;
     $565 = tempRet0;
     $27 = $564;
     $28 = $565;
     $566 = $27;
     ___cxa_call_unexpected(($566|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $567 = (($550) + 4|0);
  $568 = HEAP8[$567>>0]|0;
  $569 = $568&1;
  do {
   if ($569) {
    $570 = HEAP32[$550>>2]|0;
    $571 = $26;
    $572 = (($571) + 16|0);
    $10 = $572;
    $573 = $10;
    $7 = $570;
    $8 = $573;
    $574 = $7;
    $575 = $8;
    ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
    $4 = $574;
    $5 = $575;
    $576 = $5;
    __THREW__ = 0;
    invoke_vi(403,($576|0));
    $577 = __THREW__; __THREW__ = 0;
    $578 = $577&1;
    if ($578) {
     $564 = ___cxa_find_matching_catch()|0;
     $565 = tempRet0;
     $27 = $564;
     $28 = $565;
     $566 = $27;
     ___cxa_call_unexpected(($566|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $579 = $26;
  $580 = ($579|0)!=(0|0);
  if ($580) {
   $581 = HEAP32[$550>>2]|0;
   $582 = $26;
   $21 = $581;
   $22 = $582;
   $23 = 1;
   $583 = $21;
   $584 = $22;
   $585 = $23;
   $18 = $583;
   $19 = $584;
   $20 = $585;
   $586 = $19;
   $17 = $586;
   $587 = $17;
   __ZdlPv($587);
  }
 }
 $319 = 1;
 $188 = $__h;
 $588 = $188;
 $186 = $588;
 $187 = 0;
 $589 = $186;
 $185 = $589;
 $590 = $185;
 $184 = $590;
 $591 = $184;
 $592 = HEAP32[$591>>2]|0;
 $__tmp$i$i11 = $592;
 $593 = $187;
 $158 = $589;
 $594 = $158;
 $157 = $594;
 $595 = $157;
 HEAP32[$595>>2] = $593;
 $596 = $__tmp$i$i11;
 $597 = ($596|0)!=(0|0);
 if (!($597)) {
  STACKTOP = sp;return;
 }
 $156 = $589;
 $598 = $156;
 $155 = $598;
 $599 = $155;
 $600 = (($599) + 4|0);
 $601 = $__tmp$i$i11;
 $180 = $600;
 $181 = $601;
 $602 = $180;
 $603 = (($602) + 5|0);
 $604 = HEAP8[$603>>0]|0;
 $605 = $604&1;
 do {
  if ($605) {
   $606 = HEAP32[$602>>2]|0;
   $607 = $181;
   $608 = (($607) + 16|0);
   $609 = (($608) + 12|0);
   $179 = $609;
   $610 = $179;
   $169 = $606;
   $170 = $610;
   $611 = $169;
   $612 = $170;
   ;HEAP8[$168+0>>0]=HEAP8[$171+0>>0]|0;
   $166 = $611;
   $167 = $612;
   $613 = $167;
   __THREW__ = 0;
   invoke_vi(403,($613|0));
   $614 = __THREW__; __THREW__ = 0;
   $615 = $614&1;
   if ($615) {
    $616 = ___cxa_find_matching_catch()|0;
    $617 = tempRet0;
    $182 = $616;
    $183 = $617;
    $618 = $182;
    ___cxa_call_unexpected(($618|0));
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $619 = (($602) + 4|0);
 $620 = HEAP8[$619>>0]|0;
 $621 = $620&1;
 do {
  if ($621) {
   $622 = HEAP32[$602>>2]|0;
   $623 = $181;
   $624 = (($623) + 16|0);
   $165 = $624;
   $625 = $165;
   $162 = $622;
   $163 = $625;
   $626 = $162;
   $627 = $163;
   ;HEAP8[$161+0>>0]=HEAP8[$164+0>>0]|0;
   $159 = $626;
   $160 = $627;
   $628 = $160;
   __THREW__ = 0;
   invoke_vi(403,($628|0));
   $629 = __THREW__; __THREW__ = 0;
   $630 = $629&1;
   if ($630) {
    $616 = ___cxa_find_matching_catch()|0;
    $617 = tempRet0;
    $182 = $616;
    $183 = $617;
    $618 = $182;
    ___cxa_call_unexpected(($618|0));
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $631 = $181;
 $632 = ($631|0)!=(0|0);
 if ($632) {
  $633 = HEAP32[$602>>2]|0;
  $634 = $181;
  $176 = $633;
  $177 = $634;
  $178 = 1;
  $635 = $176;
  $636 = $177;
  $637 = $178;
  $173 = $635;
  $174 = $636;
  $175 = $637;
  $638 = $174;
  $172 = $638;
  $639 = $172;
  __ZdlPv($639);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSI_SI_($this,$__parent,$__child,$__new_node) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__child = $__child|0;
 $__new_node = $__new_node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 44|0;
 $7 = sp + 24|0;
 $22 = sp + 12|0;
 $27 = sp + 40|0;
 $28 = sp + 92|0;
 $29 = sp + 48|0;
 $23 = $this;
 $24 = $__parent;
 $25 = $__child;
 $26 = $__new_node;
 $30 = $23;
 $20 = $22;
 $21 = -1;
 $31 = $20;
 HEAP32[$31>>2] = 0;
 $32 = HEAP32[$22>>2]|0;
 HEAP32[$27>>2] = $32;
 $16 = $27;
 $33 = $26;
 HEAP32[$33>>2] = 0;
 $0 = $2;
 $1 = -1;
 $34 = $0;
 HEAP32[$34>>2] = 0;
 $35 = HEAP32[$2>>2]|0;
 HEAP32[$28>>2] = $35;
 $3 = $28;
 $36 = $26;
 $37 = (($36) + 4|0);
 HEAP32[$37>>2] = 0;
 $38 = $24;
 $39 = $26;
 $40 = (($39) + 8|0);
 HEAP32[$40>>2] = $38;
 $41 = $26;
 $42 = $25;
 HEAP32[$42>>2] = $41;
 $4 = $30;
 $43 = $4;
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$44>>2]|0;
 $5 = $7;
 $6 = -1;
 $46 = $5;
 HEAP32[$46>>2] = 0;
 $47 = HEAP32[$7>>2]|0;
 HEAP32[$29>>2] = $47;
 $8 = $29;
 $48 = ($45|0)!=(0|0);
 if ($48) {
  $9 = $30;
  $49 = $9;
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP32[$50>>2]|0;
  $10 = $30;
  $52 = $10;
  HEAP32[$52>>2] = $51;
 }
 $15 = $30;
 $53 = $15;
 $54 = (($53) + 4|0);
 $14 = $54;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $11 = $57;
 $58 = $11;
 $59 = HEAP32[$58>>2]|0;
 $60 = $25;
 $61 = HEAP32[$60>>2]|0;
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($59,$61);
 $19 = $30;
 $62 = $19;
 $63 = (($62) + 8|0);
 $18 = $63;
 $64 = $18;
 $17 = $64;
 $65 = $17;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) + 1)|0;
 HEAP32[$65>>2] = $67;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $6;
 $5 = $7;
 $8 = $5;
 $4 = $8;
 $9 = $4;
 $10 = (($9) + 4|0);
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $0;
 $15 = HEAP32[$14>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE($7,$15);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEEEENS_19__map_value_compareIS7_SE_NS_4lessIS7_EELb1EEENS5_ISE_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $6;
 $5 = $7;
 $8 = $5;
 $4 = $8;
 $9 = $4;
 $10 = (($9) + 4|0);
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $0;
 $15 = HEAP32[$14>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEEEENS_19__map_value_compareIS7_SE_NS_4lessIS7_EELb1EEENS5_ISE_EEE7destroyEPNS_11__tree_nodeISE_SC_EE($7,$15);
 STACKTOP = sp;return;
}
function __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($__os,$__str,$__len) {
 $__os = $__os|0;
 $__str = $__str|0;
 $__len = $__len|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__s = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 60|0;
 $5 = sp + 28|0;
 $__s = sp + 8|0;
 $25 = sp + 24|0;
 $26 = sp + 92|0;
 $20 = $__os;
 $21 = $__str;
 $22 = $__len;
 $27 = $20;
 __THREW__ = 0;
 invoke_vii(430,($__s|0),($27|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 L1: do {
  if ($29) {
   label = 23;
  } else {
   $19 = $__s;
   $30 = $19;
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&1;
   L4: do {
    if ($32) {
     $33 = $20;
     $17 = $25;
     $18 = $33;
     $34 = $17;
     $35 = $18;
     $36 = HEAP32[$35>>2]|0;
     $37 = (($36) + -12|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (($35) + ($38)|0);
     $16 = $39;
     $40 = $16;
     $15 = $40;
     $41 = $15;
     $42 = (($41) + 24|0);
     $43 = HEAP32[$42>>2]|0;
     HEAP32[$34>>2] = $43;
     $44 = $21;
     $45 = $20;
     $46 = HEAP32[$45>>2]|0;
     $47 = (($46) + -12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (($45) + ($48)|0);
     $10 = $49;
     $50 = $10;
     $51 = (($50) + 4|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = $52 & 176;
     $54 = ($53|0)==(32);
     if ($54) {
      $55 = $21;
      $56 = $22;
      $57 = (($55) + ($56)|0);
      $108 = $57;
     } else {
      $58 = $21;
      $108 = $58;
     }
     $59 = $21;
     $60 = $22;
     $61 = (($59) + ($60)|0);
     $62 = $20;
     $63 = HEAP32[$62>>2]|0;
     $64 = (($63) + -12|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = (($62) + ($65)|0);
     $67 = $20;
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + -12|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (($67) + ($70)|0);
     $8 = $71;
     $72 = $8;
     $73 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $74 = (($72) + 76|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($73,$75)|0);
     do {
      if ($76) {
       $3 = $72;
       $4 = 32;
       $77 = $3;
       __THREW__ = 0;
       invoke_vii(431,($5|0),($77|0));
       $78 = __THREW__; __THREW__ = 0;
       $79 = $78&1;
       if ($79) {
        label = 24;
       } else {
        $2 = $5;
        $80 = $2;
        __THREW__ = 0;
        $81 = (invoke_iii(432,($80|0),(10856|0))|0);
        $82 = __THREW__; __THREW__ = 0;
        $83 = $82&1;
        if (!($83)) {
         $84 = $4;
         $0 = $81;
         $1 = $84;
         $85 = $0;
         $86 = HEAP32[$85>>2]|0;
         $87 = (($86) + 28|0);
         $88 = HEAP32[$87>>2]|0;
         $89 = $1;
         __THREW__ = 0;
         $90 = (invoke_iii($88|0,($85|0),($89|0))|0);
         $91 = __THREW__; __THREW__ = 0;
         $92 = $91&1;
         if (!($92)) {
          __THREW__ = 0;
          invoke_vi(433,($5|0));
          $101 = __THREW__; __THREW__ = 0;
          $102 = $101&1;
          if ($102) {
           label = 24;
           break;
          }
          $103 = $90 << 24 >> 24;
          $104 = (($72) + 76|0);
          HEAP32[$104>>2] = $103;
          label = 17;
          break;
         }
        }
        $93 = ___cxa_find_matching_catch(0|0,0|0)|0;
        $94 = tempRet0;
        $6 = $93;
        $7 = $94;
        __THREW__ = 0;
        invoke_vi(433,($5|0));
        $95 = __THREW__; __THREW__ = 0;
        $96 = $95&1;
        if ($96) {
         $99 = ___cxa_find_matching_catch(0|0,0|0,0|0)|0;
         $100 = tempRet0;
         ___clang_call_terminate($99);
         // unreachable;
        } else {
         $97 = $6;
         $98 = $7;
         $eh$lpad$body$index2Z2D = $98;$eh$lpad$body$indexZ2D = $97;
         break;
        }
       }
      } else {
       label = 17;
      }
     } while(0);
     do {
      if ((label|0) == 17) {
       $105 = (($72) + 76|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = $106&255;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy+0>>2]=HEAP32[$25+0>>2]|0;
       invoke_viiiiiii(434,($26|0),($$byval_copy|0),($44|0),($108|0),($61|0),($66|0),($107|0));
       $109 = __THREW__; __THREW__ = 0;
       $110 = $109&1;
       if ($110) {
        label = 24;
       } else {
        $9 = $26;
        $111 = $9;
        $112 = HEAP32[$111>>2]|0;
        $113 = ($112|0)==(0|0);
        if ($113) {
         $114 = $20;
         $115 = HEAP32[$114>>2]|0;
         $116 = (($115) + -12|0);
         $117 = HEAP32[$116>>2]|0;
         $118 = (($114) + ($117)|0);
         $13 = $118;
         $14 = 5;
         $119 = $13;
         $120 = $14;
         $11 = $119;
         $12 = $120;
         $121 = $11;
         $122 = (($121) + 16|0);
         $123 = HEAP32[$122>>2]|0;
         $124 = $12;
         $125 = $123 | $124;
         __THREW__ = 0;
         invoke_vii(435,($121|0),($125|0));
         $126 = __THREW__; __THREW__ = 0;
         $127 = $126&1;
         if ($127) {
          label = 24;
          break;
         }
        }
        break L4;
       }
      }
     } while(0);
     if ((label|0) == 24) {
      $130 = ___cxa_find_matching_catch(0|0)|0;
      $131 = tempRet0;
      $eh$lpad$body$index2Z2D = $131;$eh$lpad$body$indexZ2D = $130;
     }
     $23 = $eh$lpad$body$indexZ2D;
     $24 = $eh$lpad$body$index2Z2D;
     __THREW__ = 0;
     invoke_vi(436,($__s|0));
     $132 = __THREW__; __THREW__ = 0;
     $133 = $132&1;
     if ($133) {
      $151 = ___cxa_find_matching_catch(0|0)|0;
      $152 = tempRet0;
      ___clang_call_terminate($151);
      // unreachable;
     } else {
      break L1;
     }
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(436,($__s|0));
   $134 = __THREW__; __THREW__ = 0;
   $135 = $134&1;
   if ($135) {
    label = 23;
   } else {
    $144 = $20;
    STACKTOP = sp;return ($144|0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $128 = ___cxa_find_matching_catch(0|0)|0;
  $129 = tempRet0;
  $23 = $128;
  $24 = $129;
 }
 $136 = $23;
 (___cxa_begin_catch(($136|0))|0);
 $137 = $20;
 $138 = HEAP32[$137>>2]|0;
 $139 = (($138) + -12|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = (($137) + ($140)|0);
 __THREW__ = 0;
 invoke_vi(437,($141|0));
 $142 = __THREW__; __THREW__ = 0;
 $143 = $142&1;
 if (!($143)) {
  ___cxa_end_catch();
  $144 = $20;
  STACKTOP = sp;return ($144|0);
 }
 $145 = ___cxa_find_matching_catch()|0;
 $146 = tempRet0;
 $23 = $145;
 $24 = $146;
 __THREW__ = 0;
 invoke_v(438);
 $147 = __THREW__; __THREW__ = 0;
 $148 = $147&1;
 if ($148) {
  $151 = ___cxa_find_matching_catch(0|0)|0;
  $152 = tempRet0;
  ___clang_call_terminate($151);
  // unreachable;
 }
 $149 = $23;
 $150 = $24;
 ___resumeException($149|0);
 // unreachable;
 return 0|0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cap = 0, $__m$i = 0, $__p = 0, $__sz = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $34 = sp + 8|0;
 $36 = sp + 213|0;
 $43 = sp;
 $46 = sp + 214|0;
 $50 = sp + 212|0;
 $47 = $this;
 $48 = $__first;
 $49 = $__last;
 $51 = $47;
 $52 = $48;
 $53 = $49;
 $44 = $52;
 $45 = $53;
 $54 = $44;
 $55 = $45;
 ;HEAP8[$43+0>>0]=HEAP8[$46+0>>0]|0;
 $41 = $54;
 $42 = $55;
 $56 = $42;
 $57 = $41;
 $58 = $56;
 $59 = $57;
 $60 = (($58) - ($59))|0;
 $__sz = $60;
 $61 = $__sz;
 $40 = $51;
 $62 = $40;
 $39 = $62;
 $63 = $39;
 $38 = $63;
 $64 = $38;
 $37 = $64;
 $65 = $37;
 $35 = $65;
 $66 = $35;
 ;HEAP8[$34+0>>0]=HEAP8[$36+0>>0]|0;
 $33 = $66;
 $67 = $33;
 $32 = $67;
 $__m$i = -1;
 $68 = $__m$i;
 $69 = (($68) - 16)|0;
 $70 = ($61>>>0)>($69>>>0);
 if ($70) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($51);
  // unreachable;
 }
 $71 = $__sz;
 $72 = ($71>>>0)<(11);
 if ($72) {
  $73 = $__sz;
  $30 = $51;
  $31 = $73;
  $74 = $30;
  $75 = $31;
  $76 = $75 << 1;
  $77 = $76&255;
  $29 = $74;
  $78 = $29;
  $28 = $78;
  $79 = $28;
  HEAP8[$79>>0] = $77;
  $9 = $51;
  $80 = $9;
  $8 = $80;
  $81 = $8;
  $7 = $81;
  $82 = $7;
  $83 = (($82) + 1|0);
  $6 = $83;
  $84 = $6;
  $5 = $84;
  $85 = $5;
  $__p = $85;
 } else {
  $86 = $__sz;
  $1 = $86;
  $87 = $1;
  $88 = ($87>>>0)<(11);
  if ($88) {
   $95 = 11;
  } else {
   $89 = $1;
   $90 = (($89) + 1)|0;
   $0 = $90;
   $91 = $0;
   $92 = (($91) + 15)|0;
   $93 = $92 & -16;
   $95 = $93;
  }
  $94 = (($95) - 1)|0;
  $__cap = $94;
  $4 = $51;
  $96 = $4;
  $3 = $96;
  $97 = $3;
  $2 = $97;
  $98 = $2;
  $99 = $__cap;
  $100 = (($99) + 1)|0;
  $14 = $98;
  $15 = $100;
  $101 = $14;
  $102 = $15;
  $11 = $101;
  $12 = $102;
  $13 = 0;
  $103 = $12;
  $10 = $103;
  $104 = $10;
  $105 = (__Znwj($104)|0);
  $__p = $105;
  $106 = $__p;
  $18 = $51;
  $19 = $106;
  $107 = $18;
  $108 = $19;
  $17 = $107;
  $109 = $17;
  $16 = $109;
  $110 = $16;
  $111 = (($110) + 8|0);
  HEAP32[$111>>2] = $108;
  $112 = $__cap;
  $113 = (($112) + 1)|0;
  $22 = $51;
  $23 = $113;
  $114 = $22;
  $115 = $23;
  $116 = 1 | $115;
  $21 = $114;
  $117 = $21;
  $20 = $117;
  $118 = $20;
  HEAP32[$118>>2] = $116;
  $119 = $__sz;
  $26 = $51;
  $27 = $119;
  $120 = $26;
  $121 = $27;
  $25 = $120;
  $122 = $25;
  $24 = $122;
  $123 = $24;
  $124 = (($123) + 4|0);
  HEAP32[$124>>2] = $121;
 }
 while(1) {
  $125 = $48;
  $126 = $49;
  $127 = ($125|0)!=($126|0);
  if (!($127)) {
   break;
  }
  $128 = $__p;
  $129 = $48;
  __ZNSt3__111char_traitsIcE6assignERcRKc($128,$129);
  $130 = $48;
  $131 = (($130) + 1|0);
  $48 = $131;
  $132 = $__p;
  $133 = (($132) + 1|0);
  $__p = $133;
 }
 $134 = $__p;
 HEAP8[$50>>0] = 0;
 __ZNSt3__111char_traitsIcE6assignERcRKc($134,$50);
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE7compareEPKcS3_j($__s1,$__s2,$__n) {
 $__s1 = $__s1|0;
 $__s2 = $__s2|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__s1;
 $1 = $__s2;
 $2 = $__n;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_memcmp($3,$4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root,$__x) {
 $__root = $__root|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__y = 0, $__y1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 32|0;
 $9 = sp + 72|0;
 $15 = sp + 52|0;
 $16 = sp + 60|0;
 $11 = $__root;
 $12 = $__x;
 $17 = $12;
 $18 = $11;
 $19 = ($17|0)==($18|0);
 $20 = $12;
 $21 = (($20) + 12|0);
 $22 = $19&1;
 HEAP8[$21>>0] = $22;
 while(1) {
  $23 = $12;
  $24 = $11;
  $25 = ($23|0)!=($24|0);
  if ($25) {
   $26 = $12;
   $27 = (($26) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + 12|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&1;
   $32 = $31 ^ 1;
   $147 = $32;
  } else {
   $147 = 0;
  }
  if (!($147)) {
   label = 25;
   break;
  }
  $33 = $12;
  $34 = (($33) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $10 = $35;
  $36 = $10;
  $37 = $10;
  $38 = (($37) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = HEAP32[$39>>2]|0;
  $41 = ($36|0)==($40|0);
  if ($41) {
   $42 = $12;
   $43 = (($42) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $__y = $48;
   $49 = $__y;
   $7 = $9;
   $8 = -1;
   $50 = $7;
   HEAP32[$50>>2] = 0;
   $51 = HEAP32[$9>>2]|0;
   HEAP32[$15>>2] = $51;
   $6 = $15;
   $52 = ($49|0)!=(0|0);
   if (!($52)) {
    label = 11;
    break;
   }
   $53 = $__y;
   $54 = (($53) + 12|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&1;
   if ($56) {
    label = 11;
    break;
   }
   $57 = $12;
   $58 = (($57) + 8|0);
   $59 = HEAP32[$58>>2]|0;
   $12 = $59;
   $60 = $12;
   $61 = (($60) + 12|0);
   HEAP8[$61>>0] = 1;
   $62 = $12;
   $63 = (($62) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   $12 = $64;
   $65 = $12;
   $66 = $11;
   $67 = ($65|0)==($66|0);
   $68 = $12;
   $69 = (($68) + 12|0);
   $70 = $67&1;
   HEAP8[$69>>0] = $70;
   $71 = $__y;
   $72 = (($71) + 12|0);
   HEAP8[$72>>0] = 1;
  } else {
   $95 = $12;
   $96 = (($95) + 8|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (($97) + 8|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = HEAP32[$99>>2]|0;
   $__y1 = $100;
   $101 = $__y1;
   $1 = $3;
   $2 = -1;
   $102 = $1;
   HEAP32[$102>>2] = 0;
   $103 = HEAP32[$3>>2]|0;
   HEAP32[$16>>2] = $103;
   $4 = $16;
   $104 = ($101|0)!=(0|0);
   if (!($104)) {
    label = 20;
    break;
   }
   $105 = $__y1;
   $106 = (($105) + 12|0);
   $107 = HEAP8[$106>>0]|0;
   $108 = $107&1;
   if ($108) {
    label = 20;
    break;
   }
   $109 = $12;
   $110 = (($109) + 8|0);
   $111 = HEAP32[$110>>2]|0;
   $12 = $111;
   $112 = $12;
   $113 = (($112) + 12|0);
   HEAP8[$113>>0] = 1;
   $114 = $12;
   $115 = (($114) + 8|0);
   $116 = HEAP32[$115>>2]|0;
   $12 = $116;
   $117 = $12;
   $118 = $11;
   $119 = ($117|0)==($118|0);
   $120 = $12;
   $121 = (($120) + 12|0);
   $122 = $119&1;
   HEAP8[$121>>0] = $122;
   $123 = $__y1;
   $124 = (($123) + 12|0);
   HEAP8[$124>>0] = 1;
  }
 }
 if ((label|0) == 11) {
  $73 = $12;
  $0 = $73;
  $74 = $0;
  $75 = $0;
  $76 = (($75) + 8|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = HEAP32[$77>>2]|0;
  $79 = ($74|0)==($78|0);
  if (!($79)) {
   $80 = $12;
   $81 = (($80) + 8|0);
   $82 = HEAP32[$81>>2]|0;
   $12 = $82;
   $83 = $12;
   __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($83);
  }
  $84 = $12;
  $85 = (($84) + 8|0);
  $86 = HEAP32[$85>>2]|0;
  $12 = $86;
  $87 = $12;
  $88 = (($87) + 12|0);
  HEAP8[$88>>0] = 1;
  $89 = $12;
  $90 = (($89) + 8|0);
  $91 = HEAP32[$90>>2]|0;
  $12 = $91;
  $92 = $12;
  $93 = (($92) + 12|0);
  HEAP8[$93>>0] = 0;
  $94 = $12;
  __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($94);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 20) {
  $125 = $12;
  $5 = $125;
  $126 = $5;
  $127 = $5;
  $128 = (($127) + 8|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = HEAP32[$129>>2]|0;
  $131 = ($126|0)==($130|0);
  if ($131) {
   $132 = $12;
   $133 = (($132) + 8|0);
   $134 = HEAP32[$133>>2]|0;
   $12 = $134;
   $135 = $12;
   __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($135);
  }
  $136 = $12;
  $137 = (($136) + 8|0);
  $138 = HEAP32[$137>>2]|0;
  $12 = $138;
  $139 = $12;
  $140 = (($139) + 12|0);
  HEAP8[$140>>0] = 1;
  $141 = $12;
  $142 = (($141) + 8|0);
  $143 = HEAP32[$142>>2]|0;
  $12 = $143;
  $144 = $12;
  $145 = (($144) + 12|0);
  HEAP8[$145>>0] = 0;
  $146 = $12;
  __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($146);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 25) {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE($this,$__nd) {
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 104|0;
 $20 = sp + 68|0;
 $25 = sp + 92|0;
 $21 = $this;
 $22 = $__nd;
 $26 = $21;
 $27 = $22;
 $18 = $20;
 $19 = -1;
 $28 = $18;
 HEAP32[$28>>2] = 0;
 $29 = HEAP32[$20>>2]|0;
 HEAP32[$25>>2] = $29;
 $17 = $25;
 $30 = ($27|0)!=(0|0);
 if (!($30)) {
  STACKTOP = sp;return;
 }
 $31 = $22;
 $32 = HEAP32[$31>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE($26,$32);
 $33 = $22;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE($26,$35);
 $3 = $26;
 $36 = $3;
 $37 = (($36) + 4|0);
 $2 = $37;
 $38 = $2;
 $1 = $38;
 $39 = $1;
 $__na = $39;
 $40 = $__na;
 $41 = $22;
 $42 = (($41) + 16|0);
 $0 = $42;
 $43 = $0;
 $7 = $40;
 $8 = $43;
 $44 = $7;
 $45 = $8;
 ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
 $4 = $44;
 $5 = $45;
 $46 = $5;
 __THREW__ = 0;
 invoke_vi(439,($46|0));
 $47 = __THREW__; __THREW__ = 0;
 $48 = $47&1;
 if ($48) {
  $56 = ___cxa_find_matching_catch()|0;
  $57 = tempRet0;
  $23 = $56;
  $24 = $57;
  $58 = $23;
  ___cxa_call_unexpected(($58|0));
  // unreachable;
 }
 $49 = $__na;
 $50 = $22;
 $14 = $49;
 $15 = $50;
 $16 = 1;
 $51 = $14;
 $52 = $15;
 $53 = $16;
 $11 = $51;
 $12 = $52;
 $13 = $53;
 $54 = $12;
 $10 = $54;
 $55 = $10;
 __ZdlPv($55);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEEEENS_19__map_value_compareIS7_SE_NS_4lessIS7_EELb1EEENS5_ISE_EEE7destroyEPNS_11__tree_nodeISE_SC_EE($this,$__nd) {
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 104|0;
 $20 = sp + 68|0;
 $25 = sp + 92|0;
 $21 = $this;
 $22 = $__nd;
 $26 = $21;
 $27 = $22;
 $18 = $20;
 $19 = -1;
 $28 = $18;
 HEAP32[$28>>2] = 0;
 $29 = HEAP32[$20>>2]|0;
 HEAP32[$25>>2] = $29;
 $17 = $25;
 $30 = ($27|0)!=(0|0);
 if (!($30)) {
  STACKTOP = sp;return;
 }
 $31 = $22;
 $32 = HEAP32[$31>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEEEENS_19__map_value_compareIS7_SE_NS_4lessIS7_EELb1EEENS5_ISE_EEE7destroyEPNS_11__tree_nodeISE_SC_EE($26,$32);
 $33 = $22;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEEEENS_19__map_value_compareIS7_SE_NS_4lessIS7_EELb1EEENS5_ISE_EEE7destroyEPNS_11__tree_nodeISE_SC_EE($26,$35);
 $3 = $26;
 $36 = $3;
 $37 = (($36) + 4|0);
 $2 = $37;
 $38 = $2;
 $1 = $38;
 $39 = $1;
 $__na = $39;
 $40 = $__na;
 $41 = $22;
 $42 = (($41) + 16|0);
 $0 = $42;
 $43 = $0;
 $7 = $40;
 $8 = $43;
 $44 = $7;
 $45 = $8;
 ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
 $4 = $44;
 $5 = $45;
 $46 = $5;
 __THREW__ = 0;
 invoke_vi(440,($46|0));
 $47 = __THREW__; __THREW__ = 0;
 $48 = $47&1;
 if ($48) {
  $56 = ___cxa_find_matching_catch()|0;
  $57 = tempRet0;
  $23 = $56;
  $24 = $57;
  $58 = $23;
  ___cxa_call_unexpected(($58|0));
  // unreachable;
 }
 $49 = $__na;
 $50 = $22;
 $14 = $49;
 $15 = $50;
 $16 = 1;
 $51 = $14;
 $52 = $15;
 $53 = $16;
 $11 = $51;
 $12 = $52;
 $13 = $53;
 $54 = $12;
 $10 = $54;
 $55 = $10;
 __ZdlPv($55);
 STACKTOP = sp;return;
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__np = 0, $__ns = 0, $__r$i = 0, $__sp = 0, $__sz = 0, $cleanup$dest = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $26 = sp + 100|0;
 $35 = sp + 144|0;
 $43 = sp + 176|0;
 $50 = sp + 208|0;
 $56 = sp + 220|0;
 $57 = sp;
 $__sp = sp + 112|0;
 $60 = sp + 104|0;
 $62 = sp + 8|0;
 $51 = $__ob;
 $52 = $__op;
 $53 = $__oe;
 $54 = $__iob;
 $55 = $__fl;
 $63 = HEAP32[$__s>>2]|0;
 $48 = $50;
 $49 = -1;
 $64 = $48;
 HEAP32[$64>>2] = 0;
 $65 = HEAP32[$50>>2]|0;
 HEAP32[$56>>2] = $65;
 $47 = $56;
 $66 = ($63|0)==(0|0);
 if ($66) {
  ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
  STACKTOP = sp;return;
 }
 $67 = $53;
 $68 = $51;
 $69 = $67;
 $70 = $68;
 $71 = (($69) - ($70))|0;
 $__sz = $71;
 $72 = $54;
 $37 = $72;
 $73 = $37;
 $74 = (($73) + 12|0);
 $75 = HEAP32[$74>>2]|0;
 $__ns = $75;
 $76 = $__ns;
 $77 = $__sz;
 $78 = ($76|0)>($77|0);
 if ($78) {
  $79 = $__sz;
  $80 = $__ns;
  $81 = (($80) - ($79))|0;
  $__ns = $81;
 } else {
  $__ns = 0;
 }
 $82 = $52;
 $83 = $51;
 $84 = $82;
 $85 = $83;
 $86 = (($84) - ($85))|0;
 $__np = $86;
 $87 = $__np;
 $88 = ($87|0)>(0);
 do {
  if ($88) {
   $89 = HEAP32[$__s>>2]|0;
   $90 = $51;
   $91 = $__np;
   $27 = $89;
   $28 = $90;
   $29 = $91;
   $92 = $27;
   $93 = HEAP32[$92>>2]|0;
   $94 = (($93) + 48|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $28;
   $97 = $29;
   $98 = (FUNCTION_TABLE_iiii[$95 & 1023]($92,$96,$97)|0);
   $99 = $__np;
   $100 = ($98|0)!=($99|0);
   if (!($100)) {
    break;
   }
   $24 = $26;
   $25 = -1;
   $101 = $24;
   HEAP32[$101>>2] = 0;
   $102 = HEAP32[$26>>2]|0;
   HEAP32[$57>>2] = $102;
   $0 = $57;
   HEAP32[$__s>>2] = 0;
   ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 $103 = $__ns;
 $104 = ($103|0)>(0);
 do {
  if ($104) {
   $105 = $__ns;
   $106 = $55;
   $7 = $__sp;
   $8 = $105;
   $9 = $106;
   $107 = $7;
   $108 = $8;
   $109 = $9;
   $4 = $107;
   $5 = $108;
   $6 = $109;
   $110 = $4;
   $3 = $110;
   $111 = $3;
   $2 = $111;
   $112 = $2;
   $1 = $112;
   $113 = $5;
   $114 = $6;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($110,$113,$114);
   $115 = HEAP32[$__s>>2]|0;
   $23 = $__sp;
   $116 = $23;
   $22 = $116;
   $117 = $22;
   $21 = $117;
   $118 = $21;
   $20 = $118;
   $119 = $20;
   $19 = $119;
   $120 = $19;
   $121 = HEAP8[$120>>0]|0;
   $122 = $121&255;
   $123 = $122 & 1;
   $124 = ($123|0)!=(0);
   if ($124) {
    $13 = $117;
    $125 = $13;
    $12 = $125;
    $126 = $12;
    $11 = $126;
    $127 = $11;
    $128 = (($127) + 8|0);
    $129 = HEAP32[$128>>2]|0;
    $136 = $129;
   } else {
    $18 = $117;
    $130 = $18;
    $17 = $130;
    $131 = $17;
    $16 = $131;
    $132 = $16;
    $133 = (($132) + 1|0);
    $15 = $133;
    $134 = $15;
    $14 = $134;
    $135 = $14;
    $136 = $135;
   }
   $10 = $136;
   $137 = $10;
   $138 = $__ns;
   $30 = $115;
   $31 = $137;
   $32 = $138;
   $139 = $30;
   $140 = HEAP32[$139>>2]|0;
   $141 = (($140) + 48|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = $31;
   $144 = $32;
   __THREW__ = 0;
   $145 = (invoke_iiii($142|0,($139|0),($143|0),($144|0))|0);
   $146 = __THREW__; __THREW__ = 0;
   $147 = $146&1;
   if ($147) {
    $152 = ___cxa_find_matching_catch()|0;
    $153 = tempRet0;
    $58 = $152;
    $59 = $153;
    __THREW__ = 0;
    invoke_vi(403,($__sp|0));
    $154 = __THREW__; __THREW__ = 0;
    $155 = $154&1;
    if ($155) {
     $185 = ___cxa_find_matching_catch(0|0)|0;
     $186 = tempRet0;
     ___clang_call_terminate($185);
     // unreachable;
    }
    $183 = $58;
    $184 = $59;
    ___resumeException($183|0);
    // unreachable;
   }
   $148 = $__ns;
   $149 = ($145|0)!=($148|0);
   if ($149) {
    $33 = $35;
    $34 = -1;
    $150 = $33;
    HEAP32[$150>>2] = 0;
    $151 = HEAP32[$35>>2]|0;
    HEAP32[$60>>2] = $151;
    $36 = $60;
    HEAP32[$__s>>2] = 0;
    ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
    $61 = 1;
   } else {
    $61 = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
   $cleanup$dest = $61;
   if ((($cleanup$dest|0) == 0)) {
    break;
   } else if ((($cleanup$dest|0) == 1)) {
    STACKTOP = sp;return;
   } else {
    // unreachable;
   }
  }
 } while(0);
 $156 = $53;
 $157 = $52;
 $158 = $156;
 $159 = $157;
 $160 = (($158) - ($159))|0;
 $__np = $160;
 $161 = $__np;
 $162 = ($161|0)>(0);
 do {
  if ($162) {
   $163 = HEAP32[$__s>>2]|0;
   $164 = $52;
   $165 = $__np;
   $38 = $163;
   $39 = $164;
   $40 = $165;
   $166 = $38;
   $167 = HEAP32[$166>>2]|0;
   $168 = (($167) + 48|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = $39;
   $171 = $40;
   $172 = (FUNCTION_TABLE_iiii[$169 & 1023]($166,$170,$171)|0);
   $173 = $__np;
   $174 = ($172|0)!=($173|0);
   if (!($174)) {
    break;
   }
   $41 = $43;
   $42 = -1;
   $175 = $41;
   HEAP32[$175>>2] = 0;
   $176 = HEAP32[$43>>2]|0;
   HEAP32[$62>>2] = $176;
   $44 = $62;
   HEAP32[$__s>>2] = 0;
   ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 $177 = $54;
 $45 = $177;
 $46 = 0;
 $178 = $45;
 $179 = (($178) + 12|0);
 $180 = HEAP32[$179>>2]|0;
 $__r$i = $180;
 $181 = $46;
 $182 = (($178) + 12|0);
 HEAP32[$182>>2] = $181;
 ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE6assignERcRKc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $0;
 HEAP8[$4>>0] = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 32|0;
 $8 = sp + 8|0;
 $5 = $__x;
 $9 = $5;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $__y = $11;
 $12 = $__y;
 $13 = HEAP32[$12>>2]|0;
 $14 = $5;
 $15 = (($14) + 4|0);
 HEAP32[$15>>2] = $13;
 $16 = $5;
 $17 = (($16) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $2 = $4;
 $3 = -1;
 $19 = $2;
 HEAP32[$19>>2] = 0;
 $20 = HEAP32[$4>>2]|0;
 HEAP32[$8>>2] = $20;
 $0 = $8;
 $21 = ($18|0)!=(0|0);
 if ($21) {
  $22 = $5;
  $23 = $5;
  $24 = (($23) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 8|0);
  HEAP32[$26>>2] = $22;
 }
 $27 = $5;
 $28 = (($27) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $__y;
 $31 = (($30) + 8|0);
 HEAP32[$31>>2] = $29;
 $32 = $5;
 $1 = $32;
 $33 = $1;
 $34 = $1;
 $35 = (($34) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($33|0)==($37|0);
 if ($38) {
  $39 = $__y;
  $40 = $5;
  $41 = (($40) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  HEAP32[$42>>2] = $39;
  $48 = $5;
  $49 = $__y;
  HEAP32[$49>>2] = $48;
  $50 = $__y;
  $51 = $5;
  $52 = (($51) + 8|0);
  HEAP32[$52>>2] = $50;
  STACKTOP = sp;return;
 } else {
  $43 = $__y;
  $44 = $5;
  $45 = (($44) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + 4|0);
  HEAP32[$47>>2] = $43;
  $48 = $5;
  $49 = $__y;
  HEAP32[$49>>2] = $48;
  $50 = $__y;
  $51 = $5;
  $52 = (($51) + 8|0);
  HEAP32[$52>>2] = $50;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 32|0;
 $8 = sp + 8|0;
 $5 = $__x;
 $9 = $5;
 $10 = HEAP32[$9>>2]|0;
 $__y = $10;
 $11 = $__y;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $5;
 HEAP32[$14>>2] = $13;
 $15 = $5;
 $16 = HEAP32[$15>>2]|0;
 $2 = $4;
 $3 = -1;
 $17 = $2;
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[$4>>2]|0;
 HEAP32[$8>>2] = $18;
 $0 = $8;
 $19 = ($16|0)!=(0|0);
 if ($19) {
  $20 = $5;
  $21 = $5;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 8|0);
  HEAP32[$23>>2] = $20;
 }
 $24 = $5;
 $25 = (($24) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $__y;
 $28 = (($27) + 8|0);
 HEAP32[$28>>2] = $26;
 $29 = $5;
 $1 = $29;
 $30 = $1;
 $31 = $1;
 $32 = (($31) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$33>>2]|0;
 $35 = ($30|0)==($34|0);
 if ($35) {
  $36 = $__y;
  $37 = $5;
  $38 = (($37) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$39>>2] = $36;
  $45 = $5;
  $46 = $__y;
  $47 = (($46) + 4|0);
  HEAP32[$47>>2] = $45;
  $48 = $__y;
  $49 = $5;
  $50 = (($49) + 8|0);
  HEAP32[$50>>2] = $48;
  STACKTOP = sp;return;
 } else {
  $40 = $__y;
  $41 = $5;
  $42 = (($41) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + 4|0);
  HEAP32[$44>>2] = $40;
  $45 = $5;
  $46 = $__y;
  $47 = (($46) + 4|0);
  HEAP32[$47>>2] = $45;
  $48 = $__y;
  $49 = $5;
  $50 = (($49) + 8|0);
  HEAP32[$50>>2] = $48;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS0_IPKSt9type_infoPvEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (($3) + 12|0);
 __THREW__ = 0;
 invoke_vi(403,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 __THREW__ = 0;
 invoke_vi(403,($3|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch(0|0)|0;
  $14 = tempRet0;
  ___clang_call_terminate($13);
  // unreachable;
 }
 $11 = $1;
 $12 = $2;
 ___resumeException($11|0);
 // unreachable;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS0_IPKSt9type_infoPvEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 STACKTOP = sp;return;
}
function _shrLog($iLogMode,$iErrNum,$cFormatString,$varargs) {
 $iLogMode = $iLogMode|0;
 $iErrNum = $iErrNum|0;
 $cFormatString = $cFormatString|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0.0, $154 = 0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0.0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $arglist_current = 0, $arglist_current102 = 0, $arglist_current18 = 0, $arglist_current30 = 0, $arglist_current42 = 0, $arglist_current54 = 0, $arglist_current66 = 0, $arglist_current78 = 0, $arglist_current90 = 0, $arglist_next = 0, $arglist_next103 = 0, $arglist_next19 = 0, $arglist_next31 = 0, $arglist_next43 = 0, $arglist_next55 = 0, $arglist_next67 = 0, $arglist_next79 = 0, $arglist_next91 = 0, $cArg = 0;
 var $cFileMode = 0, $cFormat = 0, $dArg = 0.0, $iArg = 0, $pStr = 0, $szNumWritten = 0, $uiArg = 0, $vaArgList = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer104 = 0, $vararg_buffer107 = 0, $vararg_buffer11 = 0, $vararg_buffer110 = 0, $vararg_buffer113 = 0, $vararg_buffer115 = 0, $vararg_buffer14 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer5 = 0, $vararg_buffer50 = 0, $vararg_buffer56 = 0, $vararg_buffer59 = 0, $vararg_buffer62 = 0, $vararg_buffer68 = 0, $vararg_buffer71 = 0, $vararg_buffer74 = 0, $vararg_buffer8 = 0, $vararg_buffer80 = 0, $vararg_buffer83 = 0, $vararg_buffer86 = 0, $vararg_buffer92 = 0, $vararg_buffer95 = 0;
 var $vararg_buffer98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer115 = sp + 32|0;
 $vararg_buffer113 = sp + 216|0;
 $vararg_buffer110 = sp + 184|0;
 $vararg_buffer107 = sp + 112|0;
 $vararg_buffer104 = sp + 120|0;
 $vararg_buffer98 = sp + 264|0;
 $vararg_buffer95 = sp + 40|0;
 $vararg_buffer92 = sp + 48|0;
 $vararg_buffer86 = sp + 56|0;
 $vararg_buffer83 = sp + 64|0;
 $vararg_buffer80 = sp + 72|0;
 $vararg_buffer74 = sp + 80|0;
 $vararg_buffer71 = sp + 192|0;
 $vararg_buffer68 = sp + 208|0;
 $vararg_buffer62 = sp + 224|0;
 $vararg_buffer59 = sp + 240|0;
 $vararg_buffer56 = sp + 256|0;
 $vararg_buffer50 = sp + 128|0;
 $vararg_buffer47 = sp + 136|0;
 $vararg_buffer44 = sp + 144|0;
 $vararg_buffer38 = sp + 152|0;
 $vararg_buffer35 = sp + 160|0;
 $vararg_buffer32 = sp + 168|0;
 $vararg_buffer26 = sp + 176|0;
 $vararg_buffer23 = sp + 24|0;
 $vararg_buffer20 = sp + 8|0;
 $vararg_buffer14 = sp;
 $vararg_buffer11 = sp + 16|0;
 $vararg_buffer8 = sp + 88|0;
 $vararg_buffer5 = sp + 96|0;
 $vararg_buffer3 = sp + 200|0;
 $vararg_buffer1 = sp + 104|0;
 $vararg_buffer = sp + 232|0;
 $cFileMode = sp + 329|0;
 $vaArgList = sp + 272|0;
 $cFormat = sp + 324|0;
 $1 = $iLogMode;
 $2 = $iErrNum;
 $3 = $cFormatString;
 $szNumWritten = 0;
 $4 = HEAP32[2792>>2]|0;
 $5 = ($4|0)==(0|0);
 do {
  if ($5) {
   $6 = $1;
   $7 = $6 & 2;
   $8 = ($7|0)!=(0);
   if ($8) {
    $9 = HEAP32[2784>>2]|0;
    $10 = ($9|0)==(0|0);
    if ($10) {
     _shrSetLogFileName(2808);
    }
    $11 = $1;
    $12 = $11 & 4;
    $13 = ($12|0)!=(0);
    if ($13) {
     (_sprintf($cFileMode,2832,$vararg_buffer)|0);
    } else {
     (_sprintf($cFileMode,2840,$vararg_buffer1)|0);
    }
    $14 = HEAP32[2784>>2]|0;
    $15 = (_fopen(($14|0),($cFileMode|0))|0);
    HEAP32[2792>>2] = $15;
    $16 = ($15|0)==(0|0);
    if (!($16)) {
     break;
    }
    $17 = HEAP32[2792>>2]|0;
    $18 = ($17|0)!=(0|0);
    if ($18) {
     $19 = HEAP32[2792>>2]|0;
     (_fclose(($19|0))|0);
    }
    $0 = -1;
    $320 = $0;
    STACKTOP = sp;return ($320|0);
   }
  }
 } while(0);
 $20 = HEAP32[2800>>2]|0;
 $21 = ($20|0)==(0|0);
 do {
  if ($21) {
   $22 = $1;
   $23 = $22 & 2;
   $24 = ($23|0)!=(0);
   if ($24) {
    $25 = $1;
    $26 = $25 & 8;
    $27 = ($26|0)!=(0);
    if ($27) {
     $28 = (_fopen((2848|0),(2832|0))|0);
     HEAP32[2800>>2] = $28;
     $29 = ($28|0)==(0|0);
     if (!($29)) {
      break;
     }
     $30 = HEAP32[2800>>2]|0;
     $31 = ($30|0)!=(0|0);
     if ($31) {
      $32 = HEAP32[2800>>2]|0;
      (_fclose(($32|0))|0);
     }
     $0 = -1;
     $320 = $0;
     STACKTOP = sp;return ($320|0);
    }
   }
  }
 } while(0);
 $33 = $1;
 $34 = $33 & 16;
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = $1;
  $37 = $36 & 1;
  $38 = ($37|0)!=(0);
  if ($38) {
   $39 = $2;
   HEAP32[$vararg_buffer3>>2] = $39;
   $40 = (_printf((2872|0),($vararg_buffer3|0))|0);
   $szNumWritten = $40;
  }
  $41 = $1;
  $42 = $41 & 2;
  $43 = ($42|0)!=(0);
  if ($43) {
   $44 = HEAP32[2792>>2]|0;
   $45 = $2;
   HEAP32[$vararg_buffer5>>2] = $45;
   $46 = (_fprintf(($44|0),(2872|0),($vararg_buffer5|0))|0);
   $szNumWritten = $46;
  }
 }
 HEAP32[$vaArgList>>2] = $varargs;
 $47 = $3;
 $pStr = $47;
 while(1) {
  $48 = $pStr;
  $49 = HEAP8[$48>>0]|0;
  $50 = ($49<<24>>24)!=(0);
  if (!($50)) {
   break;
  }
  $51 = $pStr;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = ($53|0)!=(37);
  L43: do {
   if ($54) {
    $55 = $1;
    $56 = $55 & 1;
    $57 = ($56|0)!=(0);
    if ($57) {
     $58 = $pStr;
     $59 = HEAP8[$58>>0]|0;
     $60 = $59 << 24 >> 24;
     $61 = HEAP32[_stdout>>2]|0;
     $62 = (_putc(($60|0),($61|0))|0);
     $szNumWritten = $62;
    }
    $63 = $1;
    $64 = $63 & 2;
    $65 = ($64|0)!=(0);
    if ($65) {
     $66 = $pStr;
     $67 = HEAP8[$66>>0]|0;
     $68 = $67 << 24 >> 24;
     $69 = HEAP32[2792>>2]|0;
     $70 = (_putc(($68|0),($69|0))|0);
     $szNumWritten = $70;
     $71 = $1;
     $72 = $71 & 8;
     $73 = ($72|0)!=(0);
     if ($73) {
      $74 = $pStr;
      $75 = HEAP8[$74>>0]|0;
      $76 = $75 << 24 >> 24;
      $77 = HEAP32[2800>>2]|0;
      $78 = (_putc(($76|0),($77|0))|0);
      $szNumWritten = $78;
     }
    }
    label = 111;
   } else {
    $79 = $pStr;
    $80 = (($79) + 1|0);
    $pStr = $80;
    $81 = HEAP8[$80>>0]|0;
    $82 = $81 << 24 >> 24;
    switch ($82|0) {
    case 117:  {
     $arglist_current30 = HEAP32[$vaArgList>>2]|0;
     $119 = HEAP32[$arglist_current30>>2]|0;
     $arglist_next31 = (($arglist_current30) + 4|0);
     HEAP32[$vaArgList>>2] = $arglist_next31;
     $uiArg = $119;
     $120 = $1;
     $121 = $120 & 1;
     $122 = ($121|0)!=(0);
     if ($122) {
      $123 = $uiArg;
      HEAP32[$vararg_buffer32>>2] = $123;
      $124 = (_printf((2912|0),($vararg_buffer32|0))|0);
      $szNumWritten = $124;
     }
     $125 = $1;
     $126 = $125 & 2;
     $127 = ($126|0)!=(0);
     if ($127) {
      $128 = HEAP32[2792>>2]|0;
      $129 = $uiArg;
      HEAP32[$vararg_buffer35>>2] = $129;
      $130 = (_fprintf(($128|0),(2912|0),($vararg_buffer35|0))|0);
      $szNumWritten = $130;
      $131 = $1;
      $132 = $131 & 8;
      $133 = ($132|0)!=(0);
      if ($133) {
       $134 = HEAP32[2800>>2]|0;
       $135 = $uiArg;
       HEAP32[$vararg_buffer38>>2] = $135;
       $136 = (_fprintf(($134|0),(2912|0),($vararg_buffer38|0))|0);
       $szNumWritten = $136;
      }
     }
     break L43;
     break;
    }
    case 105: case 100:  {
     $arglist_current18 = HEAP32[$vaArgList>>2]|0;
     $101 = HEAP32[$arglist_current18>>2]|0;
     $arglist_next19 = (($arglist_current18) + 4|0);
     HEAP32[$vaArgList>>2] = $arglist_next19;
     $iArg = $101;
     $102 = $1;
     $103 = $102 & 1;
     $104 = ($103|0)!=(0);
     if ($104) {
      $105 = $iArg;
      HEAP32[$vararg_buffer20>>2] = $105;
      $106 = (_printf((2904|0),($vararg_buffer20|0))|0);
      $szNumWritten = $106;
     }
     $107 = $1;
     $108 = $107 & 2;
     $109 = ($108|0)!=(0);
     if ($109) {
      $110 = HEAP32[2792>>2]|0;
      $111 = $iArg;
      HEAP32[$vararg_buffer23>>2] = $111;
      $112 = (_fprintf(($110|0),(2904|0),($vararg_buffer23|0))|0);
      $szNumWritten = $112;
      $113 = $1;
      $114 = $113 & 8;
      $115 = ($114|0)!=(0);
      if ($115) {
       $116 = HEAP32[2800>>2]|0;
       $117 = $iArg;
       HEAP32[$vararg_buffer26>>2] = $117;
       $118 = (_fprintf(($116|0),(2904|0),($vararg_buffer26|0))|0);
       $szNumWritten = $118;
      }
     }
     break L43;
     break;
    }
    case 115:  {
     $arglist_current = HEAP32[$vaArgList>>2]|0;
     $83 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$vaArgList>>2] = $arglist_next;
     $cArg = $83;
     $84 = $1;
     $85 = $84 & 1;
     $86 = ($85|0)!=(0);
     if ($86) {
      $87 = $cArg;
      HEAP32[$vararg_buffer8>>2] = $87;
      $88 = (_printf((2896|0),($vararg_buffer8|0))|0);
      $szNumWritten = $88;
     }
     $89 = $1;
     $90 = $89 & 2;
     $91 = ($90|0)!=(0);
     if ($91) {
      $92 = HEAP32[2792>>2]|0;
      $93 = $cArg;
      HEAP32[$vararg_buffer11>>2] = $93;
      $94 = (_fprintf(($92|0),(2896|0),($vararg_buffer11|0))|0);
      $szNumWritten = $94;
      $95 = $1;
      $96 = $95 & 8;
      $97 = ($96|0)!=(0);
      if ($97) {
       $98 = HEAP32[2800>>2]|0;
       $99 = $cArg;
       HEAP32[$vararg_buffer14>>2] = $99;
       $100 = (_fprintf(($98|0),(2896|0),($vararg_buffer14|0))|0);
       $szNumWritten = $100;
      }
     }
     break L43;
     break;
    }
    case 69: case 101:  {
     $arglist_current42 = HEAP32[$vaArgList>>2]|0;
     HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current42>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current42+4>>2];$137 = +HEAPF64[tempDoublePtr>>3];
     $arglist_next43 = (($arglist_current42) + 8|0);
     HEAP32[$vaArgList>>2] = $arglist_next43;
     $dArg = $137;
     $138 = $1;
     $139 = $138 & 1;
     $140 = ($139|0)!=(0);
     if ($140) {
      $141 = $dArg;
      HEAPF64[tempDoublePtr>>3]=$141;HEAP32[$vararg_buffer44>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer44+4>>2]=HEAP32[tempDoublePtr+4>>2];
      $142 = (_printf((2920|0),($vararg_buffer44|0))|0);
      $szNumWritten = $142;
     }
     $143 = $1;
     $144 = $143 & 2;
     $145 = ($144|0)!=(0);
     if ($145) {
      $146 = HEAP32[2792>>2]|0;
      $147 = $dArg;
      HEAPF64[tempDoublePtr>>3]=$147;HEAP32[$vararg_buffer47>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer47+4>>2]=HEAP32[tempDoublePtr+4>>2];
      $148 = (_fprintf(($146|0),(2920|0),($vararg_buffer47|0))|0);
      $szNumWritten = $148;
      $149 = $1;
      $150 = $149 & 8;
      $151 = ($150|0)!=(0);
      if ($151) {
       $152 = HEAP32[2800>>2]|0;
       $153 = $dArg;
       HEAPF64[tempDoublePtr>>3]=$153;HEAP32[$vararg_buffer50>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer50+4>>2]=HEAP32[tempDoublePtr+4>>2];
       $154 = (_fprintf(($152|0),(2920|0),($vararg_buffer50|0))|0);
       $szNumWritten = $154;
      }
     }
     break L43;
     break;
    }
    case 102:  {
     $arglist_current54 = HEAP32[$vaArgList>>2]|0;
     HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current54>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current54+4>>2];$155 = +HEAPF64[tempDoublePtr>>3];
     $arglist_next55 = (($arglist_current54) + 8|0);
     HEAP32[$vaArgList>>2] = $arglist_next55;
     $dArg = $155;
     $156 = $1;
     $157 = $156 & 1;
     $158 = ($157|0)!=(0);
     if ($158) {
      $159 = $dArg;
      HEAPF64[tempDoublePtr>>3]=$159;HEAP32[$vararg_buffer56>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer56+4>>2]=HEAP32[tempDoublePtr+4>>2];
      $160 = (_printf((2928|0),($vararg_buffer56|0))|0);
      $szNumWritten = $160;
     }
     $161 = $1;
     $162 = $161 & 2;
     $163 = ($162|0)!=(0);
     if ($163) {
      $164 = HEAP32[2792>>2]|0;
      $165 = $dArg;
      HEAPF64[tempDoublePtr>>3]=$165;HEAP32[$vararg_buffer59>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer59+4>>2]=HEAP32[tempDoublePtr+4>>2];
      $166 = (_fprintf(($164|0),(2928|0),($vararg_buffer59|0))|0);
      $szNumWritten = $166;
      $167 = $1;
      $168 = $167 & 8;
      $169 = ($168|0)!=(0);
      if ($169) {
       $170 = HEAP32[2800>>2]|0;
       $171 = $dArg;
       HEAPF64[tempDoublePtr>>3]=$171;HEAP32[$vararg_buffer62>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer62+4>>2]=HEAP32[tempDoublePtr+4>>2];
       $172 = (_fprintf(($170|0),(2928|0),($vararg_buffer62|0))|0);
       $szNumWritten = $172;
      }
     }
     break L43;
     break;
    }
    case 46:  {
     ;HEAP8[$cFormat+0>>0]=HEAP8[2936+0>>0]|0;HEAP8[$cFormat+1>>0]=HEAP8[2936+1>>0]|0;HEAP8[$cFormat+2>>0]=HEAP8[2936+2>>0]|0;HEAP8[$cFormat+3>>0]=HEAP8[2936+3>>0]|0;HEAP8[$cFormat+4>>0]=HEAP8[2936+4>>0]|0;
     $173 = $pStr;
     $174 = (($173) + 1|0);
     $pStr = $174;
     $175 = HEAP8[$174>>0]|0;
     $176 = (($cFormat) + 2|0);
     HEAP8[$176>>0] = $175;
     $177 = $pStr;
     $178 = (($177) + 1|0);
     $pStr = $178;
     $179 = HEAP8[$178>>0]|0;
     $180 = (($cFormat) + 3|0);
     HEAP8[$180>>0] = $179;
     $181 = (($cFormat) + 3|0);
     $182 = HEAP8[$181>>0]|0;
     $183 = $182 << 24 >> 24;
     switch ($183|0) {
     case 105: case 100:  {
      $arglist_current78 = HEAP32[$vaArgList>>2]|0;
      $202 = HEAP32[$arglist_current78>>2]|0;
      $arglist_next79 = (($arglist_current78) + 4|0);
      HEAP32[$vaArgList>>2] = $arglist_next79;
      $iArg = $202;
      $203 = $1;
      $204 = $203 & 1;
      $205 = ($204|0)!=(0);
      if ($205) {
       $206 = $iArg;
       HEAP32[$vararg_buffer80>>2] = $206;
       $207 = (_printf(($cFormat|0),($vararg_buffer80|0))|0);
       $szNumWritten = $207;
      }
      $208 = $1;
      $209 = $208 & 2;
      $210 = ($209|0)!=(0);
      if ($210) {
       $211 = HEAP32[2792>>2]|0;
       $212 = $iArg;
       HEAP32[$vararg_buffer83>>2] = $212;
       $213 = (_fprintf(($211|0),($cFormat|0),($vararg_buffer83|0))|0);
       $szNumWritten = $213;
       $214 = $1;
       $215 = $214 & 8;
       $216 = ($215|0)!=(0);
       if ($216) {
        $217 = HEAP32[2800>>2]|0;
        $218 = $iArg;
        HEAP32[$vararg_buffer86>>2] = $218;
        $219 = (_fprintf(($217|0),($cFormat|0),($vararg_buffer86|0))|0);
        $szNumWritten = $219;
       }
      }
      break;
     }
     case 117:  {
      $arglist_current90 = HEAP32[$vaArgList>>2]|0;
      $220 = HEAP32[$arglist_current90>>2]|0;
      $arglist_next91 = (($arglist_current90) + 4|0);
      HEAP32[$vaArgList>>2] = $arglist_next91;
      $uiArg = $220;
      $221 = $1;
      $222 = $221 & 1;
      $223 = ($222|0)!=(0);
      if ($223) {
       $224 = $uiArg;
       HEAP32[$vararg_buffer92>>2] = $224;
       $225 = (_printf(($cFormat|0),($vararg_buffer92|0))|0);
       $szNumWritten = $225;
      }
      $226 = $1;
      $227 = $226 & 2;
      $228 = ($227|0)!=(0);
      if ($228) {
       $229 = HEAP32[2792>>2]|0;
       $230 = $uiArg;
       HEAP32[$vararg_buffer95>>2] = $230;
       $231 = (_fprintf(($229|0),($cFormat|0),($vararg_buffer95|0))|0);
       $szNumWritten = $231;
       $232 = $1;
       $233 = $232 & 8;
       $234 = ($233|0)!=(0);
       if ($234) {
        $235 = HEAP32[2800>>2]|0;
        $236 = $uiArg;
        HEAP32[$vararg_buffer98>>2] = $236;
        $237 = (_fprintf(($235|0),($cFormat|0),($vararg_buffer98|0))|0);
        $szNumWritten = $237;
       }
      }
      break;
     }
     case 115:  {
      $arglist_current102 = HEAP32[$vaArgList>>2]|0;
      $238 = HEAP32[$arglist_current102>>2]|0;
      $arglist_next103 = (($arglist_current102) + 4|0);
      HEAP32[$vaArgList>>2] = $arglist_next103;
      $cArg = $238;
      $239 = $1;
      $240 = $239 & 1;
      $241 = ($240|0)!=(0);
      if ($241) {
       $242 = $cArg;
       HEAP32[$vararg_buffer104>>2] = $242;
       $243 = (_printf(($cFormat|0),($vararg_buffer104|0))|0);
       $szNumWritten = $243;
      }
      $244 = $1;
      $245 = $244 & 2;
      $246 = ($245|0)!=(0);
      if ($246) {
       $247 = HEAP32[2792>>2]|0;
       $248 = $cArg;
       HEAP32[$vararg_buffer107>>2] = $248;
       $249 = (_fprintf(($247|0),($cFormat|0),($vararg_buffer107|0))|0);
       $szNumWritten = $249;
       $250 = $1;
       $251 = $250 & 8;
       $252 = ($251|0)!=(0);
       if ($252) {
        $253 = HEAP32[2800>>2]|0;
        $254 = $cArg;
        HEAP32[$vararg_buffer110>>2] = $254;
        $255 = (_fprintf(($253|0),($cFormat|0),($vararg_buffer110|0))|0);
        $szNumWritten = $255;
       }
      }
      break;
     }
     case 69: case 101: case 102:  {
      $arglist_current66 = HEAP32[$vaArgList>>2]|0;
      HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current66>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current66+4>>2];$184 = +HEAPF64[tempDoublePtr>>3];
      $arglist_next67 = (($arglist_current66) + 8|0);
      HEAP32[$vaArgList>>2] = $arglist_next67;
      $dArg = $184;
      $185 = $1;
      $186 = $185 & 1;
      $187 = ($186|0)!=(0);
      if ($187) {
       $188 = $dArg;
       HEAPF64[tempDoublePtr>>3]=$188;HEAP32[$vararg_buffer68>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer68+4>>2]=HEAP32[tempDoublePtr+4>>2];
       $189 = (_printf(($cFormat|0),($vararg_buffer68|0))|0);
       $szNumWritten = $189;
      }
      $190 = $1;
      $191 = $190 & 2;
      $192 = ($191|0)!=(0);
      if ($192) {
       $193 = HEAP32[2792>>2]|0;
       $194 = $dArg;
       HEAPF64[tempDoublePtr>>3]=$194;HEAP32[$vararg_buffer71>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer71+4>>2]=HEAP32[tempDoublePtr+4>>2];
       $195 = (_fprintf(($193|0),($cFormat|0),($vararg_buffer71|0))|0);
       $szNumWritten = $195;
       $196 = $1;
       $197 = $196 & 8;
       $198 = ($197|0)!=(0);
       if ($198) {
        $199 = HEAP32[2800>>2]|0;
        $200 = $dArg;
        HEAPF64[tempDoublePtr>>3]=$200;HEAP32[$vararg_buffer74>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer74+4>>2]=HEAP32[tempDoublePtr+4>>2];
        $201 = (_fprintf(($199|0),($cFormat|0),($vararg_buffer74|0))|0);
        $szNumWritten = $201;
       }
      }
      break;
     }
     default: {
     }
     }
     break L43;
     break;
    }
    default: {
     $256 = $1;
     $257 = $256 & 1;
     $258 = ($257|0)!=(0);
     if ($258) {
      $259 = $pStr;
      $260 = HEAP8[$259>>0]|0;
      $261 = $260 << 24 >> 24;
      $262 = HEAP32[_stdout>>2]|0;
      $263 = (_putc(($261|0),($262|0))|0);
      $szNumWritten = $263;
     }
     $264 = $1;
     $265 = $264 & 2;
     $266 = ($265|0)!=(0);
     if ($266) {
      $267 = $pStr;
      $268 = HEAP8[$267>>0]|0;
      $269 = $268 << 24 >> 24;
      $270 = HEAP32[2792>>2]|0;
      $271 = (_putc(($269|0),($270|0))|0);
      $szNumWritten = $271;
      $272 = $1;
      $273 = $272 & 8;
      $274 = ($273|0)!=(0);
      if ($274) {
       $275 = $pStr;
       $276 = HEAP8[$275>>0]|0;
       $277 = $276 << 24 >> 24;
       $278 = HEAP32[2800>>2]|0;
       $279 = (_putc(($277|0),($278|0))|0);
       $szNumWritten = $279;
      }
     }
     label = 111;
     break L43;
    }
    }
   }
  } while(0);
  if ((label|0) == 111) {
   label = 0;
  }
  $280 = $pStr;
  $281 = (($280) + 1|0);
  $pStr = $281;
 }
 $282 = $1;
 $283 = $282 & 32;
 $284 = ($283|0)!=(0);
 if ($284) {
  $285 = $1;
  $286 = $285 & 1;
  $287 = ($286|0)!=(0);
  if ($287) {
   (_printf((2944|0),($vararg_buffer113|0))|0);
  }
  $288 = $1;
  $289 = $288 & 2;
  $290 = ($289|0)!=(0);
  if ($290) {
   $291 = HEAP32[2792>>2]|0;
   (_fprintf(($291|0),(2944|0),($vararg_buffer115|0))|0);
  }
 }
 $292 = $1;
 $293 = $292 & 1;
 $294 = ($293|0)!=(0);
 if ($294) {
  $295 = HEAP32[_stdout>>2]|0;
  (_fflush(($295|0))|0);
 }
 $296 = $1;
 $297 = $296 & 2;
 $298 = ($297|0)!=(0);
 if ($298) {
  $299 = HEAP32[2792>>2]|0;
  (_fflush(($299|0))|0);
  $300 = $1;
  $301 = $300 & 8;
  $302 = ($301|0)!=(0);
  if ($302) {
   $303 = HEAP32[2800>>2]|0;
   (_fflush(($303|0))|0);
  }
 }
 $304 = HEAP32[2792>>2]|0;
 $305 = ($304|0)!=(0|0);
 if ($305) {
  $306 = $1;
  $307 = $306 & 32;
  $308 = ($307|0)!=(0);
  if ($308) {
   $309 = HEAP32[2792>>2]|0;
   (_fclose(($309|0))|0);
   HEAP32[2792>>2] = 0;
  }
 }
 $310 = HEAP32[2800>>2]|0;
 $311 = ($310|0)!=(0|0);
 if ($311) {
  $312 = $1;
  $313 = $312 & 32;
  $314 = ($313|0)!=(0);
  if ($314) {
   $315 = HEAP32[2800>>2]|0;
   (_fclose(($315|0))|0);
   HEAP32[2800>>2] = 0;
  }
 }
 $316 = $1;
 $317 = $316 & 16;
 $318 = ($317|0)!=(0);
 if ($318) {
  $319 = $2;
  $0 = $319;
  $320 = $0;
  STACKTOP = sp;return ($320|0);
 } else {
  $0 = 0;
  $320 = $0;
  STACKTOP = sp;return ($320|0);
 }
 return 0|0;
}
function _shrDeltaT($iCounterID) {
 $iCounterID = $iCounterID|0;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $DeltaT = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $iCounterID;
 (_gettimeofday((2752|0),(0|0))|0);
 $2 = $1;
 if ((($2|0) == 2)) {
  $33 = HEAP32[2752>>2]|0;
  $34 = (+($33|0));
  $35 = HEAP32[((2752 + 4|0))>>2]|0;
  $36 = (+($35|0));
  $37 = 9.9999999999999995E-7 * $36;
  $38 = $34 + $37;
  $39 = HEAP32[2776>>2]|0;
  $40 = (+($39|0));
  $41 = HEAP32[((2776 + 4|0))>>2]|0;
  $42 = (+($41|0));
  $43 = 9.9999999999999995E-7 * $42;
  $44 = $40 + $43;
  $45 = $38 - $44;
  $DeltaT = $45;
  $46 = HEAP32[2752>>2]|0;
  HEAP32[2776>>2] = $46;
  $47 = HEAP32[((2752 + 4|0))>>2]|0;
  HEAP32[((2776 + 4|0))>>2] = $47;
 } else if ((($2|0) == 1)) {
  $18 = HEAP32[2752>>2]|0;
  $19 = (+($18|0));
  $20 = HEAP32[((2752 + 4|0))>>2]|0;
  $21 = (+($20|0));
  $22 = 9.9999999999999995E-7 * $21;
  $23 = $19 + $22;
  $24 = HEAP32[2768>>2]|0;
  $25 = (+($24|0));
  $26 = HEAP32[((2768 + 4|0))>>2]|0;
  $27 = (+($26|0));
  $28 = 9.9999999999999995E-7 * $27;
  $29 = $25 + $28;
  $30 = $23 - $29;
  $DeltaT = $30;
  $31 = HEAP32[2752>>2]|0;
  HEAP32[2768>>2] = $31;
  $32 = HEAP32[((2752 + 4|0))>>2]|0;
  HEAP32[((2768 + 4|0))>>2] = $32;
 } else if ((($2|0) == 0)) {
  $3 = HEAP32[2752>>2]|0;
  $4 = (+($3|0));
  $5 = HEAP32[((2752 + 4|0))>>2]|0;
  $6 = (+($5|0));
  $7 = 9.9999999999999995E-7 * $6;
  $8 = $4 + $7;
  $9 = HEAP32[2760>>2]|0;
  $10 = (+($9|0));
  $11 = HEAP32[((2760 + 4|0))>>2]|0;
  $12 = (+($11|0));
  $13 = 9.9999999999999995E-7 * $12;
  $14 = $10 + $13;
  $15 = $8 - $14;
  $DeltaT = $15;
  $16 = HEAP32[2752>>2]|0;
  HEAP32[2760>>2] = $16;
  $17 = HEAP32[((2752 + 4|0))>>2]|0;
  HEAP32[((2760 + 4|0))>>2] = $17;
 } else {
  $0 = -9999.0;
  $49 = $0;
  STACKTOP = sp;return (+$49);
 }
 $48 = $DeltaT;
 $0 = $48;
 $49 = $0;
 STACKTOP = sp;return (+$49);
}
function _shrSetLogFileName($cOverRideName) {
 $cOverRideName = $cOverRideName|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $cOverRideName;
 $1 = HEAP32[2784>>2]|0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $3 = HEAP32[2784>>2]|0;
  _free($3);
 }
 $4 = $0;
 $5 = (_strlen(($4|0))|0);
 $6 = (($5) + 1)|0;
 $7 = (_malloc($6)|0);
 HEAP32[2784>>2] = $7;
 $8 = HEAP32[2784>>2]|0;
 $9 = $0;
 (_strcpy(($8|0),($9|0))|0);
 STACKTOP = sp;return;
}
function _shrFindFilePath($filename,$executable_path) {
 $filename = $filename|0;
 $executable_path = $executable_path|0;
 var $$byval_copy = 0, $$byval_copy6 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, $__r$i$i = 0, $cleanup$dest = 0, $delimiter_pos = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $executable_name = 0, $executable_name_pos = 0, $fh = 0, $file_path = 0, $i = 0, $path = 0, $searchPath = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy6 = sp + 997|0;
 $$byval_copy = sp + 996|0;
 $108 = sp + 998|0;
 $109 = sp + 999|0;
 $searchPath = sp + 840|0;
 $executable_name = sp + 316|0;
 $159 = sp + 940|0;
 $path = sp + 764|0;
 $fh = sp + 360|0;
 $157 = $filename;
 $158 = $executable_path;
 dest=$searchPath+0|0; src=3648+0|0; stop=dest+96|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $155 = $executable_name;
 $163 = $155;
 $154 = $163;
 $164 = $154;
 $153 = $164;
 $165 = $153;
 $152 = $165;
 $166 = $152;
 $151 = $166;
 $150 = $164;
 $167 = $150;
 $149 = $167;
 $168 = $149;
 $148 = $168;
 $169 = $148;
 $__a$i$i$i = $169;
 $__i$i$i$i = 0;
 while(1) {
  $170 = $__i$i$i$i;
  $171 = ($170>>>0)<(3);
  if (!($171)) {
   break;
  }
  $172 = $__i$i$i$i;
  $173 = $__a$i$i$i;
  $174 = (($173) + ($172<<2)|0);
  HEAP32[$174>>2] = 0;
  $175 = $__i$i$i$i;
  $176 = (($175) + 1)|0;
  $__i$i$i$i = $176;
 }
 $177 = $158;
 $178 = ($177|0)!=(0|0);
 do {
  if ($178) {
   $179 = $158;
   $146 = $159;
   $147 = $179;
   $180 = $146;
   $181 = $147;
   $144 = $180;
   $145 = $181;
   $182 = $144;
   $143 = $182;
   $183 = $143;
   $142 = $183;
   $184 = $142;
   $141 = $184;
   $185 = $145;
   $186 = $145;
   __THREW__ = 0;
   $187 = (invoke_ii(400,($186|0))|0);
   $188 = __THREW__; __THREW__ = 0;
   $189 = $188&1;
   if ($189) {
    label = 12;
   } else {
    __THREW__ = 0;
    invoke_viii(401,($182|0),($185|0),($187|0));
    $190 = __THREW__; __THREW__ = 0;
    $191 = $190&1;
    if ($191) {
     label = 12;
    } else {
     __THREW__ = 0;
     (invoke_iii(402,($executable_name|0),($159|0))|0);
     $192 = __THREW__; __THREW__ = 0;
     $193 = $192&1;
     if ($193) {
      $206 = ___cxa_find_matching_catch()|0;
      $207 = tempRet0;
      $160 = $206;
      $161 = $207;
      __THREW__ = 0;
      invoke_vi(403,($159|0));
      $208 = __THREW__; __THREW__ = 0;
      $209 = $208&1;
      if ($209) {
       $582 = ___cxa_find_matching_catch(0|0)|0;
       $583 = tempRet0;
       ___clang_call_terminate($582);
       // unreachable;
      } else {
       break;
      }
     } else {
      __THREW__ = 0;
      invoke_vi(403,($159|0));
      $194 = __THREW__; __THREW__ = 0;
      $195 = $194&1;
      if ($195) {
       label = 12;
       break;
      }
      $138 = $executable_name;
      $139 = 47;
      $140 = -1;
      $196 = $138;
      $197 = $139;
      $198 = $140;
      $199 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindEcj($196,$197,$198)|0);
      $delimiter_pos = $199;
      $200 = $delimiter_pos;
      $201 = (($200) + 1)|0;
      __THREW__ = 0;
      (invoke_iiii(441,($executable_name|0),0,($201|0))|0);
      $202 = __THREW__; __THREW__ = 0;
      $203 = $202&1;
      if ($203) {
       label = 12;
       break;
      }
      label = 15;
      break;
     }
    }
   }
  } else {
   label = 15;
  }
 } while(0);
 L18: do {
  if ((label|0) == 15) {
   $i = 0;
   L20: while(1) {
    $210 = $i;
    $211 = ($210>>>0)<(24);
    if (!($211)) {
     label = 95;
     break;
    }
    $212 = $i;
    $213 = (($searchPath) + ($212<<2)|0);
    $214 = HEAP32[$213>>2]|0;
    $136 = $path;
    $137 = $214;
    $215 = $136;
    $216 = $137;
    $134 = $215;
    $135 = $216;
    $217 = $134;
    $133 = $217;
    $218 = $133;
    $132 = $218;
    $219 = $132;
    $131 = $219;
    $220 = $135;
    $221 = $135;
    __THREW__ = 0;
    $222 = (invoke_ii(400,($221|0))|0);
    $223 = __THREW__; __THREW__ = 0;
    $224 = $223&1;
    if ($224) {
     label = 12;
     break L18;
    }
    __THREW__ = 0;
    invoke_viii(401,($217|0),($220|0),($222|0));
    $225 = __THREW__; __THREW__ = 0;
    $226 = $225&1;
    if ($226) {
     label = 12;
     break L18;
    }
    $126 = $path;
    $127 = 3744;
    $128 = 0;
    $227 = $126;
    $125 = $227;
    $228 = $125;
    $124 = $228;
    $229 = $124;
    $123 = $229;
    $230 = $123;
    $122 = $230;
    $231 = $122;
    $121 = $231;
    $232 = $121;
    $233 = HEAP8[$232>>0]|0;
    $234 = $233&255;
    $235 = $234 & 1;
    $236 = ($235|0)!=(0);
    if ($236) {
     $115 = $229;
     $237 = $115;
     $114 = $237;
     $238 = $114;
     $113 = $238;
     $239 = $113;
     $240 = (($239) + 8|0);
     $241 = HEAP32[$240>>2]|0;
     $248 = $241;
    } else {
     $120 = $229;
     $242 = $120;
     $119 = $242;
     $243 = $119;
     $118 = $243;
     $244 = $118;
     $245 = (($244) + 1|0);
     $117 = $245;
     $246 = $117;
     $116 = $246;
     $247 = $116;
     $248 = $247;
    }
    $112 = $248;
    $249 = $112;
    $101 = $227;
    $250 = $101;
    $100 = $250;
    $251 = $100;
    $99 = $251;
    $252 = $99;
    $98 = $252;
    $253 = $98;
    $254 = HEAP8[$253>>0]|0;
    $255 = $254&255;
    $256 = $255 & 1;
    $257 = ($256|0)!=(0);
    if ($257) {
     $94 = $250;
     $258 = $94;
     $93 = $258;
     $259 = $93;
     $92 = $259;
     $260 = $92;
     $261 = (($260) + 4|0);
     $262 = HEAP32[$261>>2]|0;
     $275 = $262;
    } else {
     $97 = $250;
     $263 = $97;
     $96 = $263;
     $264 = $96;
     $95 = $264;
     $265 = $95;
     $266 = HEAP8[$265>>0]|0;
     $267 = $266&255;
     $268 = $267 >> 1;
     $275 = $268;
    }
    $269 = $127;
    $270 = $128;
    $271 = $127;
    __THREW__ = 0;
    $272 = (invoke_ii(400,($271|0))|0);
    $273 = __THREW__; __THREW__ = 0;
    $274 = $273&1;
    if ($274) {
     label = 37;
     break;
    }
    $103 = $249;
    $104 = $275;
    $105 = $269;
    $106 = $270;
    $107 = $272;
    $276 = $106;
    $277 = $104;
    $278 = ($276>>>0)>($277>>>0);
    do {
     if ($278) {
      label = 29;
     } else {
      $279 = $104;
      $280 = $106;
      $281 = (($279) - ($280))|0;
      $282 = $107;
      $283 = ($281>>>0)<($282>>>0);
      if ($283) {
       label = 29;
      } else {
       $284 = $107;
       $285 = ($284|0)==(0);
       if ($285) {
        $286 = $106;
        $102 = $286;
        break;
       }
       $287 = $103;
       $288 = $106;
       $289 = (($287) + ($288)|0);
       $290 = $103;
       $291 = $104;
       $292 = (($290) + ($291)|0);
       $293 = $105;
       $294 = $105;
       $295 = $107;
       $296 = (($294) + ($295)|0);
       __THREW__ = 0;
       ;HEAP8[$$byval_copy+0>>0]=HEAP8[$108+0>>0]|0;
       ;HEAP8[$$byval_copy6+0>>0]=HEAP8[$109+0>>0]|0;
       $297 = (invoke_iiiiiiii(442,($289|0),($292|0),($293|0),($296|0),(443|0),($$byval_copy|0),($$byval_copy6|0))|0);
       $298 = __THREW__; __THREW__ = 0;
       $299 = $298&1;
       if ($299) {
        label = 35;
        break L20;
       }
       $__r$i$i = $297;
       $300 = $__r$i$i;
       $301 = $103;
       $302 = $104;
       $303 = (($301) + ($302)|0);
       $304 = ($300|0)==($303|0);
       if ($304) {
        $102 = -1;
        break;
       } else {
        $308 = $__r$i$i;
        $309 = $103;
        $310 = $308;
        $311 = $309;
        $312 = (($310) - ($311))|0;
        $102 = $312;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 29) {
     label = 0;
     $102 = -1;
    }
    $316 = $102;
    $executable_name_pos = $316;
    $317 = $executable_name_pos;
    $318 = ($317|0)!=(-1);
    do {
     if ($318) {
      $319 = $158;
      $320 = ($319|0)!=(0|0);
      if (!($320)) {
       $162 = 4;
       break;
      }
      $321 = $executable_name_pos;
      $88 = $path;
      $89 = $321;
      $90 = 17;
      $91 = $executable_name;
      $322 = $88;
      $323 = $89;
      $324 = $90;
      $325 = $91;
      $87 = $325;
      $326 = $87;
      $86 = $326;
      $327 = $86;
      $85 = $327;
      $328 = $85;
      $84 = $328;
      $329 = $84;
      $83 = $329;
      $330 = $83;
      $331 = HEAP8[$330>>0]|0;
      $332 = $331&255;
      $333 = $332 & 1;
      $334 = ($333|0)!=(0);
      if ($334) {
       $77 = $327;
       $335 = $77;
       $76 = $335;
       $336 = $76;
       $75 = $336;
       $337 = $75;
       $338 = (($337) + 8|0);
       $339 = HEAP32[$338>>2]|0;
       $346 = $339;
      } else {
       $82 = $327;
       $340 = $82;
       $81 = $340;
       $341 = $81;
       $80 = $341;
       $342 = $80;
       $343 = (($342) + 1|0);
       $79 = $343;
       $344 = $79;
       $78 = $344;
       $345 = $78;
       $346 = $345;
      }
      $74 = $346;
      $347 = $74;
      $348 = $91;
      $73 = $348;
      $349 = $73;
      $72 = $349;
      $350 = $72;
      $71 = $350;
      $351 = $71;
      $70 = $351;
      $352 = $70;
      $353 = HEAP8[$352>>0]|0;
      $354 = $353&255;
      $355 = $354 & 1;
      $356 = ($355|0)!=(0);
      if ($356) {
       $66 = $349;
       $357 = $66;
       $65 = $357;
       $358 = $65;
       $64 = $358;
       $359 = $64;
       $360 = (($359) + 4|0);
       $361 = HEAP32[$360>>2]|0;
       $368 = $361;
      } else {
       $69 = $349;
       $362 = $69;
       $68 = $362;
       $363 = $68;
       $67 = $363;
       $364 = $67;
       $365 = HEAP8[$364>>0]|0;
       $366 = $365&255;
       $367 = $366 >> 1;
       $368 = $367;
      }
      __THREW__ = 0;
      (invoke_iiiiii(444,($322|0),($323|0),($324|0),($347|0),($368|0))|0);
      $369 = __THREW__; __THREW__ = 0;
      $370 = $369&1;
      if ($370) {
       label = 49;
       break L20;
      }
      label = 53;
     } else {
      label = 53;
     }
    } while(0);
    if ((label|0) == 53) {
     label = 0;
     $373 = $157;
     __THREW__ = 0;
     (invoke_iii(445,($path|0),($373|0))|0);
     $374 = __THREW__; __THREW__ = 0;
     $375 = $374&1;
     if ($375) {
      label = 49;
      break;
     }
     $63 = $path;
     $376 = $63;
     $62 = $376;
     $377 = $62;
     $61 = $377;
     $378 = $61;
     $60 = $378;
     $379 = $60;
     $59 = $379;
     $380 = $59;
     $58 = $380;
     $381 = $58;
     $382 = HEAP8[$381>>0]|0;
     $383 = $382&255;
     $384 = $383 & 1;
     $385 = ($384|0)!=(0);
     if ($385) {
      $52 = $378;
      $386 = $52;
      $51 = $386;
      $387 = $51;
      $50 = $387;
      $388 = $50;
      $389 = (($388) + 8|0);
      $390 = HEAP32[$389>>2]|0;
      $397 = $390;
     } else {
      $57 = $378;
      $391 = $57;
      $56 = $391;
      $392 = $56;
      $55 = $392;
      $393 = $55;
      $394 = (($393) + 1|0);
      $54 = $394;
      $395 = $54;
      $53 = $395;
      $396 = $53;
      $397 = $396;
     }
     $49 = $397;
     $398 = $49;
     $44 = $fh;
     $45 = $398;
     $46 = 8;
     $399 = $44;
     $400 = (($399) + 112|0);
     $43 = $400;
     $401 = $43;
     $42 = $401;
     $402 = $42;
     $403 = (8392 + 8|0);
     HEAP32[$402>>2] = $403;
     $404 = (7992 + 8|0);
     HEAP32[$401>>2] = $404;
     $405 = (4360 + 12|0);
     HEAP32[$399>>2] = $405;
     $406 = (($399) + 112|0);
     $407 = (4360 + 52|0);
     HEAP32[$406>>2] = $407;
     $408 = (($399) + 8|0);
     $409 = (4360 + 32|0);
     HEAP32[$408>>2] = $409;
     $410 = (($399) + 12|0);
     $39 = $399;
     $411 = (4424 + 4|0);
     $40 = $411;
     $41 = $410;
     $412 = $39;
     $413 = $40;
     $414 = (($413) + 4|0);
     $415 = $41;
     $36 = $412;
     $37 = $414;
     $38 = $415;
     $416 = $36;
     $417 = $37;
     $418 = HEAP32[$417>>2]|0;
     HEAP32[$416>>2] = $418;
     $419 = (($417) + 4|0);
     $420 = HEAP32[$419>>2]|0;
     $421 = HEAP32[$416>>2]|0;
     $422 = (($421) + -12|0);
     $423 = HEAP32[$422>>2]|0;
     $424 = (($416) + ($423)|0);
     HEAP32[$424>>2] = $420;
     $425 = (($416) + 4|0);
     HEAP32[$425>>2] = 0;
     $426 = HEAP32[$416>>2]|0;
     $427 = (($426) + -12|0);
     $428 = HEAP32[$427>>2]|0;
     $429 = (($416) + ($428)|0);
     $430 = $38;
     $34 = $429;
     $35 = $430;
     $431 = $34;
     $432 = $35;
     __THREW__ = 0;
     invoke_vii(418,($431|0),($432|0));
     $433 = __THREW__; __THREW__ = 0;
     $434 = $433&1;
     if ($434) {
      label = 63;
      break;
     }
     $435 = (($431) + 72|0);
     HEAP32[$435>>2] = 0;
     $436 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $437 = (($431) + 76|0);
     HEAP32[$437>>2] = $436;
     $438 = (($412) + 8|0);
     $439 = (($413) + 12|0);
     $32 = $438;
     $33 = $439;
     $440 = $32;
     $441 = $33;
     $442 = HEAP32[$441>>2]|0;
     HEAP32[$440>>2] = $442;
     $443 = (($441) + 4|0);
     $444 = HEAP32[$443>>2]|0;
     $445 = HEAP32[$440>>2]|0;
     $446 = (($445) + -12|0);
     $447 = HEAP32[$446>>2]|0;
     $448 = (($440) + ($447)|0);
     HEAP32[$448>>2] = $444;
     $449 = HEAP32[$413>>2]|0;
     HEAP32[$412>>2] = $449;
     $450 = (($413) + 20|0);
     $451 = HEAP32[$450>>2]|0;
     $452 = HEAP32[$412>>2]|0;
     $453 = (($452) + -12|0);
     $454 = HEAP32[$453>>2]|0;
     $455 = (($412) + ($454)|0);
     HEAP32[$455>>2] = $451;
     $456 = (($413) + 24|0);
     $457 = HEAP32[$456>>2]|0;
     $458 = (($412) + 8|0);
     HEAP32[$458>>2] = $457;
     $459 = (4360 + 12|0);
     HEAP32[$399>>2] = $459;
     $460 = (($399) + 112|0);
     $461 = (4360 + 52|0);
     HEAP32[$460>>2] = $461;
     $462 = (($399) + 8|0);
     $463 = (4360 + 32|0);
     HEAP32[$462>>2] = $463;
     $464 = (($399) + 12|0);
     __THREW__ = 0;
     invoke_vi(446,($464|0));
     $465 = __THREW__; __THREW__ = 0;
     $466 = $465&1;
     if ($466) {
      label = 64;
      break;
     }
     $467 = (($399) + 12|0);
     $468 = $45;
     $469 = $46;
     __THREW__ = 0;
     $470 = (invoke_iiii(447,($467|0),($468|0),($469|0))|0);
     $471 = __THREW__; __THREW__ = 0;
     $472 = $471&1;
     if ($472) {
      label = 65;
      break;
     }
     $473 = ($470|0)==(0|0);
     if ($473) {
      $474 = HEAP32[$399>>2]|0;
      $475 = (($474) + -12|0);
      $476 = HEAP32[$475>>2]|0;
      $477 = (($399) + ($476)|0);
      $30 = $477;
      $31 = 4;
      $478 = $30;
      $479 = $31;
      $28 = $478;
      $29 = $479;
      $480 = $28;
      $481 = (($480) + 16|0);
      $482 = HEAP32[$481>>2]|0;
      $483 = $29;
      $484 = $482 | $483;
      __THREW__ = 0;
      invoke_vii(435,($480|0),($484|0));
      $485 = __THREW__; __THREW__ = 0;
      $486 = $485&1;
      if ($486) {
       label = 65;
       break;
      }
     }
     $504 = HEAP32[$fh>>2]|0;
     $505 = (($504) + -12|0);
     $506 = HEAP32[$505>>2]|0;
     $507 = (($fh) + ($506)|0);
     $27 = $507;
     $508 = $27;
     $26 = $508;
     $509 = $26;
     $510 = (($509) + 16|0);
     $511 = HEAP32[$510>>2]|0;
     $512 = ($511|0)==(0);
     if ($512) {
      $25 = $path;
      $513 = $25;
      $24 = $513;
      $514 = $24;
      $23 = $514;
      $515 = $23;
      $22 = $515;
      $516 = $22;
      $21 = $516;
      $517 = $21;
      $518 = HEAP8[$517>>0]|0;
      $519 = $518&255;
      $520 = $519 & 1;
      $521 = ($520|0)!=(0);
      if ($521) {
       $17 = $514;
       $522 = $17;
       $16 = $522;
       $523 = $16;
       $15 = $523;
       $524 = $15;
       $525 = (($524) + 4|0);
       $526 = HEAP32[$525>>2]|0;
       $534 = $526;
      } else {
       $20 = $514;
       $527 = $20;
       $19 = $527;
       $528 = $19;
       $18 = $528;
       $529 = $18;
       $530 = HEAP8[$529>>0]|0;
       $531 = $530&255;
       $532 = $531 >> 1;
       $534 = $532;
      }
      $533 = (($534) + 1)|0;
      __THREW__ = 0;
      $535 = (invoke_ii(448,($533|0))|0);
      $536 = __THREW__; __THREW__ = 0;
      $537 = $536&1;
      if ($537) {
       label = 84;
       break;
      }
      $file_path = $535;
      $538 = $file_path;
      $14 = $path;
      $539 = $14;
      $13 = $539;
      $540 = $13;
      $12 = $540;
      $541 = $12;
      $11 = $541;
      $542 = $11;
      $10 = $542;
      $543 = $10;
      $9 = $543;
      $544 = $9;
      $545 = HEAP8[$544>>0]|0;
      $546 = $545&255;
      $547 = $546 & 1;
      $548 = ($547|0)!=(0);
      if ($548) {
       $3 = $541;
       $549 = $3;
       $2 = $549;
       $550 = $2;
       $1 = $550;
       $551 = $1;
       $552 = (($551) + 8|0);
       $553 = HEAP32[$552>>2]|0;
       $560 = $553;
      } else {
       $8 = $541;
       $554 = $8;
       $7 = $554;
       $555 = $7;
       $6 = $555;
       $556 = $6;
       $557 = (($556) + 1|0);
       $5 = $557;
       $558 = $5;
       $4 = $558;
       $559 = $4;
       $560 = $559;
      }
      $0 = $560;
      $561 = $0;
      __THREW__ = 0;
      (invoke_iii(449,($538|0),($561|0))|0);
      $562 = __THREW__; __THREW__ = 0;
      $563 = $562&1;
      if ($563) {
       label = 84;
       break;
      }
      $564 = $file_path;
      $156 = $564;
      $162 = 1;
     } else {
      $162 = 0;
     }
     __THREW__ = 0;
     invoke_vi(45,($fh|0));
     $569 = __THREW__; __THREW__ = 0;
     $570 = $569&1;
     if ($570) {
      label = 49;
      break;
     }
    }
    __THREW__ = 0;
    invoke_vi(403,($path|0));
    $571 = __THREW__; __THREW__ = 0;
    $572 = $571&1;
    if ($572) {
     label = 12;
     break L18;
    }
    $cleanup$dest = $162;
    if ((($cleanup$dest|0) == 0)) {
    } else if (!((($cleanup$dest|0) == 4))) {
     label = 96;
     break;
    }
    $573 = $i;
    $574 = (($573) + 1)|0;
    $i = $574;
   }
   do {
    if ((label|0) == 35) {
     $305 = ___cxa_find_matching_catch()|0;
     $306 = tempRet0;
     $110 = $305;
     $111 = $306;
     $307 = $110;
     ___cxa_call_unexpected(($307|0));
     // unreachable;
    }
    else if ((label|0) == 37) {
     $313 = ___cxa_find_matching_catch()|0;
     $314 = tempRet0;
     $129 = $313;
     $130 = $314;
     $315 = $129;
     ___cxa_call_unexpected(($315|0));
     // unreachable;
    }
    else if ((label|0) == 49) {
     $371 = ___cxa_find_matching_catch()|0;
     $372 = tempRet0;
     $eh$lpad$body$index2Z2D = $372;$eh$lpad$body$indexZ2D = $371;
     label = 50;
    }
    else if ((label|0) == 63) {
     $487 = ___cxa_find_matching_catch()|0;
     $488 = tempRet0;
     $47 = $487;
     $48 = $488;
     label = 69;
    }
    else if ((label|0) == 64) {
     $489 = ___cxa_find_matching_catch()|0;
     $490 = tempRet0;
     $47 = $489;
     $48 = $490;
     label = 67;
    }
    else if ((label|0) == 65) {
     $491 = ___cxa_find_matching_catch()|0;
     $492 = tempRet0;
     $47 = $491;
     $48 = $492;
     __THREW__ = 0;
     invoke_vi(51,($464|0));
     $493 = __THREW__; __THREW__ = 0;
     $494 = $493&1;
     if ($494) {
      $502 = ___cxa_find_matching_catch(0|0)|0;
      $503 = tempRet0;
      ___clang_call_terminate($502);
      // unreachable;
     } else {
      label = 67;
      break;
     }
    }
    else if ((label|0) == 84) {
     $565 = ___cxa_find_matching_catch()|0;
     $566 = tempRet0;
     $160 = $565;
     $161 = $566;
     __THREW__ = 0;
     invoke_vi(45,($fh|0));
     $567 = __THREW__; __THREW__ = 0;
     $568 = $567&1;
     if ($568) {
      $582 = ___cxa_find_matching_catch(0|0)|0;
      $583 = tempRet0;
      ___clang_call_terminate($582);
      // unreachable;
     } else {
      break;
     }
    }
    else if ((label|0) == 95) {
     $156 = 0;
     $162 = 1;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($executable_name);
     $577 = $156;
     STACKTOP = sp;return ($577|0);
    }
    else if ((label|0) == 96) {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($executable_name);
     $577 = $156;
     STACKTOP = sp;return ($577|0);
    }
   } while(0);
   do {
    if ((label|0) == 67) {
     __THREW__ = 0;
     $495 = __THREW__; __THREW__ = 0;
     $496 = $495&1;
     if ($496) {
      $502 = ___cxa_find_matching_catch(0|0)|0;
      $503 = tempRet0;
      ___clang_call_terminate($502);
      // unreachable;
     } else {
      label = 69;
      break;
     }
    }
   } while(0);
   do {
    if ((label|0) == 69) {
     $497 = (($399) + 112|0);
     __THREW__ = 0;
     invoke_vi(415,($497|0));
     $498 = __THREW__; __THREW__ = 0;
     $499 = $498&1;
     if ($499) {
      $502 = ___cxa_find_matching_catch(0|0)|0;
      $503 = tempRet0;
      ___clang_call_terminate($502);
      // unreachable;
     } else {
      $500 = $47;
      $501 = $48;
      $eh$lpad$body$index2Z2D = $501;$eh$lpad$body$indexZ2D = $500;
      label = 50;
      break;
     }
    }
   } while(0);
   if ((label|0) == 50) {
    $160 = $eh$lpad$body$indexZ2D;
    $161 = $eh$lpad$body$index2Z2D;
   }
   __THREW__ = 0;
   invoke_vi(403,($path|0));
   $575 = __THREW__; __THREW__ = 0;
   $576 = $575&1;
   if ($576) {
    $582 = ___cxa_find_matching_catch(0|0)|0;
    $583 = tempRet0;
    ___clang_call_terminate($582);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 if ((label|0) == 12) {
  $204 = ___cxa_find_matching_catch()|0;
  $205 = tempRet0;
  $160 = $204;
  $161 = $205;
 }
 __THREW__ = 0;
 invoke_vi(403,($executable_name|0));
 $578 = __THREW__; __THREW__ = 0;
 $579 = $578&1;
 if ($579) {
  $582 = ___cxa_find_matching_catch(0|0)|0;
  $583 = tempRet0;
  ___clang_call_terminate($582);
  // unreachable;
 }
 $580 = $160;
 $581 = $161;
 ___resumeException($580|0);
 // unreachable;
 return 0|0;
}
function __Z7loadPPMPKcPPhPjS3_S3_($file,$data,$w,$h,$channels) {
 $file = $file|0;
 $data = $data|0;
 $w = $w|0;
 $h = $h|0;
 $channels = $channels|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fp = 0, $header = 0, $height = 0, $i = 0, $maxval = 0;
 var $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer7 = sp + 16|0;
 $vararg_buffer3 = sp + 24|0;
 $vararg_buffer = sp;
 $header = sp + 128|0;
 $width = sp + 112|0;
 $height = sp + 44|0;
 $maxval = sp + 104|0;
 $13 = $file;
 $14 = $data;
 $15 = $w;
 $16 = $h;
 $17 = $channels;
 $fp = 0;
 $18 = $13;
 $19 = (_fopen(($18|0),(3768|0))|0);
 $fp = $19;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $21 = $fp;
  $22 = ($21|0)!=(0|0);
  if ($22) {
   $23 = $fp;
   (_fclose(($23|0))|0);
  }
  $24 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(6352,3776)|0);
  $25 = $13;
  $26 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($24,$25)|0);
  $10 = $26;
  $11 = 450;
  $27 = $10;
  $28 = $11;
  (FUNCTION_TABLE_ii[$28 & 1023]($27)|0);
  $12 = 0;
  $134 = $12;
  STACKTOP = sp;return ($134|0);
 }
 $29 = $fp;
 $30 = (_fgets(($header|0),64,($29|0))|0);
 $31 = ($30|0)==(0|0);
 if ($31) {
  $32 = $fp;
  $33 = (_ferror(($32|0))|0);
  $34 = ($33|0)!=(0);
  if ($34) {
   $35 = $fp;
   $36 = ($35|0)!=(0|0);
   if ($36) {
    $37 = $fp;
    (_fclose(($37|0))|0);
   }
   $38 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(6352,3816)|0);
   $8 = $38;
   $9 = 450;
   $39 = $8;
   $40 = $9;
   (FUNCTION_TABLE_ii[$40 & 1023]($39)|0);
   $41 = $17;
   HEAP32[$41>>2] = 0;
   $12 = 0;
   $134 = $12;
   STACKTOP = sp;return ($134|0);
  }
 }
 $42 = (_strncmp($header,3872,2)|0);
 $43 = ($42|0)==(0);
 do {
  if ($43) {
   $44 = $17;
   HEAP32[$44>>2] = 1;
  } else {
   $45 = (_strncmp($header,3880,2)|0);
   $46 = ($45|0)==(0);
   if ($46) {
    $47 = $17;
    HEAP32[$47>>2] = 3;
    break;
   } else {
    $48 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(6352,3888)|0);
    $6 = $48;
    $7 = 450;
    $49 = $6;
    $50 = $7;
    (FUNCTION_TABLE_ii[$50 & 1023]($49)|0);
    $51 = $17;
    HEAP32[$51>>2] = 0;
    $12 = 0;
    $134 = $12;
    STACKTOP = sp;return ($134|0);
   }
  }
 } while(0);
 HEAP32[$width>>2] = 0;
 HEAP32[$height>>2] = 0;
 HEAP32[$maxval>>2] = 0;
 $i = 0;
 while(1) {
  $52 = $i;
  $53 = ($52>>>0)<(3);
  if (!($53)) {
   break;
  }
  $54 = $fp;
  $55 = (_fgets(($header|0),64,($54|0))|0);
  $56 = ($55|0)==(0|0);
  if ($56) {
   $57 = $fp;
   $58 = (_ferror(($57|0))|0);
   $59 = ($58|0)!=(0);
   if ($59) {
    label = 20;
    break;
   }
  }
  $66 = HEAP8[$header>>0]|0;
  $67 = $66 << 24 >> 24;
  $68 = ($67|0)==(35);
  if ($68) {
   continue;
  }
  $69 = $i;
  $70 = ($69|0)==(0);
  if ($70) {
   HEAP32[$vararg_buffer>>2] = $width;
   $vararg_ptr1 = (($vararg_buffer) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $height;
   $vararg_ptr2 = (($vararg_buffer) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $maxval;
   $71 = (_sscanf($header,3936,$vararg_buffer)|0);
   $72 = $i;
   $73 = (($72) + ($71))|0;
   $i = $73;
  } else {
   $74 = $i;
   $75 = ($74|0)==(1);
   if ($75) {
    HEAP32[$vararg_buffer3>>2] = $height;
    $vararg_ptr6 = (($vararg_buffer3) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $maxval;
    $76 = (_sscanf($header,3952,$vararg_buffer3)|0);
    $77 = $i;
    $78 = (($77) + ($76))|0;
    $i = $78;
   } else {
    $79 = $i;
    $80 = ($79|0)==(2);
    if ($80) {
     HEAP32[$vararg_buffer7>>2] = $maxval;
     $81 = (_sscanf($header,2912,$vararg_buffer7)|0);
     $82 = $i;
     $83 = (($82) + ($81))|0;
     $i = $83;
    }
   }
  }
 }
 if ((label|0) == 20) {
  $60 = $fp;
  $61 = ($60|0)!=(0|0);
  if ($61) {
   $62 = $fp;
   (_fclose(($62|0))|0);
  }
  $63 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(6352,3816)|0);
  $4 = $63;
  $5 = 450;
  $64 = $4;
  $65 = $5;
  (FUNCTION_TABLE_ii[$65 & 1023]($64)|0);
  $12 = 0;
  $134 = $12;
  STACKTOP = sp;return ($134|0);
 }
 $84 = $14;
 $85 = HEAP32[$84>>2]|0;
 $86 = (0|0)!=($85|0);
 do {
  if ($86) {
   $87 = $15;
   $88 = HEAP32[$87>>2]|0;
   $89 = HEAP32[$width>>2]|0;
   $90 = ($88|0)!=($89|0);
   if (!($90)) {
    $91 = $16;
    $92 = HEAP32[$91>>2]|0;
    $93 = HEAP32[$height>>2]|0;
    $94 = ($92|0)!=($93|0);
    if (!($94)) {
     break;
    }
   }
   $95 = $fp;
   (_fclose(($95|0))|0);
   $96 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(6352,3960)|0);
   $2 = $96;
   $3 = 450;
   $97 = $2;
   $98 = $3;
   (FUNCTION_TABLE_ii[$98 & 1023]($97)|0);
   $12 = 0;
   $134 = $12;
   STACKTOP = sp;return ($134|0);
  } else {
   $99 = HEAP32[$width>>2]|0;
   $100 = $99;
   $101 = HEAP32[$height>>2]|0;
   $102 = Math_imul($100, $101)|0;
   $103 = $17;
   $104 = HEAP32[$103>>2]|0;
   $105 = Math_imul($102, $104)|0;
   $106 = (_malloc($105)|0);
   $107 = $14;
   HEAP32[$107>>2] = $106;
   $108 = HEAP32[$width>>2]|0;
   $109 = $15;
   HEAP32[$109>>2] = $108;
   $110 = HEAP32[$height>>2]|0;
   $111 = $16;
   HEAP32[$111>>2] = $110;
  }
 } while(0);
 $112 = $14;
 $113 = HEAP32[$112>>2]|0;
 $114 = HEAP32[$width>>2]|0;
 $115 = HEAP32[$height>>2]|0;
 $116 = Math_imul($114, $115)|0;
 $117 = $17;
 $118 = HEAP32[$117>>2]|0;
 $119 = Math_imul($116, $118)|0;
 $120 = $fp;
 $121 = (_fread(($113|0),1,($119|0),($120|0))|0);
 $122 = HEAP32[$width>>2]|0;
 $123 = HEAP32[$height>>2]|0;
 $124 = Math_imul($122, $123)|0;
 $125 = $17;
 $126 = HEAP32[$125>>2]|0;
 $127 = Math_imul($124, $126)|0;
 $128 = ($121|0)!=($127|0);
 if ($128) {
  $129 = $fp;
  (_fclose(($129|0))|0);
  $130 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc(6352,4000)|0);
  $0 = $130;
  $1 = 450;
  $131 = $0;
  $132 = $1;
  (FUNCTION_TABLE_ii[$132 & 1023]($131)|0);
  $12 = 0;
  $134 = $12;
  STACKTOP = sp;return ($134|0);
 } else {
  $133 = $fp;
  (_fclose(($133|0))|0);
  $12 = 1;
  $134 = $12;
  STACKTOP = sp;return ($134|0);
 }
 return 0|0;
}
function _shrLoadPPM4ub($file,$data,$w,$h) {
 $file = $file|0;
 $data = $data|0;
 $w = $w|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $channels = 0, $i = 0, $idata = 0, $idata_orig = 0, $ptr = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $idata = sp + 40|0;
 $channels = sp + 12|0;
 $1 = $file;
 $2 = $data;
 $3 = $w;
 $4 = $h;
 HEAP32[$idata>>2] = 0;
 $5 = $1;
 $6 = $3;
 $7 = $4;
 $8 = (__Z7loadPPMPKcPPhPjS3_S3_($5,$idata,$6,$7,$channels)|0);
 $9 = ($8|0)!=(0);
 if (!($9)) {
  $46 = HEAP32[$idata>>2]|0;
  _free($46);
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $12 = $4;
 $13 = HEAP32[$12>>2]|0;
 $14 = Math_imul($11, $13)|0;
 $size = $14;
 $15 = HEAP32[$idata>>2]|0;
 $idata_orig = $15;
 $16 = $size;
 $17 = $16;
 $18 = $17<<2;
 $19 = (_malloc($18)|0);
 $20 = $2;
 HEAP32[$20>>2] = $19;
 $21 = $2;
 $22 = HEAP32[$21>>2]|0;
 $ptr = $22;
 $i = 0;
 while(1) {
  $23 = $i;
  $24 = $size;
  $25 = ($23|0)<($24|0);
  if (!($25)) {
   break;
  }
  $26 = HEAP32[$idata>>2]|0;
  $27 = (($26) + 1|0);
  HEAP32[$idata>>2] = $27;
  $28 = HEAP8[$26>>0]|0;
  $29 = $ptr;
  $30 = (($29) + 1|0);
  $ptr = $30;
  HEAP8[$29>>0] = $28;
  $31 = HEAP32[$idata>>2]|0;
  $32 = (($31) + 1|0);
  HEAP32[$idata>>2] = $32;
  $33 = HEAP8[$31>>0]|0;
  $34 = $ptr;
  $35 = (($34) + 1|0);
  $ptr = $35;
  HEAP8[$34>>0] = $33;
  $36 = HEAP32[$idata>>2]|0;
  $37 = (($36) + 1|0);
  HEAP32[$idata>>2] = $37;
  $38 = HEAP8[$36>>0]|0;
  $39 = $ptr;
  $40 = (($39) + 1|0);
  $ptr = $40;
  HEAP8[$39>>0] = $38;
  $41 = $ptr;
  $42 = (($41) + 1|0);
  $ptr = $42;
  HEAP8[$41>>0] = 0;
  $43 = $i;
  $44 = (($43) + 1)|0;
  $i = $44;
 }
 $45 = $idata_orig;
 _free($45);
 $0 = 1;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function _shrCheckCmdLineFlag($argc,$argv,$flag_name) {
 $argc = $argc|0;
 $argv = $argv|0;
 $flag_name = $flag_name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $ret_val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = sp + 20|0;
 $9 = $argc;
 $10 = $argv;
 $11 = $flag_name;
 $ret_val = 0;
 $16 = $9;
 $17 = $10;
 __THREW__ = 0;
 invoke_vii(451,($16|0),($17|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 do {
  if ($19) {
   label = 9;
  } else {
   $20 = $11;
   $7 = $14;
   $8 = $20;
   $21 = $7;
   $22 = $8;
   $5 = $21;
   $6 = $22;
   $23 = $5;
   $4 = $23;
   $24 = $4;
   $3 = $24;
   $25 = $3;
   $2 = $25;
   $26 = $6;
   $27 = $6;
   __THREW__ = 0;
   $28 = (invoke_ii(400,($27|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if ($30) {
    label = 9;
   } else {
    __THREW__ = 0;
    invoke_viii(401,($23|0),($26|0),($28|0));
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     label = 9;
    } else {
     __THREW__ = 0;
     $33 = (invoke_ii(452,($14|0))|0);
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if ($35) {
      $40 = ___cxa_find_matching_catch(19296|0)|0;
      $41 = tempRet0;
      $12 = $40;
      $13 = $41;
      __THREW__ = 0;
      invoke_vi(403,($14|0));
      $42 = __THREW__; __THREW__ = 0;
      $43 = $42&1;
      if ($43) {
       $63 = ___cxa_find_matching_catch(0|0)|0;
       $64 = tempRet0;
       ___clang_call_terminate($63);
       // unreachable;
      } else {
       break;
      }
     }
     __THREW__ = 0;
     invoke_vi(403,($14|0));
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     if ($37) {
      label = 9;
     } else {
      if ($33) {
       $ret_val = 1;
      }
      $56 = $ret_val;
      STACKTOP = sp;return ($56|0);
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $38 = ___cxa_find_matching_catch(19296|0)|0;
  $39 = tempRet0;
  $12 = $38;
  $13 = $39;
 }
 $44 = $13;
 $45 = (_llvm_eh_typeid_for((19296|0))|0);
 $46 = ($44|0)==($45|0);
 if (!($46)) {
  $61 = $12;
  $62 = $13;
  ___resumeException($61|0);
  // unreachable;
 }
 $47 = $12;
 $48 = (___cxa_begin_catch(($47|0))|0);
 $15 = $48;
 __THREW__ = 0;
 $49 = (invoke_iii(421,(6352|0),(4032|0))|0);
 $50 = __THREW__; __THREW__ = 0;
 $51 = $50&1;
 if (!($51)) {
  $0 = $49;
  $1 = 450;
  $52 = $0;
  $53 = $1;
  __THREW__ = 0;
  (invoke_ii($53|0,($52|0))|0);
  $54 = __THREW__; __THREW__ = 0;
  $55 = $54&1;
  if (!($55)) {
   ___cxa_end_catch();
   $56 = $ret_val;
   STACKTOP = sp;return ($56|0);
  }
 }
 $57 = ___cxa_find_matching_catch()|0;
 $58 = tempRet0;
 $12 = $57;
 $13 = $58;
 __THREW__ = 0;
 invoke_v(438);
 $59 = __THREW__; __THREW__ = 0;
 $60 = $59&1;
 if ($60) {
  $63 = ___cxa_find_matching_catch(0|0)|0;
  $64 = tempRet0;
  ___clang_call_terminate($63);
  // unreachable;
 }
 $61 = $12;
 $62 = $13;
 ___resumeException($61|0);
 // unreachable;
 return 0|0;
}
function _shrGetCmdLineArgumenti($argc,$argv,$arg_name,$val) {
 $argc = $argc|0;
 $argv = $argv|0;
 $arg_name = $arg_name|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $ret_val = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp + 28|0;
 $9 = $argc;
 $10 = $argv;
 $11 = $arg_name;
 $12 = $val;
 $ret_val = 0;
 $17 = $9;
 $18 = $10;
 __THREW__ = 0;
 invoke_vii(451,($17|0),($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 do {
  if ($20) {
   label = 9;
  } else {
   $21 = $11;
   $7 = $15;
   $8 = $21;
   $22 = $7;
   $23 = $8;
   $5 = $22;
   $6 = $23;
   $24 = $5;
   $4 = $24;
   $25 = $4;
   $3 = $25;
   $26 = $3;
   $2 = $26;
   $27 = $6;
   $28 = $6;
   __THREW__ = 0;
   $29 = (invoke_ii(400,($28|0))|0);
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    label = 9;
   } else {
    __THREW__ = 0;
    invoke_viii(401,($24|0),($27|0),($29|0));
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 9;
    } else {
     __THREW__ = 0;
     $34 = (invoke_ii(453,($15|0))|0);
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if ($36) {
      $46 = ___cxa_find_matching_catch(19296|0)|0;
      $47 = tempRet0;
      $13 = $46;
      $14 = $47;
      __THREW__ = 0;
      invoke_vi(403,($15|0));
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      if ($49) {
       $69 = ___cxa_find_matching_catch(0|0)|0;
       $70 = tempRet0;
       ___clang_call_terminate($69);
       // unreachable;
      } else {
       break;
      }
     }
     __THREW__ = 0;
     invoke_vi(403,($15|0));
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      label = 9;
     } else {
      $v = $34;
      $39 = $v;
      $40 = (0|0)!=($39|0);
      if ($40) {
       $41 = $v;
       $42 = HEAP32[$41>>2]|0;
       $43 = $12;
       HEAP32[$43>>2] = $42;
       $ret_val = 1;
      } else {
       $12 = 0;
      }
      $62 = $ret_val;
      STACKTOP = sp;return ($62|0);
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $44 = ___cxa_find_matching_catch(19296|0)|0;
  $45 = tempRet0;
  $13 = $44;
  $14 = $45;
 }
 $50 = $14;
 $51 = (_llvm_eh_typeid_for((19296|0))|0);
 $52 = ($50|0)==($51|0);
 if (!($52)) {
  $67 = $13;
  $68 = $14;
  ___resumeException($67|0);
  // unreachable;
 }
 $53 = $13;
 $54 = (___cxa_begin_catch(($53|0))|0);
 $16 = $54;
 __THREW__ = 0;
 $55 = (invoke_iii(421,(6352|0),(4032|0))|0);
 $56 = __THREW__; __THREW__ = 0;
 $57 = $56&1;
 if (!($57)) {
  $0 = $55;
  $1 = 450;
  $58 = $0;
  $59 = $1;
  __THREW__ = 0;
  (invoke_ii($59|0,($58|0))|0);
  $60 = __THREW__; __THREW__ = 0;
  $61 = $60&1;
  if (!($61)) {
   ___cxa_end_catch();
   $62 = $ret_val;
   STACKTOP = sp;return ($62|0);
  }
 }
 $63 = ___cxa_find_matching_catch()|0;
 $64 = tempRet0;
 $13 = $63;
 $14 = $64;
 __THREW__ = 0;
 invoke_v(438);
 $65 = __THREW__; __THREW__ = 0;
 $66 = $65&1;
 if ($66) {
  $69 = ___cxa_find_matching_catch(0|0)|0;
  $70 = tempRet0;
  ___clang_call_terminate($69);
  // unreachable;
 }
 $67 = $13;
 $68 = $14;
 ___resumeException($67|0);
 // unreachable;
 return 0|0;
}
function _shrGetCmdLineArgumentstr($argc,$argv,$arg_name,$val) {
 $argc = $argc|0;
 $argv = $argv|0;
 $arg_name = $arg_name|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ret_val = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $41 = sp + 148|0;
 $35 = $argc;
 $36 = $argv;
 $37 = $arg_name;
 $38 = $val;
 $ret_val = 0;
 $43 = $35;
 $44 = $36;
 __THREW__ = 0;
 invoke_vii(451,($43|0),($44|0));
 $45 = __THREW__; __THREW__ = 0;
 $46 = $45&1;
 do {
  if ($46) {
   label = 17;
  } else {
   $47 = $37;
   $33 = $41;
   $34 = $47;
   $48 = $33;
   $49 = $34;
   $31 = $48;
   $32 = $49;
   $50 = $31;
   $30 = $50;
   $51 = $30;
   $29 = $51;
   $52 = $29;
   $28 = $52;
   $53 = $32;
   $54 = $32;
   __THREW__ = 0;
   $55 = (invoke_ii(400,($54|0))|0);
   $56 = __THREW__; __THREW__ = 0;
   $57 = $56&1;
   if ($57) {
    label = 17;
   } else {
    __THREW__ = 0;
    invoke_viii(401,($50|0),($53|0),($55|0));
    $58 = __THREW__; __THREW__ = 0;
    $59 = $58&1;
    if ($59) {
     label = 17;
    } else {
     __THREW__ = 0;
     $60 = (invoke_ii(454,($41|0))|0);
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      $125 = ___cxa_find_matching_catch(19296|0)|0;
      $126 = tempRet0;
      $39 = $125;
      $40 = $126;
      __THREW__ = 0;
      invoke_vi(403,($41|0));
      $127 = __THREW__; __THREW__ = 0;
      $128 = $127&1;
      if ($128) {
       $149 = ___cxa_find_matching_catch(0|0)|0;
       $150 = tempRet0;
       ___clang_call_terminate($149);
       // unreachable;
      } else {
       break;
      }
     }
     __THREW__ = 0;
     invoke_vi(403,($41|0));
     $63 = __THREW__; __THREW__ = 0;
     $64 = $63&1;
     if ($64) {
      label = 17;
     } else {
      $v = $60;
      $65 = $v;
      $66 = (0|0)!=($65|0);
      if ($66) {
       $67 = $v;
       $27 = $67;
       $68 = $27;
       $26 = $68;
       $69 = $26;
       $25 = $69;
       $70 = $25;
       $24 = $70;
       $71 = $24;
       $23 = $71;
       $72 = $23;
       $73 = HEAP8[$72>>0]|0;
       $74 = $73&255;
       $75 = $74 & 1;
       $76 = ($75|0)!=(0);
       if ($76) {
        $19 = $69;
        $77 = $19;
        $18 = $77;
        $78 = $18;
        $17 = $78;
        $79 = $17;
        $80 = (($79) + 4|0);
        $81 = HEAP32[$80>>2]|0;
        $89 = $81;
       } else {
        $22 = $69;
        $82 = $22;
        $21 = $82;
        $83 = $21;
        $20 = $83;
        $84 = $20;
        $85 = HEAP8[$84>>0]|0;
        $86 = $85&255;
        $87 = $86 >> 1;
        $89 = $87;
       }
       $88 = (($89) + 1)|0;
       $90 = $88;
       __THREW__ = 0;
       $91 = (invoke_ii(448,($90|0))|0);
       $92 = __THREW__; __THREW__ = 0;
       $93 = $92&1;
       if ($93) {
        label = 17;
        break;
       }
       $94 = $38;
       HEAP32[$94>>2] = $91;
       $95 = $38;
       $96 = HEAP32[$95>>2]|0;
       $97 = $v;
       $16 = $97;
       $98 = $16;
       $15 = $98;
       $99 = $15;
       $14 = $99;
       $100 = $14;
       $13 = $100;
       $101 = $13;
       $12 = $101;
       $102 = $12;
       $11 = $102;
       $103 = $11;
       $104 = HEAP8[$103>>0]|0;
       $105 = $104&255;
       $106 = $105 & 1;
       $107 = ($106|0)!=(0);
       if ($107) {
        $5 = $100;
        $108 = $5;
        $4 = $108;
        $109 = $4;
        $3 = $109;
        $110 = $3;
        $111 = (($110) + 8|0);
        $112 = HEAP32[$111>>2]|0;
        $119 = $112;
       } else {
        $10 = $100;
        $113 = $10;
        $9 = $113;
        $114 = $9;
        $8 = $114;
        $115 = $8;
        $116 = (($115) + 1|0);
        $7 = $116;
        $117 = $7;
        $6 = $117;
        $118 = $6;
        $119 = $118;
       }
       $2 = $119;
       $120 = $2;
       __THREW__ = 0;
       (invoke_iii(449,($96|0),($120|0))|0);
       $121 = __THREW__; __THREW__ = 0;
       $122 = $121&1;
       if ($122) {
        label = 17;
        break;
       }
       $ret_val = 1;
      } else {
       $142 = $38;
       HEAP32[$142>>2] = 0;
      }
      $141 = $ret_val;
      STACKTOP = sp;return ($141|0);
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 17) {
  $123 = ___cxa_find_matching_catch(19296|0)|0;
  $124 = tempRet0;
  $39 = $123;
  $40 = $124;
 }
 $129 = $40;
 $130 = (_llvm_eh_typeid_for((19296|0))|0);
 $131 = ($129|0)==($130|0);
 if (!($131)) {
  $147 = $39;
  $148 = $40;
  ___resumeException($147|0);
  // unreachable;
 }
 $132 = $39;
 $133 = (___cxa_begin_catch(($132|0))|0);
 $42 = $133;
 __THREW__ = 0;
 $134 = (invoke_iii(421,(6352|0),(4032|0))|0);
 $135 = __THREW__; __THREW__ = 0;
 $136 = $135&1;
 if (!($136)) {
  $0 = $134;
  $1 = 450;
  $137 = $0;
  $138 = $1;
  __THREW__ = 0;
  (invoke_ii($138|0,($137|0))|0);
  $139 = __THREW__; __THREW__ = 0;
  $140 = $139&1;
  if (!($140)) {
   ___cxa_end_catch();
   $141 = $ret_val;
   STACKTOP = sp;return ($141|0);
  }
 }
 $143 = ___cxa_find_matching_catch()|0;
 $144 = tempRet0;
 $39 = $143;
 $40 = $144;
 __THREW__ = 0;
 invoke_v(438);
 $145 = __THREW__; __THREW__ = 0;
 $146 = $145&1;
 if ($146) {
  $149 = ___cxa_find_matching_catch(0|0)|0;
  $150 = tempRet0;
  ___clang_call_terminate($149);
  // unreachable;
 }
 $147 = $39;
 $148 = $40;
 ___resumeException($147|0);
 // unreachable;
 return 0|0;
}
function __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vii(455,($3|0),(4216|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $6 = (($3) + 60|0);
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($6);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 $9 = (($3) + 60|0);
 __THREW__ = 0;
 invoke_vi(415,($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 $12 = $1;
 $13 = $2;
 ___resumeException($12|0);
 // unreachable;
}
function __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(41,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZTv0_n12_NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($5);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vii(456,($3|0),(4424|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $6 = (($3) + 112|0);
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($6);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 $9 = (($3) + 112|0);
 __THREW__ = 0;
 invoke_vi(415,($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 $12 = $1;
 $13 = $2;
 ___resumeException($12|0);
 // unreachable;
}
function __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(45,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZThn8_NSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + -8|0);
 __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev($2);
 STACKTOP = sp;return;
}
function __ZThn8_NSt3__113basic_fstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + -8|0);
 __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED0Ev($2);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev($5);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_fstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED0Ev($5);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (4672 + 8|0);
 HEAP32[$3>>2] = $4;
 __THREW__ = 0;
 (invoke_ii(457,($3|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if ($6) {
   $7 = ___cxa_find_matching_catch(0|0)|0;
   $8 = tempRet0;
   $1 = $7;
   $2 = $8;
   $9 = $1;
   (___cxa_begin_catch(($9|0))|0);
   __THREW__ = 0;
   invoke_v(438);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    break;
   }
   $18 = ___cxa_find_matching_catch()|0;
   $19 = tempRet0;
   $1 = $18;
   $2 = $19;
   __THREW__ = 0;
   invoke_vi(83,($3|0));
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    $30 = ___cxa_find_matching_catch(0|0)|0;
    $31 = tempRet0;
    ___clang_call_terminate($30);
    // unreachable;
   }
   $28 = $1;
   $29 = $2;
   ___resumeException($28|0);
   // unreachable;
  } else {
  }
 } while(0);
 $12 = (($3) + 96|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&1;
 if ($14) {
  $15 = (($3) + 32|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)==(0|0);
  if (!($17)) {
   __ZdaPv($16);
  }
 }
 $22 = (($3) + 97|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&1;
 if (!($24)) {
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
  STACKTOP = sp;return;
 }
 $25 = (($3) + 56|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  __ZdaPv($26);
 }
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(51,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__old_anc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = $this;
 $10 = $__loc;
 $11 = $9;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 (FUNCTION_TABLE_ii[$14 & 1023]($11)|0);
 $15 = $10;
 $8 = $15;
 $16 = $8;
 $17 = (__ZNKSt3__16locale9use_facetERNS0_2idE($16,10920)|0);
 $18 = (($11) + 68|0);
 HEAP32[$18>>2] = $17;
 $19 = (($11) + 98|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&1;
 $22 = $21&1;
 $__old_anc = $22;
 $23 = (($11) + 68|0);
 $24 = HEAP32[$23>>2]|0;
 $7 = $24;
 $25 = $7;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 28|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (FUNCTION_TABLE_ii[$28 & 1023]($25)|0);
 $30 = (($11) + 98|0);
 $31 = $29&1;
 HEAP8[$30>>0] = $31;
 $32 = $__old_anc;
 $33 = $32&1;
 $34 = $33&1;
 $35 = (($11) + 98|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&1;
 $38 = $37&1;
 $39 = ($34|0)!=($38|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $3 = $11;
 $4 = 0;
 $5 = 0;
 $6 = 0;
 $40 = $3;
 $41 = $4;
 $42 = (($40) + 8|0);
 HEAP32[$42>>2] = $41;
 $43 = $5;
 $44 = (($40) + 12|0);
 HEAP32[$44>>2] = $43;
 $45 = $6;
 $46 = (($40) + 16|0);
 HEAP32[$46>>2] = $45;
 $0 = $11;
 $1 = 0;
 $2 = 0;
 $47 = $0;
 $48 = $1;
 $49 = (($47) + 24|0);
 HEAP32[$49>>2] = $48;
 $50 = (($47) + 20|0);
 HEAP32[$50>>2] = $48;
 $51 = $2;
 $52 = (($47) + 28|0);
 HEAP32[$52>>2] = $51;
 $53 = (($11) + 98|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&1;
 if ($55) {
  $56 = (($11) + 96|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&1;
  if ($58) {
   $59 = (($11) + 32|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)==(0|0);
   if (!($61)) {
    __ZdaPv($60);
   }
  }
  $62 = (($11) + 97|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&1;
  $65 = (($11) + 96|0);
  $66 = $64&1;
  HEAP8[$65>>0] = $66;
  $67 = (($11) + 60|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($11) + 52|0);
  HEAP32[$69>>2] = $68;
  $70 = (($11) + 56|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($11) + 32|0);
  HEAP32[$72>>2] = $71;
  $73 = (($11) + 60|0);
  HEAP32[$73>>2] = 0;
  $74 = (($11) + 56|0);
  HEAP32[$74>>2] = 0;
  $75 = (($11) + 97|0);
  HEAP8[$75>>0] = 0;
 } else {
  $76 = (($11) + 96|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&1;
  if ($78) {
   label = 11;
  } else {
   $79 = (($11) + 32|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (($11) + 44|0);
   $82 = ($80|0)!=($81|0);
   if ($82) {
    $83 = (($11) + 52|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($11) + 60|0);
    HEAP32[$85>>2] = $84;
    $86 = (($11) + 32|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = (($11) + 56|0);
    HEAP32[$88>>2] = $87;
    $89 = (($11) + 97|0);
    HEAP8[$89>>0] = 0;
    $90 = (($11) + 52|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (__Znaj($91)|0);
    $93 = (($11) + 32|0);
    HEAP32[$93>>2] = $92;
    $94 = (($11) + 96|0);
    HEAP8[$94>>0] = 1;
   } else {
    label = 11;
   }
  }
  if ((label|0) == 11) {
   $95 = (($11) + 52|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = (($11) + 60|0);
   HEAP32[$97>>2] = $96;
   $98 = (($11) + 60|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = (__Znaj($99)|0);
   $101 = (($11) + 56|0);
   HEAP32[$101>>2] = $100;
   $102 = (($11) + 97|0);
   HEAP8[$102>>0] = 1;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $11 = sp + 76|0;
 $18 = sp + 32|0;
 $19 = sp + 24|0;
 $16 = $this;
 $17 = $__s;
 HEAP32[$18>>2] = $__n;
 $20 = $16;
 $12 = $20;
 $13 = 0;
 $14 = 0;
 $15 = 0;
 $21 = $12;
 $22 = $13;
 $23 = (($21) + 8|0);
 HEAP32[$23>>2] = $22;
 $24 = $14;
 $25 = (($21) + 12|0);
 HEAP32[$25>>2] = $24;
 $26 = $15;
 $27 = (($21) + 16|0);
 HEAP32[$27>>2] = $26;
 $0 = $20;
 $1 = 0;
 $2 = 0;
 $28 = $0;
 $29 = $1;
 $30 = (($28) + 24|0);
 HEAP32[$30>>2] = $29;
 $31 = (($28) + 20|0);
 HEAP32[$31>>2] = $29;
 $32 = $2;
 $33 = (($28) + 28|0);
 HEAP32[$33>>2] = $32;
 $34 = (($20) + 96|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $35&1;
 if ($36) {
  $37 = (($20) + 32|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0|0);
  if (!($39)) {
   __ZdaPv($38);
  }
 }
 $40 = (($20) + 97|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&1;
 if ($42) {
  $43 = (($20) + 56|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)==(0|0);
  if (!($45)) {
   __ZdaPv($44);
  }
 }
 $46 = HEAP32[$18>>2]|0;
 $47 = (($20) + 52|0);
 HEAP32[$47>>2] = $46;
 $48 = (($20) + 52|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49>>>0)>(8);
 if ($50) {
  $51 = (($20) + 98|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&1;
  if ($53) {
   $54 = $17;
   $55 = ($54|0)!=(0|0);
   if ($55) {
    $56 = $17;
    $57 = (($20) + 32|0);
    HEAP32[$57>>2] = $56;
    $58 = (($20) + 96|0);
    HEAP8[$58>>0] = 0;
   } else {
    label = 13;
   }
  } else {
   label = 13;
  }
  if ((label|0) == 13) {
   $59 = (($20) + 52|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (__Znaj($60)|0);
   $62 = (($20) + 32|0);
   HEAP32[$62>>2] = $61;
   $63 = (($20) + 96|0);
   HEAP8[$63>>0] = 1;
  }
 } else {
  $64 = (($20) + 44|0);
  $65 = (($20) + 32|0);
  HEAP32[$65>>2] = $64;
  $66 = (($20) + 52|0);
  HEAP32[$66>>2] = 8;
  $67 = (($20) + 96|0);
  HEAP8[$67>>0] = 0;
 }
 $68 = (($20) + 98|0);
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&1;
 if ($70) {
  $98 = (($20) + 60|0);
  HEAP32[$98>>2] = 0;
  $99 = (($20) + 56|0);
  HEAP32[$99>>2] = 0;
  $100 = (($20) + 97|0);
  HEAP8[$100>>0] = 0;
  STACKTOP = sp;return ($20|0);
 }
 HEAP32[$19>>2] = 8;
 $9 = $18;
 $10 = $19;
 $71 = $9;
 $72 = $10;
 ;HEAP8[$8+0>>0]=HEAP8[$11+0>>0]|0;
 $6 = $71;
 $7 = $72;
 $73 = $6;
 $74 = $7;
 $3 = $8;
 $4 = $73;
 $5 = $74;
 $75 = $4;
 $76 = HEAP32[$75>>2]|0;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = ($76|0)<($78|0);
 if ($79) {
  $80 = $7;
  $83 = $80;
 } else {
  $81 = $6;
  $83 = $81;
 }
 $82 = HEAP32[$83>>2]|0;
 $84 = (($20) + 60|0);
 HEAP32[$84>>2] = $82;
 $85 = $17;
 $86 = ($85|0)!=(0|0);
 if ($86) {
  $87 = (($20) + 60|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = ($88>>>0)>=(8);
  if ($89) {
   $90 = $17;
   $91 = (($20) + 56|0);
   HEAP32[$91>>2] = $90;
   $92 = (($20) + 97|0);
   HEAP8[$92>>0] = 0;
  } else {
   label = 23;
  }
 } else {
  label = 23;
 }
 if ((label|0) == 23) {
  $93 = (($20) + 60|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (__Znaj($94)|0);
  $96 = (($20) + 56|0);
  HEAP32[$96>>2] = $95;
  $97 = (($20) + 97|0);
  HEAP8[$97>>0] = 1;
 }
 STACKTOP = sp;return ($20|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$__way,$2) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $__way = $__way|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__r = 0, $__whence = 0, $__width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 40|0;
 $6 = sp + 8|0;
 $8 = sp;
 $10 = sp + 48|0;
 $12 = sp + 56|0;
 $15 = sp + 16|0;
 $__r = sp + 24|0;
 $18 = sp + 112|0;
 $14 = $this;
 $19 = $15;
 $20 = $19;
 HEAP32[$20>>2] = $0;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = $1;
 $16 = $__way;
 $17 = $2;
 $23 = $14;
 $24 = (($23) + 68|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0|0);
 if (!($26)) {
  $27 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($27);
  ___cxa_throw(($27|0),(19632|0),(378|0));
  // unreachable;
 }
 $28 = (($23) + 68|0);
 $29 = HEAP32[$28>>2]|0;
 $13 = $29;
 $30 = $13;
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + 24|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (FUNCTION_TABLE_ii[$33 & 1023]($30)|0);
 $__width = $34;
 $35 = (($23) + 64|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 do {
  if (!($37)) {
   $38 = $__width;
   $39 = ($38|0)<=(0);
   if ($39) {
    $40 = $15;
    $41 = $40;
    $42 = HEAP32[$41>>2]|0;
    $43 = (($40) + 4)|0;
    $44 = $43;
    $45 = HEAP32[$44>>2]|0;
    $46 = ($42|0)!=(0);
    $47 = ($45|0)!=(0);
    $48 = $46 | $47;
    if ($48) {
     break;
    }
   }
   $49 = HEAP32[$23>>2]|0;
   $50 = (($49) + 24|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (FUNCTION_TABLE_ii[$51 & 1023]($23)|0);
   $53 = ($52|0)!=(0);
   if (!($53)) {
    $70 = $16;
    if ((($70|0) == 1)) {
     $__whence = 1;
    } else if ((($70|0) == 2)) {
     $__whence = 2;
    } else if ((($70|0) == 0)) {
     $__whence = 0;
    } else {
     $3 = $agg$result;
     $71 = $4;
     $72 = $71;
     HEAP32[$72>>2] = -1;
     $73 = (($71) + 4)|0;
     $74 = $73;
     HEAP32[$74>>2] = -1;
     $75 = $3;
     ;HEAP32[$75+0>>2]=0|0;HEAP32[$75+4>>2]=0|0;
     $76 = (($75) + 8|0);
     $77 = $4;
     $78 = $77;
     $79 = HEAP32[$78>>2]|0;
     $80 = (($77) + 4)|0;
     $81 = $80;
     $82 = HEAP32[$81>>2]|0;
     $83 = $76;
     $84 = $83;
     HEAP32[$84>>2] = $79;
     $85 = (($83) + 4)|0;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     STACKTOP = sp;return;
    }
    $87 = (($23) + 64|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $__width;
    $90 = ($89|0)>(0);
    if ($90) {
     $91 = $__width;
     $92 = ($91|0)<(0);
     $93 = $92 << 31 >> 31;
     $94 = $15;
     $95 = $94;
     $96 = HEAP32[$95>>2]|0;
     $97 = (($94) + 4)|0;
     $98 = $97;
     $99 = HEAP32[$98>>2]|0;
     $100 = (___muldi3(($91|0),($93|0),($96|0),($99|0))|0);
     $101 = tempRet0;
     $103 = $100;$145 = $101;
    } else {
     $103 = 0;$145 = 0;
    }
    $102 = $__whence;
    $104 = (_fseeko(($88|0),($103|0),($102|0))|0);
    $105 = ($104|0)!=(0);
    if ($105) {
     $5 = $agg$result;
     $106 = $6;
     $107 = $106;
     HEAP32[$107>>2] = -1;
     $108 = (($106) + 4)|0;
     $109 = $108;
     HEAP32[$109>>2] = -1;
     $110 = $5;
     ;HEAP32[$110+0>>2]=0|0;HEAP32[$110+4>>2]=0|0;
     $111 = (($110) + 8|0);
     $112 = $6;
     $113 = $112;
     $114 = HEAP32[$113>>2]|0;
     $115 = (($112) + 4)|0;
     $116 = $115;
     $117 = HEAP32[$116>>2]|0;
     $118 = $111;
     $119 = $118;
     HEAP32[$119>>2] = $114;
     $120 = (($118) + 4)|0;
     $121 = $120;
     HEAP32[$121>>2] = $117;
     STACKTOP = sp;return;
    } else {
     $122 = (($23) + 64|0);
     $123 = HEAP32[$122>>2]|0;
     $124 = (_ftello(($123|0))|0);
     $125 = ($124|0)<(0);
     $126 = $125 << 31 >> 31;
     $7 = $__r;
     $127 = $8;
     $128 = $127;
     HEAP32[$128>>2] = $124;
     $129 = (($127) + 4)|0;
     $130 = $129;
     HEAP32[$130>>2] = $126;
     $131 = $7;
     ;HEAP32[$131+0>>2]=0|0;HEAP32[$131+4>>2]=0|0;
     $132 = (($131) + 8|0);
     $133 = $8;
     $134 = $133;
     $135 = HEAP32[$134>>2]|0;
     $136 = (($133) + 4)|0;
     $137 = $136;
     $138 = HEAP32[$137>>2]|0;
     $139 = $132;
     $140 = $139;
     HEAP32[$140>>2] = $135;
     $141 = (($139) + 4)|0;
     $142 = $141;
     HEAP32[$142>>2] = $138;
     $143 = (($23) + 72|0);
     ;HEAP32[$18+0>>2]=HEAP32[$143+0>>2]|0;HEAP32[$18+4>>2]=HEAP32[$143+4>>2]|0;
     ;HEAP8[$10+0>>0]=HEAP8[$18+0>>0]|0;HEAP8[$10+1>>0]=HEAP8[$18+1>>0]|0;HEAP8[$10+2>>0]=HEAP8[$18+2>>0]|0;HEAP8[$10+3>>0]=HEAP8[$18+3>>0]|0;HEAP8[$10+4>>0]=HEAP8[$18+4>>0]|0;HEAP8[$10+5>>0]=HEAP8[$18+5>>0]|0;HEAP8[$10+6>>0]=HEAP8[$18+6>>0]|0;HEAP8[$10+7>>0]=HEAP8[$18+7>>0]|0;
     $9 = $__r;
     $144 = $9;
     ;HEAP32[$144+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$144+4>>2]=HEAP32[$10+4>>2]|0;
     ;HEAP32[$agg$result+0>>2]=HEAP32[$__r+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$__r+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$__r+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$__r+12>>2]|0;
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $11 = $agg$result;
 $54 = $12;
 $55 = $54;
 HEAP32[$55>>2] = -1;
 $56 = (($54) + 4)|0;
 $57 = $56;
 HEAP32[$57>>2] = -1;
 $58 = $11;
 ;HEAP32[$58+0>>2]=0|0;HEAP32[$58+4>>2]=0|0;
 $59 = (($58) + 8|0);
 $60 = $12;
 $61 = $60;
 $62 = HEAP32[$61>>2]|0;
 $63 = (($60) + 4)|0;
 $64 = $63;
 $65 = HEAP32[$64>>2]|0;
 $66 = $59;
 $67 = $66;
 HEAP32[$67>>2] = $62;
 $68 = (($66) + 4)|0;
 $69 = $68;
 HEAP32[$69>>2] = $65;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$__sp,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__sp = $__sp|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $6 = sp;
 $9 = sp + 24|0;
 $7 = $this;
 $8 = $0;
 $10 = $7;
 $11 = (($10) + 64|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if (!($13)) {
  $14 = HEAP32[$10>>2]|0;
  $15 = (($14) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_ii[$16 & 1023]($10)|0);
  $18 = ($17|0)!=(0);
  if (!($18)) {
   $35 = (($10) + 64|0);
   $36 = HEAP32[$35>>2]|0;
   $1 = $__sp;
   $37 = $1;
   $38 = (($37) + 8|0);
   $39 = $38;
   $40 = $39;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($39) + 4)|0;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = (_fseeko(($36|0),($41|0),0)|0);
   $46 = ($45|0)!=(0);
   if ($46) {
    $2 = $agg$result;
    $47 = $3;
    $48 = $47;
    HEAP32[$48>>2] = -1;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = -1;
    $51 = $2;
    ;HEAP32[$51+0>>2]=0|0;HEAP32[$51+4>>2]=0|0;
    $52 = (($51) + 8|0);
    $53 = $3;
    $54 = $53;
    $55 = HEAP32[$54>>2]|0;
    $56 = (($53) + 4)|0;
    $57 = $56;
    $58 = HEAP32[$57>>2]|0;
    $59 = $52;
    $60 = $59;
    HEAP32[$60>>2] = $55;
    $61 = (($59) + 4)|0;
    $62 = $61;
    HEAP32[$62>>2] = $58;
    STACKTOP = sp;return;
   } else {
    $63 = (($10) + 72|0);
    $4 = $__sp;
    $64 = $4;
    ;HEAP32[$9+0>>2]=HEAP32[$64+0>>2]|0;HEAP32[$9+4>>2]=HEAP32[$64+4>>2]|0;
    ;HEAP32[$63+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$63+4>>2]=HEAP32[$9+4>>2]|0;
    ;HEAP32[$agg$result+0>>2]=HEAP32[$__sp+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$__sp+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$__sp+8>>2]|0;HEAP32[$agg$result+12>>2]=HEAP32[$__sp+12>>2]|0;
    STACKTOP = sp;return;
   }
  }
 }
 $5 = $agg$result;
 $19 = $6;
 $20 = $19;
 HEAP32[$20>>2] = -1;
 $21 = (($19) + 4)|0;
 $22 = $21;
 HEAP32[$22>>2] = -1;
 $23 = $5;
 ;HEAP32[$23+0>>2]=0|0;HEAP32[$23+4>>2]=0|0;
 $24 = (($23) + 8|0);
 $25 = $6;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = $24;
 $32 = $31;
 HEAP32[$32>>2] = $27;
 $33 = (($31) + 4)|0;
 $34 = $33;
 HEAP32[$34>>2] = $30;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__extbe = 0, $__nmemb = 0, $__off = 0, $__r = 0, $__state = 0, $__update_st = 0, $__width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbe = sp + 124|0;
 $__c = sp;
 $__state = sp + 64|0;
 $26 = $this;
 $27 = $26;
 $28 = (($27) + 64|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $25 = 0;
  $245 = $25;
  STACKTOP = sp;return ($245|0);
 }
 $31 = (($27) + 68|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  $34 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($34);
  ___cxa_throw(($34|0),(19632|0),(378|0));
  // unreachable;
 }
 $35 = (($27) + 92|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 & 16;
 $38 = ($37|0)!=(0);
 do {
  if ($38) {
   $24 = $27;
   $39 = $24;
   $40 = (($39) + 24|0);
   $41 = HEAP32[$40>>2]|0;
   $14 = $27;
   $42 = $14;
   $43 = (($42) + 20|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($41|0)!=($44|0);
   do {
    if ($45) {
     $46 = HEAP32[$27>>2]|0;
     $47 = (($46) + 52|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $50 = (FUNCTION_TABLE_iii[$48 & 1023]($27,$49)|0);
     $51 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $52 = ($50|0)==($51|0);
     if (!($52)) {
      break;
     }
     $25 = -1;
     $245 = $25;
     STACKTOP = sp;return ($245|0);
    }
   } while(0);
   while(1) {
    $53 = (($27) + 68|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = (($27) + 72|0);
    $56 = (($27) + 32|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (($27) + 32|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = (($27) + 52|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (($59) + ($61)|0);
    $2 = $54;
    $3 = $55;
    $4 = $57;
    $5 = $62;
    $6 = $__extbe;
    $63 = $2;
    $64 = HEAP32[$63>>2]|0;
    $65 = (($64) + 20|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $3;
    $68 = $4;
    $69 = $5;
    $70 = $6;
    $71 = (FUNCTION_TABLE_iiiiii[$66 & 1023]($63,$67,$68,$69,$70)|0);
    $__r = $71;
    $72 = HEAP32[$__extbe>>2]|0;
    $73 = (($27) + 32|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $72;
    $76 = $74;
    $77 = (($75) - ($76))|0;
    $__nmemb = $77;
    $78 = (($27) + 32|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $__nmemb;
    $81 = (($27) + 64|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (_fwrite(($79|0),1,($80|0),($82|0))|0);
    $84 = $__nmemb;
    $85 = ($83|0)!=($84|0);
    if ($85) {
     label = 12;
     break;
    }
    $86 = $__r;
    $87 = ($86|0)==(1);
    if (!($87)) {
     break;
    }
   }
   if ((label|0) == 12) {
    $25 = -1;
    $245 = $25;
    STACKTOP = sp;return ($245|0);
   }
   $88 = $__r;
   $89 = ($88|0)==(2);
   if ($89) {
    $25 = -1;
    $245 = $25;
    STACKTOP = sp;return ($245|0);
   }
   $90 = (($27) + 64|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (_fflush(($91|0))|0);
   $93 = ($92|0)!=(0);
   if (!($93)) {
    break;
   }
   $25 = -1;
   $245 = $25;
   STACKTOP = sp;return ($245|0);
  } else {
   $94 = (($27) + 92|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $95 & 8;
   $97 = ($96|0)!=(0);
   if ($97) {
    $98 = (($27) + 80|0);
    ;HEAP32[$__state+0>>2]=HEAP32[$98+0>>2]|0;HEAP32[$__state+4>>2]=HEAP32[$98+4>>2]|0;
    $__update_st = 0;
    $99 = (($27) + 98|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100&1;
    if ($101) {
     $1 = $27;
     $102 = $1;
     $103 = (($102) + 16|0);
     $104 = HEAP32[$103>>2]|0;
     $0 = $27;
     $105 = $0;
     $106 = (($105) + 12|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = $104;
     $109 = $107;
     $110 = (($108) - ($109))|0;
     $111 = ($110|0)<(0);
     $112 = $111 << 31 >> 31;
     $113 = $__c;
     $114 = $113;
     HEAP32[$114>>2] = $110;
     $115 = (($113) + 4)|0;
     $116 = $115;
     HEAP32[$116>>2] = $112;
    } else {
     $117 = (($27) + 68|0);
     $118 = HEAP32[$117>>2]|0;
     $7 = $118;
     $119 = $7;
     $120 = HEAP32[$119>>2]|0;
     $121 = (($120) + 24|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = (FUNCTION_TABLE_ii[$122 & 1023]($119)|0);
     $__width = $123;
     $124 = (($27) + 40|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = (($27) + 36|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = $125;
     $129 = $127;
     $130 = (($128) - ($129))|0;
     $131 = ($130|0)<(0);
     $132 = $131 << 31 >> 31;
     $133 = $__c;
     $134 = $133;
     HEAP32[$134>>2] = $130;
     $135 = (($133) + 4)|0;
     $136 = $135;
     HEAP32[$136>>2] = $132;
     $137 = $__width;
     $138 = ($137|0)>(0);
     if ($138) {
      $139 = $__width;
      $8 = $27;
      $140 = $8;
      $141 = (($140) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $9 = $27;
      $143 = $9;
      $144 = (($143) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = $142;
      $147 = $145;
      $148 = (($146) - ($147))|0;
      $149 = Math_imul($139, $148)|0;
      $150 = ($149|0)<(0);
      $151 = $150 << 31 >> 31;
      $152 = $__c;
      $153 = $152;
      $154 = HEAP32[$153>>2]|0;
      $155 = (($152) + 4)|0;
      $156 = $155;
      $157 = HEAP32[$156>>2]|0;
      $158 = (_i64Add(($154|0),($157|0),($149|0),($151|0))|0);
      $159 = tempRet0;
      $160 = $__c;
      $161 = $160;
      HEAP32[$161>>2] = $158;
      $162 = (($160) + 4)|0;
      $163 = $162;
      HEAP32[$163>>2] = $159;
     } else {
      $10 = $27;
      $164 = $10;
      $165 = (($164) + 12|0);
      $166 = HEAP32[$165>>2]|0;
      $11 = $27;
      $167 = $11;
      $168 = (($167) + 16|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = ($166|0)!=($169|0);
      if ($170) {
       $171 = (($27) + 68|0);
       $172 = HEAP32[$171>>2]|0;
       $173 = (($27) + 32|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = (($27) + 36|0);
       $176 = HEAP32[$175>>2]|0;
       $12 = $27;
       $177 = $12;
       $178 = (($177) + 12|0);
       $179 = HEAP32[$178>>2]|0;
       $13 = $27;
       $180 = $13;
       $181 = (($180) + 8|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = $179;
       $184 = $182;
       $185 = (($183) - ($184))|0;
       $15 = $172;
       $16 = $__state;
       $17 = $174;
       $18 = $176;
       $19 = $185;
       $186 = $15;
       $187 = HEAP32[$186>>2]|0;
       $188 = (($187) + 32|0);
       $189 = HEAP32[$188>>2]|0;
       $190 = $16;
       $191 = $17;
       $192 = $18;
       $193 = $19;
       $194 = (FUNCTION_TABLE_iiiiii[$189 & 1023]($186,$190,$191,$192,$193)|0);
       $__off = $194;
       $195 = (($27) + 36|0);
       $196 = HEAP32[$195>>2]|0;
       $197 = (($27) + 32|0);
       $198 = HEAP32[$197>>2]|0;
       $199 = $196;
       $200 = $198;
       $201 = (($199) - ($200))|0;
       $202 = $__off;
       $203 = (($201) - ($202))|0;
       $204 = ($203|0)<(0);
       $205 = $204 << 31 >> 31;
       $206 = $__c;
       $207 = $206;
       $208 = HEAP32[$207>>2]|0;
       $209 = (($206) + 4)|0;
       $210 = $209;
       $211 = HEAP32[$210>>2]|0;
       $212 = (_i64Add(($208|0),($211|0),($203|0),($205|0))|0);
       $213 = tempRet0;
       $214 = $__c;
       $215 = $214;
       HEAP32[$215>>2] = $212;
       $216 = (($214) + 4)|0;
       $217 = $216;
       HEAP32[$217>>2] = $213;
       $__update_st = 1;
      }
     }
    }
    $218 = (($27) + 64|0);
    $219 = HEAP32[$218>>2]|0;
    $220 = $__c;
    $221 = $220;
    $222 = HEAP32[$221>>2]|0;
    $223 = (($220) + 4)|0;
    $224 = $223;
    $225 = HEAP32[$224>>2]|0;
    $226 = (_i64Subtract(0,0,($222|0),($225|0))|0);
    $227 = tempRet0;
    $228 = (_fseeko(($219|0),($226|0),1)|0);
    $229 = ($228|0)!=(0);
    if ($229) {
     $25 = -1;
     $245 = $25;
     STACKTOP = sp;return ($245|0);
    }
    $230 = $__update_st;
    $231 = $230&1;
    if ($231) {
     $232 = (($27) + 72|0);
     ;HEAP32[$232+0>>2]=HEAP32[$__state+0>>2]|0;HEAP32[$232+4>>2]=HEAP32[$__state+4>>2]|0;
    }
    $233 = (($27) + 32|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = (($27) + 40|0);
    HEAP32[$235>>2] = $234;
    $236 = (($27) + 36|0);
    HEAP32[$236>>2] = $234;
    $20 = $27;
    $21 = 0;
    $22 = 0;
    $23 = 0;
    $237 = $20;
    $238 = $21;
    $239 = (($237) + 8|0);
    HEAP32[$239>>2] = $238;
    $240 = $22;
    $241 = (($237) + 12|0);
    HEAP32[$241>>2] = $240;
    $242 = $23;
    $243 = (($237) + 16|0);
    HEAP32[$243>>2] = $242;
    $244 = (($27) + 92|0);
    HEAP32[$244>>2] = 0;
   }
  }
 } while(0);
 $25 = 0;
 $245 = $25;
 STACKTOP = sp;return ($245|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__1buf = 0, $__c = 0, $__inext = 0, $__initial = 0, $__nmemb = 0, $__nmemb1 = 0, $__nr = 0, $__r = 0, $__unget_sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $20 = sp + 8|0;
 $23 = sp + 324|0;
 $31 = sp;
 $34 = sp + 325|0;
 $__1buf = sp + 327|0;
 $71 = sp + 280|0;
 $72 = sp + 144|0;
 $73 = sp + 312|0;
 $74 = sp + 136|0;
 $__inext = sp + 92|0;
 $70 = $this;
 $75 = $70;
 $76 = (($75) + 64|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)==(0|0);
 if ($78) {
  $79 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $69 = $79;
  $364 = $69;
  STACKTOP = sp;return ($364|0);
 }
 $80 = (__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($75)|0);
 $81 = $80&1;
 $__initial = $81;
 $68 = $75;
 $82 = $68;
 $83 = (($82) + 12|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($84|0)==(0|0);
 if ($85) {
  $86 = (($__1buf) + 1|0);
  $87 = (($__1buf) + 1|0);
  $59 = $75;
  $60 = $__1buf;
  $61 = $86;
  $62 = $87;
  $88 = $59;
  $89 = $60;
  $90 = (($88) + 8|0);
  HEAP32[$90>>2] = $89;
  $91 = $61;
  $92 = (($88) + 12|0);
  HEAP32[$92>>2] = $91;
  $93 = $62;
  $94 = (($88) + 16|0);
  HEAP32[$94>>2] = $93;
 }
 $95 = $__initial;
 $96 = $95&1;
 if ($96) {
  $120 = 0;
 } else {
  $57 = $75;
  $97 = $57;
  $98 = (($97) + 16|0);
  $99 = HEAP32[$98>>2]|0;
  $48 = $75;
  $100 = $48;
  $101 = (($100) + 8|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $99;
  $104 = $102;
  $105 = (($103) - ($104))|0;
  $106 = (($105|0) / 2)&-1;
  HEAP32[$71>>2] = $106;
  HEAP32[$72>>2] = 4;
  $32 = $71;
  $33 = $72;
  $107 = $32;
  $108 = $33;
  ;HEAP8[$31+0>>0]=HEAP8[$34+0>>0]|0;
  $29 = $107;
  $30 = $108;
  $109 = $30;
  $110 = $29;
  $26 = $31;
  $27 = $109;
  $28 = $110;
  $111 = $27;
  $112 = HEAP32[$111>>2]|0;
  $113 = $28;
  $114 = HEAP32[$113>>2]|0;
  $115 = ($112>>>0)<($114>>>0);
  if ($115) {
   $116 = $30;
   $119 = $116;
  } else {
   $117 = $29;
   $119 = $117;
  }
  $118 = HEAP32[$119>>2]|0;
  $120 = $118;
 }
 $__unget_sz = $120;
 $121 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $__c = $121;
 $14 = $75;
 $122 = $14;
 $123 = (($122) + 12|0);
 $124 = HEAP32[$123>>2]|0;
 $0 = $75;
 $125 = $0;
 $126 = (($125) + 16|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ($124|0)==($127|0);
 if ($128) {
  $1 = $75;
  $129 = $1;
  $130 = (($129) + 8|0);
  $131 = HEAP32[$130>>2]|0;
  $2 = $75;
  $132 = $2;
  $133 = (($132) + 16|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = $__unget_sz;
  $136 = (0 - ($135))|0;
  $137 = (($134) + ($136)|0);
  $138 = $__unget_sz;
  $139 = $138;
  _memmove(($131|0),($137|0),($139|0))|0;
  $140 = (($75) + 98|0);
  $141 = HEAP8[$140>>0]|0;
  $142 = $141&1;
  if ($142) {
   $3 = $75;
   $143 = $3;
   $144 = (($143) + 16|0);
   $145 = HEAP32[$144>>2]|0;
   $4 = $75;
   $146 = $4;
   $147 = (($146) + 8|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = $145;
   $150 = $148;
   $151 = (($149) - ($150))|0;
   $152 = $__unget_sz;
   $153 = (($151) - ($152))|0;
   $__nmemb = $153;
   $5 = $75;
   $154 = $5;
   $155 = (($154) + 8|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = $__unget_sz;
   $158 = (($156) + ($157)|0);
   $159 = $__nmemb;
   $160 = (($75) + 64|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = (_fread(($158|0),1,($159|0),($161|0))|0);
   $__nmemb = $162;
   $163 = $__nmemb;
   $164 = ($163|0)!=(0);
   if ($164) {
    $6 = $75;
    $165 = $6;
    $166 = (($165) + 8|0);
    $167 = HEAP32[$166>>2]|0;
    $7 = $75;
    $168 = $7;
    $169 = (($168) + 8|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = $__unget_sz;
    $172 = (($170) + ($171)|0);
    $8 = $75;
    $173 = $8;
    $174 = (($173) + 8|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = $__unget_sz;
    $177 = (($175) + ($176)|0);
    $178 = $__nmemb;
    $179 = (($177) + ($178)|0);
    $9 = $75;
    $10 = $167;
    $11 = $172;
    $12 = $179;
    $180 = $9;
    $181 = $10;
    $182 = (($180) + 8|0);
    HEAP32[$182>>2] = $181;
    $183 = $11;
    $184 = (($180) + 12|0);
    HEAP32[$184>>2] = $183;
    $185 = $12;
    $186 = (($180) + 16|0);
    HEAP32[$186>>2] = $185;
    $13 = $75;
    $187 = $13;
    $188 = (($187) + 12|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = HEAP8[$189>>0]|0;
    $191 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($190)|0);
    $__c = $191;
   }
  } else {
   $192 = (($75) + 32|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = (($75) + 36|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = (($75) + 40|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = (($75) + 36|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = $197;
   $201 = $199;
   $202 = (($200) - ($201))|0;
   _memmove(($193|0),($195|0),($202|0))|0;
   $203 = (($75) + 32|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = (($75) + 40|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = (($75) + 36|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = $206;
   $210 = $208;
   $211 = (($209) - ($210))|0;
   $212 = (($204) + ($211)|0);
   $213 = (($75) + 36|0);
   HEAP32[$213>>2] = $212;
   $214 = (($75) + 32|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = (($75) + 32|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = (($75) + 44|0);
   $219 = ($217|0)==($218|0);
   if ($219) {
    $223 = 8;
   } else {
    $220 = (($75) + 52|0);
    $221 = HEAP32[$220>>2]|0;
    $223 = $221;
   }
   $222 = (($215) + ($223)|0);
   $224 = (($75) + 40|0);
   HEAP32[$224>>2] = $222;
   $225 = (($75) + 60|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = $__unget_sz;
   $228 = (($226) - ($227))|0;
   HEAP32[$73>>2] = $228;
   $229 = (($75) + 40|0);
   $230 = HEAP32[$229>>2]|0;
   $231 = (($75) + 36|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = $230;
   $234 = $232;
   $235 = (($233) - ($234))|0;
   HEAP32[$74>>2] = $235;
   $21 = $73;
   $22 = $74;
   $236 = $21;
   $237 = $22;
   ;HEAP8[$20+0>>0]=HEAP8[$23+0>>0]|0;
   $18 = $236;
   $19 = $237;
   $238 = $19;
   $239 = $18;
   $15 = $20;
   $16 = $238;
   $17 = $239;
   $240 = $16;
   $241 = HEAP32[$240>>2]|0;
   $242 = $17;
   $243 = HEAP32[$242>>2]|0;
   $244 = ($241>>>0)<($243>>>0);
   if ($244) {
    $245 = $19;
    $248 = $245;
   } else {
    $246 = $18;
    $248 = $246;
   }
   $247 = HEAP32[$248>>2]|0;
   $__nmemb1 = $247;
   $249 = (($75) + 80|0);
   $250 = (($75) + 72|0);
   ;HEAP32[$249+0>>2]=HEAP32[$250+0>>2]|0;HEAP32[$249+4>>2]=HEAP32[$250+4>>2]|0;
   $251 = (($75) + 36|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = $__nmemb1;
   $254 = (($75) + 64|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = (_fread(($252|0),1,($253|0),($255|0))|0);
   $__nr = $256;
   $257 = $__nr;
   $258 = ($257|0)!=(0);
   if ($258) {
    $259 = (($75) + 68|0);
    $260 = HEAP32[$259>>2]|0;
    $261 = ($260|0)!=(0|0);
    if (!($261)) {
     $262 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($262);
     ___cxa_throw(($262|0),(19632|0),(378|0));
     // unreachable;
    }
    $263 = (($75) + 36|0);
    $264 = HEAP32[$263>>2]|0;
    $265 = $__nr;
    $266 = (($264) + ($265)|0);
    $267 = (($75) + 40|0);
    HEAP32[$267>>2] = $266;
    $268 = (($75) + 68|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = (($75) + 72|0);
    $271 = (($75) + 32|0);
    $272 = HEAP32[$271>>2]|0;
    $273 = (($75) + 40|0);
    $274 = HEAP32[$273>>2]|0;
    $275 = (($75) + 36|0);
    $24 = $75;
    $276 = $24;
    $277 = (($276) + 8|0);
    $278 = HEAP32[$277>>2]|0;
    $279 = $__unget_sz;
    $280 = (($278) + ($279)|0);
    $25 = $75;
    $281 = $25;
    $282 = (($281) + 8|0);
    $283 = HEAP32[$282>>2]|0;
    $284 = (($75) + 60|0);
    $285 = HEAP32[$284>>2]|0;
    $286 = (($283) + ($285)|0);
    $35 = $269;
    $36 = $270;
    $37 = $272;
    $38 = $274;
    $39 = $275;
    $40 = $280;
    $41 = $286;
    $42 = $__inext;
    $287 = $35;
    $288 = HEAP32[$287>>2]|0;
    $289 = (($288) + 16|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = $36;
    $292 = $37;
    $293 = $38;
    $294 = $39;
    $295 = $40;
    $296 = $41;
    $297 = $42;
    $298 = (FUNCTION_TABLE_iiiiiiiii[$290 & 511]($287,$291,$292,$293,$294,$295,$296,$297)|0);
    $__r = $298;
    $299 = $__r;
    $300 = ($299|0)==(3);
    if ($300) {
     $301 = (($75) + 32|0);
     $302 = HEAP32[$301>>2]|0;
     $303 = (($75) + 32|0);
     $304 = HEAP32[$303>>2]|0;
     $305 = (($75) + 40|0);
     $306 = HEAP32[$305>>2]|0;
     $43 = $75;
     $44 = $302;
     $45 = $304;
     $46 = $306;
     $307 = $43;
     $308 = $44;
     $309 = (($307) + 8|0);
     HEAP32[$309>>2] = $308;
     $310 = $45;
     $311 = (($307) + 12|0);
     HEAP32[$311>>2] = $310;
     $312 = $46;
     $313 = (($307) + 16|0);
     HEAP32[$313>>2] = $312;
     $47 = $75;
     $314 = $47;
     $315 = (($314) + 12|0);
     $316 = HEAP32[$315>>2]|0;
     $317 = HEAP8[$316>>0]|0;
     $318 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($317)|0);
     $__c = $318;
    } else {
     $319 = HEAP32[$__inext>>2]|0;
     $49 = $75;
     $320 = $49;
     $321 = (($320) + 8|0);
     $322 = HEAP32[$321>>2]|0;
     $323 = $__unget_sz;
     $324 = (($322) + ($323)|0);
     $325 = ($319|0)!=($324|0);
     if ($325) {
      $50 = $75;
      $326 = $50;
      $327 = (($326) + 8|0);
      $328 = HEAP32[$327>>2]|0;
      $51 = $75;
      $329 = $51;
      $330 = (($329) + 8|0);
      $331 = HEAP32[$330>>2]|0;
      $332 = $__unget_sz;
      $333 = (($331) + ($332)|0);
      $334 = HEAP32[$__inext>>2]|0;
      $52 = $75;
      $53 = $328;
      $54 = $333;
      $55 = $334;
      $335 = $52;
      $336 = $53;
      $337 = (($335) + 8|0);
      HEAP32[$337>>2] = $336;
      $338 = $54;
      $339 = (($335) + 12|0);
      HEAP32[$339>>2] = $338;
      $340 = $55;
      $341 = (($335) + 16|0);
      HEAP32[$341>>2] = $340;
      $56 = $75;
      $342 = $56;
      $343 = (($342) + 12|0);
      $344 = HEAP32[$343>>2]|0;
      $345 = HEAP8[$344>>0]|0;
      $346 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($345)|0);
      $__c = $346;
     }
    }
   }
  }
 } else {
  $58 = $75;
  $347 = $58;
  $348 = (($347) + 12|0);
  $349 = HEAP32[$348>>2]|0;
  $350 = HEAP8[$349>>0]|0;
  $351 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($350)|0);
  $__c = $351;
 }
 $63 = $75;
 $352 = $63;
 $353 = (($352) + 8|0);
 $354 = HEAP32[$353>>2]|0;
 $355 = ($354|0)==($__1buf|0);
 if ($355) {
  $64 = $75;
  $65 = 0;
  $66 = 0;
  $67 = 0;
  $356 = $64;
  $357 = $65;
  $358 = (($356) + 8|0);
  HEAP32[$358>>2] = $357;
  $359 = $66;
  $360 = (($356) + 12|0);
  HEAP32[$360>>2] = $359;
  $361 = $67;
  $362 = (($356) + 16|0);
  HEAP32[$362>>2] = $361;
 }
 $363 = $__c;
 $69 = $363;
 $364 = $69;
 STACKTOP = sp;return ($364|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = $this;
 $10 = $__c;
 $11 = $9;
 $12 = (($11) + 64|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0|0);
 do {
  if ($14) {
   $7 = $11;
   $15 = $7;
   $16 = (($15) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $6 = $11;
   $18 = $6;
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($17>>>0)<($20>>>0);
   if ($21) {
    $22 = $10;
    $23 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
    $24 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($22,$23)|0);
    if ($24) {
     $3 = $11;
     $4 = -1;
     $25 = $3;
     $26 = $4;
     $27 = (($25) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (($28) + ($26)|0);
     HEAP32[$27>>2] = $29;
     $30 = $10;
     $31 = (__ZNSt3__111char_traitsIcE7not_eofEi($30)|0);
     $8 = $31;
     $56 = $8;
     STACKTOP = sp;return ($56|0);
    }
    $32 = (($11) + 88|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 & 16;
    $35 = ($34|0)!=(0);
    if (!($35)) {
     $36 = $10;
     $37 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($36)|0);
     $0 = $11;
     $38 = $0;
     $39 = (($38) + 12|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = (($40) + -1|0);
     $42 = HEAP8[$41>>0]|0;
     $43 = (__ZNSt3__111char_traitsIcE2eqEcc($37,$42)|0);
     if (!($43)) {
      break;
     }
    }
    $1 = $11;
    $2 = -1;
    $44 = $1;
    $45 = $2;
    $46 = (($44) + 12|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) + ($45)|0);
    HEAP32[$46>>2] = $48;
    $49 = $10;
    $50 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($49)|0);
    $5 = $11;
    $51 = $5;
    $52 = (($51) + 12|0);
    $53 = HEAP32[$52>>2]|0;
    HEAP8[$53>>0] = $50;
    $54 = $10;
    $8 = $54;
    $56 = $8;
    STACKTOP = sp;return ($56|0);
   }
  }
 } while(0);
 $55 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $8 = $55;
 $56 = $8;
 STACKTOP = sp;return ($56|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__1buf = 0, $__e = 0, $__epb_save = 0, $__extbe = 0, $__nmemb = 0, $__nmemb1 = 0, $__nmemb2 = 0, $__pb_save = 0, $__r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__1buf = sp + 200|0;
 $__extbe = sp + 76|0;
 $__e = sp + 172|0;
 $40 = $this;
 $41 = $__c;
 $42 = $40;
 $43 = (($42) + 64|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(0|0);
 if ($45) {
  $46 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $39 = $46;
  $225 = $39;
  STACKTOP = sp;return ($225|0);
 }
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($42);
 $38 = $42;
 $47 = $38;
 $48 = (($47) + 20|0);
 $49 = HEAP32[$48>>2]|0;
 $__pb_save = $49;
 $37 = $42;
 $50 = $37;
 $51 = (($50) + 28|0);
 $52 = HEAP32[$51>>2]|0;
 $__epb_save = $52;
 $53 = $41;
 $54 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $55 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($53,$54)|0);
 if (!($55)) {
  $33 = $42;
  $56 = $33;
  $57 = (($56) + 24|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)==(0|0);
  if ($59) {
   $60 = (($__1buf) + 1|0);
   $22 = $42;
   $23 = $__1buf;
   $24 = $60;
   $61 = $22;
   $62 = $23;
   $63 = (($61) + 24|0);
   HEAP32[$63>>2] = $62;
   $64 = (($61) + 20|0);
   HEAP32[$64>>2] = $62;
   $65 = $24;
   $66 = (($61) + 28|0);
   HEAP32[$66>>2] = $65;
  }
  $67 = $41;
  $68 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($67)|0);
  $21 = $42;
  $69 = $21;
  $70 = (($69) + 24|0);
  $71 = HEAP32[$70>>2]|0;
  HEAP8[$71>>0] = $68;
  $16 = $42;
  $17 = 1;
  $72 = $16;
  $73 = $17;
  $74 = (($72) + 24|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) + ($73)|0);
  HEAP32[$74>>2] = $76;
 }
 $6 = $42;
 $77 = $6;
 $78 = (($77) + 24|0);
 $79 = HEAP32[$78>>2]|0;
 $3 = $42;
 $80 = $3;
 $81 = (($80) + 20|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ($79|0)!=($82|0);
 if ($83) {
  $84 = (($42) + 98|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&1;
  do {
   if ($86) {
    $0 = $42;
    $87 = $0;
    $88 = (($87) + 24|0);
    $89 = HEAP32[$88>>2]|0;
    $1 = $42;
    $90 = $1;
    $91 = (($90) + 20|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = $89;
    $94 = $92;
    $95 = (($93) - ($94))|0;
    $__nmemb = $95;
    $2 = $42;
    $96 = $2;
    $97 = (($96) + 20|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = $__nmemb;
    $100 = (($42) + 64|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = (_fwrite(($98|0),1,($99|0),($101|0))|0);
    $103 = $__nmemb;
    $104 = ($102|0)!=($103|0);
    if (!($104)) {
     break;
    }
    $105 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
    $39 = $105;
    $225 = $39;
    STACKTOP = sp;return ($225|0);
   } else {
    $106 = (($42) + 32|0);
    $107 = HEAP32[$106>>2]|0;
    HEAP32[$__extbe>>2] = $107;
    while(1) {
     $108 = (($42) + 68|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)!=(0|0);
     if (!($110)) {
      label = 14;
      break;
     }
     $112 = (($42) + 68|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = (($42) + 72|0);
     $4 = $42;
     $115 = $4;
     $116 = (($115) + 20|0);
     $117 = HEAP32[$116>>2]|0;
     $5 = $42;
     $118 = $5;
     $119 = (($118) + 24|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = (($42) + 32|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = (($42) + 32|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = (($42) + 52|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($124) + ($126)|0);
     $7 = $113;
     $8 = $114;
     $9 = $117;
     $10 = $120;
     $11 = $__e;
     $12 = $122;
     $13 = $127;
     $14 = $__extbe;
     $128 = $7;
     $129 = HEAP32[$128>>2]|0;
     $130 = (($129) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = $8;
     $133 = $9;
     $134 = $10;
     $135 = $11;
     $136 = $12;
     $137 = $13;
     $138 = $14;
     $139 = (FUNCTION_TABLE_iiiiiiiii[$131 & 511]($128,$132,$133,$134,$135,$136,$137,$138)|0);
     $__r = $139;
     $140 = HEAP32[$__e>>2]|0;
     $15 = $42;
     $141 = $15;
     $142 = (($141) + 20|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($140|0)==($143|0);
     if ($144) {
      label = 16;
      break;
     }
     $146 = $__r;
     $147 = ($146|0)==(3);
     if ($147) {
      $18 = $42;
      $148 = $18;
      $149 = (($148) + 24|0);
      $150 = HEAP32[$149>>2]|0;
      $19 = $42;
      $151 = $19;
      $152 = (($151) + 20|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = $150;
      $155 = $153;
      $156 = (($154) - ($155))|0;
      $__nmemb1 = $156;
      $20 = $42;
      $157 = $20;
      $158 = (($157) + 20|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = $__nmemb1;
      $161 = (($42) + 64|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = (_fwrite(($159|0),1,($160|0),($162|0))|0);
      $164 = $__nmemb1;
      $165 = ($163|0)!=($164|0);
      if ($165) {
       label = 19;
       break;
      }
     } else {
      $167 = $__r;
      $168 = ($167|0)==(0);
      if (!($168)) {
       $169 = $__r;
       $170 = ($169|0)==(1);
       if (!($170)) {
        label = 28;
        break;
       }
      }
      $171 = HEAP32[$__extbe>>2]|0;
      $172 = (($42) + 32|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = $171;
      $175 = $173;
      $176 = (($174) - ($175))|0;
      $__nmemb2 = $176;
      $177 = (($42) + 32|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = $__nmemb2;
      $180 = (($42) + 64|0);
      $181 = HEAP32[$180>>2]|0;
      $182 = (_fwrite(($178|0),1,($179|0),($181|0))|0);
      $183 = $__nmemb2;
      $184 = ($182|0)!=($183|0);
      if ($184) {
       label = 24;
       break;
      }
      $186 = $__r;
      $187 = ($186|0)==(1);
      if ($187) {
       $188 = HEAP32[$__e>>2]|0;
       $25 = $42;
       $189 = $25;
       $190 = (($189) + 24|0);
       $191 = HEAP32[$190>>2]|0;
       $26 = $42;
       $27 = $188;
       $28 = $191;
       $192 = $26;
       $193 = $27;
       $194 = (($192) + 24|0);
       HEAP32[$194>>2] = $193;
       $195 = (($192) + 20|0);
       HEAP32[$195>>2] = $193;
       $196 = $28;
       $197 = (($192) + 28|0);
       HEAP32[$197>>2] = $196;
       $29 = $42;
       $198 = $29;
       $199 = (($198) + 28|0);
       $200 = HEAP32[$199>>2]|0;
       $30 = $42;
       $201 = $30;
       $202 = (($201) + 20|0);
       $203 = HEAP32[$202>>2]|0;
       $204 = $200;
       $205 = $203;
       $206 = (($204) - ($205))|0;
       $31 = $42;
       $32 = $206;
       $207 = $31;
       $208 = $32;
       $209 = (($207) + 24|0);
       $210 = HEAP32[$209>>2]|0;
       $211 = (($210) + ($208)|0);
       HEAP32[$209>>2] = $211;
      }
     }
     $213 = $__r;
     $214 = ($213|0)==(1);
     if (!($214)) {
      label = 32;
      break;
     }
    }
    if ((label|0) == 14) {
     $111 = (___cxa_allocate_exception(4)|0);
     __ZNSt8bad_castC2Ev($111);
     ___cxa_throw(($111|0),(19632|0),(378|0));
     // unreachable;
    }
    else if ((label|0) == 16) {
     $145 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $145;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
    else if ((label|0) == 19) {
     $166 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $166;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
    else if ((label|0) == 24) {
     $185 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $185;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
    else if ((label|0) == 28) {
     $212 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $39 = $212;
     $225 = $39;
     STACKTOP = sp;return ($225|0);
    }
    else if ((label|0) == 32) {
     break;
    }
   }
  } while(0);
  $215 = $__pb_save;
  $216 = $__epb_save;
  $34 = $42;
  $35 = $215;
  $36 = $216;
  $217 = $34;
  $218 = $35;
  $219 = (($217) + 24|0);
  HEAP32[$219>>2] = $218;
  $220 = (($217) + 20|0);
  HEAP32[$220>>2] = $218;
  $221 = $36;
  $222 = (($217) + 28|0);
  HEAP32[$222>>2] = $221;
 }
 $223 = $41;
 $224 = (__ZNSt3__111char_traitsIcE7not_eofEi($223)|0);
 $39 = $224;
 $225 = $39;
 STACKTOP = sp;return ($225|0);
}
function __ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($__first1,$__last1,$__first2,$__last2,$__pred,$0,$1) {
 $__first1 = $__first1|0;
 $__last1 = $__last1|0;
 $__first2 = $__first2|0;
 $__last2 = $__last2|0;
 $__pred = $__pred|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__len1 = 0, $__len2 = 0;
 var $__m1 = 0, $__m2 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $__first1;
 $4 = $__last1;
 $5 = $__first2;
 $6 = $__last2;
 $7 = $__pred;
 $8 = $6;
 $9 = $5;
 $10 = $8;
 $11 = $9;
 $12 = (($10) - ($11))|0;
 $__len2 = $12;
 $13 = $__len2;
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = $3;
  $2 = $15;
  $59 = $2;
  STACKTOP = sp;return ($59|0);
 }
 $16 = $4;
 $17 = $3;
 $18 = $16;
 $19 = $17;
 $20 = (($18) - ($19))|0;
 $__len1 = $20;
 $21 = $__len1;
 $22 = $__len2;
 $23 = ($21|0)<($22|0);
 if ($23) {
  $24 = $4;
  $2 = $24;
  $59 = $2;
  STACKTOP = sp;return ($59|0);
 }
 $25 = $4;
 $26 = $__len2;
 $27 = (($26) - 1)|0;
 $28 = (0 - ($27))|0;
 $29 = (($25) + ($28)|0);
 $__s = $29;
 L9: while(1) {
  while(1) {
   $30 = $3;
   $31 = $__s;
   $32 = ($30|0)==($31|0);
   if ($32) {
    label = 8;
    break L9;
   }
   $34 = $7;
   $35 = $3;
   $36 = HEAP8[$35>>0]|0;
   $37 = $5;
   $38 = HEAP8[$37>>0]|0;
   $39 = (FUNCTION_TABLE_iii[$34 & 1023]($36,$38)|0);
   if ($39) {
    break;
   }
   $40 = $3;
   $41 = (($40) + 1|0);
   $3 = $41;
  }
  $42 = $3;
  $__m1 = $42;
  $43 = $5;
  $__m2 = $43;
  while(1) {
   $44 = $__m2;
   $45 = (($44) + 1|0);
   $__m2 = $45;
   $46 = $6;
   $47 = ($45|0)==($46|0);
   if ($47) {
    label = 14;
    break L9;
   }
   $49 = $__m1;
   $50 = (($49) + 1|0);
   $__m1 = $50;
   $51 = $7;
   $52 = $__m1;
   $53 = HEAP8[$52>>0]|0;
   $54 = $__m2;
   $55 = HEAP8[$54>>0]|0;
   $56 = (FUNCTION_TABLE_iii[$51 & 1023]($53,$55)|0);
   if (!($56)) {
    break;
   }
  }
  $57 = $3;
  $58 = (($57) + 1|0);
  $3 = $58;
 }
 if ((label|0) == 8) {
  $33 = $4;
  $2 = $33;
  $59 = $2;
  STACKTOP = sp;return ($59|0);
 }
 else if ((label|0) == 14) {
  $48 = $3;
  $2 = $48;
  $59 = $2;
  STACKTOP = sp;return ($59|0);
 }
 return 0|0;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp + 4|0;
 $14 = sp + 36|0;
 $15 = sp + 20|0;
 $16 = sp + 52|0;
 $11 = $this;
 $17 = $11;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($17);
 $18 = (4672 + 8|0);
 HEAP32[$17>>2] = $18;
 $19 = (($17) + 32|0);
 HEAP32[$19>>2] = 0;
 $20 = (($17) + 36|0);
 HEAP32[$20>>2] = 0;
 $21 = (($17) + 40|0);
 HEAP32[$21>>2] = 0;
 $22 = (($17) + 52|0);
 HEAP32[$22>>2] = 0;
 $23 = (($17) + 56|0);
 HEAP32[$23>>2] = 0;
 $24 = (($17) + 60|0);
 HEAP32[$24>>2] = 0;
 $25 = (($17) + 64|0);
 HEAP32[$25>>2] = 0;
 $26 = (($17) + 68|0);
 $8 = $10;
 $9 = -1;
 $27 = $8;
 HEAP32[$27>>2] = 0;
 $28 = HEAP32[$10>>2]|0;
 HEAP32[$14>>2] = $28;
 $7 = $14;
 HEAP32[$26>>2] = 0;
 $29 = (($17) + 72|0);
 ;HEAP32[$29+0>>2]=0|0;HEAP32[$29+4>>2]=0|0;
 $30 = (($17) + 80|0);
 ;HEAP32[$30+0>>2]=0|0;HEAP32[$30+4>>2]=0|0;
 $31 = (($17) + 88|0);
 HEAP32[$31>>2] = 0;
 $32 = (($17) + 92|0);
 HEAP32[$32>>2] = 0;
 $33 = (($17) + 96|0);
 HEAP8[$33>>0] = 0;
 $34 = (($17) + 97|0);
 HEAP8[$34>>0] = 0;
 $35 = (($17) + 98|0);
 HEAP8[$35>>0] = 0;
 $6 = $17;
 $36 = $6;
 $37 = (($36) + 4|0);
 __ZNSt3__16localeC2ERKS0_($15,$37);
 $3 = $15;
 $38 = $3;
 __THREW__ = 0;
 $39 = (invoke_iii(458,($38|0),(10920|0))|0);
 $40 = __THREW__; __THREW__ = 0;
 $41 = $40&1;
 if ($41) {
  $42 = ___cxa_find_matching_catch()|0;
  $43 = tempRet0;
  $4 = $42;
  $5 = $43;
  $44 = $4;
  ___cxa_call_unexpected(($44|0));
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(433,($15|0));
 $45 = __THREW__; __THREW__ = 0;
 $46 = $45&1;
 L7: do {
  if ($46) {
   label = 13;
  } else {
   do {
    if ($39) {
     $2 = $17;
     $47 = $2;
     $48 = (($47) + 4|0);
     __ZNSt3__16localeC2ERKS0_($16,$48);
     $1 = $16;
     $49 = $1;
     __THREW__ = 0;
     $50 = (invoke_iii(432,($49|0),(10920|0))|0);
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if ($52) {
      $67 = ___cxa_find_matching_catch()|0;
      $68 = tempRet0;
      $12 = $67;
      $13 = $68;
      __THREW__ = 0;
      invoke_vi(433,($16|0));
      $69 = __THREW__; __THREW__ = 0;
      $70 = $69&1;
      if ($70) {
       $80 = ___cxa_find_matching_catch(0|0)|0;
       $81 = tempRet0;
       ___clang_call_terminate($80);
       // unreachable;
      } else {
       break L7;
      }
     } else {
      $53 = (($17) + 68|0);
      HEAP32[$53>>2] = $50;
      __THREW__ = 0;
      invoke_vi(433,($16|0));
      $54 = __THREW__; __THREW__ = 0;
      $55 = $54&1;
      if ($55) {
       label = 13;
       break L7;
      }
      $56 = (($17) + 68|0);
      $57 = HEAP32[$56>>2]|0;
      $0 = $57;
      $58 = $0;
      $59 = HEAP32[$58>>2]|0;
      $60 = (($59) + 28|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = (FUNCTION_TABLE_ii[$61 & 1023]($58)|0);
      $63 = (($17) + 98|0);
      $64 = $62&1;
      HEAP8[$63>>0] = $64;
      break;
     }
    }
   } while(0);
   $71 = HEAP32[$17>>2]|0;
   $72 = (($71) + 12|0);
   $73 = HEAP32[$72>>2]|0;
   __THREW__ = 0;
   (invoke_iiii($73|0,($17|0),(0|0),4096)|0);
   $74 = __THREW__; __THREW__ = 0;
   $75 = $74&1;
   if ($75) {
    label = 13;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 13) {
  $65 = ___cxa_find_matching_catch()|0;
  $66 = tempRet0;
  $12 = $65;
  $13 = $66;
 }
 __THREW__ = 0;
 invoke_vi(83,($17|0));
 $76 = __THREW__; __THREW__ = 0;
 $77 = $76&1;
 if ($77) {
  $80 = ___cxa_find_matching_catch(0|0)|0;
  $81 = tempRet0;
  ___clang_call_terminate($80);
  // unreachable;
 }
 $78 = $12;
 $79 = $13;
 ___resumeException($78|0);
 // unreachable;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($this,$__s,$__mode) {
 $this = $this|0;
 $__s = $__s|0;
 $__mode = $__mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__mdstr = 0, $__rt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__s;
 $2 = $__mode;
 $3 = $0;
 $__rt = 0;
 $4 = (($3) + 64|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $30 = $__rt;
  STACKTOP = sp;return ($30|0);
 }
 $__rt = $3;
 $7 = $2;
 $8 = $7 & -3;
 do {
  switch ($8|0) {
  case 1: case 17:  {
   $__mdstr = 4800;
   break;
  }
  case 28:  {
   $__mdstr = 4848;
   break;
  }
  case 5: case 21:  {
   $__mdstr = 4840;
   break;
  }
  case 52: case 20:  {
   $__mdstr = 4832;
   break;
  }
  case 9: case 25:  {
   $__mdstr = 2832;
   break;
  }
  case 24:  {
   $__mdstr = 4816;
   break;
  }
  case 48: case 16:  {
   $__mdstr = 2840;
   break;
  }
  case 8:  {
   $__mdstr = 4808;
   break;
  }
  case 12:  {
   $__mdstr = 3768;
   break;
  }
  case 13: case 29:  {
   $__mdstr = 4864;
   break;
  }
  case 56:  {
   $__mdstr = 4824;
   break;
  }
  case 60:  {
   $__mdstr = 4856;
   break;
  }
  default: {
   $__rt = 0;
  }
  }
 } while(0);
 $9 = $__rt;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $1;
  $12 = $__mdstr;
  $13 = (_fopen(($11|0),($12|0))|0);
  $14 = (($3) + 64|0);
  HEAP32[$14>>2] = $13;
  $15 = (($3) + 64|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(0|0);
  if ($17) {
   $18 = $2;
   $19 = (($3) + 88|0);
   HEAP32[$19>>2] = $18;
   $20 = $2;
   $21 = $20 & 2;
   $22 = ($21|0)!=(0);
   if ($22) {
    $23 = (($3) + 64|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (_fseek(($24|0),0,2)|0);
    $26 = ($25|0)!=(0);
    if ($26) {
     $27 = (($3) + 64|0);
     $28 = HEAP32[$27>>2]|0;
     (_fclose(($28|0))|0);
     $29 = (($3) + 64|0);
     HEAP32[$29>>2] = 0;
     $__rt = 0;
    }
   }
  } else {
   $__rt = 0;
  }
 }
 $30 = $__rt;
 STACKTOP = sp;return ($30|0);
}
function __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_($__os) {
 $__os = $__os|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = $__os;
 $9 = $8;
 $10 = $8;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + -12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($10) + ($13)|0);
 $3 = $14;
 $4 = 10;
 $15 = $3;
 __ZNKSt3__18ios_base6getlocEv($5,$15);
 $2 = $5;
 $16 = $2;
 __THREW__ = 0;
 $17 = (invoke_iii(432,($16|0),(10856|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if (!($19)) {
  $20 = $4;
  $0 = $17;
  $1 = $20;
  $21 = $0;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 28|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $1;
  __THREW__ = 0;
  $26 = (invoke_iii($24|0,($21|0),($25|0))|0);
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if (!($28)) {
   __ZNSt3__16localeD2Ev($5);
   (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($9,$26)|0);
   $37 = $8;
   (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($37)|0);
   $38 = $8;
   STACKTOP = sp;return ($38|0);
  }
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 $6 = $29;
 $7 = $30;
 __THREW__ = 0;
 invoke_vi(433,($5|0));
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $35 = ___cxa_find_matching_catch(0|0)|0;
  $36 = tempRet0;
  ___clang_call_terminate($35);
  // unreachable;
 } else {
  $33 = $6;
  $34 = $7;
  ___resumeException($33|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__rt = 0, $__t$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $32 = sp + 140|0;
 $33 = sp + 144|0;
 $36 = sp + 156|0;
 $37 = sp + 16|0;
 $40 = sp + 12|0;
 $41 = sp + 4|0;
 $__h = sp + 80|0;
 $42 = $this;
 $45 = $42;
 $__rt = 0;
 $46 = (($45) + 64|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)!=(0|0);
 if (!($48)) {
  $128 = $__rt;
  STACKTOP = sp;return ($128|0);
 }
 $__rt = $45;
 $49 = (($45) + 64|0);
 $50 = HEAP32[$49>>2]|0;
 $39 = $__h;
 HEAP32[$40>>2] = $50;
 HEAP32[$41>>2] = 459;
 $51 = $39;
 $38 = $40;
 $52 = $38;
 $53 = HEAP32[$52>>2]|0;
 $27 = $41;
 $54 = $27;
 $55 = HEAP32[$54>>2]|0;
 $35 = $51;
 HEAP32[$36>>2] = $53;
 HEAP32[$37>>2] = $55;
 $56 = $35;
 $34 = $36;
 $57 = $34;
 $58 = HEAP32[$57>>2]|0;
 $28 = $37;
 $59 = $28;
 $60 = HEAP32[$59>>2]|0;
 $31 = $56;
 HEAP32[$32>>2] = $58;
 HEAP32[$33>>2] = $60;
 $61 = $31;
 $30 = $32;
 $62 = $30;
 $63 = HEAP32[$62>>2]|0;
 HEAP32[$61>>2] = $63;
 $64 = (($61) + 4|0);
 $29 = $33;
 $65 = $29;
 $66 = HEAP32[$65>>2]|0;
 HEAP32[$64>>2] = $66;
 $67 = HEAP32[$45>>2]|0;
 $68 = (($67) + 24|0);
 $69 = HEAP32[$68>>2]|0;
 __THREW__ = 0;
 $70 = (invoke_ii($69|0,($45|0))|0);
 $71 = __THREW__; __THREW__ = 0;
 $72 = $71&1;
 if (!($72)) {
  $73 = ($70|0)!=(0);
  if ($73) {
   $__rt = 0;
  }
  $15 = $__h;
  $96 = $15;
  $14 = $96;
  $97 = $14;
  $13 = $97;
  $98 = $13;
  $99 = HEAP32[$98>>2]|0;
  $__t$i = $99;
  $12 = $96;
  $100 = $12;
  $11 = $100;
  $101 = $11;
  HEAP32[$101>>2] = 0;
  $102 = $__t$i;
  __THREW__ = 0;
  $103 = (invoke_ii(459,($102|0))|0);
  $104 = __THREW__; __THREW__ = 0;
  $105 = $104&1;
  if (!($105)) {
   $106 = ($103|0)==(0);
   if ($106) {
    $107 = (($45) + 64|0);
    HEAP32[$107>>2] = 0;
   } else {
    $__rt = 0;
   }
   $10 = $__h;
   $108 = $10;
   $6 = $108;
   $7 = 0;
   $109 = $6;
   $5 = $109;
   $110 = $5;
   $4 = $110;
   $111 = $4;
   $112 = HEAP32[$111>>2]|0;
   $__tmp$i$i1 = $112;
   $113 = $7;
   $3 = $109;
   $114 = $3;
   $2 = $114;
   $115 = $2;
   HEAP32[$115>>2] = $113;
   $116 = $__tmp$i$i1;
   $117 = ($116|0)!=(0|0);
   do {
    if ($117) {
     $1 = $109;
     $118 = $1;
     $0 = $118;
     $119 = $0;
     $120 = (($119) + 4|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = $__tmp$i$i1;
     __THREW__ = 0;
     (invoke_ii($121|0,($122|0))|0);
     $123 = __THREW__; __THREW__ = 0;
     $124 = $123&1;
     if ($124) {
      $125 = ___cxa_find_matching_catch()|0;
      $126 = tempRet0;
      $8 = $125;
      $9 = $126;
      $127 = $8;
      ___cxa_call_unexpected(($127|0));
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   $128 = $__rt;
   STACKTOP = sp;return ($128|0);
  }
 }
 $74 = ___cxa_find_matching_catch()|0;
 $75 = tempRet0;
 $43 = $74;
 $44 = $75;
 $26 = $__h;
 $76 = $26;
 $22 = $76;
 $23 = 0;
 $77 = $22;
 $21 = $77;
 $78 = $21;
 $20 = $78;
 $79 = $20;
 $80 = HEAP32[$79>>2]|0;
 $__tmp$i$i = $80;
 $81 = $23;
 $19 = $77;
 $82 = $19;
 $18 = $82;
 $83 = $18;
 HEAP32[$83>>2] = $81;
 $84 = $__tmp$i$i;
 $85 = ($84|0)!=(0|0);
 do {
  if ($85) {
   $17 = $77;
   $86 = $17;
   $16 = $86;
   $87 = $16;
   $88 = (($87) + 4|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = $__tmp$i$i;
   __THREW__ = 0;
   (invoke_ii($89|0,($90|0))|0);
   $91 = __THREW__; __THREW__ = 0;
   $92 = $91&1;
   if ($92) {
    $93 = ___cxa_find_matching_catch(0|0)|0;
    $94 = tempRet0;
    $24 = $93;
    $25 = $94;
    $95 = $24;
    ___cxa_call_unexpected(($95|0));
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $129 = $43;
 $130 = $44;
 ___resumeException($129|0);
 // unreachable;
 return 0|0;
}
function __ZN12CmdArgReader8existArgERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($name) {
 $name = $name|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = HEAP32[1776>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[1776>>2]|0;
  $5 = $1;
  $6 = (__ZNK12CmdArgReader14existArgHelperERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($4,$5)|0);
  $$expand_i1_val2 = $6&1;
  $0 = $$expand_i1_val2;
  $$pre_trunc = $0;
  $7 = $$pre_trunc&1;
  STACKTOP = sp;return ($7|0);
 } else {
  __ZN9ExceptionISt13runtime_errorE8throw_itEPKciS3_(4088,382,4120);
  $$expand_i1_val = 0;
  $0 = $$expand_i1_val;
  $$pre_trunc = $0;
  $7 = $$pre_trunc&1;
  STACKTOP = sp;return ($7|0);
 }
 return 0|0;
}
function __ZN12CmdArgReader6getArgIiEEPKT_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = HEAP32[1776>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[1776>>2]|0;
  $5 = $1;
  $6 = (__ZN12CmdArgReader12getArgHelperIiEEPKT_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE($4,$5)|0);
  $0 = $6;
  $7 = $0;
  STACKTOP = sp;return ($7|0);
 } else {
  __ZN9ExceptionISt13runtime_errorE8throw_itEPKciS3_(4088,364,4120);
  $0 = 0;
  $7 = $0;
  STACKTOP = sp;return ($7|0);
 }
 return 0|0;
}
function __ZN12CmdArgReader6getArgINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEPKT_RKS7_($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $name;
 $2 = HEAP32[1776>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[1776>>2]|0;
  $5 = $1;
  $6 = (__ZN12CmdArgReader12getArgHelperINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEPKT_RKS7_($4,$5)|0);
  $0 = $6;
  $7 = $0;
  STACKTOP = sp;return ($7|0);
 } else {
  __ZN9ExceptionISt13runtime_errorE8throw_itEPKciS3_(4088,364,4120);
  $0 = 0;
  $7 = $0;
  STACKTOP = sp;return ($7|0);
 }
 return 0|0;
}
function __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $vtt;
 $4 = $0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$4>>2] = $6;
 $7 = (($5) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$4>>2]|0;
 $10 = (($9) + -12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($4) + ($11)|0);
 HEAP32[$12>>2] = $8;
 $13 = (($4) + 8|0);
 __THREW__ = 0;
 invoke_vi(21,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $2 = $16;
 $3 = $17;
 __THREW__ = 0;
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $22 = ___cxa_find_matching_catch(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 }
 $20 = $2;
 $21 = $3;
 ___resumeException($20|0);
 // unreachable;
}
function __ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $vtt;
 $4 = $0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$4>>2] = $6;
 $7 = (($5) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$4>>2]|0;
 $10 = (($9) + -12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($4) + ($11)|0);
 HEAP32[$12>>2] = $8;
 $13 = (($5) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($4) + 8|0);
 HEAP32[$15>>2] = $14;
 $16 = (($4) + 12|0);
 __THREW__ = 0;
 invoke_vi(51,($16|0));
 $17 = __THREW__; __THREW__ = 0;
 $18 = $17&1;
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = ___cxa_find_matching_catch()|0;
 $20 = tempRet0;
 $2 = $19;
 $3 = $20;
 __THREW__ = 0;
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 if ($22) {
  $25 = ___cxa_find_matching_catch(0|0)|0;
  $26 = tempRet0;
  ___clang_call_terminate($25);
  // unreachable;
 }
 $23 = $2;
 $24 = $3;
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $12;
 $14 = (($13) + 92|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & 8;
 $17 = ($16|0)!=(0);
 if ($17) {
  $$expand_i1_val2 = 0;
  $11 = $$expand_i1_val2;
  $$pre_trunc = $11;
  $66 = $$pre_trunc&1;
  STACKTOP = sp;return ($66|0);
 }
 $8 = $13;
 $9 = 0;
 $10 = 0;
 $18 = $8;
 $19 = $9;
 $20 = (($18) + 24|0);
 HEAP32[$20>>2] = $19;
 $21 = (($18) + 20|0);
 HEAP32[$21>>2] = $19;
 $22 = $10;
 $23 = (($18) + 28|0);
 HEAP32[$23>>2] = $22;
 $24 = (($13) + 98|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&1;
 if ($26) {
  $27 = (($13) + 32|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($13) + 32|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($13) + 52|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($30) + ($32)|0);
  $34 = (($13) + 32|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($13) + 52|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($35) + ($37)|0);
  $0 = $13;
  $1 = $28;
  $2 = $33;
  $3 = $38;
  $39 = $0;
  $40 = $1;
  $41 = (($39) + 8|0);
  HEAP32[$41>>2] = $40;
  $42 = $2;
  $43 = (($39) + 12|0);
  HEAP32[$43>>2] = $42;
  $44 = $3;
  $45 = (($39) + 16|0);
  HEAP32[$45>>2] = $44;
 } else {
  $46 = (($13) + 56|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($13) + 56|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($13) + 60|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($49) + ($51)|0);
  $53 = (($13) + 56|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($13) + 60|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($54) + ($56)|0);
  $4 = $13;
  $5 = $47;
  $6 = $52;
  $7 = $57;
  $58 = $4;
  $59 = $5;
  $60 = (($58) + 8|0);
  HEAP32[$60>>2] = $59;
  $61 = $6;
  $62 = (($58) + 12|0);
  HEAP32[$62>>2] = $61;
  $63 = $7;
  $64 = (($58) + 16|0);
  HEAP32[$64>>2] = $63;
 }
 $65 = (($13) + 92|0);
 HEAP32[$65>>2] = 8;
 $$expand_i1_val = 1;
 $11 = $$expand_i1_val;
 $$pre_trunc = $11;
 $66 = $$pre_trunc&1;
 STACKTOP = sp;return ($66|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = $this;
 $14 = $13;
 $15 = (($14) + 92|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & 16;
 $18 = ($17|0)!=(0);
 if ($18) {
  STACKTOP = sp;return;
 }
 $9 = $14;
 $10 = 0;
 $11 = 0;
 $12 = 0;
 $19 = $9;
 $20 = $10;
 $21 = (($19) + 8|0);
 HEAP32[$21>>2] = $20;
 $22 = $11;
 $23 = (($19) + 12|0);
 HEAP32[$23>>2] = $22;
 $24 = $12;
 $25 = (($19) + 16|0);
 HEAP32[$25>>2] = $24;
 $26 = (($14) + 52|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27>>>0)>(8);
 if ($28) {
  $29 = (($14) + 98|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&1;
  if ($31) {
   $32 = (($14) + 32|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($14) + 32|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($14) + 52|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) - 1)|0;
   $39 = (($35) + ($38)|0);
   $0 = $14;
   $1 = $33;
   $2 = $39;
   $40 = $0;
   $41 = $1;
   $42 = (($40) + 24|0);
   HEAP32[$42>>2] = $41;
   $43 = (($40) + 20|0);
   HEAP32[$43>>2] = $41;
   $44 = $2;
   $45 = (($40) + 28|0);
   HEAP32[$45>>2] = $44;
  } else {
   $46 = (($14) + 56|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($14) + 56|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($14) + 60|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) - 1)|0;
   $53 = (($49) + ($52)|0);
   $3 = $14;
   $4 = $47;
   $5 = $53;
   $54 = $3;
   $55 = $4;
   $56 = (($54) + 24|0);
   HEAP32[$56>>2] = $55;
   $57 = (($54) + 20|0);
   HEAP32[$57>>2] = $55;
   $58 = $5;
   $59 = (($54) + 28|0);
   HEAP32[$59>>2] = $58;
  }
 } else {
  $6 = $14;
  $7 = 0;
  $8 = 0;
  $60 = $6;
  $61 = $7;
  $62 = (($60) + 24|0);
  HEAP32[$62>>2] = $61;
  $63 = (($60) + 20|0);
  HEAP32[$63>>2] = $61;
  $64 = $8;
  $65 = (($60) + 28|0);
  HEAP32[$65>>2] = $64;
 }
 $66 = (($14) + 92|0);
 HEAP32[$66>>2] = 16;
 STACKTOP = sp;return;
}
function __ZNK12CmdArgReader14existArgHelperERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ret_val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 8|0;
 $11 = sp + 52|0;
 $19 = sp + 16|0;
 $22 = sp + 188|0;
 $24 = sp;
 $27 = sp + 116|0;
 $35 = sp + 24|0;
 $45 = sp + 164|0;
 $48 = sp + 100|0;
 $49 = sp + 32|0;
 $50 = sp + 208|0;
 $51 = sp + 184|0;
 $46 = $this;
 $47 = $name;
 $52 = $46;
 $ret_val = 0;
 $44 = $52;
 $53 = $44;
 $43 = $53;
 $54 = $43;
 $42 = $54;
 $55 = $42;
 $56 = (($55) + 4|0);
 $41 = $56;
 $57 = $41;
 $40 = $57;
 $58 = $40;
 $39 = $58;
 $59 = $39;
 $38 = $59;
 $60 = $38;
 $36 = $45;
 $37 = $60;
 $61 = $36;
 $62 = $37;
 HEAP32[$61>>2] = $62;
 ;HEAP8[$35+0>>0]=HEAP8[$45+0>>0]|0;HEAP8[$35+1>>0]=HEAP8[$45+1>>0]|0;HEAP8[$35+2>>0]=HEAP8[$45+2>>0]|0;HEAP8[$35+3>>0]=HEAP8[$45+3>>0]|0;
 $34 = $48;
 $63 = $34;
 ;HEAP32[$63+0>>2]=HEAP32[$35+0>>2]|0;
 $64 = $47;
 $20 = $52;
 $21 = $64;
 $65 = $20;
 $66 = $21;
 __ZNKSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEEEENS_19__map_value_compareIS7_SE_NS_4lessIS7_EELb1EEENS5_ISE_EEE4findIS7_EENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_SC_EEiEERKT_($22,$65,$66);
 ;HEAP8[$19+0>>0]=HEAP8[$22+0>>0]|0;HEAP8[$19+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$19+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$19+3>>0]=HEAP8[$22+3>>0]|0;
 $18 = $49;
 $67 = $18;
 ;HEAP32[$67+0>>2]=HEAP32[$19+0>>2]|0;
 $16 = $48;
 $17 = $49;
 $68 = $16;
 $69 = $17;
 $14 = $68;
 $15 = $69;
 $70 = $14;
 $71 = $15;
 $12 = $70;
 $13 = $71;
 $72 = $12;
 $73 = HEAP32[$72>>2]|0;
 $74 = $13;
 $75 = HEAP32[$74>>2]|0;
 $76 = ($73|0)==($75|0);
 $77 = $76 ^ 1;
 if ($77) {
  $ret_val = 1;
  $105 = $ret_val;
  $106 = $105&1;
  STACKTOP = sp;return ($106|0);
 }
 $78 = (($52) + 12|0);
 $10 = $78;
 $79 = $10;
 $9 = $79;
 $80 = $9;
 $8 = $80;
 $81 = $8;
 $82 = (($81) + 4|0);
 $7 = $82;
 $83 = $7;
 $6 = $83;
 $84 = $6;
 $5 = $84;
 $85 = $5;
 $4 = $85;
 $86 = $4;
 $2 = $11;
 $3 = $86;
 $87 = $2;
 $88 = $3;
 HEAP32[$87>>2] = $88;
 ;HEAP8[$1+0>>0]=HEAP8[$11+0>>0]|0;HEAP8[$1+1>>0]=HEAP8[$11+1>>0]|0;HEAP8[$1+2>>0]=HEAP8[$11+2>>0]|0;HEAP8[$1+3>>0]=HEAP8[$11+3>>0]|0;
 $0 = $50;
 $89 = $0;
 ;HEAP32[$89+0>>2]=HEAP32[$1+0>>2]|0;
 $90 = (($52) + 12|0);
 $91 = $47;
 $25 = $90;
 $26 = $91;
 $92 = $25;
 $93 = $26;
 __ZNKSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__tree_const_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_($27,$92,$93);
 ;HEAP8[$24+0>>0]=HEAP8[$27+0>>0]|0;HEAP8[$24+1>>0]=HEAP8[$27+1>>0]|0;HEAP8[$24+2>>0]=HEAP8[$27+2>>0]|0;HEAP8[$24+3>>0]=HEAP8[$27+3>>0]|0;
 $23 = $51;
 $94 = $23;
 ;HEAP32[$94+0>>2]=HEAP32[$24+0>>2]|0;
 $32 = $50;
 $33 = $51;
 $95 = $32;
 $96 = $33;
 $30 = $95;
 $31 = $96;
 $97 = $30;
 $98 = $31;
 $28 = $97;
 $29 = $98;
 $99 = $28;
 $100 = HEAP32[$99>>2]|0;
 $101 = $29;
 $102 = HEAP32[$101>>2]|0;
 $103 = ($100|0)==($102|0);
 $104 = $103 ^ 1;
 if ($104) {
  $ret_val = 1;
 }
 $105 = $ret_val;
 $106 = $105&1;
 STACKTOP = sp;return ($106|0);
}
function __ZN12CmdArgReader12getArgHelperIiEEPKT_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $tmp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = sp + 16|0;
 $17 = sp + 68|0;
 $21 = sp + 24|0;
 $24 = sp + 104|0;
 $50 = sp + 8|0;
 $53 = sp + 220|0;
 $57 = sp + 236|0;
 $58 = sp + 240|0;
 $62 = sp;
 $72 = sp + 28|0;
 $76 = sp + 304|0;
 $77 = sp + 160|0;
 $78 = sp + 180|0;
 $79 = sp + 164|0;
 $80 = sp + 320|0;
 $74 = $this;
 $75 = $name;
 $81 = $74;
 $71 = $81;
 $82 = $71;
 $70 = $82;
 $83 = $70;
 $69 = $83;
 $84 = $69;
 $85 = (($84) + 4|0);
 $68 = $85;
 $86 = $68;
 $67 = $86;
 $87 = $67;
 $66 = $87;
 $88 = $66;
 $65 = $88;
 $89 = $65;
 $63 = $72;
 $64 = $89;
 $90 = $63;
 $91 = $64;
 HEAP32[$90>>2] = $91;
 ;HEAP8[$62+0>>0]=HEAP8[$72+0>>0]|0;HEAP8[$62+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$62+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$62+3>>0]=HEAP8[$72+3>>0]|0;
 $61 = $76;
 $92 = $61;
 ;HEAP32[$92+0>>2]=HEAP32[$62+0>>2]|0;
 $93 = (($81) + 24|0);
 $94 = $75;
 $51 = $81;
 $52 = $94;
 $95 = $51;
 $96 = $52;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEEEENS_19__map_value_compareIS7_SE_NS_4lessIS7_EELb1EEENS5_ISE_EEE4findIS7_EENS_15__tree_iteratorISE_PNS_11__tree_nodeISE_SC_EEiEERKT_($53,$95,$96);
 ;HEAP8[$50+0>>0]=HEAP8[$53+0>>0]|0;HEAP8[$50+1>>0]=HEAP8[$53+1>>0]|0;HEAP8[$50+2>>0]=HEAP8[$53+2>>0]|0;HEAP8[$50+3>>0]=HEAP8[$53+3>>0]|0;
 $49 = $77;
 $97 = $49;
 ;HEAP32[$97+0>>2]=HEAP32[$50+0>>2]|0;
 ;HEAP32[$93+0>>2]=HEAP32[$77+0>>2]|0;
 $47 = $76;
 $48 = $93;
 $98 = $47;
 $99 = $48;
 $45 = $98;
 $46 = $99;
 $100 = $45;
 $101 = $46;
 $43 = $100;
 $44 = $101;
 $102 = $43;
 $103 = HEAP32[$102>>2]|0;
 $104 = $44;
 $105 = HEAP32[$104>>2]|0;
 $106 = ($103|0)==($105|0);
 $107 = $106 ^ 1;
 do {
  if ($107) {
   $108 = (($81) + 24|0);
   $42 = $108;
   $109 = $42;
   $41 = $109;
   $110 = $41;
   $111 = HEAP32[$110>>2]|0;
   $112 = (($111) + 16|0);
   $40 = $112;
   $113 = $40;
   $39 = $113;
   $114 = $39;
   $38 = $114;
   $115 = $38;
   $37 = $115;
   $116 = $37;
   $117 = (($116) + 12|0);
   $118 = HEAP32[$117>>2]|0;
   $18 = $118;
   $19 = 20008;
   $119 = $18;
   $120 = (($119) + 4|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = $19;
   $123 = (($122) + 4|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = ($121|0)==($124|0);
   if (!($125)) {
    break;
   }
   $126 = (($81) + 24|0);
   $5 = $126;
   $127 = $5;
   $4 = $127;
   $128 = $4;
   $129 = HEAP32[$128>>2]|0;
   $130 = (($129) + 16|0);
   $3 = $130;
   $131 = $3;
   $2 = $131;
   $132 = $2;
   $1 = $132;
   $133 = $1;
   $0 = $133;
   $134 = $0;
   $135 = (($134) + 12|0);
   $136 = (($135) + 4|0);
   $137 = HEAP32[$136>>2]|0;
   $73 = $137;
   $198 = $73;
   STACKTOP = sp;return ($198|0);
  } else {
   $138 = (__Znwj(4)|0);
   $tmp = $138;
   $139 = (($81) + 12|0);
   $16 = $139;
   $140 = $16;
   $15 = $140;
   $141 = $15;
   $14 = $141;
   $142 = $14;
   $143 = (($142) + 4|0);
   $13 = $143;
   $144 = $13;
   $12 = $144;
   $145 = $12;
   $11 = $145;
   $146 = $11;
   $10 = $146;
   $147 = $10;
   $8 = $17;
   $9 = $147;
   $148 = $8;
   $149 = $9;
   HEAP32[$148>>2] = $149;
   ;HEAP8[$7+0>>0]=HEAP8[$17+0>>0]|0;HEAP8[$7+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$7+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$7+3>>0]=HEAP8[$17+3>>0]|0;
   $6 = $78;
   $150 = $6;
   ;HEAP32[$150+0>>2]=HEAP32[$7+0>>2]|0;
   $151 = (($81) + 28|0);
   $152 = (($81) + 12|0);
   $153 = $75;
   $22 = $152;
   $23 = $153;
   $154 = $22;
   $155 = $23;
   __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_($24,$154,$155);
   ;HEAP8[$21+0>>0]=HEAP8[$24+0>>0]|0;HEAP8[$21+1>>0]=HEAP8[$24+1>>0]|0;HEAP8[$21+2>>0]=HEAP8[$24+2>>0]|0;HEAP8[$21+3>>0]=HEAP8[$24+3>>0]|0;
   $20 = $79;
   $156 = $20;
   ;HEAP32[$156+0>>2]=HEAP32[$21+0>>2]|0;
   ;HEAP32[$151+0>>2]=HEAP32[$79+0>>2]|0;
   $29 = $78;
   $30 = $151;
   $157 = $29;
   $158 = $30;
   $27 = $157;
   $28 = $158;
   $159 = $27;
   $160 = $28;
   $25 = $159;
   $26 = $160;
   $161 = $25;
   $162 = HEAP32[$161>>2]|0;
   $163 = $26;
   $164 = HEAP32[$163>>2]|0;
   $165 = ($162|0)==($164|0);
   $166 = $165 ^ 1;
   do {
    if ($166) {
     $167 = (($81) + 28|0);
     $36 = $167;
     $168 = $36;
     $35 = $168;
     $169 = $35;
     $170 = HEAP32[$169>>2]|0;
     $171 = (($170) + 16|0);
     $34 = $171;
     $172 = $34;
     $33 = $172;
     $173 = $33;
     $32 = $173;
     $174 = $32;
     $31 = $174;
     $175 = $31;
     $176 = (($175) + 12|0);
     $177 = $tmp;
     $178 = (__ZN12CmdArgReader10convertToTIiEEbRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERT_($176,$177)|0);
     if (!($178)) {
      break;
     }
     $179 = $75;
     $180 = (__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEENS_4lessIS6_EENS4_INS7_IKS6_SC_EEEEEixERSF_($81,$179)|0);
     $181 = $tmp;
     HEAP32[$57>>2] = 20008;
     HEAP32[$58>>2] = $181;
     $54 = $80;
     $55 = $57;
     $56 = $58;
     $182 = $54;
     $183 = $55;
     $184 = HEAP32[$183>>2]|0;
     HEAP32[$182>>2] = $184;
     $185 = (($182) + 4|0);
     $186 = $56;
     $187 = HEAP32[$186>>2]|0;
     HEAP32[$185>>2] = $187;
     $59 = $180;
     $60 = $80;
     $188 = $59;
     $189 = $60;
     $190 = HEAP32[$189>>2]|0;
     HEAP32[$188>>2] = $190;
     $191 = $60;
     $192 = (($191) + 4|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (($188) + 4|0);
     HEAP32[$194>>2] = $193;
     $195 = $tmp;
     $73 = $195;
     $198 = $73;
     STACKTOP = sp;return ($198|0);
    }
   } while(0);
   $196 = $tmp;
   $197 = ($196|0)==(0|0);
   if (!($197)) {
    __ZdlPv($196);
   }
  }
 } while(0);
 $73 = 0;
 $198 = $73;
 STACKTOP = sp;return ($198|0);
}
function __ZN12CmdArgReader12getArgHelperINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEPKT_RKS7_($this,$name) {
 $this = $this|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $15 = sp;
 $25 = sp + 116|0;
 $29 = sp + 24|0;
 $32 = sp + 144|0;
 $58 = sp + 16|0;
 $61 = sp + 256|0;
 $65 = sp + 284|0;
 $66 = sp + 288|0;
 $70 = sp + 8|0;
 $80 = sp + 272|0;
 $84 = sp + 344|0;
 $85 = sp + 220|0;
 $88 = sp + 352|0;
 $89 = sp + 300|0;
 $90 = sp + 184|0;
 $82 = $this;
 $83 = $name;
 $91 = $82;
 $79 = $91;
 $92 = $79;
 $78 = $92;
 $93 = $78;
 $77 = $93;
 $94 = $77;
 $95 = (($94) + 4|0);
 $76 = $95;
 $96 = $76;
 $75 = $96;
 $97 = $75;
 $74 = $97;
 $98 = $74;
 $73 = $98;
 $99 = $73;
 $71 = $80;
 $72 = $99;
 $100 = $71;
 $101 = $72;
 HEAP32[$100>>2] = $101;
 ;HEAP8[$70+0>>0]=HEAP8[$80+0>>0]|0;HEAP8[$70+1>>0]=HEAP8[$80+1>>0]|0;HEAP8[$70+2>>0]=HEAP8[$80+2>>0]|0;HEAP8[$70+3>>0]=HEAP8[$80+3>>0]|0;
 $69 = $84;
 $102 = $69;
 ;HEAP32[$102+0>>2]=HEAP32[$70+0>>2]|0;
 $103 = (($91) + 24|0);
 $104 = $83;
 $59 = $91;
 $60 = $104;
 $105 = $59;
 $106 = $60;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEEEENS_19__map_value_compareIS7_SE_NS_4lessIS7_EELb1EEENS5_ISE_EEE4findIS7_EENS_15__tree_iteratorISE_PNS_11__tree_nodeISE_SC_EEiEERKT_($61,$105,$106);
 ;HEAP8[$58+0>>0]=HEAP8[$61+0>>0]|0;HEAP8[$58+1>>0]=HEAP8[$61+1>>0]|0;HEAP8[$58+2>>0]=HEAP8[$61+2>>0]|0;HEAP8[$58+3>>0]=HEAP8[$61+3>>0]|0;
 $57 = $85;
 $107 = $57;
 ;HEAP32[$107+0>>2]=HEAP32[$58+0>>2]|0;
 ;HEAP32[$103+0>>2]=HEAP32[$85+0>>2]|0;
 $55 = $84;
 $56 = $103;
 $108 = $55;
 $109 = $56;
 $53 = $108;
 $54 = $109;
 $110 = $53;
 $111 = $54;
 $51 = $110;
 $52 = $111;
 $112 = $51;
 $113 = HEAP32[$112>>2]|0;
 $114 = $52;
 $115 = HEAP32[$114>>2]|0;
 $116 = ($113|0)==($115|0);
 $117 = $116 ^ 1;
 do {
  if ($117) {
   $118 = (($91) + 24|0);
   $50 = $118;
   $119 = $50;
   $49 = $119;
   $120 = $49;
   $121 = HEAP32[$120>>2]|0;
   $122 = (($121) + 16|0);
   $48 = $122;
   $123 = $48;
   $47 = $123;
   $124 = $47;
   $46 = $124;
   $125 = $46;
   $45 = $125;
   $126 = $45;
   $127 = (($126) + 12|0);
   $128 = HEAP32[$127>>2]|0;
   $26 = $128;
   $27 = 1984;
   $129 = $26;
   $130 = (($129) + 4|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $27;
   $133 = (($132) + 4|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ($131|0)==($134|0);
   if (!($135)) {
    break;
   }
   $136 = (($91) + 24|0);
   $5 = $136;
   $137 = $5;
   $4 = $137;
   $138 = $4;
   $139 = HEAP32[$138>>2]|0;
   $140 = (($139) + 16|0);
   $3 = $140;
   $141 = $3;
   $2 = $141;
   $142 = $2;
   $1 = $142;
   $143 = $1;
   $0 = $143;
   $144 = $0;
   $145 = (($144) + 12|0);
   $146 = (($145) + 4|0);
   $147 = HEAP32[$146>>2]|0;
   $81 = $147;
   $226 = $81;
   STACKTOP = sp;return ($226|0);
  } else {
   $148 = (__Znwj(12)|0);
   $13 = $148;
   $149 = $13;
   $12 = $149;
   $150 = $12;
   $11 = $150;
   $151 = $11;
   $10 = $151;
   $152 = $10;
   $9 = $152;
   $8 = $150;
   $153 = $8;
   $7 = $153;
   $154 = $7;
   $6 = $154;
   $155 = $6;
   $__a$i$i$i = $155;
   $__i$i$i$i = 0;
   while(1) {
    $156 = $__i$i$i$i;
    $157 = ($156>>>0)<(3);
    if (!($157)) {
     break;
    }
    $158 = $__i$i$i$i;
    $159 = $__a$i$i$i;
    $160 = (($159) + ($158<<2)|0);
    HEAP32[$160>>2] = 0;
    $161 = $__i$i$i$i;
    $162 = (($161) + 1)|0;
    $__i$i$i$i = $162;
   }
   $tmp = $148;
   $163 = (($91) + 12|0);
   $24 = $163;
   $164 = $24;
   $23 = $164;
   $165 = $23;
   $22 = $165;
   $166 = $22;
   $167 = (($166) + 4|0);
   $21 = $167;
   $168 = $21;
   $20 = $168;
   $169 = $20;
   $19 = $169;
   $170 = $19;
   $18 = $170;
   $171 = $18;
   $16 = $25;
   $17 = $171;
   $172 = $16;
   $173 = $17;
   HEAP32[$172>>2] = $173;
   ;HEAP8[$15+0>>0]=HEAP8[$25+0>>0]|0;HEAP8[$15+1>>0]=HEAP8[$25+1>>0]|0;HEAP8[$15+2>>0]=HEAP8[$25+2>>0]|0;HEAP8[$15+3>>0]=HEAP8[$25+3>>0]|0;
   $14 = $88;
   $174 = $14;
   ;HEAP32[$174+0>>2]=HEAP32[$15+0>>2]|0;
   $175 = (($91) + 28|0);
   $176 = (($91) + 12|0);
   $177 = $83;
   $30 = $176;
   $31 = $177;
   $178 = $30;
   $179 = $31;
   __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_($32,$178,$179);
   ;HEAP8[$29+0>>0]=HEAP8[$32+0>>0]|0;HEAP8[$29+1>>0]=HEAP8[$32+1>>0]|0;HEAP8[$29+2>>0]=HEAP8[$32+2>>0]|0;HEAP8[$29+3>>0]=HEAP8[$32+3>>0]|0;
   $28 = $89;
   $180 = $28;
   ;HEAP32[$180+0>>2]=HEAP32[$29+0>>2]|0;
   ;HEAP32[$175+0>>2]=HEAP32[$89+0>>2]|0;
   $37 = $88;
   $38 = $175;
   $181 = $37;
   $182 = $38;
   $35 = $181;
   $36 = $182;
   $183 = $35;
   $184 = $36;
   $33 = $183;
   $34 = $184;
   $185 = $33;
   $186 = HEAP32[$185>>2]|0;
   $187 = $34;
   $188 = HEAP32[$187>>2]|0;
   $189 = ($186|0)==($188|0);
   $190 = $189 ^ 1;
   do {
    if ($190) {
     $191 = (($91) + 28|0);
     $44 = $191;
     $192 = $44;
     $43 = $192;
     $193 = $43;
     $194 = HEAP32[$193>>2]|0;
     $195 = (($194) + 16|0);
     $42 = $195;
     $196 = $42;
     $41 = $196;
     $197 = $41;
     $40 = $197;
     $198 = $40;
     $39 = $198;
     $199 = $39;
     $200 = (($199) + 12|0);
     $201 = $tmp;
     $202 = (__ZN12CmdArgReader10convertToTINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEbRKS7_RT_($200,$201)|0);
     if (!($202)) {
      break;
     }
     $203 = $83;
     $204 = (__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEENS_4lessIS6_EENS4_INS7_IKS6_SC_EEEEEixERSF_($91,$203)|0);
     $205 = $tmp;
     HEAP32[$65>>2] = 1984;
     HEAP32[$66>>2] = $205;
     $62 = $90;
     $63 = $65;
     $64 = $66;
     $206 = $62;
     $207 = $63;
     $208 = HEAP32[$207>>2]|0;
     HEAP32[$206>>2] = $208;
     $209 = (($206) + 4|0);
     $210 = $64;
     $211 = HEAP32[$210>>2]|0;
     HEAP32[$209>>2] = $211;
     $67 = $204;
     $68 = $90;
     $212 = $67;
     $213 = $68;
     $214 = HEAP32[$213>>2]|0;
     HEAP32[$212>>2] = $214;
     $215 = $68;
     $216 = (($215) + 4|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = (($212) + 4|0);
     HEAP32[$218>>2] = $217;
     $219 = $tmp;
     $81 = $219;
     $226 = $81;
     STACKTOP = sp;return ($226|0);
    }
   } while(0);
   $220 = $tmp;
   $221 = ($220|0)==(0|0);
   do {
    if (!($221)) {
     __THREW__ = 0;
     invoke_vi(403,($220|0));
     $222 = __THREW__; __THREW__ = 0;
     $223 = $222&1;
     if (!($223)) {
      __ZdlPv($220);
      break;
     }
     $224 = ___cxa_find_matching_catch()|0;
     $225 = tempRet0;
     $86 = $224;
     $87 = $225;
     __ZdlPv($220);
     $227 = $86;
     $228 = $87;
     ___resumeException($227|0);
     // unreachable;
    }
   } while(0);
  }
 } while(0);
 $81 = 0;
 $226 = $81;
 STACKTOP = sp;return ($226|0);
}
function __ZNKSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEEEENS_19__map_value_compareIS7_SE_NS_4lessIS7_EELb1EEENS5_ISE_EEE4findIS7_EENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_SC_EEiEERKT_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__lhs_sz$i$i$i$i = 0, $__p = 0, $__result$i$i$i$i = 0, $__rhs_sz$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $54 = sp;
 $57 = sp + 444|0;
 $__lhs_sz$i$i$i$i = sp + 320|0;
 $__rhs_sz$i$i$i$i = sp + 324|0;
 $__p = sp + 216|0;
 $107 = sp + 224|0;
 $105 = $this;
 $106 = $__v;
 $108 = $105;
 $109 = $106;
 $104 = $108;
 $110 = $104;
 $103 = $110;
 $111 = $103;
 $112 = (($111) + 4|0);
 $102 = $112;
 $113 = $102;
 $101 = $113;
 $114 = $101;
 $100 = $114;
 $115 = $100;
 $99 = $115;
 $116 = $99;
 $117 = HEAP32[$116>>2]|0;
 $20 = $108;
 $118 = $20;
 $119 = (($118) + 4|0);
 $19 = $119;
 $120 = $19;
 $18 = $120;
 $121 = $18;
 $17 = $121;
 $122 = $17;
 $16 = $122;
 $123 = $16;
 __ZNKSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEEEENS_19__map_value_compareIS7_SE_NS_4lessIS7_EELb1EEENS5_ISE_EEE13__lower_boundIS7_EENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_SC_EEiEERKT_SP_SP_($__p,$108,$109,$117,$123);
 $15 = $108;
 $124 = $15;
 $14 = $124;
 $125 = $14;
 $126 = (($125) + 4|0);
 $13 = $126;
 $127 = $13;
 $12 = $127;
 $128 = $12;
 $11 = $128;
 $129 = $11;
 $10 = $129;
 $130 = $10;
 $8 = $107;
 $9 = $130;
 $131 = $8;
 $132 = $9;
 HEAP32[$131>>2] = $132;
 $2 = $__p;
 $3 = $107;
 $133 = $2;
 $134 = $3;
 $0 = $133;
 $1 = $134;
 $135 = $0;
 $136 = HEAP32[$135>>2]|0;
 $137 = $1;
 $138 = HEAP32[$137>>2]|0;
 $139 = ($136|0)==($138|0);
 $140 = $139 ^ 1;
 if ($140) {
  $6 = $108;
  $141 = $6;
  $142 = (($141) + 8|0);
  $5 = $142;
  $143 = $5;
  $4 = $143;
  $144 = $4;
  $145 = $106;
  $7 = $__p;
  $146 = $7;
  $147 = HEAP32[$146>>2]|0;
  $148 = (($147) + 16|0);
  $88 = $144;
  $89 = $145;
  $90 = $148;
  $149 = $88;
  $150 = $89;
  $151 = $90;
  $85 = $149;
  $86 = $150;
  $87 = $151;
  $152 = $86;
  $153 = $87;
  $83 = $152;
  $84 = $153;
  $154 = $83;
  $155 = $84;
  $79 = $154;
  $80 = $155;
  $156 = $79;
  $77 = $156;
  $157 = $77;
  $76 = $157;
  $158 = $76;
  $75 = $158;
  $159 = $75;
  $74 = $159;
  $160 = $74;
  $161 = HEAP8[$160>>0]|0;
  $162 = $161&255;
  $163 = $162 & 1;
  $164 = ($163|0)!=(0);
  if ($164) {
   $70 = $157;
   $165 = $70;
   $69 = $165;
   $166 = $69;
   $68 = $166;
   $167 = $68;
   $168 = (($167) + 4|0);
   $169 = HEAP32[$168>>2]|0;
   $176 = $169;
  } else {
   $73 = $157;
   $170 = $73;
   $72 = $170;
   $171 = $72;
   $71 = $171;
   $172 = $71;
   $173 = HEAP8[$172>>0]|0;
   $174 = $173&255;
   $175 = $174 >> 1;
   $176 = $175;
  }
  HEAP32[$__lhs_sz$i$i$i$i>>2] = $176;
  $177 = $80;
  $67 = $177;
  $178 = $67;
  $66 = $178;
  $179 = $66;
  $65 = $179;
  $180 = $65;
  $64 = $180;
  $181 = $64;
  $182 = HEAP8[$181>>0]|0;
  $183 = $182&255;
  $184 = $183 & 1;
  $185 = ($184|0)!=(0);
  if ($185) {
   $60 = $178;
   $186 = $60;
   $59 = $186;
   $187 = $59;
   $58 = $187;
   $188 = $58;
   $189 = (($188) + 4|0);
   $190 = HEAP32[$189>>2]|0;
   $197 = $190;
  } else {
   $63 = $178;
   $191 = $63;
   $62 = $191;
   $192 = $62;
   $61 = $192;
   $193 = $61;
   $194 = HEAP8[$193>>0]|0;
   $195 = $194&255;
   $196 = $195 >> 1;
   $197 = $196;
  }
  HEAP32[$__rhs_sz$i$i$i$i>>2] = $197;
  $34 = $156;
  $198 = $34;
  $33 = $198;
  $199 = $33;
  $32 = $199;
  $200 = $32;
  $31 = $200;
  $201 = $31;
  $30 = $201;
  $202 = $30;
  $203 = HEAP8[$202>>0]|0;
  $204 = $203&255;
  $205 = $204 & 1;
  $206 = ($205|0)!=(0);
  if ($206) {
   $24 = $199;
   $207 = $24;
   $23 = $207;
   $208 = $23;
   $22 = $208;
   $209 = $22;
   $210 = (($209) + 8|0);
   $211 = HEAP32[$210>>2]|0;
   $218 = $211;
  } else {
   $29 = $199;
   $212 = $29;
   $28 = $212;
   $213 = $28;
   $27 = $213;
   $214 = $27;
   $215 = (($214) + 1|0);
   $26 = $215;
   $216 = $26;
   $25 = $216;
   $217 = $25;
   $218 = $217;
  }
  $21 = $218;
  $219 = $21;
  $220 = $80;
  $48 = $220;
  $221 = $48;
  $47 = $221;
  $222 = $47;
  $46 = $222;
  $223 = $46;
  $45 = $223;
  $224 = $45;
  $44 = $224;
  $225 = $44;
  $226 = HEAP8[$225>>0]|0;
  $227 = $226&255;
  $228 = $227 & 1;
  $229 = ($228|0)!=(0);
  if ($229) {
   $38 = $222;
   $230 = $38;
   $37 = $230;
   $231 = $37;
   $36 = $231;
   $232 = $36;
   $233 = (($232) + 8|0);
   $234 = HEAP32[$233>>2]|0;
   $241 = $234;
  } else {
   $43 = $222;
   $235 = $43;
   $42 = $235;
   $236 = $42;
   $41 = $236;
   $237 = $41;
   $238 = (($237) + 1|0);
   $40 = $238;
   $239 = $40;
   $39 = $239;
   $240 = $39;
   $241 = $240;
  }
  $35 = $241;
  $242 = $35;
  $55 = $__lhs_sz$i$i$i$i;
  $56 = $__rhs_sz$i$i$i$i;
  $243 = $55;
  $244 = $56;
  ;HEAP8[$54+0>>0]=HEAP8[$57+0>>0]|0;
  $52 = $243;
  $53 = $244;
  $245 = $53;
  $246 = $52;
  $49 = $54;
  $50 = $245;
  $51 = $246;
  $247 = $50;
  $248 = HEAP32[$247>>2]|0;
  $249 = $51;
  $250 = HEAP32[$249>>2]|0;
  $251 = ($248>>>0)<($250>>>0);
  if ($251) {
   $252 = $53;
   $255 = $252;
  } else {
   $253 = $52;
   $255 = $253;
  }
  $254 = HEAP32[$255>>2]|0;
  __THREW__ = 0;
  $256 = (invoke_iiii(428,($219|0),($242|0),($254|0))|0);
  $257 = __THREW__; __THREW__ = 0;
  $258 = $257&1;
  if ($258) {
   $262 = ___cxa_find_matching_catch()|0;
   $263 = tempRet0;
   $81 = $262;
   $82 = $263;
   $264 = $81;
   ___cxa_call_unexpected(($264|0));
   // unreachable;
  }
  $__result$i$i$i$i = $256;
  $259 = $__result$i$i$i$i;
  $260 = ($259|0)!=(0);
  do {
   if ($260) {
    $261 = $__result$i$i$i$i;
    $78 = $261;
   } else {
    $265 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
    $266 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
    $267 = ($265>>>0)<($266>>>0);
    if ($267) {
     $78 = -1;
     break;
    }
    $268 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
    $269 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
    $270 = ($268>>>0)>($269>>>0);
    if ($270) {
     $78 = 1;
     break;
    } else {
     $78 = 0;
     break;
    }
   }
  } while(0);
  $271 = $78;
  $272 = ($271|0)<(0);
  if (!($272)) {
   ;HEAP32[$agg$result+0>>2]=HEAP32[$__p+0>>2]|0;
   STACKTOP = sp;return;
  }
 }
 $98 = $108;
 $273 = $98;
 $97 = $273;
 $274 = $97;
 $275 = (($274) + 4|0);
 $96 = $275;
 $276 = $96;
 $95 = $276;
 $277 = $95;
 $94 = $277;
 $278 = $94;
 $93 = $278;
 $279 = $93;
 $91 = $agg$result;
 $92 = $279;
 $280 = $91;
 $281 = $92;
 HEAP32[$280>>2] = $281;
 STACKTOP = sp;return;
}
function __ZNKSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__tree_const_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__lhs_sz$i$i$i$i = 0, $__p = 0, $__result$i$i$i$i = 0, $__rhs_sz$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $54 = sp;
 $57 = sp + 444|0;
 $__lhs_sz$i$i$i$i = sp + 320|0;
 $__rhs_sz$i$i$i$i = sp + 324|0;
 $__p = sp + 216|0;
 $107 = sp + 224|0;
 $105 = $this;
 $106 = $__v;
 $108 = $105;
 $109 = $106;
 $104 = $108;
 $110 = $104;
 $103 = $110;
 $111 = $103;
 $112 = (($111) + 4|0);
 $102 = $112;
 $113 = $102;
 $101 = $113;
 $114 = $101;
 $100 = $114;
 $115 = $100;
 $99 = $115;
 $116 = $99;
 $117 = HEAP32[$116>>2]|0;
 $20 = $108;
 $118 = $20;
 $119 = (($118) + 4|0);
 $19 = $119;
 $120 = $19;
 $18 = $120;
 $121 = $18;
 $17 = $121;
 $122 = $17;
 $16 = $122;
 $123 = $16;
 __ZNKSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE13__lower_boundIS7_EENS_21__tree_const_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_SK_SK_($__p,$108,$109,$117,$123);
 $15 = $108;
 $124 = $15;
 $14 = $124;
 $125 = $14;
 $126 = (($125) + 4|0);
 $13 = $126;
 $127 = $13;
 $12 = $127;
 $128 = $12;
 $11 = $128;
 $129 = $11;
 $10 = $129;
 $130 = $10;
 $8 = $107;
 $9 = $130;
 $131 = $8;
 $132 = $9;
 HEAP32[$131>>2] = $132;
 $2 = $__p;
 $3 = $107;
 $133 = $2;
 $134 = $3;
 $0 = $133;
 $1 = $134;
 $135 = $0;
 $136 = HEAP32[$135>>2]|0;
 $137 = $1;
 $138 = HEAP32[$137>>2]|0;
 $139 = ($136|0)==($138|0);
 $140 = $139 ^ 1;
 if ($140) {
  $6 = $108;
  $141 = $6;
  $142 = (($141) + 8|0);
  $5 = $142;
  $143 = $5;
  $4 = $143;
  $144 = $4;
  $145 = $106;
  $7 = $__p;
  $146 = $7;
  $147 = HEAP32[$146>>2]|0;
  $148 = (($147) + 16|0);
  $88 = $144;
  $89 = $145;
  $90 = $148;
  $149 = $88;
  $150 = $89;
  $151 = $90;
  $85 = $149;
  $86 = $150;
  $87 = $151;
  $152 = $86;
  $153 = $87;
  $83 = $152;
  $84 = $153;
  $154 = $83;
  $155 = $84;
  $79 = $154;
  $80 = $155;
  $156 = $79;
  $77 = $156;
  $157 = $77;
  $76 = $157;
  $158 = $76;
  $75 = $158;
  $159 = $75;
  $74 = $159;
  $160 = $74;
  $161 = HEAP8[$160>>0]|0;
  $162 = $161&255;
  $163 = $162 & 1;
  $164 = ($163|0)!=(0);
  if ($164) {
   $70 = $157;
   $165 = $70;
   $69 = $165;
   $166 = $69;
   $68 = $166;
   $167 = $68;
   $168 = (($167) + 4|0);
   $169 = HEAP32[$168>>2]|0;
   $176 = $169;
  } else {
   $73 = $157;
   $170 = $73;
   $72 = $170;
   $171 = $72;
   $71 = $171;
   $172 = $71;
   $173 = HEAP8[$172>>0]|0;
   $174 = $173&255;
   $175 = $174 >> 1;
   $176 = $175;
  }
  HEAP32[$__lhs_sz$i$i$i$i>>2] = $176;
  $177 = $80;
  $67 = $177;
  $178 = $67;
  $66 = $178;
  $179 = $66;
  $65 = $179;
  $180 = $65;
  $64 = $180;
  $181 = $64;
  $182 = HEAP8[$181>>0]|0;
  $183 = $182&255;
  $184 = $183 & 1;
  $185 = ($184|0)!=(0);
  if ($185) {
   $60 = $178;
   $186 = $60;
   $59 = $186;
   $187 = $59;
   $58 = $187;
   $188 = $58;
   $189 = (($188) + 4|0);
   $190 = HEAP32[$189>>2]|0;
   $197 = $190;
  } else {
   $63 = $178;
   $191 = $63;
   $62 = $191;
   $192 = $62;
   $61 = $192;
   $193 = $61;
   $194 = HEAP8[$193>>0]|0;
   $195 = $194&255;
   $196 = $195 >> 1;
   $197 = $196;
  }
  HEAP32[$__rhs_sz$i$i$i$i>>2] = $197;
  $34 = $156;
  $198 = $34;
  $33 = $198;
  $199 = $33;
  $32 = $199;
  $200 = $32;
  $31 = $200;
  $201 = $31;
  $30 = $201;
  $202 = $30;
  $203 = HEAP8[$202>>0]|0;
  $204 = $203&255;
  $205 = $204 & 1;
  $206 = ($205|0)!=(0);
  if ($206) {
   $24 = $199;
   $207 = $24;
   $23 = $207;
   $208 = $23;
   $22 = $208;
   $209 = $22;
   $210 = (($209) + 8|0);
   $211 = HEAP32[$210>>2]|0;
   $218 = $211;
  } else {
   $29 = $199;
   $212 = $29;
   $28 = $212;
   $213 = $28;
   $27 = $213;
   $214 = $27;
   $215 = (($214) + 1|0);
   $26 = $215;
   $216 = $26;
   $25 = $216;
   $217 = $25;
   $218 = $217;
  }
  $21 = $218;
  $219 = $21;
  $220 = $80;
  $48 = $220;
  $221 = $48;
  $47 = $221;
  $222 = $47;
  $46 = $222;
  $223 = $46;
  $45 = $223;
  $224 = $45;
  $44 = $224;
  $225 = $44;
  $226 = HEAP8[$225>>0]|0;
  $227 = $226&255;
  $228 = $227 & 1;
  $229 = ($228|0)!=(0);
  if ($229) {
   $38 = $222;
   $230 = $38;
   $37 = $230;
   $231 = $37;
   $36 = $231;
   $232 = $36;
   $233 = (($232) + 8|0);
   $234 = HEAP32[$233>>2]|0;
   $241 = $234;
  } else {
   $43 = $222;
   $235 = $43;
   $42 = $235;
   $236 = $42;
   $41 = $236;
   $237 = $41;
   $238 = (($237) + 1|0);
   $40 = $238;
   $239 = $40;
   $39 = $239;
   $240 = $39;
   $241 = $240;
  }
  $35 = $241;
  $242 = $35;
  $55 = $__lhs_sz$i$i$i$i;
  $56 = $__rhs_sz$i$i$i$i;
  $243 = $55;
  $244 = $56;
  ;HEAP8[$54+0>>0]=HEAP8[$57+0>>0]|0;
  $52 = $243;
  $53 = $244;
  $245 = $53;
  $246 = $52;
  $49 = $54;
  $50 = $245;
  $51 = $246;
  $247 = $50;
  $248 = HEAP32[$247>>2]|0;
  $249 = $51;
  $250 = HEAP32[$249>>2]|0;
  $251 = ($248>>>0)<($250>>>0);
  if ($251) {
   $252 = $53;
   $255 = $252;
  } else {
   $253 = $52;
   $255 = $253;
  }
  $254 = HEAP32[$255>>2]|0;
  __THREW__ = 0;
  $256 = (invoke_iiii(428,($219|0),($242|0),($254|0))|0);
  $257 = __THREW__; __THREW__ = 0;
  $258 = $257&1;
  if ($258) {
   $262 = ___cxa_find_matching_catch()|0;
   $263 = tempRet0;
   $81 = $262;
   $82 = $263;
   $264 = $81;
   ___cxa_call_unexpected(($264|0));
   // unreachable;
  }
  $__result$i$i$i$i = $256;
  $259 = $__result$i$i$i$i;
  $260 = ($259|0)!=(0);
  do {
   if ($260) {
    $261 = $__result$i$i$i$i;
    $78 = $261;
   } else {
    $265 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
    $266 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
    $267 = ($265>>>0)<($266>>>0);
    if ($267) {
     $78 = -1;
     break;
    }
    $268 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
    $269 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
    $270 = ($268>>>0)>($269>>>0);
    if ($270) {
     $78 = 1;
     break;
    } else {
     $78 = 0;
     break;
    }
   }
  } while(0);
  $271 = $78;
  $272 = ($271|0)<(0);
  if (!($272)) {
   ;HEAP32[$agg$result+0>>2]=HEAP32[$__p+0>>2]|0;
   STACKTOP = sp;return;
  }
 }
 $98 = $108;
 $273 = $98;
 $97 = $273;
 $274 = $97;
 $275 = (($274) + 4|0);
 $96 = $275;
 $276 = $96;
 $95 = $276;
 $277 = $95;
 $94 = $277;
 $278 = $94;
 $93 = $278;
 $279 = $93;
 $91 = $agg$result;
 $92 = $279;
 $280 = $91;
 $281 = $92;
 HEAP32[$280>>2] = $281;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEEEENS_19__map_value_compareIS7_SE_NS_4lessIS7_EELb1EEENS5_ISE_EEE4findIS7_EENS_15__tree_iteratorISE_PNS_11__tree_nodeISE_SC_EEiEERKT_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__lhs_sz$i$i$i$i = 0, $__p = 0, $__result$i$i$i$i = 0, $__rhs_sz$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $54 = sp;
 $57 = sp + 444|0;
 $__lhs_sz$i$i$i$i = sp + 320|0;
 $__rhs_sz$i$i$i$i = sp + 324|0;
 $__p = sp + 216|0;
 $107 = sp + 224|0;
 $105 = $this;
 $106 = $__v;
 $108 = $105;
 $109 = $106;
 $104 = $108;
 $110 = $104;
 $103 = $110;
 $111 = $103;
 $112 = (($111) + 4|0);
 $102 = $112;
 $113 = $102;
 $101 = $113;
 $114 = $101;
 $100 = $114;
 $115 = $100;
 $99 = $115;
 $116 = $99;
 $117 = HEAP32[$116>>2]|0;
 $20 = $108;
 $118 = $20;
 $119 = (($118) + 4|0);
 $19 = $119;
 $120 = $19;
 $18 = $120;
 $121 = $18;
 $17 = $121;
 $122 = $17;
 $16 = $122;
 $123 = $16;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEEEENS_19__map_value_compareIS7_SE_NS_4lessIS7_EELb1EEENS5_ISE_EEE13__lower_boundIS7_EENS_15__tree_iteratorISE_PNS_11__tree_nodeISE_SC_EEiEERKT_SP_SP_($__p,$108,$109,$117,$123);
 $15 = $108;
 $124 = $15;
 $14 = $124;
 $125 = $14;
 $126 = (($125) + 4|0);
 $13 = $126;
 $127 = $13;
 $12 = $127;
 $128 = $12;
 $11 = $128;
 $129 = $11;
 $10 = $129;
 $130 = $10;
 $8 = $107;
 $9 = $130;
 $131 = $8;
 $132 = $9;
 HEAP32[$131>>2] = $132;
 $2 = $__p;
 $3 = $107;
 $133 = $2;
 $134 = $3;
 $0 = $133;
 $1 = $134;
 $135 = $0;
 $136 = HEAP32[$135>>2]|0;
 $137 = $1;
 $138 = HEAP32[$137>>2]|0;
 $139 = ($136|0)==($138|0);
 $140 = $139 ^ 1;
 if ($140) {
  $6 = $108;
  $141 = $6;
  $142 = (($141) + 8|0);
  $5 = $142;
  $143 = $5;
  $4 = $143;
  $144 = $4;
  $145 = $106;
  $7 = $__p;
  $146 = $7;
  $147 = HEAP32[$146>>2]|0;
  $148 = (($147) + 16|0);
  $88 = $144;
  $89 = $145;
  $90 = $148;
  $149 = $88;
  $150 = $89;
  $151 = $90;
  $85 = $149;
  $86 = $150;
  $87 = $151;
  $152 = $86;
  $153 = $87;
  $83 = $152;
  $84 = $153;
  $154 = $83;
  $155 = $84;
  $79 = $154;
  $80 = $155;
  $156 = $79;
  $77 = $156;
  $157 = $77;
  $76 = $157;
  $158 = $76;
  $75 = $158;
  $159 = $75;
  $74 = $159;
  $160 = $74;
  $161 = HEAP8[$160>>0]|0;
  $162 = $161&255;
  $163 = $162 & 1;
  $164 = ($163|0)!=(0);
  if ($164) {
   $70 = $157;
   $165 = $70;
   $69 = $165;
   $166 = $69;
   $68 = $166;
   $167 = $68;
   $168 = (($167) + 4|0);
   $169 = HEAP32[$168>>2]|0;
   $176 = $169;
  } else {
   $73 = $157;
   $170 = $73;
   $72 = $170;
   $171 = $72;
   $71 = $171;
   $172 = $71;
   $173 = HEAP8[$172>>0]|0;
   $174 = $173&255;
   $175 = $174 >> 1;
   $176 = $175;
  }
  HEAP32[$__lhs_sz$i$i$i$i>>2] = $176;
  $177 = $80;
  $67 = $177;
  $178 = $67;
  $66 = $178;
  $179 = $66;
  $65 = $179;
  $180 = $65;
  $64 = $180;
  $181 = $64;
  $182 = HEAP8[$181>>0]|0;
  $183 = $182&255;
  $184 = $183 & 1;
  $185 = ($184|0)!=(0);
  if ($185) {
   $60 = $178;
   $186 = $60;
   $59 = $186;
   $187 = $59;
   $58 = $187;
   $188 = $58;
   $189 = (($188) + 4|0);
   $190 = HEAP32[$189>>2]|0;
   $197 = $190;
  } else {
   $63 = $178;
   $191 = $63;
   $62 = $191;
   $192 = $62;
   $61 = $192;
   $193 = $61;
   $194 = HEAP8[$193>>0]|0;
   $195 = $194&255;
   $196 = $195 >> 1;
   $197 = $196;
  }
  HEAP32[$__rhs_sz$i$i$i$i>>2] = $197;
  $34 = $156;
  $198 = $34;
  $33 = $198;
  $199 = $33;
  $32 = $199;
  $200 = $32;
  $31 = $200;
  $201 = $31;
  $30 = $201;
  $202 = $30;
  $203 = HEAP8[$202>>0]|0;
  $204 = $203&255;
  $205 = $204 & 1;
  $206 = ($205|0)!=(0);
  if ($206) {
   $24 = $199;
   $207 = $24;
   $23 = $207;
   $208 = $23;
   $22 = $208;
   $209 = $22;
   $210 = (($209) + 8|0);
   $211 = HEAP32[$210>>2]|0;
   $218 = $211;
  } else {
   $29 = $199;
   $212 = $29;
   $28 = $212;
   $213 = $28;
   $27 = $213;
   $214 = $27;
   $215 = (($214) + 1|0);
   $26 = $215;
   $216 = $26;
   $25 = $216;
   $217 = $25;
   $218 = $217;
  }
  $21 = $218;
  $219 = $21;
  $220 = $80;
  $48 = $220;
  $221 = $48;
  $47 = $221;
  $222 = $47;
  $46 = $222;
  $223 = $46;
  $45 = $223;
  $224 = $45;
  $44 = $224;
  $225 = $44;
  $226 = HEAP8[$225>>0]|0;
  $227 = $226&255;
  $228 = $227 & 1;
  $229 = ($228|0)!=(0);
  if ($229) {
   $38 = $222;
   $230 = $38;
   $37 = $230;
   $231 = $37;
   $36 = $231;
   $232 = $36;
   $233 = (($232) + 8|0);
   $234 = HEAP32[$233>>2]|0;
   $241 = $234;
  } else {
   $43 = $222;
   $235 = $43;
   $42 = $235;
   $236 = $42;
   $41 = $236;
   $237 = $41;
   $238 = (($237) + 1|0);
   $40 = $238;
   $239 = $40;
   $39 = $239;
   $240 = $39;
   $241 = $240;
  }
  $35 = $241;
  $242 = $35;
  $55 = $__lhs_sz$i$i$i$i;
  $56 = $__rhs_sz$i$i$i$i;
  $243 = $55;
  $244 = $56;
  ;HEAP8[$54+0>>0]=HEAP8[$57+0>>0]|0;
  $52 = $243;
  $53 = $244;
  $245 = $53;
  $246 = $52;
  $49 = $54;
  $50 = $245;
  $51 = $246;
  $247 = $50;
  $248 = HEAP32[$247>>2]|0;
  $249 = $51;
  $250 = HEAP32[$249>>2]|0;
  $251 = ($248>>>0)<($250>>>0);
  if ($251) {
   $252 = $53;
   $255 = $252;
  } else {
   $253 = $52;
   $255 = $253;
  }
  $254 = HEAP32[$255>>2]|0;
  __THREW__ = 0;
  $256 = (invoke_iiii(428,($219|0),($242|0),($254|0))|0);
  $257 = __THREW__; __THREW__ = 0;
  $258 = $257&1;
  if ($258) {
   $262 = ___cxa_find_matching_catch()|0;
   $263 = tempRet0;
   $81 = $262;
   $82 = $263;
   $264 = $81;
   ___cxa_call_unexpected(($264|0));
   // unreachable;
  }
  $__result$i$i$i$i = $256;
  $259 = $__result$i$i$i$i;
  $260 = ($259|0)!=(0);
  do {
   if ($260) {
    $261 = $__result$i$i$i$i;
    $78 = $261;
   } else {
    $265 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
    $266 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
    $267 = ($265>>>0)<($266>>>0);
    if ($267) {
     $78 = -1;
     break;
    }
    $268 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
    $269 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
    $270 = ($268>>>0)>($269>>>0);
    if ($270) {
     $78 = 1;
     break;
    } else {
     $78 = 0;
     break;
    }
   }
  } while(0);
  $271 = $78;
  $272 = ($271|0)<(0);
  if (!($272)) {
   ;HEAP32[$agg$result+0>>2]=HEAP32[$__p+0>>2]|0;
   STACKTOP = sp;return;
  }
 }
 $98 = $108;
 $273 = $98;
 $97 = $273;
 $274 = $97;
 $275 = (($274) + 4|0);
 $96 = $275;
 $276 = $96;
 $95 = $276;
 $277 = $95;
 $94 = $277;
 $278 = $94;
 $93 = $278;
 $279 = $93;
 $91 = $agg$result;
 $92 = $279;
 $280 = $91;
 $281 = $92;
 HEAP32[$280>>2] = $281;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__lhs_sz$i$i$i$i = 0, $__p = 0, $__result$i$i$i$i = 0, $__rhs_sz$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $54 = sp;
 $57 = sp + 444|0;
 $__lhs_sz$i$i$i$i = sp + 320|0;
 $__rhs_sz$i$i$i$i = sp + 324|0;
 $__p = sp + 216|0;
 $107 = sp + 224|0;
 $105 = $this;
 $106 = $__v;
 $108 = $105;
 $109 = $106;
 $104 = $108;
 $110 = $104;
 $103 = $110;
 $111 = $103;
 $112 = (($111) + 4|0);
 $102 = $112;
 $113 = $102;
 $101 = $113;
 $114 = $101;
 $100 = $114;
 $115 = $100;
 $99 = $115;
 $116 = $99;
 $117 = HEAP32[$116>>2]|0;
 $20 = $108;
 $118 = $20;
 $119 = (($118) + 4|0);
 $19 = $119;
 $120 = $19;
 $18 = $120;
 $121 = $18;
 $17 = $121;
 $122 = $17;
 $16 = $122;
 $123 = $16;
 __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE13__lower_boundIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_SK_SK_($__p,$108,$109,$117,$123);
 $15 = $108;
 $124 = $15;
 $14 = $124;
 $125 = $14;
 $126 = (($125) + 4|0);
 $13 = $126;
 $127 = $13;
 $12 = $127;
 $128 = $12;
 $11 = $128;
 $129 = $11;
 $10 = $129;
 $130 = $10;
 $8 = $107;
 $9 = $130;
 $131 = $8;
 $132 = $9;
 HEAP32[$131>>2] = $132;
 $2 = $__p;
 $3 = $107;
 $133 = $2;
 $134 = $3;
 $0 = $133;
 $1 = $134;
 $135 = $0;
 $136 = HEAP32[$135>>2]|0;
 $137 = $1;
 $138 = HEAP32[$137>>2]|0;
 $139 = ($136|0)==($138|0);
 $140 = $139 ^ 1;
 if ($140) {
  $6 = $108;
  $141 = $6;
  $142 = (($141) + 8|0);
  $5 = $142;
  $143 = $5;
  $4 = $143;
  $144 = $4;
  $145 = $106;
  $7 = $__p;
  $146 = $7;
  $147 = HEAP32[$146>>2]|0;
  $148 = (($147) + 16|0);
  $88 = $144;
  $89 = $145;
  $90 = $148;
  $149 = $88;
  $150 = $89;
  $151 = $90;
  $85 = $149;
  $86 = $150;
  $87 = $151;
  $152 = $86;
  $153 = $87;
  $83 = $152;
  $84 = $153;
  $154 = $83;
  $155 = $84;
  $79 = $154;
  $80 = $155;
  $156 = $79;
  $77 = $156;
  $157 = $77;
  $76 = $157;
  $158 = $76;
  $75 = $158;
  $159 = $75;
  $74 = $159;
  $160 = $74;
  $161 = HEAP8[$160>>0]|0;
  $162 = $161&255;
  $163 = $162 & 1;
  $164 = ($163|0)!=(0);
  if ($164) {
   $70 = $157;
   $165 = $70;
   $69 = $165;
   $166 = $69;
   $68 = $166;
   $167 = $68;
   $168 = (($167) + 4|0);
   $169 = HEAP32[$168>>2]|0;
   $176 = $169;
  } else {
   $73 = $157;
   $170 = $73;
   $72 = $170;
   $171 = $72;
   $71 = $171;
   $172 = $71;
   $173 = HEAP8[$172>>0]|0;
   $174 = $173&255;
   $175 = $174 >> 1;
   $176 = $175;
  }
  HEAP32[$__lhs_sz$i$i$i$i>>2] = $176;
  $177 = $80;
  $67 = $177;
  $178 = $67;
  $66 = $178;
  $179 = $66;
  $65 = $179;
  $180 = $65;
  $64 = $180;
  $181 = $64;
  $182 = HEAP8[$181>>0]|0;
  $183 = $182&255;
  $184 = $183 & 1;
  $185 = ($184|0)!=(0);
  if ($185) {
   $60 = $178;
   $186 = $60;
   $59 = $186;
   $187 = $59;
   $58 = $187;
   $188 = $58;
   $189 = (($188) + 4|0);
   $190 = HEAP32[$189>>2]|0;
   $197 = $190;
  } else {
   $63 = $178;
   $191 = $63;
   $62 = $191;
   $192 = $62;
   $61 = $192;
   $193 = $61;
   $194 = HEAP8[$193>>0]|0;
   $195 = $194&255;
   $196 = $195 >> 1;
   $197 = $196;
  }
  HEAP32[$__rhs_sz$i$i$i$i>>2] = $197;
  $34 = $156;
  $198 = $34;
  $33 = $198;
  $199 = $33;
  $32 = $199;
  $200 = $32;
  $31 = $200;
  $201 = $31;
  $30 = $201;
  $202 = $30;
  $203 = HEAP8[$202>>0]|0;
  $204 = $203&255;
  $205 = $204 & 1;
  $206 = ($205|0)!=(0);
  if ($206) {
   $24 = $199;
   $207 = $24;
   $23 = $207;
   $208 = $23;
   $22 = $208;
   $209 = $22;
   $210 = (($209) + 8|0);
   $211 = HEAP32[$210>>2]|0;
   $218 = $211;
  } else {
   $29 = $199;
   $212 = $29;
   $28 = $212;
   $213 = $28;
   $27 = $213;
   $214 = $27;
   $215 = (($214) + 1|0);
   $26 = $215;
   $216 = $26;
   $25 = $216;
   $217 = $25;
   $218 = $217;
  }
  $21 = $218;
  $219 = $21;
  $220 = $80;
  $48 = $220;
  $221 = $48;
  $47 = $221;
  $222 = $47;
  $46 = $222;
  $223 = $46;
  $45 = $223;
  $224 = $45;
  $44 = $224;
  $225 = $44;
  $226 = HEAP8[$225>>0]|0;
  $227 = $226&255;
  $228 = $227 & 1;
  $229 = ($228|0)!=(0);
  if ($229) {
   $38 = $222;
   $230 = $38;
   $37 = $230;
   $231 = $37;
   $36 = $231;
   $232 = $36;
   $233 = (($232) + 8|0);
   $234 = HEAP32[$233>>2]|0;
   $241 = $234;
  } else {
   $43 = $222;
   $235 = $43;
   $42 = $235;
   $236 = $42;
   $41 = $236;
   $237 = $41;
   $238 = (($237) + 1|0);
   $40 = $238;
   $239 = $40;
   $39 = $239;
   $240 = $39;
   $241 = $240;
  }
  $35 = $241;
  $242 = $35;
  $55 = $__lhs_sz$i$i$i$i;
  $56 = $__rhs_sz$i$i$i$i;
  $243 = $55;
  $244 = $56;
  ;HEAP8[$54+0>>0]=HEAP8[$57+0>>0]|0;
  $52 = $243;
  $53 = $244;
  $245 = $53;
  $246 = $52;
  $49 = $54;
  $50 = $245;
  $51 = $246;
  $247 = $50;
  $248 = HEAP32[$247>>2]|0;
  $249 = $51;
  $250 = HEAP32[$249>>2]|0;
  $251 = ($248>>>0)<($250>>>0);
  if ($251) {
   $252 = $53;
   $255 = $252;
  } else {
   $253 = $52;
   $255 = $253;
  }
  $254 = HEAP32[$255>>2]|0;
  __THREW__ = 0;
  $256 = (invoke_iiii(428,($219|0),($242|0),($254|0))|0);
  $257 = __THREW__; __THREW__ = 0;
  $258 = $257&1;
  if ($258) {
   $262 = ___cxa_find_matching_catch()|0;
   $263 = tempRet0;
   $81 = $262;
   $82 = $263;
   $264 = $81;
   ___cxa_call_unexpected(($264|0));
   // unreachable;
  }
  $__result$i$i$i$i = $256;
  $259 = $__result$i$i$i$i;
  $260 = ($259|0)!=(0);
  do {
   if ($260) {
    $261 = $__result$i$i$i$i;
    $78 = $261;
   } else {
    $265 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
    $266 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
    $267 = ($265>>>0)<($266>>>0);
    if ($267) {
     $78 = -1;
     break;
    }
    $268 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
    $269 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
    $270 = ($268>>>0)>($269>>>0);
    if ($270) {
     $78 = 1;
     break;
    } else {
     $78 = 0;
     break;
    }
   }
  } while(0);
  $271 = $78;
  $272 = ($271|0)<(0);
  if (!($272)) {
   ;HEAP32[$agg$result+0>>2]=HEAP32[$__p+0>>2]|0;
   STACKTOP = sp;return;
  }
 }
 $98 = $108;
 $273 = $98;
 $97 = $273;
 $274 = $97;
 $275 = (($274) + 4|0);
 $96 = $275;
 $276 = $96;
 $95 = $276;
 $277 = $95;
 $94 = $277;
 $278 = $94;
 $93 = $278;
 $279 = $93;
 $91 = $agg$result;
 $92 = $279;
 $280 = $91;
 $281 = $92;
 HEAP32[$280>>2] = $281;
 STACKTOP = sp;return;
}
function __ZN12CmdArgReader10convertToTIiEEbRKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERT_($element,$val) {
 $element = $element|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i$i = 0, $__i$i$i$i$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $ios = 0, $ret_val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ios = sp + 52|0;
 $27 = $element;
 $28 = $val;
 $32 = $27;
 $22 = $ios;
 $23 = $32;
 $24 = 8;
 $33 = $22;
 $34 = (($33) + 60|0);
 $21 = $34;
 $35 = $21;
 $20 = $35;
 $36 = $20;
 $37 = (8392 + 8|0);
 HEAP32[$36>>2] = $37;
 $38 = (7992 + 8|0);
 HEAP32[$35>>2] = $38;
 $39 = (4176 + 12|0);
 HEAP32[$33>>2] = $39;
 $40 = (($33) + 60|0);
 $41 = (4176 + 32|0);
 HEAP32[$40>>2] = $41;
 $42 = (($33) + 8|0);
 $17 = $33;
 $43 = (4216 + 4|0);
 $18 = $43;
 $19 = $42;
 $44 = $17;
 $45 = $18;
 $46 = HEAP32[$45>>2]|0;
 HEAP32[$44>>2] = $46;
 $47 = (($45) + 4|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP32[$44>>2]|0;
 $50 = (($49) + -12|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($44) + ($51)|0);
 HEAP32[$52>>2] = $48;
 $53 = (($44) + 4|0);
 HEAP32[$53>>2] = 0;
 $54 = HEAP32[$44>>2]|0;
 $55 = (($54) + -12|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($44) + ($56)|0);
 $58 = $19;
 $15 = $57;
 $16 = $58;
 $59 = $15;
 $60 = $16;
 __THREW__ = 0;
 invoke_vii(418,($59|0),($60|0));
 $61 = __THREW__; __THREW__ = 0;
 $62 = $61&1;
 do {
  if ($62) {
   $108 = ___cxa_find_matching_catch()|0;
   $109 = tempRet0;
   $25 = $108;
   $26 = $109;
  } else {
   $63 = (($59) + 72|0);
   HEAP32[$63>>2] = 0;
   $64 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $65 = (($59) + 76|0);
   HEAP32[$65>>2] = $64;
   $66 = (4176 + 12|0);
   HEAP32[$33>>2] = $66;
   $67 = (($33) + 60|0);
   $68 = (4176 + 32|0);
   HEAP32[$67>>2] = $68;
   $69 = (($33) + 8|0);
   $70 = $23;
   $71 = $24;
   $72 = $71 | 8;
   $10 = $69;
   $11 = $70;
   $12 = $72;
   $73 = $10;
   __THREW__ = 0;
   invoke_vi(419,($73|0));
   $74 = __THREW__; __THREW__ = 0;
   $75 = $74&1;
   do {
    if ($75) {
     $110 = ___cxa_find_matching_catch()|0;
     $111 = tempRet0;
     $eh$lpad$body$i$index2Z2D = $111;$eh$lpad$body$i$indexZ2D = $110;
    } else {
     $76 = (2504 + 8|0);
     HEAP32[$73>>2] = $76;
     $77 = (($73) + 32|0);
     $9 = $77;
     $78 = $9;
     $8 = $78;
     $79 = $8;
     $7 = $79;
     $80 = $7;
     $6 = $80;
     $81 = $6;
     $5 = $81;
     $4 = $79;
     $82 = $4;
     $3 = $82;
     $83 = $3;
     $2 = $83;
     $84 = $2;
     $__a$i$i$i$i$i = $84;
     $__i$i$i$i$i$i = 0;
     while(1) {
      $85 = $__i$i$i$i$i$i;
      $86 = ($85>>>0)<(3);
      if (!($86)) {
       break;
      }
      $87 = $__i$i$i$i$i$i;
      $88 = $__a$i$i$i$i$i;
      $89 = (($88) + ($87<<2)|0);
      HEAP32[$89>>2] = 0;
      $90 = $__i$i$i$i$i$i;
      $91 = (($90) + 1)|0;
      $__i$i$i$i$i$i = $91;
     }
     $92 = (($73) + 44|0);
     HEAP32[$92>>2] = 0;
     $93 = (($73) + 48|0);
     $94 = $12;
     HEAP32[$93>>2] = $94;
     $95 = $11;
     __THREW__ = 0;
     invoke_vii(420,($73|0),($95|0));
     $96 = __THREW__; __THREW__ = 0;
     $97 = $96&1;
     if ($97) {
      $98 = ___cxa_find_matching_catch()|0;
      $99 = tempRet0;
      $13 = $98;
      $14 = $99;
      __THREW__ = 0;
      invoke_vi(403,($77|0));
      $100 = __THREW__; __THREW__ = 0;
      $101 = $100&1;
      if ($101) {
       $106 = ___cxa_find_matching_catch(0|0)|0;
       $107 = tempRet0;
       ___clang_call_terminate($106);
       // unreachable;
      }
      __THREW__ = 0;
      invoke_vi(83,($73|0));
      $102 = __THREW__; __THREW__ = 0;
      $103 = $102&1;
      if ($103) {
       $106 = ___cxa_find_matching_catch(0|0)|0;
       $107 = tempRet0;
       ___clang_call_terminate($106);
       // unreachable;
      } else {
       $104 = $13;
       $105 = $14;
       $eh$lpad$body$i$index2Z2D = $105;$eh$lpad$body$i$indexZ2D = $104;
       break;
      }
     }
     $121 = $28;
     __THREW__ = 0;
     (invoke_iii(460,($ios|0),($121|0))|0);
     $122 = __THREW__; __THREW__ = 0;
     $123 = $122&1;
     if ($123) {
      $134 = ___cxa_find_matching_catch()|0;
      $135 = tempRet0;
      $29 = $134;
      $30 = $135;
      __THREW__ = 0;
      invoke_vi(41,($ios|0));
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       $142 = ___cxa_find_matching_catch(0|0)|0;
       $143 = tempRet0;
       ___clang_call_terminate($142);
       // unreachable;
      }
      $140 = $29;
      $141 = $30;
      ___resumeException($140|0);
      // unreachable;
     }
     $ret_val = 0;
     $124 = HEAP32[$ios>>2]|0;
     $125 = (($124) + -12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($ios) + ($126)|0);
     $1 = $127;
     $128 = $1;
     $0 = $128;
     $129 = $0;
     $130 = (($129) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = $131 & 2;
     $133 = ($132|0)!=(0);
     if (!($133)) {
      $138 = $ret_val;
      $139 = $138&1;
      $31 = 1;
      __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ios);
      STACKTOP = sp;return ($139|0);
     }
     $ret_val = 1;
     $138 = $ret_val;
     $139 = $138&1;
     $31 = 1;
     __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ios);
     STACKTOP = sp;return ($139|0);
    }
   } while(0);
   $25 = $eh$lpad$body$i$indexZ2D;
   $26 = $eh$lpad$body$i$index2Z2D;
   __THREW__ = 0;
   $112 = __THREW__; __THREW__ = 0;
   $113 = $112&1;
   if ($113) {
    $119 = ___cxa_find_matching_catch(0|0)|0;
    $120 = tempRet0;
    ___clang_call_terminate($119);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $114 = (($33) + 60|0);
 __THREW__ = 0;
 invoke_vi(415,($114|0));
 $115 = __THREW__; __THREW__ = 0;
 $116 = $115&1;
 if ($116) {
  $119 = ___cxa_find_matching_catch(0|0)|0;
  $120 = tempRet0;
  ___clang_call_terminate($119);
  // unreachable;
 } else {
  $117 = $25;
  $118 = $26;
  ___resumeException($117|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEENS_4lessIS6_EENS4_INS7_IKS6_SC_EEEEEixERSF_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__child = 0, $__h = 0, $__parent = 0, $__r = 0, $__t$i = 0, $__t$i$i = 0, $__tmp$i$i = 0, $__tmp$i$i10 = 0;
 var $__tmp$i$i18 = 0, $__tmp$i$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 832|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = sp + 32|0;
 $10 = sp + 818|0;
 $13 = sp + 64|0;
 $16 = sp + 815|0;
 $41 = sp;
 $44 = sp + 812|0;
 $47 = sp + 40|0;
 $50 = sp + 819|0;
 $83 = sp + 24|0;
 $86 = sp + 817|0;
 $89 = sp + 48|0;
 $92 = sp + 814|0;
 $124 = sp + 432|0;
 $125 = sp + 8|0;
 $128 = sp + 576|0;
 $129 = sp + 584|0;
 $130 = sp + 72|0;
 $133 = sp + 608|0;
 $134 = sp + 80|0;
 $145 = sp + 56|0;
 $148 = sp + 816|0;
 $151 = sp + 16|0;
 $154 = sp + 813|0;
 $175 = sp + 684|0;
 $__parent = sp + 504|0;
 $178 = sp + 424|0;
 $__h = sp + 776|0;
 $179 = sp + 248|0;
 $180 = sp + 216|0;
 $176 = $this;
 $177 = $__k;
 $183 = $176;
 $184 = $177;
 $185 = (__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEENS_4lessIS6_EENS4_INS7_IKS6_SC_EEEEE16__find_equal_keyERPNS_16__tree_node_baseISB_EERSF_($183,$__parent,$184)|0);
 $__child = $185;
 $186 = $__child;
 $187 = HEAP32[$186>>2]|0;
 $__r = $187;
 $188 = $__child;
 $189 = HEAP32[$188>>2]|0;
 $173 = $175;
 $174 = -1;
 $190 = $173;
 HEAP32[$190>>2] = 0;
 $191 = HEAP32[$175>>2]|0;
 HEAP32[$178>>2] = $191;
 $172 = $178;
 $192 = ($189|0)==(0|0);
 if (!($192)) {
  $387 = $__r;
  $388 = (($387) + 16|0);
  $389 = (($388) + 12|0);
  STACKTOP = sp;return ($389|0);
 }
 $193 = $177;
 __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEENS_4lessIS6_EENS4_INS7_IKS6_SC_EEEEE25__construct_node_with_keyERSF_($180,$183,$193);
 $137 = $180;
 $194 = $137;
 $135 = $179;
 $136 = $194;
 $195 = $135;
 $196 = $136;
 HEAP32[$195>>2] = $196;
 ;HEAP8[$134+0>>0]=HEAP8[$179+0>>0]|0;HEAP8[$134+1>>0]=HEAP8[$179+1>>0]|0;HEAP8[$134+2>>0]=HEAP8[$179+2>>0]|0;HEAP8[$134+3>>0]=HEAP8[$179+3>>0]|0;
 $132 = $__h;
 $197 = $132;
 $131 = $134;
 $198 = $131;
 $199 = HEAP32[$198>>2]|0;
 $114 = $199;
 $200 = $114;
 $113 = $200;
 $201 = $113;
 $112 = $201;
 $202 = $112;
 $203 = HEAP32[$202>>2]|0;
 $__t$i$i = $203;
 $111 = $200;
 $204 = $111;
 $110 = $204;
 $205 = $110;
 HEAP32[$205>>2] = 0;
 $206 = $__t$i$i;
 $115 = $134;
 $207 = $115;
 $208 = HEAP32[$207>>2]|0;
 $118 = $208;
 $209 = $118;
 $117 = $209;
 $210 = $117;
 $116 = $210;
 $211 = $116;
 $212 = (($211) + 4|0);
 $119 = $212;
 $213 = $119;
 ;HEAP32[$133+0>>2]=HEAP32[$213+0>>2]|0;HEAP32[$133+4>>2]=HEAP32[$213+4>>2]|0;
 ;HEAP8[$130+0>>0]=HEAP8[$133+0>>0]|0;HEAP8[$130+1>>0]=HEAP8[$133+1>>0]|0;HEAP8[$130+2>>0]=HEAP8[$133+2>>0]|0;HEAP8[$130+3>>0]=HEAP8[$133+3>>0]|0;HEAP8[$130+4>>0]=HEAP8[$133+4>>0]|0;HEAP8[$130+5>>0]=HEAP8[$133+5>>0]|0;HEAP8[$130+6>>0]=HEAP8[$133+6>>0]|0;HEAP8[$130+7>>0]=HEAP8[$133+7>>0]|0;
 $127 = $197;
 HEAP32[$128>>2] = $206;
 $214 = $127;
 $126 = $128;
 $215 = $126;
 $216 = HEAP32[$215>>2]|0;
 $120 = $130;
 $217 = $120;
 ;HEAP32[$129+0>>2]=HEAP32[$217+0>>2]|0;HEAP32[$129+4>>2]=HEAP32[$217+4>>2]|0;
 ;HEAP8[$125+0>>0]=HEAP8[$129+0>>0]|0;HEAP8[$125+1>>0]=HEAP8[$129+1>>0]|0;HEAP8[$125+2>>0]=HEAP8[$129+2>>0]|0;HEAP8[$125+3>>0]=HEAP8[$129+3>>0]|0;HEAP8[$125+4>>0]=HEAP8[$129+4>>0]|0;HEAP8[$125+5>>0]=HEAP8[$129+5>>0]|0;HEAP8[$125+6>>0]=HEAP8[$129+6>>0]|0;HEAP8[$125+7>>0]=HEAP8[$129+7>>0]|0;
 $123 = $214;
 HEAP32[$124>>2] = $216;
 $218 = $123;
 $122 = $124;
 $219 = $122;
 $220 = HEAP32[$219>>2]|0;
 HEAP32[$218>>2] = $220;
 $221 = (($218) + 4|0);
 $121 = $125;
 $222 = $121;
 ;HEAP32[$221+0>>2]=HEAP32[$222+0>>2]|0;HEAP32[$221+4>>2]=HEAP32[$222+4>>2]|0;
 $109 = $180;
 $223 = $109;
 $107 = $223;
 $108 = 0;
 $224 = $107;
 $106 = $224;
 $225 = $106;
 $105 = $225;
 $226 = $105;
 $227 = HEAP32[$226>>2]|0;
 $__tmp$i$i2 = $227;
 $228 = $108;
 $79 = $224;
 $229 = $79;
 $78 = $229;
 $230 = $78;
 HEAP32[$230>>2] = $228;
 $231 = $__tmp$i$i2;
 $232 = ($231|0)!=(0|0);
 if ($232) {
  $77 = $224;
  $233 = $77;
  $76 = $233;
  $234 = $76;
  $235 = (($234) + 4|0);
  $236 = $__tmp$i$i2;
  $101 = $235;
  $102 = $236;
  $237 = $101;
  $238 = (($237) + 5|0);
  $239 = HEAP8[$238>>0]|0;
  $240 = $239&1;
  if ($240) {
   $241 = HEAP32[$237>>2]|0;
   $242 = $102;
   $243 = (($242) + 16|0);
   $244 = (($243) + 12|0);
   $100 = $244;
   $245 = $100;
   $90 = $241;
   $91 = $245;
   $246 = $90;
   $247 = $91;
   ;HEAP8[$89+0>>0]=HEAP8[$92+0>>0]|0;
   $87 = $246;
   $88 = $247;
  }
  $251 = (($237) + 4|0);
  $252 = HEAP8[$251>>0]|0;
  $253 = $252&1;
  do {
   if ($253) {
    $254 = HEAP32[$237>>2]|0;
    $255 = $102;
    $256 = (($255) + 16|0);
    $80 = $256;
    $257 = $80;
    $84 = $254;
    $85 = $257;
    $258 = $84;
    $259 = $85;
    ;HEAP8[$83+0>>0]=HEAP8[$86+0>>0]|0;
    $81 = $258;
    $82 = $259;
    $260 = $82;
    __THREW__ = 0;
    invoke_vi(403,($260|0));
    $261 = __THREW__; __THREW__ = 0;
    $262 = $261&1;
    if ($262) {
     $248 = ___cxa_find_matching_catch()|0;
     $249 = tempRet0;
     $103 = $248;
     $104 = $249;
     $250 = $103;
     ___cxa_call_unexpected(($250|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $263 = $102;
  $264 = ($263|0)!=(0|0);
  if ($264) {
   $265 = HEAP32[$237>>2]|0;
   $266 = $102;
   $97 = $265;
   $98 = $266;
   $99 = 1;
   $267 = $97;
   $268 = $98;
   $269 = $99;
   $94 = $267;
   $95 = $268;
   $96 = $269;
   $270 = $95;
   $93 = $270;
   $271 = $93;
   __ZdlPv($271);
  }
 }
 $272 = HEAP32[$__parent>>2]|0;
 $273 = $__child;
 $75 = $__h;
 $274 = $75;
 $74 = $274;
 $275 = $74;
 $73 = $275;
 $276 = $73;
 $277 = HEAP32[$276>>2]|0;
 __THREW__ = 0;
 invoke_viiii(461,($183|0),($272|0),($273|0),($277|0));
 $278 = __THREW__; __THREW__ = 0;
 $279 = $278&1;
 if (!($279)) {
  $72 = $__h;
  $280 = $72;
  $71 = $280;
  $281 = $71;
  $70 = $281;
  $282 = $70;
  $283 = HEAP32[$282>>2]|0;
  $__t$i = $283;
  $69 = $280;
  $284 = $69;
  $68 = $284;
  $285 = $68;
  HEAP32[$285>>2] = 0;
  $286 = $__t$i;
  $__r = $286;
  $67 = $__h;
  $287 = $67;
  $65 = $287;
  $66 = 0;
  $288 = $65;
  $64 = $288;
  $289 = $64;
  $63 = $289;
  $290 = $63;
  $291 = HEAP32[$290>>2]|0;
  $__tmp$i$i10 = $291;
  $292 = $66;
  $37 = $288;
  $293 = $37;
  $36 = $293;
  $294 = $36;
  HEAP32[$294>>2] = $292;
  $295 = $__tmp$i$i10;
  $296 = ($295|0)!=(0|0);
  if ($296) {
   $35 = $288;
   $297 = $35;
   $34 = $297;
   $298 = $34;
   $299 = (($298) + 4|0);
   $300 = $__tmp$i$i10;
   $59 = $299;
   $60 = $300;
   $301 = $59;
   $302 = (($301) + 5|0);
   $303 = HEAP8[$302>>0]|0;
   $304 = $303&1;
   if ($304) {
    $305 = HEAP32[$301>>2]|0;
    $306 = $60;
    $307 = (($306) + 16|0);
    $308 = (($307) + 12|0);
    $58 = $308;
    $309 = $58;
    $48 = $305;
    $49 = $309;
    $310 = $48;
    $311 = $49;
    ;HEAP8[$47+0>>0]=HEAP8[$50+0>>0]|0;
    $45 = $310;
    $46 = $311;
   }
   $315 = (($301) + 4|0);
   $316 = HEAP8[$315>>0]|0;
   $317 = $316&1;
   do {
    if ($317) {
     $318 = HEAP32[$301>>2]|0;
     $319 = $60;
     $320 = (($319) + 16|0);
     $38 = $320;
     $321 = $38;
     $42 = $318;
     $43 = $321;
     $322 = $42;
     $323 = $43;
     ;HEAP8[$41+0>>0]=HEAP8[$44+0>>0]|0;
     $39 = $322;
     $40 = $323;
     $324 = $40;
     __THREW__ = 0;
     invoke_vi(403,($324|0));
     $325 = __THREW__; __THREW__ = 0;
     $326 = $325&1;
     if ($326) {
      $312 = ___cxa_find_matching_catch()|0;
      $313 = tempRet0;
      $61 = $312;
      $62 = $313;
      $314 = $61;
      ___cxa_call_unexpected(($314|0));
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   $327 = $60;
   $328 = ($327|0)!=(0|0);
   if ($328) {
    $329 = HEAP32[$301>>2]|0;
    $330 = $60;
    $55 = $329;
    $56 = $330;
    $57 = 1;
    $331 = $55;
    $332 = $56;
    $333 = $57;
    $52 = $331;
    $53 = $332;
    $54 = $333;
    $334 = $53;
    $51 = $334;
    $335 = $51;
    __ZdlPv($335);
   }
  }
  $387 = $__r;
  $388 = (($387) + 16|0);
  $389 = (($388) + 12|0);
  STACKTOP = sp;return ($389|0);
 }
 $336 = ___cxa_find_matching_catch()|0;
 $337 = tempRet0;
 $181 = $336;
 $182 = $337;
 $171 = $__h;
 $338 = $171;
 $169 = $338;
 $170 = 0;
 $339 = $169;
 $168 = $339;
 $340 = $168;
 $167 = $340;
 $341 = $167;
 $342 = HEAP32[$341>>2]|0;
 $__tmp$i$i = $342;
 $343 = $170;
 $141 = $339;
 $344 = $141;
 $140 = $344;
 $345 = $140;
 HEAP32[$345>>2] = $343;
 $346 = $__tmp$i$i;
 $347 = ($346|0)!=(0|0);
 if ($347) {
  $139 = $339;
  $348 = $139;
  $138 = $348;
  $349 = $138;
  $350 = (($349) + 4|0);
  $351 = $__tmp$i$i;
  $163 = $350;
  $164 = $351;
  $352 = $163;
  $353 = (($352) + 5|0);
  $354 = HEAP8[$353>>0]|0;
  $355 = $354&1;
  if ($355) {
   $356 = HEAP32[$352>>2]|0;
   $357 = $164;
   $358 = (($357) + 16|0);
   $359 = (($358) + 12|0);
   $162 = $359;
   $360 = $162;
   $152 = $356;
   $153 = $360;
   $361 = $152;
   $362 = $153;
   ;HEAP8[$151+0>>0]=HEAP8[$154+0>>0]|0;
   $149 = $361;
   $150 = $362;
  }
  $366 = (($352) + 4|0);
  $367 = HEAP8[$366>>0]|0;
  $368 = $367&1;
  do {
   if ($368) {
    $369 = HEAP32[$352>>2]|0;
    $370 = $164;
    $371 = (($370) + 16|0);
    $142 = $371;
    $372 = $142;
    $146 = $369;
    $147 = $372;
    $373 = $146;
    $374 = $147;
    ;HEAP8[$145+0>>0]=HEAP8[$148+0>>0]|0;
    $143 = $373;
    $144 = $374;
    $375 = $144;
    __THREW__ = 0;
    invoke_vi(403,($375|0));
    $376 = __THREW__; __THREW__ = 0;
    $377 = $376&1;
    if ($377) {
     $363 = ___cxa_find_matching_catch(0|0)|0;
     $364 = tempRet0;
     $165 = $363;
     $166 = $364;
     $365 = $165;
     ___cxa_call_unexpected(($365|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $378 = $164;
  $379 = ($378|0)!=(0|0);
  if ($379) {
   $380 = HEAP32[$352>>2]|0;
   $381 = $164;
   $159 = $380;
   $160 = $381;
   $161 = 1;
   $382 = $159;
   $383 = $160;
   $384 = $161;
   $156 = $382;
   $157 = $383;
   $158 = $384;
   $385 = $157;
   $155 = $385;
   $386 = $155;
   __ZdlPv($386);
  }
 }
 $390 = $181;
 $391 = $182;
 ___resumeException($390|0);
 // unreachable;
 return 0|0;
}
function __ZN12CmdArgReader10convertToTINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEbRKS7_RT_($element,$val) {
 $element = $element|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $element;
 $1 = $val;
 $2 = $1;
 $3 = $0;
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($2,$3)|0);
 STACKTOP = sp;return 1;
}
function __ZNKSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEEEENS_19__map_value_compareIS7_SE_NS_4lessIS7_EELb1EEENS5_ISE_EEE13__lower_boundIS7_EENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_SC_EEiEERKT_SP_SP_($agg$result,$this,$__v,$__root,$__result) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 $__root = $__root|0;
 $__result = $__result|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i$i$i$i = 0, $__result$i$i$i$i = 0, $__rhs_sz$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $37 = sp;
 $40 = sp + 344|0;
 $__lhs_sz$i$i$i$i = sp + 252|0;
 $__rhs_sz$i$i$i$i = sp + 256|0;
 $78 = sp + 308|0;
 $83 = sp + 320|0;
 $79 = $this;
 $80 = $__v;
 $81 = $__root;
 $82 = $__result;
 $84 = $79;
 while(1) {
  $85 = $81;
  $76 = $78;
  $77 = -1;
  $86 = $76;
  HEAP32[$86>>2] = 0;
  $87 = HEAP32[$78>>2]|0;
  HEAP32[$83>>2] = $87;
  $3 = $83;
  $88 = ($85|0)!=(0|0);
  if (!($88)) {
   label = 31;
   break;
  }
  $2 = $84;
  $89 = $2;
  $90 = (($89) + 8|0);
  $1 = $90;
  $91 = $1;
  $0 = $91;
  $92 = $0;
  $93 = $81;
  $94 = (($93) + 16|0);
  $95 = $80;
  $71 = $92;
  $72 = $94;
  $73 = $95;
  $96 = $71;
  $97 = $72;
  $98 = $73;
  $68 = $96;
  $69 = $97;
  $70 = $98;
  $99 = $69;
  $100 = $70;
  $66 = $99;
  $67 = $100;
  $101 = $66;
  $102 = $67;
  $62 = $101;
  $63 = $102;
  $103 = $62;
  $60 = $103;
  $104 = $60;
  $59 = $104;
  $105 = $59;
  $58 = $105;
  $106 = $58;
  $57 = $106;
  $107 = $57;
  $108 = HEAP8[$107>>0]|0;
  $109 = $108&255;
  $110 = $109 & 1;
  $111 = ($110|0)!=(0);
  if ($111) {
   $53 = $104;
   $112 = $53;
   $52 = $112;
   $113 = $52;
   $51 = $113;
   $114 = $51;
   $115 = (($114) + 4|0);
   $116 = HEAP32[$115>>2]|0;
   $123 = $116;
  } else {
   $56 = $104;
   $117 = $56;
   $55 = $117;
   $118 = $55;
   $54 = $118;
   $119 = $54;
   $120 = HEAP8[$119>>0]|0;
   $121 = $120&255;
   $122 = $121 >> 1;
   $123 = $122;
  }
  HEAP32[$__lhs_sz$i$i$i$i>>2] = $123;
  $124 = $63;
  $50 = $124;
  $125 = $50;
  $49 = $125;
  $126 = $49;
  $48 = $126;
  $127 = $48;
  $47 = $127;
  $128 = $47;
  $129 = HEAP8[$128>>0]|0;
  $130 = $129&255;
  $131 = $130 & 1;
  $132 = ($131|0)!=(0);
  if ($132) {
   $43 = $125;
   $133 = $43;
   $42 = $133;
   $134 = $42;
   $41 = $134;
   $135 = $41;
   $136 = (($135) + 4|0);
   $137 = HEAP32[$136>>2]|0;
   $144 = $137;
  } else {
   $46 = $125;
   $138 = $46;
   $45 = $138;
   $139 = $45;
   $44 = $139;
   $140 = $44;
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = $142 >> 1;
   $144 = $143;
  }
  HEAP32[$__rhs_sz$i$i$i$i>>2] = $144;
  $17 = $103;
  $145 = $17;
  $16 = $145;
  $146 = $16;
  $15 = $146;
  $147 = $15;
  $14 = $147;
  $148 = $14;
  $13 = $148;
  $149 = $13;
  $150 = HEAP8[$149>>0]|0;
  $151 = $150&255;
  $152 = $151 & 1;
  $153 = ($152|0)!=(0);
  if ($153) {
   $7 = $146;
   $154 = $7;
   $6 = $154;
   $155 = $6;
   $5 = $155;
   $156 = $5;
   $157 = (($156) + 8|0);
   $158 = HEAP32[$157>>2]|0;
   $165 = $158;
  } else {
   $12 = $146;
   $159 = $12;
   $11 = $159;
   $160 = $11;
   $10 = $160;
   $161 = $10;
   $162 = (($161) + 1|0);
   $9 = $162;
   $163 = $9;
   $8 = $163;
   $164 = $8;
   $165 = $164;
  }
  $4 = $165;
  $166 = $4;
  $167 = $63;
  $31 = $167;
  $168 = $31;
  $30 = $168;
  $169 = $30;
  $29 = $169;
  $170 = $29;
  $28 = $170;
  $171 = $28;
  $27 = $171;
  $172 = $27;
  $173 = HEAP8[$172>>0]|0;
  $174 = $173&255;
  $175 = $174 & 1;
  $176 = ($175|0)!=(0);
  if ($176) {
   $21 = $169;
   $177 = $21;
   $20 = $177;
   $178 = $20;
   $19 = $178;
   $179 = $19;
   $180 = (($179) + 8|0);
   $181 = HEAP32[$180>>2]|0;
   $188 = $181;
  } else {
   $26 = $169;
   $182 = $26;
   $25 = $182;
   $183 = $25;
   $24 = $183;
   $184 = $24;
   $185 = (($184) + 1|0);
   $23 = $185;
   $186 = $23;
   $22 = $186;
   $187 = $22;
   $188 = $187;
  }
  $18 = $188;
  $189 = $18;
  $38 = $__lhs_sz$i$i$i$i;
  $39 = $__rhs_sz$i$i$i$i;
  $190 = $38;
  $191 = $39;
  ;HEAP8[$37+0>>0]=HEAP8[$40+0>>0]|0;
  $35 = $190;
  $36 = $191;
  $192 = $36;
  $193 = $35;
  $32 = $37;
  $33 = $192;
  $34 = $193;
  $194 = $33;
  $195 = HEAP32[$194>>2]|0;
  $196 = $34;
  $197 = HEAP32[$196>>2]|0;
  $198 = ($195>>>0)<($197>>>0);
  if ($198) {
   $199 = $36;
   $202 = $199;
  } else {
   $200 = $35;
   $202 = $200;
  }
  $201 = HEAP32[$202>>2]|0;
  __THREW__ = 0;
  $203 = (invoke_iiii(428,($166|0),($189|0),($201|0))|0);
  $204 = __THREW__; __THREW__ = 0;
  $205 = $204&1;
  if ($205) {
   label = 21;
   break;
  }
  $__result$i$i$i$i = $203;
  $206 = $__result$i$i$i$i;
  $207 = ($206|0)!=(0);
  do {
   if ($207) {
    $208 = $__result$i$i$i$i;
    $61 = $208;
   } else {
    $212 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
    $213 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
    $214 = ($212>>>0)<($213>>>0);
    if ($214) {
     $61 = -1;
     break;
    }
    $215 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
    $216 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
    $217 = ($215>>>0)>($216>>>0);
    if ($217) {
     $61 = 1;
     break;
    } else {
     $61 = 0;
     break;
    }
   }
  } while(0);
  $218 = $61;
  $219 = ($218|0)<(0);
  if ($219) {
   $223 = $81;
   $224 = (($223) + 4|0);
   $225 = HEAP32[$224>>2]|0;
   $81 = $225;
  } else {
   $220 = $81;
   $82 = $220;
   $221 = $81;
   $222 = HEAP32[$221>>2]|0;
   $81 = $222;
  }
 }
 if ((label|0) == 21) {
  $209 = ___cxa_find_matching_catch()|0;
  $210 = tempRet0;
  $64 = $209;
  $65 = $210;
  $211 = $64;
  ___cxa_call_unexpected(($211|0));
  // unreachable;
 }
 else if ((label|0) == 31) {
  $226 = $82;
  $74 = $agg$result;
  $75 = $226;
  $227 = $74;
  $228 = $75;
  HEAP32[$227>>2] = $228;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE13__lower_boundIS7_EENS_21__tree_const_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_SK_SK_($agg$result,$this,$__v,$__root,$__result) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 $__root = $__root|0;
 $__result = $__result|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i$i$i$i = 0, $__result$i$i$i$i = 0, $__rhs_sz$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $37 = sp;
 $40 = sp + 344|0;
 $__lhs_sz$i$i$i$i = sp + 252|0;
 $__rhs_sz$i$i$i$i = sp + 256|0;
 $78 = sp + 308|0;
 $83 = sp + 320|0;
 $79 = $this;
 $80 = $__v;
 $81 = $__root;
 $82 = $__result;
 $84 = $79;
 while(1) {
  $85 = $81;
  $76 = $78;
  $77 = -1;
  $86 = $76;
  HEAP32[$86>>2] = 0;
  $87 = HEAP32[$78>>2]|0;
  HEAP32[$83>>2] = $87;
  $3 = $83;
  $88 = ($85|0)!=(0|0);
  if (!($88)) {
   label = 31;
   break;
  }
  $2 = $84;
  $89 = $2;
  $90 = (($89) + 8|0);
  $1 = $90;
  $91 = $1;
  $0 = $91;
  $92 = $0;
  $93 = $81;
  $94 = (($93) + 16|0);
  $95 = $80;
  $71 = $92;
  $72 = $94;
  $73 = $95;
  $96 = $71;
  $97 = $72;
  $98 = $73;
  $68 = $96;
  $69 = $97;
  $70 = $98;
  $99 = $69;
  $100 = $70;
  $66 = $99;
  $67 = $100;
  $101 = $66;
  $102 = $67;
  $62 = $101;
  $63 = $102;
  $103 = $62;
  $60 = $103;
  $104 = $60;
  $59 = $104;
  $105 = $59;
  $58 = $105;
  $106 = $58;
  $57 = $106;
  $107 = $57;
  $108 = HEAP8[$107>>0]|0;
  $109 = $108&255;
  $110 = $109 & 1;
  $111 = ($110|0)!=(0);
  if ($111) {
   $53 = $104;
   $112 = $53;
   $52 = $112;
   $113 = $52;
   $51 = $113;
   $114 = $51;
   $115 = (($114) + 4|0);
   $116 = HEAP32[$115>>2]|0;
   $123 = $116;
  } else {
   $56 = $104;
   $117 = $56;
   $55 = $117;
   $118 = $55;
   $54 = $118;
   $119 = $54;
   $120 = HEAP8[$119>>0]|0;
   $121 = $120&255;
   $122 = $121 >> 1;
   $123 = $122;
  }
  HEAP32[$__lhs_sz$i$i$i$i>>2] = $123;
  $124 = $63;
  $50 = $124;
  $125 = $50;
  $49 = $125;
  $126 = $49;
  $48 = $126;
  $127 = $48;
  $47 = $127;
  $128 = $47;
  $129 = HEAP8[$128>>0]|0;
  $130 = $129&255;
  $131 = $130 & 1;
  $132 = ($131|0)!=(0);
  if ($132) {
   $43 = $125;
   $133 = $43;
   $42 = $133;
   $134 = $42;
   $41 = $134;
   $135 = $41;
   $136 = (($135) + 4|0);
   $137 = HEAP32[$136>>2]|0;
   $144 = $137;
  } else {
   $46 = $125;
   $138 = $46;
   $45 = $138;
   $139 = $45;
   $44 = $139;
   $140 = $44;
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = $142 >> 1;
   $144 = $143;
  }
  HEAP32[$__rhs_sz$i$i$i$i>>2] = $144;
  $17 = $103;
  $145 = $17;
  $16 = $145;
  $146 = $16;
  $15 = $146;
  $147 = $15;
  $14 = $147;
  $148 = $14;
  $13 = $148;
  $149 = $13;
  $150 = HEAP8[$149>>0]|0;
  $151 = $150&255;
  $152 = $151 & 1;
  $153 = ($152|0)!=(0);
  if ($153) {
   $7 = $146;
   $154 = $7;
   $6 = $154;
   $155 = $6;
   $5 = $155;
   $156 = $5;
   $157 = (($156) + 8|0);
   $158 = HEAP32[$157>>2]|0;
   $165 = $158;
  } else {
   $12 = $146;
   $159 = $12;
   $11 = $159;
   $160 = $11;
   $10 = $160;
   $161 = $10;
   $162 = (($161) + 1|0);
   $9 = $162;
   $163 = $9;
   $8 = $163;
   $164 = $8;
   $165 = $164;
  }
  $4 = $165;
  $166 = $4;
  $167 = $63;
  $31 = $167;
  $168 = $31;
  $30 = $168;
  $169 = $30;
  $29 = $169;
  $170 = $29;
  $28 = $170;
  $171 = $28;
  $27 = $171;
  $172 = $27;
  $173 = HEAP8[$172>>0]|0;
  $174 = $173&255;
  $175 = $174 & 1;
  $176 = ($175|0)!=(0);
  if ($176) {
   $21 = $169;
   $177 = $21;
   $20 = $177;
   $178 = $20;
   $19 = $178;
   $179 = $19;
   $180 = (($179) + 8|0);
   $181 = HEAP32[$180>>2]|0;
   $188 = $181;
  } else {
   $26 = $169;
   $182 = $26;
   $25 = $182;
   $183 = $25;
   $24 = $183;
   $184 = $24;
   $185 = (($184) + 1|0);
   $23 = $185;
   $186 = $23;
   $22 = $186;
   $187 = $22;
   $188 = $187;
  }
  $18 = $188;
  $189 = $18;
  $38 = $__lhs_sz$i$i$i$i;
  $39 = $__rhs_sz$i$i$i$i;
  $190 = $38;
  $191 = $39;
  ;HEAP8[$37+0>>0]=HEAP8[$40+0>>0]|0;
  $35 = $190;
  $36 = $191;
  $192 = $36;
  $193 = $35;
  $32 = $37;
  $33 = $192;
  $34 = $193;
  $194 = $33;
  $195 = HEAP32[$194>>2]|0;
  $196 = $34;
  $197 = HEAP32[$196>>2]|0;
  $198 = ($195>>>0)<($197>>>0);
  if ($198) {
   $199 = $36;
   $202 = $199;
  } else {
   $200 = $35;
   $202 = $200;
  }
  $201 = HEAP32[$202>>2]|0;
  __THREW__ = 0;
  $203 = (invoke_iiii(428,($166|0),($189|0),($201|0))|0);
  $204 = __THREW__; __THREW__ = 0;
  $205 = $204&1;
  if ($205) {
   label = 21;
   break;
  }
  $__result$i$i$i$i = $203;
  $206 = $__result$i$i$i$i;
  $207 = ($206|0)!=(0);
  do {
   if ($207) {
    $208 = $__result$i$i$i$i;
    $61 = $208;
   } else {
    $212 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
    $213 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
    $214 = ($212>>>0)<($213>>>0);
    if ($214) {
     $61 = -1;
     break;
    }
    $215 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
    $216 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
    $217 = ($215>>>0)>($216>>>0);
    if ($217) {
     $61 = 1;
     break;
    } else {
     $61 = 0;
     break;
    }
   }
  } while(0);
  $218 = $61;
  $219 = ($218|0)<(0);
  if ($219) {
   $223 = $81;
   $224 = (($223) + 4|0);
   $225 = HEAP32[$224>>2]|0;
   $81 = $225;
  } else {
   $220 = $81;
   $82 = $220;
   $221 = $81;
   $222 = HEAP32[$221>>2]|0;
   $81 = $222;
  }
 }
 if ((label|0) == 21) {
  $209 = ___cxa_find_matching_catch()|0;
  $210 = tempRet0;
  $64 = $209;
  $65 = $210;
  $211 = $64;
  ___cxa_call_unexpected(($211|0));
  // unreachable;
 }
 else if ((label|0) == 31) {
  $226 = $82;
  $74 = $agg$result;
  $75 = $226;
  $227 = $74;
  $228 = $75;
  HEAP32[$227>>2] = $228;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEEEENS_19__map_value_compareIS7_SE_NS_4lessIS7_EELb1EEENS5_ISE_EEE13__lower_boundIS7_EENS_15__tree_iteratorISE_PNS_11__tree_nodeISE_SC_EEiEERKT_SP_SP_($agg$result,$this,$__v,$__root,$__result) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 $__root = $__root|0;
 $__result = $__result|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i$i$i$i = 0, $__result$i$i$i$i = 0, $__rhs_sz$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $37 = sp;
 $40 = sp + 344|0;
 $__lhs_sz$i$i$i$i = sp + 252|0;
 $__rhs_sz$i$i$i$i = sp + 256|0;
 $78 = sp + 308|0;
 $83 = sp + 320|0;
 $79 = $this;
 $80 = $__v;
 $81 = $__root;
 $82 = $__result;
 $84 = $79;
 while(1) {
  $85 = $81;
  $76 = $78;
  $77 = -1;
  $86 = $76;
  HEAP32[$86>>2] = 0;
  $87 = HEAP32[$78>>2]|0;
  HEAP32[$83>>2] = $87;
  $3 = $83;
  $88 = ($85|0)!=(0|0);
  if (!($88)) {
   label = 31;
   break;
  }
  $2 = $84;
  $89 = $2;
  $90 = (($89) + 8|0);
  $1 = $90;
  $91 = $1;
  $0 = $91;
  $92 = $0;
  $93 = $81;
  $94 = (($93) + 16|0);
  $95 = $80;
  $71 = $92;
  $72 = $94;
  $73 = $95;
  $96 = $71;
  $97 = $72;
  $98 = $73;
  $68 = $96;
  $69 = $97;
  $70 = $98;
  $99 = $69;
  $100 = $70;
  $66 = $99;
  $67 = $100;
  $101 = $66;
  $102 = $67;
  $62 = $101;
  $63 = $102;
  $103 = $62;
  $60 = $103;
  $104 = $60;
  $59 = $104;
  $105 = $59;
  $58 = $105;
  $106 = $58;
  $57 = $106;
  $107 = $57;
  $108 = HEAP8[$107>>0]|0;
  $109 = $108&255;
  $110 = $109 & 1;
  $111 = ($110|0)!=(0);
  if ($111) {
   $53 = $104;
   $112 = $53;
   $52 = $112;
   $113 = $52;
   $51 = $113;
   $114 = $51;
   $115 = (($114) + 4|0);
   $116 = HEAP32[$115>>2]|0;
   $123 = $116;
  } else {
   $56 = $104;
   $117 = $56;
   $55 = $117;
   $118 = $55;
   $54 = $118;
   $119 = $54;
   $120 = HEAP8[$119>>0]|0;
   $121 = $120&255;
   $122 = $121 >> 1;
   $123 = $122;
  }
  HEAP32[$__lhs_sz$i$i$i$i>>2] = $123;
  $124 = $63;
  $50 = $124;
  $125 = $50;
  $49 = $125;
  $126 = $49;
  $48 = $126;
  $127 = $48;
  $47 = $127;
  $128 = $47;
  $129 = HEAP8[$128>>0]|0;
  $130 = $129&255;
  $131 = $130 & 1;
  $132 = ($131|0)!=(0);
  if ($132) {
   $43 = $125;
   $133 = $43;
   $42 = $133;
   $134 = $42;
   $41 = $134;
   $135 = $41;
   $136 = (($135) + 4|0);
   $137 = HEAP32[$136>>2]|0;
   $144 = $137;
  } else {
   $46 = $125;
   $138 = $46;
   $45 = $138;
   $139 = $45;
   $44 = $139;
   $140 = $44;
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = $142 >> 1;
   $144 = $143;
  }
  HEAP32[$__rhs_sz$i$i$i$i>>2] = $144;
  $17 = $103;
  $145 = $17;
  $16 = $145;
  $146 = $16;
  $15 = $146;
  $147 = $15;
  $14 = $147;
  $148 = $14;
  $13 = $148;
  $149 = $13;
  $150 = HEAP8[$149>>0]|0;
  $151 = $150&255;
  $152 = $151 & 1;
  $153 = ($152|0)!=(0);
  if ($153) {
   $7 = $146;
   $154 = $7;
   $6 = $154;
   $155 = $6;
   $5 = $155;
   $156 = $5;
   $157 = (($156) + 8|0);
   $158 = HEAP32[$157>>2]|0;
   $165 = $158;
  } else {
   $12 = $146;
   $159 = $12;
   $11 = $159;
   $160 = $11;
   $10 = $160;
   $161 = $10;
   $162 = (($161) + 1|0);
   $9 = $162;
   $163 = $9;
   $8 = $163;
   $164 = $8;
   $165 = $164;
  }
  $4 = $165;
  $166 = $4;
  $167 = $63;
  $31 = $167;
  $168 = $31;
  $30 = $168;
  $169 = $30;
  $29 = $169;
  $170 = $29;
  $28 = $170;
  $171 = $28;
  $27 = $171;
  $172 = $27;
  $173 = HEAP8[$172>>0]|0;
  $174 = $173&255;
  $175 = $174 & 1;
  $176 = ($175|0)!=(0);
  if ($176) {
   $21 = $169;
   $177 = $21;
   $20 = $177;
   $178 = $20;
   $19 = $178;
   $179 = $19;
   $180 = (($179) + 8|0);
   $181 = HEAP32[$180>>2]|0;
   $188 = $181;
  } else {
   $26 = $169;
   $182 = $26;
   $25 = $182;
   $183 = $25;
   $24 = $183;
   $184 = $24;
   $185 = (($184) + 1|0);
   $23 = $185;
   $186 = $23;
   $22 = $186;
   $187 = $22;
   $188 = $187;
  }
  $18 = $188;
  $189 = $18;
  $38 = $__lhs_sz$i$i$i$i;
  $39 = $__rhs_sz$i$i$i$i;
  $190 = $38;
  $191 = $39;
  ;HEAP8[$37+0>>0]=HEAP8[$40+0>>0]|0;
  $35 = $190;
  $36 = $191;
  $192 = $36;
  $193 = $35;
  $32 = $37;
  $33 = $192;
  $34 = $193;
  $194 = $33;
  $195 = HEAP32[$194>>2]|0;
  $196 = $34;
  $197 = HEAP32[$196>>2]|0;
  $198 = ($195>>>0)<($197>>>0);
  if ($198) {
   $199 = $36;
   $202 = $199;
  } else {
   $200 = $35;
   $202 = $200;
  }
  $201 = HEAP32[$202>>2]|0;
  __THREW__ = 0;
  $203 = (invoke_iiii(428,($166|0),($189|0),($201|0))|0);
  $204 = __THREW__; __THREW__ = 0;
  $205 = $204&1;
  if ($205) {
   label = 21;
   break;
  }
  $__result$i$i$i$i = $203;
  $206 = $__result$i$i$i$i;
  $207 = ($206|0)!=(0);
  do {
   if ($207) {
    $208 = $__result$i$i$i$i;
    $61 = $208;
   } else {
    $212 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
    $213 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
    $214 = ($212>>>0)<($213>>>0);
    if ($214) {
     $61 = -1;
     break;
    }
    $215 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
    $216 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
    $217 = ($215>>>0)>($216>>>0);
    if ($217) {
     $61 = 1;
     break;
    } else {
     $61 = 0;
     break;
    }
   }
  } while(0);
  $218 = $61;
  $219 = ($218|0)<(0);
  if ($219) {
   $223 = $81;
   $224 = (($223) + 4|0);
   $225 = HEAP32[$224>>2]|0;
   $81 = $225;
  } else {
   $220 = $81;
   $82 = $220;
   $221 = $81;
   $222 = HEAP32[$221>>2]|0;
   $81 = $222;
  }
 }
 if ((label|0) == 21) {
  $209 = ___cxa_find_matching_catch()|0;
  $210 = tempRet0;
  $64 = $209;
  $65 = $210;
  $211 = $64;
  ___cxa_call_unexpected(($211|0));
  // unreachable;
 }
 else if ((label|0) == 31) {
  $226 = $82;
  $74 = $agg$result;
  $75 = $226;
  $227 = $74;
  $228 = $75;
  HEAP32[$227>>2] = $228;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE13__lower_boundIS7_EENS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEERKT_SK_SK_($agg$result,$this,$__v,$__root,$__result) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 $__root = $__root|0;
 $__result = $__result|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i$i$i$i = 0, $__result$i$i$i$i = 0, $__rhs_sz$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $37 = sp;
 $40 = sp + 344|0;
 $__lhs_sz$i$i$i$i = sp + 252|0;
 $__rhs_sz$i$i$i$i = sp + 256|0;
 $78 = sp + 308|0;
 $83 = sp + 320|0;
 $79 = $this;
 $80 = $__v;
 $81 = $__root;
 $82 = $__result;
 $84 = $79;
 while(1) {
  $85 = $81;
  $76 = $78;
  $77 = -1;
  $86 = $76;
  HEAP32[$86>>2] = 0;
  $87 = HEAP32[$78>>2]|0;
  HEAP32[$83>>2] = $87;
  $3 = $83;
  $88 = ($85|0)!=(0|0);
  if (!($88)) {
   label = 31;
   break;
  }
  $2 = $84;
  $89 = $2;
  $90 = (($89) + 8|0);
  $1 = $90;
  $91 = $1;
  $0 = $91;
  $92 = $0;
  $93 = $81;
  $94 = (($93) + 16|0);
  $95 = $80;
  $71 = $92;
  $72 = $94;
  $73 = $95;
  $96 = $71;
  $97 = $72;
  $98 = $73;
  $68 = $96;
  $69 = $97;
  $70 = $98;
  $99 = $69;
  $100 = $70;
  $66 = $99;
  $67 = $100;
  $101 = $66;
  $102 = $67;
  $62 = $101;
  $63 = $102;
  $103 = $62;
  $60 = $103;
  $104 = $60;
  $59 = $104;
  $105 = $59;
  $58 = $105;
  $106 = $58;
  $57 = $106;
  $107 = $57;
  $108 = HEAP8[$107>>0]|0;
  $109 = $108&255;
  $110 = $109 & 1;
  $111 = ($110|0)!=(0);
  if ($111) {
   $53 = $104;
   $112 = $53;
   $52 = $112;
   $113 = $52;
   $51 = $113;
   $114 = $51;
   $115 = (($114) + 4|0);
   $116 = HEAP32[$115>>2]|0;
   $123 = $116;
  } else {
   $56 = $104;
   $117 = $56;
   $55 = $117;
   $118 = $55;
   $54 = $118;
   $119 = $54;
   $120 = HEAP8[$119>>0]|0;
   $121 = $120&255;
   $122 = $121 >> 1;
   $123 = $122;
  }
  HEAP32[$__lhs_sz$i$i$i$i>>2] = $123;
  $124 = $63;
  $50 = $124;
  $125 = $50;
  $49 = $125;
  $126 = $49;
  $48 = $126;
  $127 = $48;
  $47 = $127;
  $128 = $47;
  $129 = HEAP8[$128>>0]|0;
  $130 = $129&255;
  $131 = $130 & 1;
  $132 = ($131|0)!=(0);
  if ($132) {
   $43 = $125;
   $133 = $43;
   $42 = $133;
   $134 = $42;
   $41 = $134;
   $135 = $41;
   $136 = (($135) + 4|0);
   $137 = HEAP32[$136>>2]|0;
   $144 = $137;
  } else {
   $46 = $125;
   $138 = $46;
   $45 = $138;
   $139 = $45;
   $44 = $139;
   $140 = $44;
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = $142 >> 1;
   $144 = $143;
  }
  HEAP32[$__rhs_sz$i$i$i$i>>2] = $144;
  $17 = $103;
  $145 = $17;
  $16 = $145;
  $146 = $16;
  $15 = $146;
  $147 = $15;
  $14 = $147;
  $148 = $14;
  $13 = $148;
  $149 = $13;
  $150 = HEAP8[$149>>0]|0;
  $151 = $150&255;
  $152 = $151 & 1;
  $153 = ($152|0)!=(0);
  if ($153) {
   $7 = $146;
   $154 = $7;
   $6 = $154;
   $155 = $6;
   $5 = $155;
   $156 = $5;
   $157 = (($156) + 8|0);
   $158 = HEAP32[$157>>2]|0;
   $165 = $158;
  } else {
   $12 = $146;
   $159 = $12;
   $11 = $159;
   $160 = $11;
   $10 = $160;
   $161 = $10;
   $162 = (($161) + 1|0);
   $9 = $162;
   $163 = $9;
   $8 = $163;
   $164 = $8;
   $165 = $164;
  }
  $4 = $165;
  $166 = $4;
  $167 = $63;
  $31 = $167;
  $168 = $31;
  $30 = $168;
  $169 = $30;
  $29 = $169;
  $170 = $29;
  $28 = $170;
  $171 = $28;
  $27 = $171;
  $172 = $27;
  $173 = HEAP8[$172>>0]|0;
  $174 = $173&255;
  $175 = $174 & 1;
  $176 = ($175|0)!=(0);
  if ($176) {
   $21 = $169;
   $177 = $21;
   $20 = $177;
   $178 = $20;
   $19 = $178;
   $179 = $19;
   $180 = (($179) + 8|0);
   $181 = HEAP32[$180>>2]|0;
   $188 = $181;
  } else {
   $26 = $169;
   $182 = $26;
   $25 = $182;
   $183 = $25;
   $24 = $183;
   $184 = $24;
   $185 = (($184) + 1|0);
   $23 = $185;
   $186 = $23;
   $22 = $186;
   $187 = $22;
   $188 = $187;
  }
  $18 = $188;
  $189 = $18;
  $38 = $__lhs_sz$i$i$i$i;
  $39 = $__rhs_sz$i$i$i$i;
  $190 = $38;
  $191 = $39;
  ;HEAP8[$37+0>>0]=HEAP8[$40+0>>0]|0;
  $35 = $190;
  $36 = $191;
  $192 = $36;
  $193 = $35;
  $32 = $37;
  $33 = $192;
  $34 = $193;
  $194 = $33;
  $195 = HEAP32[$194>>2]|0;
  $196 = $34;
  $197 = HEAP32[$196>>2]|0;
  $198 = ($195>>>0)<($197>>>0);
  if ($198) {
   $199 = $36;
   $202 = $199;
  } else {
   $200 = $35;
   $202 = $200;
  }
  $201 = HEAP32[$202>>2]|0;
  __THREW__ = 0;
  $203 = (invoke_iiii(428,($166|0),($189|0),($201|0))|0);
  $204 = __THREW__; __THREW__ = 0;
  $205 = $204&1;
  if ($205) {
   label = 21;
   break;
  }
  $__result$i$i$i$i = $203;
  $206 = $__result$i$i$i$i;
  $207 = ($206|0)!=(0);
  do {
   if ($207) {
    $208 = $__result$i$i$i$i;
    $61 = $208;
   } else {
    $212 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
    $213 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
    $214 = ($212>>>0)<($213>>>0);
    if ($214) {
     $61 = -1;
     break;
    }
    $215 = HEAP32[$__lhs_sz$i$i$i$i>>2]|0;
    $216 = HEAP32[$__rhs_sz$i$i$i$i>>2]|0;
    $217 = ($215>>>0)>($216>>>0);
    if ($217) {
     $61 = 1;
     break;
    } else {
     $61 = 0;
     break;
    }
   }
  } while(0);
  $218 = $61;
  $219 = ($218|0)<(0);
  if ($219) {
   $223 = $81;
   $224 = (($223) + 4|0);
   $225 = HEAP32[$224>>2]|0;
   $81 = $225;
  } else {
   $220 = $81;
   $82 = $220;
   $221 = $81;
   $222 = HEAP32[$221>>2]|0;
   $81 = $222;
  }
 }
 if ((label|0) == 21) {
  $209 = ___cxa_find_matching_catch()|0;
  $210 = tempRet0;
  $64 = $209;
  $65 = $210;
  $211 = $64;
  ___cxa_call_unexpected(($211|0));
  // unreachable;
 }
 else if ((label|0) == 31) {
  $226 = $82;
  $74 = $agg$result;
  $75 = $226;
  $227 = $74;
  $228 = $75;
  HEAP32[$227>>2] = $228;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEENS_4lessIS6_EENS4_INS7_IKS6_SC_EEEEE16__find_equal_keyERPNS_16__tree_node_baseISB_EERSF_($this,$__parent,$__k) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__lhs_sz$i$i$i = 0, $__lhs_sz$i$i$i1 = 0, $__nd = 0, $__result$i$i$i = 0, $__result$i$i$i3 = 0, $__rhs_sz$i$i$i = 0, $__rhs_sz$i$i$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $37 = sp + 8|0;
 $40 = sp + 712|0;
 $__lhs_sz$i$i$i1 = sp + 64|0;
 $__rhs_sz$i$i$i2 = sp + 260|0;
 $73 = sp + 304|0;
 $82 = sp + 684|0;
 $116 = sp;
 $119 = sp + 713|0;
 $__lhs_sz$i$i$i = sp + 584|0;
 $__rhs_sz$i$i$i = sp + 588|0;
 $152 = sp + 632|0;
 $169 = sp + 352|0;
 $170 = sp + 488|0;
 $171 = sp + 160|0;
 $166 = $this;
 $167 = $__parent;
 $168 = $__k;
 $172 = $166;
 $164 = $172;
 $173 = $164;
 $163 = $173;
 $174 = $163;
 $175 = (($174) + 4|0);
 $162 = $175;
 $176 = $162;
 $161 = $176;
 $177 = $161;
 $160 = $177;
 $178 = $160;
 $159 = $178;
 $179 = $159;
 $180 = HEAP32[$179>>2]|0;
 $__nd = $180;
 $181 = $__nd;
 $80 = $82;
 $81 = -1;
 $182 = $80;
 HEAP32[$182>>2] = 0;
 $183 = HEAP32[$82>>2]|0;
 HEAP32[$169>>2] = $183;
 $79 = $169;
 $184 = ($181|0)!=(0|0);
 if (!($184)) {
  $158 = $172;
  $471 = $158;
  $472 = (($471) + 4|0);
  $157 = $472;
  $473 = $157;
  $156 = $473;
  $474 = $156;
  $155 = $474;
  $475 = $155;
  $154 = $475;
  $476 = $154;
  $477 = $167;
  HEAP32[$477>>2] = $476;
  $478 = $167;
  $479 = HEAP32[$478>>2]|0;
  $165 = $479;
  $480 = $165;
  STACKTOP = sp;return ($480|0);
 }
 while(1) {
  $3 = $172;
  $185 = $3;
  $186 = (($185) + 8|0);
  $2 = $186;
  $187 = $2;
  $1 = $187;
  $188 = $1;
  $0 = $188;
  $189 = $0;
  $190 = $168;
  $191 = $__nd;
  $192 = (($191) + 16|0);
  $68 = $189;
  $69 = $190;
  $70 = $192;
  $193 = $69;
  $194 = $70;
  $66 = $193;
  $67 = $194;
  $195 = $66;
  $196 = $67;
  $62 = $195;
  $63 = $196;
  $197 = $62;
  $60 = $197;
  $198 = $60;
  $59 = $198;
  $199 = $59;
  $58 = $199;
  $200 = $58;
  $57 = $200;
  $201 = $57;
  $202 = HEAP8[$201>>0]|0;
  $203 = $202&255;
  $204 = $203 & 1;
  $205 = ($204|0)!=(0);
  if ($205) {
   $53 = $198;
   $206 = $53;
   $52 = $206;
   $207 = $52;
   $51 = $207;
   $208 = $51;
   $209 = (($208) + 4|0);
   $210 = HEAP32[$209>>2]|0;
   $217 = $210;
  } else {
   $56 = $198;
   $211 = $56;
   $55 = $211;
   $212 = $55;
   $54 = $212;
   $213 = $54;
   $214 = HEAP8[$213>>0]|0;
   $215 = $214&255;
   $216 = $215 >> 1;
   $217 = $216;
  }
  HEAP32[$__lhs_sz$i$i$i1>>2] = $217;
  $218 = $63;
  $50 = $218;
  $219 = $50;
  $49 = $219;
  $220 = $49;
  $48 = $220;
  $221 = $48;
  $47 = $221;
  $222 = $47;
  $223 = HEAP8[$222>>0]|0;
  $224 = $223&255;
  $225 = $224 & 1;
  $226 = ($225|0)!=(0);
  if ($226) {
   $43 = $219;
   $227 = $43;
   $42 = $227;
   $228 = $42;
   $41 = $228;
   $229 = $41;
   $230 = (($229) + 4|0);
   $231 = HEAP32[$230>>2]|0;
   $238 = $231;
  } else {
   $46 = $219;
   $232 = $46;
   $45 = $232;
   $233 = $45;
   $44 = $233;
   $234 = $44;
   $235 = HEAP8[$234>>0]|0;
   $236 = $235&255;
   $237 = $236 >> 1;
   $238 = $237;
  }
  HEAP32[$__rhs_sz$i$i$i2>>2] = $238;
  $17 = $197;
  $239 = $17;
  $16 = $239;
  $240 = $16;
  $15 = $240;
  $241 = $15;
  $14 = $241;
  $242 = $14;
  $13 = $242;
  $243 = $13;
  $244 = HEAP8[$243>>0]|0;
  $245 = $244&255;
  $246 = $245 & 1;
  $247 = ($246|0)!=(0);
  if ($247) {
   $7 = $240;
   $248 = $7;
   $6 = $248;
   $249 = $6;
   $5 = $249;
   $250 = $5;
   $251 = (($250) + 8|0);
   $252 = HEAP32[$251>>2]|0;
   $259 = $252;
  } else {
   $12 = $240;
   $253 = $12;
   $11 = $253;
   $254 = $11;
   $10 = $254;
   $255 = $10;
   $256 = (($255) + 1|0);
   $9 = $256;
   $257 = $9;
   $8 = $257;
   $258 = $8;
   $259 = $258;
  }
  $4 = $259;
  $260 = $4;
  $261 = $63;
  $31 = $261;
  $262 = $31;
  $30 = $262;
  $263 = $30;
  $29 = $263;
  $264 = $29;
  $28 = $264;
  $265 = $28;
  $27 = $265;
  $266 = $27;
  $267 = HEAP8[$266>>0]|0;
  $268 = $267&255;
  $269 = $268 & 1;
  $270 = ($269|0)!=(0);
  if ($270) {
   $21 = $263;
   $271 = $21;
   $20 = $271;
   $272 = $20;
   $19 = $272;
   $273 = $19;
   $274 = (($273) + 8|0);
   $275 = HEAP32[$274>>2]|0;
   $282 = $275;
  } else {
   $26 = $263;
   $276 = $26;
   $25 = $276;
   $277 = $25;
   $24 = $277;
   $278 = $24;
   $279 = (($278) + 1|0);
   $23 = $279;
   $280 = $23;
   $22 = $280;
   $281 = $22;
   $282 = $281;
  }
  $18 = $282;
  $283 = $18;
  $38 = $__lhs_sz$i$i$i1;
  $39 = $__rhs_sz$i$i$i2;
  $284 = $38;
  $285 = $39;
  ;HEAP8[$37+0>>0]=HEAP8[$40+0>>0]|0;
  $35 = $284;
  $36 = $285;
  $286 = $36;
  $287 = $35;
  $32 = $37;
  $33 = $286;
  $34 = $287;
  $288 = $33;
  $289 = HEAP32[$288>>2]|0;
  $290 = $34;
  $291 = HEAP32[$290>>2]|0;
  $292 = ($289>>>0)<($291>>>0);
  if ($292) {
   $293 = $36;
   $296 = $293;
  } else {
   $294 = $35;
   $296 = $294;
  }
  $295 = HEAP32[$296>>2]|0;
  __THREW__ = 0;
  $297 = (invoke_iiii(428,($260|0),($283|0),($295|0))|0);
  $298 = __THREW__; __THREW__ = 0;
  $299 = $298&1;
  if ($299) {
   label = 21;
   break;
  }
  $__result$i$i$i3 = $297;
  $300 = $__result$i$i$i3;
  $301 = ($300|0)!=(0);
  do {
   if ($301) {
    $302 = $__result$i$i$i3;
    $61 = $302;
   } else {
    $306 = HEAP32[$__lhs_sz$i$i$i1>>2]|0;
    $307 = HEAP32[$__rhs_sz$i$i$i2>>2]|0;
    $308 = ($306>>>0)<($307>>>0);
    if ($308) {
     $61 = -1;
     break;
    }
    $309 = HEAP32[$__lhs_sz$i$i$i1>>2]|0;
    $310 = HEAP32[$__rhs_sz$i$i$i2>>2]|0;
    $311 = ($309>>>0)>($310>>>0);
    if ($311) {
     $61 = 1;
     break;
    } else {
     $61 = 0;
     break;
    }
   }
  } while(0);
  $312 = $61;
  $313 = ($312|0)<(0);
  if ($313) {
   $314 = $__nd;
   $315 = HEAP32[$314>>2]|0;
   $71 = $73;
   $72 = -1;
   $316 = $71;
   HEAP32[$316>>2] = 0;
   $317 = HEAP32[$73>>2]|0;
   HEAP32[$170>>2] = $317;
   $74 = $170;
   $318 = ($315|0)!=(0|0);
   if (!($318)) {
    label = 30;
    break;
   }
   $319 = $__nd;
   $320 = HEAP32[$319>>2]|0;
   $__nd = $320;
  } else {
   $77 = $172;
   $325 = $77;
   $326 = (($325) + 8|0);
   $76 = $326;
   $327 = $76;
   $75 = $327;
   $328 = $75;
   $78 = $328;
   $329 = $78;
   $330 = $__nd;
   $331 = (($330) + 16|0);
   $332 = $168;
   $147 = $329;
   $148 = $331;
   $149 = $332;
   $333 = $148;
   $334 = $149;
   $145 = $333;
   $146 = $334;
   $335 = $145;
   $336 = $146;
   $141 = $335;
   $142 = $336;
   $337 = $141;
   $139 = $337;
   $338 = $139;
   $138 = $338;
   $339 = $138;
   $137 = $339;
   $340 = $137;
   $136 = $340;
   $341 = $136;
   $342 = HEAP8[$341>>0]|0;
   $343 = $342&255;
   $344 = $343 & 1;
   $345 = ($344|0)!=(0);
   if ($345) {
    $132 = $338;
    $346 = $132;
    $131 = $346;
    $347 = $131;
    $130 = $347;
    $348 = $130;
    $349 = (($348) + 4|0);
    $350 = HEAP32[$349>>2]|0;
    $357 = $350;
   } else {
    $135 = $338;
    $351 = $135;
    $134 = $351;
    $352 = $134;
    $133 = $352;
    $353 = $133;
    $354 = HEAP8[$353>>0]|0;
    $355 = $354&255;
    $356 = $355 >> 1;
    $357 = $356;
   }
   HEAP32[$__lhs_sz$i$i$i>>2] = $357;
   $358 = $142;
   $129 = $358;
   $359 = $129;
   $128 = $359;
   $360 = $128;
   $127 = $360;
   $361 = $127;
   $126 = $361;
   $362 = $126;
   $363 = HEAP8[$362>>0]|0;
   $364 = $363&255;
   $365 = $364 & 1;
   $366 = ($365|0)!=(0);
   if ($366) {
    $122 = $359;
    $367 = $122;
    $121 = $367;
    $368 = $121;
    $120 = $368;
    $369 = $120;
    $370 = (($369) + 4|0);
    $371 = HEAP32[$370>>2]|0;
    $378 = $371;
   } else {
    $125 = $359;
    $372 = $125;
    $124 = $372;
    $373 = $124;
    $123 = $373;
    $374 = $123;
    $375 = HEAP8[$374>>0]|0;
    $376 = $375&255;
    $377 = $376 >> 1;
    $378 = $377;
   }
   HEAP32[$__rhs_sz$i$i$i>>2] = $378;
   $96 = $337;
   $379 = $96;
   $95 = $379;
   $380 = $95;
   $94 = $380;
   $381 = $94;
   $93 = $381;
   $382 = $93;
   $92 = $382;
   $383 = $92;
   $384 = HEAP8[$383>>0]|0;
   $385 = $384&255;
   $386 = $385 & 1;
   $387 = ($386|0)!=(0);
   if ($387) {
    $86 = $380;
    $388 = $86;
    $85 = $388;
    $389 = $85;
    $84 = $389;
    $390 = $84;
    $391 = (($390) + 8|0);
    $392 = HEAP32[$391>>2]|0;
    $399 = $392;
   } else {
    $91 = $380;
    $393 = $91;
    $90 = $393;
    $394 = $90;
    $89 = $394;
    $395 = $89;
    $396 = (($395) + 1|0);
    $88 = $396;
    $397 = $88;
    $87 = $397;
    $398 = $87;
    $399 = $398;
   }
   $83 = $399;
   $400 = $83;
   $401 = $142;
   $110 = $401;
   $402 = $110;
   $109 = $402;
   $403 = $109;
   $108 = $403;
   $404 = $108;
   $107 = $404;
   $405 = $107;
   $106 = $405;
   $406 = $106;
   $407 = HEAP8[$406>>0]|0;
   $408 = $407&255;
   $409 = $408 & 1;
   $410 = ($409|0)!=(0);
   if ($410) {
    $100 = $403;
    $411 = $100;
    $99 = $411;
    $412 = $99;
    $98 = $412;
    $413 = $98;
    $414 = (($413) + 8|0);
    $415 = HEAP32[$414>>2]|0;
    $422 = $415;
   } else {
    $105 = $403;
    $416 = $105;
    $104 = $416;
    $417 = $104;
    $103 = $417;
    $418 = $103;
    $419 = (($418) + 1|0);
    $102 = $419;
    $420 = $102;
    $101 = $420;
    $421 = $101;
    $422 = $421;
   }
   $97 = $422;
   $423 = $97;
   $117 = $__lhs_sz$i$i$i;
   $118 = $__rhs_sz$i$i$i;
   $424 = $117;
   $425 = $118;
   ;HEAP8[$116+0>>0]=HEAP8[$119+0>>0]|0;
   $114 = $424;
   $115 = $425;
   $426 = $115;
   $427 = $114;
   $111 = $116;
   $112 = $426;
   $113 = $427;
   $428 = $112;
   $429 = HEAP32[$428>>2]|0;
   $430 = $113;
   $431 = HEAP32[$430>>2]|0;
   $432 = ($429>>>0)<($431>>>0);
   if ($432) {
    $433 = $115;
    $436 = $433;
   } else {
    $434 = $114;
    $436 = $434;
   }
   $435 = HEAP32[$436>>2]|0;
   __THREW__ = 0;
   $437 = (invoke_iiii(428,($400|0),($423|0),($435|0))|0);
   $438 = __THREW__; __THREW__ = 0;
   $439 = $438&1;
   if ($439) {
    label = 50;
    break;
   }
   $__result$i$i$i = $437;
   $440 = $__result$i$i$i;
   $441 = ($440|0)!=(0);
   do {
    if ($441) {
     $442 = $__result$i$i$i;
     $140 = $442;
    } else {
     $446 = HEAP32[$__lhs_sz$i$i$i>>2]|0;
     $447 = HEAP32[$__rhs_sz$i$i$i>>2]|0;
     $448 = ($446>>>0)<($447>>>0);
     if ($448) {
      $140 = -1;
      break;
     }
     $449 = HEAP32[$__lhs_sz$i$i$i>>2]|0;
     $450 = HEAP32[$__rhs_sz$i$i$i>>2]|0;
     $451 = ($449>>>0)>($450>>>0);
     if ($451) {
      $140 = 1;
      break;
     } else {
      $140 = 0;
      break;
     }
    }
   } while(0);
   $452 = $140;
   $453 = ($452|0)<(0);
   if (!($453)) {
    label = 61;
    break;
   }
   $454 = $__nd;
   $455 = (($454) + 4|0);
   $456 = HEAP32[$455>>2]|0;
   $150 = $152;
   $151 = -1;
   $457 = $150;
   HEAP32[$457>>2] = 0;
   $458 = HEAP32[$152>>2]|0;
   HEAP32[$171>>2] = $458;
   $153 = $171;
   $459 = ($456|0)!=(0|0);
   if (!($459)) {
    label = 59;
    break;
   }
   $460 = $__nd;
   $461 = (($460) + 4|0);
   $462 = HEAP32[$461>>2]|0;
   $__nd = $462;
  }
 }
 if ((label|0) == 21) {
  $303 = ___cxa_find_matching_catch()|0;
  $304 = tempRet0;
  $64 = $303;
  $65 = $304;
  $305 = $64;
  ___cxa_call_unexpected(($305|0));
  // unreachable;
 }
 else if ((label|0) == 30) {
  $321 = $__nd;
  $322 = $167;
  HEAP32[$322>>2] = $321;
  $323 = $167;
  $324 = HEAP32[$323>>2]|0;
  $165 = $324;
  $480 = $165;
  STACKTOP = sp;return ($480|0);
 }
 else if ((label|0) == 50) {
  $443 = ___cxa_find_matching_catch()|0;
  $444 = tempRet0;
  $143 = $443;
  $144 = $444;
  $445 = $143;
  ___cxa_call_unexpected(($445|0));
  // unreachable;
 }
 else if ((label|0) == 59) {
  $463 = $__nd;
  $464 = $167;
  HEAP32[$464>>2] = $463;
  $465 = $167;
  $466 = HEAP32[$465>>2]|0;
  $467 = (($466) + 4|0);
  $165 = $467;
  $480 = $165;
  STACKTOP = sp;return ($480|0);
 }
 else if ((label|0) == 61) {
  $468 = $__nd;
  $469 = $167;
  HEAP32[$469>>2] = $468;
  $470 = $167;
  $165 = $470;
  $480 = $165;
  STACKTOP = sp;return ($480|0);
 }
 return 0|0;
}
function __ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEENS_4lessIS6_EENS4_INS7_IKS6_SC_EEEEE25__construct_node_with_keyERSF_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__na = 0, $__t$i$i = 0, $__t$i$i$i = 0, $__t$i$i4$i = 0, $__tmp$i$i = 0, $__tmp$i$i10 = 0, $__tmp$i$i2 = 0, $__tmp$i$i28 = 0, $__tmp$i$i9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1440|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = sp + 24|0;
 $10 = sp + 1426|0;
 $13 = sp + 120|0;
 $16 = sp + 1429|0;
 $48 = sp + 280|0;
 $49 = sp + 112|0;
 $52 = sp + 296|0;
 $53 = sp + 304|0;
 $54 = sp + 48|0;
 $57 = sp + 328|0;
 $58 = sp + 136|0;
 $69 = sp + 128|0;
 $72 = sp + 1430|0;
 $75 = sp + 16|0;
 $78 = sp + 1427|0;
 $110 = sp + 552|0;
 $111 = sp + 56|0;
 $114 = sp + 568|0;
 $115 = sp + 576|0;
 $116 = sp + 160|0;
 $119 = sp + 600|0;
 $120 = sp + 80|0;
 $138 = sp + 624|0;
 $139 = sp + 32|0;
 $142 = sp + 700|0;
 $143 = sp + 704|0;
 $144 = sp + 96|0;
 $147 = sp + 1384|0;
 $148 = sp + 72|0;
 $152 = sp + 752|0;
 $153 = sp + 756|0;
 $154 = sp + 768|0;
 $168 = sp + 144|0;
 $171 = sp + 1433|0;
 $174 = sp + 104|0;
 $177 = sp + 1432|0;
 $212 = sp + 88|0;
 $215 = sp + 1425|0;
 $218 = sp + 168|0;
 $221 = sp + 1431|0;
 $248 = sp + 1176|0;
 $249 = sp + 152|0;
 $252 = sp + 1184|0;
 $253 = sp + 1192|0;
 $254 = sp + 64|0;
 $257 = sp + 1212|0;
 $258 = sp + 1216|0;
 $259 = sp + 40|0;
 $267 = sp + 8|0;
 $270 = sp + 1428|0;
 $273 = sp;
 $276 = sp + 1424|0;
 $__h = sp + 1024|0;
 $307 = sp + 864|0;
 $310 = sp + 384|0;
 $311 = sp + 740|0;
 $305 = $this;
 $306 = $__k;
 $313 = $305;
 $304 = $313;
 $314 = $304;
 $315 = (($314) + 4|0);
 $303 = $315;
 $316 = $303;
 $302 = $316;
 $317 = $302;
 $__na = $317;
 $318 = $__na;
 $300 = $318;
 $301 = 1;
 $319 = $300;
 $320 = $301;
 $297 = $319;
 $298 = $320;
 $299 = 0;
 $321 = $298;
 $322 = ($321*36)|0;
 $296 = $322;
 $323 = $296;
 $324 = (__Znwj($323)|0);
 $325 = $__na;
 $294 = $307;
 $295 = $325;
 $326 = $294;
 $327 = $295;
 HEAP32[$326>>2] = $327;
 $328 = (($326) + 4|0);
 HEAP8[$328>>0] = 0;
 $329 = (($326) + 5|0);
 HEAP8[$329>>0] = 0;
 ;HEAP8[$259+0>>0]=HEAP8[$307+0>>0]|0;HEAP8[$259+1>>0]=HEAP8[$307+1>>0]|0;HEAP8[$259+2>>0]=HEAP8[$307+2>>0]|0;HEAP8[$259+3>>0]=HEAP8[$307+3>>0]|0;HEAP8[$259+4>>0]=HEAP8[$307+4>>0]|0;HEAP8[$259+5>>0]=HEAP8[$307+5>>0]|0;HEAP8[$259+6>>0]=HEAP8[$307+6>>0]|0;HEAP8[$259+7>>0]=HEAP8[$307+7>>0]|0;
 $256 = $__h;
 HEAP32[$257>>2] = $324;
 $330 = $256;
 $255 = $257;
 $331 = $255;
 $332 = HEAP32[$331>>2]|0;
 $243 = $259;
 $333 = $243;
 ;HEAP32[$258+0>>2]=HEAP32[$333+0>>2]|0;HEAP32[$258+4>>2]=HEAP32[$333+4>>2]|0;
 ;HEAP8[$254+0>>0]=HEAP8[$258+0>>0]|0;HEAP8[$254+1>>0]=HEAP8[$258+1>>0]|0;HEAP8[$254+2>>0]=HEAP8[$258+2>>0]|0;HEAP8[$254+3>>0]=HEAP8[$258+3>>0]|0;HEAP8[$254+4>>0]=HEAP8[$258+4>>0]|0;HEAP8[$254+5>>0]=HEAP8[$258+5>>0]|0;HEAP8[$254+6>>0]=HEAP8[$258+6>>0]|0;HEAP8[$254+7>>0]=HEAP8[$258+7>>0]|0;
 $251 = $330;
 HEAP32[$252>>2] = $332;
 $334 = $251;
 $250 = $252;
 $335 = $250;
 $336 = HEAP32[$335>>2]|0;
 $244 = $254;
 $337 = $244;
 ;HEAP32[$253+0>>2]=HEAP32[$337+0>>2]|0;HEAP32[$253+4>>2]=HEAP32[$337+4>>2]|0;
 ;HEAP8[$249+0>>0]=HEAP8[$253+0>>0]|0;HEAP8[$249+1>>0]=HEAP8[$253+1>>0]|0;HEAP8[$249+2>>0]=HEAP8[$253+2>>0]|0;HEAP8[$249+3>>0]=HEAP8[$253+3>>0]|0;HEAP8[$249+4>>0]=HEAP8[$253+4>>0]|0;HEAP8[$249+5>>0]=HEAP8[$253+5>>0]|0;HEAP8[$249+6>>0]=HEAP8[$253+6>>0]|0;HEAP8[$249+7>>0]=HEAP8[$253+7>>0]|0;
 $247 = $334;
 HEAP32[$248>>2] = $336;
 $338 = $247;
 $246 = $248;
 $339 = $246;
 $340 = HEAP32[$339>>2]|0;
 HEAP32[$338>>2] = $340;
 $341 = (($338) + 4|0);
 $245 = $249;
 $342 = $245;
 ;HEAP32[$341+0>>2]=HEAP32[$342+0>>2]|0;HEAP32[$341+4>>2]=HEAP32[$342+4>>2]|0;
 $343 = $__na;
 $242 = $__h;
 $344 = $242;
 $241 = $344;
 $345 = $241;
 $240 = $345;
 $346 = $240;
 $347 = HEAP32[$346>>2]|0;
 $348 = (($347) + 16|0);
 $239 = $348;
 $349 = $239;
 $350 = $306;
 $202 = $343;
 $203 = $349;
 $204 = $350;
 $351 = $203;
 $352 = ($351|0)==(0|0);
 do {
  if (!($352)) {
   $353 = $204;
   __THREW__ = 0;
   invoke_vii(429,($351|0),($353|0));
   $354 = __THREW__; __THREW__ = 0;
   $355 = $354&1;
   if (!($355)) {
    break;
   }
   $612 = ___cxa_find_matching_catch()|0;
   $613 = tempRet0;
   $308 = $612;
   $309 = $613;
   $293 = $__h;
   $614 = $293;
   $291 = $614;
   $292 = 0;
   $615 = $291;
   $290 = $615;
   $616 = $290;
   $289 = $616;
   $617 = $289;
   $618 = HEAP32[$617>>2]|0;
   $__tmp$i$i = $618;
   $619 = $292;
   $263 = $615;
   $620 = $263;
   $262 = $620;
   $621 = $262;
   HEAP32[$621>>2] = $619;
   $622 = $__tmp$i$i;
   $623 = ($622|0)!=(0|0);
   if ($623) {
    $261 = $615;
    $624 = $261;
    $260 = $624;
    $625 = $260;
    $626 = (($625) + 4|0);
    $627 = $__tmp$i$i;
    $285 = $626;
    $286 = $627;
    $628 = $285;
    $629 = (($628) + 5|0);
    $630 = HEAP8[$629>>0]|0;
    $631 = $630&1;
    if ($631) {
     $632 = HEAP32[$628>>2]|0;
     $633 = $286;
     $634 = (($633) + 16|0);
     $635 = (($634) + 12|0);
     $284 = $635;
     $636 = $284;
     $274 = $632;
     $275 = $636;
     $637 = $274;
     $638 = $275;
     ;HEAP8[$273+0>>0]=HEAP8[$276+0>>0]|0;
     $271 = $637;
     $272 = $638;
    }
    $642 = (($628) + 4|0);
    $643 = HEAP8[$642>>0]|0;
    $644 = $643&1;
    do {
     if ($644) {
      $645 = HEAP32[$628>>2]|0;
      $646 = $286;
      $647 = (($646) + 16|0);
      $264 = $647;
      $648 = $264;
      $268 = $645;
      $269 = $648;
      $649 = $268;
      $650 = $269;
      ;HEAP8[$267+0>>0]=HEAP8[$270+0>>0]|0;
      $265 = $649;
      $266 = $650;
      $651 = $266;
      __THREW__ = 0;
      invoke_vi(403,($651|0));
      $652 = __THREW__; __THREW__ = 0;
      $653 = $652&1;
      if ($653) {
       $639 = ___cxa_find_matching_catch(0|0)|0;
       $640 = tempRet0;
       $287 = $639;
       $288 = $640;
       $641 = $287;
       ___cxa_call_unexpected(($641|0));
       // unreachable;
      } else {
       break;
      }
     }
    } while(0);
    $654 = $286;
    $655 = ($654|0)!=(0|0);
    if ($655) {
     $656 = HEAP32[$628>>2]|0;
     $657 = $286;
     $281 = $656;
     $282 = $657;
     $283 = 1;
     $658 = $281;
     $659 = $282;
     $660 = $283;
     $278 = $658;
     $279 = $659;
     $280 = $660;
     $661 = $279;
     $277 = $661;
     $662 = $277;
     __ZdlPv($662);
    }
   }
   $663 = $308;
   $664 = $309;
   ___resumeException($663|0);
   // unreachable;
  }
 } while(0);
 $201 = $__h;
 $356 = $201;
 $200 = $356;
 $357 = $200;
 $199 = $357;
 $358 = $199;
 $359 = (($358) + 4|0);
 $360 = (($359) + 4|0);
 HEAP8[$360>>0] = 1;
 $361 = $__na;
 $198 = $__h;
 $362 = $198;
 $197 = $362;
 $363 = $197;
 $196 = $363;
 $364 = $196;
 $365 = HEAP32[$364>>2]|0;
 $366 = (($365) + 16|0);
 $367 = (($366) + 12|0);
 $195 = $367;
 $368 = $195;
 $159 = $361;
 $160 = $368;
 $369 = $160;
 $370 = ($369|0)==(0|0);
 if (!($370)) {
  $158 = $369;
  $371 = $158;
  HEAP32[$371>>2] = 0;
  $372 = (($371) + 4|0);
  HEAP32[$372>>2] = 0;
 }
 $157 = $__h;
 $373 = $157;
 $156 = $373;
 $374 = $156;
 $155 = $374;
 $375 = $155;
 $376 = (($375) + 4|0);
 $377 = (($376) + 5|0);
 HEAP8[$377>>0] = 1;
 $151 = $__h;
 $378 = $151;
 $149 = $154;
 $150 = $378;
 $379 = $149;
 $380 = $150;
 HEAP32[$379>>2] = $380;
 ;HEAP8[$148+0>>0]=HEAP8[$154+0>>0]|0;HEAP8[$148+1>>0]=HEAP8[$154+1>>0]|0;HEAP8[$148+2>>0]=HEAP8[$154+2>>0]|0;HEAP8[$148+3>>0]=HEAP8[$154+3>>0]|0;
 $146 = $153;
 $381 = $146;
 $145 = $148;
 $382 = $145;
 $383 = HEAP32[$382>>2]|0;
 $128 = $383;
 $384 = $128;
 $127 = $384;
 $385 = $127;
 $126 = $385;
 $386 = $126;
 $387 = HEAP32[$386>>2]|0;
 $__t$i$i$i = $387;
 $125 = $384;
 $388 = $125;
 $124 = $388;
 $389 = $124;
 HEAP32[$389>>2] = 0;
 $390 = $__t$i$i$i;
 $129 = $148;
 $391 = $129;
 $392 = HEAP32[$391>>2]|0;
 $132 = $392;
 $393 = $132;
 $131 = $393;
 $394 = $131;
 $130 = $394;
 $395 = $130;
 $396 = (($395) + 4|0);
 $133 = $396;
 $397 = $133;
 ;HEAP32[$147+0>>2]=HEAP32[$397+0>>2]|0;HEAP32[$147+4>>2]=HEAP32[$397+4>>2]|0;
 ;HEAP8[$144+0>>0]=HEAP8[$147+0>>0]|0;HEAP8[$144+1>>0]=HEAP8[$147+1>>0]|0;HEAP8[$144+2>>0]=HEAP8[$147+2>>0]|0;HEAP8[$144+3>>0]=HEAP8[$147+3>>0]|0;HEAP8[$144+4>>0]=HEAP8[$147+4>>0]|0;HEAP8[$144+5>>0]=HEAP8[$147+5>>0]|0;HEAP8[$144+6>>0]=HEAP8[$147+6>>0]|0;HEAP8[$144+7>>0]=HEAP8[$147+7>>0]|0;
 $141 = $381;
 HEAP32[$142>>2] = $390;
 $398 = $141;
 $140 = $142;
 $399 = $140;
 $400 = HEAP32[$399>>2]|0;
 $134 = $144;
 $401 = $134;
 ;HEAP32[$143+0>>2]=HEAP32[$401+0>>2]|0;HEAP32[$143+4>>2]=HEAP32[$401+4>>2]|0;
 ;HEAP8[$139+0>>0]=HEAP8[$143+0>>0]|0;HEAP8[$139+1>>0]=HEAP8[$143+1>>0]|0;HEAP8[$139+2>>0]=HEAP8[$143+2>>0]|0;HEAP8[$139+3>>0]=HEAP8[$143+3>>0]|0;HEAP8[$139+4>>0]=HEAP8[$143+4>>0]|0;HEAP8[$139+5>>0]=HEAP8[$143+5>>0]|0;HEAP8[$139+6>>0]=HEAP8[$143+6>>0]|0;HEAP8[$139+7>>0]=HEAP8[$143+7>>0]|0;
 $137 = $398;
 HEAP32[$138>>2] = $400;
 $402 = $137;
 $136 = $138;
 $403 = $136;
 $404 = HEAP32[$403>>2]|0;
 HEAP32[$402>>2] = $404;
 $405 = (($402) + 4|0);
 $135 = $139;
 $406 = $135;
 ;HEAP32[$405+0>>2]=HEAP32[$406+0>>2]|0;HEAP32[$405+4>>2]=HEAP32[$406+4>>2]|0;
 $123 = $153;
 $407 = $123;
 $121 = $152;
 $122 = $407;
 $408 = $121;
 $409 = $122;
 HEAP32[$408>>2] = $409;
 ;HEAP8[$120+0>>0]=HEAP8[$152+0>>0]|0;HEAP8[$120+1>>0]=HEAP8[$152+1>>0]|0;HEAP8[$120+2>>0]=HEAP8[$152+2>>0]|0;HEAP8[$120+3>>0]=HEAP8[$152+3>>0]|0;
 $118 = $311;
 $410 = $118;
 $117 = $120;
 $411 = $117;
 $412 = HEAP32[$411>>2]|0;
 $100 = $412;
 $413 = $100;
 $99 = $413;
 $414 = $99;
 $98 = $414;
 $415 = $98;
 $416 = HEAP32[$415>>2]|0;
 $__t$i$i4$i = $416;
 $97 = $413;
 $417 = $97;
 $96 = $417;
 $418 = $96;
 HEAP32[$418>>2] = 0;
 $419 = $__t$i$i4$i;
 $101 = $120;
 $420 = $101;
 $421 = HEAP32[$420>>2]|0;
 $104 = $421;
 $422 = $104;
 $103 = $422;
 $423 = $103;
 $102 = $423;
 $424 = $102;
 $425 = (($424) + 4|0);
 $105 = $425;
 $426 = $105;
 ;HEAP32[$119+0>>2]=HEAP32[$426+0>>2]|0;HEAP32[$119+4>>2]=HEAP32[$426+4>>2]|0;
 ;HEAP8[$116+0>>0]=HEAP8[$119+0>>0]|0;HEAP8[$116+1>>0]=HEAP8[$119+1>>0]|0;HEAP8[$116+2>>0]=HEAP8[$119+2>>0]|0;HEAP8[$116+3>>0]=HEAP8[$119+3>>0]|0;HEAP8[$116+4>>0]=HEAP8[$119+4>>0]|0;HEAP8[$116+5>>0]=HEAP8[$119+5>>0]|0;HEAP8[$116+6>>0]=HEAP8[$119+6>>0]|0;HEAP8[$116+7>>0]=HEAP8[$119+7>>0]|0;
 $113 = $410;
 HEAP32[$114>>2] = $419;
 $427 = $113;
 $112 = $114;
 $428 = $112;
 $429 = HEAP32[$428>>2]|0;
 $106 = $116;
 $430 = $106;
 ;HEAP32[$115+0>>2]=HEAP32[$430+0>>2]|0;HEAP32[$115+4>>2]=HEAP32[$430+4>>2]|0;
 ;HEAP8[$111+0>>0]=HEAP8[$115+0>>0]|0;HEAP8[$111+1>>0]=HEAP8[$115+1>>0]|0;HEAP8[$111+2>>0]=HEAP8[$115+2>>0]|0;HEAP8[$111+3>>0]=HEAP8[$115+3>>0]|0;HEAP8[$111+4>>0]=HEAP8[$115+4>>0]|0;HEAP8[$111+5>>0]=HEAP8[$115+5>>0]|0;HEAP8[$111+6>>0]=HEAP8[$115+6>>0]|0;HEAP8[$111+7>>0]=HEAP8[$115+7>>0]|0;
 $109 = $427;
 HEAP32[$110>>2] = $429;
 $431 = $109;
 $108 = $110;
 $432 = $108;
 $433 = HEAP32[$432>>2]|0;
 HEAP32[$431>>2] = $433;
 $434 = (($431) + 4|0);
 $107 = $111;
 $435 = $107;
 ;HEAP32[$434+0>>2]=HEAP32[$435+0>>2]|0;HEAP32[$434+4>>2]=HEAP32[$435+4>>2]|0;
 $95 = $153;
 $436 = $95;
 $93 = $436;
 $94 = 0;
 $437 = $93;
 $92 = $437;
 $438 = $92;
 $91 = $438;
 $439 = $91;
 $440 = HEAP32[$439>>2]|0;
 $__tmp$i$i9$i = $440;
 $441 = $94;
 $65 = $437;
 $442 = $65;
 $64 = $442;
 $443 = $64;
 HEAP32[$443>>2] = $441;
 $444 = $__tmp$i$i9$i;
 $445 = ($444|0)!=(0|0);
 if ($445) {
  $63 = $437;
  $446 = $63;
  $62 = $446;
  $447 = $62;
  $448 = (($447) + 4|0);
  $449 = $__tmp$i$i9$i;
  $87 = $448;
  $88 = $449;
  $450 = $87;
  $451 = (($450) + 5|0);
  $452 = HEAP8[$451>>0]|0;
  $453 = $452&1;
  if ($453) {
   $454 = HEAP32[$450>>2]|0;
   $455 = $88;
   $456 = (($455) + 16|0);
   $457 = (($456) + 12|0);
   $86 = $457;
   $458 = $86;
   $76 = $454;
   $77 = $458;
   $459 = $76;
   $460 = $77;
   ;HEAP8[$75+0>>0]=HEAP8[$78+0>>0]|0;
   $73 = $459;
   $74 = $460;
  }
  $464 = (($450) + 4|0);
  $465 = HEAP8[$464>>0]|0;
  $466 = $465&1;
  do {
   if ($466) {
    $467 = HEAP32[$450>>2]|0;
    $468 = $88;
    $469 = (($468) + 16|0);
    $66 = $469;
    $470 = $66;
    $70 = $467;
    $71 = $470;
    $471 = $70;
    $472 = $71;
    ;HEAP8[$69+0>>0]=HEAP8[$72+0>>0]|0;
    $67 = $471;
    $68 = $472;
    $473 = $68;
    __THREW__ = 0;
    invoke_vi(403,($473|0));
    $474 = __THREW__; __THREW__ = 0;
    $475 = $474&1;
    if ($475) {
     $461 = ___cxa_find_matching_catch()|0;
     $462 = tempRet0;
     $89 = $461;
     $90 = $462;
     $463 = $89;
     ___cxa_call_unexpected(($463|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $476 = $88;
  $477 = ($476|0)!=(0|0);
  if ($477) {
   $478 = HEAP32[$450>>2]|0;
   $479 = $88;
   $83 = $478;
   $84 = $479;
   $85 = 1;
   $480 = $83;
   $481 = $84;
   $482 = $85;
   $80 = $480;
   $81 = $481;
   $82 = $482;
   $483 = $81;
   $79 = $483;
   $484 = $79;
   __ZdlPv($484);
  }
 }
 $61 = $311;
 $485 = $61;
 $59 = $310;
 $60 = $485;
 $486 = $59;
 $487 = $60;
 HEAP32[$486>>2] = $487;
 ;HEAP8[$58+0>>0]=HEAP8[$310+0>>0]|0;HEAP8[$58+1>>0]=HEAP8[$310+1>>0]|0;HEAP8[$58+2>>0]=HEAP8[$310+2>>0]|0;HEAP8[$58+3>>0]=HEAP8[$310+3>>0]|0;
 $56 = $agg$result;
 $488 = $56;
 $55 = $58;
 $489 = $55;
 $490 = HEAP32[$489>>2]|0;
 $38 = $490;
 $491 = $38;
 $37 = $491;
 $492 = $37;
 $36 = $492;
 $493 = $36;
 $494 = HEAP32[$493>>2]|0;
 $__t$i$i = $494;
 $35 = $491;
 $495 = $35;
 $34 = $495;
 $496 = $34;
 HEAP32[$496>>2] = 0;
 $497 = $__t$i$i;
 $39 = $58;
 $498 = $39;
 $499 = HEAP32[$498>>2]|0;
 $42 = $499;
 $500 = $42;
 $41 = $500;
 $501 = $41;
 $40 = $501;
 $502 = $40;
 $503 = (($502) + 4|0);
 $43 = $503;
 $504 = $43;
 ;HEAP32[$57+0>>2]=HEAP32[$504+0>>2]|0;HEAP32[$57+4>>2]=HEAP32[$504+4>>2]|0;
 ;HEAP8[$54+0>>0]=HEAP8[$57+0>>0]|0;HEAP8[$54+1>>0]=HEAP8[$57+1>>0]|0;HEAP8[$54+2>>0]=HEAP8[$57+2>>0]|0;HEAP8[$54+3>>0]=HEAP8[$57+3>>0]|0;HEAP8[$54+4>>0]=HEAP8[$57+4>>0]|0;HEAP8[$54+5>>0]=HEAP8[$57+5>>0]|0;HEAP8[$54+6>>0]=HEAP8[$57+6>>0]|0;HEAP8[$54+7>>0]=HEAP8[$57+7>>0]|0;
 $51 = $488;
 HEAP32[$52>>2] = $497;
 $505 = $51;
 $50 = $52;
 $506 = $50;
 $507 = HEAP32[$506>>2]|0;
 $44 = $54;
 $508 = $44;
 ;HEAP32[$53+0>>2]=HEAP32[$508+0>>2]|0;HEAP32[$53+4>>2]=HEAP32[$508+4>>2]|0;
 ;HEAP8[$49+0>>0]=HEAP8[$53+0>>0]|0;HEAP8[$49+1>>0]=HEAP8[$53+1>>0]|0;HEAP8[$49+2>>0]=HEAP8[$53+2>>0]|0;HEAP8[$49+3>>0]=HEAP8[$53+3>>0]|0;HEAP8[$49+4>>0]=HEAP8[$53+4>>0]|0;HEAP8[$49+5>>0]=HEAP8[$53+5>>0]|0;HEAP8[$49+6>>0]=HEAP8[$53+6>>0]|0;HEAP8[$49+7>>0]=HEAP8[$53+7>>0]|0;
 $47 = $505;
 HEAP32[$48>>2] = $507;
 $509 = $47;
 $46 = $48;
 $510 = $46;
 $511 = HEAP32[$510>>2]|0;
 HEAP32[$509>>2] = $511;
 $512 = (($509) + 4|0);
 $45 = $49;
 $513 = $45;
 ;HEAP32[$512+0>>2]=HEAP32[$513+0>>2]|0;HEAP32[$512+4>>2]=HEAP32[$513+4>>2]|0;
 $33 = $311;
 $514 = $33;
 $31 = $514;
 $32 = 0;
 $515 = $31;
 $30 = $515;
 $516 = $30;
 $29 = $516;
 $517 = $29;
 $518 = HEAP32[$517>>2]|0;
 $__tmp$i$i28 = $518;
 $519 = $32;
 $3 = $515;
 $520 = $3;
 $2 = $520;
 $521 = $2;
 HEAP32[$521>>2] = $519;
 $522 = $__tmp$i$i28;
 $523 = ($522|0)!=(0|0);
 if ($523) {
  $1 = $515;
  $524 = $1;
  $0 = $524;
  $525 = $0;
  $526 = (($525) + 4|0);
  $527 = $__tmp$i$i28;
  $25 = $526;
  $26 = $527;
  $528 = $25;
  $529 = (($528) + 5|0);
  $530 = HEAP8[$529>>0]|0;
  $531 = $530&1;
  if ($531) {
   $532 = HEAP32[$528>>2]|0;
   $533 = $26;
   $534 = (($533) + 16|0);
   $535 = (($534) + 12|0);
   $24 = $535;
   $536 = $24;
   $14 = $532;
   $15 = $536;
   $537 = $14;
   $538 = $15;
   ;HEAP8[$13+0>>0]=HEAP8[$16+0>>0]|0;
   $11 = $537;
   $12 = $538;
  }
  $542 = (($528) + 4|0);
  $543 = HEAP8[$542>>0]|0;
  $544 = $543&1;
  do {
   if ($544) {
    $545 = HEAP32[$528>>2]|0;
    $546 = $26;
    $547 = (($546) + 16|0);
    $4 = $547;
    $548 = $4;
    $8 = $545;
    $9 = $548;
    $549 = $8;
    $550 = $9;
    ;HEAP8[$7+0>>0]=HEAP8[$10+0>>0]|0;
    $5 = $549;
    $6 = $550;
    $551 = $6;
    __THREW__ = 0;
    invoke_vi(403,($551|0));
    $552 = __THREW__; __THREW__ = 0;
    $553 = $552&1;
    if ($553) {
     $539 = ___cxa_find_matching_catch()|0;
     $540 = tempRet0;
     $27 = $539;
     $28 = $540;
     $541 = $27;
     ___cxa_call_unexpected(($541|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $554 = $26;
  $555 = ($554|0)!=(0|0);
  if ($555) {
   $556 = HEAP32[$528>>2]|0;
   $557 = $26;
   $21 = $556;
   $22 = $557;
   $23 = 1;
   $558 = $21;
   $559 = $22;
   $560 = $23;
   $18 = $558;
   $19 = $559;
   $20 = $560;
   $561 = $19;
   $17 = $561;
   $562 = $17;
   __ZdlPv($562);
  }
 }
 $312 = 1;
 $194 = $__h;
 $563 = $194;
 $192 = $563;
 $193 = 0;
 $564 = $192;
 $191 = $564;
 $565 = $191;
 $190 = $565;
 $566 = $190;
 $567 = HEAP32[$566>>2]|0;
 $__tmp$i$i10 = $567;
 $568 = $193;
 $164 = $564;
 $569 = $164;
 $163 = $569;
 $570 = $163;
 HEAP32[$570>>2] = $568;
 $571 = $__tmp$i$i10;
 $572 = ($571|0)!=(0|0);
 if (!($572)) {
  STACKTOP = sp;return;
 }
 $162 = $564;
 $573 = $162;
 $161 = $573;
 $574 = $161;
 $575 = (($574) + 4|0);
 $576 = $__tmp$i$i10;
 $186 = $575;
 $187 = $576;
 $577 = $186;
 $578 = (($577) + 5|0);
 $579 = HEAP8[$578>>0]|0;
 $580 = $579&1;
 if ($580) {
  $581 = HEAP32[$577>>2]|0;
  $582 = $187;
  $583 = (($582) + 16|0);
  $584 = (($583) + 12|0);
  $185 = $584;
  $585 = $185;
  $175 = $581;
  $176 = $585;
  $586 = $175;
  $587 = $176;
  ;HEAP8[$174+0>>0]=HEAP8[$177+0>>0]|0;
  $172 = $586;
  $173 = $587;
 }
 $591 = (($577) + 4|0);
 $592 = HEAP8[$591>>0]|0;
 $593 = $592&1;
 do {
  if ($593) {
   $594 = HEAP32[$577>>2]|0;
   $595 = $187;
   $596 = (($595) + 16|0);
   $165 = $596;
   $597 = $165;
   $169 = $594;
   $170 = $597;
   $598 = $169;
   $599 = $170;
   ;HEAP8[$168+0>>0]=HEAP8[$171+0>>0]|0;
   $166 = $598;
   $167 = $599;
   $600 = $167;
   __THREW__ = 0;
   invoke_vi(403,($600|0));
   $601 = __THREW__; __THREW__ = 0;
   $602 = $601&1;
   if ($602) {
    $588 = ___cxa_find_matching_catch()|0;
    $589 = tempRet0;
    $188 = $588;
    $189 = $589;
    $590 = $188;
    ___cxa_call_unexpected(($590|0));
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $603 = $187;
 $604 = ($603|0)!=(0|0);
 if ($604) {
  $605 = HEAP32[$577>>2]|0;
  $606 = $187;
  $182 = $605;
  $183 = $606;
  $184 = 1;
  $607 = $182;
  $608 = $183;
  $609 = $184;
  $179 = $607;
  $180 = $608;
  $181 = $609;
  $610 = $180;
  $178 = $610;
  $611 = $178;
  __ZdlPv($611);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEEEENS_19__map_value_compareIS7_SE_NS_4lessIS7_EELb1EEENS5_ISE_EEE16__insert_node_atEPNS_16__tree_node_baseISC_EERSN_SN_($this,$__parent,$__child,$__new_node) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__child = $__child|0;
 $__new_node = $__new_node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 44|0;
 $7 = sp + 24|0;
 $22 = sp + 12|0;
 $27 = sp + 40|0;
 $28 = sp + 92|0;
 $29 = sp + 48|0;
 $23 = $this;
 $24 = $__parent;
 $25 = $__child;
 $26 = $__new_node;
 $30 = $23;
 $20 = $22;
 $21 = -1;
 $31 = $20;
 HEAP32[$31>>2] = 0;
 $32 = HEAP32[$22>>2]|0;
 HEAP32[$27>>2] = $32;
 $16 = $27;
 $33 = $26;
 HEAP32[$33>>2] = 0;
 $0 = $2;
 $1 = -1;
 $34 = $0;
 HEAP32[$34>>2] = 0;
 $35 = HEAP32[$2>>2]|0;
 HEAP32[$28>>2] = $35;
 $3 = $28;
 $36 = $26;
 $37 = (($36) + 4|0);
 HEAP32[$37>>2] = 0;
 $38 = $24;
 $39 = $26;
 $40 = (($39) + 8|0);
 HEAP32[$40>>2] = $38;
 $41 = $26;
 $42 = $25;
 HEAP32[$42>>2] = $41;
 $4 = $30;
 $43 = $4;
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$44>>2]|0;
 $5 = $7;
 $6 = -1;
 $46 = $5;
 HEAP32[$46>>2] = 0;
 $47 = HEAP32[$7>>2]|0;
 HEAP32[$29>>2] = $47;
 $8 = $29;
 $48 = ($45|0)!=(0|0);
 if ($48) {
  $9 = $30;
  $49 = $9;
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP32[$50>>2]|0;
  $10 = $30;
  $52 = $10;
  HEAP32[$52>>2] = $51;
 }
 $15 = $30;
 $53 = $15;
 $54 = (($53) + 4|0);
 $14 = $54;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $11 = $57;
 $58 = $11;
 $59 = HEAP32[$58>>2]|0;
 $60 = $25;
 $61 = HEAP32[$60>>2]|0;
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($59,$61);
 $19 = $30;
 $62 = $19;
 $63 = (($62) + 8|0);
 $18 = $63;
 $64 = $18;
 $17 = $64;
 $65 = $17;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) + 1)|0;
 HEAP32[$65>>2] = $67;
 STACKTOP = sp;return;
}
function __ZNK9BlockDXT110decompressEP7Color32($this,$colors) {
 $this = $this|0;
 $colors = $colors|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $i = 0, $palette = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $palette = sp + 8|0;
 $0 = $this;
 $1 = $colors;
 $2 = $0;
 $3 = HEAP16[$2>>1]|0;
 $4 = $3 & 31;
 $5 = $4&65535;
 $6 = $5 << 3;
 $7 = HEAP16[$2>>1]|0;
 $8 = $7 & 31;
 $9 = $8&65535;
 $10 = $9 >> 2;
 $11 = $6 | $10;
 $12 = $11&255;
 HEAP8[$palette>>0] = $12;
 $13 = HEAP16[$2>>1]|0;
 $14 = ($13&65535) >>> 5;
 $15 = $14 & 63;
 $16 = $15&65535;
 $17 = $16 << 2;
 $18 = HEAP16[$2>>1]|0;
 $19 = ($18&65535) >>> 5;
 $20 = $19 & 63;
 $21 = $20&65535;
 $22 = $21 >> 4;
 $23 = $17 | $22;
 $24 = $23&255;
 $25 = (($palette) + 1|0);
 HEAP8[$25>>0] = $24;
 $26 = HEAP16[$2>>1]|0;
 $27 = ($26&65535) >>> 11;
 $28 = $27&65535;
 $29 = $28 << 3;
 $30 = HEAP16[$2>>1]|0;
 $31 = ($30&65535) >>> 11;
 $32 = $31&65535;
 $33 = $32 >> 2;
 $34 = $29 | $33;
 $35 = $34&255;
 $36 = (($palette) + 2|0);
 HEAP8[$36>>0] = $35;
 $37 = (($palette) + 3|0);
 HEAP8[$37>>0] = -1;
 $38 = (($2) + 2|0);
 $39 = HEAP16[$38>>1]|0;
 $40 = ($39&65535) >>> 11;
 $41 = $40&65535;
 $42 = $41 << 3;
 $43 = (($2) + 2|0);
 $44 = HEAP16[$43>>1]|0;
 $45 = ($44&65535) >>> 11;
 $46 = $45&65535;
 $47 = $46 >> 2;
 $48 = $42 | $47;
 $49 = $48&255;
 $50 = (($palette) + 4|0);
 $51 = (($50) + 2|0);
 HEAP8[$51>>0] = $49;
 $52 = (($2) + 2|0);
 $53 = HEAP16[$52>>1]|0;
 $54 = ($53&65535) >>> 5;
 $55 = $54 & 63;
 $56 = $55&65535;
 $57 = $56 << 2;
 $58 = (($2) + 2|0);
 $59 = HEAP16[$58>>1]|0;
 $60 = ($59&65535) >>> 5;
 $61 = $60 & 63;
 $62 = $61&65535;
 $63 = $62 >> 4;
 $64 = $57 | $63;
 $65 = $64&255;
 $66 = (($palette) + 4|0);
 $67 = (($66) + 1|0);
 HEAP8[$67>>0] = $65;
 $68 = (($2) + 2|0);
 $69 = HEAP16[$68>>1]|0;
 $70 = $69 & 31;
 $71 = $70&65535;
 $72 = $71 << 3;
 $73 = (($2) + 2|0);
 $74 = HEAP16[$73>>1]|0;
 $75 = $74 & 31;
 $76 = $75&65535;
 $77 = $76 >> 2;
 $78 = $72 | $77;
 $79 = $78&255;
 $80 = (($palette) + 4|0);
 HEAP8[$80>>0] = $79;
 $81 = (($palette) + 4|0);
 $82 = (($81) + 3|0);
 HEAP8[$82>>0] = -1;
 $83 = HEAP16[$2>>1]|0;
 $84 = $83&65535;
 $85 = (($2) + 2|0);
 $86 = HEAP16[$85>>1]|0;
 $87 = $86&65535;
 $88 = ($84|0)>($87|0);
 if ($88) {
  $89 = (($palette) + 2|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = $91<<1;
  $93 = (($palette) + 4|0);
  $94 = (($93) + 2|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $95&255;
  $97 = (($92) + ($96))|0;
  $98 = (($97|0) / 3)&-1;
  $99 = $98&255;
  $100 = (($palette) + 8|0);
  $101 = (($100) + 2|0);
  HEAP8[$101>>0] = $99;
  $102 = (($palette) + 1|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = $103&255;
  $105 = $104<<1;
  $106 = (($palette) + 4|0);
  $107 = (($106) + 1|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = $108&255;
  $110 = (($105) + ($109))|0;
  $111 = (($110|0) / 3)&-1;
  $112 = $111&255;
  $113 = (($palette) + 8|0);
  $114 = (($113) + 1|0);
  HEAP8[$114>>0] = $112;
  $115 = HEAP8[$palette>>0]|0;
  $116 = $115&255;
  $117 = $116<<1;
  $118 = (($palette) + 4|0);
  $119 = HEAP8[$118>>0]|0;
  $120 = $119&255;
  $121 = (($117) + ($120))|0;
  $122 = (($121|0) / 3)&-1;
  $123 = $122&255;
  $124 = (($palette) + 8|0);
  HEAP8[$124>>0] = $123;
  $125 = (($palette) + 8|0);
  $126 = (($125) + 3|0);
  HEAP8[$126>>0] = -1;
  $127 = (($palette) + 4|0);
  $128 = (($127) + 2|0);
  $129 = HEAP8[$128>>0]|0;
  $130 = $129&255;
  $131 = $130<<1;
  $132 = (($palette) + 2|0);
  $133 = HEAP8[$132>>0]|0;
  $134 = $133&255;
  $135 = (($131) + ($134))|0;
  $136 = (($135|0) / 3)&-1;
  $137 = $136&255;
  $138 = (($palette) + 12|0);
  $139 = (($138) + 2|0);
  HEAP8[$139>>0] = $137;
  $140 = (($palette) + 4|0);
  $141 = (($140) + 1|0);
  $142 = HEAP8[$141>>0]|0;
  $143 = $142&255;
  $144 = $143<<1;
  $145 = (($palette) + 1|0);
  $146 = HEAP8[$145>>0]|0;
  $147 = $146&255;
  $148 = (($144) + ($147))|0;
  $149 = (($148|0) / 3)&-1;
  $150 = $149&255;
  $151 = (($palette) + 12|0);
  $152 = (($151) + 1|0);
  HEAP8[$152>>0] = $150;
  $153 = (($palette) + 4|0);
  $154 = HEAP8[$153>>0]|0;
  $155 = $154&255;
  $156 = $155<<1;
  $157 = HEAP8[$palette>>0]|0;
  $158 = $157&255;
  $159 = (($156) + ($158))|0;
  $160 = (($159|0) / 3)&-1;
  $161 = $160&255;
  $162 = (($palette) + 12|0);
  HEAP8[$162>>0] = $161;
  $163 = (($palette) + 12|0);
  $164 = (($163) + 3|0);
  HEAP8[$164>>0] = -1;
 } else {
  $165 = (($palette) + 2|0);
  $166 = HEAP8[$165>>0]|0;
  $167 = $166&255;
  $168 = (($palette) + 4|0);
  $169 = (($168) + 2|0);
  $170 = HEAP8[$169>>0]|0;
  $171 = $170&255;
  $172 = (($167) + ($171))|0;
  $173 = (($172|0) / 2)&-1;
  $174 = $173&255;
  $175 = (($palette) + 8|0);
  $176 = (($175) + 2|0);
  HEAP8[$176>>0] = $174;
  $177 = (($palette) + 1|0);
  $178 = HEAP8[$177>>0]|0;
  $179 = $178&255;
  $180 = (($palette) + 4|0);
  $181 = (($180) + 1|0);
  $182 = HEAP8[$181>>0]|0;
  $183 = $182&255;
  $184 = (($179) + ($183))|0;
  $185 = (($184|0) / 2)&-1;
  $186 = $185&255;
  $187 = (($palette) + 8|0);
  $188 = (($187) + 1|0);
  HEAP8[$188>>0] = $186;
  $189 = HEAP8[$palette>>0]|0;
  $190 = $189&255;
  $191 = (($palette) + 4|0);
  $192 = HEAP8[$191>>0]|0;
  $193 = $192&255;
  $194 = (($190) + ($193))|0;
  $195 = (($194|0) / 2)&-1;
  $196 = $195&255;
  $197 = (($palette) + 8|0);
  HEAP8[$197>>0] = $196;
  $198 = (($palette) + 8|0);
  $199 = (($198) + 3|0);
  HEAP8[$199>>0] = -1;
  $200 = (($palette) + 12|0);
  $201 = (($200) + 2|0);
  HEAP8[$201>>0] = 0;
  $202 = (($palette) + 12|0);
  $203 = (($202) + 1|0);
  HEAP8[$203>>0] = 0;
  $204 = (($palette) + 12|0);
  HEAP8[$204>>0] = 0;
  $205 = (($palette) + 12|0);
  $206 = (($205) + 3|0);
  HEAP8[$206>>0] = 0;
 }
 $i = 0;
 while(1) {
  $207 = $i;
  $208 = ($207|0)<(16);
  if (!($208)) {
   break;
  }
  $209 = $i;
  $210 = $1;
  $211 = (($210) + ($209<<2)|0);
  $212 = (($2) + 4|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = $i;
  $215 = $214<<1;
  $216 = $213 >>> $215;
  $217 = $216 & 3;
  $218 = (($palette) + ($217<<2)|0);
  ;HEAP32[$211+0>>2]=HEAP32[$218+0>>2]|0;
  $219 = $i;
  $220 = (($219) + 1)|0;
  $i = $220;
 }
 STACKTOP = sp;return;
}
function __Z13compareColorsPK7Color32S1_($b0,$b1) {
 $b0 = $b0|0;
 $b1 = $b1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $g = 0, $i = 0;
 var $r = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $b0;
 $1 = $b1;
 $sum = 0;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(16);
  if (!($3)) {
   break;
  }
  $4 = $i;
  $5 = $0;
  $6 = (($5) + ($4<<2)|0);
  $7 = (($6) + 2|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = $i;
  $11 = $1;
  $12 = (($11) + ($10<<2)|0);
  $13 = (($12) + 2|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = (($9) - ($15))|0;
  $r = $16;
  $17 = $i;
  $18 = $0;
  $19 = (($18) + ($17<<2)|0);
  $20 = (($19) + 1|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $i;
  $24 = $1;
  $25 = (($24) + ($23<<2)|0);
  $26 = (($25) + 1|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = (($22) - ($28))|0;
  $g = $29;
  $30 = $i;
  $31 = $0;
  $32 = (($31) + ($30<<2)|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = $i;
  $36 = $1;
  $37 = (($36) + ($35<<2)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = (($34) - ($39))|0;
  $b = $40;
  $41 = $r;
  $42 = $r;
  $43 = Math_imul($41, $42)|0;
  $44 = $g;
  $45 = $g;
  $46 = Math_imul($44, $45)|0;
  $47 = (($43) + ($46))|0;
  $48 = $b;
  $49 = $b;
  $50 = Math_imul($48, $49)|0;
  $51 = (($47) + ($50))|0;
  $52 = $sum;
  $53 = (($52) + ($51))|0;
  $sum = $53;
  $54 = $i;
  $55 = (($54) + 1)|0;
  $i = $55;
 }
 $56 = $sum;
 STACKTOP = sp;return ($56|0);
}
function __Z12compareBlockPK9BlockDXT1S1_($b0,$b1) {
 $b0 = $b0|0;
 $b1 = $b1|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $colors0 = 0, $colors1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $colors0 = sp + 64|0;
 $colors1 = sp;
 $1 = $b0;
 $2 = $b1;
 $3 = $1;
 $4 = $2;
 $5 = (_memcmp($3,$4,8)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  $0 = 0;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 } else {
  $7 = $1;
  __ZNK9BlockDXT110decompressEP7Color32($7,$colors0);
  $8 = $2;
  __ZNK9BlockDXT110decompressEP7Color32($8,$colors1);
  $9 = (__Z13compareColorsPK7Color32S1_($colors0,$colors1)|0);
  $0 = $9;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 return 0|0;
}
function __Z21check_callback_workerPciPv($data,$size,$arg) {
 $data = $data|0;
 $size = $size|0;
 $arg = $arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $rms = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $data;
 $1 = $size;
 $2 = $arg;
 $3 = $0;
 $4 = (($3) + 1048852|0);
 $5 = +HEAPF32[$4>>2];
 $rms = $5;
 $6 = $rms;
 $7 = $6;
 HEAPF64[tempDoublePtr>>3]=$7;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_shrLog(3,0,4952,$vararg_buffer)|0);
 $8 = $rms;
 $9 = $8 <= 0.019999999552965164;
 $10 = $9 ? 5000 : 5008;
 HEAP32[$vararg_buffer1>>2] = $10;
 (_shrLog(3,0,4984,$vararg_buffer1)|0);
 STACKTOP = sp;return;
}
function __Z6hasextPKcS0_($exts,$ext) {
 $exts = $exts|0;
 $ext = $ext|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $exts;
 $2 = $ext;
 $3 = $2;
 $4 = (_strlen(($3|0))|0);
 $len = $4;
 $5 = $len;
 $6 = ($5|0)!=(0);
 do {
  if ($6) {
   $7 = $1;
   $cur = $7;
   while(1) {
    $8 = $cur;
    $9 = $2;
    $10 = (_strstr($8,$9)|0);
    $cur = $10;
    $11 = ($10|0)!=(0|0);
    if (!($11)) {
     label = 11;
     break;
    }
    $12 = $cur;
    $13 = $1;
    $14 = ($12|0)==($13|0);
    if ($14) {
     label = 6;
    } else {
     $15 = $cur;
     $16 = (($15) + -1|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17 << 24 >> 24;
     $19 = ($18|0)==(32);
     if ($19) {
      label = 6;
     }
    }
    if ((label|0) == 6) {
     label = 0;
     $20 = $len;
     $21 = $cur;
     $22 = (($21) + ($20)|0);
     $23 = HEAP8[$22>>0]|0;
     $24 = $23 << 24 >> 24;
     $25 = ($24|0)==(32);
     if ($25) {
      break;
     }
     $26 = $len;
     $27 = $cur;
     $28 = (($27) + ($26)|0);
     $29 = HEAP8[$28>>0]|0;
     $30 = ($29<<24>>24)!=(0);
     if (!($30)) {
      break;
     }
    }
    $31 = $len;
    $32 = $cur;
    $33 = (($32) + ($31)|0);
    $cur = $33;
   }
   if ((label|0) == 11) {
    break;
   }
   $0 = 1;
   $34 = $0;
   STACKTOP = sp;return ($34|0);
  }
 } while(0);
 $0 = 0;
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function __Z11showtexturei($header_size) {
 $header_size = $header_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dds_gen = 0, $dds_gen_size = 0, $ddsgendata = 0, $exts = 0, $height = 0, $matrixData = 0, $offset = 0, $screen = 0, $texture = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer4 = 0, $vararg_ptr7 = 0, $vertexData = 0, $width = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $matrixData = sp + 48|0;
 $texture = sp + 112|0;
 $vertexData = sp + 128|0;
 $0 = $header_size;
 $width = 800;
 $height = 800;
 $offset = 5;
 $1 = (_SDL_Init(32)|0);
 $2 = ($1|0)!=(0);
 if ($2) {
  $3 = (_SDL_GetError()|0);
  HEAP32[$vararg_buffer>>2] = $3;
  (_printf((5024|0),($vararg_buffer|0))|0);
  STACKTOP = sp;return;
 }
 (_SDL_GL_SetAttribute(5,1)|0);
 $4 = (_SDL_SetVideoMode(800,800,16,67108864)|0);
 $screen = $4;
 $5 = $screen;
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  $7 = (_SDL_GetError()|0);
  HEAP32[$vararg_buffer1>>2] = $7;
  (_printf((5056|0),($vararg_buffer1|0))|0);
  STACKTOP = sp;return;
 }
 $8 = (_glGetString(7939)|0);
 $exts = $8;
 $9 = $exts;
 $10 = (__Z6hasextPKcS0_($9,5088)|0);
 $11 = ($10|0)!=(0);
 if (!($11)) {
  ___assert_fail((5120|0),(5168|0),95,(5192|0));
  // unreachable;
 }
 $12 = $exts;
 $13 = (__Z6hasextPKcS0_($12,5208)|0);
 $14 = ($13|0)!=(0);
 if (!($14)) {
  ___assert_fail((5240|0),(5168|0),96,(5192|0));
  // unreachable;
 }
 _glClearColor(0.0,0.0,0.0,0.0);
 _glEnable(3553);
 _glViewport(0,0,800,800);
 _glMatrixMode(5889);
 dest=$matrixData+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAPF32[$matrixData>>2] = 0.0024999999441206455;
 $15 = (($matrixData) + 20|0);
 HEAPF32[$15>>2] = -0.0024999999441206455;
 $16 = (($matrixData) + 40|0);
 HEAPF32[$16>>2] = -1.0;
 $17 = (($matrixData) + 48|0);
 HEAPF32[$17>>2] = -1.0;
 $18 = (($matrixData) + 52|0);
 HEAPF32[$18>>2] = 1.0;
 $19 = (($matrixData) + 60|0);
 HEAPF32[$19>>2] = 1.0;
 _glLoadMatrixf(($matrixData|0));
 _glMatrixMode(5888);
 _glLoadIdentity();
 $20 = (_fopen((5288|0),(5304|0))|0);
 $dds_gen = $20;
 $21 = $dds_gen;
 (_fseek(($21|0),0,2)|0);
 $22 = $dds_gen;
 $23 = (_ftell(($22|0))|0);
 $dds_gen_size = $23;
 $24 = $dds_gen;
 (_fseek(($24|0),0,0)|0);
 $25 = $dds_gen_size;
 $26 = $0;
 HEAP32[$vararg_buffer4>>2] = $25;
 $vararg_ptr7 = (($vararg_buffer4) + 4|0);
 HEAP32[$vararg_ptr7>>2] = $26;
 (_printf((5312|0),($vararg_buffer4|0))|0);
 $27 = $dds_gen_size;
 $28 = (_malloc($27)|0);
 $ddsgendata = $28;
 $29 = $ddsgendata;
 $30 = $dds_gen_size;
 $31 = $dds_gen;
 $32 = (_fread(($29|0),1,($30|0),($31|0))|0);
 $33 = $dds_gen_size;
 $34 = ($32|0)==($33|0);
 if (!($34)) {
  ___assert_fail((5360|0),(5168|0),130,(5192|0));
  // unreachable;
 }
 $35 = $dds_gen;
 (_fclose(($35|0))|0);
 _glGenTextures(1,($texture|0));
 $36 = HEAP32[$texture>>2]|0;
 _glBindTexture(3553,($36|0));
 $37 = (_glGetError()|0);
 $38 = ($37|0)!=(0);
 if ($38) {
  ___assert_fail((5424|0),(5168|0),137,(5192|0));
  // unreachable;
 }
 $39 = $dds_gen_size;
 $40 = $0;
 $41 = (($39) - ($40))|0;
 $42 = $ddsgendata;
 $43 = $0;
 $44 = (($42) + ($43)|0);
 _glCompressedTexImage2D(3553,0,33777,512,512,0,($41|0),($44|0));
 $45 = (_glGetError()|0);
 $46 = ($45|0)!=(0);
 if ($46) {
  ___assert_fail((5424|0),(5168|0),139,(5192|0));
  // unreachable;
 }
 _glTexParameteri(3553,10241,9729);
 _glTexParameteri(3553,10240,9729);
 _glClear(16384);
 $47 = HEAP32[$texture>>2]|0;
 _glBindTexture(3553,($47|0));
 dest=$vertexData+0|0; src=5440+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 _glEnableClientState(32888);
 _glTexCoordPointer(2,5126,16,($vertexData|0));
 _glEnableClientState(32884);
 $48 = (($vertexData) + 8|0);
 _glVertexPointer(2,5126,16,($48|0));
 _glDrawArrays(7,0,4);
 _glDisableClientState(32888);
 _glDisableClientState(32884);
 _SDL_GL_SwapBuffers();
 STACKTOP = sp;return;
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0.0, $28 = 0, $280 = 0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0.0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0.0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0.0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_arr_ = 0, $_arr_13 = 0, $_arr_18 = 0, $_arr_5 = 0, $_arr_9 = 0, $block_image = 0, $bx = 0, $by = 0, $check_data = 0, $ciErrNum = 0, $ckKernel = 0;
 var $cmMemObjs = 0, $cmp = 0, $compressedSize = 0, $cpProgram = 0, $cqCommandQueue = 0, $cxGPUContext = 0, $dAvgTime = 0.0, $device = 0, $device_nr = 0, $filename = 0, $fp = 0, $generated = 0, $generatedSize = 0, $h_result = 0, $header = 0, $i = 0, $i1 = 0, $i10 = 0, $i14 = 0, $i15 = 0;
 var $i19 = 0, $i2 = 0, $i6 = 0, $image_path = 0, $numIterations = 0, $output_filename = 0, $permutations = 0, $program_length = 0, $reference = 0, $reference21 = 0, $referenceBlockIdx = 0, $referenceSize = 0, $referenceSize20 = 0, $reference_image_path = 0, $resultBlockIdx = 0, $rms = 0.0, $size = 0, $size11 = 0, $size16 = 0, $size3 = 0;
 var $size7 = 0, $source = 0, $source_path = 0, $szGlobalWorkSize = 0, $szLocalWorkSize = 0, $type = 0, $type12 = 0, $type17 = 0, $type4 = 0, $type8 = 0, $use_gpu = 0, $use_worker = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer21 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer31 = 0;
 var $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr24 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $x = 0, $x23 = 0, $y = 0, $y22 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1054512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer37 = sp + 80|0;
 $vararg_buffer34 = sp + 64|0;
 $vararg_buffer31 = sp + 88|0;
 $vararg_buffer29 = sp + 72|0;
 $vararg_buffer27 = sp + 104|0;
 $vararg_buffer21 = sp + 8|0;
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer13 = sp + 96|0;
 $vararg_buffer9 = sp;
 $vararg_buffer6 = sp + 56|0;
 $vararg_buffer1 = sp + 32|0;
 $vararg_buffer = sp + 120|0;
 $cmMemObjs = sp + 192|0;
 $szGlobalWorkSize = sp + 152|0;
 $szLocalWorkSize = sp + 140|0;
 $ciErrNum = sp + 164|0;
 $filename = sp + 168|0;
 $device_nr = sp + 4452|0;
 $permutations = sp + 232|0;
 $type = sp + 220|0;
 $_arr_ = sp + 208|0;
 $type4 = sp + 4336|0;
 $_arr_5 = sp + 4448|0;
 $type8 = sp + 160|0;
 $_arr_9 = sp + 4360|0;
 $program_length = sp + 4372|0;
 $source = sp + 4380|0;
 $type12 = sp + 4388|0;
 $_arr_13 = sp + 4392|0;
 $type17 = sp + 4456|0;
 $_arr_18 = sp + 4460|0;
 $output_filename = sp + 1053480|0;
 $header = sp + 4480|0;
 $check_data = sp + 4608|0;
 $0 = 0;
 $1 = $argc;
 $2 = $argv;
 _shrSetLogFileName(5504);
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$vararg_buffer>>2] = $4;
 (_shrLog(3,0,5528,$vararg_buffer)|0);
 $use_gpu = 1;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $1;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $2;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   break;
  }
  $10 = $i;
  $11 = $2;
  $12 = (($11) + ($10<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = $i;
   $16 = $2;
   $17 = (($16) + ($15<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (_strstr($18,5552)|0);
   $20 = ($19|0)!=(0|0);
   if ($20) {
    $use_gpu = 0;
   } else {
    $21 = $i;
    $22 = $2;
    $23 = (($22) + ($21<<2)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (_strstr($24,5560)|0);
    $26 = ($25|0)!=(0|0);
    if ($26) {
     $use_gpu = 1;
    }
   }
  } else {
  }
  $27 = $i;
  $28 = (($27) + 1)|0;
  $i = $28;
 }
 HEAP32[$ciErrNum>>2] = 0;
 $29 = $1;
 $30 = $2;
 $31 = (_shrGetCmdLineArgumentstr($29,$30,5568,$filename)|0);
 $32 = ($31|0)!=(0);
 if ($32) {
  $33 = HEAP32[$filename>>2]|0;
  HEAP32[4888>>2] = $33;
 }
 $use_worker = 0;
 $34 = HEAP32[4888>>2]|0;
 $35 = $2;
 $36 = HEAP32[$35>>2]|0;
 $37 = (_shrFindFilePath($34,$36)|0);
 $image_path = $37;
 $38 = $image_path;
 $39 = ($38|0)!=(0|0);
 $40 = $39&1;
 __Z17__shrCheckErrorEXiiPFviEPKci($40,1,0,5168,220);
 $41 = $image_path;
 (_shrLoadPPM4ub($41,4936,4920,4928)|0);
 $42 = HEAP32[4936>>2]|0;
 $43 = ($42|0)!=(0|0);
 $44 = $43&1;
 __Z17__shrCheckErrorEXiiPFviEPKci($44,1,0,5168,222);
 $45 = $image_path;
 $46 = HEAP32[4920>>2]|0;
 $47 = HEAP32[4928>>2]|0;
 HEAP32[$vararg_buffer1>>2] = $45;
 $vararg_ptr4 = (($vararg_buffer1) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $46;
 $vararg_ptr5 = (($vararg_buffer1) + 8|0);
 HEAP32[$vararg_ptr5>>2] = $47;
 (_shrLog(3,0,5576,$vararg_buffer1)|0);
 $48 = HEAP32[4920>>2]|0;
 $49 = HEAP32[4928>>2]|0;
 $50 = Math_imul($48, $49)|0;
 $51 = $50<<2;
 $52 = (_malloc($51)|0);
 $block_image = $52;
 $by = 0;
 while(1) {
  $53 = $by;
  $54 = HEAP32[4928>>2]|0;
  $55 = (($54>>>0) / 4)&-1;
  $56 = ($53>>>0)<($55>>>0);
  if (!($56)) {
   break;
  }
  $bx = 0;
  while(1) {
   $57 = $bx;
   $58 = HEAP32[4920>>2]|0;
   $59 = (($58>>>0) / 4)&-1;
   $60 = ($57>>>0)<($59>>>0);
   if (!($60)) {
    break;
   }
   $i1 = 0;
   while(1) {
    $61 = $i1;
    $62 = ($61|0)<(16);
    if (!($62)) {
     break;
    }
    $63 = $i1;
    $64 = $63 & 3;
    $x = $64;
    $65 = $i1;
    $66 = (($65|0) / 4)&-1;
    $y = $66;
    $67 = $by;
    $68 = $67<<2;
    $69 = $y;
    $70 = (($68) + ($69))|0;
    $71 = $70<<2;
    $72 = HEAP32[4920>>2]|0;
    $73 = (($72>>>0) / 4)&-1;
    $74 = Math_imul($71, $73)|0;
    $75 = $bx;
    $76 = $75<<2;
    $77 = (($74) + ($76))|0;
    $78 = $x;
    $79 = (($77) + ($78))|0;
    $80 = HEAP32[4936>>2]|0;
    $81 = (($80) + ($79<<2)|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $by;
    $84 = HEAP32[4920>>2]|0;
    $85 = Math_imul($83, $84)|0;
    $86 = (($85>>>0) / 4)&-1;
    $87 = $bx;
    $88 = (($86) + ($87))|0;
    $89 = $88<<4;
    $90 = $i1;
    $91 = (($89) + ($90))|0;
    $92 = $block_image;
    $93 = (($92) + ($91<<2)|0);
    HEAP32[$93>>2] = $82;
    $94 = $i1;
    $95 = (($94) + 1)|0;
    $i1 = $95;
   }
   $96 = $bx;
   $97 = (($96) + 1)|0;
   $bx = $97;
  }
  $98 = $by;
  $99 = (($98) + 1)|0;
  $by = $99;
 }
 $100 = $use_gpu;
 $101 = ($100|0)==(1);
 $102 = $101 ? 4 : 2;
 $103 = ($102|0)<(0);
 $104 = $103 << 31 >> 31;
 $105 = (_clCreateContextFromType((0|0),($102|0),($104|0),(0|0),(0|0),($ciErrNum|0))|0);
 $cxGPUContext = $105;
 $106 = HEAP32[$ciErrNum>>2]|0;
 __Z17__shrCheckErrorEXiiPFviEPKci($106,0,0,5168,242);
 $107 = $1;
 $108 = $2;
 $109 = (_shrCheckCmdLineFlag($107,$108,5608)|0);
 $110 = ($109|0)!=(0);
 if ($110) {
  HEAP32[$device_nr>>2] = 0;
  $111 = $1;
  $112 = $2;
  (_shrGetCmdLineArgumenti($111,$112,5608,$device_nr)|0);
  $113 = $cxGPUContext;
  $114 = HEAP32[$device_nr>>2]|0;
  $115 = (_oclGetDev($113,$114)|0);
  $device = $115;
 } else {
  $116 = $cxGPUContext;
  $117 = (_oclGetMaxFlopsDev($116)|0);
  $device = $117;
 }
 $118 = $device;
 _oclPrintDevInfo(3,$118);
 $119 = $cxGPUContext;
 $120 = $device;
 $121 = (_clCreateCommandQueue(($119|0),($120|0),0,0,($ciErrNum|0))|0);
 $cqCommandQueue = $121;
 $122 = HEAP32[$ciErrNum>>2]|0;
 __Z17__shrCheckErrorEXiiPFviEPKci($122,0,0,5168,257);
 __ZL19computePermutationsPj($permutations);
 $size = 1;
 ;HEAP32[$_arr_+0>>2]=HEAP32[5616+0>>2]|0;
 $i2 = 0;
 while(1) {
  $123 = $i2;
  $124 = ($123>>>0)<(1);
  if (!($124)) {
   break;
  }
  $125 = $i2;
  $126 = (($_arr_) + ($125<<2)|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = $i2;
  $129 = (($type) + ($128<<2)|0);
  HEAP32[$129>>2] = $127;
  $130 = $i2;
  $131 = (($130) + 1)|0;
  $i2 = $131;
 }
 (_clSetTypePointer(($type|0),1)|0);
 $132 = $cxGPUContext;
 $133 = (_clCreateBuffer(($132|0),36,0,4096,($permutations|0),($ciErrNum|0))|0);
 HEAP32[$cmMemObjs>>2] = $133;
 $134 = HEAP32[$ciErrNum>>2]|0;
 __Z17__shrCheckErrorEXiiPFviEPKci($134,0,0,5168,269);
 $size3 = 1;
 ;HEAP32[$_arr_5+0>>2]=HEAP32[5624+0>>2]|0;
 $i6 = 0;
 while(1) {
  $135 = $i6;
  $136 = ($135>>>0)<(1);
  if (!($136)) {
   break;
  }
  $137 = $i6;
  $138 = (($_arr_5) + ($137<<2)|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = $i6;
  $141 = (($type4) + ($140<<2)|0);
  HEAP32[$141>>2] = $139;
  $142 = $i6;
  $143 = (($142) + 1)|0;
  $i6 = $143;
 }
 (_clSetTypePointer(($type4|0),1)|0);
 $144 = $cxGPUContext;
 $145 = HEAP32[4920>>2]|0;
 $146 = $145<<2;
 $147 = HEAP32[4928>>2]|0;
 $148 = Math_imul($146, $147)|0;
 $149 = (_clCreateBuffer(($144|0),4,0,($148|0),(0|0),($ciErrNum|0))|0);
 $150 = (($cmMemObjs) + 4|0);
 HEAP32[$150>>2] = $149;
 $151 = HEAP32[$ciErrNum>>2]|0;
 __Z17__shrCheckErrorEXiiPFviEPKci($151,0,0,5168,275);
 $152 = HEAP32[4920>>2]|0;
 $153 = (($152>>>0) / 4)&-1;
 $154 = HEAP32[4928>>2]|0;
 $155 = (($154>>>0) / 4)&-1;
 $156 = Math_imul($153, $155)|0;
 $157 = $156<<3;
 $compressedSize = $157;
 $size7 = 1;
 ;HEAP32[$_arr_9+0>>2]=HEAP32[5632+0>>2]|0;
 $i10 = 0;
 while(1) {
  $158 = $i10;
  $159 = ($158>>>0)<(1);
  if (!($159)) {
   break;
  }
  $160 = $i10;
  $161 = (($_arr_9) + ($160<<2)|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = $i10;
  $164 = (($type8) + ($163<<2)|0);
  HEAP32[$164>>2] = $162;
  $165 = $i10;
  $166 = (($165) + 1)|0;
  $i10 = $166;
 }
 (_clSetTypePointer(($type8|0),1)|0);
 $167 = $cxGPUContext;
 $168 = $compressedSize;
 $169 = (_clCreateBuffer(($167|0),2,0,($168|0),(0|0),($ciErrNum|0))|0);
 $170 = (($cmMemObjs) + 8|0);
 HEAP32[$170>>2] = $169;
 $171 = HEAP32[$ciErrNum>>2]|0;
 __Z17__shrCheckErrorEXiiPFviEPKci($171,0,0,5168,284);
 $172 = $compressedSize;
 $173 = (_malloc($172)|0);
 $h_result = $173;
 $174 = $2;
 $175 = HEAP32[$174>>2]|0;
 $176 = (_shrFindFilePath(5640,$175)|0);
 $source_path = $176;
 $177 = $source_path;
 HEAP32[$vararg_buffer6>>2] = $177;
 (_printf((5664|0),($vararg_buffer6|0))|0);
 $178 = $source_path;
 $179 = ($178|0)!=(0|0);
 $180 = $179&1;
 __Z17__shrCheckErrorEXiiPFviEPKci($180,1,0,5168,292);
 $181 = $source_path;
 $182 = (_oclLoadProgSource($181,5672,$program_length)|0);
 HEAP32[$source>>2] = $182;
 $183 = HEAP32[$source>>2]|0;
 $184 = ($183|0)!=(0|0);
 $185 = $184&1;
 __Z17__shrCheckErrorEXiiPFviEPKci($185,1,0,5168,294);
 $186 = $cxGPUContext;
 $187 = (_clCreateProgramWithSource(($186|0),1,($source|0),($program_length|0),($ciErrNum|0))|0);
 $cpProgram = $187;
 $188 = HEAP32[$ciErrNum>>2]|0;
 __Z17__shrCheckErrorEXiiPFviEPKci($188,0,0,5168,299);
 $189 = $cpProgram;
 $190 = (_clBuildProgram(($189|0),0,(0|0),(5680|0),(0|0),(0|0))|0);
 HEAP32[$ciErrNum>>2] = $190;
 $191 = HEAP32[$ciErrNum>>2]|0;
 $192 = ($191|0)!=(0);
 if ($192) {
  $193 = HEAP32[$ciErrNum>>2]|0;
  HEAP32[$vararg_buffer9>>2] = 5168;
  $vararg_ptr12 = (($vararg_buffer9) + 4|0);
  HEAP32[$vararg_ptr12>>2] = 306;
  (_shrLog(19,$193,5696,$vararg_buffer9)|0);
  $194 = $cpProgram;
  $195 = $cxGPUContext;
  $196 = (_oclGetFirstDev($195)|0);
  _oclLogBuildInfo($194,$196);
  $197 = $cpProgram;
  $198 = $cxGPUContext;
  $199 = (_oclGetFirstDev($198)|0);
  _oclLogPtx($197,$199,5720);
  $200 = HEAP32[$ciErrNum>>2]|0;
  __Z17__shrCheckErrorEXiiPFviEPKci($200,0,0,5168,309);
 }
 $201 = $cpProgram;
 $202 = (_clCreateKernel(($201|0),(5744|0),($ciErrNum|0))|0);
 $ckKernel = $202;
 $203 = HEAP32[$ciErrNum>>2]|0;
 __Z17__shrCheckErrorEXiiPFviEPKci($203,0,0,5168,314);
 $204 = $ckKernel;
 $205 = (_clSetKernelArg(($204|0),0,4,($cmMemObjs|0))|0);
 HEAP32[$ciErrNum>>2] = $205;
 $206 = $ckKernel;
 $207 = (($cmMemObjs) + 4|0);
 $208 = (_clSetKernelArg(($206|0),1,4,($207|0))|0);
 $209 = HEAP32[$ciErrNum>>2]|0;
 $210 = $209 | $208;
 HEAP32[$ciErrNum>>2] = $210;
 $211 = $ckKernel;
 $212 = (($cmMemObjs) + 8|0);
 $213 = (_clSetKernelArg(($211|0),2,4,($212|0))|0);
 $214 = HEAP32[$ciErrNum>>2]|0;
 $215 = $214 | $213;
 HEAP32[$ciErrNum>>2] = $215;
 $216 = $ckKernel;
 $217 = (_clSetKernelArg(($216|0),3,256,(0|0))|0);
 $218 = HEAP32[$ciErrNum>>2]|0;
 $219 = $218 | $217;
 HEAP32[$ciErrNum>>2] = $219;
 $220 = $ckKernel;
 $221 = (_clSetKernelArg(($220|0),4,256,(0|0))|0);
 $222 = HEAP32[$ciErrNum>>2]|0;
 $223 = $222 | $221;
 HEAP32[$ciErrNum>>2] = $223;
 $224 = $ckKernel;
 $225 = (_clSetKernelArg(($224|0),5,256,(0|0))|0);
 $226 = HEAP32[$ciErrNum>>2]|0;
 $227 = $226 | $225;
 HEAP32[$ciErrNum>>2] = $227;
 $228 = $ckKernel;
 $229 = (_clSetKernelArg(($228|0),6,384,(0|0))|0);
 $230 = HEAP32[$ciErrNum>>2]|0;
 $231 = $230 | $229;
 HEAP32[$ciErrNum>>2] = $231;
 $232 = $ckKernel;
 $233 = (_clSetKernelArg(($232|0),7,640,(0|0))|0);
 $234 = HEAP32[$ciErrNum>>2]|0;
 $235 = $234 | $233;
 HEAP32[$ciErrNum>>2] = $235;
 $236 = $ckKernel;
 $237 = (_clSetKernelArg(($236|0),8,64,(0|0))|0);
 $238 = HEAP32[$ciErrNum>>2]|0;
 $239 = $238 | $237;
 HEAP32[$ciErrNum>>2] = $239;
 $240 = HEAP32[$ciErrNum>>2]|0;
 __Z17__shrCheckErrorEXiiPFviEPKci($240,0,0,5168,326);
 $241 = HEAP32[4920>>2]|0;
 $242 = HEAP32[4928>>2]|0;
 HEAP32[$vararg_buffer13>>2] = $241;
 $vararg_ptr16 = (($vararg_buffer13) + 4|0);
 HEAP32[$vararg_ptr16>>2] = $242;
 (_shrLog(3,0,5760,$vararg_buffer13)|0);
 $size11 = 1;
 ;HEAP32[$_arr_13+0>>2]=HEAP32[5808+0>>2]|0;
 $i14 = 0;
 while(1) {
  $243 = $i14;
  $244 = ($243>>>0)<(1);
  if (!($244)) {
   break;
  }
  $245 = $i14;
  $246 = (($_arr_13) + ($245<<2)|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = $i14;
  $249 = (($type12) + ($248<<2)|0);
  HEAP32[$249>>2] = $247;
  $250 = $i14;
  $251 = (($250) + 1)|0;
  $i14 = $251;
 }
 (_clSetTypePointer(($type12|0),1)|0);
 $252 = $cqCommandQueue;
 $253 = (($cmMemObjs) + 4|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = HEAP32[4920>>2]|0;
 $256 = $255<<2;
 $257 = HEAP32[4928>>2]|0;
 $258 = Math_imul($256, $257)|0;
 $259 = $block_image;
 (_clEnqueueWriteBuffer(($252|0),($254|0),0,0,($258|0),($259|0),0,(0|0),(0|0))|0);
 $260 = HEAP32[4920>>2]|0;
 $261 = HEAP32[4928>>2]|0;
 $262 = Math_imul($260, $261)|0;
 $263 = $262<<2;
 HEAP32[$szGlobalWorkSize>>2] = $263;
 HEAP32[$szLocalWorkSize>>2] = 64;
 $264 = HEAP32[$szGlobalWorkSize>>2]|0;
 $265 = HEAP32[$szLocalWorkSize>>2]|0;
 HEAP32[$vararg_buffer17>>2] = $264;
 $vararg_ptr20 = (($vararg_buffer17) + 4|0);
 HEAP32[$vararg_ptr20>>2] = $265;
 (_printf((5816|0),($vararg_buffer17|0))|0);
 $numIterations = 100;
 $i15 = -1;
 while(1) {
  $266 = $i15;
  $267 = $numIterations;
  $268 = ($266|0)<($267|0);
  if (!($268)) {
   break;
  }
  $269 = $i15;
  $270 = ($269|0)==(0);
  if ($270) {
   $271 = $cqCommandQueue;
   (_clFinish(($271|0))|0);
   (+_shrDeltaT(0));
  }
  $272 = $cqCommandQueue;
  $273 = $ckKernel;
  $274 = (_clEnqueueNDRangeKernel(($272|0),($273|0),1,(0|0),($szGlobalWorkSize|0),($szLocalWorkSize|0),0,(0|0),(0|0))|0);
  HEAP32[$ciErrNum>>2] = $274;
  $275 = HEAP32[$ciErrNum>>2]|0;
  __Z17__shrCheckErrorEXiiPFviEPKci($275,0,0,5168,352);
  $276 = $i15;
  $277 = (($276) + 1)|0;
  $i15 = $277;
 }
 $278 = $cqCommandQueue;
 (_clFinish(($278|0))|0);
 $279 = (+_shrDeltaT(0));
 $280 = $numIterations;
 $281 = (+($280|0));
 $282 = $279 / $281;
 $dAvgTime = $282;
 $283 = HEAP32[4920>>2]|0;
 $284 = HEAP32[4928>>2]|0;
 $285 = Math_imul($283, $284)|0;
 $286 = (+($285>>>0));
 $287 = 9.9999999999999995E-7 * $286;
 $288 = $dAvgTime;
 $289 = $287 / $288;
 $290 = $dAvgTime;
 $291 = HEAP32[4920>>2]|0;
 $292 = HEAP32[4928>>2]|0;
 $293 = Math_imul($291, $292)|0;
 HEAPF64[tempDoublePtr>>3]=$289;HEAP32[$vararg_buffer21>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer21+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr24 = (($vararg_buffer21) + 8|0);
 HEAPF64[tempDoublePtr>>3]=$290;HEAP32[$vararg_ptr24>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr24+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $vararg_ptr25 = (($vararg_buffer21) + 16|0);
 HEAP32[$vararg_ptr25>>2] = $293;
 $vararg_ptr26 = (($vararg_buffer21) + 20|0);
 HEAP32[$vararg_ptr26>>2] = 1;
 (_shrLog(11,0,5840,$vararg_buffer21)|0);
 $size16 = 1;
 ;HEAP32[$_arr_18+0>>2]=HEAP32[5920+0>>2]|0;
 $i19 = 0;
 while(1) {
  $294 = $i19;
  $295 = ($294>>>0)<(1);
  if (!($295)) {
   break;
  }
  $296 = $i19;
  $297 = (($_arr_18) + ($296<<2)|0);
  $298 = HEAP32[$297>>2]|0;
  $299 = $i19;
  $300 = (($type17) + ($299<<2)|0);
  HEAP32[$300>>2] = $298;
  $301 = $i19;
  $302 = (($301) + 1)|0;
  $i19 = $302;
 }
 (_clSetTypePointer(($type17|0),1)|0);
 $303 = $cqCommandQueue;
 $304 = (($cmMemObjs) + 8|0);
 $305 = HEAP32[$304>>2]|0;
 $306 = $compressedSize;
 $307 = $h_result;
 $308 = (_clEnqueueReadBuffer(($303|0),($305|0),1,0,($306|0),($307|0),0,(0|0),(0|0))|0);
 HEAP32[$ciErrNum>>2] = $308;
 $309 = HEAP32[$ciErrNum>>2]|0;
 __Z17__shrCheckErrorEXiiPFviEPKci($309,0,0,5168,366);
 $fp = 0;
 $310 = $image_path;
 (_strcpy(($output_filename|0),($310|0))|0);
 $311 = $image_path;
 $312 = (_strlen(($311|0))|0);
 $313 = (($output_filename) + ($312)|0);
 $314 = (($313) + -3|0);
 (_strcpy(($314|0),(5928|0))|0);
 $315 = (_fopen(($output_filename|0),(5936|0))|0);
 $fp = $315;
 $316 = $fp;
 $317 = ($316|0)!=(0|0);
 $318 = $317&1;
 __Z17__shrCheckErrorEXiiPFviEPKci($318,1,0,5168,380);
 HEAP32[$header>>2] = 542327876;
 $319 = (($header) + 4|0);
 HEAP32[$319>>2] = 124;
 $320 = (($header) + 8|0);
 HEAP32[$320>>2] = 528391;
 $321 = HEAP32[4928>>2]|0;
 $322 = (($header) + 12|0);
 HEAP32[$322>>2] = $321;
 $323 = HEAP32[4920>>2]|0;
 $324 = (($header) + 16|0);
 HEAP32[$324>>2] = $323;
 $325 = $compressedSize;
 $326 = (($header) + 20|0);
 HEAP32[$326>>2] = $325;
 $327 = (($header) + 24|0);
 HEAP32[$327>>2] = 0;
 $328 = (($header) + 28|0);
 HEAP32[$328>>2] = 0;
 $329 = (($header) + 32|0);
 dest=$329+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $330 = (($header) + 76|0);
 HEAP32[$330>>2] = 32;
 $331 = (($header) + 76|0);
 $332 = (($331) + 4|0);
 HEAP32[$332>>2] = 4;
 $333 = (($header) + 76|0);
 $334 = (($333) + 8|0);
 HEAP32[$334>>2] = 827611204;
 $335 = (($header) + 76|0);
 $336 = (($335) + 12|0);
 HEAP32[$336>>2] = 0;
 $337 = (($header) + 76|0);
 $338 = (($337) + 16|0);
 HEAP32[$338>>2] = 0;
 $339 = (($header) + 76|0);
 $340 = (($339) + 20|0);
 HEAP32[$340>>2] = 0;
 $341 = (($header) + 76|0);
 $342 = (($341) + 24|0);
 HEAP32[$342>>2] = 0;
 $343 = (($header) + 76|0);
 $344 = (($343) + 28|0);
 HEAP32[$344>>2] = 0;
 $345 = (($header) + 108|0);
 HEAP32[$345>>2] = 4096;
 $346 = (($header) + 108|0);
 $347 = (($346) + 4|0);
 HEAP32[$347>>2] = 0;
 $348 = (($header) + 108|0);
 $349 = (($348) + 8|0);
 HEAP32[$349>>2] = 0;
 $350 = (($header) + 108|0);
 $351 = (($350) + 12|0);
 HEAP32[$351>>2] = 0;
 $352 = (($header) + 124|0);
 HEAP32[$352>>2] = 0;
 $353 = $fp;
 (_fwrite(($header|0),128,1,($353|0))|0);
 $354 = $h_result;
 $355 = $compressedSize;
 $356 = $fp;
 (_fwrite(($354|0),($355|0),1,($356|0))|0);
 $357 = $fp;
 (_fclose(($357|0))|0);
 _oclDeleteMemObjs($cmMemObjs,3);
 $358 = $ckKernel;
 (_clReleaseKernel(($358|0))|0);
 $359 = $cpProgram;
 (_clReleaseProgram(($359|0))|0);
 $360 = $cqCommandQueue;
 (_clReleaseCommandQueue(($360|0))|0);
 $361 = $cxGPUContext;
 (_clReleaseContext(($361|0))|0);
 $362 = $use_worker;
 $363 = ($362|0)!=(0);
 if ($363) {
  __Z11showtexturei(128);
  HEAP32[$check_data>>2] = 128;
  $364 = HEAP32[4920>>2]|0;
  $365 = (($check_data) + 4|0);
  HEAP32[$365>>2] = $364;
  $366 = HEAP32[4928>>2]|0;
  $367 = (($check_data) + 8|0);
  HEAP32[$367>>2] = $366;
  $fp = 0;
  $368 = (_fopen((5944|0),(5304|0))|0);
  $fp = $368;
  $referenceSize = 0;
  $reference = 0;
  $369 = $fp;
  $370 = ($369|0)!=(0|0);
  if ($370) {
   $371 = $fp;
   (_fseek(($371|0),128,0)|0);
   $372 = HEAP32[4920>>2]|0;
   $373 = (($372>>>0) / 4)&-1;
   $374 = HEAP32[4928>>2]|0;
   $375 = (($374>>>0) / 4)&-1;
   $376 = Math_imul($373, $375)|0;
   $377 = $376<<3;
   $referenceSize = $377;
   $378 = (($check_data) + 16|0);
   $379 = $referenceSize;
   $380 = $fp;
   (_fread(($378|0),($379|0),1,($380|0))|0);
   $381 = $fp;
   (_fclose(($381|0))|0);
  }
  $fp = 0;
  $382 = (_fopen((5288|0),(5304|0))|0);
  $fp = $382;
  $generatedSize = 0;
  $generated = 0;
  $383 = $fp;
  $384 = ($383|0)!=(0|0);
  if ($384) {
   $385 = $fp;
   (_fseek(($385|0),128,0)|0);
   $386 = HEAP32[4920>>2]|0;
   $387 = (($386>>>0) / 4)&-1;
   $388 = HEAP32[4928>>2]|0;
   $389 = (($388>>>0) / 4)&-1;
   $390 = Math_imul($387, $389)|0;
   $391 = $390<<3;
   $generatedSize = $391;
   $392 = (($check_data) + 524308|0);
   $393 = $generatedSize;
   $394 = $fp;
   (_fread(($392|0),($393|0),1,($394|0))|0);
   $395 = $fp;
   (_fclose(($395|0))|0);
  }
  $396 = $referenceSize;
  $397 = (($check_data) + 12|0);
  HEAP32[$397>>2] = $396;
  $398 = $generatedSize;
  $399 = (($check_data) + 524304|0);
  HEAP32[$399>>2] = $398;
  $400 = (_emscripten_create_worker((5968|0))|0);
  HEAP32[4944>>2] = $400;
  (_shrLog(3,0,5992,$vararg_buffer27)|0);
  $401 = HEAP32[4944>>2]|0;
  _emscripten_call_worker(($401|0),(6048|0),($check_data|0),1048856,(462|0),(0|0));
  $0 = 0;
  $488 = $0;
  STACKTOP = sp;return ($488|0);
 }
 __Z11showtexturei(128);
 (_shrLog(3,0,6064,$vararg_buffer29)|0);
 $402 = HEAP32[4912>>2]|0;
 $403 = $2;
 $404 = HEAP32[$403>>2]|0;
 $405 = (_shrFindFilePath($402,$404)|0);
 $reference_image_path = $405;
 $406 = $reference_image_path;
 $407 = ($406|0)!=(0|0);
 $408 = $407&1;
 __Z17__shrCheckErrorEXiiPFviEPKci($408,1,0,5168,492);
 $409 = $reference_image_path;
 $410 = (_fopen(($409|0),(5304|0))|0);
 $fp = $410;
 $411 = $fp;
 $412 = ($411|0)!=(0|0);
 $413 = $412&1;
 __Z17__shrCheckErrorEXiiPFviEPKci($413,1,0,5168,500);
 $414 = $fp;
 (_fseek(($414|0),128,0)|0);
 $415 = HEAP32[4920>>2]|0;
 $416 = (($415>>>0) / 4)&-1;
 $417 = HEAP32[4928>>2]|0;
 $418 = (($417>>>0) / 4)&-1;
 $419 = Math_imul($416, $418)|0;
 $420 = $419<<3;
 $referenceSize20 = $420;
 $421 = $referenceSize20;
 $422 = (_malloc($421)|0);
 $reference21 = $422;
 $423 = $reference21;
 $424 = $referenceSize20;
 $425 = $fp;
 (_fread(($423|0),($424|0),1,($425|0))|0);
 $426 = $fp;
 (_fclose(($426|0))|0);
 $427 = $referenceSize20;
 HEAP32[$vararg_buffer31>>2] = $427;
 (_printf((6112|0),($vararg_buffer31|0))|0);
 $rms = 0.0;
 $y22 = 0;
 while(1) {
  $428 = $y22;
  $429 = HEAP32[4928>>2]|0;
  $430 = ($428>>>0)<($429>>>0);
  if (!($430)) {
   break;
  }
  $x23 = 0;
  while(1) {
   $431 = $x23;
   $432 = HEAP32[4920>>2]|0;
   $433 = ($431>>>0)<($432>>>0);
   if (!($433)) {
    break;
   }
   $434 = $y22;
   $435 = (($434>>>0) / 4)&-1;
   $436 = HEAP32[4920>>2]|0;
   $437 = (($436>>>0) / 4)&-1;
   $438 = Math_imul($435, $437)|0;
   $439 = $x23;
   $440 = (($439>>>0) / 4)&-1;
   $441 = (($438) + ($440))|0;
   $referenceBlockIdx = $441;
   $442 = $y22;
   $443 = (($442>>>0) / 4)&-1;
   $444 = HEAP32[4920>>2]|0;
   $445 = (($444>>>0) / 4)&-1;
   $446 = Math_imul($443, $445)|0;
   $447 = $x23;
   $448 = (($447>>>0) / 4)&-1;
   $449 = (($446) + ($448))|0;
   $resultBlockIdx = $449;
   $450 = $h_result;
   $451 = $resultBlockIdx;
   $452 = (($450) + ($451<<3)|0);
   $453 = $reference21;
   $454 = $referenceBlockIdx;
   $455 = (($453) + ($454<<3)|0);
   $456 = (__Z12compareBlockPK9BlockDXT1S1_($452,$455)|0);
   $cmp = $456;
   $457 = $cmp;
   $458 = (+($457|0));
   $459 = $458 != 0.0;
   if ($459) {
    $460 = $h_result;
    $461 = $resultBlockIdx;
    $462 = (($460) + ($461<<3)|0);
    $463 = $reference21;
    $464 = $referenceBlockIdx;
    $465 = (($463) + ($464<<3)|0);
    (__Z12compareBlockPK9BlockDXT1S1_($462,$465)|0);
   }
   $466 = $cmp;
   $467 = (+($466|0));
   $468 = $rms;
   $469 = $468 + $467;
   $rms = $469;
   $470 = $x23;
   $471 = (($470) + 4)|0;
   $x23 = $471;
  }
  $472 = $y22;
  $473 = (($472) + 4)|0;
  $y22 = $473;
 }
 $474 = HEAP32[4920>>2]|0;
 $475 = HEAP32[4928>>2]|0;
 $476 = Math_imul($474, $475)|0;
 $477 = ($476*3)|0;
 $478 = (+($477>>>0));
 $479 = $rms;
 $480 = $479 / $478;
 $rms = $480;
 $481 = $rms;
 $482 = $481;
 HEAPF64[tempDoublePtr>>3]=$482;HEAP32[$vararg_buffer34>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer34+4>>2]=HEAP32[tempDoublePtr+4>>2];
 (_shrLog(3,0,4952,$vararg_buffer34)|0);
 $483 = $rms;
 $484 = $483 <= 0.019999999552965164;
 $485 = $484 ? 5000 : 5008;
 HEAP32[$vararg_buffer37>>2] = $485;
 (_shrLog(3,0,4984,$vararg_buffer37)|0);
 $486 = HEAP32[$source>>2]|0;
 _free($486);
 $487 = HEAP32[4936>>2]|0;
 _free($487);
 $0 = 0;
 $488 = $0;
 STACKTOP = sp;return ($488|0);
}
function __Z17__shrCheckErrorEXiiPFviEPKci($iSample,$iReference,$pCleanup,$cFile,$iLine) {
 $iSample = $iSample|0;
 $iReference = $iReference|0;
 $pCleanup = $pCleanup|0;
 $cFile = $cFile|0;
 $iLine = $iLine|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer2 = sp;
 $vararg_buffer = sp + 8|0;
 $0 = $iSample;
 $1 = $iReference;
 $2 = $pCleanup;
 $3 = $cFile;
 $4 = $iLine;
 $5 = $1;
 $6 = $0;
 $7 = ($5|0)!=($6|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = $4;
 $10 = $3;
 HEAP32[$vararg_buffer>>2] = $9;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 (_shrLog(19,$8,6128,$vararg_buffer)|0);
 $11 = $2;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  (_shrLog(35,0,6160,$vararg_buffer2)|0);
  _exit(1);
  // unreachable;
 }
 $13 = $2;
 FUNCTION_TABLE_vi[$13 & 1023](1);
 STACKTOP = sp;return;
}
function __ZL19computePermutationsPj($permutations) {
 $permutations = $permutations|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $hasThree = 0, $i = 0, $i11 = 0;
 var $i2 = 0, $i4 = 0, $imax = 0, $indices = 0, $j = 0, $j7 = 0, $jmax = 0, $jmax6 = 0, $k = 0, $kmax = 0, $m = 0, $m1 = 0, $m3 = 0, $m5 = 0, $m8 = 0, $num = 0, $p = 0, $p10 = 0, $permutation = 0, $permutation9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $indices = sp + 8|0;
 $0 = $permutations;
 $num = 0;
 $m = 0;
 while(1) {
  $1 = $m;
  $2 = ($1|0)<(16);
  if (!($2)) {
   break;
  }
  $3 = $m;
  $4 = (($indices) + ($3<<2)|0);
  HEAP32[$4>>2] = 0;
  $5 = $m;
  $6 = (($5) + 1)|0;
  $m = $6;
 }
 $imax = 15;
 $i = 15;
 while(1) {
  $7 = $i;
  $8 = ($7|0)>=(0);
  if (!($8)) {
   break;
  }
  $9 = $i;
  $m1 = $9;
  while(1) {
   $10 = $m1;
   $11 = ($10|0)<(16);
   if (!($11)) {
    break;
   }
   $12 = $m1;
   $13 = (($indices) + ($12<<2)|0);
   HEAP32[$13>>2] = 2;
   $14 = $m1;
   $15 = (($14) + 1)|0;
   $m1 = $15;
  }
  $16 = $i;
  $17 = ($16|0)==(0);
  $18 = $17 ? 15 : 16;
  $jmax = $18;
  $19 = $jmax;
  $j = $19;
  while(1) {
   $20 = $j;
   $21 = $i;
   $22 = ($20|0)>=($21|0);
   if (!($22)) {
    break;
   }
   $23 = $j;
   $24 = ($23|0)<(16);
   if ($24) {
    $25 = $j;
    $26 = (($indices) + ($25<<2)|0);
    HEAP32[$26>>2] = 1;
   }
   $permutation = 0;
   $p = 0;
   while(1) {
    $27 = $p;
    $28 = ($27|0)<(16);
    if (!($28)) {
     break;
    }
    $29 = $p;
    $30 = (($indices) + ($29<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $p;
    $33 = $32<<1;
    $34 = $31 << $33;
    $35 = $permutation;
    $36 = $35 | $34;
    $permutation = $36;
    $37 = $p;
    $38 = (($37) + 1)|0;
    $p = $38;
   }
   $39 = $permutation;
   $40 = $num;
   $41 = $0;
   $42 = (($41) + ($40<<2)|0);
   HEAP32[$42>>2] = $39;
   $43 = $num;
   $44 = (($43) + 1)|0;
   $num = $44;
   $45 = $j;
   $46 = (($45) + -1)|0;
   $j = $46;
  }
  $47 = $i;
  $48 = (($47) + -1)|0;
  $i = $48;
 }
 $i2 = 0;
 while(1) {
  $49 = $i2;
  $50 = ($49|0)<(9);
  if (!($50)) {
   break;
  }
  $51 = $num;
  $52 = $0;
  $53 = (($52) + ($51<<2)|0);
  HEAP32[$53>>2] = 697685;
  $54 = $num;
  $55 = (($54) + 1)|0;
  $num = $55;
  $56 = $i2;
  $57 = (($56) + 1)|0;
  $i2 = $57;
 }
 $m3 = 0;
 while(1) {
  $58 = $m3;
  $59 = ($58|0)<(16);
  if (!($59)) {
   break;
  }
  $60 = $m3;
  $61 = (($indices) + ($60<<2)|0);
  HEAP32[$61>>2] = 0;
  $62 = $m3;
  $63 = (($62) + 1)|0;
  $m3 = $63;
 }
 $i4 = 15;
 while(1) {
  $64 = $i4;
  $65 = ($64|0)>=(0);
  if (!($65)) {
   break;
  }
  $66 = $i4;
  $m5 = $66;
  while(1) {
   $67 = $m5;
   $68 = ($67|0)<(16);
   if (!($68)) {
    break;
   }
   $69 = $m5;
   $70 = (($indices) + ($69<<2)|0);
   HEAP32[$70>>2] = 2;
   $71 = $m5;
   $72 = (($71) + 1)|0;
   $m5 = $72;
  }
  $73 = $i4;
  $74 = ($73|0)==(0);
  $75 = $74 ? 15 : 16;
  $jmax6 = $75;
  $76 = $jmax6;
  $j7 = $76;
  while(1) {
   $77 = $j7;
   $78 = $i4;
   $79 = ($77|0)>=($78|0);
   if (!($79)) {
    break;
   }
   $80 = $j7;
   $m8 = $80;
   while(1) {
    $81 = $m8;
    $82 = ($81|0)<(16);
    if (!($82)) {
     break;
    }
    $83 = $m8;
    $84 = (($indices) + ($83<<2)|0);
    HEAP32[$84>>2] = 3;
    $85 = $m8;
    $86 = (($85) + 1)|0;
    $m8 = $86;
   }
   $87 = $j7;
   $88 = ($87|0)==(0);
   $89 = $88 ? 15 : 16;
   $kmax = $89;
   $90 = $kmax;
   $k = $90;
   while(1) {
    $91 = $k;
    $92 = $j7;
    $93 = ($91|0)>=($92|0);
    if (!($93)) {
     break;
    }
    $94 = $k;
    $95 = ($94|0)<(16);
    if ($95) {
     $96 = $k;
     $97 = (($indices) + ($96<<2)|0);
     HEAP32[$97>>2] = 1;
    }
    $permutation9 = 0;
    $hasThree = 0;
    $p10 = 0;
    while(1) {
     $98 = $p10;
     $99 = ($98|0)<(16);
     if (!($99)) {
      break;
     }
     $100 = $p10;
     $101 = (($indices) + ($100<<2)|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = $p10;
     $104 = $103<<1;
     $105 = $102 << $104;
     $106 = $permutation9;
     $107 = $106 | $105;
     $permutation9 = $107;
     $108 = $p10;
     $109 = (($indices) + ($108<<2)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(3);
     if ($111) {
      $hasThree = 1;
     }
     $112 = $p10;
     $113 = (($112) + 1)|0;
     $p10 = $113;
    }
    $114 = $hasThree;
    $115 = $114&1;
    if ($115) {
     $116 = $permutation9;
     $117 = $num;
     $118 = $0;
     $119 = (($118) + ($117<<2)|0);
     HEAP32[$119>>2] = $116;
     $120 = $num;
     $121 = (($120) + 1)|0;
     $num = $121;
    }
    $122 = $k;
    $123 = (($122) + -1)|0;
    $k = $123;
   }
   $124 = $j7;
   $125 = (($124) + -1)|0;
   $j7 = $125;
  }
  $126 = $i4;
  $127 = (($126) + -1)|0;
  $i4 = $127;
 }
 $i11 = 0;
 while(1) {
  $128 = $i11;
  $129 = ($128|0)<(49);
  if (!($129)) {
   break;
  }
  $130 = $num;
  $131 = $0;
  $132 = (($131) + ($130<<2)|0);
  HEAP32[$132>>2] = 11206485;
  $133 = $num;
  $134 = (($133) + 1)|0;
  $num = $134;
  $135 = $i11;
  $136 = (($135) + 1)|0;
  $i11 = $136;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4InitC2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum$i = 0, $$sum$i1 = 0, $$sum$i11 = 0, $$sum$i9 = 0, $$sum1$i = 0, $$sum1$i10 = 0, $$sum1$i12 = 0, $$sum1$i2 = 0, $$sum19 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[_stdin>>2]|0;
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(6888,$0,6944);
 HEAP32[6176>>2] = ((8136 + 12|0));
 HEAP32[((6176 + 8|0))>>2] = ((8136 + 32|0));
 HEAP32[((6176 + 4|0))>>2] = 0;
 $1 = HEAP32[8136>>2]|0;
 $2 = (6176 + ($1)|0);
 __THREW__ = 0;
 invoke_vii(418,($2|0),(6888|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(((6176 + 8|0)));
  ___resumeException($5|0);
  // unreachable;
 }
 $$sum$i = (($1) + 72)|0;
 $7 = (6176 + ($$sum$i)|0);
 HEAP32[$7>>2] = 0;
 $$sum1$i = (($1) + 76)|0;
 $8 = (6176 + ($$sum1$i)|0);
 HEAP32[$8>>2] = -1;
 $9 = HEAP32[_stdout>>2]|0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(6992,$9,((6944 + 8|0)));
 HEAP32[6264>>2] = ((8216 + 12|0));
 HEAP32[((6264 + 4|0))>>2] = ((8216 + 32|0));
 $10 = HEAP32[8216>>2]|0;
 $11 = (6264 + ($10)|0);
 __THREW__ = 0;
 invoke_vii(418,($11|0),(6992|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(((6264 + 4|0)));
  ___resumeException($14|0);
  // unreachable;
 }
 $$sum$i1 = (($10) + 72)|0;
 $16 = (6264 + ($$sum$i1)|0);
 HEAP32[$16>>2] = 0;
 $$sum1$i2 = (($10) + 76)|0;
 $17 = (6264 + ($$sum1$i2)|0);
 HEAP32[$17>>2] = -1;
 $18 = HEAP32[_stderr>>2]|0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(7040,$18,((6944 + 16|0)));
 HEAP32[6352>>2] = ((8216 + 12|0));
 HEAP32[((6352 + 4|0))>>2] = ((8216 + 32|0));
 $19 = (6352 + ($10)|0);
 __THREW__ = 0;
 invoke_vii(418,($19|0),(7040|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(((6352 + 4|0)));
  ___resumeException($22|0);
  // unreachable;
 }
 $24 = (6352 + ($$sum$i1)|0);
 HEAP32[$24>>2] = 0;
 $25 = (6352 + ($$sum1$i2)|0);
 HEAP32[$25>>2] = -1;
 $26 = HEAP32[6352>>2]|0;
 $27 = (($26) + -12|0);
 $28 = HEAP32[$27>>2]|0;
 $$sum = (($28) + 24)|0;
 $29 = (6352 + ($$sum)|0);
 $30 = HEAP32[$29>>2]|0;
 HEAP32[6440>>2] = ((8216 + 12|0));
 HEAP32[((6440 + 4|0))>>2] = ((8216 + 32|0));
 $31 = (6440 + ($10)|0);
 __THREW__ = 0;
 invoke_vii(418,($31|0),($30|0));
 $32 = __THREW__; __THREW__ = 0;
 $33 = $32&1;
 if ($33) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(((6440 + 4|0)));
  ___resumeException($34|0);
  // unreachable;
 }
 $36 = (6440 + ($$sum$i1)|0);
 HEAP32[$36>>2] = 0;
 $37 = (6440 + ($$sum1$i2)|0);
 HEAP32[$37>>2] = -1;
 $38 = HEAP32[6176>>2]|0;
 $39 = (($38) + -12|0);
 $40 = HEAP32[$39>>2]|0;
 $$sum19 = (($40) + 72)|0;
 $41 = (6176 + ($$sum19)|0);
 HEAP32[$41>>2] = 6264;
 $42 = HEAP32[6352>>2]|0;
 $43 = (($42) + -12|0);
 $44 = HEAP32[$43>>2]|0;
 $$sum20 = (($44) + 4)|0;
 $45 = (6352 + ($$sum20)|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 | 8192;
 HEAP32[$45>>2] = $47;
 $48 = HEAP32[6352>>2]|0;
 $49 = (($48) + -12|0);
 $50 = HEAP32[$49>>2]|0;
 $$sum21 = (($50) + 72)|0;
 $51 = (6352 + ($$sum21)|0);
 HEAP32[$51>>2] = 6264;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(7088,$0,((6944 + 24|0)));
 HEAP32[6528>>2] = ((8176 + 12|0));
 HEAP32[((6528 + 8|0))>>2] = ((8176 + 32|0));
 HEAP32[((6528 + 4|0))>>2] = 0;
 $52 = HEAP32[8176>>2]|0;
 $53 = (6528 + ($52)|0);
 __THREW__ = 0;
 invoke_vii(418,($53|0),(7088|0));
 $54 = __THREW__; __THREW__ = 0;
 $55 = $54&1;
 if ($55) {
  $56 = ___cxa_find_matching_catch()|0;
  $57 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(((6528 + 8|0)));
  ___resumeException($56|0);
  // unreachable;
 }
 $$sum$i9 = (($52) + 72)|0;
 $58 = (6528 + ($$sum$i9)|0);
 HEAP32[$58>>2] = 0;
 $$sum1$i10 = (($52) + 76)|0;
 $59 = (6528 + ($$sum1$i10)|0);
 HEAP32[$59>>2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(7144,$9,((6944 + 32|0)));
 HEAP32[6616>>2] = ((8256 + 12|0));
 HEAP32[((6616 + 4|0))>>2] = ((8256 + 32|0));
 $60 = HEAP32[8256>>2]|0;
 $61 = (6616 + ($60)|0);
 __THREW__ = 0;
 invoke_vii(418,($61|0),(7144|0));
 $62 = __THREW__; __THREW__ = 0;
 $63 = $62&1;
 if ($63) {
  $64 = ___cxa_find_matching_catch()|0;
  $65 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(((6616 + 4|0)));
  ___resumeException($64|0);
  // unreachable;
 }
 $$sum$i11 = (($60) + 72)|0;
 $66 = (6616 + ($$sum$i11)|0);
 HEAP32[$66>>2] = 0;
 $$sum1$i12 = (($60) + 76)|0;
 $67 = (6616 + ($$sum1$i12)|0);
 HEAP32[$67>>2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(7192,$18,((6944 + 40|0)));
 HEAP32[6704>>2] = ((8256 + 12|0));
 HEAP32[((6704 + 4|0))>>2] = ((8256 + 32|0));
 $68 = (6704 + ($60)|0);
 __THREW__ = 0;
 invoke_vii(418,($68|0),(7192|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch()|0;
  $72 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(((6704 + 4|0)));
  ___resumeException($71|0);
  // unreachable;
 }
 $73 = (6704 + ($$sum$i11)|0);
 HEAP32[$73>>2] = 0;
 $74 = (6704 + ($$sum1$i12)|0);
 HEAP32[$74>>2] = -1;
 $75 = HEAP32[6704>>2]|0;
 $76 = (($75) + -12|0);
 $77 = HEAP32[$76>>2]|0;
 $$sum22 = (($77) + 24)|0;
 $78 = (6704 + ($$sum22)|0);
 $79 = HEAP32[$78>>2]|0;
 HEAP32[6792>>2] = ((8256 + 12|0));
 HEAP32[((6792 + 4|0))>>2] = ((8256 + 32|0));
 $80 = (6792 + ($60)|0);
 __THREW__ = 0;
 invoke_vii(418,($80|0),($79|0));
 $81 = __THREW__; __THREW__ = 0;
 $82 = $81&1;
 if ($82) {
  $83 = ___cxa_find_matching_catch()|0;
  $84 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(((6792 + 4|0)));
  ___resumeException($83|0);
  // unreachable;
 } else {
  $85 = (6792 + ($$sum$i11)|0);
  HEAP32[$85>>2] = 0;
  $86 = (6792 + ($$sum1$i12)|0);
  HEAP32[$86>>2] = -1;
  $87 = HEAP32[6528>>2]|0;
  $88 = (($87) + -12|0);
  $89 = HEAP32[$88>>2]|0;
  $$sum23 = (($89) + 72)|0;
  $90 = (6528 + ($$sum23)|0);
  HEAP32[$90>>2] = 6616;
  $91 = HEAP32[6704>>2]|0;
  $92 = (($91) + -12|0);
  $93 = HEAP32[$92>>2]|0;
  $$sum24 = (($93) + 4)|0;
  $94 = (6704 + ($$sum24)|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $95 | 8192;
  HEAP32[$94>>2] = $96;
  $97 = HEAP32[6704>>2]|0;
  $98 = (($97) + -12|0);
  $99 = HEAP32[$98>>2]|0;
  $$sum25 = (($99) + 72)|0;
  $100 = (6704 + ($$sum25)|0);
  HEAP32[$100>>2] = 6616;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__18ios_base4InitD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 (invoke_ii(463,(6264|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  (invoke_ii(463,(6440|0))|0);
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  if (!($3)) {
   __THREW__ = 0;
   (invoke_ii(464,(6616|0))|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if (!($5)) {
    __THREW__ = 0;
    (invoke_ii(464,(6792|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     STACKTOP = sp;return;
    }
   }
  }
 }
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+1)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+-1)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[$this>>2]|0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($this);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt11logic_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((19304 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP8[$msg>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($msg) + 1|0);
  $7 = $6;
 } else {
  $4 = (($msg) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 __THREW__ = 0;
 invoke_vii(465,($0|0),($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  ___resumeException($10|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt11logic_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((19304 + 8|0));
 $0 = (($this) + 4|0);
 __THREW__ = 0;
 invoke_vii(465,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((19328 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP8[$msg>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($msg) + 1|0);
  $7 = $6;
 } else {
  $4 = (($msg) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 __THREW__ = 0;
 invoke_vii(465,($0|0),($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  ___resumeException($10|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((19328 + 8|0));
 $0 = (($this) + 4|0);
 __THREW__ = 0;
 invoke_vii(465,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = $ev;
 $0 = (($agg$result) + 4|0);
 HEAP32[$0>>2] = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 1023]($0,$this,$code);
 $4 = (($0) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($condition) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if (!($8)) {
  $12 = 0;
  STACKTOP = sp;return ($12|0);
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = HEAP32[$condition>>2]|0;
 $11 = ($9|0)==($10|0);
 $12 = $11;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($code) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  $5 = 0;
  STACKTOP = sp;return ($5|0);
 }
 $3 = HEAP32[$code>>2]|0;
 $4 = ($3|0)==($condition|0);
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strerror(($ev|0))|0);
 $1 = (_strlen(($0|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,$0,$1);
 STACKTOP = sp;return;
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$ec,$what_arg) {
 $agg$result = $agg$result|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$ec>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ;HEAP32[$agg$result+0>>2]=HEAP32[$what_arg+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$what_arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$what_arg+8>>2]|0;
  ;HEAP32[$what_arg+0>>2]=0|0;HEAP32[$what_arg+4>>2]=0|0;HEAP32[$what_arg+8>>2]=0|0;
  STACKTOP = sp;return;
 }
 $3 = HEAP8[$what_arg>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = $3&255;
  $9 = $8 >>> 1;
  $11 = $9;
 } else {
  $6 = (($what_arg) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $11 = $7;
 }
 $10 = ($11|0)==(0);
 if ($10) {
  $17 = $1;
 } else {
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($what_arg,7752)|0);
  $$pre = HEAP32[$ec>>2]|0;
  $17 = $$pre;
 }
 $12 = (($ec) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 FUNCTION_TABLE_viii[$16 & 1023]($0,$13,$17);
 $18 = HEAP8[$0>>0]|0;
 $19 = $18 & 1;
 $20 = ($19<<24>>24)==(0);
 if ($20) {
  $25 = (($0) + 1|0);
  $26 = $18&255;
  $27 = $26 >>> 1;
  $28 = $25;$29 = $27;
 } else {
  $21 = (($0) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($0) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $28 = $22;$29 = $24;
 }
 __THREW__ = 0;
 (invoke_iiii(466,($what_arg|0),($28|0),($29|0))|0);
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
  ___resumeException($32|0);
  // unreachable;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$what_arg+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$what_arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$what_arg+8>>2]|0;
 ;HEAP32[$what_arg+0>>2]=0|0;HEAP32[$what_arg+4>>2]=0|0;HEAP32[$what_arg+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg) {
 $this = $this|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = sp;
 $2 = (_strlen(($what_arg|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1,$what_arg,$2);
 __THREW__ = 0;
 invoke_viii(467,($0|0),($ec|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $$0 = $19;$$01 = $18;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  ___resumeException($$01|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(468,($this|0),($0|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  HEAP32[$this>>2] = ((7760 + 8|0));
  $7 = (($this) + 8|0);
  $8 = $ec;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = $7;
  $15 = $14;
  HEAP32[$15>>2] = $10;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = $13;
  STACKTOP = sp;return;
 }
 $20 = ___cxa_find_matching_catch()|0;
 $21 = tempRet0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 $$0 = $21;$$01 = $20;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func) {
 $flag = $flag|0;
 $arg = $arg|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((7904|0))|0);
 $0 = HEAP32[$flag>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  while(1) {
   (_pthread_cond_wait((7928|0),(7904|0))|0);
   $2 = HEAP32[$flag>>2]|0;
   $3 = ($2|0)==(1);
   if (!($3)) {
    break;
   }
  }
 }
 $4 = HEAP32[$flag>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  (_pthread_mutex_unlock((7904|0))|0);
  STACKTOP = sp;return;
 }
 HEAP32[$flag>>2] = 1;
 __THREW__ = 0;
 (invoke_ii(469,(7904|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __THREW__ = 0;
  invoke_vi($func|0,($arg|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   __THREW__ = 0;
   (invoke_ii(470,(7904|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    HEAP32[$flag>>2] = -1;
    __THREW__ = 0;
    (invoke_ii(469,(7904|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     __THREW__ = 0;
     (invoke_ii(471,(7928|0))|0);
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if (!($15)) {
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $16 = ___cxa_find_matching_catch(0|0)|0;
 $17 = tempRet0;
 (___cxa_begin_catch(($16|0))|0);
 __THREW__ = 0;
 (invoke_ii(470,(7904|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if (!($19)) {
  HEAP32[$flag>>2] = 0;
  __THREW__ = 0;
  (invoke_ii(469,(7904|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   __THREW__ = 0;
   (invoke_ii(471,(7928|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    __THREW__ = 0;
    invoke_v(472);
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if (!($25)) {
     // unreachable;
    }
   }
  }
 }
 $26 = ___cxa_find_matching_catch()|0;
 $27 = tempRet0;
 __THREW__ = 0;
 invoke_v(438);
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $30 = ___cxa_find_matching_catch(0|0)|0;
  $31 = tempRet0;
  ___clang_call_terminate($30);
  // unreachable;
 } else {
  ___resumeException($26|0);
  // unreachable;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(473,($0|0),(7976|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = ((19384 + 8|0));
  ___cxa_throw(($0|0),(19432|0),(372|0));
  // unreachable;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(473,($0|0),(7976|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = ((19448 + 8|0));
  ___cxa_throw(($0|0),(19496|0),(372|0));
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this+0>>2]=HEAP32[$__str+0>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
  STACKTOP = sp;return;
 } else {
  $3 = (($__str) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($__str) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$4,$6);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__n>>>0)<(11);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__n;
  $__p$0 = $7;
 }
 _memset(($__p$0|0),($__c|0),($__n|0))|0;
 $11 = (($__p$0) + ($__n)|0);
 HEAP8[$11>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($this,$__str,$__pos,$__n,$__a) {
 $this = $this|0;
 $__str = $__str|0;
 $__pos = $__pos|0;
 $__n = $__n|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($__str) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8>>>0)<($__pos>>>0);
 if ($7) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
  // unreachable;
 }
 if ($2) {
  $11 = (($__str) + 1|0);
  $13 = $11;
 } else {
  $9 = (($__str) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (($13) + ($__pos)|0);
 $14 = (($8) - ($__pos))|0;
 $15 = ($14>>>0)<($__n>>>0);
 $16 = $15 ? $14 : $__n;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$12,$16);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_jjRKS4_($this,$__str,$__pos,$__n,$__a) {
 $this = $this|0;
 $__str = $__str|0;
 $__pos = $__pos|0;
 $__n = $__n|0;
 $__a = $__a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($this,$__str,$__pos,$__n,$__a);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==($__str|0);
 if ($0) {
  STACKTOP = sp;return ($this|0);
 }
 $1 = HEAP8[$__str>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $8 = (($__str) + 1|0);
  $9 = $1&255;
  $10 = $9 >>> 1;
  $11 = $8;$12 = $10;
 } else {
  $4 = (($__str) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($__str) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $11 = $5;$12 = $7;
 }
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$11,$12)|0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = 10;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $7 = $phitmp$i;$9 = $5;
 }
 $6 = ($7>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 if ($6) {
  if ($10) {
   $24 = $9&255;
   $25 = $24 >>> 1;
   $27 = $25;
  } else {
   $22 = (($this) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $27 = $23;
  }
  $26 = (($__n) - ($7))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$7,$26,$27,0,$27,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 if ($10) {
  $13 = (($this) + 1|0);
  $14 = $13;
 } else {
  $11 = (($this) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $14 = $12;
 }
 _memmove(($14|0),($__s|0),($__n|0))|0;
 $15 = (($14) + ($__n)|0);
 HEAP8[$15>>0] = 0;
 $16 = HEAP8[$this>>0]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  $20 = $__n << 1;
  $21 = $20&255;
  HEAP8[$this>>0] = $21;
  STACKTOP = sp;return ($this|0);
 } else {
  $19 = (($this) + 4|0);
  HEAP32[$19>>2] = $__n;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($this) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8>>>0)<($__n>>>0);
 if ($7) {
  $9 = (($__n) - ($8))|0;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$9,$__c)|0);
  STACKTOP = sp;return;
 }
 if ($2) {
  $14 = ((($this) + ($__n)|0) + 1|0);
  HEAP8[$14>>0] = 0;
  $15 = $__n << 1;
  $16 = $15&255;
  HEAP8[$this>>0] = $16;
  STACKTOP = sp;return;
 } else {
  $10 = (($this) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($__n)|0);
  HEAP8[$12>>0] = 0;
  $13 = (($this) + 4|0);
  HEAP32[$13>>2] = $__n;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)==(0);
 if ($0) {
  STACKTOP = sp;return ($this|0);
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $15 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $15 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $16 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $16 = $11;
 }
 $14 = (($15) - ($16))|0;
 $17 = ($14>>>0)<($__n>>>0);
 if ($17) {
  $18 = (($__n) - ($15))|0;
  $19 = (($18) + ($16))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
  $$pre = HEAP8[$this>>0]|0;
  $21 = $$pre;
 } else {
  $21 = $8;
 }
 $20 = $21 & 1;
 $22 = ($20<<24>>24)==(0);
 if ($22) {
  $25 = (($this) + 1|0);
  $27 = $25;
 } else {
  $23 = (($this) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 }
 $26 = (($27) + ($16)|0);
 _memset(($26|0),($__c|0),($__n|0))|0;
 $28 = (($16) + ($__n))|0;
 $29 = HEAP8[$this>>0]|0;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)==(0);
 if ($31) {
  $33 = $28 << 1;
  $34 = $33&255;
  HEAP8[$this>>0] = $34;
 } else {
  $32 = (($this) + 4|0);
  HEAP32[$32>>2] = $28;
 }
 $35 = (($27) + ($28)|0);
 HEAP8[$35>>0] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0;
 var $__was_long$0$off0 = 0, $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $14 = ($15>>>0)>($__res_arg>>>0);
 $16 = $14 ? $15 : $__res_arg;
 $17 = ($16>>>0)<(11);
 if ($17) {
  $21 = 10;
 } else {
  $18 = (($16) + 16)|0;
  $19 = $18 & -16;
  $phitmp$i2 = (($19) + -1)|0;
  $21 = $phitmp$i2;
 }
 $20 = ($21|0)==($22|0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $23 = ($21|0)==(10);
 do {
  if ($23) {
   $24 = (($this) + 1|0);
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $42 = $8;$__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
  } else {
   $27 = ($21>>>0)>($22>>>0);
   $28 = (($21) + 1)|0;
   if ($27) {
    $29 = (__Znwj($28)|0);
    $__new_data$0 = $29;
   } else {
    __THREW__ = 0;
    $30 = (invoke_ii(474,($28|0))|0);
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     $33 = ___cxa_find_matching_catch(0|0)|0;
     $34 = tempRet0;
     (___cxa_begin_catch(($33|0))|0);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    } else {
     $__new_data$0 = $30;
    }
   }
   $35 = HEAP8[$this>>0]|0;
   $36 = $35 & 1;
   $37 = ($36<<24>>24)==(0);
   if ($37) {
    $40 = (($this) + 1|0);
    $42 = $35;$__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $40;$__was_long$0$off0 = 0;
    break;
   } else {
    $38 = (($this) + 8|0);
    $39 = HEAP32[$38>>2]|0;
    $42 = $35;$__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 $41 = $42 & 1;
 $43 = ($41<<24>>24)==(0);
 if ($43) {
  $46 = $42&255;
  $47 = $46 >>> 1;
  $49 = $47;
 } else {
  $44 = (($this) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $49 = $45;
 }
 $48 = (($49) + 1)|0;
 _memcpy(($__new_data$1|0),($__p$0|0),($48|0))|0;
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0);
 }
 if ($__now_long$0$off0) {
  $50 = (($21) + 1)|0;
  $51 = $50 | 1;
  HEAP32[$this>>2] = $51;
  $52 = (($this) + 4|0);
  HEAP32[$52>>2] = $15;
  $53 = (($this) + 8|0);
  HEAP32[$53>>2] = $__new_data$1;
  STACKTOP = sp;return;
 } else {
  $54 = $15 << 1;
  $55 = $54&255;
  HEAP8[$this>>0] = $55;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 1|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0>>0] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$22>>0] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0>>0] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$22>>0] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $14 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $14 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $15 = $12;
 } else {
  $9 = (($this) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $15 = $10;
 }
 $13 = (($14) - ($15))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $33 = (($__n) - ($14))|0;
  $34 = (($33) + ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$14,$34,$15,$15,0,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 $17 = ($__n|0)==(0);
 if ($17) {
  STACKTOP = sp;return ($this|0);
 }
 $18 = $7 & 1;
 $19 = ($18<<24>>24)==(0);
 if ($19) {
  $22 = (($this) + 1|0);
  $24 = $22;
 } else {
  $20 = (($this) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $24 = $21;
 }
 $23 = (($24) + ($15)|0);
 _memcpy(($23|0),($__s|0),($__n|0))|0;
 $25 = (($15) + ($__n))|0;
 $26 = HEAP8[$this>>0]|0;
 $27 = $26 & 1;
 $28 = ($27<<24>>24)==(0);
 if ($28) {
  $30 = $25 << 1;
  $31 = $30&255;
  HEAP8[$this>>0] = $31;
 } else {
  $29 = (($this) + 4|0);
  HEAP32[$29>>2] = $25;
 }
 $32 = (($24) + ($25)|0);
 HEAP8[$32>>0] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = ($__n_add|0)==(0);
 if (!($20)) {
  $21 = (($17) + ($__n_copy)|0);
  _memcpy(($21|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $22 = (($__old_sz) - ($__n_del))|0;
 $23 = ($22|0)==($__n_copy|0);
 if (!($23)) {
  $24 = (($22) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $25 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $26 = (($19) + ($$sum1)|0);
  _memcpy(($25|0),($26|0),($24|0))|0;
 }
 $27 = ($__old_cap|0)==(10);
 if ($27) {
  $28 = (($this) + 8|0);
  HEAP32[$28>>2] = $17;
  $29 = $16 | 1;
  HEAP32[$this>>2] = $29;
  $30 = (($22) + ($__n_add))|0;
  $31 = (($this) + 4|0);
  HEAP32[$31>>2] = $30;
  $32 = (($17) + ($30)|0);
  HEAP8[$32>>0] = 0;
  STACKTOP = sp;return;
 }
 __ZdlPv($19);
 $28 = (($this) + 8|0);
 HEAP32[$28>>2] = $17;
 $29 = $16 | 1;
 HEAP32[$this>>2] = $29;
 $30 = (($22) + ($__n_add))|0;
 $31 = (($this) + 4|0);
 HEAP32[$31>>2] = $30;
 $32 = (($17) + ($30)|0);
 HEAP8[$32>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = (($__old_sz) - ($__n_del))|0;
 $21 = ($20|0)==($__n_copy|0);
 if (!($21)) {
  $22 = (($20) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $23 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $24 = (($19) + ($$sum1)|0);
  _memcpy(($23|0),($24|0),($22|0))|0;
 }
 $25 = ($__old_cap|0)==(10);
 if ($25) {
  $26 = (($this) + 8|0);
  HEAP32[$26>>2] = $17;
  $27 = $16 | 1;
  HEAP32[$this>>2] = $27;
  STACKTOP = sp;return;
 }
 __ZdlPv($19);
 $26 = (($this) + 8|0);
 HEAP32[$26>>2] = $17;
 $27 = $16 | 1;
 HEAP32[$this>>2] = $27;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseEjj($this,$__pos,$__n) {
 $this = $this|0;
 $__pos = $__pos|0;
 $__n = $__n|0;
 var $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($this) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8>>>0)<($__pos>>>0);
 if ($7) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
  // unreachable;
 }
 $9 = ($__n|0)==(0);
 if ($9) {
  STACKTOP = sp;return ($this|0);
 }
 if ($2) {
  $12 = (($this) + 1|0);
  $19 = $12;
 } else {
  $10 = (($this) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $19 = $11;
 }
 $13 = (($8) - ($__pos))|0;
 $14 = ($13>>>0)<($__n>>>0);
 $15 = $14 ? $13 : $__n;
 $16 = ($13|0)==($15|0);
 if ($16) {
  $23 = $0;
 } else {
  $17 = (($13) - ($15))|0;
  $18 = (($19) + ($__pos)|0);
  $$sum = (($15) + ($__pos))|0;
  $20 = (($19) + ($$sum)|0);
  _memmove(($18|0),($20|0),($17|0))|0;
  $$pre = HEAP8[$this>>0]|0;
  $23 = $$pre;
 }
 $21 = (($8) - ($15))|0;
 $22 = $23 & 1;
 $24 = ($22<<24>>24)==(0);
 if ($24) {
  $26 = $21 << 1;
  $27 = $26&255;
  HEAP8[$this>>0] = $27;
 } else {
  $25 = (($this) + 4|0);
  HEAP32[$25>>2] = $21;
 }
 $28 = (($19) + ($21)|0);
 HEAP8[$28>>0] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjPKcj($this,$__pos,$__n1,$__s,$__n2) {
 $this = $this|0;
 $__pos = $__pos|0;
 $__n1 = $__n1|0;
 $__s = $__s|0;
 $__n2 = $__n2|0;
 var $$0 = 0, $$01 = 0, $$03 = 0, $$1 = 0, $$12 = 0, $$14 = 0, $$2 = 0, $$sum = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__n110 = 0, $__n111 = 0, $__n112 = 0, $or$cond = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($this) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8>>>0)<($__pos>>>0);
 if ($7) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
  // unreachable;
 }
 $9 = (($8) - ($__pos))|0;
 $10 = ($9>>>0)<($__n1>>>0);
 $11 = $10 ? $9 : $__n1;
 if ($2) {
  $17 = 10;$20 = $0;
 } else {
  $12 = HEAP32[$this>>2]|0;
  $13 = $12 & -2;
  $phitmp$i = (($13) + -1)|0;
  $14 = $12&255;
  $17 = $phitmp$i;$20 = $14;
 }
 $15 = (($11) - ($8))|0;
 $16 = (($15) + ($17))|0;
 $18 = ($16>>>0)<($__n2>>>0);
 if ($18) {
  $54 = (($8) + ($__n2))|0;
  $55 = (($54) - ($11))|0;
  $56 = (($55) - ($17))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$17,$56,$8,$__pos,$11,$__n2,$__s);
  STACKTOP = sp;return ($this|0);
 }
 $19 = $20 & 1;
 $21 = ($19<<24>>24)==(0);
 if ($21) {
  $24 = (($this) + 1|0);
  $30 = $24;
 } else {
  $22 = (($this) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $30 = $23;
 }
 $25 = ($11|0)==($__n2|0);
 do {
  if ($25) {
   $$1 = $__pos;$$12 = $__s;$$14 = $__n2;$__n112 = $__n2;
   label = 21;
  } else {
   $26 = (($9) - ($11))|0;
   $27 = ($9|0)==($11|0);
   if ($27) {
    $$1 = $__pos;$$12 = $__s;$$14 = $__n2;$__n112 = $9;
    label = 21;
   } else {
    $28 = ($11>>>0)>($__n2>>>0);
    $29 = (($30) + ($__pos)|0);
    if ($28) {
     _memmove(($29|0),($__s|0),($__n2|0))|0;
     $$sum7 = (($__n2) + ($__pos))|0;
     $31 = (($30) + ($$sum7)|0);
     $$sum8 = (($11) + ($__pos))|0;
     $32 = (($30) + ($$sum8)|0);
     _memmove(($31|0),($32|0),($26|0))|0;
     $$2 = $__n2;$__n111 = $11;
     break;
    }
    $33 = ($29>>>0)<($__s>>>0);
    $34 = (($30) + ($8)|0);
    $35 = ($34>>>0)>($__s>>>0);
    $or$cond = $33 & $35;
    do {
     if ($or$cond) {
      $$sum6 = (($11) + ($__pos))|0;
      $36 = (($30) + ($$sum6)|0);
      $37 = ($36>>>0)>($__s>>>0);
      if ($37) {
       _memmove(($29|0),($__s|0),($11|0))|0;
       $40 = (($__s) + ($__n2)|0);
       $41 = (($__n2) - ($11))|0;
       $$0 = $$sum6;$$01 = $40;$$03 = $41;$__n110 = 0;
       break;
      } else {
       $38 = (($__n2) - ($11))|0;
       $39 = (($__s) + ($38)|0);
       $$0 = $__pos;$$01 = $39;$$03 = $__n2;$__n110 = $11;
       break;
      }
     } else {
      $$0 = $__pos;$$01 = $__s;$$03 = $__n2;$__n110 = $11;
     }
    } while(0);
    $$sum = (($$0) + ($$03))|0;
    $42 = (($30) + ($$sum)|0);
    $$sum5 = (($$0) + ($__n110))|0;
    $43 = (($30) + ($$sum5)|0);
    _memmove(($42|0),($43|0),($26|0))|0;
    $$1 = $$0;$$12 = $$01;$$14 = $$03;$__n112 = $__n110;
    label = 21;
   }
  }
 } while(0);
 if ((label|0) == 21) {
  $44 = (($30) + ($$1)|0);
  _memmove(($44|0),($$12|0),($$14|0))|0;
  $$2 = $$14;$__n111 = $__n112;
 }
 $45 = (($$2) - ($__n111))|0;
 $46 = (($45) + ($8))|0;
 $47 = HEAP8[$this>>0]|0;
 $48 = $47 & 1;
 $49 = ($48<<24>>24)==(0);
 if ($49) {
  $51 = $46 << 1;
  $52 = $51&255;
  HEAP8[$this>>0] = $52;
 } else {
  $50 = (($this) + 4|0);
  HEAP32[$50>>2] = $46;
 }
 $53 = (($30) + ($46)|0);
 HEAP8[$53>>0] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($this,$__c,$__pos) {
 $this = $this|0;
 $__c = $__c|0;
 $__pos = $__pos|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = (($this) + 1|0);
  $8 = $0&255;
  $9 = $8 >>> 1;
  $11 = $9;$13 = $7;
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($this) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $11 = $6;$13 = $4;
 }
 $10 = ($11>>>0)>($__pos>>>0);
 if (!($10)) {
  $$0$i = -1;
  STACKTOP = sp;return ($$0$i|0);
 }
 $12 = (($13) + ($__pos)|0);
 $14 = (($11) - ($__pos))|0;
 $15 = $__c&255;
 $16 = (_memchr($12,$15,$14)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  $$0$i = -1;
  STACKTOP = sp;return ($$0$i|0);
 }
 $18 = $16;
 $19 = $13;
 $20 = (($18) - ($19))|0;
 $$0$i = $20;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindEcj($this,$__c,$__pos) {
 $this = $this|0;
 $__c = $__c|0;
 $__pos = $__pos|0;
 var $$0$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ps$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = (($this) + 1|0);
  $8 = $0&255;
  $9 = $8 >>> 1;
  $11 = $9;$15 = $7;
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($this) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $11 = $6;$15 = $4;
 }
 $10 = ($11|0)==(0);
 if ($10) {
  $$01$i = -1;
  STACKTOP = sp;return ($$01$i|0);
 }
 $12 = ($11>>>0)>($__pos>>>0);
 $13 = (($__pos) + 1)|0;
 $$0$i = $12 ? $13 : $11;
 $14 = (($15) + ($$0$i)|0);
 $__ps$0$i = $14;
 while(1) {
  $16 = ($__ps$0$i|0)==($15|0);
  if ($16) {
   $$01$i = -1;
   label = 9;
   break;
  }
  $17 = (($__ps$0$i) + -1|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = ($18<<24>>24)==($__c<<24>>24);
  if ($19) {
   break;
  } else {
   $__ps$0$i = $17;
  }
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return ($$01$i|0);
 }
 $20 = $17;
 $21 = $15;
 $22 = (($20) - ($21))|0;
 $$01$i = $22;
 STACKTOP = sp;return ($$01$i|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(2);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__sz;
  $__p$0 = $8;
 }
 (_wmemcpy($__p$0,$__s,$__sz)|0);
 $12 = (($__p$0) + ($__sz<<2)|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__n>>>0)<(2);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__n;
  $__p$0 = $8;
 }
 (_wmemset($__p$0,$__c,$__n)|0);
 $12 = (($__p$0) + ($__n<<2)|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = 1;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $7 = $phitmp$i;$9 = $5;
 }
 $6 = ($7>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 if ($6) {
  if ($10) {
   $24 = $9&255;
   $25 = $24 >>> 1;
   $27 = $25;
  } else {
   $22 = (($this) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $27 = $23;
  }
  $26 = (($__n) - ($7))|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$7,$26,$27,0,$27,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 if ($10) {
  $13 = (($this) + 4|0);
  $14 = $13;
 } else {
  $11 = (($this) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $14 = $12;
 }
 (_wmemmove($14,$__s,$__n)|0);
 $15 = (($14) + ($__n<<2)|0);
 HEAP32[$15>>2] = 0;
 $16 = HEAP8[$this>>0]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  $20 = $__n << 1;
  $21 = $20&255;
  HEAP8[$this>>0] = $21;
  STACKTOP = sp;return ($this|0);
 } else {
  $19 = (($this) + 4|0);
  HEAP32[$19>>2] = $__n;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0;
 var $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 1;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $14 = ($15>>>0)>($__res_arg>>>0);
 $16 = $14 ? $15 : $__res_arg;
 $17 = ($16>>>0)<(2);
 if ($17) {
  $21 = 1;
 } else {
  $18 = (($16) + 4)|0;
  $19 = $18 & -4;
  $phitmp$i2 = (($19) + -1)|0;
  $21 = $phitmp$i2;
 }
 $20 = ($21|0)==($22|0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $23 = ($21|0)==(1);
 do {
  if ($23) {
   $24 = (($this) + 4|0);
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $43 = $8;$__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
  } else {
   $27 = ($21>>>0)>($22>>>0);
   $28 = $21 << 2;
   $29 = (($28) + 4)|0;
   if ($27) {
    $30 = (__Znwj($29)|0);
    $$sink = $30;
   } else {
    __THREW__ = 0;
    $31 = (invoke_ii(474,($29|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     $34 = ___cxa_find_matching_catch(0|0)|0;
     $35 = tempRet0;
     (___cxa_begin_catch(($34|0))|0);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    } else {
     $$sink = $31;
    }
   }
   $36 = HEAP8[$this>>0]|0;
   $37 = $36 & 1;
   $38 = ($37<<24>>24)==(0);
   if ($38) {
    $41 = (($this) + 4|0);
    $43 = $36;$__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $41;$__was_long$0$off0 = 0;
    break;
   } else {
    $39 = (($this) + 8|0);
    $40 = HEAP32[$39>>2]|0;
    $43 = $36;$__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $40;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 $42 = $43 & 1;
 $44 = ($42<<24>>24)==(0);
 if ($44) {
  $47 = $43&255;
  $48 = $47 >>> 1;
  $50 = $48;
 } else {
  $45 = (($this) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $50 = $46;
 }
 $49 = (($50) + 1)|0;
 (_wmemcpy($__new_data$1,$__p$0,$49)|0);
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0);
 }
 if ($__now_long$0$off0) {
  $51 = (($21) + 1)|0;
  $52 = $51 | 1;
  HEAP32[$this>>2] = $52;
  $53 = (($this) + 4|0);
  HEAP32[$53>>2] = $15;
  $54 = (($this) + 8|0);
  HEAP32[$54>>2] = $__new_data$1;
  STACKTOP = sp;return;
 } else {
  $55 = $15 << 1;
  $56 = $55&255;
  HEAP8[$this>>0] = $56;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 1;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 4|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
  $__p$0 = (($$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = (($$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741806 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $20 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  (_wmemcpy($18,$20,$__n_copy)|0);
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy<<2)|0);
  (_wmemcpy($22,$__p_new_stuff,$__n_add)|0);
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $26 = (($18) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $27 = (($20) + ($$sum1<<2)|0);
  (_wmemcpy($26,$27,$25)|0);
 }
 $28 = ($__old_cap|0)==(1);
 if ($28) {
  $29 = (($this) + 8|0);
  HEAP32[$29>>2] = $18;
  $30 = $17 | 1;
  HEAP32[$this>>2] = $30;
  $31 = (($23) + ($__n_add))|0;
  $32 = (($this) + 4|0);
  HEAP32[$32>>2] = $31;
  $33 = (($18) + ($31<<2)|0);
  HEAP32[$33>>2] = 0;
  STACKTOP = sp;return;
 }
 __ZdlPv($20);
 $29 = (($this) + 8|0);
 HEAP32[$29>>2] = $18;
 $30 = $17 | 1;
 HEAP32[$this>>2] = $30;
 $31 = (($23) + ($__n_add))|0;
 $32 = (($this) + 4|0);
 HEAP32[$32>>2] = $31;
 $33 = (($18) + ($31<<2)|0);
 HEAP32[$33>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741807 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $20 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  (_wmemcpy($18,$20,$__n_copy)|0);
 }
 $21 = (($__old_sz) - ($__n_del))|0;
 $22 = ($21|0)==($__n_copy|0);
 if (!($22)) {
  $23 = (($21) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $24 = (($18) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $25 = (($20) + ($$sum1<<2)|0);
  (_wmemcpy($24,$25,$23)|0);
 }
 $26 = ($__old_cap|0)==(1);
 if ($26) {
  $27 = (($this) + 8|0);
  HEAP32[$27>>2] = $18;
  $28 = $17 | 1;
  HEAP32[$this>>2] = $28;
  STACKTOP = sp;return;
 }
 __ZdlPv($20);
 $27 = (($this) + 8|0);
 HEAP32[$27>>2] = $18;
 $28 = $17 | 1;
 HEAP32[$this>>2] = $28;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base5clearEj($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = (($this) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $5 = $state | 1;
  $6 = (($this) + 16|0);
  HEAP32[$6>>2] = $5;
 } else {
  $4 = (($this) + 16|0);
  HEAP32[$4>>2] = $state;
 }
 $7 = $3&1;
 $8 = $7 | $state;
 $9 = (($this) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8 & $10;
 $12 = ($11|0)==(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = (___cxa_allocate_exception(16)|0);
 (__ZNSt3__117iostream_categoryEv()|0);
 $14 = $0;
 $15 = $14;
 HEAP32[$15>>2] = 1;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = (8352);
 __THREW__ = 0;
 invoke_viii(475,($13|0),(8408|0),($0|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  ___cxa_free_exception(($13|0));
  ___resumeException($20|0);
  // unreachable;
 } else {
  ___cxa_throw(($13|0),(8456|0),(116|0));
  // unreachable;
 }
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8392 + 8|0));
 __THREW__ = 0;
 invoke_vii(476,($this|0),0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $11 = ___cxa_find_matching_catch(0|0)|0;
  $12 = tempRet0;
  ___clang_call_terminate($11);
  // unreachable;
 } else {
  $2 = (($this) + 28|0);
  __ZNSt3__16localeD2Ev($2);
  $3 = (($this) + 32|0);
  $4 = HEAP32[$3>>2]|0;
  _free($4);
  $5 = (($this) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  _free($6);
  $7 = (($this) + 48|0);
  $8 = HEAP32[$7>>2]|0;
  _free($8);
  $9 = (($this) + 60|0);
  $10 = HEAP32[$9>>2]|0;
  _free($10);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this,$ev) {
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 32|0);
 $4 = (($this) + 36|0);
 $i$01 = $1;
 while(1) {
  $5 = (($i$01) + -1)|0;
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($5<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$4>>2]|0;
  $10 = (($9) + ($5<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viii[$8 & 1023]($ev,$this,$11);
  $12 = ($5|0)==(0);
  if ($12) {
   break;
  } else {
   $i$01 = $5;
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18ios_base6getlocEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 28|0);
 __ZNSt3__16localeC2ERKS0_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4initEPv($this,$sb) {
 $this = $this|0;
 $sb = $sb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 HEAP32[$0>>2] = $sb;
 $not$ = ($sb|0)==(0|0);
 $1 = $not$&1;
 $2 = (($this) + 16|0);
 HEAP32[$2>>2] = $1;
 $3 = (($this) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = (($this) + 4|0);
 HEAP32[$4>>2] = 4098;
 $5 = (($this) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = (($this) + 8|0);
 HEAP32[$6>>2] = 6;
 $7 = (($this) + 32|0);
 $8 = (($this) + 28|0);
 dest=$7+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__16localeC2Ev($8);
 STACKTOP = sp;return;
}
function __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8008 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8008 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8008 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8008 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = (($this) + 8|0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 12|0);
 $2 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 1|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP8[$3>>0]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 1023]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   }
   $13 = $11&255;
   $storemerge = $13;
  }
  HEAP8[$$01>>0] = $storemerge;
  $14 = (($__i$02) + 1)|0;
  $15 = (($$01) + 1|0);
  $16 = ($14|0)<($__n|0);
  if ($16) {
   $$01 = $15;$__i$02 = $14;
  } else {
   $__i$0$lcssa = $14;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP8[$6>>0]|0;
 $9 = $8&255;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0;
 var $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 24|0);
 $2 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP8[$$02>>0]|0;
   $7 = (($3) + 1|0);
   HEAP32[$1>>2] = $7;
   HEAP8[$3>>0] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP8[$$02>>0]|0;
   $12 = $11&255;
   $13 = (FUNCTION_TABLE_iii[$10 & 1023]($this,$12)|0);
   $14 = ($13|0)==(-1);
   if ($14) {
    $__i$0$lcssa = $__i$01;
    label = 7;
    break;
   }
  }
  $15 = (($$02) + 1|0);
  $16 = (($__i$01) + 1)|0;
  $17 = ($16|0)<($__n|0);
  if ($17) {
   $$02 = $15;$__i$01 = $16;
  } else {
   $__i$0$lcssa = $16;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8072 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8072 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8072 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((8072 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = (($this) + 8|0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 12|0);
 $2 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 4|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP32[$3>>2]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 1023]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$02;
    label = 7;
    break;
   } else {
    $storemerge = $11;
   }
  }
  HEAP32[$$01>>2] = $storemerge;
  $13 = (($__i$02) + 1)|0;
  $14 = (($$01) + 4|0);
  $15 = ($13|0)<($__n|0);
  if ($15) {
   $$01 = $14;$__i$02 = $13;
  } else {
   $__i$0$lcssa = $13;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP32[$6>>2]|0;
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 24|0);
 $2 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP32[$$02>>2]|0;
   $7 = (($3) + 4|0);
   HEAP32[$1>>2] = $7;
   HEAP32[$3>>2] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$$02>>2]|0;
   $12 = (FUNCTION_TABLE_iii[$10 & 1023]($this,$11)|0);
   $13 = ($12|0)==(-1);
   if ($13) {
    $__i$0$lcssa = $__i$01;
    label = 7;
    break;
   }
  }
  $14 = (($$02) + 4|0);
  $15 = (($__i$01) + 1)|0;
  $16 = ($15|0)<($__n|0);
  if ($16) {
   $$02 = $14;$__i$01 = $15;
  } else {
   $__i$0$lcssa = $15;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($this,$__is,$__noskipws) {
 $this = $this|0;
 $__is = $__is|0;
 $__noskipws = $__noskipws|0;
 var $$ = 0, $$0$i$i = 0, $$sum = 0, $$sum$i = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $isascii1$i = 0, $or$cond = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP8[$this>>0] = 0;
 $1 = HEAP32[$__is>>2]|0;
 $2 = (($1) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__is) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $94 = (($__is) + ($3)|0);
  $95 = $5 | 4;
  __ZNSt3__18ios_base5clearEj($94,$95);
  STACKTOP = sp;return;
 }
 $$sum13 = (($3) + 72)|0;
 $7 = (($__is) + ($$sum13)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($8)|0);
 }
 do {
  if (!($__noskipws)) {
   $10 = HEAP32[$__is>>2]|0;
   $11 = (($10) + -12|0);
   $12 = HEAP32[$11>>2]|0;
   $$sum14 = (($12) + 4)|0;
   $13 = (($__is) + ($$sum14)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 & 4096;
   $16 = ($15|0)==(0);
   if (!($16)) {
    $$sum15 = (($12) + 28)|0;
    $17 = (($__is) + ($$sum15)|0);
    __ZNSt3__16localeC2ERKS0_($0,$17);
    __THREW__ = 0;
    $18 = (invoke_iii(432,($0|0),(10856|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $59 = ___cxa_find_matching_catch()|0;
     $60 = tempRet0;
     __ZNSt3__16localeD2Ev($0);
     ___resumeException($59|0);
     // unreachable;
    }
    __ZNSt3__16localeD2Ev($0);
    $21 = HEAP32[$__is>>2]|0;
    $22 = (($21) + -12|0);
    $23 = HEAP32[$22>>2]|0;
    $$sum$i = (($23) + 24)|0;
    $24 = (($__is) + ($$sum$i)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($18) + 8|0);
    $28 = $25;
    while(1) {
     $27 = ($28|0)==(0|0);
     if ($27) {
      break;
     }
     $29 = (($28) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($28) + 16|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($30|0)==($32|0);
     if ($33) {
      $34 = HEAP32[$28>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
      $38 = ($37|0)==(-1);
      $$ = $38 ? 0 : $28;
      $39 = ($$|0)==(0|0);
      if ($39) {
       break;
      } else {
       $41 = $$;
      }
     } else {
      $41 = $28;
     }
     $40 = (($41) + 12|0);
     $42 = HEAP32[$40>>2]|0;
     $43 = (($41) + 16|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ($42|0)==($44|0);
     if ($45) {
      $46 = HEAP32[$41>>2]|0;
      $47 = (($46) + 36|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = (FUNCTION_TABLE_ii[$48 & 1023]($41)|0);
      $$0$i$i = $49;
     } else {
      $50 = HEAP8[$42>>0]|0;
      $51 = $50&255;
      $$0$i$i = $51;
     }
     $52 = $$0$i$i&255;
     $isascii1$i = ($52<<24>>24)>(-1);
     if (!($isascii1$i)) {
      label = 20;
      break;
     }
     $sext = $$0$i$i << 24;
     $53 = $sext >> 24;
     $54 = HEAP32[$26>>2]|0;
     $55 = (($54) + ($53<<1)|0);
     $56 = HEAP16[$55>>1]|0;
     $57 = $56 & 8192;
     $58 = ($57<<16>>16)==(0);
     if ($58) {
      label = 20;
      break;
     }
     $61 = HEAP32[$40>>2]|0;
     $62 = HEAP32[$43>>2]|0;
     $63 = ($61|0)==($62|0);
     if ($63) {
      $64 = HEAP32[$41>>2]|0;
      $65 = (($64) + 40|0);
      $66 = HEAP32[$65>>2]|0;
      (FUNCTION_TABLE_ii[$66 & 1023]($41)|0);
      $28 = $41;
      continue;
     } else {
      $67 = (($61) + 1|0);
      HEAP32[$40>>2] = $67;
      $28 = $41;
      continue;
     }
    }
    if ((label|0) == 20) {
     $68 = ($41|0)==(0|0);
     if (!($68)) {
      $69 = (($41) + 12|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = (($41) + 16|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = ($70|0)==($72|0);
      if (!($73)) {
       break;
      }
      $74 = HEAP32[$41>>2]|0;
      $75 = (($74) + 36|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = (FUNCTION_TABLE_ii[$76 & 1023]($41)|0);
      $78 = ($77|0)==(-1);
      $79 = ($41|0)==(0|0);
      $or$cond = $78 | $79;
      if (!($or$cond)) {
       break;
      }
     }
    }
    $80 = HEAP32[$__is>>2]|0;
    $81 = (($80) + -12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (($__is) + ($82)|0);
    $$sum17 = (($82) + 16)|0;
    $84 = (($__is) + ($$sum17)|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $85 | 6;
    __ZNSt3__18ios_base5clearEj($83,$86);
   }
  }
 } while(0);
 $87 = HEAP32[$__is>>2]|0;
 $88 = (($87) + -12|0);
 $89 = HEAP32[$88>>2]|0;
 $$sum16 = (($89) + 16)|0;
 $90 = (($__is) + ($$sum16)|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91|0)==(0);
 $93 = $92&1;
 HEAP8[$this>>0] = $93;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return ($this|0);
 }
 __THREW__ = 0;
 invoke_vii(477,($__s|0),($this|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L4: do {
  if ($7) {
   $31 = ___cxa_find_matching_catch(0|0)|0;
   $32 = tempRet0;
   $$0 = $31;
  } else {
   $8 = HEAP8[$__s>>0]|0;
   $9 = ($8<<24>>24)==(0);
   do {
    if (!($9)) {
     $10 = HEAP32[$this>>2]|0;
     $11 = (($10) + -12|0);
     $12 = HEAP32[$11>>2]|0;
     $$sum1 = (($12) + 24)|0;
     $13 = (($this) + ($$sum1)|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($15) + 24|0);
     $17 = HEAP32[$16>>2]|0;
     __THREW__ = 0;
     $18 = (invoke_ii($17|0,($14|0))|0);
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if (!($20)) {
      $21 = ($18|0)==(-1);
      if (!($21)) {
       break;
      }
      $22 = HEAP32[$this>>2]|0;
      $23 = (($22) + -12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (($this) + ($24)|0);
      $$sum2 = (($24) + 16)|0;
      $26 = (($this) + ($$sum2)|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = $27 | 1;
      __THREW__ = 0;
      invoke_vii(435,($25|0),($28|0));
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if (!($30)) {
       break;
      }
     }
     $33 = ___cxa_find_matching_catch(0|0)|0;
     $34 = tempRet0;
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
     $$0 = $33;
     break L4;
    }
   } while(0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
   STACKTOP = sp;return ($this|0);
  }
 } while(0);
 (___cxa_begin_catch(($$0|0))|0);
 $35 = HEAP32[$this>>2]|0;
 $36 = (($35) + -12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($this) + ($37)|0);
 __THREW__ = 0;
 invoke_vi(437,($38|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if (!($40)) {
  ___cxa_end_catch();
  STACKTOP = sp;return ($this|0);
 }
 $41 = ___cxa_find_matching_catch()|0;
 $42 = tempRet0;
 __THREW__ = 0;
 invoke_v(438);
 $43 = __THREW__; __THREW__ = 0;
 $44 = $43&1;
 if ($44) {
  $45 = ___cxa_find_matching_catch(0|0)|0;
  $46 = tempRet0;
  ___clang_call_terminate($45);
  // unreachable;
 } else {
  ___resumeException($41|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 | 1;
 HEAP32[$0>>2] = $2;
 $3 = (($this) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 } else {
  ___cxa_rethrow();
  // unreachable;
 }
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre$phi9Z2D = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum$i = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__err = 0, $__s = 0, $__temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 28|0;
 $$byval_copy = sp + 16|0;
 $0 = sp + 20|0;
 $1 = sp + 24|0;
 $__s = sp + 32|0;
 $__err = sp;
 $__temp = sp + 12|0;
 $2 = sp + 8|0;
 $3 = sp + 4|0;
 __THREW__ = 0;
 invoke_viii(478,($__s|0),($this|0),0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if ($5) {
   label = 6;
  } else {
   $6 = HEAP8[$__s>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    STACKTOP = sp;return ($this|0);
   }
   HEAP32[$__err>>2] = 0;
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + -12|0);
   $10 = HEAP32[$9>>2]|0;
   $$sum = (($10) + 28)|0;
   $11 = (($this) + ($$sum)|0);
   __ZNSt3__16localeC2ERKS0_($2,$11);
   __THREW__ = 0;
   $12 = (invoke_iii(432,($2|0),(9360|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if (!($14)) {
    $15 = HEAP32[$this>>2]|0;
    $16 = (($15) + -12|0);
    $17 = HEAP32[$16>>2]|0;
    $$sum$i = (($17) + 24)|0;
    $18 = (($this) + ($$sum$i)|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($this) + ($17)|0);
    $21 = HEAP32[$12>>2]|0;
    $22 = (($21) + 16|0);
    $23 = HEAP32[$22>>2]|0;
    HEAP32[$0>>2] = $19;
    HEAP32[$1>>2] = 0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
    ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
    invoke_viiiiiii($23|0,($3|0),($12|0),($$byval_copy|0),($$byval_copy1|0),($20|0),($__err|0),($__temp|0));
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if (!($25)) {
     __ZNSt3__16localeD2Ev($2);
     $26 = HEAP32[$__temp>>2]|0;
     HEAP32[$__n>>2] = $26;
     $27 = HEAP32[$this>>2]|0;
     $28 = (($27) + -12|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (($this) + ($29)|0);
     $31 = HEAP32[$__err>>2]|0;
     $$sum7 = (($29) + 16)|0;
     $32 = (($this) + ($$sum7)|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = $33 | $31;
     __THREW__ = 0;
     invoke_vii(435,($30|0),($34|0));
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if ($36) {
      label = 6;
      break;
     }
     STACKTOP = sp;return ($this|0);
    }
   }
   $39 = ___cxa_find_matching_catch(0|0)|0;
   $40 = tempRet0;
   __ZNSt3__16localeD2Ev($2);
   $$0 = $39;$$pre$phi9Z2D = $this;$$pre$phiZ2D = $this;
  }
 } while(0);
 if ((label|0) == 6) {
  $37 = ___cxa_find_matching_catch(0|0)|0;
  $38 = tempRet0;
  $$0 = $37;$$pre$phi9Z2D = $this;$$pre$phiZ2D = $this;
 }
 (___cxa_begin_catch(($$0|0))|0);
 $41 = HEAP32[$$pre$phiZ2D>>2]|0;
 $42 = (($41) + -12|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($$pre$phi9Z2D) + ($43)|0);
 __THREW__ = 0;
 invoke_vi(437,($44|0));
 $45 = __THREW__; __THREW__ = 0;
 $46 = $45&1;
 if (!($46)) {
  ___cxa_end_catch();
  STACKTOP = sp;return ($this|0);
 }
 $47 = ___cxa_find_matching_catch()|0;
 $48 = tempRet0;
 __THREW__ = 0;
 invoke_v(438);
 $49 = __THREW__; __THREW__ = 0;
 $50 = $49&1;
 if ($50) {
  $51 = ___cxa_find_matching_catch(0|0)|0;
  $52 = tempRet0;
  ___clang_call_terminate($51);
  // unreachable;
 } else {
  ___resumeException($47|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return ($this|0);
 }
 __THREW__ = 0;
 invoke_vii(479,($__s|0),($this|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L4: do {
  if ($7) {
   $31 = ___cxa_find_matching_catch(0|0)|0;
   $32 = tempRet0;
   $$0 = $31;
  } else {
   $8 = HEAP8[$__s>>0]|0;
   $9 = ($8<<24>>24)==(0);
   do {
    if (!($9)) {
     $10 = HEAP32[$this>>2]|0;
     $11 = (($10) + -12|0);
     $12 = HEAP32[$11>>2]|0;
     $$sum1 = (($12) + 24)|0;
     $13 = (($this) + ($$sum1)|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($15) + 24|0);
     $17 = HEAP32[$16>>2]|0;
     __THREW__ = 0;
     $18 = (invoke_ii($17|0,($14|0))|0);
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if (!($20)) {
      $21 = ($18|0)==(-1);
      if (!($21)) {
       break;
      }
      $22 = HEAP32[$this>>2]|0;
      $23 = (($22) + -12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (($this) + ($24)|0);
      $$sum2 = (($24) + 16)|0;
      $26 = (($this) + ($$sum2)|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = $27 | 1;
      __THREW__ = 0;
      invoke_vii(435,($25|0),($28|0));
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if (!($30)) {
       break;
      }
     }
     $33 = ___cxa_find_matching_catch(0|0)|0;
     $34 = tempRet0;
     __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
     $$0 = $33;
     break L4;
    }
   } while(0);
   __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
   STACKTOP = sp;return ($this|0);
  }
 } while(0);
 (___cxa_begin_catch(($$0|0))|0);
 $35 = HEAP32[$this>>2]|0;
 $36 = (($35) + -12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($this) + ($37)|0);
 __THREW__ = 0;
 invoke_vi(437,($38|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if (!($40)) {
  ___cxa_end_catch();
  STACKTOP = sp;return ($this|0);
 }
 $41 = ___cxa_find_matching_catch()|0;
 $42 = tempRet0;
 __THREW__ = 0;
 invoke_v(438);
 $43 = __THREW__; __THREW__ = 0;
 $44 = $43&1;
 if ($44) {
  $45 = ___cxa_find_matching_catch(0|0)|0;
  $46 = tempRet0;
  ___clang_call_terminate($45);
  // unreachable;
 } else {
  ___resumeException($41|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $__os;
 $1 = HEAP32[$__os>>2]|0;
 $2 = (($1) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__os) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($3) + 72)|0;
 $7 = (($__os) + ($$sum1)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($8)|0);
 }
 HEAP8[$this>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this,$__os);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($4) + 16)|0;
 $8 = (($1) + ($$sum1)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($4) + 4)|0;
 $11 = (($1) + ($$sum2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 8192;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (__ZSt18uncaught_exceptionv()|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum3 = (($19) + 24)|0;
 $20 = (($16) + ($$sum3)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 __THREW__ = 0;
 $25 = (invoke_ii($24|0,($21|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = ($25|0)==(-1);
  if (!($28)) {
   STACKTOP = sp;return;
  }
  $29 = HEAP32[$0>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + ($32)|0);
  $$sum4 = (($32) + 16)|0;
  $34 = (($29) + ($$sum4)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 | 1;
  __THREW__ = 0;
  invoke_vii(435,($33|0),($36|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if (!($38)) {
   STACKTOP = sp;return;
  }
 }
 $39 = ___cxa_find_matching_catch(0|0)|0;
 $40 = tempRet0;
 (___cxa_begin_catch(($39|0))|0);
 __THREW__ = 0;
 invoke_v(438);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch(0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$pre$phi8Z2D = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum$i = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $8 = 0, $9 = 0, $__s = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $0 = sp + 20|0;
 $1 = sp + 16|0;
 $__s = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 __THREW__ = 0;
 invoke_vii(477,($__s|0),($this|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 L1: do {
  if ($5) {
   $55 = ___cxa_find_matching_catch(0|0)|0;
   $56 = tempRet0;
   $$1 = $55;$$pre$phi8Z2D = $this;$$pre$phiZ2D = $this;
  } else {
   $6 = HEAP8[$__s>>0]|0;
   $7 = ($6<<24>>24)==(0);
   do {
    if (!($7)) {
     $8 = HEAP32[$this>>2]|0;
     $9 = (($8) + -12|0);
     $10 = HEAP32[$9>>2]|0;
     $$sum = (($10) + 28)|0;
     $11 = (($this) + ($$sum)|0);
     __ZNSt3__16localeC2ERKS0_($2,$11);
     __THREW__ = 0;
     $12 = (invoke_iii(432,($2|0),(9544|0))|0);
     $13 = __THREW__; __THREW__ = 0;
     $14 = $13&1;
     if ($14) {
      $59 = ___cxa_find_matching_catch(0|0)|0;
      $60 = tempRet0;
      __ZNSt3__16localeD2Ev($2);
      $$0 = $59;
     } else {
      __ZNSt3__16localeD2Ev($2);
      $15 = HEAP32[$this>>2]|0;
      $16 = (($15) + -12|0);
      $17 = HEAP32[$16>>2]|0;
      $$sum$i = (($17) + 24)|0;
      $18 = (($this) + ($$sum$i)|0);
      $19 = HEAP32[$18>>2]|0;
      $20 = (($this) + ($17)|0);
      $$sum4 = (($17) + 76)|0;
      $21 = (($this) + ($$sum4)|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($22|0)==(-1);
      do {
       if ($23) {
        $$sum6 = (($17) + 28)|0;
        $24 = (($this) + ($$sum6)|0);
        __ZNSt3__16localeC2ERKS0_($1,$24);
        __THREW__ = 0;
        $25 = (invoke_iii(432,($1|0),(10856|0))|0);
        $26 = __THREW__; __THREW__ = 0;
        $27 = $26&1;
        if (!($27)) {
         $28 = HEAP32[$25>>2]|0;
         $29 = (($28) + 28|0);
         $30 = HEAP32[$29>>2]|0;
         __THREW__ = 0;
         $31 = (invoke_iii($30|0,($25|0),32)|0);
         $32 = __THREW__; __THREW__ = 0;
         $33 = $32&1;
         if (!($33)) {
          __ZNSt3__16localeD2Ev($1);
          $36 = $31 << 24 >> 24;
          HEAP32[$21>>2] = $36;
          $38 = $36;
          label = 9;
          break;
         }
        }
        $34 = ___cxa_find_matching_catch(0|0)|0;
        $35 = tempRet0;
        __ZNSt3__16localeD2Ev($1);
        $eh$lpad$body$indexZ2D = $34;
       } else {
        $38 = $22;
        label = 9;
       }
      } while(0);
      if ((label|0) == 9) {
       $37 = $38&255;
       $39 = HEAP32[$12>>2]|0;
       $40 = (($39) + 16|0);
       $41 = HEAP32[$40>>2]|0;
       HEAP32[$0>>2] = $19;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
       invoke_viiiiii($41|0,($3|0),($12|0),($$byval_copy|0),($20|0),($37|0),($__n|0));
       $42 = __THREW__; __THREW__ = 0;
       $43 = $42&1;
       if (!($43)) {
        $44 = HEAP32[$3>>2]|0;
        $45 = ($44|0)==(0|0);
        if (!($45)) {
         break;
        }
        $46 = HEAP32[$this>>2]|0;
        $47 = (($46) + -12|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = (($this) + ($48)|0);
        $$sum5 = (($48) + 16)|0;
        $50 = (($this) + ($$sum5)|0);
        $51 = HEAP32[$50>>2]|0;
        $52 = $51 | 5;
        __THREW__ = 0;
        invoke_vii(435,($49|0),($52|0));
        $53 = __THREW__; __THREW__ = 0;
        $54 = $53&1;
        if (!($54)) {
         break;
        }
       }
       $57 = ___cxa_find_matching_catch(0|0)|0;
       $58 = tempRet0;
       $eh$lpad$body$indexZ2D = $57;
      }
      $$0 = $eh$lpad$body$indexZ2D;
     }
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
     $$1 = $$0;$$pre$phi8Z2D = $this;$$pre$phiZ2D = $this;
     break L1;
    }
   } while(0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
   STACKTOP = sp;return ($this|0);
  }
 } while(0);
 (___cxa_begin_catch(($$1|0))|0);
 $61 = HEAP32[$$pre$phiZ2D>>2]|0;
 $62 = (($61) + -12|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($$pre$phi8Z2D) + ($63)|0);
 __THREW__ = 0;
 invoke_vi(437,($64|0));
 $65 = __THREW__; __THREW__ = 0;
 $66 = $65&1;
 if (!($66)) {
  ___cxa_end_catch();
  STACKTOP = sp;return ($this|0);
 }
 $67 = ___cxa_find_matching_catch()|0;
 $68 = tempRet0;
 __THREW__ = 0;
 invoke_v(438);
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch(0|0)|0;
  $72 = tempRet0;
  ___clang_call_terminate($71);
  // unreachable;
 } else {
  ___resumeException($67|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$pre = 0, $$pre$phi4Z2D = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 __THREW__ = 0;
 invoke_vii(477,($__s|0),($this|0));
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if ($1) {
   $33 = ___cxa_find_matching_catch(0|0)|0;
   $34 = tempRet0;
   $$0 = $33;$$pre$phi4Z2D = $this;$$pre$phiZ2D = $this;
  } else {
   $2 = HEAP8[$__s>>0]|0;
   $3 = ($2<<24>>24)==(0);
   do {
    if (!($3)) {
     $4 = HEAP32[$this>>2]|0;
     $5 = (($4) + -12|0);
     $6 = HEAP32[$5>>2]|0;
     $$sum$i = (($6) + 24)|0;
     $7 = (($this) + ($$sum$i)|0);
     $8 = HEAP32[$7>>2]|0;
     $9 = ($8|0)==(0|0);
     if ($9) {
      $25 = $4;
      label = 9;
     } else {
      $10 = (($8) + 24|0);
      $11 = HEAP32[$10>>2]|0;
      $12 = (($8) + 28|0);
      $13 = HEAP32[$12>>2]|0;
      $14 = ($11|0)==($13|0);
      if (!($14)) {
       $15 = (($11) + 1|0);
       HEAP32[$10>>2] = $15;
       HEAP8[$11>>0] = $__c;
       break;
      }
      $16 = HEAP32[$8>>2]|0;
      $17 = (($16) + 52|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = $__c&255;
      __THREW__ = 0;
      $20 = (invoke_iii($18|0,($8|0),($19|0))|0);
      $21 = __THREW__; __THREW__ = 0;
      $22 = $21&1;
      if (!($22)) {
       $23 = ($20|0)==(-1);
       if (!($23)) {
        break;
       }
       $$pre = HEAP32[$this>>2]|0;
       $25 = $$pre;
       label = 9;
      }
     }
     if ((label|0) == 9) {
      $24 = (($25) + -12|0);
      $26 = HEAP32[$24>>2]|0;
      $27 = (($this) + ($26)|0);
      $$sum = (($26) + 16)|0;
      $28 = (($this) + ($$sum)|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = $29 | 1;
      __THREW__ = 0;
      invoke_vii(435,($27|0),($30|0));
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if (!($32)) {
       break;
      }
     }
     $35 = ___cxa_find_matching_catch(0|0)|0;
     $36 = tempRet0;
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
     $$0 = $35;$$pre$phi4Z2D = $this;$$pre$phiZ2D = $this;
     break L1;
    }
   } while(0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
   STACKTOP = sp;return ($this|0);
  }
 } while(0);
 (___cxa_begin_catch(($$0|0))|0);
 $37 = HEAP32[$$pre$phiZ2D>>2]|0;
 $38 = (($37) + -12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (($$pre$phi4Z2D) + ($39)|0);
 __THREW__ = 0;
 invoke_vi(437,($40|0));
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if (!($42)) {
  ___cxa_end_catch();
  STACKTOP = sp;return ($this|0);
 }
 $43 = ___cxa_find_matching_catch()|0;
 $44 = tempRet0;
 __THREW__ = 0;
 invoke_v(438);
 $45 = __THREW__; __THREW__ = 0;
 $46 = $45&1;
 if ($46) {
  $47 = ___cxa_find_matching_catch(0|0)|0;
  $48 = tempRet0;
  ___clang_call_terminate($47);
  // unreachable;
 } else {
  ___resumeException($43|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $__os;
 $1 = HEAP32[$__os>>2]|0;
 $2 = (($1) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__os) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($3) + 72)|0;
 $7 = (($__os) + ($$sum1)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  (__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($8)|0);
 }
 HEAP8[$this>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($4) + 16)|0;
 $8 = (($1) + ($$sum1)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($4) + 4)|0;
 $11 = (($1) + ($$sum2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 8192;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (__ZSt18uncaught_exceptionv()|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum3 = (($19) + 24)|0;
 $20 = (($16) + ($$sum3)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 __THREW__ = 0;
 $25 = (invoke_ii($24|0,($21|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = ($25|0)==(-1);
  if (!($28)) {
   STACKTOP = sp;return;
  }
  $29 = HEAP32[$0>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + ($32)|0);
  $$sum4 = (($32) + 16)|0;
  $34 = (($29) + ($$sum4)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 | 1;
  __THREW__ = 0;
  invoke_vii(435,($33|0),($36|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if (!($38)) {
   STACKTOP = sp;return;
  }
 }
 $39 = ___cxa_find_matching_catch(0|0)|0;
 $40 = tempRet0;
 (___cxa_begin_catch(($39|0))|0);
 __THREW__ = 0;
 invoke_v(438);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch(0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + -8|0);
 __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + -8|0);
 $1 = (($0) + 12|0);
 __ZNSt3__18ios_baseD2Ev($1);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 12)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (8296|0);
}
function __ZNKSt3__119__iostream_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ev|0)!=(1);
 $1 = ($ev|0)<(257);
 $or$cond = $0 & $1;
 if ($or$cond) {
  __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev);
  STACKTOP = sp;return;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,8312,35);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__117iostream_categoryEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[8360>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((8360|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   HEAP32[8352>>2] = ((9128 + 8|0));
   (___cxa_atexit((120|0),(8352|0),(___dso_handle|0))|0);
   ___cxa_guard_release((8360|0));
  }
 }
 STACKTOP = sp;return (8352|0);
}
function __ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE($this,$msg,$ec) {
 $this = $this|0;
 $msg = $msg|0;
 $ec = $ec|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmpcast$byval_copy = sp + 8|0;
 $0 = sp;
 $1 = $ec;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
 __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$tmpcast$byval_copy,$msg);
 HEAP32[$this>>2] = ((8368 + 8|0));
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP8[$$024>>0]|0;
    $3 = HEAP8[$$015>>0]|0;
    $4 = ($2<<24>>24)<($3<<24>>24);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3<<24>>24)<($2<<24>>24);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = (($$024) + 1|0);
    $7 = (($$015) + 1|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $1 = $__h$02 << 4;
  $2 = HEAP8[$__p$01>>0]|0;
  $3 = $2 << 24 >> 24;
  $4 = (($3) + ($1))|0;
  $5 = $4 & -268435456;
  $6 = $5 >>> 24;
  $7 = $6 | $5;
  $8 = $7 ^ $4;
  $9 = (($__p$01) + 1|0);
  $10 = ($9|0)==($__hi|0);
  if ($10) {
   $__h$0$lcssa = $8;
   break;
  } else {
   $__h$02 = $8;$__p$01 = $9;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP32[$$024>>2]|0;
    $3 = HEAP32[$$015>>2]|0;
    $4 = ($2|0)<($3|0);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3|0)<($2|0);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = (($$024) + 4|0);
    $7 = (($$015) + 4|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $1 = $__h$02 << 4;
  $2 = HEAP32[$__p$01>>2]|0;
  $3 = (($2) + ($1))|0;
  $4 = $3 & -268435456;
  $5 = $4 >>> 24;
  $6 = $5 | $4;
  $7 = $6 ^ $3;
  $8 = (($__p$01) + 4|0);
  $9 = ($8|0)==($__hi|0);
  if ($9) {
   $__h$0$lcssa = $7;
   break;
  } else {
   $__h$02 = $7;$__p$01 = $8;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 56|0;
 $$byval_copy1 = sp + 36|0;
 $$byval_copy = sp;
 $__lv = sp + 48|0;
 $0 = sp + 52|0;
 $1 = sp + 60|0;
 $2 = sp + 32|0;
 $3 = sp + 44|0;
 $4 = sp + 40|0;
 $__names = sp + 8|0;
 $5 = sp + 4|0;
 $6 = (($__iob) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$__lv>>2] = -1;
  $10 = HEAP32[$this>>2]|0;
  $11 = (($10) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$__b>>2]|0;
  HEAP32[$1>>2] = $13;
  $14 = HEAP32[$__e>>2]|0;
  HEAP32[$2>>2] = $14;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$12 & 511]($0,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv);
  $15 = HEAP32[$0>>2]|0;
  HEAP32[$__b>>2] = $15;
  $16 = HEAP32[$__lv>>2]|0;
  if ((($16|0) == 1)) {
   HEAP8[$__v>>0] = 1;
  } else if ((($16|0) == 0)) {
   HEAP8[$__v>>0] = 0;
  } else {
   HEAP8[$__v>>0] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $15;
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($3,$__iob);
 __THREW__ = 0;
 $17 = (invoke_iii(432,($3|0),(10856|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $45 = ___cxa_find_matching_catch()|0;
  $46 = tempRet0;
  $47 = HEAP32[$3>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
  $$0 = $45;$$01 = $46;
  ___resumeException($$0|0);
  // unreachable;
 }
 $20 = HEAP32[$3>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
 __ZNKSt3__18ios_base6getlocEv($4,$__iob);
 __THREW__ = 0;
 $21 = (invoke_iii(432,($4|0),(11000|0))|0);
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $48 = ___cxa_find_matching_catch()|0;
  $49 = tempRet0;
  $50 = HEAP32[$4>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($50)|0);
  $$0 = $48;$$01 = $49;
  ___resumeException($$0|0);
  // unreachable;
 }
 $24 = HEAP32[$4>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($24)|0);
 $25 = HEAP32[$21>>2]|0;
 $26 = (($25) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 __THREW__ = 0;
 invoke_vii($27|0,($__names|0),($21|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $$02 = $__names;
 } else {
  $30 = (($__names) + 12|0);
  $31 = HEAP32[$21>>2]|0;
  $32 = (($31) + 28|0);
  $33 = HEAP32[$32>>2]|0;
  __THREW__ = 0;
  invoke_vii($33|0,($30|0),($21|0));
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if ($35) {
   $$02 = $30;
  } else {
   $36 = HEAP32[$__e>>2]|0;
   HEAP32[$5>>2] = $36;
   $37 = (($__names) + 24|0);
   __THREW__ = 0;
   ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
   $38 = (invoke_iiiiiiii(480,($__b|0),($$byval_copy2|0),($__names|0),($37|0),($17|0),($__err|0),1)|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    $57 = ___cxa_find_matching_catch()|0;
    $58 = tempRet0;
    $59 = (($__names) + 12|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($59);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names);
    $$0 = $57;$$01 = $58;
    ___resumeException($$0|0);
    // unreachable;
   } else {
    $41 = ($38|0)==($__names|0);
    $42 = $41&1;
    HEAP8[$__v>>0] = $42;
    $43 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $43;
    $44 = (($__names) + 12|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($44);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names);
    STACKTOP = sp;return;
   }
  }
 }
 $51 = ___cxa_find_matching_catch()|0;
 $52 = tempRet0;
 $53 = ($__names|0)==($$02|0);
 if ($53) {
  $$0 = $51;$$01 = $52;
  ___resumeException($$0|0);
  // unreachable;
 } else {
  $55 = $$02;
 }
 while(1) {
  $54 = (($55) + -12|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($54);
  $56 = ($54|0)==($__names|0);
  if ($56) {
   $$0 = $51;$$01 = $52;
   break;
  } else {
   $55 = $54;
  }
 }
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$pre = 0, $$pre$i$i$i8 = 0, $$pre$i2$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre34 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0;
 var $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i24 = 0, $tmp$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 188|0;
 $0 = sp + 200|0;
 $__buf = sp + 8|0;
 $__a_end = sp + 4|0;
 $__g = sp + 24|0;
 $__g_end = sp + 184|0;
 $__dc = sp + 204|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(431,($0|0),($__iob|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $85 = ___cxa_find_matching_catch()|0;
  $86 = tempRet0;
  $$0 = $85;$$01 = $86;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($$0|0);
  // unreachable;
 }
 __THREW__ = 0;
 $3 = (invoke_iii(432,($0|0),(10856|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($8|0,($3|0),(9368|0),(((9368 + 26|0))|0),($__atoms|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $11 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
   ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viii(417,($__buf|0),10,0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   L8: do {
    if ($13) {
     label = 39;
    } else {
     $14 = HEAP8[$__buf>>0]|0;
     $15 = $14 & 1;
     $16 = ($15<<24>>24)==(0);
     if ($16) {
      $19 = (($__buf) + 1|0);
      $$pre36 = (($__buf) + 8|0);
      $$pre$phi35Z2D = $19;$$pre$phi37Z2D = $$pre36;$20 = $19;
     } else {
      $17 = (($__buf) + 8|0);
      $18 = HEAP32[$17>>2]|0;
      $$pre34 = (($__buf) + 1|0);
      $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $17;$20 = $18;
     }
     HEAP32[$__a_end>>2] = $20;
     HEAP32[$__g_end>>2] = $__g;
     HEAP32[$__dc>>2] = 0;
     $21 = (($__buf) + 4|0);
     $$pre = HEAP32[$__b>>2]|0;
     $$pre$i$i$i8 = $$pre;$__a$0 = $20;
     L14: while(1) {
      $22 = ($$pre$i$i$i8|0)==(0|0);
      if ($22) {
       $36 = 0;
      } else {
       $23 = (($$pre$i$i$i8) + 12|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = (($$pre$i$i$i8) + 16|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($24|0)==($26|0);
       if ($27) {
        $28 = HEAP32[$$pre$i$i$i8>>2]|0;
        $29 = (($28) + 36|0);
        $30 = HEAP32[$29>>2]|0;
        __THREW__ = 0;
        $31 = (invoke_ii($30|0,($$pre$i$i$i8|0))|0);
        $32 = __THREW__; __THREW__ = 0;
        $33 = $32&1;
        if ($33) {
         label = 38;
         break;
        }
        $34 = ($31|0)==(-1);
        if ($34) {
         HEAP32[$__b>>2] = 0;
         $36 = 0;
        } else {
         $36 = $$pre$i$i$i8;
        }
       } else {
        $36 = $$pre$i$i$i8;
       }
      }
      $35 = ($36|0)==(0|0);
      $37 = HEAP32[$__e>>2]|0;
      $38 = ($37|0)==(0|0);
      do {
       if ($38) {
        label = 20;
       } else {
        $39 = (($37) + 12|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = (($37) + 16|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = ($40|0)==($42|0);
        if (!($43)) {
         if ($35) {
          $168 = $37;
          break;
         } else {
          $$pre$i2$i$i = $37;$__a$2 = $__a$0;
          break L14;
         }
        }
        $44 = HEAP32[$37>>2]|0;
        $45 = (($44) + 36|0);
        $46 = HEAP32[$45>>2]|0;
        __THREW__ = 0;
        $47 = (invoke_ii($46|0,($37|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         label = 38;
         break L14;
        }
        $50 = ($47|0)==(-1);
        if ($50) {
         HEAP32[$__e>>2] = 0;
         label = 20;
         break;
        } else {
         if ($35) {
          $168 = $37;
          break;
         } else {
          $$pre$i2$i$i = $37;$__a$2 = $__a$0;
          break L14;
         }
        }
       }
      } while(0);
      if ((label|0) == 20) {
       label = 0;
       if ($35) {
        $$pre$i2$i$i = 0;$__a$2 = $__a$0;
        break;
       } else {
        $168 = 0;
       }
      }
      $51 = HEAP32[$__a_end>>2]|0;
      $52 = HEAP8[$__buf>>0]|0;
      $53 = $52 & 1;
      $54 = ($53<<24>>24)==(0);
      if ($54) {
       $56 = $52&255;
       $57 = $56 >>> 1;
       $59 = $57;
      } else {
       $55 = HEAP32[$21>>2]|0;
       $59 = $55;
      }
      $58 = (($__a$0) + ($59)|0);
      $60 = ($51|0)==($58|0);
      if ($60) {
       if ($54) {
        $62 = $52&255;
        $63 = $62 >>> 1;
        $64 = $52&255;
        $65 = $64 >>> 1;
        $67 = $65;$84 = $63;
       } else {
        $61 = HEAP32[$21>>2]|0;
        $67 = $61;$84 = $61;
       }
       $66 = $67 << 1;
       __THREW__ = 0;
       invoke_viii(417,($__buf|0),($66|0),0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        label = 38;
        break;
       }
       $70 = HEAP8[$__buf>>0]|0;
       $71 = $70 & 1;
       $72 = ($71<<24>>24)==(0);
       if ($72) {
        $75 = 10;
       } else {
        $73 = HEAP32[$__buf>>2]|0;
        $74 = $73 & -2;
        $phitmp$i24 = (($74) + -1)|0;
        $75 = $phitmp$i24;
       }
       __THREW__ = 0;
       invoke_viii(417,($__buf|0),($75|0),0);
       $76 = __THREW__; __THREW__ = 0;
       $77 = $76&1;
       if ($77) {
        label = 38;
        break;
       }
       $78 = HEAP8[$__buf>>0]|0;
       $79 = $78 & 1;
       $80 = ($79<<24>>24)==(0);
       if ($80) {
        $83 = $$pre$phi35Z2D;
       } else {
        $81 = HEAP32[$$pre$phi37Z2D>>2]|0;
        $83 = $81;
       }
       $82 = (($83) + ($84)|0);
       HEAP32[$__a_end>>2] = $82;
       $__a$1 = $83;
      } else {
       $__a$1 = $__a$0;
      }
      $94 = (($36) + 12|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = (($36) + 16|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = ($95|0)==($97|0);
      if ($98) {
       $99 = HEAP32[$36>>2]|0;
       $100 = (($99) + 36|0);
       $101 = HEAP32[$100>>2]|0;
       __THREW__ = 0;
       $102 = (invoke_ii($101|0,($36|0))|0);
       $103 = __THREW__; __THREW__ = 0;
       $104 = $103&1;
       if ($104) {
        label = 38;
        break;
       } else {
        $$0$i$i = $102;
       }
      } else {
       $105 = HEAP8[$95>>0]|0;
       $106 = $105&255;
       $$0$i$i = $106;
      }
      $107 = $$0$i$i&255;
      $108 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($107,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
      $109 = ($108|0)==(0);
      if (!($109)) {
       $$pre$i2$i$i = $168;$__a$2 = $__a$1;
       break;
      }
      $110 = HEAP32[$94>>2]|0;
      $111 = HEAP32[$96>>2]|0;
      $112 = ($110|0)==($111|0);
      if ($112) {
       $113 = HEAP32[$36>>2]|0;
       $114 = (($113) + 40|0);
       $115 = HEAP32[$114>>2]|0;
       __THREW__ = 0;
       (invoke_ii($115|0,($36|0))|0);
       $116 = __THREW__; __THREW__ = 0;
       $117 = $116&1;
       if ($117) {
        label = 38;
        break;
       } else {
        $$pre$i$i$i8 = $36;$__a$0 = $__a$1;
        continue;
       }
      } else {
       $118 = (($110) + 1|0);
       HEAP32[$94>>2] = $118;
       $$pre$i$i$i8 = $36;$__a$0 = $__a$1;
       continue;
      }
     }
     if ((label|0) == 38) {
      $90 = ___cxa_find_matching_catch()|0;
      $91 = tempRet0;
      $lpad$phi$index = $90;$lpad$phi$index2 = $91;
      break;
     }
     $119 = HEAP32[$__a_end>>2]|0;
     $120 = $119;
     $121 = $__a$2;
     $122 = (($120) - ($121))|0;
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($122|0),0);
     $123 = __THREW__; __THREW__ = 0;
     $124 = $123&1;
     if ($124) {
      label = 39;
     } else {
      $125 = HEAP8[$__buf>>0]|0;
      $126 = $125 & 1;
      $127 = ($126<<24>>24)==(0);
      if ($127) {
       $132 = $$pre$phi35Z2D;
      } else {
       $128 = HEAP32[$$pre$phi37Z2D>>2]|0;
       $132 = $128;
      }
      __THREW__ = 0;
      $129 = (invoke_i(481)|0);
      $130 = __THREW__; __THREW__ = 0;
      $131 = $130&1;
      if ($131) {
       label = 39;
      } else {
       __THREW__ = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $133 = (invoke_iiiii(482,($132|0),($129|0),(9408|0),($vararg_buffer|0))|0);
       $134 = __THREW__; __THREW__ = 0;
       $135 = $134&1;
       if ($135) {
        label = 39;
       } else {
        $136 = ($133|0)==(1);
        if (!($136)) {
         HEAP32[$__err>>2] = 4;
        }
        $137 = ($36|0)==(0|0);
        if ($137) {
         $151 = 0;
        } else {
         $138 = (($36) + 12|0);
         $139 = HEAP32[$138>>2]|0;
         $140 = (($36) + 16|0);
         $141 = HEAP32[$140>>2]|0;
         $142 = ($139|0)==($141|0);
         if ($142) {
          $143 = HEAP32[$36>>2]|0;
          $144 = (($143) + 36|0);
          $145 = HEAP32[$144>>2]|0;
          __THREW__ = 0;
          $146 = (invoke_ii($145|0,($36|0))|0);
          $147 = __THREW__; __THREW__ = 0;
          $148 = $147&1;
          if ($148) {
           label = 39;
           break;
          }
          $149 = ($146|0)==(-1);
          if ($149) {
           HEAP32[$__b>>2] = 0;
           $151 = 0;
          } else {
           $151 = $36;
          }
         } else {
          $151 = $36;
         }
        }
        $150 = ($151|0)==(0|0);
        $152 = ($$pre$i2$i$i|0)==(0|0);
        do {
         if ($152) {
          label = 66;
         } else {
          $153 = (($$pre$i2$i$i) + 12|0);
          $154 = HEAP32[$153>>2]|0;
          $155 = (($$pre$i2$i$i) + 16|0);
          $156 = HEAP32[$155>>2]|0;
          $157 = ($154|0)==($156|0);
          if (!($157)) {
           if (!($150)) {
            break;
           }
           HEAP32[$agg$result>>2] = $151;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
           STACKTOP = sp;return;
          }
          $158 = HEAP32[$$pre$i2$i$i>>2]|0;
          $159 = (($158) + 36|0);
          $160 = HEAP32[$159>>2]|0;
          __THREW__ = 0;
          $161 = (invoke_ii($160|0,($$pre$i2$i$i|0))|0);
          $162 = __THREW__; __THREW__ = 0;
          $163 = $162&1;
          if ($163) {
           label = 39;
           break L8;
          }
          $164 = ($161|0)==(-1);
          if ($164) {
           HEAP32[$__e>>2] = 0;
           label = 66;
           break;
          }
          $165 = ($$pre$i2$i$i|0)==(0|0);
          $tmp$i$i = $150 ^ $165;
          if ($tmp$i$i) {
           HEAP32[$agg$result>>2] = $151;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
           STACKTOP = sp;return;
          }
         }
        } while(0);
        if ((label|0) == 66) {
         if (!($150)) {
          HEAP32[$agg$result>>2] = $151;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
          STACKTOP = sp;return;
         }
        }
        $166 = HEAP32[$__err>>2]|0;
        $167 = $166 | 2;
        HEAP32[$__err>>2] = $167;
        HEAP32[$agg$result>>2] = $151;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
        STACKTOP = sp;return;
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 39) {
    $92 = ___cxa_find_matching_catch()|0;
    $93 = tempRet0;
    $lpad$phi$index = $92;$lpad$phi$index2 = $93;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($$0|0);
   // unreachable;
  }
 }
 $87 = ___cxa_find_matching_catch()|0;
 $88 = tempRet0;
 $89 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($89)|0);
 $$0 = $87;$$01 = $88;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 24|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==($__ct<<24>>24);
   if (!($4)) {
    $5 = (($__atoms) + 25|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==($__ct<<24>>24);
    if (!($7)) {
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $10 = HEAP8[$__grouping>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $18 = $16;
 } else {
  $13 = (($__grouping) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $18 = $14;
 }
 $17 = ($18|0)!=(0);
 $19 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 $or$cond = $17 & $19;
 if ($or$cond) {
  $20 = HEAP32[$__g_end>>2]|0;
  $21 = $20;
  $22 = $__g;
  $23 = (($21) - ($22))|0;
  $24 = ($23|0)<(160);
  if (!($24)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = HEAP32[$__dc>>2]|0;
  $26 = (($20) + 4|0);
  HEAP32[$__g_end>>2] = $26;
  HEAP32[$20>>2] = $25;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($__atoms) + 26|0);
 $$01$i = $__atoms;
 while(1) {
  $30 = HEAP8[$$01$i>>0]|0;
  $31 = ($30<<24>>24)==($__ct<<24>>24);
  $29 = (($$01$i) + 1|0);
  if ($31) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $28 = ($29|0)==($27|0);
  if ($28) {
   $$0$lcssa$i = $27;
   break;
  } else {
   $$01$i = $29;
  }
 }
 $32 = $$0$lcssa$i;
 $33 = $__atoms;
 $34 = (($32) - ($33))|0;
 $35 = ($34|0)>(23);
 if ($35) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($__base|0) == 16)) {
  $37 = ($34|0)<(22);
  if (!($37)) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = $0;
   $39 = $__a;
   $40 = (($38) - ($39))|0;
   $41 = ($40|0)<(3);
   if (!($41)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $42 = (($0) + -1|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(48);
   if (!($44)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $45 = (9368 + ($34)|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $47;
   HEAP8[$0>>0] = $46;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $36 = ($34|0)<($__base|0);
  if (!($36)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $48 = (9368 + ($34)|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $50;
 HEAP8[$0>>0] = $49;
 $51 = HEAP32[$__dc>>2]|0;
 $52 = (($51) + 1)|0;
 HEAP32[$__dc>>2] = $52;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__16__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[10752>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((10752|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_iiii(483,2147483647,(10760|0),(0|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch()|0;
     $9 = tempRet0;
     ___cxa_guard_abort((10752|0));
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[10744>>2] = $4;
     ___cxa_guard_release((10752|0));
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[10744>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 56|0;
 $$byval_copy1 = sp + 36|0;
 $$byval_copy = sp;
 $__lv = sp + 48|0;
 $0 = sp + 52|0;
 $1 = sp + 60|0;
 $2 = sp + 32|0;
 $3 = sp + 44|0;
 $4 = sp + 40|0;
 $__names = sp + 8|0;
 $5 = sp + 4|0;
 $6 = (($__iob) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$__lv>>2] = -1;
  $10 = HEAP32[$this>>2]|0;
  $11 = (($10) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$__b>>2]|0;
  HEAP32[$1>>2] = $13;
  $14 = HEAP32[$__e>>2]|0;
  HEAP32[$2>>2] = $14;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$12 & 511]($0,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv);
  $15 = HEAP32[$0>>2]|0;
  HEAP32[$__b>>2] = $15;
  $16 = HEAP32[$__lv>>2]|0;
  if ((($16|0) == 1)) {
   HEAP8[$__v>>0] = 1;
  } else if ((($16|0) == 0)) {
   HEAP8[$__v>>0] = 0;
  } else {
   HEAP8[$__v>>0] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $15;
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($3,$__iob);
 __THREW__ = 0;
 $17 = (invoke_iii(432,($3|0),(10848|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $45 = ___cxa_find_matching_catch()|0;
  $46 = tempRet0;
  $47 = HEAP32[$3>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
  $$0 = $45;$$01 = $46;
  ___resumeException($$0|0);
  // unreachable;
 }
 $20 = HEAP32[$3>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
 __ZNKSt3__18ios_base6getlocEv($4,$__iob);
 __THREW__ = 0;
 $21 = (invoke_iii(432,($4|0),(11008|0))|0);
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $48 = ___cxa_find_matching_catch()|0;
  $49 = tempRet0;
  $50 = HEAP32[$4>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($50)|0);
  $$0 = $48;$$01 = $49;
  ___resumeException($$0|0);
  // unreachable;
 }
 $24 = HEAP32[$4>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($24)|0);
 $25 = HEAP32[$21>>2]|0;
 $26 = (($25) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 __THREW__ = 0;
 invoke_vii($27|0,($__names|0),($21|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $$02 = $__names;
 } else {
  $30 = (($__names) + 12|0);
  $31 = HEAP32[$21>>2]|0;
  $32 = (($31) + 28|0);
  $33 = HEAP32[$32>>2]|0;
  __THREW__ = 0;
  invoke_vii($33|0,($30|0),($21|0));
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if ($35) {
   $$02 = $30;
  } else {
   $36 = HEAP32[$__e>>2]|0;
   HEAP32[$5>>2] = $36;
   $37 = (($__names) + 24|0);
   __THREW__ = 0;
   ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
   $38 = (invoke_iiiiiiii(484,($__b|0),($$byval_copy2|0),($__names|0),($37|0),($17|0),($__err|0),1)|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    $57 = ___cxa_find_matching_catch()|0;
    $58 = tempRet0;
    $59 = (($__names) + 12|0);
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($59);
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names);
    $$0 = $57;$$01 = $58;
    ___resumeException($$0|0);
    // unreachable;
   } else {
    $41 = ($38|0)==($__names|0);
    $42 = $41&1;
    HEAP8[$__v>>0] = $42;
    $43 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $43;
    $44 = (($__names) + 12|0);
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($44);
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names);
    STACKTOP = sp;return;
   }
  }
 }
 $51 = ___cxa_find_matching_catch()|0;
 $52 = tempRet0;
 $53 = ($__names|0)==($$02|0);
 if ($53) {
  $$0 = $51;$$01 = $52;
  ___resumeException($$0|0);
  // unreachable;
 } else {
  $55 = $$02;
 }
 while(1) {
  $54 = (($55) + -12|0);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($54);
  $56 = ($54|0)==($__names|0);
  if ($56) {
   $$0 = $51;$$01 = $52;
   break;
  } else {
   $55 = $54;
  }
 }
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i13 = 0, $$01 = 0, $$pre = 0, $$pre$i$i$i9 = 0, $$pre$i3$i$i = 0, $$pre$phi38Z2D = 0, $$pre$phi40Z2D = 0, $$pre37 = 0, $$pre39 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i28 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 200|0;
 $__grouping = sp + 188|0;
 $0 = sp + 8|0;
 $__buf = sp + 176|0;
 $__a_end = sp + 4|0;
 $__g = sp + 16|0;
 $__g_end = sp + 304|0;
 $__dc = sp + 308|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(431,($0|0),($__iob|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $85 = ___cxa_find_matching_catch()|0;
  $86 = tempRet0;
  $$0 = $85;$$01 = $86;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($$0|0);
  // unreachable;
 }
 __THREW__ = 0;
 $3 = (invoke_iii(432,($0|0),(10848|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + 48|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($8|0,($3|0),(9368|0),(((9368 + 26|0))|0),($__atoms|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $11 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
   ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viii(417,($__buf|0),10,0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   L8: do {
    if ($13) {
     label = 40;
    } else {
     $14 = HEAP8[$__buf>>0]|0;
     $15 = $14 & 1;
     $16 = ($15<<24>>24)==(0);
     if ($16) {
      $19 = (($__buf) + 1|0);
      $$pre39 = (($__buf) + 8|0);
      $$pre$phi38Z2D = $19;$$pre$phi40Z2D = $$pre39;$20 = $19;
     } else {
      $17 = (($__buf) + 8|0);
      $18 = HEAP32[$17>>2]|0;
      $$pre37 = (($__buf) + 1|0);
      $$pre$phi38Z2D = $$pre37;$$pre$phi40Z2D = $17;$20 = $18;
     }
     HEAP32[$__a_end>>2] = $20;
     HEAP32[$__g_end>>2] = $__g;
     HEAP32[$__dc>>2] = 0;
     $21 = (($__buf) + 4|0);
     $$pre = HEAP32[$__b>>2]|0;
     $$pre$i$i$i9 = $$pre;$__a$0 = $20;
     L14: while(1) {
      $22 = ($$pre$i$i$i9|0)==(0|0);
      if ($22) {
       $167 = 1;$95 = 0;
      } else {
       $23 = (($$pre$i$i$i9) + 12|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = (($$pre$i$i$i9) + 16|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($24|0)==($26|0);
       if ($27) {
        $28 = HEAP32[$$pre$i$i$i9>>2]|0;
        $29 = (($28) + 36|0);
        $30 = HEAP32[$29>>2]|0;
        __THREW__ = 0;
        $31 = (invoke_ii($30|0,($$pre$i$i$i9|0))|0);
        $32 = __THREW__; __THREW__ = 0;
        $33 = $32&1;
        if ($33) {
         label = 39;
         break;
        } else {
         $$0$i$i$i$i7 = $31;
        }
       } else {
        $34 = HEAP32[$24>>2]|0;
        $$0$i$i$i$i7 = $34;
       }
       $35 = ($$0$i$i$i$i7|0)==(-1);
       if ($35) {
        HEAP32[$__b>>2] = 0;
        $167 = 1;$95 = 0;
       } else {
        $167 = 0;$95 = $$pre$i$i$i9;
       }
      }
      $36 = HEAP32[$__e>>2]|0;
      $37 = ($36|0)==(0|0);
      do {
       if ($37) {
        label = 21;
       } else {
        $38 = (($36) + 12|0);
        $39 = HEAP32[$38>>2]|0;
        $40 = (($36) + 16|0);
        $41 = HEAP32[$40>>2]|0;
        $42 = ($39|0)==($41|0);
        if ($42) {
         $43 = HEAP32[$36>>2]|0;
         $44 = (($43) + 36|0);
         $45 = HEAP32[$44>>2]|0;
         __THREW__ = 0;
         $46 = (invoke_ii($45|0,($36|0))|0);
         $47 = __THREW__; __THREW__ = 0;
         $48 = $47&1;
         if ($48) {
          label = 39;
          break L14;
         } else {
          $$0$i$i1$i$i13 = $46;
         }
        } else {
         $49 = HEAP32[$39>>2]|0;
         $$0$i$i1$i$i13 = $49;
        }
        $50 = ($$0$i$i1$i$i13|0)==(-1);
        if ($50) {
         HEAP32[$__e>>2] = 0;
         label = 21;
         break;
        } else {
         if ($167) {
          $168 = $36;
          break;
         } else {
          $$pre$i3$i$i = $36;$__a$2 = $__a$0;
          break L14;
         }
        }
       }
      } while(0);
      if ((label|0) == 21) {
       label = 0;
       if ($167) {
        $$pre$i3$i$i = 0;$__a$2 = $__a$0;
        break;
       } else {
        $168 = 0;
       }
      }
      $51 = HEAP32[$__a_end>>2]|0;
      $52 = HEAP8[$__buf>>0]|0;
      $53 = $52 & 1;
      $54 = ($53<<24>>24)==(0);
      if ($54) {
       $56 = $52&255;
       $57 = $56 >>> 1;
       $59 = $57;
      } else {
       $55 = HEAP32[$21>>2]|0;
       $59 = $55;
      }
      $58 = (($__a$0) + ($59)|0);
      $60 = ($51|0)==($58|0);
      if ($60) {
       if ($54) {
        $62 = $52&255;
        $63 = $62 >>> 1;
        $64 = $52&255;
        $65 = $64 >>> 1;
        $67 = $65;$84 = $63;
       } else {
        $61 = HEAP32[$21>>2]|0;
        $67 = $61;$84 = $61;
       }
       $66 = $67 << 1;
       __THREW__ = 0;
       invoke_viii(417,($__buf|0),($66|0),0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        label = 39;
        break;
       }
       $70 = HEAP8[$__buf>>0]|0;
       $71 = $70 & 1;
       $72 = ($71<<24>>24)==(0);
       if ($72) {
        $75 = 10;
       } else {
        $73 = HEAP32[$__buf>>2]|0;
        $74 = $73 & -2;
        $phitmp$i28 = (($74) + -1)|0;
        $75 = $phitmp$i28;
       }
       __THREW__ = 0;
       invoke_viii(417,($__buf|0),($75|0),0);
       $76 = __THREW__; __THREW__ = 0;
       $77 = $76&1;
       if ($77) {
        label = 39;
        break;
       }
       $78 = HEAP8[$__buf>>0]|0;
       $79 = $78 & 1;
       $80 = ($79<<24>>24)==(0);
       if ($80) {
        $83 = $$pre$phi38Z2D;
       } else {
        $81 = HEAP32[$$pre$phi40Z2D>>2]|0;
        $83 = $81;
       }
       $82 = (($83) + ($84)|0);
       HEAP32[$__a_end>>2] = $82;
       $__a$1 = $83;
      } else {
       $__a$1 = $__a$0;
      }
      $94 = (($95) + 12|0);
      $96 = HEAP32[$94>>2]|0;
      $97 = (($95) + 16|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = ($96|0)==($98|0);
      if ($99) {
       $100 = HEAP32[$95>>2]|0;
       $101 = (($100) + 36|0);
       $102 = HEAP32[$101>>2]|0;
       __THREW__ = 0;
       $103 = (invoke_ii($102|0,($95|0))|0);
       $104 = __THREW__; __THREW__ = 0;
       $105 = $104&1;
       if ($105) {
        label = 39;
        break;
       } else {
        $$0$i$i = $103;
       }
      } else {
       $106 = HEAP32[$96>>2]|0;
       $$0$i$i = $106;
      }
      $107 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
      $108 = ($107|0)==(0);
      if (!($108)) {
       $$pre$i3$i$i = $168;$__a$2 = $__a$1;
       break;
      }
      $109 = HEAP32[$94>>2]|0;
      $110 = HEAP32[$97>>2]|0;
      $111 = ($109|0)==($110|0);
      if ($111) {
       $112 = HEAP32[$95>>2]|0;
       $113 = (($112) + 40|0);
       $114 = HEAP32[$113>>2]|0;
       __THREW__ = 0;
       (invoke_ii($114|0,($95|0))|0);
       $115 = __THREW__; __THREW__ = 0;
       $116 = $115&1;
       if ($116) {
        label = 39;
        break;
       } else {
        $$pre$i$i$i9 = $95;$__a$0 = $__a$1;
        continue;
       }
      } else {
       $117 = (($109) + 4|0);
       HEAP32[$94>>2] = $117;
       $$pre$i$i$i9 = $95;$__a$0 = $__a$1;
       continue;
      }
     }
     if ((label|0) == 39) {
      $90 = ___cxa_find_matching_catch()|0;
      $91 = tempRet0;
      $lpad$phi$index = $90;$lpad$phi$index2 = $91;
      break;
     }
     $118 = HEAP32[$__a_end>>2]|0;
     $119 = $118;
     $120 = $__a$2;
     $121 = (($119) - ($120))|0;
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($121|0),0);
     $122 = __THREW__; __THREW__ = 0;
     $123 = $122&1;
     if ($123) {
      label = 40;
     } else {
      $124 = HEAP8[$__buf>>0]|0;
      $125 = $124 & 1;
      $126 = ($125<<24>>24)==(0);
      if ($126) {
       $131 = $$pre$phi38Z2D;
      } else {
       $127 = HEAP32[$$pre$phi40Z2D>>2]|0;
       $131 = $127;
      }
      __THREW__ = 0;
      $128 = (invoke_i(481)|0);
      $129 = __THREW__; __THREW__ = 0;
      $130 = $129&1;
      if ($130) {
       label = 40;
      } else {
       __THREW__ = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $132 = (invoke_iiiii(482,($131|0),($128|0),(9408|0),($vararg_buffer|0))|0);
       $133 = __THREW__; __THREW__ = 0;
       $134 = $133&1;
       if ($134) {
        label = 40;
       } else {
        $135 = ($132|0)==(1);
        if (!($135)) {
         HEAP32[$__err>>2] = 4;
        }
        $136 = ($95|0)==(0|0);
        if ($136) {
         $166 = 0;$169 = 1;
        } else {
         $137 = (($95) + 12|0);
         $138 = HEAP32[$137>>2]|0;
         $139 = (($95) + 16|0);
         $140 = HEAP32[$139>>2]|0;
         $141 = ($138|0)==($140|0);
         if ($141) {
          $142 = HEAP32[$95>>2]|0;
          $143 = (($142) + 36|0);
          $144 = HEAP32[$143>>2]|0;
          __THREW__ = 0;
          $145 = (invoke_ii($144|0,($95|0))|0);
          $146 = __THREW__; __THREW__ = 0;
          $147 = $146&1;
          if ($147) {
           label = 40;
           break;
          } else {
           $$0$i$i$i$i = $145;
          }
         } else {
          $148 = HEAP32[$138>>2]|0;
          $$0$i$i$i$i = $148;
         }
         $149 = ($$0$i$i$i$i|0)==(-1);
         if ($149) {
          HEAP32[$__b>>2] = 0;
          $166 = 0;$169 = 1;
         } else {
          $166 = $95;$169 = 0;
         }
        }
        $150 = ($$pre$i3$i$i|0)==(0|0);
        do {
         if ($150) {
          label = 68;
         } else {
          $151 = (($$pre$i3$i$i) + 12|0);
          $152 = HEAP32[$151>>2]|0;
          $153 = (($$pre$i3$i$i) + 16|0);
          $154 = HEAP32[$153>>2]|0;
          $155 = ($152|0)==($154|0);
          if ($155) {
           $156 = HEAP32[$$pre$i3$i$i>>2]|0;
           $157 = (($156) + 36|0);
           $158 = HEAP32[$157>>2]|0;
           __THREW__ = 0;
           $159 = (invoke_ii($158|0,($$pre$i3$i$i|0))|0);
           $160 = __THREW__; __THREW__ = 0;
           $161 = $160&1;
           if ($161) {
            label = 40;
            break L8;
           } else {
            $$0$i$i1$i$i = $159;
           }
          } else {
           $162 = HEAP32[$152>>2]|0;
           $$0$i$i1$i$i = $162;
          }
          $163 = ($$0$i$i1$i$i|0)==(-1);
          if ($163) {
           HEAP32[$__e>>2] = 0;
           label = 68;
           break;
          }
          if ($169) {
           HEAP32[$agg$result>>2] = $166;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
           STACKTOP = sp;return;
          }
         }
        } while(0);
        if ((label|0) == 68) {
         if (!($169)) {
          HEAP32[$agg$result>>2] = $166;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
          STACKTOP = sp;return;
         }
        }
        $164 = HEAP32[$__err>>2]|0;
        $165 = $164 | 2;
        HEAP32[$__err>>2] = $165;
        HEAP32[$agg$result>>2] = $166;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
        STACKTOP = sp;return;
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 40) {
    $92 = ___cxa_find_matching_catch()|0;
    $93 = tempRet0;
    $lpad$phi$index = $92;$lpad$phi$index2 = $93;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($$0|0);
   // unreachable;
  }
 }
 $87 = ___cxa_find_matching_catch()|0;
 $88 = tempRet0;
 $89 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($89)|0);
 $$0 = $87;$$01 = $88;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 96|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($__ct|0);
   if (!($4)) {
    $5 = (($__atoms) + 100|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($__ct|0);
    if (!($7)) {
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $10 = HEAP8[$__grouping>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $18 = $16;
 } else {
  $13 = (($__grouping) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $18 = $14;
 }
 $17 = ($18|0)!=(0);
 $19 = ($__ct|0)==($__thousands_sep|0);
 $or$cond = $17 & $19;
 if ($or$cond) {
  $20 = HEAP32[$__g_end>>2]|0;
  $21 = $20;
  $22 = $__g;
  $23 = (($21) - ($22))|0;
  $24 = ($23|0)<(160);
  if (!($24)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = HEAP32[$__dc>>2]|0;
  $26 = (($20) + 4|0);
  HEAP32[$__g_end>>2] = $26;
  HEAP32[$20>>2] = $25;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($__atoms) + 104|0);
 $$01$i = $__atoms;
 while(1) {
  $30 = HEAP32[$$01$i>>2]|0;
  $31 = ($30|0)==($__ct|0);
  $29 = (($$01$i) + 4|0);
  if ($31) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $28 = ($29|0)==($27|0);
  if ($28) {
   $$0$lcssa$i = $27;
   break;
  } else {
   $$01$i = $29;
  }
 }
 $32 = $$0$lcssa$i;
 $33 = $__atoms;
 $34 = (($32) - ($33))|0;
 $35 = $34 >> 2;
 $36 = ($34|0)>(92);
 if ($36) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($__base|0) == 16)) {
  $38 = ($34|0)<(88);
  if (!($38)) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $39 = $0;
   $40 = $__a;
   $41 = (($39) - ($40))|0;
   $42 = ($41|0)<(3);
   if (!($42)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $43 = (($0) + -1|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(48);
   if (!($45)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $46 = (9368 + ($35)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $48;
   HEAP8[$0>>0] = $47;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $37 = ($35|0)<($__base|0);
  if (!($37)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $49 = (9368 + ($35)|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $51;
 HEAP8[$0>>0] = $50;
 $52 = HEAP32[$__dc>>2]|0;
 $53 = (($52) + 1)|0;
 HEAP32[$__dc>>2] = $53;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $0 = (invoke_iii(432,($__loc|0),(10856|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($5|0,($0|0),(9368|0),(((9368 + 26|0))|0),($__atoms|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   $8 = (invoke_iii(432,($__loc|0),(11000|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = HEAP32[$8>>2]|0;
    $12 = (($11) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    $14 = (invoke_ii($13|0,($8|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     HEAP8[$__thousands_sep>>0] = $14;
     $17 = HEAP32[$8>>2]|0;
     $18 = (($17) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     __THREW__ = 0;
     invoke_vii($19|0,($agg$result|0),($8|0));
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if (!($21)) {
      $22 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($22)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 $25 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($25)|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $0 = (invoke_iii(432,($__loc|0),(10856|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($5|0,($0|0),(9368|0),(((9368 + 32|0))|0),($__atoms|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   $8 = (invoke_iii(432,($__loc|0),(11000|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = HEAP32[$8>>2]|0;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    $14 = (invoke_ii($13|0,($8|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     HEAP8[$__decimal_point>>0] = $14;
     $17 = HEAP32[$8>>2]|0;
     $18 = (($17) + 16|0);
     $19 = HEAP32[$18>>2]|0;
     __THREW__ = 0;
     $20 = (invoke_ii($19|0,($8|0))|0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      HEAP8[$__thousands_sep>>0] = $20;
      $23 = HEAP32[$8>>2]|0;
      $24 = (($23) + 20|0);
      $25 = HEAP32[$24>>2]|0;
      __THREW__ = 0;
      invoke_vii($25|0,($agg$result|0),($8|0));
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       $28 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($28)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 $31 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($31)|0);
 ___resumeException($29|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 if ($0) {
  $1 = HEAP8[$__in_units>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units>>0] = 0;
  $3 = HEAP32[$__a_end>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$__a_end>>2] = $4;
  HEAP8[$3>>0] = 46;
  $5 = HEAP8[$__grouping>>0]|0;
  $6 = $5 & 1;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $10 = $5&255;
   $11 = $10 >>> 1;
   $13 = $11;
  } else {
   $8 = (($__grouping) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $13 = $9;
  }
  $12 = ($13|0)==(0);
  if ($12) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = HEAP32[$__g_end>>2]|0;
  $15 = $14;
  $16 = $__g;
  $17 = (($15) - ($16))|0;
  $18 = ($17|0)<(160);
  if (!($18)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = HEAP32[$__dc>>2]|0;
  $20 = (($14) + 4|0);
  HEAP32[$__g_end>>2] = $20;
  HEAP32[$14>>2] = $19;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 if ($21) {
  $22 = HEAP8[$__grouping>>0]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = $22&255;
   $28 = $27 >>> 1;
   $30 = $28;
  } else {
   $25 = (($__grouping) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $30 = $26;
  }
  $29 = ($30|0)==(0);
  if (!($29)) {
   $31 = HEAP8[$__in_units>>0]|0;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[$__g_end>>2]|0;
   $34 = $33;
   $35 = $__g;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(160);
   if (!($37)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$__dc>>2]|0;
   $39 = (($33) + 4|0);
   HEAP32[$__g_end>>2] = $39;
   HEAP32[$33>>2] = $38;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($__atoms) + 32|0);
 $$01$i = $__atoms;
 while(1) {
  $43 = HEAP8[$$01$i>>0]|0;
  $44 = ($43<<24>>24)==($__ct<<24>>24);
  $42 = (($$01$i) + 1|0);
  if ($44) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $41 = ($42|0)==($40|0);
  if ($41) {
   $$0$lcssa$i = $40;
   break;
  } else {
   $$01$i = $42;
  }
 }
 $45 = $$0$lcssa$i;
 $46 = $__atoms;
 $47 = (($45) - ($46))|0;
 $48 = ($47|0)>(31);
 if ($48) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $49 = (9368 + ($47)|0);
 $50 = HEAP8[$49>>0]|0;
 if ((($47|0) == 24) | (($47|0) == 25)) {
  $51 = HEAP32[$__a_end>>2]|0;
  $52 = ($51|0)==($__a|0);
  if (!($52)) {
   $53 = (($51) + -1|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = $55 & 95;
   $57 = HEAP8[$__exp>>0]|0;
   $58 = $57&255;
   $59 = $58 & 127;
   $60 = ($56|0)==($59|0);
   if (!($60)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $61 = (($51) + 1|0);
  HEAP32[$__a_end>>2] = $61;
  HEAP8[$51>>0] = $50;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else if ((($47|0) == 23) | (($47|0) == 22)) {
  HEAP8[$__exp>>0] = 80;
  $62 = HEAP32[$__a_end>>2]|0;
  $63 = (($62) + 1|0);
  HEAP32[$__a_end>>2] = $63;
  HEAP8[$62>>0] = $50;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $64 = $50&255;
  $65 = $64 & 95;
  $66 = HEAP8[$__exp>>0]|0;
  $67 = $66 << 24 >> 24;
  $68 = ($65|0)==($67|0);
  if ($68) {
   $69 = $65 | 128;
   $70 = $69&255;
   HEAP8[$__exp>>0] = $70;
   $71 = HEAP8[$__in_units>>0]|0;
   $72 = ($71<<24>>24)==(0);
   if (!($72)) {
    HEAP8[$__in_units>>0] = 0;
    $73 = HEAP8[$__grouping>>0]|0;
    $74 = $73 & 1;
    $75 = ($74<<24>>24)==(0);
    if ($75) {
     $78 = $73&255;
     $79 = $78 >>> 1;
     $81 = $79;
    } else {
     $76 = (($__grouping) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $81 = $77;
    }
    $80 = ($81|0)==(0);
    if (!($80)) {
     $82 = HEAP32[$__g_end>>2]|0;
     $83 = $82;
     $84 = $__g;
     $85 = (($83) - ($84))|0;
     $86 = ($85|0)<(160);
     if ($86) {
      $87 = HEAP32[$__dc>>2]|0;
      $88 = (($82) + 4|0);
      HEAP32[$__g_end>>2] = $88;
      HEAP32[$82>>2] = $87;
     }
    }
   }
  }
  $89 = HEAP32[$__a_end>>2]|0;
  $90 = (($89) + 1|0);
  HEAP32[$__a_end>>2] = $90;
  HEAP8[$89>>0] = $50;
  $91 = ($47|0)>(21);
  if ($91) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $92 = HEAP32[$__dc>>2]|0;
  $93 = (($92) + 1)|0;
  HEAP32[$__dc>>2] = $93;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $0 = (invoke_iii(432,($__loc|0),(10848|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($5|0,($0|0),(9368|0),(((9368 + 26|0))|0),($__atoms|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   $8 = (invoke_iii(432,($__loc|0),(11008|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = HEAP32[$8>>2]|0;
    $12 = (($11) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    $14 = (invoke_ii($13|0,($8|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     HEAP32[$__thousands_sep>>2] = $14;
     $17 = HEAP32[$8>>2]|0;
     $18 = (($17) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     __THREW__ = 0;
     invoke_vii($19|0,($agg$result|0),($8|0));
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if (!($21)) {
      $22 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($22)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 $25 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($25)|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $0 = (invoke_iii(432,($__loc|0),(10848|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($5|0,($0|0),(9368|0),(((9368 + 32|0))|0),($__atoms|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   $8 = (invoke_iii(432,($__loc|0),(11008|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = HEAP32[$8>>2]|0;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    $14 = (invoke_ii($13|0,($8|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     HEAP32[$__decimal_point>>2] = $14;
     $17 = HEAP32[$8>>2]|0;
     $18 = (($17) + 16|0);
     $19 = HEAP32[$18>>2]|0;
     __THREW__ = 0;
     $20 = (invoke_ii($19|0,($8|0))|0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      HEAP32[$__thousands_sep>>2] = $20;
      $23 = HEAP32[$8>>2]|0;
      $24 = (($23) + 20|0);
      $25 = HEAP32[$24>>2]|0;
      __THREW__ = 0;
      invoke_vii($25|0,($agg$result|0),($8|0));
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       $28 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($28)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 $31 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($31)|0);
 ___resumeException($29|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct|0)==($__decimal_point|0);
 if ($0) {
  $1 = HEAP8[$__in_units>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units>>0] = 0;
  $3 = HEAP32[$__a_end>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$__a_end>>2] = $4;
  HEAP8[$3>>0] = 46;
  $5 = HEAP8[$__grouping>>0]|0;
  $6 = $5 & 1;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $10 = $5&255;
   $11 = $10 >>> 1;
   $13 = $11;
  } else {
   $8 = (($__grouping) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $13 = $9;
  }
  $12 = ($13|0)==(0);
  if ($12) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = HEAP32[$__g_end>>2]|0;
  $15 = $14;
  $16 = $__g;
  $17 = (($15) - ($16))|0;
  $18 = ($17|0)<(160);
  if (!($18)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = HEAP32[$__dc>>2]|0;
  $20 = (($14) + 4|0);
  HEAP32[$__g_end>>2] = $20;
  HEAP32[$14>>2] = $19;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($__ct|0)==($__thousands_sep|0);
 if ($21) {
  $22 = HEAP8[$__grouping>>0]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = $22&255;
   $28 = $27 >>> 1;
   $30 = $28;
  } else {
   $25 = (($__grouping) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $30 = $26;
  }
  $29 = ($30|0)==(0);
  if (!($29)) {
   $31 = HEAP8[$__in_units>>0]|0;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[$__g_end>>2]|0;
   $34 = $33;
   $35 = $__g;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(160);
   if (!($37)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$__dc>>2]|0;
   $39 = (($33) + 4|0);
   HEAP32[$__g_end>>2] = $39;
   HEAP32[$33>>2] = $38;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($__atoms) + 128|0);
 $$01$i = $__atoms;
 while(1) {
  $43 = HEAP32[$$01$i>>2]|0;
  $44 = ($43|0)==($__ct|0);
  $42 = (($$01$i) + 4|0);
  if ($44) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $41 = ($42|0)==($40|0);
  if ($41) {
   $$0$lcssa$i = $40;
   break;
  } else {
   $$01$i = $42;
  }
 }
 $45 = $$0$lcssa$i;
 $46 = $__atoms;
 $47 = (($45) - ($46))|0;
 $48 = $47 >> 2;
 $49 = ($47|0)>(124);
 if ($49) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $50 = (9368 + ($48)|0);
 $51 = HEAP8[$50>>0]|0;
 if ((($48|0) == 23) | (($48|0) == 22)) {
  HEAP8[$__exp>>0] = 80;
 } else if ((($48|0) == 24) | (($48|0) == 25)) {
  $52 = HEAP32[$__a_end>>2]|0;
  $53 = ($52|0)==($__a|0);
  if (!($53)) {
   $54 = (($52) + -1|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&255;
   $57 = $56 & 95;
   $58 = HEAP8[$__exp>>0]|0;
   $59 = $58&255;
   $60 = $59 & 127;
   $61 = ($57|0)==($60|0);
   if (!($61)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $62 = (($52) + 1|0);
  HEAP32[$__a_end>>2] = $62;
  HEAP8[$52>>0] = $51;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $63 = $51&255;
  $64 = $63 & 95;
  $65 = HEAP8[$__exp>>0]|0;
  $66 = $65 << 24 >> 24;
  $67 = ($64|0)==($66|0);
  if ($67) {
   $68 = $64 | 128;
   $69 = $68&255;
   HEAP8[$__exp>>0] = $69;
   $70 = HEAP8[$__in_units>>0]|0;
   $71 = ($70<<24>>24)==(0);
   if (!($71)) {
    HEAP8[$__in_units>>0] = 0;
    $72 = HEAP8[$__grouping>>0]|0;
    $73 = $72 & 1;
    $74 = ($73<<24>>24)==(0);
    if ($74) {
     $77 = $72&255;
     $78 = $77 >>> 1;
     $80 = $78;
    } else {
     $75 = (($__grouping) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $80 = $76;
    }
    $79 = ($80|0)==(0);
    if (!($79)) {
     $81 = HEAP32[$__g_end>>2]|0;
     $82 = $81;
     $83 = $__g;
     $84 = (($82) - ($83))|0;
     $85 = ($84|0)<(160);
     if ($85) {
      $86 = HEAP32[$__dc>>2]|0;
      $87 = (($81) + 4|0);
      HEAP32[$__g_end>>2] = $87;
      HEAP32[$81>>2] = $86;
     }
    }
   }
  }
 }
 $88 = HEAP32[$__a_end>>2]|0;
 $89 = (($88) + 1|0);
 HEAP32[$__a_end>>2] = $89;
 HEAP8[$88>>0] = $51;
 $90 = ($47|0)>(84);
 if ($90) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $91 = HEAP32[$__dc>>2]|0;
 $92 = (($91) + 1)|0;
 HEAP32[$__dc>>2] = $92;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi4Z2D = 0, $$pre$phi6Z2D = 0, $$pre3 = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$this>>2]|0;
  $7 = (($6) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $9;
  $10 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$8 & 511]($agg$result,$this,$$byval_copy,$__iob,$__fl,$10);
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 $11 = (invoke_iii(432,($1|0),(11000|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $57 = ___cxa_find_matching_catch()|0;
  $58 = tempRet0;
  $59 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($59)|0);
  $$0 = $57;$$01 = $58;
  ___resumeException($$0|0);
  // unreachable;
 }
 $14 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($14)|0);
 $15 = HEAP32[$11>>2]|0;
 if ($__v) {
  $16 = (($15) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 1023]($__nm,$11);
 } else {
  $18 = (($15) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  FUNCTION_TABLE_vii[$19 & 1023]($__nm,$11);
 }
 $20 = HEAP8[$__nm>>0]|0;
 $21 = $20 & 1;
 $22 = ($21<<24>>24)==(0);
 if ($22) {
  $25 = (($__nm) + 1|0);
  $$pre5 = (($__nm) + 8|0);
  $$ph = $25;$$pre$phi4Z2D = $25;$$pre$phi6Z2D = $$pre5;
 } else {
  $23 = (($__nm) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $$pre3 = (($__nm) + 1|0);
  $$ph = $24;$$pre$phi4Z2D = $$pre3;$$pre$phi6Z2D = $23;
 }
 $26 = (($__nm) + 4|0);
 $28 = $20;$38 = $$ph;
 L17: while(1) {
  $27 = $28 & 1;
  $29 = ($27<<24>>24)==(0);
  if ($29) {
   $32 = $28&255;
   $33 = $32 >>> 1;
   $35 = $$pre$phi4Z2D;$36 = $33;
  } else {
   $30 = HEAP32[$$pre$phi6Z2D>>2]|0;
   $31 = HEAP32[$26>>2]|0;
   $35 = $30;$36 = $31;
  }
  $34 = (($35) + ($36)|0);
  $37 = ($38|0)==($34|0);
  if ($37) {
   label = 24;
   break;
  }
  $39 = HEAP8[$38>>0]|0;
  $40 = HEAP32[$__s>>2]|0;
  $41 = ($40|0)==(0|0);
  do {
   if (!($41)) {
    $42 = (($40) + 24|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($40) + 28|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($43|0)==($45|0);
    if (!($46)) {
     $47 = (($43) + 1|0);
     HEAP32[$42>>2] = $47;
     HEAP8[$43>>0] = $39;
     break;
    }
    $48 = HEAP32[$40>>2]|0;
    $49 = (($48) + 52|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = $39&255;
    __THREW__ = 0;
    $52 = (invoke_iii($50|0,($40|0),($51|0))|0);
    $53 = __THREW__; __THREW__ = 0;
    $54 = $53&1;
    if ($54) {
     label = 23;
     break L17;
    }
    $55 = ($52|0)==(-1);
    if ($55) {
     HEAP32[$__s>>2] = 0;
    }
   }
  } while(0);
  $56 = (($38) + 1|0);
  $$pre = HEAP8[$__nm>>0]|0;
  $28 = $$pre;$38 = $56;
 }
 if ((label|0) == 23) {
  $60 = ___cxa_find_matching_catch()|0;
  $61 = tempRet0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
  $$0 = $60;$$01 = $61;
  ___resumeException($$0|0);
  // unreachable;
 }
 else if ((label|0) == 24) {
  $62 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$result>>2] = $62;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 24|0;
 $__nar = sp + 32|0;
 $__o = sp + 44|0;
 $__op = sp + 16|0;
 $__oe = sp + 4|0;
 $0 = sp + 8|0;
 $1 = sp + 12|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[9648+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[9648+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[9648+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[9648+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[9648+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[9648+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,9552,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(485,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$13,$14,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp,$__len,$__signd,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__signd = $__signd|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$012 = 0, $$1$lcssa = 0, $$1$ph = 0, $$13 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = (($__fmtp) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1$ph = $$0;
 } else {
  $5 = (($$0) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1$ph = $5;
 }
 $6 = HEAP8[$__len>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$1$lcssa = $$1$ph;
 } else {
  $$012 = $__len;$$13 = $$1$ph;$10 = $6;
  while(1) {
   $8 = (($$012) + 1|0);
   $9 = (($$13) + 1|0);
   HEAP8[$$13>>0] = $10;
   $11 = HEAP8[$8>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    $$1$lcssa = $9;
    break;
   } else {
    $$012 = $8;$$13 = $9;$10 = $11;
   }
  }
 }
 $13 = $__flags & 74;
 if ((($13|0) == 64)) {
  HEAP8[$$1$lcssa>>0] = 111;
  STACKTOP = sp;return;
 } else if ((($13|0) == 8)) {
  $14 = $__flags & 16384;
  $15 = ($14|0)==(0);
  if ($15) {
   HEAP8[$$1$lcssa>>0] = 120;
   STACKTOP = sp;return;
  } else {
   HEAP8[$$1$lcssa>>0] = 88;
   STACKTOP = sp;return;
  }
 } else {
  if ($__signd) {
   HEAP8[$$1$lcssa>>0] = 100;
   STACKTOP = sp;return;
  } else {
   HEAP8[$$1$lcssa>>0] = 117;
   STACKTOP = sp;return;
  }
 }
}
function __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb,$__ne,$__iob) {
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__iob = $__iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 176;
 do {
  if ((($2|0) == 16)) {
   $3 = HEAP8[$__nb>>0]|0;
   if ((($3<<24>>24) == 43) | (($3<<24>>24) == 45)) {
    $4 = (($__nb) + 1|0);
    $$0 = $4;
    break;
   }
   $5 = $__ne;
   $6 = $__nb;
   $7 = (($5) - ($6))|0;
   $8 = ($7|0)>(1);
   $9 = ($3<<24>>24)==(48);
   $or$cond = $8 & $9;
   if ($or$cond) {
    $10 = (($__nb) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    if ((($11<<24>>24) == 88) | (($11<<24>>24) == 120)) {
     $12 = (($__nb) + 2|0);
     $$0 = $12;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else if ((($2|0) == 32)) {
   $$0 = $__ne;
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0 = $__nb;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i5 = 0, $$12 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__dc$09 = 0, $__dc$1 = 0, $__dg$010 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$011 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,10856)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11000)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = $5&255;
  $11 = $10 >>> 1;
  $13 = $11;
 } else {
  $8 = (($__grouping) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $13 = $9;
 }
 $12 = ($13|0)==(0);
 do {
  if ($12) {
   $14 = HEAP32[$0>>2]|0;
   $15 = (($14) + 32|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 8;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21)|0);
    HEAP32[$__oe>>2] = $22;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $27 = HEAP8[$__nb>>0]|0;
   if ((($27<<24>>24) == 43) | (($27<<24>>24) == 45)) {
    $28 = HEAP32[$0>>2]|0;
    $29 = (($28) + 28|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_iii($30|0,($0|0),($27|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 8;
     break;
    }
    $34 = (($__nb) + 1|0);
    $35 = HEAP32[$__oe>>2]|0;
    $36 = (($35) + 1|0);
    HEAP32[$__oe>>2] = $36;
    HEAP8[$35>>0] = $31;
    $__nf$0 = $34;
   } else {
    $__nf$0 = $__nb;
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)>(1);
   if ($40) {
    $41 = HEAP8[$__nf$0>>0]|0;
    $42 = ($41<<24>>24)==(48);
    if ($42) {
     $43 = (($__nf$0) + 1|0);
     $44 = HEAP8[$43>>0]|0;
     if ((($44<<24>>24) == 88) | (($44<<24>>24) == 120)) {
      $45 = HEAP32[$0>>2]|0;
      $46 = (($45) + 28|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_iii($47|0,($0|0),48)|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 8;
       break;
      }
      $51 = HEAP32[$__oe>>2]|0;
      $52 = (($51) + 1|0);
      HEAP32[$__oe>>2] = $52;
      HEAP8[$51>>0] = $48;
      $53 = HEAP8[$43>>0]|0;
      $54 = HEAP32[$0>>2]|0;
      $55 = (($54) + 28|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($0|0),($53|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 8;
       break;
      }
      $60 = (($__nf$0) + 2|0);
      $61 = HEAP32[$__oe>>2]|0;
      $62 = (($61) + 1|0);
      HEAP32[$__oe>>2] = $62;
      HEAP8[$61>>0] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $63 = ($__nf$1|0)==($__ne|0);
   if (!($63)) {
    $64 = (($__ne) + -1|0);
    $65 = ($64>>>0)>($__nf$1>>>0);
    if ($65) {
     $$012$i$i5 = $__nf$1;$68 = $64;
     while(1) {
      $66 = HEAP8[$$012$i$i5>>0]|0;
      $67 = HEAP8[$68>>0]|0;
      HEAP8[$$012$i$i5>>0] = $67;
      HEAP8[$68>>0] = $66;
      $69 = (($$012$i$i5) + 1|0);
      $70 = (($68) + -1|0);
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $$012$i$i5 = $69;$68 = $70;
      } else {
       break;
      }
     }
    }
   }
   $72 = HEAP32[$1>>2]|0;
   $73 = (($72) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   __THREW__ = 0;
   $75 = (invoke_ii($74|0,($1|0))|0);
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if ($77) {
    label = 8;
   } else {
    $78 = ($__nf$1>>>0)<($__ne>>>0);
    L26: do {
     if ($78) {
      $79 = (($__grouping) + 1|0);
      $80 = (($__grouping) + 4|0);
      $81 = (($__grouping) + 8|0);
      $__dc$09 = 0;$__dg$010 = 0;$__p$011 = $__nf$1;
      while(1) {
       $82 = HEAP8[$__grouping>>0]|0;
       $83 = $82 & 1;
       $84 = ($83<<24>>24)==(0);
       $85 = HEAP32[$81>>2]|0;
       $$ = $84 ? $79 : $85;
       $86 = (($$) + ($__dg$010)|0);
       $87 = HEAP8[$86>>0]|0;
       $88 = ($87<<24>>24)==(0);
       if ($88) {
        $__dc$1 = $__dc$09;$__dg$1 = $__dg$010;
       } else {
        $89 = HEAP32[$81>>2]|0;
        $$12 = $84 ? $79 : $89;
        $90 = (($$12) + ($__dg$010)|0);
        $91 = HEAP8[$90>>0]|0;
        $92 = $91 << 24 >> 24;
        $93 = ($__dc$09|0)==($92|0);
        if ($93) {
         $94 = HEAP32[$__oe>>2]|0;
         $95 = (($94) + 1|0);
         HEAP32[$__oe>>2] = $95;
         HEAP8[$94>>0] = $75;
         $96 = HEAP8[$__grouping>>0]|0;
         $97 = $96 & 1;
         $98 = ($97<<24>>24)==(0);
         if ($98) {
          $100 = $96&255;
          $101 = $100 >>> 1;
          $103 = $101;
         } else {
          $99 = HEAP32[$80>>2]|0;
          $103 = $99;
         }
         $102 = (($103) + -1)|0;
         $104 = ($__dg$010>>>0)<($102>>>0);
         $105 = $104&1;
         $$__dg$0 = (($105) + ($__dg$010))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$09;$__dg$1 = $__dg$010;
        }
       }
       $106 = HEAP8[$__p$011>>0]|0;
       $107 = HEAP32[$0>>2]|0;
       $108 = (($107) + 28|0);
       $109 = HEAP32[$108>>2]|0;
       __THREW__ = 0;
       $110 = (invoke_iii($109|0,($0|0),($106|0))|0);
       $111 = __THREW__; __THREW__ = 0;
       $112 = $111&1;
       if ($112) {
        break;
       }
       $113 = HEAP32[$__oe>>2]|0;
       $114 = (($113) + 1|0);
       HEAP32[$__oe>>2] = $114;
       HEAP8[$113>>0] = $110;
       $115 = (($__dc$1) + 1)|0;
       $116 = (($__p$011) + 1|0);
       $117 = ($116>>>0)<($__ne>>>0);
       if ($117) {
        $__dc$09 = $115;$__dg$010 = $__dg$1;$__p$011 = $116;
       } else {
        break L26;
       }
      }
      $23 = ___cxa_find_matching_catch()|0;
      $24 = tempRet0;
      $lpad$phi$index = $23;$lpad$phi$index2 = $24;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
    } while(0);
    $118 = $__nf$1;
    $119 = $__nb;
    $120 = (($118) - ($119))|0;
    $121 = (($__ob) + ($120)|0);
    $122 = HEAP32[$__oe>>2]|0;
    $123 = ($121|0)==($122|0);
    if (!($123)) {
     $124 = (($122) + -1|0);
     $125 = ($124>>>0)>($121>>>0);
     if ($125) {
      $$012$i$i = $121;$128 = $124;
      while(1) {
       $126 = HEAP8[$$012$i$i>>0]|0;
       $127 = HEAP8[$128>>0]|0;
       HEAP8[$$012$i$i>>0] = $127;
       HEAP8[$128>>0] = $126;
       $129 = (($$012$i$i) + 1|0);
       $130 = (($128) + -1|0);
       $131 = ($129>>>0)<($130>>>0);
       if ($131) {
        $$012$i$i = $129;$128 = $130;
       } else {
        break;
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index2 = $26;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $132 = ($__np|0)==($__ne|0);
 if ($132) {
  $133 = HEAP32[$__oe>>2]|0;
  $storemerge = $133;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 } else {
  $134 = $__np;
  $135 = $__nb;
  $136 = (($134) - ($135))|0;
  $137 = (($__ob) + ($136)|0);
  $storemerge = $137;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 36|0;
 $__o = sp + 58|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $2 = sp + 20|0;
 $3 = sp + 24|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,9560,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(485,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $21 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($21)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$23,$24,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 24|0;
 $__nar = sp + 32|0;
 $__o = sp + 44|0;
 $__op = sp + 16|0;
 $__oe = sp + 4|0;
 $0 = sp + 8|0;
 $1 = sp + 12|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[9648+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[9648+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[9648+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[9648+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[9648+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[9648+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,9552,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(485,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$13,$14,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 36|0;
 $__o = sp + 59|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $2 = sp + 20|0;
 $3 = sp + 24|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,9560,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(485,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $21 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($21)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$23,$24,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$01 = 0, $$127 = 0, $$18 = 0, $$byval_copy = 0, $$pre = 0, $$pre10 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0;
 var $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 68|0;
 $vararg_buffer9 = sp + 16|0;
 $vararg_buffer5 = sp + 48|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp + 32|0;
 $__fmt = sp;
 $__nar = sp + 88|0;
 $__nb = sp + 84|0;
 $__o = sp + 118|0;
 $__op = sp + 60|0;
 $__oe = sp + 80|0;
 $0 = sp + 76|0;
 $1 = sp + 64|0;
 $2 = sp + 72|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,9568,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 do {
  if ($16) {
   if ($10) {
    __THREW__ = 0;
    $17 = (invoke_i(481)|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = (($__iob) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $21;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $22 = (invoke_iiiii(486,($__nb|0),($17|0),($__fmt|0),($vararg_buffer5|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $__nc$1 = $22;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $27 = (invoke_i(481)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $30 = (($__iob) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $31;
     $vararg_ptr12 = (($vararg_buffer9) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $32 = (invoke_iiiii(486,($__nb|0),($27|0),($__fmt|0),($vararg_buffer9|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      $__nc$1 = $32;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $35 = HEAP32[$__nb>>2]|0;
    $36 = ($35|0)==(0|0);
    if (!($36)) {
     $40 = $35;$69 = $35;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(487);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $40 = $$pre;$69 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   $$127 = $26;$$18 = $25;
   ___resumeException($$18|0);
   // unreachable;
  } else {
   $$pre9 = HEAP32[$__nb>>2]|0;
   $40 = $$pre9;$69 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $39 = (($40) + ($__nc$2)|0);
 $41 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($40,$39,$__iob)|0);
 $42 = ($40|0)==($__nar|0);
 if ($42) {
  $52 = $__nar;$63 = 0;$__ob$0 = $__o;
  label = 20;
 } else {
  $43 = $__nc$2 << 1;
  $44 = (_malloc($43)|0);
  $45 = ($44|0)==(0|0);
  if ($45) {
   __THREW__ = 0;
   invoke_v(487);
   $46 = __THREW__; __THREW__ = 0;
   $47 = $46&1;
   if ($47) {
    $88 = 0;
    label = 19;
   } else {
    $$pre10 = HEAP32[$__nb>>2]|0;
    $52 = $$pre10;$63 = 0;$__ob$0 = 0;
    label = 20;
   }
  } else {
   $52 = $40;$63 = $44;$__ob$0 = $44;
   label = 20;
  }
 }
 do {
  if ((label|0) == 20) {
   __THREW__ = 0;
   invoke_vii(431,($0|0),($__iob|0));
   $50 = __THREW__; __THREW__ = 0;
   $51 = $50&1;
   if ($51) {
    $88 = $63;
    label = 19;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(488,($52|0),($41|0),($39|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $53 = __THREW__; __THREW__ = 0;
    $54 = $53&1;
    if ($54) {
     $74 = ___cxa_find_matching_catch()|0;
     $75 = tempRet0;
     $76 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($76)|0);
     $$0 = $74;$$01 = $75;$78 = $63;
     break;
    }
    $55 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($55)|0);
    $56 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $56;
    $57 = HEAP32[$__op>>2]|0;
    $58 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(434,($1|0),($$byval_copy|0),($__ob$0|0),($57|0),($58|0),($__iob|0),($__fl|0));
    $59 = __THREW__; __THREW__ = 0;
    $60 = $59&1;
    if ($60) {
     $88 = $63;
     label = 19;
    } else {
     $61 = HEAP32[$1>>2]|0;
     HEAP32[$__s>>2] = $61;
     HEAP32[$agg$result>>2] = $61;
     $62 = ($63|0)==(0|0);
     if (!($62)) {
      __THREW__ = 0;
      invoke_vi(489,($63|0));
      $64 = __THREW__; __THREW__ = 0;
      $65 = $64&1;
      if ($65) {
       $66 = ___cxa_find_matching_catch(0|0)|0;
       $67 = tempRet0;
       ___clang_call_terminate($66);
       // unreachable;
      }
     }
     $68 = ($69|0)==(0|0);
     if ($68) {
      STACKTOP = sp;return;
     }
     __THREW__ = 0;
     invoke_vi(489,($69|0));
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      $72 = ___cxa_find_matching_catch(0|0)|0;
      $73 = tempRet0;
      ___clang_call_terminate($72);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 19) {
  $48 = ___cxa_find_matching_catch()|0;
  $49 = tempRet0;
  $$0 = $48;$$01 = $49;$78 = $88;
 }
 $77 = ($78|0)==(0|0);
 if (!($77)) {
  __THREW__ = 0;
  invoke_vi(489,($78|0));
  $79 = __THREW__; __THREW__ = 0;
  $80 = $79&1;
  if ($80) {
   $81 = ___cxa_find_matching_catch(0|0)|0;
   $82 = tempRet0;
   ___clang_call_terminate($81);
   // unreachable;
  }
 }
 $83 = ($69|0)==(0|0);
 if ($83) {
  $$127 = $$01;$$18 = $$0;
  ___resumeException($$18|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(489,($69|0));
 $84 = __THREW__; __THREW__ = 0;
 $85 = $84&1;
 if ($85) {
  $86 = ___cxa_find_matching_catch(0|0)|0;
  $87 = tempRet0;
  ___clang_call_terminate($86);
  // unreachable;
 } else {
  $$127 = $$01;$$18 = $$0;
  ___resumeException($$18|0);
  // unreachable;
 }
}
function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp,$__len,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$012 = 0, $$1 = 0, $$2$lcssa = 0, $$2$ph = 0, $$23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $specify_precision$0$off0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = (($__fmtp) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 1024;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1 = $$0;
 } else {
  $5 = (($$0) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1 = $5;
 }
 $6 = $__flags & 260;
 $7 = $__flags >>> 14;
 $8 = ($6|0)==(260);
 if ($8) {
  $$2$ph = $$1;$specify_precision$0$off0$ph = 0;
 } else {
  $9 = (($$1) + 1|0);
  HEAP8[$$1>>0] = 46;
  $10 = (($$1) + 2|0);
  HEAP8[$9>>0] = 42;
  $$2$ph = $10;$specify_precision$0$off0$ph = 1;
 }
 $11 = HEAP8[$__len>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $$2$lcssa = $$2$ph;
 } else {
  $$012 = $__len;$$23 = $$2$ph;$15 = $11;
  while(1) {
   $13 = (($$012) + 1|0);
   $14 = (($$23) + 1|0);
   HEAP8[$$23>>0] = $15;
   $16 = HEAP8[$13>>0]|0;
   $17 = ($16<<24>>24)==(0);
   if ($17) {
    $$2$lcssa = $14;
    break;
   } else {
    $$012 = $13;$$23 = $14;$15 = $16;
   }
  }
 }
 do {
  if ((($6|0) == 4)) {
   $18 = $7 & 1;
   $19 = ($18|0)==(0);
   if ($19) {
    HEAP8[$$2$lcssa>>0] = 102;
    break;
   } else {
    HEAP8[$$2$lcssa>>0] = 70;
    break;
   }
  } else if ((($6|0) == 256)) {
   $20 = $7 & 1;
   $21 = ($20|0)==(0);
   if ($21) {
    HEAP8[$$2$lcssa>>0] = 101;
    break;
   } else {
    HEAP8[$$2$lcssa>>0] = 69;
    break;
   }
  } else {
   $22 = $7 & 1;
   $23 = ($22|0)!=(0);
   if ($8) {
    if ($23) {
     HEAP8[$$2$lcssa>>0] = 65;
     break;
    } else {
     HEAP8[$$2$lcssa>>0] = 97;
     break;
    }
   } else {
    if ($23) {
     HEAP8[$$2$lcssa>>0] = 71;
     break;
    } else {
     HEAP8[$$2$lcssa>>0] = 103;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($specify_precision$0$off0$ph|0);
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i7 = 0, $$47 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$018 = 0, $__dc$1 = 0, $__dg$019 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$214 = 0, $__nf$3 = 0, $__ns$034 = 0, $__ns$126 = 0, $__ns$2 = 0, $__p$020 = 0, $lpad$phi$index = 0;
 var $lpad$phi$index5 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,10856)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11000)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 if ((($5<<24>>24) == 43) | (($5<<24>>24) == 45)) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   $12 = (($__nb) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = (($13) + 1|0);
   HEAP32[$__oe>>2] = $14;
   HEAP8[$13>>0] = $9;
   $__nf$0 = $12;
   label = 10;
  }
 } else {
  $__nf$0 = $__nb;
  label = 10;
 }
 L4: do {
  if ((label|0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   L6: do {
    if ($28) {
     $30 = HEAP8[$__nf$0>>0]|0;
     $31 = ($30<<24>>24)==(48);
     if ($31) {
      $32 = (($__nf$0) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      if ((($33<<24>>24) == 88) | (($33<<24>>24) == 120)) {
       $34 = HEAP32[$0>>2]|0;
       $35 = (($34) + 28|0);
       $36 = HEAP32[$35>>2]|0;
       __THREW__ = 0;
       $37 = (invoke_iii($36|0,($0|0),48)|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        break L4;
       }
       $40 = HEAP32[$__oe>>2]|0;
       $41 = (($40) + 1|0);
       HEAP32[$__oe>>2] = $41;
       HEAP8[$40>>0] = $37;
       $42 = (($__nf$0) + 2|0);
       $43 = HEAP8[$32>>0]|0;
       $44 = HEAP32[$0>>2]|0;
       $45 = (($44) + 28|0);
       $46 = HEAP32[$45>>2]|0;
       __THREW__ = 0;
       $47 = (invoke_iii($46|0,($0|0),($43|0))|0);
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if ($49) {
        break L4;
       }
       $50 = HEAP32[$__oe>>2]|0;
       $51 = (($50) + 1|0);
       HEAP32[$__oe>>2] = $51;
       HEAP8[$50>>0] = $47;
       $52 = ($42>>>0)<($__ne>>>0);
       if ($52) {
        $__ns$034 = $42;
        while(1) {
         $55 = HEAP8[$__ns$034>>0]|0;
         __THREW__ = 0;
         $56 = (invoke_i(481)|0);
         $57 = __THREW__; __THREW__ = 0;
         $58 = $57&1;
         if ($58) {
          break;
         }
         $59 = $55 << 24 >> 24;
         __THREW__ = 0;
         $60 = (invoke_iii(490,($59|0),($56|0))|0);
         $61 = __THREW__; __THREW__ = 0;
         $62 = $61&1;
         if ($62) {
          break;
         }
         $63 = ($60|0)==(0);
         $54 = (($__ns$034) + 1|0);
         if ($63) {
          $__nf$1 = $42;$__ns$2 = $__ns$034;
          break L6;
         }
         $53 = ($54>>>0)<($__ne>>>0);
         if ($53) {
          $__ns$034 = $54;
         } else {
          $__nf$1 = $42;$__ns$2 = $54;
          break L6;
         }
        }
        $21 = ___cxa_find_matching_catch()|0;
        $22 = tempRet0;
        $lpad$phi$index = $21;$lpad$phi$index5 = $22;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
        ___resumeException($lpad$phi$index|0);
        // unreachable;
       } else {
        $__nf$1 = $42;$__ns$2 = $42;
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } while(0);
   L19: do {
    if ((label|0) == 11) {
     $29 = ($__nf$0>>>0)<($__ne>>>0);
     if ($29) {
      $__ns$126 = $__nf$0;
      while(1) {
       $66 = HEAP8[$__ns$126>>0]|0;
       __THREW__ = 0;
       $67 = (invoke_i(481)|0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        break;
       }
       $70 = $66 << 24 >> 24;
       __THREW__ = 0;
       $71 = (invoke_iii(491,($70|0),($67|0))|0);
       $72 = __THREW__; __THREW__ = 0;
       $73 = $72&1;
       if ($73) {
        break;
       }
       $74 = ($71|0)==(0);
       $65 = (($__ns$126) + 1|0);
       if ($74) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$126;
        break L19;
       }
       $64 = ($65>>>0)<($__ne>>>0);
       if ($64) {
        $__ns$126 = $65;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $65;
        break L19;
       }
      }
      $19 = ___cxa_find_matching_catch()|0;
      $20 = tempRet0;
      $lpad$phi$index = $19;$lpad$phi$index5 = $20;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $75 = HEAP8[$__grouping>>0]|0;
   $76 = $75 & 1;
   $77 = ($76<<24>>24)==(0);
   if ($77) {
    $80 = $75&255;
    $81 = $80 >>> 1;
    $83 = $81;
   } else {
    $78 = (($__grouping) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $83 = $79;
   }
   $82 = ($83|0)==(0);
   if ($82) {
    $84 = HEAP32[$__oe>>2]|0;
    $85 = HEAP32[$0>>2]|0;
    $86 = (($85) + 32|0);
    $87 = HEAP32[$86>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($87|0,($0|0),($__nf$1|0),($__ns$2|0),($84|0))|0);
    $88 = __THREW__; __THREW__ = 0;
    $89 = $88&1;
    if ($89) {
     break;
    }
    $90 = $__ns$2;
    $91 = $__nf$1;
    $92 = (($90) - ($91))|0;
    $93 = HEAP32[$__oe>>2]|0;
    $94 = (($93) + ($92)|0);
    HEAP32[$__oe>>2] = $94;
   } else {
    $95 = ($__nf$1|0)==($__ns$2|0);
    if (!($95)) {
     $96 = (($__ns$2) + -1|0);
     $97 = ($96>>>0)>($__nf$1>>>0);
     if ($97) {
      $$012$i$i = $__nf$1;$100 = $96;
      while(1) {
       $98 = HEAP8[$$012$i$i>>0]|0;
       $99 = HEAP8[$100>>0]|0;
       HEAP8[$$012$i$i>>0] = $99;
       HEAP8[$100>>0] = $98;
       $101 = (($$012$i$i) + 1|0);
       $102 = (($100) + -1|0);
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $$012$i$i = $101;$100 = $102;
       } else {
        break;
       }
      }
     }
    }
    $104 = HEAP32[$1>>2]|0;
    $105 = (($104) + 16|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($1|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     break;
    }
    $110 = ($__nf$1>>>0)<($__ns$2>>>0);
    L43: do {
     if ($110) {
      $111 = (($__grouping) + 1|0);
      $112 = (($__grouping) + 4|0);
      $113 = (($__grouping) + 8|0);
      $__dc$018 = 0;$__dg$019 = 0;$__p$020 = $__nf$1;
      while(1) {
       $114 = HEAP8[$__grouping>>0]|0;
       $115 = $114 & 1;
       $116 = ($115<<24>>24)==(0);
       $117 = HEAP32[$113>>2]|0;
       $$ = $116 ? $111 : $117;
       $118 = (($$) + ($__dg$019)|0);
       $119 = HEAP8[$118>>0]|0;
       $120 = ($119<<24>>24)>(0);
       if ($120) {
        $121 = HEAP32[$113>>2]|0;
        $$47 = $116 ? $111 : $121;
        $122 = (($$47) + ($__dg$019)|0);
        $123 = HEAP8[$122>>0]|0;
        $124 = $123 << 24 >> 24;
        $125 = ($__dc$018|0)==($124|0);
        if ($125) {
         $126 = HEAP32[$__oe>>2]|0;
         $127 = (($126) + 1|0);
         HEAP32[$__oe>>2] = $127;
         HEAP8[$126>>0] = $107;
         $128 = HEAP8[$__grouping>>0]|0;
         $129 = $128 & 1;
         $130 = ($129<<24>>24)==(0);
         if ($130) {
          $132 = $128&255;
          $133 = $132 >>> 1;
          $135 = $133;
         } else {
          $131 = HEAP32[$112>>2]|0;
          $135 = $131;
         }
         $134 = (($135) + -1)|0;
         $136 = ($__dg$019>>>0)<($134>>>0);
         $137 = $136&1;
         $$__dg$0 = (($137) + ($__dg$019))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$018;$__dg$1 = $__dg$019;
        }
       } else {
        $__dc$1 = $__dc$018;$__dg$1 = $__dg$019;
       }
       $138 = HEAP8[$__p$020>>0]|0;
       $139 = HEAP32[$0>>2]|0;
       $140 = (($139) + 28|0);
       $141 = HEAP32[$140>>2]|0;
       __THREW__ = 0;
       $142 = (invoke_iii($141|0,($0|0),($138|0))|0);
       $143 = __THREW__; __THREW__ = 0;
       $144 = $143&1;
       if ($144) {
        break;
       }
       $145 = HEAP32[$__oe>>2]|0;
       $146 = (($145) + 1|0);
       HEAP32[$__oe>>2] = $146;
       HEAP8[$145>>0] = $142;
       $147 = (($__dc$1) + 1)|0;
       $148 = (($__p$020) + 1|0);
       $149 = ($148>>>0)<($__ns$2>>>0);
       if ($149) {
        $__dc$018 = $147;$__dg$019 = $__dg$1;$__p$020 = $148;
       } else {
        break L43;
       }
      }
      $17 = ___cxa_find_matching_catch()|0;
      $18 = tempRet0;
      $lpad$phi$index = $17;$lpad$phi$index5 = $18;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
    } while(0);
    $150 = $__nf$1;
    $151 = $__nb;
    $152 = (($150) - ($151))|0;
    $153 = (($__ob) + ($152)|0);
    $154 = HEAP32[$__oe>>2]|0;
    $155 = ($153|0)==($154|0);
    if (!($155)) {
     $156 = (($154) + -1|0);
     $157 = ($156>>>0)>($153>>>0);
     if ($157) {
      $$012$i$i7 = $153;$160 = $156;
      while(1) {
       $158 = HEAP8[$$012$i$i7>>0]|0;
       $159 = HEAP8[$160>>0]|0;
       HEAP8[$$012$i$i7>>0] = $159;
       HEAP8[$160>>0] = $158;
       $161 = (($$012$i$i7) + 1|0);
       $162 = (($160) + -1|0);
       $163 = ($161>>>0)<($162>>>0);
       if ($163) {
        $$012$i$i7 = $161;$160 = $162;
       } else {
        break;
       }
      }
     }
    }
   }
   $164 = ($__ns$2>>>0)<($__ne>>>0);
   L63: do {
    if ($164) {
     $__nf$214 = $__ns$2;
     while(1) {
      $165 = HEAP8[$__nf$214>>0]|0;
      $166 = ($165<<24>>24)==(46);
      if ($166) {
       label = 51;
       break;
      }
      $176 = HEAP32[$0>>2]|0;
      $177 = (($176) + 28|0);
      $178 = HEAP32[$177>>2]|0;
      __THREW__ = 0;
      $179 = (invoke_iii($178|0,($0|0),($165|0))|0);
      $180 = __THREW__; __THREW__ = 0;
      $181 = $180&1;
      if ($181) {
       label = 4;
       break;
      }
      $182 = HEAP32[$__oe>>2]|0;
      $183 = (($182) + 1|0);
      HEAP32[$__oe>>2] = $183;
      HEAP8[$182>>0] = $179;
      $184 = (($__nf$214) + 1|0);
      $185 = ($184>>>0)<($__ne>>>0);
      if ($185) {
       $__nf$214 = $184;
      } else {
       $__nf$3 = $184;
       break L63;
      }
     }
     if ((label|0) == 4) {
      $15 = ___cxa_find_matching_catch()|0;
      $16 = tempRet0;
      $lpad$phi$index = $15;$lpad$phi$index5 = $16;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
     else if ((label|0) == 51) {
      $167 = HEAP32[$1>>2]|0;
      $168 = (($167) + 12|0);
      $169 = HEAP32[$168>>2]|0;
      __THREW__ = 0;
      $170 = (invoke_ii($169|0,($1|0))|0);
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       break L4;
      }
      $173 = HEAP32[$__oe>>2]|0;
      $174 = (($173) + 1|0);
      HEAP32[$__oe>>2] = $174;
      HEAP8[$173>>0] = $170;
      $175 = (($__nf$214) + 1|0);
      $__nf$3 = $175;
      break;
     }
    } else {
     $__nf$3 = $__ns$2;
    }
   } while(0);
   $186 = HEAP32[$__oe>>2]|0;
   $187 = HEAP32[$0>>2]|0;
   $188 = (($187) + 32|0);
   $189 = HEAP32[$188>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($189|0,($0|0),($__nf$3|0),($__ne|0),($186|0))|0);
   $190 = __THREW__; __THREW__ = 0;
   $191 = $190&1;
   if (!($191)) {
    $192 = $__nf$3;
    $193 = (($25) - ($192))|0;
    $194 = HEAP32[$__oe>>2]|0;
    $195 = (($194) + ($193)|0);
    HEAP32[$__oe>>2] = $195;
    $196 = ($__np|0)==($__ne|0);
    if ($196) {
     $storemerge = $195;
     HEAP32[$__op>>2] = $storemerge;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
    $197 = $__np;
    $198 = $__nb;
    $199 = (($197) - ($198))|0;
    $200 = (($__ob) + ($199)|0);
    $storemerge = $200;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 $lpad$phi$index = $23;$lpad$phi$index5 = $24;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$01 = 0, $$127 = 0, $$18 = 0, $$byval_copy = 0, $$pre = 0, $$pre10 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0;
 var $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 60|0;
 $vararg_buffer9 = sp + 16|0;
 $vararg_buffer5 = sp + 40|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp + 24|0;
 $__fmt = sp;
 $__nar = sp + 80|0;
 $__nb = sp + 76|0;
 $__o = sp + 110|0;
 $__op = sp + 52|0;
 $__oe = sp + 72|0;
 $0 = sp + 68|0;
 $1 = sp + 56|0;
 $2 = sp + 64|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,9576,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 do {
  if ($16) {
   if ($10) {
    __THREW__ = 0;
    $17 = (invoke_i(481)|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = (($__iob) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $21;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $22 = (invoke_iiiii(486,($__nb|0),($17|0),($__fmt|0),($vararg_buffer5|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $__nc$1 = $22;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $27 = (invoke_i(481)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $30 = (invoke_iiiii(486,($__nb|0),($27|0),($__fmt|0),($vararg_buffer9|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      $__nc$1 = $30;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $33 = HEAP32[$__nb>>2]|0;
    $34 = ($33|0)==(0|0);
    if (!($34)) {
     $38 = $33;$61 = $33;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(487);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if (!($36)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $38 = $$pre;$61 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   $$127 = $26;$$18 = $25;
   ___resumeException($$18|0);
   // unreachable;
  } else {
   $$pre9 = HEAP32[$__nb>>2]|0;
   $38 = $$pre9;$61 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $37 = (($38) + ($__nc$2)|0);
 $39 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($38,$37,$__iob)|0);
 $40 = ($38|0)==($__nar|0);
 if ($40) {
  $50 = $__nar;$60 = 0;$__ob$0 = $__o;
  label = 20;
 } else {
  $41 = $__nc$2 << 1;
  $42 = (_malloc($41)|0);
  $43 = ($42|0)==(0|0);
  if ($43) {
   __THREW__ = 0;
   invoke_v(487);
   $44 = __THREW__; __THREW__ = 0;
   $45 = $44&1;
   if ($45) {
    $66 = 0;
    label = 19;
   } else {
    $$pre10 = HEAP32[$__nb>>2]|0;
    $50 = $$pre10;$60 = 0;$__ob$0 = 0;
    label = 20;
   }
  } else {
   $50 = $38;$60 = $42;$__ob$0 = $42;
   label = 20;
  }
 }
 do {
  if ((label|0) == 20) {
   __THREW__ = 0;
   invoke_vii(431,($0|0),($__iob|0));
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   if ($49) {
    $66 = $60;
    label = 19;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(488,($50|0),($39|0),($37|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $51 = __THREW__; __THREW__ = 0;
    $52 = $51&1;
    if ($52) {
     $62 = ___cxa_find_matching_catch()|0;
     $63 = tempRet0;
     $64 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($64)|0);
     $$0 = $62;$$01 = $63;$65 = $60;
     break;
    }
    $53 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($53)|0);
    $54 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $54;
    $55 = HEAP32[$__op>>2]|0;
    $56 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(434,($1|0),($$byval_copy|0),($__ob$0|0),($55|0),($56|0),($__iob|0),($__fl|0));
    $57 = __THREW__; __THREW__ = 0;
    $58 = $57&1;
    if ($58) {
     $66 = $60;
     label = 19;
    } else {
     $59 = HEAP32[$1>>2]|0;
     HEAP32[$agg$result>>2] = $59;
     _free($60);
     _free($61);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 19) {
  $46 = ___cxa_find_matching_catch()|0;
  $47 = tempRet0;
  $$0 = $46;$$01 = $47;$65 = $66;
 }
 _free($65);
 _free($61);
 $$127 = $$01;$$18 = $$0;
 ___resumeException($$18|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 12|0;
 $vararg_buffer = sp;
 $__fmt = sp + 54|0;
 $__nar = sp + 60|0;
 $__o = sp + 16|0;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[9656+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[9656+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[9656+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[9656+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[9656+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[9656+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$vararg_buffer)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $6 = (invoke_iii(432,($0|0),(10856|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 }
 $9 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
 $10 = HEAP32[$6>>2]|0;
 $11 = (($10) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 (FUNCTION_TABLE_iiiii[$12 & 1023]($6,$__nar,$4,$__o)|0);
 $13 = (($__o) + ($3)|0);
 $14 = ($5|0)==($4|0);
 if ($14) {
  $__op$0 = $13;
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $22;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$13,$__iob,$__fl);
  STACKTOP = sp;return;
 }
 $18 = $__nar;
 $19 = $5;
 $20 = (($19) - ($18))|0;
 $21 = (($__o) + ($20)|0);
 $__op$0 = $21;
 $22 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $22;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$13,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi4Z2D = 0, $$pre$phiZ2D = 0, $$pre2 = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$this>>2]|0;
  $7 = (($6) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $9;
  $10 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$8 & 511]($agg$result,$this,$$byval_copy,$__iob,$__fl,$10);
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 $11 = (invoke_iii(432,($1|0),(11008|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $55 = ___cxa_find_matching_catch()|0;
  $56 = tempRet0;
  $57 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($57)|0);
  $$0 = $55;$$01 = $56;
  ___resumeException($$0|0);
  // unreachable;
 }
 $14 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($14)|0);
 $15 = HEAP32[$11>>2]|0;
 if ($__v) {
  $16 = (($15) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 1023]($__nm,$11);
 } else {
  $18 = (($15) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  FUNCTION_TABLE_vii[$19 & 1023]($__nm,$11);
 }
 $20 = HEAP8[$__nm>>0]|0;
 $21 = $20 & 1;
 $22 = ($21<<24>>24)==(0);
 if ($22) {
  $25 = (($__nm) + 4|0);
  $$pre3 = (($__nm) + 8|0);
  $$ph = $25;$$pre$phi4Z2D = $$pre3;$$pre$phiZ2D = $25;
 } else {
  $23 = (($__nm) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $$pre2 = (($__nm) + 4|0);
  $$ph = $24;$$pre$phi4Z2D = $23;$$pre$phiZ2D = $$pre2;
 }
 $27 = $20;$37 = $$ph;
 while(1) {
  $26 = $27 & 1;
  $28 = ($26<<24>>24)==(0);
  if ($28) {
   $31 = $27&255;
   $32 = $31 >>> 1;
   $34 = $$pre$phiZ2D;$35 = $32;
  } else {
   $29 = HEAP32[$$pre$phi4Z2D>>2]|0;
   $30 = HEAP32[$$pre$phiZ2D>>2]|0;
   $34 = $29;$35 = $30;
  }
  $33 = (($34) + ($35<<2)|0);
  $36 = ($37|0)==($33|0);
  if ($36) {
   label = 24;
   break;
  }
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP32[$__s>>2]|0;
  $40 = ($39|0)==(0|0);
  if (!($40)) {
   $41 = (($39) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($39) + 28|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($42|0)==($44|0);
   if ($45) {
    $46 = HEAP32[$39>>2]|0;
    $47 = (($46) + 52|0);
    $48 = HEAP32[$47>>2]|0;
    __THREW__ = 0;
    $49 = (invoke_iii($48|0,($39|0),($38|0))|0);
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     label = 23;
     break;
    } else {
     $$0$i$i = $49;
    }
   } else {
    $52 = (($42) + 4|0);
    HEAP32[$41>>2] = $52;
    HEAP32[$42>>2] = $38;
    $$0$i$i = $38;
   }
   $53 = ($$0$i$i|0)==(-1);
   if ($53) {
    HEAP32[$__s>>2] = 0;
   }
  }
  $54 = (($37) + 4|0);
  $$pre = HEAP8[$__nm>>0]|0;
  $27 = $$pre;$37 = $54;
 }
 if ((label|0) == 23) {
  $58 = ___cxa_find_matching_catch()|0;
  $59 = tempRet0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
  $$0 = $58;$$01 = $59;
  ___resumeException($$0|0);
  // unreachable;
 }
 else if ((label|0) == 24) {
  $60 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$result>>2] = $60;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $vararg_buffer = sp;
 $__fmt = sp + 108|0;
 $__nar = sp + 116|0;
 $__o = sp + 24|0;
 $__op = sp + 4|0;
 $__oe = sp + 20|0;
 $0 = sp + 12|0;
 $1 = sp + 16|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[9648+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[9648+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[9648+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[9648+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[9648+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[9648+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,9552,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(492,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$13,$14,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i5 = 0, $$11 = 0, $$__dg$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$08 = 0, $__dc$1 = 0, $__dg$09 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$010 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,10848)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11008)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = $5&255;
  $11 = $10 >>> 1;
  $13 = $11;
 } else {
  $8 = (($__grouping) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $13 = $9;
 }
 $12 = ($13|0)==(0);
 do {
  if ($12) {
   $14 = HEAP32[$0>>2]|0;
   $15 = (($14) + 48|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 8;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21<<2)|0);
    HEAP32[$__oe>>2] = $22;
    $137 = $22;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $27 = HEAP8[$__nb>>0]|0;
   if ((($27<<24>>24) == 43) | (($27<<24>>24) == 45)) {
    $28 = HEAP32[$0>>2]|0;
    $29 = (($28) + 44|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_iii($30|0,($0|0),($27|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 8;
     break;
    }
    $34 = (($__nb) + 1|0);
    $35 = HEAP32[$__oe>>2]|0;
    $36 = (($35) + 4|0);
    HEAP32[$__oe>>2] = $36;
    HEAP32[$35>>2] = $31;
    $__nf$0 = $34;
   } else {
    $__nf$0 = $__nb;
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)>(1);
   if ($40) {
    $41 = HEAP8[$__nf$0>>0]|0;
    $42 = ($41<<24>>24)==(48);
    if ($42) {
     $43 = (($__nf$0) + 1|0);
     $44 = HEAP8[$43>>0]|0;
     if ((($44<<24>>24) == 88) | (($44<<24>>24) == 120)) {
      $45 = HEAP32[$0>>2]|0;
      $46 = (($45) + 44|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_iii($47|0,($0|0),48)|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 8;
       break;
      }
      $51 = HEAP32[$__oe>>2]|0;
      $52 = (($51) + 4|0);
      HEAP32[$__oe>>2] = $52;
      HEAP32[$51>>2] = $48;
      $53 = HEAP8[$43>>0]|0;
      $54 = HEAP32[$0>>2]|0;
      $55 = (($54) + 44|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($0|0),($53|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 8;
       break;
      }
      $60 = (($__nf$0) + 2|0);
      $61 = HEAP32[$__oe>>2]|0;
      $62 = (($61) + 4|0);
      HEAP32[$__oe>>2] = $62;
      HEAP32[$61>>2] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $63 = ($__nf$1|0)==($__ne|0);
   if (!($63)) {
    $64 = (($__ne) + -1|0);
    $65 = ($64>>>0)>($__nf$1>>>0);
    if ($65) {
     $$012$i$i5 = $__nf$1;$68 = $64;
     while(1) {
      $66 = HEAP8[$$012$i$i5>>0]|0;
      $67 = HEAP8[$68>>0]|0;
      HEAP8[$$012$i$i5>>0] = $67;
      HEAP8[$68>>0] = $66;
      $69 = (($$012$i$i5) + 1|0);
      $70 = (($68) + -1|0);
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $$012$i$i5 = $69;$68 = $70;
      } else {
       break;
      }
     }
    }
   }
   $72 = HEAP32[$1>>2]|0;
   $73 = (($72) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   __THREW__ = 0;
   $75 = (invoke_ii($74|0,($1|0))|0);
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if ($77) {
    label = 8;
   } else {
    $78 = ($__nf$1>>>0)<($__ne>>>0);
    L26: do {
     if ($78) {
      $79 = (($__grouping) + 1|0);
      $80 = (($__grouping) + 4|0);
      $81 = (($__grouping) + 8|0);
      $__dc$08 = 0;$__dg$09 = 0;$__p$010 = $__nf$1;
      while(1) {
       $82 = HEAP8[$__grouping>>0]|0;
       $83 = $82 & 1;
       $84 = ($83<<24>>24)==(0);
       $85 = HEAP32[$81>>2]|0;
       $$ = $84 ? $79 : $85;
       $86 = (($$) + ($__dg$09)|0);
       $87 = HEAP8[$86>>0]|0;
       $88 = ($87<<24>>24)==(0);
       if ($88) {
        $__dc$1 = $__dc$08;$__dg$1 = $__dg$09;
       } else {
        $89 = HEAP32[$81>>2]|0;
        $$11 = $84 ? $79 : $89;
        $90 = (($$11) + ($__dg$09)|0);
        $91 = HEAP8[$90>>0]|0;
        $92 = $91 << 24 >> 24;
        $93 = ($__dc$08|0)==($92|0);
        if ($93) {
         $94 = HEAP32[$__oe>>2]|0;
         $95 = (($94) + 4|0);
         HEAP32[$__oe>>2] = $95;
         HEAP32[$94>>2] = $75;
         $96 = HEAP8[$__grouping>>0]|0;
         $97 = $96 & 1;
         $98 = ($97<<24>>24)==(0);
         if ($98) {
          $100 = $96&255;
          $101 = $100 >>> 1;
          $103 = $101;
         } else {
          $99 = HEAP32[$80>>2]|0;
          $103 = $99;
         }
         $102 = (($103) + -1)|0;
         $104 = ($__dg$09>>>0)<($102>>>0);
         $105 = $104&1;
         $$__dg$0 = (($105) + ($__dg$09))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$08;$__dg$1 = $__dg$09;
        }
       }
       $106 = HEAP8[$__p$010>>0]|0;
       $107 = HEAP32[$0>>2]|0;
       $108 = (($107) + 44|0);
       $109 = HEAP32[$108>>2]|0;
       __THREW__ = 0;
       $110 = (invoke_iii($109|0,($0|0),($106|0))|0);
       $111 = __THREW__; __THREW__ = 0;
       $112 = $111&1;
       if ($112) {
        break;
       }
       $113 = HEAP32[$__oe>>2]|0;
       $114 = (($113) + 4|0);
       HEAP32[$__oe>>2] = $114;
       HEAP32[$113>>2] = $110;
       $115 = (($__dc$1) + 1)|0;
       $116 = (($__p$010) + 1|0);
       $117 = ($116>>>0)<($__ne>>>0);
       if ($117) {
        $__dc$08 = $115;$__dg$09 = $__dg$1;$__p$010 = $116;
       } else {
        $123 = $114;
        break L26;
       }
      }
      $23 = ___cxa_find_matching_catch()|0;
      $24 = tempRet0;
      $lpad$phi$index = $23;$lpad$phi$index2 = $24;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $123 = $$pre;
     }
    } while(0);
    $118 = $__nf$1;
    $119 = $__nb;
    $120 = (($118) - ($119))|0;
    $121 = (($__ob) + ($120<<2)|0);
    $122 = ($121|0)==($123|0);
    if ($122) {
     $137 = $123;
    } else {
     $124 = (($123) + -4|0);
     $125 = ($124>>>0)>($121>>>0);
     if ($125) {
      $$012$i$i = $121;$128 = $124;
      while(1) {
       $126 = HEAP32[$$012$i$i>>2]|0;
       $127 = HEAP32[$128>>2]|0;
       HEAP32[$$012$i$i>>2] = $127;
       HEAP32[$128>>2] = $126;
       $129 = (($$012$i$i) + 4|0);
       $130 = (($128) + -4|0);
       $131 = ($129>>>0)<($130>>>0);
       if ($131) {
        $$012$i$i = $129;$128 = $130;
       } else {
        $137 = $123;
        break;
       }
      }
     } else {
      $137 = $123;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index2 = $26;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $132 = ($__np|0)==($__ne|0);
 if ($132) {
  $storemerge = $137;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
 $133 = $__np;
 $134 = $__nb;
 $135 = (($133) - ($134))|0;
 $136 = (($__ob) + ($135<<2)|0);
 $storemerge = $136;
 HEAP32[$__op>>2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 200|0;
 $__o = sp + 36|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 32|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,9560,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(492,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $21 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($21)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$23,$24,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $vararg_buffer = sp;
 $__fmt = sp + 108|0;
 $__nar = sp + 116|0;
 $__o = sp + 24|0;
 $__op = sp + 4|0;
 $__oe = sp + 20|0;
 $0 = sp + 12|0;
 $1 = sp + 16|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[9648+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[9648+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[9648+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[9648+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[9648+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[9648+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,9552,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(492,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$13,$14,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 208|0;
 $__o = sp + 36|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 32|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,9560,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(492,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $21 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($21)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$23,$24,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$01 = 0, $$125 = 0, $$16 = 0, $$byval_copy = 0, $$pre = 0, $$pre7 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 296|0;
 $vararg_buffer9 = sp + 8|0;
 $vararg_buffer5 = sp + 48|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 32|0;
 $__fmt = sp;
 $__nar = sp + 316|0;
 $__nb = sp + 312|0;
 $__o = sp + 68|0;
 $__op = sp + 64|0;
 $__oe = sp + 60|0;
 $0 = sp + 304|0;
 $1 = sp + 300|0;
 $2 = sp + 308|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,9568,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 do {
  if ($16) {
   if ($10) {
    __THREW__ = 0;
    $17 = (invoke_i(481)|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = (($__iob) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $21;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $22 = (invoke_iiiii(486,($__nb|0),($17|0),($__fmt|0),($vararg_buffer5|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $__nc$1 = $22;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $27 = (invoke_i(481)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $30 = (($__iob) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $31;
     $vararg_ptr12 = (($vararg_buffer9) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $32 = (invoke_iiiii(486,($__nb|0),($27|0),($__fmt|0),($vararg_buffer9|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      $__nc$1 = $32;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $35 = HEAP32[$__nb>>2]|0;
    $36 = ($35|0)==(0|0);
    if (!($36)) {
     $40 = $35;$64 = $35;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(487);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $40 = $$pre;$64 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   $$125 = $26;$$16 = $25;
   ___resumeException($$16|0);
   // unreachable;
  } else {
   $$pre7 = HEAP32[$__nb>>2]|0;
   $40 = $$pre7;$64 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $39 = (($40) + ($__nc$2)|0);
 $41 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($40,$39,$__iob)|0);
 $42 = ($40|0)==($__nar|0);
 if ($42) {
  $52 = $__nar;$63 = 0;$__ob$0 = $__o;
  label = 20;
 } else {
  $43 = $__nc$2 << 3;
  $44 = (_malloc($43)|0);
  $45 = ($44|0)==(0|0);
  if ($45) {
   __THREW__ = 0;
   invoke_v(487);
   $46 = __THREW__; __THREW__ = 0;
   $47 = $46&1;
   if ($47) {
    $70 = 0;
    label = 19;
   } else {
    $$pre8 = HEAP32[$__nb>>2]|0;
    $52 = $$pre8;$63 = $44;$__ob$0 = $44;
    label = 20;
   }
  } else {
   $52 = $40;$63 = $44;$__ob$0 = $44;
   label = 20;
  }
 }
 do {
  if ((label|0) == 20) {
   __THREW__ = 0;
   invoke_vii(431,($0|0),($__iob|0));
   $50 = __THREW__; __THREW__ = 0;
   $51 = $50&1;
   if ($51) {
    $70 = $63;
    label = 19;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(493,($52|0),($41|0),($39|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $53 = __THREW__; __THREW__ = 0;
    $54 = $53&1;
    if ($54) {
     $65 = ___cxa_find_matching_catch()|0;
     $66 = tempRet0;
     $67 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($67)|0);
     $$0 = $65;$$01 = $66;$69 = $63;
     break;
    }
    $55 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($55)|0);
    $56 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $56;
    $57 = HEAP32[$__op>>2]|0;
    $58 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(494,($1|0),($$byval_copy|0),($__ob$0|0),($57|0),($58|0),($__iob|0),($__fl|0));
    $59 = __THREW__; __THREW__ = 0;
    $60 = $59&1;
    if ($60) {
     $70 = $63;
     label = 19;
    } else {
     $61 = HEAP32[$1>>2]|0;
     HEAP32[$__s>>2] = $61;
     HEAP32[$agg$result>>2] = $61;
     $62 = ($63|0)==(0|0);
     if ($62) {
      _free($64);
      STACKTOP = sp;return;
     }
     _free($63);
     _free($64);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 19) {
  $48 = ___cxa_find_matching_catch()|0;
  $49 = tempRet0;
  $$0 = $48;$$01 = $49;$69 = $70;
 }
 $68 = ($69|0)==(0|0);
 if (!($68)) {
  _free($69);
 }
 _free($64);
 $$125 = $$01;$$16 = $$0;
 ___resumeException($$16|0);
 // unreachable;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i7 = 0, $$46 = 0, $$__dg$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$017 = 0, $__dc$1 = 0, $__dg$018 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$213 = 0, $__nf$3 = 0, $__ns$033 = 0, $__ns$125 = 0, $__ns$2 = 0;
 var $__p$019 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,10848)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11008)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 if ((($5<<24>>24) == 43) | (($5<<24>>24) == 45)) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   $12 = (($__nb) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = (($13) + 4|0);
   HEAP32[$__oe>>2] = $14;
   HEAP32[$13>>2] = $9;
   $__nf$0 = $12;
   label = 10;
  }
 } else {
  $__nf$0 = $__nb;
  label = 10;
 }
 L4: do {
  if ((label|0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   L6: do {
    if ($28) {
     $30 = HEAP8[$__nf$0>>0]|0;
     $31 = ($30<<24>>24)==(48);
     if ($31) {
      $32 = (($__nf$0) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      if ((($33<<24>>24) == 88) | (($33<<24>>24) == 120)) {
       $34 = HEAP32[$0>>2]|0;
       $35 = (($34) + 44|0);
       $36 = HEAP32[$35>>2]|0;
       __THREW__ = 0;
       $37 = (invoke_iii($36|0,($0|0),48)|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        break L4;
       }
       $40 = HEAP32[$__oe>>2]|0;
       $41 = (($40) + 4|0);
       HEAP32[$__oe>>2] = $41;
       HEAP32[$40>>2] = $37;
       $42 = (($__nf$0) + 2|0);
       $43 = HEAP8[$32>>0]|0;
       $44 = HEAP32[$0>>2]|0;
       $45 = (($44) + 44|0);
       $46 = HEAP32[$45>>2]|0;
       __THREW__ = 0;
       $47 = (invoke_iii($46|0,($0|0),($43|0))|0);
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if ($49) {
        break L4;
       }
       $50 = HEAP32[$__oe>>2]|0;
       $51 = (($50) + 4|0);
       HEAP32[$__oe>>2] = $51;
       HEAP32[$50>>2] = $47;
       $52 = ($42>>>0)<($__ne>>>0);
       if ($52) {
        $__ns$033 = $42;
        while(1) {
         $55 = HEAP8[$__ns$033>>0]|0;
         __THREW__ = 0;
         $56 = (invoke_i(481)|0);
         $57 = __THREW__; __THREW__ = 0;
         $58 = $57&1;
         if ($58) {
          break;
         }
         $59 = $55 << 24 >> 24;
         __THREW__ = 0;
         $60 = (invoke_iii(490,($59|0),($56|0))|0);
         $61 = __THREW__; __THREW__ = 0;
         $62 = $61&1;
         if ($62) {
          break;
         }
         $63 = ($60|0)==(0);
         $54 = (($__ns$033) + 1|0);
         if ($63) {
          $__nf$1 = $42;$__ns$2 = $__ns$033;
          break L6;
         }
         $53 = ($54>>>0)<($__ne>>>0);
         if ($53) {
          $__ns$033 = $54;
         } else {
          $__nf$1 = $42;$__ns$2 = $54;
          break L6;
         }
        }
        $21 = ___cxa_find_matching_catch()|0;
        $22 = tempRet0;
        $lpad$phi$index = $21;$lpad$phi$index5 = $22;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
        ___resumeException($lpad$phi$index|0);
        // unreachable;
       } else {
        $__nf$1 = $42;$__ns$2 = $42;
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } while(0);
   L19: do {
    if ((label|0) == 11) {
     $29 = ($__nf$0>>>0)<($__ne>>>0);
     if ($29) {
      $__ns$125 = $__nf$0;
      while(1) {
       $66 = HEAP8[$__ns$125>>0]|0;
       __THREW__ = 0;
       $67 = (invoke_i(481)|0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        break;
       }
       $70 = $66 << 24 >> 24;
       __THREW__ = 0;
       $71 = (invoke_iii(491,($70|0),($67|0))|0);
       $72 = __THREW__; __THREW__ = 0;
       $73 = $72&1;
       if ($73) {
        break;
       }
       $74 = ($71|0)==(0);
       $65 = (($__ns$125) + 1|0);
       if ($74) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$125;
        break L19;
       }
       $64 = ($65>>>0)<($__ne>>>0);
       if ($64) {
        $__ns$125 = $65;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $65;
        break L19;
       }
      }
      $19 = ___cxa_find_matching_catch()|0;
      $20 = tempRet0;
      $lpad$phi$index = $19;$lpad$phi$index5 = $20;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $75 = HEAP8[$__grouping>>0]|0;
   $76 = $75 & 1;
   $77 = ($76<<24>>24)==(0);
   if ($77) {
    $80 = $75&255;
    $81 = $80 >>> 1;
    $83 = $81;
   } else {
    $78 = (($__grouping) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $83 = $79;
   }
   $82 = ($83|0)==(0);
   if ($82) {
    $84 = HEAP32[$__oe>>2]|0;
    $85 = HEAP32[$0>>2]|0;
    $86 = (($85) + 48|0);
    $87 = HEAP32[$86>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($87|0,($0|0),($__nf$1|0),($__ns$2|0),($84|0))|0);
    $88 = __THREW__; __THREW__ = 0;
    $89 = $88&1;
    if ($89) {
     break;
    }
    $90 = $__ns$2;
    $91 = $__nf$1;
    $92 = (($90) - ($91))|0;
    $93 = HEAP32[$__oe>>2]|0;
    $94 = (($93) + ($92<<2)|0);
    HEAP32[$__oe>>2] = $94;
    $201 = $94;
   } else {
    $95 = ($__nf$1|0)==($__ns$2|0);
    if (!($95)) {
     $96 = (($__ns$2) + -1|0);
     $97 = ($96>>>0)>($__nf$1>>>0);
     if ($97) {
      $$012$i$i = $__nf$1;$100 = $96;
      while(1) {
       $98 = HEAP8[$$012$i$i>>0]|0;
       $99 = HEAP8[$100>>0]|0;
       HEAP8[$$012$i$i>>0] = $99;
       HEAP8[$100>>0] = $98;
       $101 = (($$012$i$i) + 1|0);
       $102 = (($100) + -1|0);
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $$012$i$i = $101;$100 = $102;
       } else {
        break;
       }
      }
     }
    }
    $104 = HEAP32[$1>>2]|0;
    $105 = (($104) + 16|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($1|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     break;
    }
    $110 = ($__nf$1>>>0)<($__ns$2>>>0);
    L43: do {
     if ($110) {
      $111 = (($__grouping) + 1|0);
      $112 = (($__grouping) + 4|0);
      $113 = (($__grouping) + 8|0);
      $__dc$017 = 0;$__dg$018 = 0;$__p$019 = $__nf$1;
      while(1) {
       $114 = HEAP8[$__grouping>>0]|0;
       $115 = $114 & 1;
       $116 = ($115<<24>>24)==(0);
       $117 = HEAP32[$113>>2]|0;
       $$ = $116 ? $111 : $117;
       $118 = (($$) + ($__dg$018)|0);
       $119 = HEAP8[$118>>0]|0;
       $120 = ($119<<24>>24)>(0);
       if ($120) {
        $121 = HEAP32[$113>>2]|0;
        $$46 = $116 ? $111 : $121;
        $122 = (($$46) + ($__dg$018)|0);
        $123 = HEAP8[$122>>0]|0;
        $124 = $123 << 24 >> 24;
        $125 = ($__dc$017|0)==($124|0);
        if ($125) {
         $126 = HEAP32[$__oe>>2]|0;
         $127 = (($126) + 4|0);
         HEAP32[$__oe>>2] = $127;
         HEAP32[$126>>2] = $107;
         $128 = HEAP8[$__grouping>>0]|0;
         $129 = $128 & 1;
         $130 = ($129<<24>>24)==(0);
         if ($130) {
          $132 = $128&255;
          $133 = $132 >>> 1;
          $135 = $133;
         } else {
          $131 = HEAP32[$112>>2]|0;
          $135 = $131;
         }
         $134 = (($135) + -1)|0;
         $136 = ($__dg$018>>>0)<($134>>>0);
         $137 = $136&1;
         $$__dg$0 = (($137) + ($__dg$018))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$017;$__dg$1 = $__dg$018;
        }
       } else {
        $__dc$1 = $__dc$017;$__dg$1 = $__dg$018;
       }
       $138 = HEAP8[$__p$019>>0]|0;
       $139 = HEAP32[$0>>2]|0;
       $140 = (($139) + 44|0);
       $141 = HEAP32[$140>>2]|0;
       __THREW__ = 0;
       $142 = (invoke_iii($141|0,($0|0),($138|0))|0);
       $143 = __THREW__; __THREW__ = 0;
       $144 = $143&1;
       if ($144) {
        break;
       }
       $145 = HEAP32[$__oe>>2]|0;
       $146 = (($145) + 4|0);
       HEAP32[$__oe>>2] = $146;
       HEAP32[$145>>2] = $142;
       $147 = (($__dc$1) + 1)|0;
       $148 = (($__p$019) + 1|0);
       $149 = ($148>>>0)<($__ns$2>>>0);
       if ($149) {
        $__dc$017 = $147;$__dg$018 = $__dg$1;$__p$019 = $148;
       } else {
        $155 = $146;
        break L43;
       }
      }
      $17 = ___cxa_find_matching_catch()|0;
      $18 = tempRet0;
      $lpad$phi$index = $17;$lpad$phi$index5 = $18;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $155 = $$pre;
     }
    } while(0);
    $150 = $__nf$1;
    $151 = $__nb;
    $152 = (($150) - ($151))|0;
    $153 = (($__ob) + ($152<<2)|0);
    $154 = ($153|0)==($155|0);
    if ($154) {
     $201 = $155;
    } else {
     $156 = (($155) + -4|0);
     $157 = ($156>>>0)>($153>>>0);
     if ($157) {
      $$012$i$i7 = $153;$160 = $156;
      while(1) {
       $158 = HEAP32[$$012$i$i7>>2]|0;
       $159 = HEAP32[$160>>2]|0;
       HEAP32[$$012$i$i7>>2] = $159;
       HEAP32[$160>>2] = $158;
       $161 = (($$012$i$i7) + 4|0);
       $162 = (($160) + -4|0);
       $163 = ($161>>>0)<($162>>>0);
       if ($163) {
        $$012$i$i7 = $161;$160 = $162;
       } else {
        $201 = $155;
        break;
       }
      }
     } else {
      $201 = $155;
     }
    }
   }
   $164 = ($__ns$2>>>0)<($__ne>>>0);
   L64: do {
    if ($164) {
     $__nf$213 = $__ns$2;
     while(1) {
      $165 = HEAP8[$__nf$213>>0]|0;
      $166 = ($165<<24>>24)==(46);
      if ($166) {
       label = 52;
       break;
      }
      $176 = HEAP32[$0>>2]|0;
      $177 = (($176) + 44|0);
      $178 = HEAP32[$177>>2]|0;
      __THREW__ = 0;
      $179 = (invoke_iii($178|0,($0|0),($165|0))|0);
      $180 = __THREW__; __THREW__ = 0;
      $181 = $180&1;
      if ($181) {
       label = 4;
       break;
      }
      $182 = HEAP32[$__oe>>2]|0;
      $183 = (($182) + 4|0);
      HEAP32[$__oe>>2] = $183;
      HEAP32[$182>>2] = $179;
      $184 = (($__nf$213) + 1|0);
      $185 = ($184>>>0)<($__ne>>>0);
      if ($185) {
       $__nf$213 = $184;
      } else {
       $189 = $183;$__nf$3 = $184;
       break L64;
      }
     }
     if ((label|0) == 4) {
      $15 = ___cxa_find_matching_catch()|0;
      $16 = tempRet0;
      $lpad$phi$index = $15;$lpad$phi$index5 = $16;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
     else if ((label|0) == 52) {
      $167 = HEAP32[$1>>2]|0;
      $168 = (($167) + 12|0);
      $169 = HEAP32[$168>>2]|0;
      __THREW__ = 0;
      $170 = (invoke_ii($169|0,($1|0))|0);
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       break L4;
      }
      $173 = HEAP32[$__oe>>2]|0;
      $174 = (($173) + 4|0);
      HEAP32[$__oe>>2] = $174;
      HEAP32[$173>>2] = $170;
      $175 = (($__nf$213) + 1|0);
      $189 = $174;$__nf$3 = $175;
      break;
     }
    } else {
     $189 = $201;$__nf$3 = $__ns$2;
    }
   } while(0);
   $186 = HEAP32[$0>>2]|0;
   $187 = (($186) + 48|0);
   $188 = HEAP32[$187>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($188|0,($0|0),($__nf$3|0),($__ne|0),($189|0))|0);
   $190 = __THREW__; __THREW__ = 0;
   $191 = $190&1;
   if (!($191)) {
    $192 = $__nf$3;
    $193 = (($25) - ($192))|0;
    $194 = HEAP32[$__oe>>2]|0;
    $195 = (($194) + ($193<<2)|0);
    HEAP32[$__oe>>2] = $195;
    $196 = ($__np|0)==($__ne|0);
    if ($196) {
     $storemerge = $195;
     HEAP32[$__op>>2] = $storemerge;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
    $197 = $__np;
    $198 = $__nb;
    $199 = (($197) - ($198))|0;
    $200 = (($__ob) + ($199<<2)|0);
    $storemerge = $200;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 $lpad$phi$index = $23;$lpad$phi$index5 = $24;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$01 = 0, $$125 = 0, $$16 = 0, $$byval_copy = 0, $$pre = 0, $$pre7 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0;
 var $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 288|0;
 $vararg_buffer9 = sp + 8|0;
 $vararg_buffer5 = sp + 40|0;
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $__fmt = sp;
 $__nar = sp + 308|0;
 $__nb = sp + 304|0;
 $__o = sp + 60|0;
 $__op = sp + 56|0;
 $__oe = sp + 52|0;
 $0 = sp + 296|0;
 $1 = sp + 292|0;
 $2 = sp + 300|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,9576,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 do {
  if ($16) {
   if ($10) {
    __THREW__ = 0;
    $17 = (invoke_i(481)|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = (($__iob) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $21;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $22 = (invoke_iiiii(486,($__nb|0),($17|0),($__fmt|0),($vararg_buffer5|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $__nc$1 = $22;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $27 = (invoke_i(481)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $30 = (invoke_iiiii(486,($__nb|0),($27|0),($__fmt|0),($vararg_buffer9|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      $__nc$1 = $30;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $33 = HEAP32[$__nb>>2]|0;
    $34 = ($33|0)==(0|0);
    if (!($34)) {
     $38 = $33;$62 = $33;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(487);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if (!($36)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $38 = $$pre;$62 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   $$125 = $26;$$16 = $25;
   ___resumeException($$16|0);
   // unreachable;
  } else {
   $$pre7 = HEAP32[$__nb>>2]|0;
   $38 = $$pre7;$62 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $37 = (($38) + ($__nc$2)|0);
 $39 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($38,$37,$__iob)|0);
 $40 = ($38|0)==($__nar|0);
 if ($40) {
  $50 = $__nar;$61 = 0;$__ob$0 = $__o;
  label = 20;
 } else {
  $41 = $__nc$2 << 3;
  $42 = (_malloc($41)|0);
  $43 = ($42|0)==(0|0);
  if ($43) {
   __THREW__ = 0;
   invoke_v(487);
   $44 = __THREW__; __THREW__ = 0;
   $45 = $44&1;
   if ($45) {
    $68 = 0;
    label = 19;
   } else {
    $$pre8 = HEAP32[$__nb>>2]|0;
    $50 = $$pre8;$61 = $42;$__ob$0 = $42;
    label = 20;
   }
  } else {
   $50 = $38;$61 = $42;$__ob$0 = $42;
   label = 20;
  }
 }
 do {
  if ((label|0) == 20) {
   __THREW__ = 0;
   invoke_vii(431,($0|0),($__iob|0));
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   if ($49) {
    $68 = $61;
    label = 19;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(493,($50|0),($39|0),($37|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $51 = __THREW__; __THREW__ = 0;
    $52 = $51&1;
    if ($52) {
     $63 = ___cxa_find_matching_catch()|0;
     $64 = tempRet0;
     $65 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($65)|0);
     $$0 = $63;$$01 = $64;$67 = $61;
     break;
    }
    $53 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($53)|0);
    $54 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $54;
    $55 = HEAP32[$__op>>2]|0;
    $56 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(494,($1|0),($$byval_copy|0),($__ob$0|0),($55|0),($56|0),($__iob|0),($__fl|0));
    $57 = __THREW__; __THREW__ = 0;
    $58 = $57&1;
    if ($58) {
     $68 = $61;
     label = 19;
    } else {
     $59 = HEAP32[$1>>2]|0;
     HEAP32[$__s>>2] = $59;
     HEAP32[$agg$result>>2] = $59;
     $60 = ($61|0)==(0|0);
     if ($60) {
      _free($62);
      STACKTOP = sp;return;
     }
     _free($61);
     _free($62);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 19) {
  $46 = ___cxa_find_matching_catch()|0;
  $47 = tempRet0;
  $$0 = $46;$$01 = $47;$67 = $68;
 }
 $66 = ($67|0)==(0|0);
 if (!($66)) {
  _free($67);
 }
 _free($62);
 $$125 = $$01;$$16 = $$0;
 ___resumeException($$16|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 160|0;
 $vararg_buffer = sp;
 $__fmt = sp + 164|0;
 $__nar = sp + 172|0;
 $__o = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp + 156|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[9656+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[9656+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[9656+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[9656+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[9656+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[9656+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$vararg_buffer)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $6 = (invoke_iii(432,($0|0),(10848|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 }
 $9 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
 $10 = HEAP32[$6>>2]|0;
 $11 = (($10) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 (FUNCTION_TABLE_iiiii[$12 & 1023]($6,$__nar,$4,$__o)|0);
 $13 = (($__o) + ($3<<2)|0);
 $14 = ($5|0)==($4|0);
 if ($14) {
  $__op$0 = $13;
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $22;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$13,$__iob,$__fl);
  STACKTOP = sp;return;
 }
 $18 = $__nar;
 $19 = $5;
 $20 = (($19) - ($18))|0;
 $21 = (($__o) + ($20<<2)|0);
 $__op$0 = $21;
 $22 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $22;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$13,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i22 = 0, $$0$ph$be = 0, $$0$ph35 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre = 0, $$pre$i$i$i13 = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i17 = 0, $$pre$i2$i$i1737 = 0, $$pre$i2$i$i1738 = 0, $$pre36 = 0, $$pre36$pre = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $isascii1$i = 0, $isascii1$i1 = 0, $isascii1$i20 = 0, $sext = 0, $tmp$i$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $4 = (invoke_iii(432,($0|0),(10856|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  $40 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($40)|0);
  ___resumeException($38|0);
  // unreachable;
 }
 $7 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
 HEAP32[$__err>>2] = 0;
 $8 = ($__fmtb|0)==($__fmte|0);
 L4: do {
  if ($8) {
   label = 62;
  } else {
   $9 = (($4) + 8|0);
   $$0$ph35 = $__fmtb;$$pre36 = 0;
   L6: while(1) {
    $11 = $$pre36;
    while(1) {
     $10 = ($11|0)==(0);
     if (!($10)) {
      label = 62;
      break L4;
     }
     $12 = HEAP32[$__b>>2]|0;
     $13 = ($12|0)==(0|0);
     if ($13) {
      $25 = 0;
     } else {
      $14 = (($12) + 12|0);
      $15 = HEAP32[$14>>2]|0;
      $16 = (($12) + 16|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = ($15|0)==($17|0);
      if ($18) {
       $19 = HEAP32[$12>>2]|0;
       $20 = (($19) + 36|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = (FUNCTION_TABLE_ii[$21 & 1023]($12)|0);
       $23 = ($22|0)==(-1);
       if ($23) {
        HEAP32[$__b>>2] = 0;
        $25 = 0;
       } else {
        $25 = $12;
       }
      } else {
       $25 = $12;
      }
     }
     $24 = ($25|0)==(0|0);
     $26 = HEAP32[$__e>>2]|0;
     $27 = ($26|0)==(0|0);
     do {
      if ($27) {
       label = 15;
      } else {
       $28 = (($26) + 12|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = (($26) + 16|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = ($29|0)==($31|0);
       if ($32) {
        $33 = HEAP32[$26>>2]|0;
        $34 = (($33) + 36|0);
        $35 = HEAP32[$34>>2]|0;
        $36 = (FUNCTION_TABLE_ii[$35 & 1023]($26)|0);
        $37 = ($36|0)==(-1);
        if ($37) {
         HEAP32[$__e>>2] = 0;
         label = 15;
         break;
        }
       }
       if ($24) {
        $64 = $26;
       } else {
        label = 16;
        break L6;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      label = 0;
      if ($24) {
       label = 16;
       break L6;
      } else {
       $64 = 0;
      }
     }
     $41 = HEAP8[$$0$ph35>>0]|0;
     $42 = HEAP32[$4>>2]|0;
     $43 = (($42) + 36|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = (FUNCTION_TABLE_iiii[$44 & 1023]($4,$41,0)|0);
     $46 = ($45<<24>>24)==(37);
     if ($46) {
      label = 19;
      break;
     }
     $68 = HEAP8[$$0$ph35>>0]|0;
     $isascii1$i = ($68<<24>>24)>(-1);
     if ($isascii1$i) {
      $69 = $68 << 24 >> 24;
      $70 = HEAP32[$9>>2]|0;
      $71 = (($70) + ($69<<1)|0);
      $72 = HEAP16[$71>>1]|0;
      $73 = $72 & 8192;
      $74 = ($73<<16>>16)==(0);
      if (!($74)) {
       $$0$pn = $$0$ph35;
       label = 30;
       break;
      }
     }
     $133 = (($25) + 12|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = (($25) + 16|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ($134|0)==($136|0);
     if ($137) {
      $138 = HEAP32[$25>>2]|0;
      $139 = (($138) + 36|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (FUNCTION_TABLE_ii[$140 & 1023]($25)|0);
      $$0$i$i22 = $141;
     } else {
      $142 = HEAP8[$134>>0]|0;
      $143 = $142&255;
      $$0$i$i22 = $143;
     }
     $144 = $$0$i$i22&255;
     $145 = HEAP32[$4>>2]|0;
     $146 = (($145) + 12|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = (FUNCTION_TABLE_iii[$147 & 1023]($4,$144)|0);
     $149 = HEAP8[$$0$ph35>>0]|0;
     $150 = HEAP32[$4>>2]|0;
     $151 = (($150) + 12|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = (FUNCTION_TABLE_iii[$152 & 1023]($4,$149)|0);
     $154 = ($148<<24>>24)==($153<<24>>24);
     if ($154) {
      label = 57;
      break;
     }
     HEAP32[$__err>>2] = 4;
     $11 = 4;
    }
    L34: do {
     if ((label|0) == 19) {
      label = 0;
      $47 = (($$0$ph35) + 1|0);
      $48 = ($47|0)==($__fmte|0);
      if ($48) {
       label = 20;
       break L6;
      }
      $49 = HEAP8[$47>>0]|0;
      $50 = HEAP32[$4>>2]|0;
      $51 = (($50) + 36|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = (FUNCTION_TABLE_iiii[$52 & 1023]($4,$49,0)|0);
      if ((($53<<24>>24) == 48) | (($53<<24>>24) == 69)) {
       $54 = (($$0$ph35) + 2|0);
       $55 = ($54|0)==($__fmte|0);
       if ($55) {
        label = 23;
        break L6;
       }
       $56 = HEAP8[$54>>0]|0;
       $57 = HEAP32[$4>>2]|0;
       $58 = (($57) + 36|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = (FUNCTION_TABLE_iiii[$59 & 1023]($4,$56,0)|0);
       $$1 = $54;$__cmd$0 = $60;$__opt$0 = $53;
      } else {
       $$1 = $47;$__cmd$0 = $53;$__opt$0 = 0;
      }
      $61 = HEAP32[$this>>2]|0;
      $62 = (($61) + 36|0);
      $63 = HEAP32[$62>>2]|0;
      HEAP32[$2>>2] = $25;
      HEAP32[$3>>2] = $64;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
      ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
      FUNCTION_TABLE_viiiiiiiii[$63 & 255]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
      $65 = HEAP32[$1>>2]|0;
      HEAP32[$__b>>2] = $65;
      $66 = (($$1) + 1|0);
      $$0$ph$be = $66;
     }
     else if ((label|0) == 30) {
      while(1) {
       label = 0;
       $$2 = (($$0$pn) + 1|0);
       $75 = ($$2|0)==($__fmte|0);
       if ($75) {
        $$2$lcssa = $__fmte;
        break;
       }
       $76 = HEAP8[$$2>>0]|0;
       $isascii1$i1 = ($76<<24>>24)>(-1);
       if (!($isascii1$i1)) {
        $$2$lcssa = $$2;
        break;
       }
       $77 = $76 << 24 >> 24;
       $78 = (($70) + ($77<<1)|0);
       $79 = HEAP16[$78>>1]|0;
       $80 = $79 & 8192;
       $81 = ($80<<16>>16)==(0);
       if ($81) {
        $$2$lcssa = $$2;
        break;
       } else {
        $$0$pn = $$2;
        label = 30;
       }
      }
      $$pre$i$i$i13 = $25;$$pre$i2$i$i17 = $64;$96 = $64;
      while(1) {
       $82 = ($$pre$i$i$i13|0)==(0|0);
       if ($82) {
        $94 = 0;
       } else {
        $83 = (($$pre$i$i$i13) + 12|0);
        $84 = HEAP32[$83>>2]|0;
        $85 = (($$pre$i$i$i13) + 16|0);
        $86 = HEAP32[$85>>2]|0;
        $87 = ($84|0)==($86|0);
        if ($87) {
         $88 = HEAP32[$$pre$i$i$i13>>2]|0;
         $89 = (($88) + 36|0);
         $90 = HEAP32[$89>>2]|0;
         $91 = (FUNCTION_TABLE_ii[$90 & 1023]($$pre$i$i$i13)|0);
         $92 = ($91|0)==(-1);
         if ($92) {
          HEAP32[$__b>>2] = 0;
          $94 = 0;
         } else {
          $94 = $$pre$i$i$i13;
         }
        } else {
         $94 = $$pre$i$i$i13;
        }
       }
       $93 = ($94|0)==(0|0);
       $95 = ($96|0)==(0|0);
       do {
        if ($95) {
         $$pre$i2$i$i1738 = $$pre$i2$i$i17;
         label = 43;
        } else {
         $97 = (($96) + 12|0);
         $98 = HEAP32[$97>>2]|0;
         $99 = (($96) + 16|0);
         $100 = HEAP32[$99>>2]|0;
         $101 = ($98|0)==($100|0);
         if (!($101)) {
          if ($93) {
           $$pre$i2$i$i1737 = $$pre$i2$i$i17;$190 = $96;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;
           break L34;
          }
         }
         $102 = HEAP32[$96>>2]|0;
         $103 = (($102) + 36|0);
         $104 = HEAP32[$103>>2]|0;
         $105 = (FUNCTION_TABLE_ii[$104 & 1023]($96)|0);
         $106 = ($105|0)==(-1);
         if ($106) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i1738 = 0;
          label = 43;
          break;
         } else {
          $107 = ($$pre$i2$i$i17|0)==(0|0);
          $tmp$i$i19 = $93 ^ $107;
          if ($tmp$i$i19) {
           $$pre$i2$i$i1737 = $$pre$i2$i$i17;$190 = $$pre$i2$i$i17;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;
           break L34;
          }
         }
        }
       } while(0);
       if ((label|0) == 43) {
        label = 0;
        if ($93) {
         $$0$ph$be = $$2$lcssa;
         break L34;
        } else {
         $$pre$i2$i$i1737 = $$pre$i2$i$i1738;$190 = 0;
        }
       }
       $108 = (($94) + 12|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = (($94) + 16|0);
       $111 = HEAP32[$110>>2]|0;
       $112 = ($109|0)==($111|0);
       if ($112) {
        $113 = HEAP32[$94>>2]|0;
        $114 = (($113) + 36|0);
        $115 = HEAP32[$114>>2]|0;
        $116 = (FUNCTION_TABLE_ii[$115 & 1023]($94)|0);
        $$0$i$i = $116;
       } else {
        $117 = HEAP8[$109>>0]|0;
        $118 = $117&255;
        $$0$i$i = $118;
       }
       $119 = $$0$i$i&255;
       $isascii1$i20 = ($119<<24>>24)>(-1);
       if (!($isascii1$i20)) {
        $$0$ph$be = $$2$lcssa;
        break L34;
       }
       $sext = $$0$i$i << 24;
       $120 = $sext >> 24;
       $121 = HEAP32[$9>>2]|0;
       $122 = (($121) + ($120<<1)|0);
       $123 = HEAP16[$122>>1]|0;
       $124 = $123 & 8192;
       $125 = ($124<<16>>16)==(0);
       if ($125) {
        $$0$ph$be = $$2$lcssa;
        break L34;
       }
       $126 = HEAP32[$108>>2]|0;
       $127 = HEAP32[$110>>2]|0;
       $128 = ($126|0)==($127|0);
       if ($128) {
        $129 = HEAP32[$94>>2]|0;
        $130 = (($129) + 40|0);
        $131 = HEAP32[$130>>2]|0;
        (FUNCTION_TABLE_ii[$131 & 1023]($94)|0);
        $$pre$i$i$i13 = $94;$$pre$i2$i$i17 = $$pre$i2$i$i1737;$96 = $190;
        continue;
       } else {
        $132 = (($126) + 1|0);
        HEAP32[$108>>2] = $132;
        $$pre$i$i$i13 = $94;$$pre$i2$i$i17 = $$pre$i2$i$i1737;$96 = $190;
        continue;
       }
      }
     }
     else if ((label|0) == 57) {
      label = 0;
      $155 = HEAP32[$133>>2]|0;
      $156 = HEAP32[$135>>2]|0;
      $157 = ($155|0)==($156|0);
      if ($157) {
       $158 = HEAP32[$25>>2]|0;
       $159 = (($158) + 40|0);
       $160 = HEAP32[$159>>2]|0;
       (FUNCTION_TABLE_ii[$160 & 1023]($25)|0);
      } else {
       $161 = (($155) + 1|0);
       HEAP32[$133>>2] = $161;
      }
      $162 = (($$0$ph35) + 1|0);
      $$0$ph$be = $162;
     }
    } while(0);
    $67 = ($$0$ph$be|0)==($__fmte|0);
    if ($67) {
     label = 62;
     break L4;
    }
    $$pre36$pre = HEAP32[$__err>>2]|0;
    $$0$ph35 = $$0$ph$be;$$pre36 = $$pre36$pre;
   }
   if ((label|0) == 16) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i4 = $25;
    break;
   }
   else if ((label|0) == 20) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i4 = $25;
    break;
   }
   else if ((label|0) == 23) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i4 = $25;
    break;
   }
  }
 } while(0);
 if ((label|0) == 62) {
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i4 = $$pre;
 }
 $163 = ($$pre$i$i$i4|0)==(0|0);
 if ($163) {
  $175 = 0;
 } else {
  $164 = (($$pre$i$i$i4) + 12|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = (($$pre$i$i$i4) + 16|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = ($165|0)==($167|0);
  if ($168) {
   $169 = HEAP32[$$pre$i$i$i4>>2]|0;
   $170 = (($169) + 36|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = (FUNCTION_TABLE_ii[$171 & 1023]($$pre$i$i$i4)|0);
   $173 = ($172|0)==(-1);
   if ($173) {
    HEAP32[$__b>>2] = 0;
    $175 = 0;
   } else {
    $175 = $$pre$i$i$i4;
   }
  } else {
   $175 = $$pre$i$i$i4;
  }
 }
 $174 = ($175|0)==(0|0);
 $176 = HEAP32[$__e>>2]|0;
 $177 = ($176|0)==(0|0);
 do {
  if ($177) {
   label = 72;
  } else {
   $178 = (($176) + 12|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = (($176) + 16|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = ($179|0)==($181|0);
   if ($182) {
    $183 = HEAP32[$176>>2]|0;
    $184 = (($183) + 36|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = (FUNCTION_TABLE_ii[$185 & 1023]($176)|0);
    $187 = ($186|0)==(-1);
    if ($187) {
     HEAP32[$__e>>2] = 0;
     label = 72;
     break;
    }
   }
   if ($174) {
    HEAP32[$agg$result>>2] = $175;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 72) {
  if (!($174)) {
   HEAP32[$agg$result>>2] = $175;
   STACKTOP = sp;return;
  }
 }
 $188 = HEAP32[$__err>>2]|0;
 $189 = $188 | 2;
 HEAP32[$__err>>2] = $189;
 HEAP32[$agg$result>>2] = $175;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,9760,((9760 + 8|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $16 = (($6) + 1|0);
  $17 = (($6) + 1|0);
  $18 = $9&255;
  $19 = $18 >>> 1;
  $21 = $17;$22 = $19;$23 = $16;
 } else {
  $12 = (($6) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($6) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $21 = $13;$22 = $15;$23 = $13;
 }
 $20 = (($21) + ($22)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$23,$20);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(432,($0|0),(10856|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 24|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = (($4) + 168|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = (($10|0) / 12)&-1;
 $13 = (($12|0) % 7)&-1;
 HEAP32[$__w>>2] = $13;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(432,($0|0),(10856|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 16|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = (($5) + 288|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = (($11|0) / 12)&-1;
 $14 = (($13|0) % 12)&-1;
 HEAP32[$__m>>2] = $14;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(432,($0|0),(10856|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 20|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ($2|0)<(69);
 if ($6) {
  $7 = (($2) + 2000)|0;
  $__t$0 = $7;
 } else {
  $$off = (($2) + -69)|0;
  $8 = ($$off>>>0)<(31);
  $9 = (($2) + 1900)|0;
  $$ = $8 ? $9 : $2;
  $__t$0 = $$;
 }
 $10 = (($__t$0) + -1900)|0;
 HEAP32[$__y>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy30 = sp + 136|0;
 $$byval_copy29 = sp + 132|0;
 $$byval_copy28 = sp + 128|0;
 $$byval_copy27 = sp + 120|0;
 $$byval_copy26 = sp + 260|0;
 $$byval_copy25 = sp + 268|0;
 $$byval_copy24 = sp + 252|0;
 $$byval_copy23 = sp + 24|0;
 $$byval_copy22 = sp + 28|0;
 $$byval_copy21 = sp + 32|0;
 $$byval_copy20 = sp + 36|0;
 $$byval_copy19 = sp + 40|0;
 $$byval_copy18 = sp + 44|0;
 $$byval_copy17 = sp + 48|0;
 $$byval_copy16 = sp + 52|0;
 $$byval_copy15 = sp + 56|0;
 $$byval_copy14 = sp + 60|0;
 $$byval_copy13 = sp + 64|0;
 $$byval_copy12 = sp + 68|0;
 $$byval_copy11 = sp + 72|0;
 $$byval_copy10 = sp + 76|0;
 $$byval_copy9 = sp + 80|0;
 $$byval_copy8 = sp + 84|0;
 $$byval_copy7 = sp + 88|0;
 $$byval_copy6 = sp + 92|0;
 $$byval_copy5 = sp + 96|0;
 $$byval_copy4 = sp + 100|0;
 $$byval_copy3 = sp + 104|0;
 $$byval_copy2 = sp + 108|0;
 $$byval_copy1 = sp + 232|0;
 $$byval_copy = sp + 240|0;
 $1 = sp + 248|0;
 $2 = sp + 256|0;
 $3 = sp + 264|0;
 $4 = sp + 272|0;
 $5 = sp + 276|0;
 $6 = sp + 140|0;
 $7 = sp + 144|0;
 $8 = sp + 148|0;
 $9 = sp + 152|0;
 $10 = sp + 156|0;
 $11 = sp + 160|0;
 $12 = sp + 164|0;
 $13 = sp + 168|0;
 $14 = sp + 172|0;
 $15 = sp + 176|0;
 $16 = sp + 180|0;
 $17 = sp + 184|0;
 $18 = sp + 188|0;
 $19 = sp + 192|0;
 $20 = sp + 196|0;
 $21 = sp + 200|0;
 $22 = sp + 204|0;
 $23 = sp + 208|0;
 $24 = sp + 212|0;
 $25 = sp + 216|0;
 $26 = sp + 220|0;
 $27 = sp + 224|0;
 $28 = sp + 20|0;
 $29 = sp + 16|0;
 $30 = sp;
 $31 = sp + 12|0;
 $32 = sp + 228|0;
 $33 = sp + 112|0;
 $34 = sp + 4|0;
 $35 = sp + 8|0;
 $36 = sp + 116|0;
 $37 = sp + 236|0;
 $38 = sp + 244|0;
 $39 = sp + 124|0;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 $40 = (invoke_iii(432,($1|0),(10856|0))|0);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $45 = ___cxa_find_matching_catch()|0;
  $46 = tempRet0;
  $47 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
  ___resumeException($45|0);
  // unreachable;
 }
 $43 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
 $44 = $__fmt << 24 >> 24;
 do {
  switch ($44|0) {
  case 65: case 97:  {
   $48 = (($__tm) + 24|0);
   $49 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $49;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$48,$__b,$$byval_copy,$__err,$40);
   break;
  }
  case 104: case 66: case 98:  {
   $50 = (($__tm) + 16|0);
   $51 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $51;
   ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$50,$__b,$$byval_copy1,$__err,$40);
   break;
  }
  case 99:  {
   $52 = (($this) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (FUNCTION_TABLE_ii[$55 & 1023]($52)|0);
   $57 = HEAP32[$__b>>2]|0;
   HEAP32[$5>>2] = $57;
   $58 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $58;
   $59 = HEAP8[$56>>0]|0;
   $60 = $59 & 1;
   $61 = ($60<<24>>24)==(0);
   if ($61) {
    $66 = (($56) + 1|0);
    $67 = (($56) + 1|0);
    $68 = $59&255;
    $69 = $68 >>> 1;
    $71 = $67;$72 = $69;$73 = $66;
   } else {
    $62 = (($56) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($56) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    $71 = $63;$72 = $65;$73 = $63;
   }
   $70 = (($71) + ($72)|0);
   ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
   ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$6+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($4,$this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$73,$70);
   $74 = HEAP32[$4>>2]|0;
   HEAP32[$__b>>2] = $74;
   break;
  }
  case 101: case 100:  {
   $75 = (($__tm) + 12|0);
   $76 = HEAP32[$__e>>2]|0;
   HEAP32[$7>>2] = $76;
   ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$7+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$75,$__b,$$byval_copy4,$__err,$40);
   break;
  }
  case 68:  {
   $77 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $77;
   $78 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $78;
   ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$9+0>>2]|0;
   ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$10+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($8,$this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,9768,((9768 + 8|0)));
   $79 = HEAP32[$8>>2]|0;
   HEAP32[$__b>>2] = $79;
   break;
  }
  case 70:  {
   $80 = HEAP32[$__b>>2]|0;
   HEAP32[$12>>2] = $80;
   $81 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $81;
   ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$12+0>>2]|0;
   ;HEAP32[$$byval_copy8+0>>2]=HEAP32[$13+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($11,$this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,9776,((9776 + 8|0)));
   $82 = HEAP32[$11>>2]|0;
   HEAP32[$__b>>2] = $82;
   break;
  }
  case 72:  {
   $83 = (($__tm) + 8|0);
   $84 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $84;
   ;HEAP32[$$byval_copy9+0>>2]=HEAP32[$14+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$83,$__b,$$byval_copy9,$__err,$40);
   break;
  }
  case 73:  {
   $85 = (($__tm) + 8|0);
   $86 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $86;
   ;HEAP32[$$byval_copy10+0>>2]=HEAP32[$15+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$85,$__b,$$byval_copy10,$__err,$40);
   break;
  }
  case 77:  {
   $91 = (($__tm) + 4|0);
   $92 = HEAP32[$__e>>2]|0;
   HEAP32[$18>>2] = $92;
   ;HEAP32[$$byval_copy13+0>>2]=HEAP32[$18+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$91,$__b,$$byval_copy13,$__err,$40);
   break;
  }
  case 106:  {
   $87 = (($__tm) + 28|0);
   $88 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $88;
   ;HEAP32[$$byval_copy11+0>>2]=HEAP32[$16+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$87,$__b,$$byval_copy11,$__err,$40);
   break;
  }
  case 119:  {
   $106 = (($__tm) + 24|0);
   $107 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $107;
   ;HEAP32[$$byval_copy23+0>>2]=HEAP32[$31+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$106,$__b,$$byval_copy23,$__err,$40);
   break;
  }
  case 120:  {
   $108 = HEAP32[$this>>2]|0;
   $109 = (($108) + 20|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = HEAP32[$__b>>2]|0;
   HEAP32[$32>>2] = $111;
   $112 = HEAP32[$__e>>2]|0;
   HEAP32[$33>>2] = $112;
   ;HEAP32[$$byval_copy24+0>>2]=HEAP32[$32+0>>2]|0;
   ;HEAP32[$$byval_copy25+0>>2]=HEAP32[$33+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$110 & 511]($agg$result,$this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm);
   STACKTOP = sp;return;
   break;
  }
  case 88:  {
   $113 = (($this) + 8|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (($114) + 24|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (FUNCTION_TABLE_ii[$116 & 1023]($113)|0);
   $118 = HEAP32[$__b>>2]|0;
   HEAP32[$35>>2] = $118;
   $119 = HEAP32[$__e>>2]|0;
   HEAP32[$36>>2] = $119;
   $120 = HEAP8[$117>>0]|0;
   $121 = $120 & 1;
   $122 = ($121<<24>>24)==(0);
   if ($122) {
    $127 = (($117) + 1|0);
    $128 = (($117) + 1|0);
    $129 = $120&255;
    $130 = $129 >>> 1;
    $132 = $128;$133 = $130;$134 = $127;
   } else {
    $123 = (($117) + 8|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (($117) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $132 = $124;$133 = $126;$134 = $124;
   }
   $131 = (($132) + ($133)|0);
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$35+0>>2]|0;
   ;HEAP32[$$byval_copy27+0>>2]=HEAP32[$36+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($34,$this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$134,$131);
   $135 = HEAP32[$34>>2]|0;
   HEAP32[$__b>>2] = $135;
   break;
  }
  case 109:  {
   $89 = (($__tm) + 16|0);
   $90 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $90;
   ;HEAP32[$$byval_copy12+0>>2]=HEAP32[$17+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$89,$__b,$$byval_copy12,$__err,$40);
   break;
  }
  case 116: case 110:  {
   $93 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $93;
   ;HEAP32[$$byval_copy14+0>>2]=HEAP32[$19+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$$byval_copy14,$__err,$40);
   break;
  }
  case 114:  {
   $96 = HEAP32[$__b>>2]|0;
   HEAP32[$22>>2] = $96;
   $97 = HEAP32[$__e>>2]|0;
   HEAP32[$23>>2] = $97;
   ;HEAP32[$$byval_copy16+0>>2]=HEAP32[$22+0>>2]|0;
   ;HEAP32[$$byval_copy17+0>>2]=HEAP32[$23+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($21,$this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,9784,((9784 + 11|0)));
   $98 = HEAP32[$21>>2]|0;
   HEAP32[$__b>>2] = $98;
   break;
  }
  case 112:  {
   $94 = (($__tm) + 8|0);
   $95 = HEAP32[$__e>>2]|0;
   HEAP32[$20>>2] = $95;
   ;HEAP32[$$byval_copy15+0>>2]=HEAP32[$20+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$94,$__b,$$byval_copy15,$__err,$40);
   break;
  }
  case 82:  {
   $99 = HEAP32[$__b>>2]|0;
   HEAP32[$25>>2] = $99;
   $100 = HEAP32[$__e>>2]|0;
   HEAP32[$26>>2] = $100;
   ;HEAP32[$$byval_copy18+0>>2]=HEAP32[$25+0>>2]|0;
   ;HEAP32[$$byval_copy19+0>>2]=HEAP32[$26+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($24,$this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,9800,((9800 + 5|0)));
   $101 = HEAP32[$24>>2]|0;
   HEAP32[$__b>>2] = $101;
   break;
  }
  case 83:  {
   $102 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $102;
   ;HEAP32[$$byval_copy20+0>>2]=HEAP32[$27+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__tm,$__b,$$byval_copy20,$__err,$40);
   break;
  }
  case 84:  {
   $103 = HEAP32[$__b>>2]|0;
   HEAP32[$29>>2] = $103;
   $104 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $104;
   ;HEAP32[$$byval_copy21+0>>2]=HEAP32[$29+0>>2]|0;
   ;HEAP32[$$byval_copy22+0>>2]=HEAP32[$30+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($28,$this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,9808,((9808 + 8|0)));
   $105 = HEAP32[$28>>2]|0;
   HEAP32[$__b>>2] = $105;
   break;
  }
  case 121:  {
   $136 = (($__tm) + 20|0);
   $137 = HEAP32[$__e>>2]|0;
   HEAP32[$37>>2] = $137;
   ;HEAP32[$$byval_copy28+0>>2]=HEAP32[$37+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$136,$__b,$$byval_copy28,$__err,$40);
   break;
  }
  case 89:  {
   $138 = (($__tm) + 20|0);
   $139 = HEAP32[$__e>>2]|0;
   HEAP32[$38>>2] = $139;
   ;HEAP32[$$byval_copy29+0>>2]=HEAP32[$38+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$138,$__b,$$byval_copy29,$__err,$40);
   break;
  }
  case 37:  {
   $140 = HEAP32[$__e>>2]|0;
   HEAP32[$39>>2] = $140;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$39+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  default: {
   $141 = HEAP32[$__err>>2]|0;
   $142 = $141 | 4;
   HEAP32[$__err>>2] = $142;
  }
  }
 } while(0);
 $143 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $143;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)>(0);
 $or$cond = $5 & $6;
 $7 = ($2|0)<(32);
 $or$cond3 = $or$cond & $7;
 if ($or$cond3) {
  HEAP32[$__d>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)>(0);
 $or$cond = $5 & $6;
 $7 = ($2|0)<(13);
 $or$cond3 = $or$cond & $7;
 if ($or$cond3) {
  HEAP32[$__h>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $5 & $6;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
  STACKTOP = sp;return;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__ct) + 8|0);
 L1: while(1) {
  $1 = HEAP32[$__b>>2]|0;
  $2 = ($1|0)==(0|0);
  do {
   if ($2) {
    $14 = 0;
   } else {
    $3 = (($1) + 12|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (($1) + 16|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($4|0)==($6|0);
    if ($7) {
     $8 = HEAP32[$1>>2]|0;
     $9 = (($8) + 36|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (FUNCTION_TABLE_ii[$10 & 1023]($1)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      HEAP32[$__b>>2] = 0;
      $14 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $14 = $$pre$i$i$i;
      break;
     }
    } else {
     $14 = $1;
    }
   }
  } while(0);
  $13 = ($14|0)==(0|0);
  $15 = HEAP32[$__e>>2]|0;
  $16 = ($15|0)==(0|0);
  do {
   if ($16) {
    label = 12;
   } else {
    $17 = (($15) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($15) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($18|0)==($20|0);
    if (!($21)) {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
    $22 = HEAP32[$15>>2]|0;
    $23 = (($22) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (FUNCTION_TABLE_ii[$24 & 1023]($15)|0);
    $26 = ($25|0)==(-1);
    if ($26) {
     HEAP32[$__e>>2] = 0;
     label = 12;
     break;
    } else {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   if ($13) {
    $$pre$i2$i$i6 = 0;
    break;
   } else {
    $83 = 0;
   }
  }
  $27 = HEAP32[$__b>>2]|0;
  $28 = (($27) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($29|0)==($31|0);
  if ($32) {
   $33 = HEAP32[$27>>2]|0;
   $34 = (($33) + 36|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (FUNCTION_TABLE_ii[$35 & 1023]($27)|0);
   $$0$i$i = $36;
  } else {
   $37 = HEAP8[$29>>0]|0;
   $38 = $37&255;
   $$0$i$i = $38;
  }
  $39 = $$0$i$i&255;
  $isascii1$i = ($39<<24>>24)>(-1);
  if (!($isascii1$i)) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $sext = $$0$i$i << 24;
  $40 = $sext >> 24;
  $41 = HEAP32[$0>>2]|0;
  $42 = (($41) + ($40<<1)|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 & 8192;
  $45 = ($44<<16>>16)==(0);
  if ($45) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $46 = HEAP32[$__b>>2]|0;
  $47 = (($46) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($48|0)==($50|0);
  if ($51) {
   $52 = HEAP32[$46>>2]|0;
   $53 = (($52) + 40|0);
   $54 = HEAP32[$53>>2]|0;
   (FUNCTION_TABLE_ii[$54 & 1023]($46)|0);
   continue;
  } else {
   $55 = (($48) + 1|0);
   HEAP32[$47>>2] = $55;
   continue;
  }
 }
 $56 = HEAP32[$__b>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $69 = 0;
  } else {
   $58 = (($56) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($56) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = (($63) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 1023]($56)|0);
    $67 = ($66|0)==(-1);
    if ($67) {
     HEAP32[$__b>>2] = 0;
     $69 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $69 = $$pre$i$i$i2;
     break;
    }
   } else {
    $69 = $56;
   }
  }
 } while(0);
 $68 = ($69|0)==(0|0);
 $70 = ($$pre$i2$i$i6|0)==(0|0);
 do {
  if ($70) {
   label = 32;
  } else {
   $71 = (($$pre$i2$i$i6) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($$pre$i2$i$i6) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($72|0)==($74|0);
   if ($75) {
    $76 = HEAP32[$$pre$i2$i$i6>>2]|0;
    $77 = (($76) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (FUNCTION_TABLE_ii[$78 & 1023]($$pre$i2$i$i6)|0);
    $80 = ($79|0)==(-1);
    if ($80) {
     HEAP32[$__e>>2] = 0;
     label = 32;
     break;
    }
   }
   if ($68) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  if (!($68)) {
   STACKTOP = sp;return;
  }
 }
 $81 = HEAP32[$__err>>2]|0;
 $82 = $81 | 2;
 HEAP32[$__err>>2] = $82;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $24 = $12;
 } else {
  $9 = (($5) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $24 = $10;
 }
 $13 = (($5) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = (($5) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $23 = ($24|0)==($21|0);
 if ($23) {
  $25 = HEAP32[$__err>>2]|0;
  $26 = $25 | 4;
  HEAP32[$__err>>2] = $26;
  STACKTOP = sp;return;
 }
 $27 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $27;
 $28 = (($5) + 24|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
 $30 = $29;
 $31 = $5;
 $32 = (($30) - ($31))|0;
 $33 = ($29|0)==($5|0);
 if ($33) {
  $34 = HEAP32[$__h>>2]|0;
  $35 = ($34|0)==(12);
  if ($35) {
   HEAP32[$__h>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $36 = ($32|0)==(12);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = HEAP32[$__h>>2]|0;
 $38 = ($37|0)<(12);
 if (!($38)) {
  STACKTOP = sp;return;
 }
 $39 = (($37) + 12)|0;
 HEAP32[$__h>>2] = $39;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = (($2) + -1900)|0;
 HEAP32[$__y>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i611 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while(0);
 $12 = ($13|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = (($14) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($14) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = (($21) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $$pre$i2$i$i611 = $14;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $$pre$i2$i$i611 = 0;
  }
 }
 if ((label|0) == 12) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  STACKTOP = sp;return;
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP8[$30>>0]|0;
  $39 = $38&255;
  $$0$i$i = $39;
 }
 $40 = $$0$i$i&255;
 $41 = HEAP32[$__ct>>2]|0;
 $42 = (($41) + 36|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (FUNCTION_TABLE_iiii[$43 & 1023]($__ct,$40,0)|0);
 $45 = ($44<<24>>24)==(37);
 if (!($45)) {
  $46 = HEAP32[$__err>>2]|0;
  $47 = $46 | 4;
  HEAP32[$__err>>2] = $47;
  STACKTOP = sp;return;
 }
 $48 = HEAP32[$__b>>2]|0;
 $49 = (($48) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($48) + 16|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($50|0)==($52|0);
 if ($53) {
  $54 = HEAP32[$48>>2]|0;
  $55 = (($54) + 40|0);
  $56 = HEAP32[$55>>2]|0;
  (FUNCTION_TABLE_ii[$56 & 1023]($48)|0);
  $$pre = HEAP32[$__b>>2]|0;
  $59 = $$pre;
 } else {
  $57 = (($50) + 1|0);
  HEAP32[$49>>2] = $57;
  $59 = $48;
 }
 $58 = ($59|0)==(0|0);
 do {
  if ($58) {
   $71 = 0;
  } else {
   $60 = (($59) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($59) + 16|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($61|0)==($63|0);
   if ($64) {
    $65 = HEAP32[$59>>2]|0;
    $66 = (($65) + 36|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (FUNCTION_TABLE_ii[$67 & 1023]($59)|0);
    $69 = ($68|0)==(-1);
    if ($69) {
     HEAP32[$__b>>2] = 0;
     $71 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $71 = $$pre$i$i$i2;
     break;
    }
   } else {
    $71 = $59;
   }
  }
 } while(0);
 $70 = ($71|0)==(0|0);
 $72 = ($$pre$i2$i$i611|0)==(0|0);
 do {
  if ($72) {
   label = 31;
  } else {
   $73 = (($$pre$i2$i$i611) + 12|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (($$pre$i2$i$i611) + 16|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($74|0)==($76|0);
   if ($77) {
    $78 = HEAP32[$$pre$i2$i$i611>>2]|0;
    $79 = (($78) + 36|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (FUNCTION_TABLE_ii[$80 & 1023]($$pre$i2$i$i611)|0);
    $82 = ($81|0)==(-1);
    if ($82) {
     HEAP32[$__e>>2] = 0;
     label = 31;
     break;
    }
   }
   if ($70) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 31) {
  if (!($70)) {
   STACKTOP = sp;return;
  }
 }
 $83 = HEAP32[$__err>>2]|0;
 $84 = $83 | 2;
 HEAP32[$__err>>2] = $84;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i$i$i16 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i22 = 0, $$0$i$i1$i$i7 = 0, $$0$i$i13 = 0, $$0$ph$be = 0, $$0$ph40 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre = 0, $$pre$i$i$i18 = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i9 = 0;
 var $$pre$i3$i$i942 = 0, $$pre$i3$i$i943 = 0, $$pre41 = 0, $$pre41$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $phitmp$i4$i$i10 = 0, $tmp$i$i12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $4 = (invoke_iii(432,($0|0),(10848|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $37 = ___cxa_find_matching_catch()|0;
  $38 = tempRet0;
  $39 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($39)|0);
  ___resumeException($37|0);
  // unreachable;
 }
 $7 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
 HEAP32[$__err>>2] = 0;
 $8 = ($__fmtb|0)==($__fmte|0);
 L4: do {
  if ($8) {
   label = 66;
  } else {
   $$0$ph40 = $__fmtb;$$pre41 = 0;
   L6: while(1) {
    $10 = $$pre41;
    while(1) {
     $9 = ($10|0)==(0);
     if (!($9)) {
      label = 66;
      break L4;
     }
     $11 = HEAP32[$__b>>2]|0;
     $12 = ($11|0)==(0|0);
     if ($12) {
      $183 = 1;$63 = 0;
     } else {
      $13 = (($11) + 12|0);
      $14 = HEAP32[$13>>2]|0;
      $15 = (($11) + 16|0);
      $16 = HEAP32[$15>>2]|0;
      $17 = ($14|0)==($16|0);
      if ($17) {
       $18 = HEAP32[$11>>2]|0;
       $19 = (($18) + 36|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = (FUNCTION_TABLE_ii[$20 & 1023]($11)|0);
       $$0$i$i$i$i = $21;
      } else {
       $22 = HEAP32[$14>>2]|0;
       $$0$i$i$i$i = $22;
      }
      $23 = ($$0$i$i$i$i|0)==(-1);
      if ($23) {
       HEAP32[$__b>>2] = 0;
       $183 = 1;$63 = 0;
      } else {
       $183 = 0;$63 = $11;
      }
     }
     $24 = HEAP32[$__e>>2]|0;
     $25 = ($24|0)==(0|0);
     do {
      if ($25) {
       label = 18;
      } else {
       $26 = (($24) + 12|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = (($24) + 16|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = ($27|0)==($29|0);
       if ($30) {
        $31 = HEAP32[$24>>2]|0;
        $32 = (($31) + 36|0);
        $33 = HEAP32[$32>>2]|0;
        $34 = (FUNCTION_TABLE_ii[$33 & 1023]($24)|0);
        $$0$i$i1$i$i = $34;
       } else {
        $35 = HEAP32[$27>>2]|0;
        $$0$i$i1$i$i = $35;
       }
       $36 = ($$0$i$i1$i$i|0)==(-1);
       if ($36) {
        HEAP32[$__e>>2] = 0;
        label = 18;
        break;
       } else {
        if ($183) {
         $64 = $24;
         break;
        } else {
         label = 20;
         break L6;
        }
       }
      }
     } while(0);
     if ((label|0) == 18) {
      label = 0;
      if ($183) {
       label = 20;
       break L6;
      } else {
       $64 = 0;
      }
     }
     $40 = HEAP32[$$0$ph40>>2]|0;
     $41 = HEAP32[$4>>2]|0;
     $42 = (($41) + 52|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = (FUNCTION_TABLE_iiii[$43 & 1023]($4,$40,0)|0);
     $45 = ($44<<24>>24)==(37);
     if ($45) {
      label = 23;
      break;
     }
     $68 = HEAP32[$$0$ph40>>2]|0;
     $69 = HEAP32[$4>>2]|0;
     $70 = (($69) + 12|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = (FUNCTION_TABLE_iiii[$71 & 1023]($4,8192,$68)|0);
     if ($72) {
      $$0$pn = $$0$ph40;
      label = 33;
      break;
     }
     $127 = (($63) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($63) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$63>>2]|0;
      $133 = (($132) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = (FUNCTION_TABLE_ii[$134 & 1023]($63)|0);
      $$0$i$i13 = $135;
     } else {
      $136 = HEAP32[$128>>2]|0;
      $$0$i$i13 = $136;
     }
     $137 = HEAP32[$4>>2]|0;
     $138 = (($137) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (FUNCTION_TABLE_iii[$139 & 1023]($4,$$0$i$i13)|0);
     $141 = HEAP32[$$0$ph40>>2]|0;
     $142 = HEAP32[$4>>2]|0;
     $143 = (($142) + 28|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = (FUNCTION_TABLE_iii[$144 & 1023]($4,$141)|0);
     $146 = ($140|0)==($145|0);
     if ($146) {
      label = 61;
      break;
     }
     HEAP32[$__err>>2] = 4;
     $10 = 4;
    }
    L38: do {
     if ((label|0) == 23) {
      label = 0;
      $46 = (($$0$ph40) + 4|0);
      $47 = ($46|0)==($__fmte|0);
      if ($47) {
       label = 24;
       break L6;
      }
      $48 = HEAP32[$46>>2]|0;
      $49 = HEAP32[$4>>2]|0;
      $50 = (($49) + 52|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = (FUNCTION_TABLE_iiii[$51 & 1023]($4,$48,0)|0);
      if ((($52<<24>>24) == 48) | (($52<<24>>24) == 69)) {
       $53 = (($$0$ph40) + 8|0);
       $54 = ($53|0)==($__fmte|0);
       if ($54) {
        label = 27;
        break L6;
       }
       $55 = HEAP32[$53>>2]|0;
       $56 = HEAP32[$4>>2]|0;
       $57 = (($56) + 52|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = (FUNCTION_TABLE_iiii[$58 & 1023]($4,$55,0)|0);
       $$1 = $53;$__cmd$0 = $59;$__opt$0 = $52;
      } else {
       $$1 = $46;$__cmd$0 = $52;$__opt$0 = 0;
      }
      $60 = HEAP32[$this>>2]|0;
      $61 = (($60) + 36|0);
      $62 = HEAP32[$61>>2]|0;
      HEAP32[$2>>2] = $63;
      HEAP32[$3>>2] = $64;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
      ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
      FUNCTION_TABLE_viiiiiiiii[$62 & 255]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
      $65 = HEAP32[$1>>2]|0;
      HEAP32[$__b>>2] = $65;
      $66 = (($$1) + 4|0);
      $$0$ph$be = $66;
     }
     else if ((label|0) == 33) {
      while(1) {
       label = 0;
       $$2 = (($$0$pn) + 4|0);
       $73 = ($$2|0)==($__fmte|0);
       if ($73) {
        $$2$lcssa = $__fmte;
        break;
       }
       $74 = HEAP32[$$2>>2]|0;
       $75 = HEAP32[$4>>2]|0;
       $76 = (($75) + 12|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = (FUNCTION_TABLE_iiii[$77 & 1023]($4,8192,$74)|0);
       if ($78) {
        $$0$pn = $$2;
        label = 33;
       } else {
        $$2$lcssa = $$2;
        break;
       }
      }
      $$pre$i$i$i3 = $63;$$pre$i3$i$i9 = $64;$92 = $64;
      while(1) {
       $79 = ($$pre$i$i$i3|0)==(0|0);
       if ($79) {
        $104 = 1;$106 = 0;
       } else {
        $80 = (($$pre$i$i$i3) + 12|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = (($$pre$i$i$i3) + 16|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = ($81|0)==($83|0);
        if ($84) {
         $85 = HEAP32[$$pre$i$i$i3>>2]|0;
         $86 = (($85) + 36|0);
         $87 = HEAP32[$86>>2]|0;
         $88 = (FUNCTION_TABLE_ii[$87 & 1023]($$pre$i$i$i3)|0);
         $$0$i$i$i$i1 = $88;
        } else {
         $89 = HEAP32[$81>>2]|0;
         $$0$i$i$i$i1 = $89;
        }
        $90 = ($$0$i$i$i$i1|0)==(-1);
        if ($90) {
         HEAP32[$__b>>2] = 0;
         $104 = 1;$106 = 0;
        } else {
         $104 = 0;$106 = $$pre$i$i$i3;
        }
       }
       $91 = ($92|0)==(0|0);
       do {
        if ($91) {
         $$pre$i3$i$i943 = $$pre$i3$i$i9;
         label = 48;
        } else {
         $93 = (($92) + 12|0);
         $94 = HEAP32[$93>>2]|0;
         $95 = (($92) + 16|0);
         $96 = HEAP32[$95>>2]|0;
         $97 = ($94|0)==($96|0);
         if ($97) {
          $98 = HEAP32[$92>>2]|0;
          $99 = (($98) + 36|0);
          $100 = HEAP32[$99>>2]|0;
          $101 = (FUNCTION_TABLE_ii[$100 & 1023]($92)|0);
          $$0$i$i1$i$i7 = $101;
         } else {
          $102 = HEAP32[$94>>2]|0;
          $$0$i$i1$i$i7 = $102;
         }
         $103 = ($$0$i$i1$i$i7|0)==(-1);
         if ($103) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i943 = 0;
          label = 48;
          break;
         } else {
          $phitmp$i4$i$i10 = ($$pre$i3$i$i9|0)==(0|0);
          $tmp$i$i12 = $104 ^ $phitmp$i4$i$i10;
          if ($tmp$i$i12) {
           $$pre$i3$i$i942 = $$pre$i3$i$i9;$184 = $$pre$i3$i$i9;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;
           break L38;
          }
         }
        }
       } while(0);
       if ((label|0) == 48) {
        label = 0;
        if ($104) {
         $$0$ph$be = $$2$lcssa;
         break L38;
        } else {
         $$pre$i3$i$i942 = $$pre$i3$i$i943;$184 = 0;
        }
       }
       $105 = (($106) + 12|0);
       $107 = HEAP32[$105>>2]|0;
       $108 = (($106) + 16|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = ($107|0)==($109|0);
       if ($110) {
        $111 = HEAP32[$106>>2]|0;
        $112 = (($111) + 36|0);
        $113 = HEAP32[$112>>2]|0;
        $114 = (FUNCTION_TABLE_ii[$113 & 1023]($106)|0);
        $$0$i$i = $114;
       } else {
        $115 = HEAP32[$107>>2]|0;
        $$0$i$i = $115;
       }
       $116 = HEAP32[$4>>2]|0;
       $117 = (($116) + 12|0);
       $118 = HEAP32[$117>>2]|0;
       $119 = (FUNCTION_TABLE_iiii[$118 & 1023]($4,8192,$$0$i$i)|0);
       if (!($119)) {
        $$0$ph$be = $$2$lcssa;
        break L38;
       }
       $120 = HEAP32[$105>>2]|0;
       $121 = HEAP32[$108>>2]|0;
       $122 = ($120|0)==($121|0);
       if ($122) {
        $123 = HEAP32[$106>>2]|0;
        $124 = (($123) + 40|0);
        $125 = HEAP32[$124>>2]|0;
        (FUNCTION_TABLE_ii[$125 & 1023]($106)|0);
        $$pre$i$i$i3 = $106;$$pre$i3$i$i9 = $$pre$i3$i$i942;$92 = $184;
        continue;
       } else {
        $126 = (($120) + 4|0);
        HEAP32[$105>>2] = $126;
        $$pre$i$i$i3 = $106;$$pre$i3$i$i9 = $$pre$i3$i$i942;$92 = $184;
        continue;
       }
      }
     }
     else if ((label|0) == 61) {
      label = 0;
      $147 = HEAP32[$127>>2]|0;
      $148 = HEAP32[$129>>2]|0;
      $149 = ($147|0)==($148|0);
      if ($149) {
       $150 = HEAP32[$63>>2]|0;
       $151 = (($150) + 40|0);
       $152 = HEAP32[$151>>2]|0;
       (FUNCTION_TABLE_ii[$152 & 1023]($63)|0);
      } else {
       $153 = (($147) + 4|0);
       HEAP32[$127>>2] = $153;
      }
      $154 = (($$0$ph40) + 4|0);
      $$0$ph$be = $154;
     }
    } while(0);
    $67 = ($$0$ph$be|0)==($__fmte|0);
    if ($67) {
     label = 66;
     break L4;
    }
    $$pre41$pre = HEAP32[$__err>>2]|0;
    $$0$ph40 = $$0$ph$be;$$pre41 = $$pre41$pre;
   }
   if ((label|0) == 20) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i18 = $63;
    break;
   }
   else if ((label|0) == 24) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i18 = $63;
    break;
   }
   else if ((label|0) == 27) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i18 = $63;
    break;
   }
  }
 } while(0);
 if ((label|0) == 66) {
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i18 = $$pre;
 }
 $155 = ($$pre$i$i$i18|0)==(0|0);
 if ($155) {
  $182 = 0;$185 = 1;
 } else {
  $156 = (($$pre$i$i$i18) + 12|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = (($$pre$i$i$i18) + 16|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = ($157|0)==($159|0);
  if ($160) {
   $161 = HEAP32[$$pre$i$i$i18>>2]|0;
   $162 = (($161) + 36|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = (FUNCTION_TABLE_ii[$163 & 1023]($$pre$i$i$i18)|0);
   $$0$i$i$i$i16 = $164;
  } else {
   $165 = HEAP32[$157>>2]|0;
   $$0$i$i$i$i16 = $165;
  }
  $166 = ($$0$i$i$i$i16|0)==(-1);
  if ($166) {
   HEAP32[$__b>>2] = 0;
   $182 = 0;$185 = 1;
  } else {
   $182 = $$pre$i$i$i18;$185 = 0;
  }
 }
 $167 = HEAP32[$__e>>2]|0;
 $168 = ($167|0)==(0|0);
 do {
  if ($168) {
   label = 79;
  } else {
   $169 = (($167) + 12|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (($167) + 16|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = ($170|0)==($172|0);
   if ($173) {
    $174 = HEAP32[$167>>2]|0;
    $175 = (($174) + 36|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = (FUNCTION_TABLE_ii[$176 & 1023]($167)|0);
    $$0$i$i1$i$i22 = $177;
   } else {
    $178 = HEAP32[$170>>2]|0;
    $$0$i$i1$i$i22 = $178;
   }
   $179 = ($$0$i$i1$i$i22|0)==(-1);
   if ($179) {
    HEAP32[$__e>>2] = 0;
    label = 79;
    break;
   }
   if ($185) {
    HEAP32[$agg$result>>2] = $182;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 79) {
  if (!($185)) {
   HEAP32[$agg$result>>2] = $182;
   STACKTOP = sp;return;
  }
 }
 $180 = HEAP32[$__err>>2]|0;
 $181 = $180 | 2;
 HEAP32[$__err>>2] = $181;
 HEAP32[$agg$result>>2] = $182;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,9912,((9912 + 32|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $16 = (($6) + 4|0);
  $17 = (($6) + 4|0);
  $18 = $9&255;
  $19 = $18 >>> 1;
  $21 = $17;$22 = $19;$23 = $16;
 } else {
  $12 = (($6) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($6) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $21 = $13;$22 = $15;$23 = $13;
 }
 $20 = (($21) + ($22<<2)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$23,$20);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(432,($0|0),(10848|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 24|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = (($4) + 168|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = (($10|0) / 12)&-1;
 $13 = (($12|0) % 7)&-1;
 HEAP32[$__w>>2] = $13;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(432,($0|0),(10848|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 16|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = (($5) + 288|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = (($11|0) / 12)&-1;
 $14 = (($13|0) % 12)&-1;
 HEAP32[$__m>>2] = $14;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(432,($0|0),(10848|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 20|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ($2|0)<(69);
 if ($6) {
  $7 = (($2) + 2000)|0;
  $__t$0 = $7;
 } else {
  $$off = (($2) + -69)|0;
  $8 = ($$off>>>0)<(31);
  $9 = (($2) + 1900)|0;
  $$ = $8 ? $9 : $2;
  $__t$0 = $$;
 }
 $10 = (($__t$0) + -1900)|0;
 HEAP32[$__y>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy30 = sp + 136|0;
 $$byval_copy29 = sp + 132|0;
 $$byval_copy28 = sp + 128|0;
 $$byval_copy27 = sp + 120|0;
 $$byval_copy26 = sp + 260|0;
 $$byval_copy25 = sp + 268|0;
 $$byval_copy24 = sp + 252|0;
 $$byval_copy23 = sp + 24|0;
 $$byval_copy22 = sp + 28|0;
 $$byval_copy21 = sp + 32|0;
 $$byval_copy20 = sp + 36|0;
 $$byval_copy19 = sp + 40|0;
 $$byval_copy18 = sp + 44|0;
 $$byval_copy17 = sp + 48|0;
 $$byval_copy16 = sp + 52|0;
 $$byval_copy15 = sp + 56|0;
 $$byval_copy14 = sp + 60|0;
 $$byval_copy13 = sp + 64|0;
 $$byval_copy12 = sp + 68|0;
 $$byval_copy11 = sp + 72|0;
 $$byval_copy10 = sp + 76|0;
 $$byval_copy9 = sp + 80|0;
 $$byval_copy8 = sp + 84|0;
 $$byval_copy7 = sp + 88|0;
 $$byval_copy6 = sp + 92|0;
 $$byval_copy5 = sp + 96|0;
 $$byval_copy4 = sp + 100|0;
 $$byval_copy3 = sp + 104|0;
 $$byval_copy2 = sp + 108|0;
 $$byval_copy1 = sp + 232|0;
 $$byval_copy = sp + 240|0;
 $1 = sp + 248|0;
 $2 = sp + 256|0;
 $3 = sp + 264|0;
 $4 = sp + 272|0;
 $5 = sp + 276|0;
 $6 = sp + 140|0;
 $7 = sp + 144|0;
 $8 = sp + 148|0;
 $9 = sp + 152|0;
 $10 = sp + 156|0;
 $11 = sp + 160|0;
 $12 = sp + 164|0;
 $13 = sp + 168|0;
 $14 = sp + 172|0;
 $15 = sp + 176|0;
 $16 = sp + 180|0;
 $17 = sp + 184|0;
 $18 = sp + 188|0;
 $19 = sp + 192|0;
 $20 = sp + 196|0;
 $21 = sp + 200|0;
 $22 = sp + 204|0;
 $23 = sp + 208|0;
 $24 = sp + 212|0;
 $25 = sp + 216|0;
 $26 = sp + 220|0;
 $27 = sp + 224|0;
 $28 = sp + 20|0;
 $29 = sp + 16|0;
 $30 = sp;
 $31 = sp + 12|0;
 $32 = sp + 228|0;
 $33 = sp + 112|0;
 $34 = sp + 4|0;
 $35 = sp + 8|0;
 $36 = sp + 116|0;
 $37 = sp + 236|0;
 $38 = sp + 244|0;
 $39 = sp + 124|0;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 $40 = (invoke_iii(432,($1|0),(10848|0))|0);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $45 = ___cxa_find_matching_catch()|0;
  $46 = tempRet0;
  $47 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
  ___resumeException($45|0);
  // unreachable;
 }
 $43 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
 $44 = $__fmt << 24 >> 24;
 do {
  switch ($44|0) {
  case 65: case 97:  {
   $48 = (($__tm) + 24|0);
   $49 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $49;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$48,$__b,$$byval_copy,$__err,$40);
   break;
  }
  case 104: case 66: case 98:  {
   $50 = (($__tm) + 16|0);
   $51 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $51;
   ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$50,$__b,$$byval_copy1,$__err,$40);
   break;
  }
  case 99:  {
   $52 = (($this) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (FUNCTION_TABLE_ii[$55 & 1023]($52)|0);
   $57 = HEAP32[$__b>>2]|0;
   HEAP32[$5>>2] = $57;
   $58 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $58;
   $59 = HEAP8[$56>>0]|0;
   $60 = $59 & 1;
   $61 = ($60<<24>>24)==(0);
   if ($61) {
    $66 = (($56) + 4|0);
    $67 = (($56) + 4|0);
    $68 = $59&255;
    $69 = $68 >>> 1;
    $71 = $67;$72 = $69;$73 = $66;
   } else {
    $62 = (($56) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($56) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    $71 = $63;$72 = $65;$73 = $63;
   }
   $70 = (($71) + ($72<<2)|0);
   ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
   ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$6+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($4,$this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$73,$70);
   $74 = HEAP32[$4>>2]|0;
   HEAP32[$__b>>2] = $74;
   break;
  }
  case 121:  {
   $136 = (($__tm) + 20|0);
   $137 = HEAP32[$__e>>2]|0;
   HEAP32[$37>>2] = $137;
   ;HEAP32[$$byval_copy28+0>>2]=HEAP32[$37+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$136,$__b,$$byval_copy28,$__err,$40);
   break;
  }
  case 37:  {
   $140 = HEAP32[$__e>>2]|0;
   HEAP32[$39>>2] = $140;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$39+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 89:  {
   $138 = (($__tm) + 20|0);
   $139 = HEAP32[$__e>>2]|0;
   HEAP32[$38>>2] = $139;
   ;HEAP32[$$byval_copy29+0>>2]=HEAP32[$38+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$138,$__b,$$byval_copy29,$__err,$40);
   break;
  }
  case 116: case 110:  {
   $93 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $93;
   ;HEAP32[$$byval_copy14+0>>2]=HEAP32[$19+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$$byval_copy14,$__err,$40);
   break;
  }
  case 114:  {
   $96 = HEAP32[$__b>>2]|0;
   HEAP32[$22>>2] = $96;
   $97 = HEAP32[$__e>>2]|0;
   HEAP32[$23>>2] = $97;
   ;HEAP32[$$byval_copy16+0>>2]=HEAP32[$22+0>>2]|0;
   ;HEAP32[$$byval_copy17+0>>2]=HEAP32[$23+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($21,$this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,10008,((10008 + 44|0)));
   $98 = HEAP32[$21>>2]|0;
   HEAP32[$__b>>2] = $98;
   break;
  }
  case 112:  {
   $94 = (($__tm) + 8|0);
   $95 = HEAP32[$__e>>2]|0;
   HEAP32[$20>>2] = $95;
   ;HEAP32[$$byval_copy15+0>>2]=HEAP32[$20+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$94,$__b,$$byval_copy15,$__err,$40);
   break;
  }
  case 82:  {
   $99 = HEAP32[$__b>>2]|0;
   HEAP32[$25>>2] = $99;
   $100 = HEAP32[$__e>>2]|0;
   HEAP32[$26>>2] = $100;
   ;HEAP32[$$byval_copy18+0>>2]=HEAP32[$25+0>>2]|0;
   ;HEAP32[$$byval_copy19+0>>2]=HEAP32[$26+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($24,$this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,10056,((10056 + 20|0)));
   $101 = HEAP32[$24>>2]|0;
   HEAP32[$__b>>2] = $101;
   break;
  }
  case 83:  {
   $102 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $102;
   ;HEAP32[$$byval_copy20+0>>2]=HEAP32[$27+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__tm,$__b,$$byval_copy20,$__err,$40);
   break;
  }
  case 84:  {
   $103 = HEAP32[$__b>>2]|0;
   HEAP32[$29>>2] = $103;
   $104 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $104;
   ;HEAP32[$$byval_copy21+0>>2]=HEAP32[$29+0>>2]|0;
   ;HEAP32[$$byval_copy22+0>>2]=HEAP32[$30+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($28,$this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,10080,((10080 + 32|0)));
   $105 = HEAP32[$28>>2]|0;
   HEAP32[$__b>>2] = $105;
   break;
  }
  case 119:  {
   $106 = (($__tm) + 24|0);
   $107 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $107;
   ;HEAP32[$$byval_copy23+0>>2]=HEAP32[$31+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$106,$__b,$$byval_copy23,$__err,$40);
   break;
  }
  case 120:  {
   $108 = HEAP32[$this>>2]|0;
   $109 = (($108) + 20|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = HEAP32[$__b>>2]|0;
   HEAP32[$32>>2] = $111;
   $112 = HEAP32[$__e>>2]|0;
   HEAP32[$33>>2] = $112;
   ;HEAP32[$$byval_copy24+0>>2]=HEAP32[$32+0>>2]|0;
   ;HEAP32[$$byval_copy25+0>>2]=HEAP32[$33+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$110 & 511]($agg$result,$this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm);
   STACKTOP = sp;return;
   break;
  }
  case 88:  {
   $113 = (($this) + 8|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (($114) + 24|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (FUNCTION_TABLE_ii[$116 & 1023]($113)|0);
   $118 = HEAP32[$__b>>2]|0;
   HEAP32[$35>>2] = $118;
   $119 = HEAP32[$__e>>2]|0;
   HEAP32[$36>>2] = $119;
   $120 = HEAP8[$117>>0]|0;
   $121 = $120 & 1;
   $122 = ($121<<24>>24)==(0);
   if ($122) {
    $127 = (($117) + 4|0);
    $128 = (($117) + 4|0);
    $129 = $120&255;
    $130 = $129 >>> 1;
    $132 = $128;$133 = $130;$134 = $127;
   } else {
    $123 = (($117) + 8|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (($117) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $132 = $124;$133 = $126;$134 = $124;
   }
   $131 = (($132) + ($133<<2)|0);
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$35+0>>2]|0;
   ;HEAP32[$$byval_copy27+0>>2]=HEAP32[$36+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($34,$this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$134,$131);
   $135 = HEAP32[$34>>2]|0;
   HEAP32[$__b>>2] = $135;
   break;
  }
  case 109:  {
   $89 = (($__tm) + 16|0);
   $90 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $90;
   ;HEAP32[$$byval_copy12+0>>2]=HEAP32[$17+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$89,$__b,$$byval_copy12,$__err,$40);
   break;
  }
  case 77:  {
   $91 = (($__tm) + 4|0);
   $92 = HEAP32[$__e>>2]|0;
   HEAP32[$18>>2] = $92;
   ;HEAP32[$$byval_copy13+0>>2]=HEAP32[$18+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$91,$__b,$$byval_copy13,$__err,$40);
   break;
  }
  case 101: case 100:  {
   $75 = (($__tm) + 12|0);
   $76 = HEAP32[$__e>>2]|0;
   HEAP32[$7>>2] = $76;
   ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$7+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$75,$__b,$$byval_copy4,$__err,$40);
   break;
  }
  case 68:  {
   $77 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $77;
   $78 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $78;
   ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$9+0>>2]|0;
   ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$10+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($8,$this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,9944,((9944 + 32|0)));
   $79 = HEAP32[$8>>2]|0;
   HEAP32[$__b>>2] = $79;
   break;
  }
  case 70:  {
   $80 = HEAP32[$__b>>2]|0;
   HEAP32[$12>>2] = $80;
   $81 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $81;
   ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$12+0>>2]|0;
   ;HEAP32[$$byval_copy8+0>>2]=HEAP32[$13+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($11,$this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,9976,((9976 + 32|0)));
   $82 = HEAP32[$11>>2]|0;
   HEAP32[$__b>>2] = $82;
   break;
  }
  case 72:  {
   $83 = (($__tm) + 8|0);
   $84 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $84;
   ;HEAP32[$$byval_copy9+0>>2]=HEAP32[$14+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$83,$__b,$$byval_copy9,$__err,$40);
   break;
  }
  case 73:  {
   $85 = (($__tm) + 8|0);
   $86 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $86;
   ;HEAP32[$$byval_copy10+0>>2]=HEAP32[$15+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$85,$__b,$$byval_copy10,$__err,$40);
   break;
  }
  case 106:  {
   $87 = (($__tm) + 28|0);
   $88 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $88;
   ;HEAP32[$$byval_copy11+0>>2]=HEAP32[$16+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$87,$__b,$$byval_copy11,$__err,$40);
   break;
  }
  default: {
   $141 = HEAP32[$__err>>2]|0;
   $142 = $141 | 4;
   HEAP32[$__err>>2] = $142;
  }
  }
 } while(0);
 $143 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $143;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)>(0);
 $or$cond = $5 & $6;
 $7 = ($2|0)<(32);
 $or$cond3 = $or$cond & $7;
 if ($or$cond3) {
  HEAP32[$__d>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)>(0);
 $or$cond = $5 & $6;
 $7 = ($2|0)<(13);
 $or$cond3 = $or$cond & $7;
 if ($or$cond3) {
  HEAP32[$__h>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $5 & $6;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
  STACKTOP = sp;return;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $0 = HEAP32[$__b>>2]|0;
  $1 = ($0|0)==(0|0);
  do {
   if ($1) {
    $78 = 1;
   } else {
    $2 = (($0) + 12|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = (($0) + 16|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($3|0)==($5|0);
    if ($6) {
     $7 = HEAP32[$0>>2]|0;
     $8 = (($7) + 36|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
     $$0$i$i$i$i = $10;
    } else {
     $11 = HEAP32[$3>>2]|0;
     $$0$i$i$i$i = $11;
    }
    $12 = ($$0$i$i$i$i|0)==(-1);
    if ($12) {
     HEAP32[$__b>>2] = 0;
     $78 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $78 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $13 = HEAP32[$__e>>2]|0;
  $14 = ($13|0)==(0|0);
  do {
   if ($14) {
    label = 15;
   } else {
    $15 = (($13) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($13) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($16|0)==($18|0);
    if ($19) {
     $20 = HEAP32[$13>>2]|0;
     $21 = (($20) + 36|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
     $$0$i$i1$i$i = $23;
    } else {
     $24 = HEAP32[$16>>2]|0;
     $$0$i$i1$i$i = $24;
    }
    $25 = ($$0$i$i1$i$i|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 15;
     break;
    } else {
     if ($78) {
      $79 = $13;
      break;
     } else {
      $$pre$i3$i$i9 = $13;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($78) {
    $$pre$i3$i$i9 = 0;
    break;
   } else {
    $79 = 0;
   }
  }
  $26 = HEAP32[$__b>>2]|0;
  $27 = (($26) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($28|0)==($30|0);
  if ($31) {
   $32 = HEAP32[$26>>2]|0;
   $33 = (($32) + 36|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_ii[$34 & 1023]($26)|0);
   $$0$i$i = $35;
  } else {
   $36 = HEAP32[$28>>2]|0;
   $$0$i$i = $36;
  }
  $37 = HEAP32[$__ct>>2]|0;
  $38 = (($37) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_iiii[$39 & 1023]($__ct,8192,$$0$i$i)|0);
  if (!($40)) {
   $$pre$i3$i$i9 = $79;
   break;
  }
  $41 = HEAP32[$__b>>2]|0;
  $42 = (($41) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($43|0)==($45|0);
  if ($46) {
   $47 = HEAP32[$41>>2]|0;
   $48 = (($47) + 40|0);
   $49 = HEAP32[$48>>2]|0;
   (FUNCTION_TABLE_ii[$49 & 1023]($41)|0);
   continue;
  } else {
   $50 = (($43) + 4|0);
   HEAP32[$42>>2] = $50;
   continue;
  }
 }
 $51 = HEAP32[$__b>>2]|0;
 $52 = ($51|0)==(0|0);
 do {
  if ($52) {
   $80 = 1;
  } else {
   $53 = (($51) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($51) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($54|0)==($56|0);
   if ($57) {
    $58 = HEAP32[$51>>2]|0;
    $59 = (($58) + 36|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (FUNCTION_TABLE_ii[$60 & 1023]($51)|0);
    $$0$i$i$i$i1 = $61;
   } else {
    $62 = HEAP32[$54>>2]|0;
    $$0$i$i$i$i1 = $62;
   }
   $63 = ($$0$i$i$i$i1|0)==(-1);
   if ($63) {
    HEAP32[$__b>>2] = 0;
    $80 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $80 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $64 = ($$pre$i3$i$i9|0)==(0|0);
 do {
  if ($64) {
   label = 37;
  } else {
   $65 = (($$pre$i3$i$i9) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($$pre$i3$i$i9) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($66|0)==($68|0);
   if ($69) {
    $70 = HEAP32[$$pre$i3$i$i9>>2]|0;
    $71 = (($70) + 36|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (FUNCTION_TABLE_ii[$72 & 1023]($$pre$i3$i$i9)|0);
    $$0$i$i1$i$i7 = $73;
   } else {
    $74 = HEAP32[$66>>2]|0;
    $$0$i$i1$i$i7 = $74;
   }
   $75 = ($$0$i$i1$i$i7|0)==(-1);
   if ($75) {
    HEAP32[$__e>>2] = 0;
    label = 37;
    break;
   }
   if ($80) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  if (!($80)) {
   STACKTOP = sp;return;
  }
 }
 $76 = HEAP32[$__err>>2]|0;
 $77 = $76 | 2;
 HEAP32[$__err>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $24 = $12;
 } else {
  $9 = (($5) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $24 = $10;
 }
 $13 = (($5) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = (($5) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $23 = ($24|0)==($21|0);
 if ($23) {
  $25 = HEAP32[$__err>>2]|0;
  $26 = $25 | 4;
  HEAP32[$__err>>2] = $26;
  STACKTOP = sp;return;
 }
 $27 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $27;
 $28 = (($5) + 24|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
 $30 = $29;
 $31 = $5;
 $32 = (($30) - ($31))|0;
 $33 = ($29|0)==($5|0);
 if ($33) {
  $34 = HEAP32[$__h>>2]|0;
  $35 = ($34|0)==(12);
  if ($35) {
   HEAP32[$__h>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $36 = ($32|0)==(12);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = HEAP32[$__h>>2]|0;
 $38 = ($37|0)<(12);
 if (!($38)) {
  STACKTOP = sp;return;
 }
 $39 = (($37) + 12)|0;
 HEAP32[$__h>>2] = $39;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = (($2) + -1900)|0;
 HEAP32[$__y>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i915 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $83 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $83 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $83 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = (($13) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($83) {
     $$pre$i3$i$i915 = $13;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($83) {
   label = 16;
  } else {
   $$pre$i3$i$i915 = 0;
  }
 }
 if ((label|0) == 16) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  STACKTOP = sp;return;
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP32[$30>>2]|0;
  $$0$i$i = $38;
 }
 $39 = HEAP32[$__ct>>2]|0;
 $40 = (($39) + 52|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,$$0$i$i,0)|0);
 $43 = ($42<<24>>24)==(37);
 if (!($43)) {
  $44 = HEAP32[$__err>>2]|0;
  $45 = $44 | 4;
  HEAP32[$__err>>2] = $45;
  STACKTOP = sp;return;
 }
 $46 = HEAP32[$__b>>2]|0;
 $47 = (($46) + 12|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($46) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($48|0)==($50|0);
 if ($51) {
  $52 = HEAP32[$46>>2]|0;
  $53 = (($52) + 40|0);
  $54 = HEAP32[$53>>2]|0;
  (FUNCTION_TABLE_ii[$54 & 1023]($46)|0);
  $$pre = HEAP32[$__b>>2]|0;
  $57 = $$pre;
 } else {
  $55 = (($48) + 4|0);
  HEAP32[$47>>2] = $55;
  $57 = $46;
 }
 $56 = ($57|0)==(0|0);
 do {
  if ($56) {
   $84 = 1;
  } else {
   $58 = (($57) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($57) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$57>>2]|0;
    $64 = (($63) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 1023]($57)|0);
    $$0$i$i$i$i1 = $66;
   } else {
    $67 = HEAP32[$59>>2]|0;
    $$0$i$i$i$i1 = $67;
   }
   $68 = ($$0$i$i$i$i1|0)==(-1);
   if ($68) {
    HEAP32[$__b>>2] = 0;
    $84 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $84 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $69 = ($$pre$i3$i$i915|0)==(0|0);
 do {
  if ($69) {
   label = 38;
  } else {
   $70 = (($$pre$i3$i$i915) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($$pre$i3$i$i915) + 16|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($71|0)==($73|0);
   if ($74) {
    $75 = HEAP32[$$pre$i3$i$i915>>2]|0;
    $76 = (($75) + 36|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (FUNCTION_TABLE_ii[$77 & 1023]($$pre$i3$i$i915)|0);
    $$0$i$i1$i$i7 = $78;
   } else {
    $79 = HEAP32[$71>>2]|0;
    $$0$i$i1$i$i7 = $79;
   }
   $80 = ($$0$i$i1$i$i7|0)==(-1);
   if ($80) {
    HEAP32[$__e>>2] = 0;
    label = 38;
    break;
   }
   if ($84) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 38) {
  if (!($84)) {
   STACKTOP = sp;return;
  }
 }
 $81 = HEAP32[$__err>>2]|0;
 $82 = $81 | 2;
 HEAP32[$__err>>2] = $82;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__110__time_putD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 __THREW__ = 0;
 $1 = (invoke_i(481)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = ($0|0)==($1|0);
  if ($4) {
   STACKTOP = sp;return;
  }
  $5 = HEAP32[$this>>2]|0;
  __THREW__ = 0;
  invoke_vi(495,($5|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   STACKTOP = sp;return;
  }
 }
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$01$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 4|0;
 $__ne = sp;
 $2 = (($__nar) + 100|0);
 HEAP32[$__ne>>2] = $2;
 $3 = (($this) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = ($__nar|0)==($4|0);
 if ($6) {
  $24 = $5;
  HEAP32[$agg$result>>2] = $24;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $__nar;$9 = $5;
 }
 while(1) {
  $7 = HEAP8[$$01$i$i>>0]|0;
  $8 = ($9|0)==(0|0);
  do {
   if ($8) {
    $25 = 0;
   } else {
    $10 = (($9) + 24|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($9) + 28|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($11|0)==($13|0);
    if ($14) {
     $16 = HEAP32[$9>>2]|0;
     $17 = (($16) + 52|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = $7&255;
     $20 = (FUNCTION_TABLE_iii[$18 & 1023]($9,$19)|0);
     $21 = ($20|0)==(-1);
     $$$i = $21 ? 0 : $9;
     $25 = $$$i;
     break;
    } else {
     $15 = (($11) + 1|0);
     HEAP32[$10>>2] = $15;
     HEAP8[$11>>0] = $7;
     $25 = $9;
     break;
    }
   }
  } while(0);
  $22 = (($$01$i$i) + 1|0);
  $23 = ($22|0)==($4|0);
  if ($23) {
   $24 = $25;
   break;
  } else {
   $$01$i$i = $22;$9 = $25;
  }
 }
 HEAP32[$agg$result>>2] = $24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nb,$__ne,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fmt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fmt = sp;
 HEAP8[$fmt>>0] = 37;
 $0 = (($fmt) + 1|0);
 HEAP8[$0>>0] = $__fmt;
 $1 = (($fmt) + 2|0);
 HEAP8[$1>>0] = $__mod;
 $2 = (($fmt) + 3|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__mod<<24>>24)==(0);
 if (!($3)) {
  HEAP8[$0>>0] = $__mod;
  HEAP8[$1>>0] = $__fmt;
 }
 $4 = HEAP32[$__ne>>2]|0;
 $5 = $4;
 $6 = $__nb;
 $7 = (($5) - ($6))|0;
 $8 = HEAP32[$this>>2]|0;
 $9 = (_strftime_l(($__nb|0),($7|0),($fmt|0),($__tm|0),($8|0))|0);
 $10 = (($__nb) + ($9)|0);
 HEAP32[$__ne>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i$i$i = 0, $$01$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 8|0;
 $__ne = sp;
 $2 = (($__nar) + 400|0);
 HEAP32[$__ne>>2] = $2;
 $3 = (($this) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = ($__nar|0)==($4|0);
 if ($6) {
  $23 = $5;
  HEAP32[$agg$result>>2] = $23;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $__nar;$9 = $5;
 }
 while(1) {
  $7 = HEAP32[$$01$i$i>>2]|0;
  $8 = ($9|0)==(0|0);
  if ($8) {
   $24 = 0;
  } else {
   $10 = (($9) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($9) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($11|0)==($13|0);
   if ($14) {
    $15 = HEAP32[$9>>2]|0;
    $16 = (($15) + 52|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (FUNCTION_TABLE_iii[$17 & 1023]($9,$7)|0);
    $$0$i$i$i$i = $18;
   } else {
    $19 = (($11) + 4|0);
    HEAP32[$10>>2] = $19;
    HEAP32[$11>>2] = $7;
    $$0$i$i$i$i = $7;
   }
   $20 = ($$0$i$i$i$i|0)==(-1);
   $$$i = $20 ? 0 : $9;
   $24 = $$$i;
  }
  $21 = (($$01$i$i) + 4|0);
  $22 = ($21|0)==($4|0);
  if ($22) {
   $23 = $24;
   break;
  } else {
   $$01$i$i = $21;$9 = $24;
  }
 }
 HEAP32[$agg$result>>2] = $23;
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__wb = $__wb|0;
 $__we = $__we|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__nb = 0, $__ne = 0, $mb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 16|0;
 $__ne = sp + 12|0;
 $mb = sp;
 $__nb = sp + 8|0;
 $0 = (($__nar) + 100|0);
 HEAP32[$__ne>>2] = $0;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $1 = $mb;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 HEAP32[$__nb>>2] = $__nar;
 $5 = HEAP32[$__we>>2]|0;
 $6 = $5;
 $7 = $__wb;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 2;
 $10 = HEAP32[$this>>2]|0;
 $11 = (_uselocale(($10|0))|0);
 __THREW__ = 0;
 $12 = (invoke_iiiii(496,($__wb|0),($__nb|0),($9|0),($mb|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $22 = ($11|0)==(0|0);
  if ($22) {
   ___resumeException($20|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(497,($11|0))|0);
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $25 = ___cxa_find_matching_catch(0|0)|0;
   $26 = tempRet0;
   ___clang_call_terminate($25);
   // unreachable;
  } else {
   ___resumeException($20|0);
   // unreachable;
  }
 }
 $15 = ($11|0)==(0|0);
 if (!($15)) {
  __THREW__ = 0;
  (invoke_ii(497,($11|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $18 = ___cxa_find_matching_catch(0|0)|0;
   $19 = tempRet0;
   ___clang_call_terminate($18);
   // unreachable;
  }
 }
 $27 = ($12|0)==(-1);
 if ($27) {
  __ZNSt3__121__throw_runtime_errorEPKc(11736);
  // unreachable;
 } else {
  $28 = (($__wb) + ($12<<2)|0);
  HEAP32[$__we>>2] = $28;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$114 = 0, $$115 = 0, $$1212 = 0, $$1213 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre17 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$27 = 0, $__neg = 0, $__w$08 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 140|0;
 $__wb = sp + 8|0;
 $__wn = sp + 4|0;
 $__loc = sp + 20|0;
 $__neg = sp + 240|0;
 $0 = sp + 16|0;
 $__atoms = sp + 128|0;
 $__nbuf = sp + 28|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 498;
 $2 = (($__wbuf) + 100|0);
 __THREW__ = 0;
 invoke_vii(431,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $32 = ___cxa_find_matching_catch()|0;
   $33 = tempRet0;
   HEAP32[$__wb>>2] = 0;
   $$114 = $32;$$1212 = $33;$105 = 498;$106 = $__wbuf;
  } else {
   __THREW__ = 0;
   $5 = (invoke_iii(432,($__loc|0),(10856|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   L3: do {
    if ($7) {
     label = 11;
    } else {
     HEAP8[$__neg>>0] = 0;
     $8 = HEAP32[$__e>>2]|0;
     HEAP32[$0>>2] = $8;
     $9 = (($__iob) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
     $11 = (invoke_iiiiiiiiiiii(499,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($10|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($2|0))|0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if ($13) {
      label = 11;
     } else {
      if ($11) {
       $14 = HEAP32[$5>>2]|0;
       $15 = (($14) + 32|0);
       $16 = HEAP32[$15>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($16|0,($5|0),(10472|0),(((10472 + 10|0))|0),($__atoms|0))|0);
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if ($18) {
        label = 11;
        break;
       }
       $19 = HEAP32[$__wn>>2]|0;
       $20 = HEAP32[$__wb>>2]|0;
       $21 = $19;
       $22 = $20;
       $23 = (($21) - ($22))|0;
       $24 = ($23|0)>(98);
       if ($24) {
        $25 = (($23) + 2)|0;
        $26 = (_malloc($25)|0);
        $27 = ($26|0)==(0|0);
        if ($27) {
         __THREW__ = 0;
         invoke_v(487);
         $28 = __THREW__; __THREW__ = 0;
         $29 = $28&1;
         if ($29) {
          $30 = ___cxa_find_matching_catch()|0;
          $31 = tempRet0;
          $$0 = $30;$$01 = $31;
          break;
         } else {
          $38 = 0;$__nc$0 = 0;
         }
        } else {
         $38 = $26;$__nc$0 = $26;
        }
       } else {
        $38 = 0;$__nc$0 = $__nbuf;
       }
       $39 = HEAP8[$__neg>>0]|0;
       $40 = ($39<<24>>24)==(0);
       if ($40) {
        $__nc$1 = $__nc$0;
       } else {
        $41 = (($__nc$0) + 1|0);
        HEAP8[$__nc$0>>0] = 45;
        $__nc$1 = $41;
       }
       $42 = ($20>>>0)<($19>>>0);
       if ($42) {
        $43 = (($__atoms) + 10|0);
        $44 = $__atoms;
        $__nc$27 = $__nc$1;$__w$08 = $20;
        while(1) {
         $45 = HEAP8[$__w$08>>0]|0;
         $$01$i = $__atoms;
         while(1) {
          $48 = HEAP8[$$01$i>>0]|0;
          $49 = ($48<<24>>24)==($45<<24>>24);
          $47 = (($$01$i) + 1|0);
          if ($49) {
           $$0$lcssa$i = $$01$i;
           break;
          }
          $46 = ($47|0)==($43|0);
          if ($46) {
           $$0$lcssa$i = $43;
           break;
          } else {
           $$01$i = $47;
          }
         }
         $50 = $$0$lcssa$i;
         $51 = (($50) - ($44))|0;
         $52 = (10472 + ($51)|0);
         $53 = HEAP8[$52>>0]|0;
         HEAP8[$__nc$27>>0] = $53;
         $54 = (($__w$08) + 1|0);
         $55 = (($__nc$27) + 1|0);
         $56 = HEAP32[$__wn>>2]|0;
         $57 = ($54>>>0)<($56>>>0);
         if ($57) {
          $__nc$27 = $55;$__w$08 = $54;
         } else {
          $__nc$2$lcssa = $55;
          break;
         }
        }
       } else {
        $__nc$2$lcssa = $__nc$1;
       }
       HEAP8[$__nc$2$lcssa>>0] = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $58 = (_sscanf($__nbuf,10488,$vararg_buffer)|0);
       $59 = ($58|0)==(1);
       if (!($59)) {
        __THREW__ = 0;
        invoke_vi(500,(10496|0));
        $60 = __THREW__; __THREW__ = 0;
        $61 = $60&1;
        if ($61) {
         $36 = ___cxa_find_matching_catch()|0;
         $37 = tempRet0;
         _free($38);
         $$0 = $36;$$01 = $37;
         break;
        }
       }
       _free($38);
      }
      $62 = HEAP32[$__b>>2]|0;
      $63 = ($62|0)==(0|0);
      do {
       if ($63) {
        $77 = 0;
       } else {
        $64 = (($62) + 12|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = (($62) + 16|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = ($65|0)==($67|0);
        if ($68) {
         $69 = HEAP32[$62>>2]|0;
         $70 = (($69) + 36|0);
         $71 = HEAP32[$70>>2]|0;
         __THREW__ = 0;
         $72 = (invoke_ii($71|0,($62|0))|0);
         $73 = __THREW__; __THREW__ = 0;
         $74 = $73&1;
         if ($74) {
          label = 11;
          break L3;
         }
         $75 = ($72|0)==(-1);
         if ($75) {
          HEAP32[$__b>>2] = 0;
          $77 = 0;
          break;
         } else {
          $$pre$i$i$i = HEAP32[$__b>>2]|0;
          $77 = $$pre$i$i$i;
          break;
         }
        } else {
         $77 = $62;
        }
       }
      } while(0);
      $76 = ($77|0)==(0|0);
      $78 = HEAP32[$__e>>2]|0;
      $79 = ($78|0)==(0|0);
      do {
       if ($79) {
        label = 36;
       } else {
        $80 = (($78) + 12|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = (($78) + 16|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = ($81|0)==($83|0);
        if (!($84)) {
         if ($76) {
          break;
         } else {
          label = 38;
          break;
         }
        }
        $85 = HEAP32[$78>>2]|0;
        $86 = (($85) + 36|0);
        $87 = HEAP32[$86>>2]|0;
        __THREW__ = 0;
        $88 = (invoke_ii($87|0,($78|0))|0);
        $89 = __THREW__; __THREW__ = 0;
        $90 = $89&1;
        if ($90) {
         label = 11;
         break L3;
        }
        $91 = ($88|0)==(-1);
        if ($91) {
         HEAP32[$__e>>2] = 0;
         label = 36;
         break;
        } else {
         if ($76) {
          break;
         } else {
          label = 38;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 36) {
       if ($76) {
        label = 38;
       }
      }
      if ((label|0) == 38) {
       $92 = HEAP32[$__err>>2]|0;
       $93 = $92 | 2;
       HEAP32[$__err>>2] = $93;
      }
      $94 = HEAP32[$__b>>2]|0;
      HEAP32[$agg$result>>2] = $94;
      $95 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($95)|0);
      $96 = HEAP32[$__wb>>2]|0;
      HEAP32[$__wb>>2] = 0;
      $97 = ($96|0)==(0|0);
      if ($97) {
       STACKTOP = sp;return;
      }
      $98 = HEAP32[$1>>2]|0;
      __THREW__ = 0;
      invoke_vi($98|0,($96|0));
      $99 = __THREW__; __THREW__ = 0;
      $100 = $99&1;
      if ($100) {
       $101 = ___cxa_find_matching_catch(0|0)|0;
       $102 = tempRet0;
       ___clang_call_terminate($101);
       // unreachable;
      } else {
       STACKTOP = sp;return;
      }
     }
    }
   } while(0);
   if ((label|0) == 11) {
    $34 = ___cxa_find_matching_catch()|0;
    $35 = tempRet0;
    $$0 = $34;$$01 = $35;
   }
   $103 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($103)|0);
   $$pre = HEAP32[$__wb>>2]|0;
   HEAP32[$__wb>>2] = 0;
   $104 = ($$pre|0)==(0|0);
   if ($104) {
    $$115 = $$0;$$1213 = $$01;
    ___resumeException($$115|0);
    // unreachable;
   } else {
    $$pre17 = HEAP32[$1>>2]|0;
    $$114 = $$0;$$1212 = $$01;$105 = $$pre17;$106 = $$pre;
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi($105|0,($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if ($108) {
  $109 = ___cxa_find_matching_catch(0|0)|0;
  $110 = tempRet0;
  ___clang_call_terminate($109);
  // unreachable;
 } else {
  $$115 = $$114;$$1213 = $$1212;
  ___resumeException($$115|0);
  // unreachable;
 }
}
function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i104 = 0, $$0$i$i111 = 0, $$0$i$i120 = 0, $$0$i$i130 = 0, $$0$i$i147 = 0, $$0$i$i33 = 0, $$0$i$i36 = 0, $$0$i$i49 = 0, $$0$i$i55 = 0, $$0$i$i58 = 0, $$0$i$i65 = 0, $$0$i$i84 = 0, $$0$i$i87 = 0, $$271 = 0, $$272 = 0, $$273 = 0, $$274 = 0;
 var $$275 = 0, $$276 = 0, $$277 = 0, $$278 = 0, $$279 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i134 = 0, $$pre$i$i$i151 = 0, $$pre$i$i$i23 = 0, $$pre$i$i$i39 = 0, $$pre$i$i$i70 = 0, $$pre$i$i$i94 = 0, $$pre$i2$i$i = 0, $$pre$i2$i$i138 = 0, $$pre$i2$i$i155 = 0, $$pre$i2$i$i155249 = 0, $$pre$i2$i$i155250 = 0, $$pre$i2$i$i261$ph = 0, $$pre$i2$i$i261269 = 0;
 var $$pre$i2$i$i43 = 0, $$pre$i2$i$i43240 = 0, $$pre$i2$i$i43242 = 0, $$pre$i2$i$i74 = 0, $$pre$i2$i$i74255$ph = 0, $$pre$i2$i$i74255266 = 0, $$pre$i2$i$i98 = 0, $$pre245 = 0, $$pre247 = 0, $$pre248 = 0, $$pre253 = 0, $$pre257 = 0, $$pre259 = 0, $$sum = 0, $$sum262 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0;
 var $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$010 = 0, $__p$0232 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$09 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0234 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $isascii1$i = 0, $isascii1$i128 = 0, $isascii1$i161 = 0, $isascii1$i52 = 0, $isascii1$i63 = 0;
 var $lpad$phi$index = 0, $lpad$phi$index7 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond6 = 0, $or$cond8 = 0, $sext = 0, $sext199 = 0, $sext200 = 0, $sext201 = 0, $switch = 0, $tmp$i$i = 0, $tmp$i$i100 = 0, $tmp$i$i140 = 0, $tmp$i$i157 = 0, $tmp$i$i45 = 0, $tmp$i$i76 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 488|0;
 $__gbuf = sp + 32|0;
 $__gb = sp + 472|0;
 $__gn = sp;
 $__ge = sp + 468|0;
 $__pat = sp + 480|0;
 $__dp = sp + 492|0;
 $__ts = sp + 493|0;
 $__grp = sp + 4|0;
 $__sym = sp + 444|0;
 $__psn = sp + 20|0;
 $__nsn = sp + 456|0;
 $__spaces = sp + 432|0;
 $__fd = sp + 16|0;
 $__et = sp + 484|0;
 HEAP32[$0>>2] = $__we;
 HEAP32[$__gb>>2] = $__gbuf;
 $1 = (($__gb) + 4|0);
 HEAP32[$1>>2] = 498;
 HEAP32[$__gn>>2] = $__gbuf;
 $2 = (($__gbuf) + 400|0);
 HEAP32[$__ge>>2] = $2;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(501,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if ($4) {
   $69 = ___cxa_find_matching_catch()|0;
   $70 = tempRet0;
   $lpad$phi$index = $69;$lpad$phi$index7 = $70;
  } else {
   $5 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $5;
   $6 = (($__ct) + 8|0);
   $7 = (($__nsn) + 1|0);
   $8 = (($__nsn) + 4|0);
   $9 = (($__nsn) + 8|0);
   $10 = (($__psn) + 1|0);
   $11 = (($__psn) + 4|0);
   $12 = (($__psn) + 8|0);
   $13 = $__flags & 512;
   $14 = ($13|0)!=(0);
   $15 = (($__sym) + 1|0);
   $16 = (($__sym) + 8|0);
   $17 = (($__sym) + 4|0);
   $18 = (($__spaces) + 1|0);
   $19 = (($__spaces) + 8|0);
   $20 = (($__spaces) + 4|0);
   $21 = (($__pat) + 3|0);
   $22 = (($__grp) + 4|0);
   $876 = $__gbuf;$__p$0232 = 0;$__trailing_sign$0234 = 0;
   L4: while(1) {
    $23 = HEAP32[$__b>>2]|0;
    $24 = ($23|0)==(0|0);
    do {
     if ($24) {
      $38 = 0;
     } else {
      $25 = (($23) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = (($23) + 16|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($26|0)==($28|0);
      if ($29) {
       $30 = HEAP32[$23>>2]|0;
       $31 = (($30) + 36|0);
       $32 = HEAP32[$31>>2]|0;
       __THREW__ = 0;
       $33 = (invoke_ii($32|0,($23|0))|0);
       $34 = __THREW__; __THREW__ = 0;
       $35 = $34&1;
       if ($35) {
        label = 24;
        break L4;
       }
       $36 = ($33|0)==(-1);
       if ($36) {
        HEAP32[$__b>>2] = 0;
        $38 = 0;
        break;
       } else {
        $$pre$i$i$i23 = HEAP32[$__b>>2]|0;
        $38 = $$pre$i$i$i23;
        break;
       }
      } else {
       $38 = $23;
      }
     }
    } while(0);
    $37 = ($38|0)==(0|0);
    $39 = HEAP32[$__e>>2]|0;
    $40 = ($39|0)==(0|0);
    do {
     if ($40) {
      label = 15;
     } else {
      $41 = (($39) + 12|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (($39) + 16|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($42|0)==($44|0);
      if (!($45)) {
       if ($37) {
        $877 = $39;
        break;
       } else {
        $864 = $876;$878 = $39;$__trailing_sign$0$lcssa = $__trailing_sign$0234;
        label = 280;
        break L4;
       }
      }
      $46 = HEAP32[$39>>2]|0;
      $47 = (($46) + 36|0);
      $48 = HEAP32[$47>>2]|0;
      __THREW__ = 0;
      $49 = (invoke_ii($48|0,($39|0))|0);
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      if ($51) {
       label = 24;
       break L4;
      }
      $52 = ($49|0)==(-1);
      if ($52) {
       HEAP32[$__e>>2] = 0;
       label = 15;
       break;
      } else {
       if ($37) {
        $877 = $39;
        break;
       } else {
        $864 = $876;$878 = $39;$__trailing_sign$0$lcssa = $__trailing_sign$0234;
        label = 280;
        break L4;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($37) {
      $864 = $876;$878 = 0;$__trailing_sign$0$lcssa = $__trailing_sign$0234;
      label = 280;
      break;
     } else {
      $877 = 0;
     }
    }
    $53 = (($__pat) + ($__p$0232)|0);
    $54 = HEAP8[$53>>0]|0;
    $55 = $54 << 24 >> 24;
    L26: do {
     switch ($55|0) {
     case 2:  {
      $375 = ($__trailing_sign$0234|0)!=(0|0);
      $376 = ($__p$0232>>>0)<(2);
      $or$cond = $375 | $376;
      if (!($or$cond)) {
       $377 = ($__p$0232|0)==(2);
       if ($377) {
        $378 = HEAP8[$21>>0]|0;
        $379 = ($378<<24>>24)!=(0);
        $380 = $379;
       } else {
        $380 = 0;
       }
       $brmerge = $14 | $380;
       if (!($brmerge)) {
        $879 = $877;$880 = $876;$__trailing_sign$1 = 0;
        break L26;
       }
      }
      $381 = HEAP8[$__sym>>0]|0;
      $382 = $381 & 1;
      $383 = ($382<<24>>24)==(0);
      $384 = HEAP32[$16>>2]|0;
      $$274 = $383 ? $15 : $384;
      $385 = ($__p$0232|0)==(0);
      L34: do {
       if ($385) {
        $$pre$i2$i$i155 = $877;$437 = $381;$447 = $$274;$465 = $877;
       } else {
        $386 = (($__p$0232) + -1)|0;
        $387 = (($__pat) + ($386)|0);
        $388 = HEAP8[$387>>0]|0;
        $switch = ($388&255)<(2);
        if ($switch) {
         $389 = $381&255;
         $390 = $389 >>> 1;
         $391 = HEAP32[$16>>2]|0;
         $392 = HEAP32[$17>>2]|0;
         $395 = $$274;
         while(1) {
          $$275 = $383 ? $15 : $391;
          $$276 = $383 ? $390 : $392;
          $393 = (($$275) + ($$276)|0);
          $394 = ($395|0)==($393|0);
          if ($394) {
           break;
          }
          $396 = HEAP8[$395>>0]|0;
          $isascii1$i161 = ($396<<24>>24)>(-1);
          if (!($isascii1$i161)) {
           break;
          }
          $397 = $396 << 24 >> 24;
          $398 = HEAP32[$6>>2]|0;
          $399 = (($398) + ($397<<1)|0);
          $400 = HEAP16[$399>>1]|0;
          $401 = $400 & 8192;
          $402 = ($401<<16>>16)==(0);
          $403 = (($395) + 1|0);
          if ($402) {
           break;
          } else {
           $395 = $403;
          }
         }
         $$277 = $383 ? $15 : $391;
         $404 = $395;
         $405 = $$277;
         $406 = (($404) - ($405))|0;
         $407 = HEAP8[$__spaces>>0]|0;
         $408 = $407 & 1;
         $409 = ($408<<24>>24)==(0);
         if ($409) {
          $411 = $407&255;
          $412 = $411 >>> 1;
          $414 = $412;
         } else {
          $410 = HEAP32[$20>>2]|0;
          $414 = $410;
         }
         $413 = ($406>>>0)>($414>>>0);
         L46: do {
          if (!($413)) {
           if ($409) {
            $418 = $407&255;
            $419 = $418 >>> 1;
            $$sum262 = (($419) - ($406))|0;
            $420 = ((($__spaces) + ($$sum262)|0) + 1|0);
            $421 = $407&255;
            $422 = $421 >>> 1;
            $424 = $18;$425 = $422;$427 = $420;
           } else {
            $415 = HEAP32[$19>>2]|0;
            $416 = HEAP32[$20>>2]|0;
            $$sum = (($416) - ($406))|0;
            $417 = (($415) + ($$sum)|0);
            $424 = $415;$425 = $416;$427 = $417;
           }
           $423 = (($424) + ($425)|0);
           $$278 = $383 ? $15 : $391;
           $426 = ($427|0)==($423|0);
           if ($426) {
            $$pre$i2$i$i155 = $877;$437 = $381;$447 = $395;$465 = $877;
            break L34;
           } else {
            $429 = $427;$431 = $$278;
           }
           while(1) {
            $428 = HEAP8[$429>>0]|0;
            $430 = HEAP8[$431>>0]|0;
            $432 = ($428<<24>>24)==($430<<24>>24);
            if (!($432)) {
             break L46;
            }
            $433 = (($429) + 1|0);
            $434 = (($431) + 1|0);
            $435 = ($433|0)==($423|0);
            if ($435) {
             $$pre$i2$i$i155 = $877;$437 = $381;$447 = $395;$465 = $877;
             break L34;
            } else {
             $429 = $433;$431 = $434;
            }
           }
          }
         } while(0);
         $$279 = $383 ? $15 : $391;
         $$pre$i2$i$i155 = $877;$437 = $381;$447 = $$279;$465 = $877;
        } else {
         $$pre$i2$i$i155 = $877;$437 = $381;$447 = $$274;$465 = $877;
        }
       }
      } while(0);
      L56: while(1) {
       $436 = $437 & 1;
       $438 = ($436<<24>>24)==(0);
       if ($438) {
        $441 = $437&255;
        $442 = $441 >>> 1;
        $444 = $15;$445 = $442;
       } else {
        $439 = HEAP32[$16>>2]|0;
        $440 = HEAP32[$17>>2]|0;
        $444 = $439;$445 = $440;
       }
       $443 = (($444) + ($445)|0);
       $446 = ($447|0)==($443|0);
       if ($446) {
        $882 = $$pre$i2$i$i155;
        break;
       }
       $448 = HEAP32[$__b>>2]|0;
       $449 = ($448|0)==(0|0);
       do {
        if ($449) {
         $463 = 0;
        } else {
         $450 = (($448) + 12|0);
         $451 = HEAP32[$450>>2]|0;
         $452 = (($448) + 16|0);
         $453 = HEAP32[$452>>2]|0;
         $454 = ($451|0)==($453|0);
         if ($454) {
          $455 = HEAP32[$448>>2]|0;
          $456 = (($455) + 36|0);
          $457 = HEAP32[$456>>2]|0;
          __THREW__ = 0;
          $458 = (invoke_ii($457|0,($448|0))|0);
          $459 = __THREW__; __THREW__ = 0;
          $460 = $459&1;
          if ($460) {
           label = 22;
           break L4;
          }
          $461 = ($458|0)==(-1);
          if ($461) {
           HEAP32[$__b>>2] = 0;
           $463 = 0;
           break;
          } else {
           $$pre$i$i$i151 = HEAP32[$__b>>2]|0;
           $463 = $$pre$i$i$i151;
           break;
          }
         } else {
          $463 = $448;
         }
        }
       } while(0);
       $462 = ($463|0)==(0|0);
       $464 = ($465|0)==(0|0);
       do {
        if ($464) {
         $$pre$i2$i$i155250 = $$pre$i2$i$i155;
         label = 170;
        } else {
         $466 = (($465) + 12|0);
         $467 = HEAP32[$466>>2]|0;
         $468 = (($465) + 16|0);
         $469 = HEAP32[$468>>2]|0;
         $470 = ($467|0)==($469|0);
         if (!($470)) {
          if ($462) {
           $$pre$i2$i$i155249 = $$pre$i2$i$i155;$883 = $465;
           break;
          } else {
           $882 = $$pre$i2$i$i155;
           break L56;
          }
         }
         $471 = HEAP32[$465>>2]|0;
         $472 = (($471) + 36|0);
         $473 = HEAP32[$472>>2]|0;
         __THREW__ = 0;
         $474 = (invoke_ii($473|0,($465|0))|0);
         $475 = __THREW__; __THREW__ = 0;
         $476 = $475&1;
         if ($476) {
          label = 22;
          break L4;
         }
         $477 = ($474|0)==(-1);
         if ($477) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i155250 = 0;
          label = 170;
          break;
         } else {
          $478 = ($$pre$i2$i$i155|0)==(0|0);
          $tmp$i$i157 = $462 ^ $478;
          if ($tmp$i$i157) {
           $$pre$i2$i$i155249 = $$pre$i2$i$i155;$883 = $$pre$i2$i$i155;
           break;
          } else {
           $882 = $$pre$i2$i$i155;
           break L56;
          }
         }
        }
       } while(0);
       if ((label|0) == 170) {
        label = 0;
        if ($462) {
         $882 = $$pre$i2$i$i155250;
         break;
        } else {
         $$pre$i2$i$i155249 = $$pre$i2$i$i155250;$883 = 0;
        }
       }
       $479 = HEAP32[$__b>>2]|0;
       $480 = (($479) + 12|0);
       $481 = HEAP32[$480>>2]|0;
       $482 = (($479) + 16|0);
       $483 = HEAP32[$482>>2]|0;
       $484 = ($481|0)==($483|0);
       if ($484) {
        $485 = HEAP32[$479>>2]|0;
        $486 = (($485) + 36|0);
        $487 = HEAP32[$486>>2]|0;
        __THREW__ = 0;
        $488 = (invoke_ii($487|0,($479|0))|0);
        $489 = __THREW__; __THREW__ = 0;
        $490 = $489&1;
        if ($490) {
         label = 22;
         break L4;
        } else {
         $$0$i$i147 = $488;
        }
       } else {
        $491 = HEAP8[$481>>0]|0;
        $492 = $491&255;
        $$0$i$i147 = $492;
       }
       $493 = $$0$i$i147&255;
       $494 = HEAP8[$447>>0]|0;
       $495 = ($493<<24>>24)==($494<<24>>24);
       if (!($495)) {
        $882 = $$pre$i2$i$i155249;
        break;
       }
       $496 = HEAP32[$__b>>2]|0;
       $497 = (($496) + 12|0);
       $498 = HEAP32[$497>>2]|0;
       $499 = (($496) + 16|0);
       $500 = HEAP32[$499>>2]|0;
       $501 = ($498|0)==($500|0);
       if ($501) {
        $502 = HEAP32[$496>>2]|0;
        $503 = (($502) + 40|0);
        $504 = HEAP32[$503>>2]|0;
        __THREW__ = 0;
        (invoke_ii($504|0,($496|0))|0);
        $505 = __THREW__; __THREW__ = 0;
        $506 = $505&1;
        if ($506) {
         label = 22;
         break L4;
        }
       } else {
        $507 = (($498) + 1|0);
        HEAP32[$497>>2] = $507;
       }
       $508 = (($447) + 1|0);
       $$pre248 = HEAP8[$__sym>>0]|0;
       $$pre$i2$i$i155 = $$pre$i2$i$i155249;$437 = $$pre248;$447 = $508;$465 = $883;
      }
      if ($14) {
       $509 = HEAP8[$__sym>>0]|0;
       $510 = $509 & 1;
       $511 = ($510<<24>>24)==(0);
       if ($511) {
        $514 = $509&255;
        $515 = $514 >>> 1;
        $517 = $15;$518 = $515;
       } else {
        $512 = HEAP32[$16>>2]|0;
        $513 = HEAP32[$17>>2]|0;
        $517 = $512;$518 = $513;
       }
       $516 = (($517) + ($518)|0);
       $519 = ($447|0)==($516|0);
       if ($519) {
        $879 = $882;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
       } else {
        label = 185;
        break L4;
       }
      } else {
       $879 = $882;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
      }
      break;
     }
     case 1:  {
      $cond = ($__p$0232|0)==(3);
      if ($cond) {
       $864 = $876;$878 = $877;$__trailing_sign$0$lcssa = $__trailing_sign$0234;
       label = 280;
       break L4;
      }
      $78 = HEAP32[$__b>>2]|0;
      $79 = (($78) + 12|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 16|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ($80|0)==($82|0);
      if ($83) {
       $84 = HEAP32[$78>>2]|0;
       $85 = (($84) + 36|0);
       $86 = HEAP32[$85>>2]|0;
       __THREW__ = 0;
       $87 = (invoke_ii($86|0,($78|0))|0);
       $88 = __THREW__; __THREW__ = 0;
       $89 = $88&1;
       if ($89) {
        label = 24;
        break L4;
       } else {
        $$0$i$i33 = $87;
       }
      } else {
       $90 = HEAP8[$80>>0]|0;
       $91 = $90&255;
       $$0$i$i33 = $91;
      }
      $92 = $$0$i$i33&255;
      $isascii1$i = ($92<<24>>24)>(-1);
      if (!($isascii1$i)) {
       label = 40;
       break L4;
      }
      $sext201 = $$0$i$i33 << 24;
      $93 = $sext201 >> 24;
      $94 = HEAP32[$6>>2]|0;
      $95 = (($94) + ($93<<1)|0);
      $96 = HEAP16[$95>>1]|0;
      $97 = $96 & 8192;
      $98 = ($97<<16>>16)==(0);
      if ($98) {
       label = 40;
       break L4;
      }
      $99 = HEAP32[$__b>>2]|0;
      $100 = (($99) + 12|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = (($99) + 16|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ($101|0)==($103|0);
      if ($104) {
       $105 = HEAP32[$99>>2]|0;
       $106 = (($105) + 40|0);
       $107 = HEAP32[$106>>2]|0;
       __THREW__ = 0;
       $108 = (invoke_ii($107|0,($99|0))|0);
       $109 = __THREW__; __THREW__ = 0;
       $110 = $109&1;
       if ($110) {
        label = 24;
        break L4;
       } else {
        $$0$i$i36 = $108;
       }
      } else {
       $111 = (($101) + 1|0);
       HEAP32[$100>>2] = $111;
       $112 = HEAP8[$101>>0]|0;
       $113 = $112&255;
       $$0$i$i36 = $113;
      }
      $114 = $$0$i$i36&255;
      __THREW__ = 0;
      invoke_vii(416,($__spaces|0),($114|0));
      $115 = __THREW__; __THREW__ = 0;
      $116 = $115&1;
      if ($116) {
       label = 24;
       break L4;
      } else {
       label = 41;
      }
      break;
     }
     case 0:  {
      label = 41;
      break;
     }
     case 4:  {
      $56 = HEAP8[$__ts>>0]|0;
      $$pre$i2$i$i138 = $877;$539 = $877;$594 = $876;$__ng$0 = 0;
      L111: while(1) {
       $522 = HEAP32[$__b>>2]|0;
       $523 = ($522|0)==(0|0);
       do {
        if ($523) {
         $537 = 0;
        } else {
         $524 = (($522) + 12|0);
         $525 = HEAP32[$524>>2]|0;
         $526 = (($522) + 16|0);
         $527 = HEAP32[$526>>2]|0;
         $528 = ($525|0)==($527|0);
         if ($528) {
          $529 = HEAP32[$522>>2]|0;
          $530 = (($529) + 36|0);
          $531 = HEAP32[$530>>2]|0;
          __THREW__ = 0;
          $532 = (invoke_ii($531|0,($522|0))|0);
          $533 = __THREW__; __THREW__ = 0;
          $534 = $533&1;
          if ($534) {
           label = 20;
           break L4;
          }
          $535 = ($532|0)==(-1);
          if ($535) {
           HEAP32[$__b>>2] = 0;
           $537 = 0;
           break;
          } else {
           $$pre$i$i$i134 = HEAP32[$__b>>2]|0;
           $537 = $$pre$i$i$i134;
           break;
          }
         } else {
          $537 = $522;
         }
        }
       } while(0);
       $536 = ($537|0)==(0|0);
       $538 = ($539|0)==(0|0);
       do {
        if ($538) {
         $884 = $$pre$i2$i$i138;
         label = 198;
        } else {
         $540 = (($539) + 12|0);
         $541 = HEAP32[$540>>2]|0;
         $542 = (($539) + 16|0);
         $543 = HEAP32[$542>>2]|0;
         $544 = ($541|0)==($543|0);
         if (!($544)) {
          if ($536) {
           $885 = $$pre$i2$i$i138;$886 = $539;
           break;
          } else {
           $$pre$i2$i$i98 = $$pre$i2$i$i138;
           break L111;
          }
         }
         $545 = HEAP32[$539>>2]|0;
         $546 = (($545) + 36|0);
         $547 = HEAP32[$546>>2]|0;
         __THREW__ = 0;
         $548 = (invoke_ii($547|0,($539|0))|0);
         $549 = __THREW__; __THREW__ = 0;
         $550 = $549&1;
         if ($550) {
          label = 20;
          break L4;
         }
         $551 = ($548|0)==(-1);
         if ($551) {
          HEAP32[$__e>>2] = 0;
          $884 = 0;
          label = 198;
          break;
         } else {
          $552 = ($$pre$i2$i$i138|0)==(0|0);
          $tmp$i$i140 = $536 ^ $552;
          if ($tmp$i$i140) {
           $885 = $$pre$i2$i$i138;$886 = $$pre$i2$i$i138;
           break;
          } else {
           $$pre$i2$i$i98 = $$pre$i2$i$i138;
           break L111;
          }
         }
        }
       } while(0);
       if ((label|0) == 198) {
        label = 0;
        if ($536) {
         $$pre$i2$i$i98 = $884;
         break;
        } else {
         $885 = $884;$886 = 0;
        }
       }
       $553 = HEAP32[$__b>>2]|0;
       $554 = (($553) + 12|0);
       $555 = HEAP32[$554>>2]|0;
       $556 = (($553) + 16|0);
       $557 = HEAP32[$556>>2]|0;
       $558 = ($555|0)==($557|0);
       if ($558) {
        $559 = HEAP32[$553>>2]|0;
        $560 = (($559) + 36|0);
        $561 = HEAP32[$560>>2]|0;
        __THREW__ = 0;
        $562 = (invoke_ii($561|0,($553|0))|0);
        $563 = __THREW__; __THREW__ = 0;
        $564 = $563&1;
        if ($564) {
         label = 20;
         break L4;
        } else {
         $$0$i$i130 = $562;
        }
       } else {
        $565 = HEAP8[$555>>0]|0;
        $566 = $565&255;
        $$0$i$i130 = $566;
       }
       $567 = $$0$i$i130&255;
       $isascii1$i128 = ($567<<24>>24)>(-1);
       if ($isascii1$i128) {
        $sext199 = $$0$i$i130 << 24;
        $568 = $sext199 >> 24;
        $569 = HEAP32[$6>>2]|0;
        $570 = (($569) + ($568<<1)|0);
        $571 = HEAP16[$570>>1]|0;
        $572 = $571 & 2048;
        $573 = ($572<<16>>16)==(0);
        if ($573) {
         label = 209;
        } else {
         $574 = HEAP32[$__wn>>2]|0;
         $575 = HEAP32[$0>>2]|0;
         $576 = ($574|0)==($575|0);
         if ($576) {
          __THREW__ = 0;
          invoke_viii(502,($__wb|0),($__wn|0),($0|0));
          $577 = __THREW__; __THREW__ = 0;
          $578 = $577&1;
          if ($578) {
           label = 20;
           break L4;
          }
          $$pre257 = HEAP32[$__wn>>2]|0;
          $580 = $$pre257;
         } else {
          $580 = $574;
         }
         $579 = (($580) + 1|0);
         HEAP32[$__wn>>2] = $579;
         HEAP8[$580>>0] = $567;
         $581 = (($__ng$0) + 1)|0;
         $887 = $594;$__ng$1 = $581;
        }
       } else {
        label = 209;
       }
       if ((label|0) == 209) {
        label = 0;
        $582 = HEAP8[$__grp>>0]|0;
        $583 = $582 & 1;
        $584 = ($583<<24>>24)==(0);
        if ($584) {
         $586 = $582&255;
         $587 = $586 >>> 1;
         $589 = $587;
        } else {
         $585 = HEAP32[$22>>2]|0;
         $589 = $585;
        }
        $588 = ($589|0)!=(0);
        $590 = ($__ng$0|0)!=(0);
        $or$cond6 = $588 & $590;
        $591 = ($567<<24>>24)==($56<<24>>24);
        $or$cond12 = $or$cond6 & $591;
        if (!($or$cond12)) {
         $$pre$i2$i$i98 = $885;
         break;
        }
        $592 = HEAP32[$__ge>>2]|0;
        $593 = ($594|0)==($592|0);
        if ($593) {
         __THREW__ = 0;
         invoke_viii(503,($__gb|0),($__gn|0),($__ge|0));
         $595 = __THREW__; __THREW__ = 0;
         $596 = $595&1;
         if ($596) {
          label = 20;
          break L4;
         }
         $$pre259 = HEAP32[$__gn>>2]|0;
         $598 = $$pre259;
        } else {
         $598 = $594;
        }
        $597 = (($598) + 4|0);
        HEAP32[$__gn>>2] = $597;
        HEAP32[$598>>2] = $__ng$0;
        $887 = $597;$__ng$1 = 0;
       }
       $599 = HEAP32[$__b>>2]|0;
       $600 = (($599) + 12|0);
       $601 = HEAP32[$600>>2]|0;
       $602 = (($599) + 16|0);
       $603 = HEAP32[$602>>2]|0;
       $604 = ($601|0)==($603|0);
       if ($604) {
        $605 = HEAP32[$599>>2]|0;
        $606 = (($605) + 40|0);
        $607 = HEAP32[$606>>2]|0;
        __THREW__ = 0;
        (invoke_ii($607|0,($599|0))|0);
        $608 = __THREW__; __THREW__ = 0;
        $609 = $608&1;
        if ($609) {
         label = 20;
         break L4;
        } else {
         $$pre$i2$i$i138 = $885;$539 = $886;$594 = $887;$__ng$0 = $__ng$1;
         continue;
        }
       } else {
        $610 = (($601) + 1|0);
        HEAP32[$600>>2] = $610;
        $$pre$i2$i$i138 = $885;$539 = $886;$594 = $887;$__ng$0 = $__ng$1;
        continue;
       }
      }
      $611 = HEAP32[$__gb>>2]|0;
      $612 = ($611|0)!=($594|0);
      $613 = ($__ng$0|0)!=(0);
      $or$cond8 = $612 & $613;
      if ($or$cond8) {
       $614 = HEAP32[$__ge>>2]|0;
       $615 = ($594|0)==($614|0);
       if ($615) {
        __THREW__ = 0;
        invoke_viii(503,($__gb|0),($__gn|0),($__ge|0));
        $616 = __THREW__; __THREW__ = 0;
        $617 = $616&1;
        if ($617) {
         label = 24;
         break L4;
        }
        $$pre253 = HEAP32[$__gn>>2]|0;
        $619 = $$pre253;
       } else {
        $619 = $594;
       }
       $618 = (($619) + 4|0);
       HEAP32[$__gn>>2] = $618;
       HEAP32[$619>>2] = $__ng$0;
       $888 = $618;
      } else {
       $888 = $594;
      }
      $620 = HEAP32[$__fd>>2]|0;
      $621 = ($620|0)>(0);
      if ($621) {
       $622 = HEAP32[$__b>>2]|0;
       $623 = ($622|0)==(0|0);
       do {
        if ($623) {
         $637 = 0;
        } else {
         $624 = (($622) + 12|0);
         $625 = HEAP32[$624>>2]|0;
         $626 = (($622) + 16|0);
         $627 = HEAP32[$626>>2]|0;
         $628 = ($625|0)==($627|0);
         if ($628) {
          $629 = HEAP32[$622>>2]|0;
          $630 = (($629) + 36|0);
          $631 = HEAP32[$630>>2]|0;
          __THREW__ = 0;
          $632 = (invoke_ii($631|0,($622|0))|0);
          $633 = __THREW__; __THREW__ = 0;
          $634 = $633&1;
          if ($634) {
           label = 24;
           break L4;
          }
          $635 = ($632|0)==(-1);
          if ($635) {
           HEAP32[$__b>>2] = 0;
           $637 = 0;
           break;
          } else {
           $$pre$i$i$i94 = HEAP32[$__b>>2]|0;
           $637 = $$pre$i$i$i94;
           break;
          }
         } else {
          $637 = $622;
         }
        }
       } while(0);
       $636 = ($637|0)==(0|0);
       $638 = ($$pre$i2$i$i98|0)==(0|0);
       do {
        if ($638) {
         label = 238;
        } else {
         $639 = (($$pre$i2$i$i98) + 12|0);
         $640 = HEAP32[$639>>2]|0;
         $641 = (($$pre$i2$i$i98) + 16|0);
         $642 = HEAP32[$641>>2]|0;
         $643 = ($640|0)==($642|0);
         if (!($643)) {
          if ($636) {
           $890 = $$pre$i2$i$i98;
           break;
          } else {
           label = 244;
           break L4;
          }
         }
         $644 = HEAP32[$$pre$i2$i$i98>>2]|0;
         $645 = (($644) + 36|0);
         $646 = HEAP32[$645>>2]|0;
         __THREW__ = 0;
         $647 = (invoke_ii($646|0,($$pre$i2$i$i98|0))|0);
         $648 = __THREW__; __THREW__ = 0;
         $649 = $648&1;
         if ($649) {
          label = 24;
          break L4;
         }
         $650 = ($647|0)==(-1);
         if ($650) {
          HEAP32[$__e>>2] = 0;
          label = 238;
          break;
         } else {
          $651 = ($$pre$i2$i$i98|0)==(0|0);
          $tmp$i$i100 = $636 ^ $651;
          if ($tmp$i$i100) {
           $890 = $$pre$i2$i$i98;
           break;
          } else {
           label = 244;
           break L4;
          }
         }
        }
       } while(0);
       if ((label|0) == 238) {
        label = 0;
        if ($636) {
         label = 244;
         break L4;
        } else {
         $890 = 0;
        }
       }
       $652 = HEAP32[$__b>>2]|0;
       $653 = (($652) + 12|0);
       $654 = HEAP32[$653>>2]|0;
       $655 = (($652) + 16|0);
       $656 = HEAP32[$655>>2]|0;
       $657 = ($654|0)==($656|0);
       if ($657) {
        $658 = HEAP32[$652>>2]|0;
        $659 = (($658) + 36|0);
        $660 = HEAP32[$659>>2]|0;
        __THREW__ = 0;
        $661 = (invoke_ii($660|0,($652|0))|0);
        $662 = __THREW__; __THREW__ = 0;
        $663 = $662&1;
        if ($663) {
         label = 24;
         break L4;
        } else {
         $$0$i$i87 = $661;
        }
       } else {
        $664 = HEAP8[$654>>0]|0;
        $665 = $664&255;
        $$0$i$i87 = $665;
       }
       $666 = $$0$i$i87&255;
       $667 = HEAP8[$__dp>>0]|0;
       $668 = ($666<<24>>24)==($667<<24>>24);
       if (!($668)) {
        label = 244;
        break L4;
       }
       $671 = HEAP32[$__b>>2]|0;
       $672 = (($671) + 12|0);
       $673 = HEAP32[$672>>2]|0;
       $674 = (($671) + 16|0);
       $675 = HEAP32[$674>>2]|0;
       $676 = ($673|0)==($675|0);
       if ($676) {
        $677 = HEAP32[$671>>2]|0;
        $678 = (($677) + 40|0);
        $679 = HEAP32[$678>>2]|0;
        __THREW__ = 0;
        (invoke_ii($679|0,($671|0))|0);
        $680 = __THREW__; __THREW__ = 0;
        $681 = $680&1;
        if ($681) {
         label = 24;
         break L4;
        } else {
         $$pre$i2$i$i74 = $890;$700 = $890;$760 = $620;
        }
       } else {
        $682 = (($673) + 1|0);
        HEAP32[$672>>2] = $682;
        $$pre$i2$i$i74 = $890;$700 = $890;$760 = $620;
       }
       while(1) {
        $683 = HEAP32[$__b>>2]|0;
        $684 = ($683|0)==(0|0);
        do {
         if ($684) {
          $698 = 0;
         } else {
          $685 = (($683) + 12|0);
          $686 = HEAP32[$685>>2]|0;
          $687 = (($683) + 16|0);
          $688 = HEAP32[$687>>2]|0;
          $689 = ($686|0)==($688|0);
          if ($689) {
           $690 = HEAP32[$683>>2]|0;
           $691 = (($690) + 36|0);
           $692 = HEAP32[$691>>2]|0;
           __THREW__ = 0;
           $693 = (invoke_ii($692|0,($683|0))|0);
           $694 = __THREW__; __THREW__ = 0;
           $695 = $694&1;
           if ($695) {
            label = 21;
            break L4;
           }
           $696 = ($693|0)==(-1);
           if ($696) {
            HEAP32[$__b>>2] = 0;
            $698 = 0;
            break;
           } else {
            $$pre$i$i$i70 = HEAP32[$__b>>2]|0;
            $698 = $$pre$i$i$i70;
            break;
           }
          } else {
           $698 = $683;
          }
         }
        } while(0);
        $697 = ($698|0)==(0|0);
        $699 = ($700|0)==(0|0);
        do {
         if ($699) {
          $$pre$i2$i$i74255$ph = $$pre$i2$i$i74;
          label = 260;
         } else {
          $701 = (($700) + 12|0);
          $702 = HEAP32[$701>>2]|0;
          $703 = (($700) + 16|0);
          $704 = HEAP32[$703>>2]|0;
          $705 = ($702|0)==($704|0);
          if (!($705)) {
           if ($697) {
            $$pre$i2$i$i74255266 = $$pre$i2$i$i74;$891 = $700;
            break;
           } else {
            label = 267;
            break L4;
           }
          }
          $706 = HEAP32[$700>>2]|0;
          $707 = (($706) + 36|0);
          $708 = HEAP32[$707>>2]|0;
          __THREW__ = 0;
          $709 = (invoke_ii($708|0,($700|0))|0);
          $710 = __THREW__; __THREW__ = 0;
          $711 = $710&1;
          if ($711) {
           label = 21;
           break L4;
          }
          $712 = ($709|0)==(-1);
          if ($712) {
           HEAP32[$__e>>2] = 0;
           $$pre$i2$i$i74255$ph = 0;
           label = 260;
           break;
          } else {
           $713 = ($$pre$i2$i$i74|0)==(0|0);
           $tmp$i$i76 = $697 ^ $713;
           if ($tmp$i$i76) {
            $$pre$i2$i$i74255266 = $$pre$i2$i$i74;$891 = $$pre$i2$i$i74;
            break;
           } else {
            label = 267;
            break L4;
           }
          }
         }
        } while(0);
        if ((label|0) == 260) {
         label = 0;
         if ($697) {
          label = 267;
          break L4;
         } else {
          $$pre$i2$i$i74255266 = $$pre$i2$i$i74255$ph;$891 = 0;
         }
        }
        $714 = HEAP32[$__b>>2]|0;
        $715 = (($714) + 12|0);
        $716 = HEAP32[$715>>2]|0;
        $717 = (($714) + 16|0);
        $718 = HEAP32[$717>>2]|0;
        $719 = ($716|0)==($718|0);
        if ($719) {
         $720 = HEAP32[$714>>2]|0;
         $721 = (($720) + 36|0);
         $722 = HEAP32[$721>>2]|0;
         __THREW__ = 0;
         $723 = (invoke_ii($722|0,($714|0))|0);
         $724 = __THREW__; __THREW__ = 0;
         $725 = $724&1;
         if ($725) {
          label = 21;
          break L4;
         } else {
          $$0$i$i65 = $723;
         }
        } else {
         $726 = HEAP8[$716>>0]|0;
         $727 = $726&255;
         $$0$i$i65 = $727;
        }
        $728 = $$0$i$i65&255;
        $isascii1$i63 = ($728<<24>>24)>(-1);
        if (!($isascii1$i63)) {
         label = 267;
         break L4;
        }
        $sext = $$0$i$i65 << 24;
        $729 = $sext >> 24;
        $730 = HEAP32[$6>>2]|0;
        $731 = (($730) + ($729<<1)|0);
        $732 = HEAP16[$731>>1]|0;
        $733 = $732 & 2048;
        $734 = ($733<<16>>16)==(0);
        if ($734) {
         label = 267;
         break L4;
        }
        $737 = HEAP32[$__wn>>2]|0;
        $738 = HEAP32[$0>>2]|0;
        $739 = ($737|0)==($738|0);
        if ($739) {
         __THREW__ = 0;
         invoke_viii(502,($__wb|0),($__wn|0),($0|0));
         $740 = __THREW__; __THREW__ = 0;
         $741 = $740&1;
         if ($741) {
          label = 21;
          break L4;
         }
        }
        $742 = HEAP32[$__b>>2]|0;
        $743 = (($742) + 12|0);
        $744 = HEAP32[$743>>2]|0;
        $745 = (($742) + 16|0);
        $746 = HEAP32[$745>>2]|0;
        $747 = ($744|0)==($746|0);
        if ($747) {
         $748 = HEAP32[$742>>2]|0;
         $749 = (($748) + 36|0);
         $750 = HEAP32[$749>>2]|0;
         __THREW__ = 0;
         $751 = (invoke_ii($750|0,($742|0))|0);
         $752 = __THREW__; __THREW__ = 0;
         $753 = $752&1;
         if ($753) {
          label = 21;
          break L4;
         } else {
          $$0$i$i58 = $751;
         }
        } else {
         $754 = HEAP8[$744>>0]|0;
         $755 = $754&255;
         $$0$i$i58 = $755;
        }
        $756 = $$0$i$i58&255;
        $757 = HEAP32[$__wn>>2]|0;
        $758 = (($757) + 1|0);
        HEAP32[$__wn>>2] = $758;
        HEAP8[$757>>0] = $756;
        $759 = (($760) + -1)|0;
        HEAP32[$__fd>>2] = $759;
        $761 = HEAP32[$__b>>2]|0;
        $762 = (($761) + 12|0);
        $763 = HEAP32[$762>>2]|0;
        $764 = (($761) + 16|0);
        $765 = HEAP32[$764>>2]|0;
        $766 = ($763|0)==($765|0);
        if ($766) {
         $767 = HEAP32[$761>>2]|0;
         $768 = (($767) + 40|0);
         $769 = HEAP32[$768>>2]|0;
         __THREW__ = 0;
         (invoke_ii($769|0,($761|0))|0);
         $770 = __THREW__; __THREW__ = 0;
         $771 = $770&1;
         if ($771) {
          label = 21;
          break L4;
         }
        } else {
         $773 = (($763) + 1|0);
         HEAP32[$762>>2] = $773;
        }
        $772 = ($759|0)>(0);
        if ($772) {
         $$pre$i2$i$i74 = $$pre$i2$i$i74255266;$700 = $891;$760 = $759;
        } else {
         $889 = $$pre$i2$i$i74255266;
         break;
        }
       }
      } else {
       $889 = $$pre$i2$i$i98;
      }
      $774 = HEAP32[$__wn>>2]|0;
      $775 = HEAP32[$__wb>>2]|0;
      $776 = ($774|0)==($775|0);
      if ($776) {
       label = 278;
       break L4;
      } else {
       $879 = $889;$880 = $888;$__trailing_sign$1 = $__trailing_sign$0234;
      }
      break;
     }
     case 3:  {
      $190 = HEAP8[$__psn>>0]|0;
      $191 = $190 & 1;
      $192 = ($191<<24>>24)==(0);
      if ($192) {
       $194 = $190&255;
       $195 = $194 >>> 1;
       $205 = $195;
      } else {
       $193 = HEAP32[$11>>2]|0;
       $205 = $193;
      }
      $196 = HEAP8[$__nsn>>0]|0;
      $197 = $196 & 1;
      $198 = ($197<<24>>24)==(0);
      if ($198) {
       $200 = $196&255;
       $201 = $200 >>> 1;
       $203 = $201;
      } else {
       $199 = HEAP32[$8>>2]|0;
       $203 = $199;
      }
      $202 = (0 - ($203))|0;
      $204 = ($205|0)==($202|0);
      if ($204) {
       $879 = $877;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
      } else {
       if ($192) {
        $207 = $190&255;
        $208 = $207 >>> 1;
        $210 = $208;
       } else {
        $206 = HEAP32[$11>>2]|0;
        $210 = $206;
       }
       $209 = ($210|0)==(0);
       if (!($209)) {
        if ($198) {
         $212 = $196&255;
         $213 = $212 >>> 1;
         $215 = $213;
        } else {
         $211 = HEAP32[$8>>2]|0;
         $215 = $211;
        }
        $214 = ($215|0)==(0);
        if (!($214)) {
         $297 = HEAP32[$__b>>2]|0;
         $298 = (($297) + 12|0);
         $299 = HEAP32[$298>>2]|0;
         $300 = (($297) + 16|0);
         $301 = HEAP32[$300>>2]|0;
         $302 = ($299|0)==($301|0);
         if ($302) {
          $303 = HEAP32[$297>>2]|0;
          $304 = (($303) + 36|0);
          $305 = HEAP32[$304>>2]|0;
          __THREW__ = 0;
          $306 = (invoke_ii($305|0,($297|0))|0);
          $307 = __THREW__; __THREW__ = 0;
          $308 = $307&1;
          if ($308) {
           label = 24;
           break L4;
          }
          $$pre247 = HEAP8[$__psn>>0]|0;
          $$0$i$i111 = $306;$313 = $$pre247;
         } else {
          $309 = HEAP8[$299>>0]|0;
          $310 = $309&255;
          $$0$i$i111 = $310;$313 = $190;
         }
         $311 = $$0$i$i111&255;
         $312 = $313 & 1;
         $314 = ($312<<24>>24)==(0);
         $315 = HEAP32[$12>>2]|0;
         $$272 = $314 ? $10 : $315;
         $316 = HEAP8[$$272>>0]|0;
         $317 = ($311<<24>>24)==($316<<24>>24);
         $318 = HEAP32[$__b>>2]|0;
         $319 = (($318) + 12|0);
         $320 = HEAP32[$319>>2]|0;
         $321 = (($318) + 16|0);
         $322 = HEAP32[$321>>2]|0;
         $323 = ($320|0)==($322|0);
         if ($317) {
          if ($323) {
           $324 = HEAP32[$318>>2]|0;
           $325 = (($324) + 40|0);
           $326 = HEAP32[$325>>2]|0;
           __THREW__ = 0;
           (invoke_ii($326|0,($318|0))|0);
           $327 = __THREW__; __THREW__ = 0;
           $328 = $327&1;
           if ($328) {
            label = 24;
            break L4;
           }
          } else {
           $329 = (($320) + 1|0);
           HEAP32[$319>>2] = $329;
          }
          $330 = HEAP8[$__psn>>0]|0;
          $331 = $330 & 1;
          $332 = ($331<<24>>24)==(0);
          if ($332) {
           $334 = $330&255;
           $335 = $334 >>> 1;
           $337 = $335;
          } else {
           $333 = HEAP32[$11>>2]|0;
           $337 = $333;
          }
          $336 = ($337>>>0)>(1);
          $__psn$__trailing_sign$09 = $336 ? $__psn : $__trailing_sign$0234;
          $879 = $877;$880 = $876;$__trailing_sign$1 = $__psn$__trailing_sign$09;
          break L26;
         }
         if ($323) {
          $338 = HEAP32[$318>>2]|0;
          $339 = (($338) + 36|0);
          $340 = HEAP32[$339>>2]|0;
          __THREW__ = 0;
          $341 = (invoke_ii($340|0,($318|0))|0);
          $342 = __THREW__; __THREW__ = 0;
          $343 = $342&1;
          if ($343) {
           label = 24;
           break L4;
          } else {
           $$0$i$i120 = $341;
          }
         } else {
          $344 = HEAP8[$320>>0]|0;
          $345 = $344&255;
          $$0$i$i120 = $345;
         }
         $346 = $$0$i$i120&255;
         $347 = HEAP8[$__nsn>>0]|0;
         $348 = $347 & 1;
         $349 = ($348<<24>>24)==(0);
         $350 = HEAP32[$9>>2]|0;
         $$273 = $349 ? $7 : $350;
         $351 = HEAP8[$$273>>0]|0;
         $352 = ($346<<24>>24)==($351<<24>>24);
         if (!($352)) {
          label = 132;
          break L4;
         }
         $353 = HEAP32[$__b>>2]|0;
         $354 = (($353) + 12|0);
         $355 = HEAP32[$354>>2]|0;
         $356 = (($353) + 16|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($355|0)==($357|0);
         if ($358) {
          $359 = HEAP32[$353>>2]|0;
          $360 = (($359) + 40|0);
          $361 = HEAP32[$360>>2]|0;
          __THREW__ = 0;
          (invoke_ii($361|0,($353|0))|0);
          $362 = __THREW__; __THREW__ = 0;
          $363 = $362&1;
          if ($363) {
           label = 24;
           break L4;
          }
         } else {
          $364 = (($355) + 1|0);
          HEAP32[$354>>2] = $364;
         }
         HEAP8[$__neg>>0] = 1;
         $365 = HEAP8[$__nsn>>0]|0;
         $366 = $365 & 1;
         $367 = ($366<<24>>24)==(0);
         if ($367) {
          $369 = $365&255;
          $370 = $369 >>> 1;
          $372 = $370;
         } else {
          $368 = HEAP32[$8>>2]|0;
          $372 = $368;
         }
         $371 = ($372>>>0)>(1);
         $__nsn$__trailing_sign$010 = $371 ? $__nsn : $__trailing_sign$0234;
         $879 = $877;$880 = $876;$__trailing_sign$1 = $__nsn$__trailing_sign$010;
         break L26;
        }
       }
       if ($192) {
        $217 = $190&255;
        $218 = $217 >>> 1;
        $220 = $218;
       } else {
        $216 = HEAP32[$11>>2]|0;
        $220 = $216;
       }
       $219 = ($220|0)==(0);
       $221 = HEAP32[$__b>>2]|0;
       $222 = (($221) + 12|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = (($221) + 16|0);
       $225 = HEAP32[$224>>2]|0;
       $226 = ($223|0)==($225|0);
       if ($219) {
        if ($226) {
         $262 = HEAP32[$221>>2]|0;
         $263 = (($262) + 36|0);
         $264 = HEAP32[$263>>2]|0;
         __THREW__ = 0;
         $265 = (invoke_ii($264|0,($221|0))|0);
         $266 = __THREW__; __THREW__ = 0;
         $267 = $266&1;
         if ($267) {
          label = 24;
          break L4;
         }
         $$pre = HEAP8[$__nsn>>0]|0;
         $$0$i$i104 = $265;$272 = $$pre;
        } else {
         $268 = HEAP8[$223>>0]|0;
         $269 = $268&255;
         $$0$i$i104 = $269;$272 = $196;
        }
        $270 = $$0$i$i104&255;
        $271 = $272 & 1;
        $273 = ($271<<24>>24)==(0);
        $274 = HEAP32[$9>>2]|0;
        $$271 = $273 ? $7 : $274;
        $275 = HEAP8[$$271>>0]|0;
        $276 = ($270<<24>>24)==($275<<24>>24);
        if (!($276)) {
         $879 = $877;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
         break L26;
        }
        $277 = HEAP32[$__b>>2]|0;
        $278 = (($277) + 12|0);
        $279 = HEAP32[$278>>2]|0;
        $280 = (($277) + 16|0);
        $281 = HEAP32[$280>>2]|0;
        $282 = ($279|0)==($281|0);
        if ($282) {
         $283 = HEAP32[$277>>2]|0;
         $284 = (($283) + 40|0);
         $285 = HEAP32[$284>>2]|0;
         __THREW__ = 0;
         (invoke_ii($285|0,($277|0))|0);
         $286 = __THREW__; __THREW__ = 0;
         $287 = $286&1;
         if ($287) {
          label = 24;
          break L4;
         }
        } else {
         $288 = (($279) + 1|0);
         HEAP32[$278>>2] = $288;
        }
        HEAP8[$__neg>>0] = 1;
        $289 = HEAP8[$__nsn>>0]|0;
        $290 = $289 & 1;
        $291 = ($290<<24>>24)==(0);
        if ($291) {
         $293 = $289&255;
         $294 = $293 >>> 1;
         $296 = $294;
        } else {
         $292 = HEAP32[$8>>2]|0;
         $296 = $292;
        }
        $295 = ($296>>>0)>(1);
        $__nsn$__trailing_sign$0 = $295 ? $__nsn : $__trailing_sign$0234;
        $879 = $877;$880 = $876;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L26;
       }
       if ($226) {
        $227 = HEAP32[$221>>2]|0;
        $228 = (($227) + 36|0);
        $229 = HEAP32[$228>>2]|0;
        __THREW__ = 0;
        $230 = (invoke_ii($229|0,($221|0))|0);
        $231 = __THREW__; __THREW__ = 0;
        $232 = $231&1;
        if ($232) {
         label = 24;
         break L4;
        }
        $$pre245 = HEAP8[$__psn>>0]|0;
        $$0$i$i84 = $230;$237 = $$pre245;
       } else {
        $233 = HEAP8[$223>>0]|0;
        $234 = $233&255;
        $$0$i$i84 = $234;$237 = $190;
       }
       $235 = $$0$i$i84&255;
       $236 = $237 & 1;
       $238 = ($236<<24>>24)==(0);
       $239 = HEAP32[$12>>2]|0;
       $$ = $238 ? $10 : $239;
       $240 = HEAP8[$$>>0]|0;
       $241 = ($235<<24>>24)==($240<<24>>24);
       if (!($241)) {
        HEAP8[$__neg>>0] = 1;
        $879 = $877;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
        break L26;
       }
       $242 = HEAP32[$__b>>2]|0;
       $243 = (($242) + 12|0);
       $244 = HEAP32[$243>>2]|0;
       $245 = (($242) + 16|0);
       $246 = HEAP32[$245>>2]|0;
       $247 = ($244|0)==($246|0);
       if ($247) {
        $248 = HEAP32[$242>>2]|0;
        $249 = (($248) + 40|0);
        $250 = HEAP32[$249>>2]|0;
        __THREW__ = 0;
        (invoke_ii($250|0,($242|0))|0);
        $251 = __THREW__; __THREW__ = 0;
        $252 = $251&1;
        if ($252) {
         label = 24;
         break L4;
        }
       } else {
        $253 = (($244) + 1|0);
        HEAP32[$243>>2] = $253;
       }
       $254 = HEAP8[$__psn>>0]|0;
       $255 = $254 & 1;
       $256 = ($255<<24>>24)==(0);
       if ($256) {
        $258 = $254&255;
        $259 = $258 >>> 1;
        $261 = $259;
       } else {
        $257 = HEAP32[$11>>2]|0;
        $261 = $257;
       }
       $260 = ($261>>>0)>(1);
       $__psn$__trailing_sign$0 = $260 ? $__psn : $__trailing_sign$0234;
       $879 = $877;$880 = $876;$__trailing_sign$1 = $__psn$__trailing_sign$0;
      }
      break;
     }
     default: {
      $879 = $877;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
     }
     }
    } while(0);
    L325: do {
     if ((label|0) == 41) {
      label = 0;
      $119 = ($__p$0232|0)==(3);
      if ($119) {
       $864 = $876;$878 = $877;$__trailing_sign$0$lcssa = $__trailing_sign$0234;
       label = 280;
       break L4;
      } else {
       $$pre$i2$i$i43 = $877;$137 = $877;
      }
      while(1) {
       $120 = HEAP32[$__b>>2]|0;
       $121 = ($120|0)==(0|0);
       do {
        if ($121) {
         $135 = 0;
        } else {
         $122 = (($120) + 12|0);
         $123 = HEAP32[$122>>2]|0;
         $124 = (($120) + 16|0);
         $125 = HEAP32[$124>>2]|0;
         $126 = ($123|0)==($125|0);
         if ($126) {
          $127 = HEAP32[$120>>2]|0;
          $128 = (($127) + 36|0);
          $129 = HEAP32[$128>>2]|0;
          __THREW__ = 0;
          $130 = (invoke_ii($129|0,($120|0))|0);
          $131 = __THREW__; __THREW__ = 0;
          $132 = $131&1;
          if ($132) {
           label = 23;
           break L4;
          }
          $133 = ($130|0)==(-1);
          if ($133) {
           HEAP32[$__b>>2] = 0;
           $135 = 0;
           break;
          } else {
           $$pre$i$i$i39 = HEAP32[$__b>>2]|0;
           $135 = $$pre$i$i$i39;
           break;
          }
         } else {
          $135 = $120;
         }
        }
       } while(0);
       $134 = ($135|0)==(0|0);
       $136 = ($137|0)==(0|0);
       do {
        if ($136) {
         $$pre$i2$i$i43240 = $$pre$i2$i$i43;
         label = 54;
        } else {
         $138 = (($137) + 12|0);
         $139 = HEAP32[$138>>2]|0;
         $140 = (($137) + 16|0);
         $141 = HEAP32[$140>>2]|0;
         $142 = ($139|0)==($141|0);
         if (!($142)) {
          if ($134) {
           $$pre$i2$i$i43242 = $$pre$i2$i$i43;$881 = $137;
           break;
          } else {
           $879 = $$pre$i2$i$i43;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
           break L325;
          }
         }
         $143 = HEAP32[$137>>2]|0;
         $144 = (($143) + 36|0);
         $145 = HEAP32[$144>>2]|0;
         __THREW__ = 0;
         $146 = (invoke_ii($145|0,($137|0))|0);
         $147 = __THREW__; __THREW__ = 0;
         $148 = $147&1;
         if ($148) {
          label = 23;
          break L4;
         }
         $149 = ($146|0)==(-1);
         if ($149) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i43240 = 0;
          label = 54;
          break;
         } else {
          $150 = ($$pre$i2$i$i43|0)==(0|0);
          $tmp$i$i45 = $134 ^ $150;
          if ($tmp$i$i45) {
           $$pre$i2$i$i43242 = $$pre$i2$i$i43;$881 = $$pre$i2$i$i43;
           break;
          } else {
           $879 = $$pre$i2$i$i43;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
           break L325;
          }
         }
        }
       } while(0);
       if ((label|0) == 54) {
        label = 0;
        if ($134) {
         $879 = $$pre$i2$i$i43240;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
         break L325;
        } else {
         $$pre$i2$i$i43242 = $$pre$i2$i$i43240;$881 = 0;
        }
       }
       $151 = HEAP32[$__b>>2]|0;
       $152 = (($151) + 12|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = (($151) + 16|0);
       $155 = HEAP32[$154>>2]|0;
       $156 = ($153|0)==($155|0);
       if ($156) {
        $157 = HEAP32[$151>>2]|0;
        $158 = (($157) + 36|0);
        $159 = HEAP32[$158>>2]|0;
        __THREW__ = 0;
        $160 = (invoke_ii($159|0,($151|0))|0);
        $161 = __THREW__; __THREW__ = 0;
        $162 = $161&1;
        if ($162) {
         label = 23;
         break L4;
        } else {
         $$0$i$i49 = $160;
        }
       } else {
        $163 = HEAP8[$153>>0]|0;
        $164 = $163&255;
        $$0$i$i49 = $164;
       }
       $165 = $$0$i$i49&255;
       $isascii1$i52 = ($165<<24>>24)>(-1);
       if (!($isascii1$i52)) {
        $879 = $$pre$i2$i$i43242;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
        break L325;
       }
       $sext200 = $$0$i$i49 << 24;
       $166 = $sext200 >> 24;
       $167 = HEAP32[$6>>2]|0;
       $168 = (($167) + ($166<<1)|0);
       $169 = HEAP16[$168>>1]|0;
       $170 = $169 & 8192;
       $171 = ($170<<16>>16)==(0);
       if ($171) {
        $879 = $$pre$i2$i$i43242;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
        break L325;
       }
       $172 = HEAP32[$__b>>2]|0;
       $173 = (($172) + 12|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = (($172) + 16|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($174|0)==($176|0);
       if ($177) {
        $178 = HEAP32[$172>>2]|0;
        $179 = (($178) + 40|0);
        $180 = HEAP32[$179>>2]|0;
        __THREW__ = 0;
        $181 = (invoke_ii($180|0,($172|0))|0);
        $182 = __THREW__; __THREW__ = 0;
        $183 = $182&1;
        if ($183) {
         label = 23;
         break L4;
        } else {
         $$0$i$i55 = $181;
        }
       } else {
        $184 = (($174) + 1|0);
        HEAP32[$173>>2] = $184;
        $185 = HEAP8[$174>>0]|0;
        $186 = $185&255;
        $$0$i$i55 = $186;
       }
       $187 = $$0$i$i55&255;
       __THREW__ = 0;
       invoke_vii(416,($__spaces|0),($187|0));
       $188 = __THREW__; __THREW__ = 0;
       $189 = $188&1;
       if ($189) {
        label = 23;
        break L4;
       } else {
        $$pre$i2$i$i43 = $$pre$i2$i$i43242;$137 = $881;
       }
      }
     }
    } while(0);
    $779 = (($__p$0232) + 1)|0;
    $780 = ($779>>>0)<(4);
    if ($780) {
     $876 = $880;$__p$0232 = $779;$__trailing_sign$0234 = $__trailing_sign$1;
    } else {
     $864 = $880;$878 = $879;$__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 280;
     break;
    }
   }
   L360:    switch (label|0) {
    case 20: {
     $59 = ___cxa_find_matching_catch()|0;
     $60 = tempRet0;
     $lpad$phi$index = $59;$lpad$phi$index7 = $60;
     break L1;
     break;
    }
    case 21: {
     $61 = ___cxa_find_matching_catch()|0;
     $62 = tempRet0;
     $lpad$phi$index = $61;$lpad$phi$index7 = $62;
     break L1;
     break;
    }
    case 22: {
     $63 = ___cxa_find_matching_catch()|0;
     $64 = tempRet0;
     $lpad$phi$index = $63;$lpad$phi$index7 = $64;
     break L1;
     break;
    }
    case 23: {
     $65 = ___cxa_find_matching_catch()|0;
     $66 = tempRet0;
     $lpad$phi$index = $65;$lpad$phi$index7 = $66;
     break L1;
     break;
    }
    case 24: {
     $67 = ___cxa_find_matching_catch()|0;
     $68 = tempRet0;
     $lpad$phi$index = $67;$lpad$phi$index7 = $68;
     break L1;
     break;
    }
    case 40: {
     $117 = HEAP32[$__err>>2]|0;
     $118 = $117 | 4;
     HEAP32[$__err>>2] = $118;
     $$0 = 0;
     break;
    }
    case 132: {
     $373 = HEAP32[$__err>>2]|0;
     $374 = $373 | 4;
     HEAP32[$__err>>2] = $374;
     $$0 = 0;
     break;
    }
    case 185: {
     $520 = HEAP32[$__err>>2]|0;
     $521 = $520 | 4;
     HEAP32[$__err>>2] = $521;
     $$0 = 0;
     break;
    }
    case 244: {
     $669 = HEAP32[$__err>>2]|0;
     $670 = $669 | 4;
     HEAP32[$__err>>2] = $670;
     $$0 = 0;
     break;
    }
    case 267: {
     $735 = HEAP32[$__err>>2]|0;
     $736 = $735 | 4;
     HEAP32[$__err>>2] = $736;
     $$0 = 0;
     break;
    }
    case 278: {
     $777 = HEAP32[$__err>>2]|0;
     $778 = $777 | 4;
     HEAP32[$__err>>2] = $778;
     $$0 = 0;
     break;
    }
    case 280: {
     $781 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L367: do {
      if (!($781)) {
       $782 = (($__trailing_sign$0$lcssa) + 1|0);
       $783 = (($__trailing_sign$0$lcssa) + 8|0);
       $784 = (($__trailing_sign$0$lcssa) + 4|0);
       $$pre$i2$i$i = $878;$810 = $878;$__i$0 = 1;
       L369: while(1) {
        $785 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $786 = $785 & 1;
        $787 = ($786<<24>>24)==(0);
        if ($787) {
         $789 = $785&255;
         $790 = $789 >>> 1;
         $792 = $790;
        } else {
         $788 = HEAP32[$784>>2]|0;
         $792 = $788;
        }
        $791 = ($__i$0>>>0)<($792>>>0);
        if (!($791)) {
         break L367;
        }
        $793 = HEAP32[$__b>>2]|0;
        $794 = ($793|0)==(0|0);
        do {
         if ($794) {
          $808 = 0;
         } else {
          $795 = (($793) + 12|0);
          $796 = HEAP32[$795>>2]|0;
          $797 = (($793) + 16|0);
          $798 = HEAP32[$797>>2]|0;
          $799 = ($796|0)==($798|0);
          if ($799) {
           $800 = HEAP32[$793>>2]|0;
           $801 = (($800) + 36|0);
           $802 = HEAP32[$801>>2]|0;
           __THREW__ = 0;
           $803 = (invoke_ii($802|0,($793|0))|0);
           $804 = __THREW__; __THREW__ = 0;
           $805 = $804&1;
           if ($805) {
            label = 19;
            break L369;
           }
           $806 = ($803|0)==(-1);
           if ($806) {
            HEAP32[$__b>>2] = 0;
            $808 = 0;
            break;
           } else {
            $$pre$i$i$i = HEAP32[$__b>>2]|0;
            $808 = $$pre$i$i$i;
            break;
           }
          } else {
           $808 = $793;
          }
         }
        } while(0);
        $807 = ($808|0)==(0|0);
        $809 = ($810|0)==(0|0);
        do {
         if ($809) {
          $$pre$i2$i$i261$ph = $$pre$i2$i$i;
          label = 298;
         } else {
          $811 = (($810) + 12|0);
          $812 = HEAP32[$811>>2]|0;
          $813 = (($810) + 16|0);
          $814 = HEAP32[$813>>2]|0;
          $815 = ($812|0)==($814|0);
          if (!($815)) {
           if ($807) {
            $$pre$i2$i$i261269 = $$pre$i2$i$i;$892 = $810;
            break;
           } else {
            label = 306;
            break L369;
           }
          }
          $816 = HEAP32[$810>>2]|0;
          $817 = (($816) + 36|0);
          $818 = HEAP32[$817>>2]|0;
          __THREW__ = 0;
          $819 = (invoke_ii($818|0,($810|0))|0);
          $820 = __THREW__; __THREW__ = 0;
          $821 = $820&1;
          if ($821) {
           label = 19;
           break L369;
          }
          $822 = ($819|0)==(-1);
          if ($822) {
           HEAP32[$__e>>2] = 0;
           $$pre$i2$i$i261$ph = 0;
           label = 298;
           break;
          } else {
           $823 = ($$pre$i2$i$i|0)==(0|0);
           $tmp$i$i = $807 ^ $823;
           if ($tmp$i$i) {
            $$pre$i2$i$i261269 = $$pre$i2$i$i;$892 = $$pre$i2$i$i;
            break;
           } else {
            label = 306;
            break L369;
           }
          }
         }
        } while(0);
        if ((label|0) == 298) {
         label = 0;
         if ($807) {
          label = 306;
          break;
         } else {
          $$pre$i2$i$i261269 = $$pre$i2$i$i261$ph;$892 = 0;
         }
        }
        $824 = HEAP32[$__b>>2]|0;
        $825 = (($824) + 12|0);
        $826 = HEAP32[$825>>2]|0;
        $827 = (($824) + 16|0);
        $828 = HEAP32[$827>>2]|0;
        $829 = ($826|0)==($828|0);
        if ($829) {
         $830 = HEAP32[$824>>2]|0;
         $831 = (($830) + 36|0);
         $832 = HEAP32[$831>>2]|0;
         __THREW__ = 0;
         $833 = (invoke_ii($832|0,($824|0))|0);
         $834 = __THREW__; __THREW__ = 0;
         $835 = $834&1;
         if ($835) {
          label = 19;
          break;
         } else {
          $$0$i$i = $833;
         }
        } else {
         $836 = HEAP8[$826>>0]|0;
         $837 = $836&255;
         $$0$i$i = $837;
        }
        $838 = $$0$i$i&255;
        $839 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $840 = $839 & 1;
        $841 = ($840<<24>>24)==(0);
        if ($841) {
         $844 = $782;
        } else {
         $842 = HEAP32[$783>>2]|0;
         $844 = $842;
        }
        $843 = (($844) + ($__i$0)|0);
        $845 = HEAP8[$843>>0]|0;
        $846 = ($838<<24>>24)==($845<<24>>24);
        if (!($846)) {
         label = 306;
         break;
        }
        $849 = (($__i$0) + 1)|0;
        $850 = HEAP32[$__b>>2]|0;
        $851 = (($850) + 12|0);
        $852 = HEAP32[$851>>2]|0;
        $853 = (($850) + 16|0);
        $854 = HEAP32[$853>>2]|0;
        $855 = ($852|0)==($854|0);
        if ($855) {
         $856 = HEAP32[$850>>2]|0;
         $857 = (($856) + 40|0);
         $858 = HEAP32[$857>>2]|0;
         __THREW__ = 0;
         (invoke_ii($858|0,($850|0))|0);
         $859 = __THREW__; __THREW__ = 0;
         $860 = $859&1;
         if ($860) {
          label = 19;
          break;
         } else {
          $$pre$i2$i$i = $$pre$i2$i$i261269;$810 = $892;$__i$0 = $849;
          continue;
         }
        } else {
         $861 = (($852) + 1|0);
         HEAP32[$851>>2] = $861;
         $$pre$i2$i$i = $$pre$i2$i$i261269;$810 = $892;$__i$0 = $849;
         continue;
        }
       }
       if ((label|0) == 19) {
        $57 = ___cxa_find_matching_catch()|0;
        $58 = tempRet0;
        $lpad$phi$index = $57;$lpad$phi$index7 = $58;
        break L1;
       }
       else if ((label|0) == 306) {
        $847 = HEAP32[$__err>>2]|0;
        $848 = $847 | 4;
        HEAP32[$__err>>2] = $848;
        $$0 = 0;
        break L360;
       }
      }
     } while(0);
     $862 = HEAP32[$__gb>>2]|0;
     $863 = ($862|0)==($864|0);
     if ($863) {
      $$0 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$862,$864,$__et);
      $865 = HEAP32[$__et>>2]|0;
      $866 = ($865|0)==(0);
      if ($866) {
       $$0 = 1;
      } else {
       $867 = HEAP32[$__err>>2]|0;
       $868 = $867 | 4;
       HEAP32[$__err>>2] = $868;
       $$0 = 0;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $869 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $870 = ($869|0)==(0|0);
   if ($870) {
    STACKTOP = sp;return ($$0|0);
   }
   $871 = HEAP32[$1>>2]|0;
   __THREW__ = 0;
   invoke_vi($871|0,($869|0));
   $872 = __THREW__; __THREW__ = 0;
   $873 = $872&1;
   if ($873) {
    $874 = ___cxa_find_matching_catch(0|0)|0;
    $875 = tempRet0;
    ___clang_call_terminate($874);
    // unreachable;
   } else {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $71 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $72 = ($71|0)==(0|0);
 if ($72) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $73 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi($73|0,($71|0));
 $74 = __THREW__; __THREW__ = 0;
 $75 = $74&1;
 if ($75) {
  $76 = ___cxa_find_matching_catch(0|0)|0;
  $77 = tempRet0;
  ___clang_call_terminate($76);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(504,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  ___cxa_throw(($0|0),(19536|0),(374|0));
  // unreachable;
 }
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0112 = 0, $$0113 = 0, $$014 = 0, $$015 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$05 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp;
 $__wbuf = sp + 28|0;
 $__wb = sp + 8|0;
 $__wn = sp + 24|0;
 $__loc = sp + 20|0;
 $__neg = sp + 128|0;
 $0 = sp + 16|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 498;
 $2 = (($__wbuf) + 100|0);
 __THREW__ = 0;
 invoke_vii(431,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $31 = ___cxa_find_matching_catch()|0;
  $32 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$0112 = $32;$$014 = $31;$95 = $__wbuf;
 } else {
  __THREW__ = 0;
  $5 = (invoke_iii(432,($__loc|0),(10856|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  L4: do {
   if (!($7)) {
    HEAP8[$__neg>>0] = 0;
    $8 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $8;
    $9 = (($__iob) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
    $11 = (invoke_iiiiiiiiiiii(499,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($10|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($2|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     if ($11) {
      $14 = HEAP8[$__v>>0]|0;
      $15 = $14 & 1;
      $16 = ($15<<24>>24)==(0);
      if ($16) {
       $20 = (($__v) + 1|0);
       HEAP8[$20>>0] = 0;
       HEAP8[$__v>>0] = 0;
      } else {
       $17 = (($__v) + 8|0);
       $18 = HEAP32[$17>>2]|0;
       HEAP8[$18>>0] = 0;
       $19 = (($__v) + 4|0);
       HEAP32[$19>>2] = 0;
      }
      $21 = HEAP8[$__neg>>0]|0;
      $22 = ($21<<24>>24)==(0);
      if (!($22)) {
       $23 = HEAP32[$5>>2]|0;
       $24 = (($23) + 28|0);
       $25 = HEAP32[$24>>2]|0;
       __THREW__ = 0;
       $26 = (invoke_iii($25|0,($5|0),45)|0);
       $27 = __THREW__; __THREW__ = 0;
       $28 = $27&1;
       if ($28) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(416,($__v|0),($26|0));
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        break;
       }
      }
      $33 = HEAP32[$5>>2]|0;
      $34 = (($33) + 28|0);
      $35 = HEAP32[$34>>2]|0;
      __THREW__ = 0;
      $36 = (invoke_iii($35|0,($5|0),48)|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if ($38) {
       break;
      }
      $39 = HEAP32[$__wb>>2]|0;
      $40 = HEAP32[$__wn>>2]|0;
      $41 = (($40) + -1|0);
      $42 = ($39>>>0)<($41>>>0);
      L18: do {
       if ($42) {
        $__w$05 = $39;
        while(1) {
         $45 = HEAP8[$__w$05>>0]|0;
         $46 = ($45<<24>>24)==($36<<24>>24);
         $44 = (($__w$05) + 1|0);
         if (!($46)) {
          $__w$0$lcssa = $__w$05;
          break L18;
         }
         $43 = ($44>>>0)<($41>>>0);
         if ($43) {
          $__w$05 = $44;
         } else {
          $__w$0$lcssa = $44;
          break;
         }
        }
       } else {
        $__w$0$lcssa = $39;
       }
      } while(0);
      __THREW__ = 0;
      (invoke_iiii(505,($__v|0),($__w$0$lcssa|0),($40|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       break;
      }
     }
     $49 = HEAP32[$__b>>2]|0;
     $50 = ($49|0)==(0|0);
     do {
      if ($50) {
       $64 = 0;
      } else {
       $51 = (($49) + 12|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = (($49) + 16|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ($52|0)==($54|0);
       if ($55) {
        $56 = HEAP32[$49>>2]|0;
        $57 = (($56) + 36|0);
        $58 = HEAP32[$57>>2]|0;
        __THREW__ = 0;
        $59 = (invoke_ii($58|0,($49|0))|0);
        $60 = __THREW__; __THREW__ = 0;
        $61 = $60&1;
        if ($61) {
         break L4;
        }
        $62 = ($59|0)==(-1);
        if ($62) {
         HEAP32[$__b>>2] = 0;
         $64 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $64 = $$pre$i$i$i;
         break;
        }
       } else {
        $64 = $49;
       }
      }
     } while(0);
     $63 = ($64|0)==(0|0);
     $65 = ($8|0)==(0|0);
     do {
      if ($65) {
       label = 29;
      } else {
       $66 = (($8) + 12|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = (($8) + 16|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ($67|0)==($69|0);
       if (!($70)) {
        if ($63) {
         break;
        } else {
         label = 31;
         break;
        }
       }
       $71 = HEAP32[$8>>2]|0;
       $72 = (($71) + 36|0);
       $73 = HEAP32[$72>>2]|0;
       __THREW__ = 0;
       $74 = (invoke_ii($73|0,($8|0))|0);
       $75 = __THREW__; __THREW__ = 0;
       $76 = $75&1;
       if ($76) {
        break L4;
       }
       $77 = ($74|0)==(-1);
       if ($77) {
        HEAP32[$__e>>2] = 0;
        label = 29;
        break;
       } else {
        $78 = ($8|0)==(0|0);
        $tmp$i$i = $63 ^ $78;
        if ($tmp$i$i) {
         break;
        } else {
         label = 31;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 29) {
      if ($63) {
       label = 31;
      }
     }
     if ((label|0) == 31) {
      $79 = HEAP32[$__err>>2]|0;
      $80 = $79 | 2;
      HEAP32[$__err>>2] = $80;
     }
     $81 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $81;
     $82 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($82)|0);
     $83 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $84 = ($83|0)==(0|0);
     if ($84) {
      STACKTOP = sp;return;
     }
     $85 = HEAP32[$1>>2]|0;
     __THREW__ = 0;
     invoke_vi($85|0,($83|0));
     $86 = __THREW__; __THREW__ = 0;
     $87 = $86&1;
     if ($87) {
      $88 = ___cxa_find_matching_catch(0|0)|0;
      $89 = tempRet0;
      ___clang_call_terminate($88);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  $90 = ___cxa_find_matching_catch()|0;
  $91 = tempRet0;
  $92 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($92)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $93 = ($$pre|0)==(0|0);
  if ($93) {
   $$0113 = $91;$$015 = $90;
   ___resumeException($$015|0);
   // unreachable;
  } else {
   $$0112 = $91;$$014 = $90;$95 = $$pre;
  }
 }
 $94 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi($94|0,($95|0));
 $96 = __THREW__; __THREW__ = 0;
 $97 = $96&1;
 if ($97) {
  $98 = ___cxa_find_matching_catch(0|0)|0;
  $99 = tempRet0;
  ___clang_call_terminate($98);
  // unreachable;
 } else {
  $$0113 = $$0112;$$015 = $$014;
  ___resumeException($$015|0);
  // unreachable;
 }
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = sp + 40|0;
 $2 = sp + 76|0;
 $3 = sp + 4|0;
 $4 = sp + 88|0;
 $5 = sp + 100|0;
 $6 = sp + 28|0;
 $7 = sp + 64|0;
 $8 = sp + 52|0;
 $9 = sp + 16|0;
 if ($__intl) {
  $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,10296)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vii[$13 & 1023]($0,$10);
  $14 = HEAP32[$0>>2]|0;
  HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
  $15 = HEAP32[$10>>2]|0;
  $16 = (($15) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 1023]($1,$10);
  $18 = HEAP8[$__nsn>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   $24 = (($__nsn) + 1|0);
   HEAP8[$24>>0] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $21 = (($__nsn) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP8[$22>>0] = 0;
   $23 = (($__nsn) + 4|0);
   HEAP32[$23>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(506,($__nsn|0),0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   $27 = ___cxa_find_matching_catch(0|0)|0;
   $28 = tempRet0;
   ___clang_call_terminate($27);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  $29 = HEAP32[$10>>2]|0;
  $30 = (($29) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  FUNCTION_TABLE_vii[$31 & 1023]($2,$10);
  $32 = HEAP8[$__psn>>0]|0;
  $33 = $32 & 1;
  $34 = ($33<<24>>24)==(0);
  if ($34) {
   $38 = (($__psn) + 1|0);
   HEAP8[$38>>0] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $35 = (($__psn) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   HEAP8[$36>>0] = 0;
   $37 = (($__psn) + 4|0);
   HEAP32[$37>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(506,($__psn|0),0);
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   $41 = ___cxa_find_matching_catch(0|0)|0;
   $42 = tempRet0;
   ___clang_call_terminate($41);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
  $43 = HEAP32[$10>>2]|0;
  $44 = (($43) + 12|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (FUNCTION_TABLE_ii[$45 & 1023]($10)|0);
  HEAP8[$__dp>>0] = $46;
  $47 = HEAP32[$10>>2]|0;
  $48 = (($47) + 16|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (FUNCTION_TABLE_ii[$49 & 1023]($10)|0);
  HEAP8[$__ts>>0] = $50;
  $51 = HEAP32[$10>>2]|0;
  $52 = (($51) + 20|0);
  $53 = HEAP32[$52>>2]|0;
  FUNCTION_TABLE_vii[$53 & 1023]($3,$10);
  $54 = HEAP8[$__grp>>0]|0;
  $55 = $54 & 1;
  $56 = ($55<<24>>24)==(0);
  if ($56) {
   $60 = (($__grp) + 1|0);
   HEAP8[$60>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $57 = (($__grp) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   HEAP8[$58>>0] = 0;
   $59 = (($__grp) + 4|0);
   HEAP32[$59>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(506,($__grp|0),0);
  $61 = __THREW__; __THREW__ = 0;
  $62 = $61&1;
  if ($62) {
   $63 = ___cxa_find_matching_catch(0|0)|0;
   $64 = tempRet0;
   ___clang_call_terminate($63);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  $65 = HEAP32[$10>>2]|0;
  $66 = (($65) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  FUNCTION_TABLE_vii[$67 & 1023]($4,$10);
  $68 = HEAP8[$__sym>>0]|0;
  $69 = $68 & 1;
  $70 = ($69<<24>>24)==(0);
  if ($70) {
   $74 = (($__sym) + 1|0);
   HEAP8[$74>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $71 = (($__sym) + 8|0);
   $72 = HEAP32[$71>>2]|0;
   HEAP8[$72>>0] = 0;
   $73 = (($__sym) + 4|0);
   HEAP32[$73>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(506,($__sym|0),0);
  $75 = __THREW__; __THREW__ = 0;
  $76 = $75&1;
  if ($76) {
   $77 = ___cxa_find_matching_catch(0|0)|0;
   $78 = tempRet0;
   ___clang_call_terminate($77);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $79 = HEAP32[$10>>2]|0;
  $80 = (($79) + 36|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (FUNCTION_TABLE_ii[$81 & 1023]($10)|0);
  $storemerge = $82;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $83 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,10232)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($84) + 44|0);
  $86 = HEAP32[$85>>2]|0;
  FUNCTION_TABLE_vii[$86 & 1023]($5,$83);
  $87 = HEAP32[$5>>2]|0;
  HEAP8[$__pat>>0]=$87&255;HEAP8[$__pat+1>>0]=($87>>8)&255;HEAP8[$__pat+2>>0]=($87>>16)&255;HEAP8[$__pat+3>>0]=$87>>24;
  $88 = HEAP32[$83>>2]|0;
  $89 = (($88) + 32|0);
  $90 = HEAP32[$89>>2]|0;
  FUNCTION_TABLE_vii[$90 & 1023]($6,$83);
  $91 = HEAP8[$__nsn>>0]|0;
  $92 = $91 & 1;
  $93 = ($92<<24>>24)==(0);
  if ($93) {
   $97 = (($__nsn) + 1|0);
   HEAP8[$97>>0] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $94 = (($__nsn) + 8|0);
   $95 = HEAP32[$94>>2]|0;
   HEAP8[$95>>0] = 0;
   $96 = (($__nsn) + 4|0);
   HEAP32[$96>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(506,($__nsn|0),0);
  $98 = __THREW__; __THREW__ = 0;
  $99 = $98&1;
  if ($99) {
   $100 = ___cxa_find_matching_catch(0|0)|0;
   $101 = tempRet0;
   ___clang_call_terminate($100);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
  $102 = HEAP32[$83>>2]|0;
  $103 = (($102) + 28|0);
  $104 = HEAP32[$103>>2]|0;
  FUNCTION_TABLE_vii[$104 & 1023]($7,$83);
  $105 = HEAP8[$__psn>>0]|0;
  $106 = $105 & 1;
  $107 = ($106<<24>>24)==(0);
  if ($107) {
   $111 = (($__psn) + 1|0);
   HEAP8[$111>>0] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $108 = (($__psn) + 8|0);
   $109 = HEAP32[$108>>2]|0;
   HEAP8[$109>>0] = 0;
   $110 = (($__psn) + 4|0);
   HEAP32[$110>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(506,($__psn|0),0);
  $112 = __THREW__; __THREW__ = 0;
  $113 = $112&1;
  if ($113) {
   $114 = ___cxa_find_matching_catch(0|0)|0;
   $115 = tempRet0;
   ___clang_call_terminate($114);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
  $116 = HEAP32[$83>>2]|0;
  $117 = (($116) + 12|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (FUNCTION_TABLE_ii[$118 & 1023]($83)|0);
  HEAP8[$__dp>>0] = $119;
  $120 = HEAP32[$83>>2]|0;
  $121 = (($120) + 16|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (FUNCTION_TABLE_ii[$122 & 1023]($83)|0);
  HEAP8[$__ts>>0] = $123;
  $124 = HEAP32[$83>>2]|0;
  $125 = (($124) + 20|0);
  $126 = HEAP32[$125>>2]|0;
  FUNCTION_TABLE_vii[$126 & 1023]($8,$83);
  $127 = HEAP8[$__grp>>0]|0;
  $128 = $127 & 1;
  $129 = ($128<<24>>24)==(0);
  if ($129) {
   $133 = (($__grp) + 1|0);
   HEAP8[$133>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $130 = (($__grp) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   HEAP8[$131>>0] = 0;
   $132 = (($__grp) + 4|0);
   HEAP32[$132>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(506,($__grp|0),0);
  $134 = __THREW__; __THREW__ = 0;
  $135 = $134&1;
  if ($135) {
   $136 = ___cxa_find_matching_catch(0|0)|0;
   $137 = tempRet0;
   ___clang_call_terminate($136);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
  $138 = HEAP32[$83>>2]|0;
  $139 = (($138) + 24|0);
  $140 = HEAP32[$139>>2]|0;
  FUNCTION_TABLE_vii[$140 & 1023]($9,$83);
  $141 = HEAP8[$__sym>>0]|0;
  $142 = $141 & 1;
  $143 = ($142<<24>>24)==(0);
  if ($143) {
   $147 = (($__sym) + 1|0);
   HEAP8[$147>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $144 = (($__sym) + 8|0);
   $145 = HEAP32[$144>>2]|0;
   HEAP8[$145>>0] = 0;
   $146 = (($__sym) + 4|0);
   HEAP32[$146>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(506,($__sym|0),0);
  $148 = __THREW__; __THREW__ = 0;
  $149 = $148&1;
  if ($149) {
   $150 = ___cxa_find_matching_catch(0|0)|0;
   $151 = tempRet0;
   ___clang_call_terminate($150);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
  $152 = HEAP32[$83>>2]|0;
  $153 = (($152) + 36|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (FUNCTION_TABLE_ii[$154 & 1023]($83)|0);
  $storemerge = $155;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$012$i$i = 0, $$__ig$0 = 0, $$lcssa6 = 0, $$not = 0, $$not9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ig$011 = 0, $__r$012 = 0;
 var $or$cond2 = 0, $or$cond2$lcssa = 0, $or$cond210 = 0, $or$cond213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__grouping>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($__grouping) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $9 = ($__g|0)==($__g_end|0);
 if ($9) {
  $19 = $0;
 } else {
  $10 = (($__g_end) + -4|0);
  $11 = ($10>>>0)>($__g>>>0);
  if ($11) {
   $$012$i$i = $__g;$14 = $10;
   while(1) {
    $12 = HEAP32[$$012$i$i>>2]|0;
    $13 = HEAP32[$14>>2]|0;
    HEAP32[$$012$i$i>>2] = $13;
    HEAP32[$14>>2] = $12;
    $15 = (($$012$i$i) + 4|0);
    $16 = (($14) + -4|0);
    $17 = ($15>>>0)<($16>>>0);
    if ($17) {
     $$012$i$i = $15;$14 = $16;
    } else {
     break;
    }
   }
   $$pre = HEAP8[$__grouping>>0]|0;
   $19 = $$pre;
  } else {
   $19 = $0;
  }
 }
 $18 = $19 & 1;
 $20 = ($18<<24>>24)==(0);
 if ($20) {
  $25 = (($__grouping) + 1|0);
  $26 = $19&255;
  $27 = $26 >>> 1;
  $31 = $25;$34 = $27;
 } else {
  $21 = (($__grouping) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($__grouping) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $31 = $22;$34 = $24;
 }
 $28 = (($__g_end) + -4|0);
 $29 = ($28>>>0)>($__g>>>0);
 $30 = HEAP8[$31>>0]|0;
 $$not9 = ($30<<24>>24)<(1);
 $32 = ($30<<24>>24)==(127);
 $or$cond210 = $$not9 | $32;
 L18: do {
  if ($29) {
   $33 = (($31) + ($34)|0);
   $35 = $33;
   $37 = $30;$__ig$011 = $31;$__r$012 = $__g;$or$cond213 = $or$cond210;
   while(1) {
    if (!($or$cond213)) {
     $36 = $37 << 24 >> 24;
     $38 = HEAP32[$__r$012>>2]|0;
     $39 = ($36|0)==($38|0);
     if (!($39)) {
      break;
     }
    }
    $40 = $__ig$011;
    $41 = (($35) - ($40))|0;
    $42 = ($41|0)>(1);
    $43 = (($__ig$011) + 1|0);
    $$__ig$0 = $42 ? $43 : $__ig$011;
    $44 = (($__r$012) + 4|0);
    $45 = ($44>>>0)<($28>>>0);
    $46 = HEAP8[$$__ig$0>>0]|0;
    $$not = ($46<<24>>24)<(1);
    $47 = ($46<<24>>24)==(127);
    $or$cond2 = $$not | $47;
    if ($45) {
     $37 = $46;$__ig$011 = $$__ig$0;$__r$012 = $44;$or$cond213 = $or$cond2;
    } else {
     $$lcssa6 = $46;$or$cond2$lcssa = $or$cond2;
     break L18;
    }
   }
   HEAP32[$__err>>2] = 4;
   STACKTOP = sp;return;
  } else {
   $$lcssa6 = $30;$or$cond2$lcssa = $or$cond210;
  }
 } while(0);
 if ($or$cond2$lcssa) {
  STACKTOP = sp;return;
 }
 $48 = $$lcssa6 << 24 >> 24;
 $49 = HEAP32[$28>>2]|0;
 $50 = (($49) + -1)|0;
 $51 = ($50>>>0)<($48>>>0);
 if ($51) {
  STACKTOP = sp;return;
 }
 HEAP32[$__err>>2] = 4;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$112 = 0, $$113 = 0, $$1210 = 0, $$1211 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$26 = 0, $__neg = 0, $__w$07 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0;
 var $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 472|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 64|0;
 $__wb = sp + 464|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 576|0;
 $0 = sp + 56|0;
 $__atoms = sp + 16|0;
 $__nbuf = sp + 476|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 498;
 $2 = (($__wbuf) + 400|0);
 __THREW__ = 0;
 invoke_vii(431,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $33 = ___cxa_find_matching_catch()|0;
   $34 = tempRet0;
   HEAP32[$__wb>>2] = 0;
   $$112 = $33;$$1210 = $34;$107 = 498;$108 = $__wbuf;
  } else {
   __THREW__ = 0;
   $5 = (invoke_iii(432,($__loc|0),(10848|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   L3: do {
    if ($7) {
     label = 11;
    } else {
     HEAP8[$__neg>>0] = 0;
     $8 = HEAP32[$__e>>2]|0;
     HEAP32[$0>>2] = $8;
     $9 = (($__iob) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
     $11 = (invoke_iiiiiiiiiiii(507,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($10|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($2|0))|0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if ($13) {
      label = 11;
     } else {
      if ($11) {
       $14 = HEAP32[$5>>2]|0;
       $15 = (($14) + 48|0);
       $16 = HEAP32[$15>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($16|0,($5|0),(10552|0),(((10552 + 10|0))|0),($__atoms|0))|0);
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if ($18) {
        label = 11;
        break;
       }
       $19 = HEAP32[$__wn>>2]|0;
       $20 = HEAP32[$__wb>>2]|0;
       $21 = $19;
       $22 = $20;
       $23 = (($21) - ($22))|0;
       $24 = ($23|0)>(392);
       if ($24) {
        $25 = $23 >> 2;
        $26 = (($25) + 2)|0;
        $27 = (_malloc($26)|0);
        $28 = ($27|0)==(0|0);
        if ($28) {
         __THREW__ = 0;
         invoke_v(487);
         $29 = __THREW__; __THREW__ = 0;
         $30 = $29&1;
         if ($30) {
          $31 = ___cxa_find_matching_catch()|0;
          $32 = tempRet0;
          $$0 = $31;$$01 = $32;
          break;
         } else {
          $39 = 0;$__nc$0 = 0;
         }
        } else {
         $39 = $27;$__nc$0 = $27;
        }
       } else {
        $39 = 0;$__nc$0 = $__nbuf;
       }
       $40 = HEAP8[$__neg>>0]|0;
       $41 = ($40<<24>>24)==(0);
       if ($41) {
        $__nc$1 = $__nc$0;
       } else {
        $42 = (($__nc$0) + 1|0);
        HEAP8[$__nc$0>>0] = 45;
        $__nc$1 = $42;
       }
       $43 = ($20>>>0)<($19>>>0);
       if ($43) {
        $44 = (($__atoms) + 40|0);
        $45 = $__atoms;
        $__nc$26 = $__nc$1;$__w$07 = $20;
        while(1) {
         $46 = HEAP32[$__w$07>>2]|0;
         $$01$i = $__atoms;
         while(1) {
          $49 = HEAP32[$$01$i>>2]|0;
          $50 = ($49|0)==($46|0);
          $48 = (($$01$i) + 4|0);
          if ($50) {
           $$0$lcssa$i = $$01$i;
           break;
          }
          $47 = ($48|0)==($44|0);
          if ($47) {
           $$0$lcssa$i = $44;
           break;
          } else {
           $$01$i = $48;
          }
         }
         $51 = $$0$lcssa$i;
         $52 = (($51) - ($45))|0;
         $53 = $52 >> 2;
         $54 = (10552 + ($53)|0);
         $55 = HEAP8[$54>>0]|0;
         HEAP8[$__nc$26>>0] = $55;
         $56 = (($__w$07) + 4|0);
         $57 = (($__nc$26) + 1|0);
         $58 = HEAP32[$__wn>>2]|0;
         $59 = ($56>>>0)<($58>>>0);
         if ($59) {
          $__nc$26 = $57;$__w$07 = $56;
         } else {
          $__nc$2$lcssa = $57;
          break;
         }
        }
       } else {
        $__nc$2$lcssa = $__nc$1;
       }
       HEAP8[$__nc$2$lcssa>>0] = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $60 = (_sscanf($__nbuf,10488,$vararg_buffer)|0);
       $61 = ($60|0)==(1);
       if (!($61)) {
        __THREW__ = 0;
        invoke_vi(500,(10496|0));
        $62 = __THREW__; __THREW__ = 0;
        $63 = $62&1;
        if ($63) {
         $37 = ___cxa_find_matching_catch()|0;
         $38 = tempRet0;
         _free($39);
         $$0 = $37;$$01 = $38;
         break;
        }
       }
       _free($39);
      }
      $64 = HEAP32[$__b>>2]|0;
      $65 = ($64|0)==(0|0);
      do {
       if ($65) {
        $113 = 1;
       } else {
        $66 = (($64) + 12|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = (($64) + 16|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = ($67|0)==($69|0);
        if ($70) {
         $71 = HEAP32[$64>>2]|0;
         $72 = (($71) + 36|0);
         $73 = HEAP32[$72>>2]|0;
         __THREW__ = 0;
         $74 = (invoke_ii($73|0,($64|0))|0);
         $75 = __THREW__; __THREW__ = 0;
         $76 = $75&1;
         if ($76) {
          label = 11;
          break L3;
         } else {
          $$0$i$i$i$i = $74;
         }
        } else {
         $77 = HEAP32[$67>>2]|0;
         $$0$i$i$i$i = $77;
        }
        $78 = ($$0$i$i$i$i|0)==(-1);
        if ($78) {
         HEAP32[$__b>>2] = 0;
         $113 = 1;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
         $113 = $phitmp$i$i$i;
         break;
        }
       }
      } while(0);
      $79 = HEAP32[$__e>>2]|0;
      $80 = ($79|0)==(0|0);
      do {
       if ($80) {
        label = 37;
       } else {
        $81 = (($79) + 12|0);
        $82 = HEAP32[$81>>2]|0;
        $83 = (($79) + 16|0);
        $84 = HEAP32[$83>>2]|0;
        $85 = ($82|0)==($84|0);
        if ($85) {
         $86 = HEAP32[$79>>2]|0;
         $87 = (($86) + 36|0);
         $88 = HEAP32[$87>>2]|0;
         __THREW__ = 0;
         $89 = (invoke_ii($88|0,($79|0))|0);
         $90 = __THREW__; __THREW__ = 0;
         $91 = $90&1;
         if ($91) {
          label = 11;
          break L3;
         } else {
          $$0$i$i1$i$i = $89;
         }
        } else {
         $92 = HEAP32[$82>>2]|0;
         $$0$i$i1$i$i = $92;
        }
        $93 = ($$0$i$i1$i$i|0)==(-1);
        if ($93) {
         HEAP32[$__e>>2] = 0;
         label = 37;
         break;
        } else {
         if ($113) {
          break;
         } else {
          label = 39;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 37) {
       if ($113) {
        label = 39;
       }
      }
      if ((label|0) == 39) {
       $94 = HEAP32[$__err>>2]|0;
       $95 = $94 | 2;
       HEAP32[$__err>>2] = $95;
      }
      $96 = HEAP32[$__b>>2]|0;
      HEAP32[$agg$result>>2] = $96;
      $97 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($97)|0);
      $98 = HEAP32[$__wb>>2]|0;
      HEAP32[$__wb>>2] = 0;
      $99 = ($98|0)==(0|0);
      if ($99) {
       STACKTOP = sp;return;
      }
      $100 = HEAP32[$1>>2]|0;
      __THREW__ = 0;
      invoke_vi($100|0,($98|0));
      $101 = __THREW__; __THREW__ = 0;
      $102 = $101&1;
      if ($102) {
       $103 = ___cxa_find_matching_catch(0|0)|0;
       $104 = tempRet0;
       ___clang_call_terminate($103);
       // unreachable;
      } else {
       STACKTOP = sp;return;
      }
     }
    }
   } while(0);
   if ((label|0) == 11) {
    $35 = ___cxa_find_matching_catch()|0;
    $36 = tempRet0;
    $$0 = $35;$$01 = $36;
   }
   $105 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($105)|0);
   $$pre = HEAP32[$__wb>>2]|0;
   HEAP32[$__wb>>2] = 0;
   $106 = ($$pre|0)==(0|0);
   if ($106) {
    $$113 = $$0;$$1211 = $$01;
    ___resumeException($$113|0);
    // unreachable;
   } else {
    $$pre15 = HEAP32[$1>>2]|0;
    $$112 = $$0;$$1210 = $$01;$107 = $$pre15;$108 = $$pre;
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi($107|0,($108|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $111 = ___cxa_find_matching_catch(0|0)|0;
  $112 = tempRet0;
  ___clang_call_terminate($111);
  // unreachable;
 } else {
  $$113 = $$112;$$1211 = $$1210;
  ___resumeException($$113|0);
  // unreachable;
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i117 = 0, $$0$i$i$i$i149 = 0, $$0$i$i$i$i174 = 0, $$0$i$i$i$i22 = 0, $$0$i$i$i$i43 = 0, $$0$i$i$i$i83 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i123 = 0, $$0$i$i1$i$i155 = 0, $$0$i$i1$i$i180 = 0, $$0$i$i1$i$i28 = 0, $$0$i$i1$i$i49 = 0, $$0$i$i1$i$i89 = 0, $$0$i$i101 = 0, $$0$i$i110 = 0, $$0$i$i113 = 0;
 var $$0$i$i135 = 0, $$0$i$i146 = 0, $$0$i$i170 = 0, $$0$i$i37 = 0, $$0$i$i41 = 0, $$0$i$i58 = 0, $$0$i$i64 = 0, $$0$i$i69 = 0, $$0$i$i77 = 0, $$0$i$i80 = 0, $$288 = 0, $$289 = 0, $$290 = 0, $$291 = 0, $$292 = 0, $$293 = 0, $$294 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i119 = 0;
 var $$pre$i$i$i151 = 0, $$pre$i$i$i176 = 0, $$pre$i$i$i24 = 0, $$pre$i$i$i45 = 0, $$pre$i$i$i85 = 0, $$pre$i3$i$i = 0, $$pre$i3$i$i125 = 0, $$pre$i3$i$i157 = 0, $$pre$i3$i$i182 = 0, $$pre$i3$i$i182268 = 0, $$pre$i3$i$i182269 = 0, $$pre$i3$i$i279$ph = 0, $$pre$i3$i$i279287 = 0, $$pre$i3$i$i51 = 0, $$pre$i3$i$i51260 = 0, $$pre$i3$i$i51262 = 0, $$pre$i3$i$i91 = 0, $$pre$i3$i$i91273$ph = 0, $$pre$i3$i$i91273284 = 0, $$pre263 = 0;
 var $$pre264 = 0, $$pre265 = 0, $$pre266 = 0, $$pre267 = 0, $$pre271 = 0, $$pre275 = 0, $$pre277 = 0, $$sum = 0, $$sum280 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$010 = 0, $__p$0250 = 0, $__pat = 0, $__psn = 0;
 var $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$09 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0252 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $lpad$phi$index = 0, $lpad$phi$index8 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond6 = 0, $or$cond8 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i120 = 0, $phitmp$i$i$i152 = 0, $phitmp$i$i$i177 = 0;
 var $phitmp$i$i$i25 = 0, $phitmp$i$i$i46 = 0, $phitmp$i$i$i86 = 0, $phitmp$i4$i$i = 0, $phitmp$i4$i$i158 = 0, $phitmp$i4$i$i183 = 0, $phitmp$i4$i$i52 = 0, $phitmp$i4$i$i92 = 0, $switch = 0, $tmp$i$i = 0, $tmp$i$i160 = 0, $tmp$i$i185 = 0, $tmp$i$i54 = 0, $tmp$i$i94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 492|0;
 $__gbuf = sp + 88|0;
 $__gb = sp + 48|0;
 $__gn = sp + 44|0;
 $__ge = sp + 36|0;
 $__pat = sp + 84|0;
 $__dp = sp + 488|0;
 $__ts = sp + 496|0;
 $__grp = sp + 56|0;
 $__sym = sp + 24|0;
 $__psn = sp + 12|0;
 $__nsn = sp + 68|0;
 $__spaces = sp;
 $__fd = sp + 40|0;
 $__et = sp + 80|0;
 HEAP32[$0>>2] = $__we;
 HEAP32[$__gb>>2] = $__gbuf;
 $1 = (($__gb) + 4|0);
 HEAP32[$1>>2] = 498;
 HEAP32[$__gn>>2] = $__gbuf;
 $2 = (($__gbuf) + 400|0);
 HEAP32[$__ge>>2] = $2;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(508,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if ($4) {
   $66 = ___cxa_find_matching_catch()|0;
   $67 = tempRet0;
   $lpad$phi$index = $66;$lpad$phi$index8 = $67;
  } else {
   $5 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $5;
   $6 = (($__nsn) + 4|0);
   $7 = (($__nsn) + 8|0);
   $8 = (($__psn) + 4|0);
   $9 = (($__psn) + 8|0);
   $10 = $__flags & 512;
   $11 = ($10|0)!=(0);
   $12 = (($__sym) + 4|0);
   $13 = (($__sym) + 8|0);
   $14 = (($__spaces) + 4|0);
   $15 = (($__spaces) + 8|0);
   $16 = (($__pat) + 3|0);
   $17 = (($__grp) + 4|0);
   $855 = $__gbuf;$__p$0250 = 0;$__trailing_sign$0252 = 0;
   L4: while(1) {
    $18 = HEAP32[$__b>>2]|0;
    $19 = ($18|0)==(0|0);
    do {
     if ($19) {
      $856 = 1;
     } else {
      $20 = (($18) + 12|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($18) + 16|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($21|0)==($23|0);
      if ($24) {
       $25 = HEAP32[$18>>2]|0;
       $26 = (($25) + 36|0);
       $27 = HEAP32[$26>>2]|0;
       __THREW__ = 0;
       $28 = (invoke_ii($27|0,($18|0))|0);
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        label = 26;
        break L4;
       } else {
        $$0$i$i$i$i22 = $28;
       }
      } else {
       $31 = HEAP32[$21>>2]|0;
       $$0$i$i$i$i22 = $31;
      }
      $32 = ($$0$i$i$i$i22|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $856 = 1;
       break;
      } else {
       $$pre$i$i$i24 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i25 = ($$pre$i$i$i24|0)==(0|0);
       $856 = $phitmp$i$i$i25;
       break;
      }
     }
    } while(0);
    $33 = HEAP32[$__e>>2]|0;
    $34 = ($33|0)==(0|0);
    do {
     if ($34) {
      label = 16;
     } else {
      $35 = (($33) + 12|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = (($33) + 16|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ($36|0)==($38|0);
      if ($39) {
       $40 = HEAP32[$33>>2]|0;
       $41 = (($40) + 36|0);
       $42 = HEAP32[$41>>2]|0;
       __THREW__ = 0;
       $43 = (invoke_ii($42|0,($33|0))|0);
       $44 = __THREW__; __THREW__ = 0;
       $45 = $44&1;
       if ($45) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i28 = $43;
       }
      } else {
       $46 = HEAP32[$36>>2]|0;
       $$0$i$i1$i$i28 = $46;
      }
      $47 = ($$0$i$i1$i$i28|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($856) {
        $858 = $33;
        break;
       } else {
        $843 = $855;$857 = $33;$__trailing_sign$0$lcssa = $__trailing_sign$0252;
        label = 291;
        break L4;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($856) {
      $843 = $855;$857 = 0;$__trailing_sign$0$lcssa = $__trailing_sign$0252;
      label = 291;
      break;
     } else {
      $858 = 0;
     }
    }
    $48 = (($__pat) + ($__p$0250)|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = $49 << 24 >> 24;
    L28: do {
     switch ($50|0) {
     case 1:  {
      $cond = ($__p$0250|0)==(3);
      if ($cond) {
       $843 = $855;$857 = $858;$__trailing_sign$0$lcssa = $__trailing_sign$0252;
       label = 291;
       break L4;
      }
      $75 = HEAP32[$__b>>2]|0;
      $76 = (($75) + 12|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (($75) + 16|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($77|0)==($79|0);
      if ($80) {
       $81 = HEAP32[$75>>2]|0;
       $82 = (($81) + 36|0);
       $83 = HEAP32[$82>>2]|0;
       __THREW__ = 0;
       $84 = (invoke_ii($83|0,($75|0))|0);
       $85 = __THREW__; __THREW__ = 0;
       $86 = $85&1;
       if ($86) {
        label = 26;
        break L4;
       } else {
        $$0$i$i37 = $84;
       }
      } else {
       $87 = HEAP32[$77>>2]|0;
       $$0$i$i37 = $87;
      }
      $88 = HEAP32[$__ct>>2]|0;
      $89 = (($88) + 12|0);
      $90 = HEAP32[$89>>2]|0;
      __THREW__ = 0;
      $91 = (invoke_iiii($90|0,($__ct|0),8192,($$0$i$i37|0))|0);
      $92 = __THREW__; __THREW__ = 0;
      $93 = $92&1;
      if ($93) {
       label = 26;
       break L4;
      }
      if (!($91)) {
       label = 42;
       break L4;
      }
      $94 = HEAP32[$__b>>2]|0;
      $95 = (($94) + 12|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = (($94) + 16|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = ($96|0)==($98|0);
      if ($99) {
       $100 = HEAP32[$94>>2]|0;
       $101 = (($100) + 40|0);
       $102 = HEAP32[$101>>2]|0;
       __THREW__ = 0;
       $103 = (invoke_ii($102|0,($94|0))|0);
       $104 = __THREW__; __THREW__ = 0;
       $105 = $104&1;
       if ($105) {
        label = 26;
        break L4;
       } else {
        $$0$i$i41 = $103;
       }
      } else {
       $106 = (($96) + 4|0);
       HEAP32[$95>>2] = $106;
       $107 = HEAP32[$96>>2]|0;
       $$0$i$i41 = $107;
      }
      __THREW__ = 0;
      invoke_vii(509,($__spaces|0),($$0$i$i41|0));
      $108 = __THREW__; __THREW__ = 0;
      $109 = $108&1;
      if ($109) {
       label = 26;
       break L4;
      } else {
       label = 43;
      }
      break;
     }
     case 0:  {
      label = 43;
      break;
     }
     case 4:  {
      $51 = HEAP32[$__ts>>2]|0;
      $$pre$i3$i$i157 = $858;$529 = $858;$583 = $855;$__ng$0 = 0;
      L42: while(1) {
       $513 = HEAP32[$__b>>2]|0;
       $514 = ($513|0)==(0|0);
       do {
        if ($514) {
         $543 = 1;
        } else {
         $515 = (($513) + 12|0);
         $516 = HEAP32[$515>>2]|0;
         $517 = (($513) + 16|0);
         $518 = HEAP32[$517>>2]|0;
         $519 = ($516|0)==($518|0);
         if ($519) {
          $520 = HEAP32[$513>>2]|0;
          $521 = (($520) + 36|0);
          $522 = HEAP32[$521>>2]|0;
          __THREW__ = 0;
          $523 = (invoke_ii($522|0,($513|0))|0);
          $524 = __THREW__; __THREW__ = 0;
          $525 = $524&1;
          if ($525) {
           label = 21;
           break L4;
          } else {
           $$0$i$i$i$i149 = $523;
          }
         } else {
          $526 = HEAP32[$516>>2]|0;
          $$0$i$i$i$i149 = $526;
         }
         $527 = ($$0$i$i$i$i149|0)==(-1);
         if ($527) {
          HEAP32[$__b>>2] = 0;
          $543 = 1;
          break;
         } else {
          $$pre$i$i$i151 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i152 = ($$pre$i$i$i151|0)==(0|0);
          $543 = $phitmp$i$i$i152;
          break;
         }
        }
       } while(0);
       $528 = ($529|0)==(0|0);
       do {
        if ($528) {
         $864 = $$pre$i3$i$i157;
         label = 207;
        } else {
         $530 = (($529) + 12|0);
         $531 = HEAP32[$530>>2]|0;
         $532 = (($529) + 16|0);
         $533 = HEAP32[$532>>2]|0;
         $534 = ($531|0)==($533|0);
         if ($534) {
          $535 = HEAP32[$529>>2]|0;
          $536 = (($535) + 36|0);
          $537 = HEAP32[$536>>2]|0;
          __THREW__ = 0;
          $538 = (invoke_ii($537|0,($529|0))|0);
          $539 = __THREW__; __THREW__ = 0;
          $540 = $539&1;
          if ($540) {
           label = 21;
           break L4;
          } else {
           $$0$i$i1$i$i155 = $538;
          }
         } else {
          $541 = HEAP32[$531>>2]|0;
          $$0$i$i1$i$i155 = $541;
         }
         $542 = ($$0$i$i1$i$i155|0)==(-1);
         if ($542) {
          HEAP32[$__e>>2] = 0;
          $864 = 0;
          label = 207;
          break;
         } else {
          $phitmp$i4$i$i158 = ($$pre$i3$i$i157|0)==(0|0);
          $tmp$i$i160 = $543 ^ $phitmp$i4$i$i158;
          if ($tmp$i$i160) {
           $865 = $$pre$i3$i$i157;$866 = $$pre$i3$i$i157;
           break;
          } else {
           $$pre$i3$i$i125 = $$pre$i3$i$i157;
           break L42;
          }
         }
        }
       } while(0);
       if ((label|0) == 207) {
        label = 0;
        if ($543) {
         $$pre$i3$i$i125 = $864;
         break;
        } else {
         $865 = $864;$866 = 0;
        }
       }
       $544 = HEAP32[$__b>>2]|0;
       $545 = (($544) + 12|0);
       $546 = HEAP32[$545>>2]|0;
       $547 = (($544) + 16|0);
       $548 = HEAP32[$547>>2]|0;
       $549 = ($546|0)==($548|0);
       if ($549) {
        $550 = HEAP32[$544>>2]|0;
        $551 = (($550) + 36|0);
        $552 = HEAP32[$551>>2]|0;
        __THREW__ = 0;
        $553 = (invoke_ii($552|0,($544|0))|0);
        $554 = __THREW__; __THREW__ = 0;
        $555 = $554&1;
        if ($555) {
         label = 21;
         break L4;
        } else {
         $$0$i$i146 = $553;
        }
       } else {
        $556 = HEAP32[$546>>2]|0;
        $$0$i$i146 = $556;
       }
       $557 = HEAP32[$__ct>>2]|0;
       $558 = (($557) + 12|0);
       $559 = HEAP32[$558>>2]|0;
       __THREW__ = 0;
       $560 = (invoke_iiii($559|0,($__ct|0),2048,($$0$i$i146|0))|0);
       $561 = __THREW__; __THREW__ = 0;
       $562 = $561&1;
       if ($562) {
        label = 21;
        break L4;
       }
       if ($560) {
        $563 = HEAP32[$__wn>>2]|0;
        $564 = HEAP32[$0>>2]|0;
        $565 = ($563|0)==($564|0);
        if ($565) {
         __THREW__ = 0;
         invoke_viii(510,($__wb|0),($__wn|0),($0|0));
         $566 = __THREW__; __THREW__ = 0;
         $567 = $566&1;
         if ($567) {
          label = 21;
          break L4;
         }
         $$pre275 = HEAP32[$__wn>>2]|0;
         $569 = $$pre275;
        } else {
         $569 = $563;
        }
        $568 = (($569) + 4|0);
        HEAP32[$__wn>>2] = $568;
        HEAP32[$569>>2] = $$0$i$i146;
        $570 = (($__ng$0) + 1)|0;
        $867 = $583;$__ng$1 = $570;
       } else {
        $571 = HEAP8[$__grp>>0]|0;
        $572 = $571 & 1;
        $573 = ($572<<24>>24)==(0);
        if ($573) {
         $575 = $571&255;
         $576 = $575 >>> 1;
         $578 = $576;
        } else {
         $574 = HEAP32[$17>>2]|0;
         $578 = $574;
        }
        $577 = ($578|0)!=(0);
        $579 = ($__ng$0|0)!=(0);
        $or$cond6 = $577 & $579;
        $580 = ($$0$i$i146|0)==($51|0);
        $or$cond12 = $or$cond6 & $580;
        if (!($or$cond12)) {
         $$pre$i3$i$i125 = $865;
         break;
        }
        $581 = HEAP32[$__ge>>2]|0;
        $582 = ($583|0)==($581|0);
        if ($582) {
         __THREW__ = 0;
         invoke_viii(503,($__gb|0),($__gn|0),($__ge|0));
         $584 = __THREW__; __THREW__ = 0;
         $585 = $584&1;
         if ($585) {
          label = 21;
          break L4;
         }
         $$pre277 = HEAP32[$__gn>>2]|0;
         $587 = $$pre277;
        } else {
         $587 = $583;
        }
        $586 = (($587) + 4|0);
        HEAP32[$__gn>>2] = $586;
        HEAP32[$587>>2] = $__ng$0;
        $867 = $586;$__ng$1 = 0;
       }
       $588 = HEAP32[$__b>>2]|0;
       $589 = (($588) + 12|0);
       $590 = HEAP32[$589>>2]|0;
       $591 = (($588) + 16|0);
       $592 = HEAP32[$591>>2]|0;
       $593 = ($590|0)==($592|0);
       if ($593) {
        $594 = HEAP32[$588>>2]|0;
        $595 = (($594) + 40|0);
        $596 = HEAP32[$595>>2]|0;
        __THREW__ = 0;
        (invoke_ii($596|0,($588|0))|0);
        $597 = __THREW__; __THREW__ = 0;
        $598 = $597&1;
        if ($598) {
         label = 21;
         break L4;
        } else {
         $$pre$i3$i$i157 = $865;$529 = $866;$583 = $867;$__ng$0 = $__ng$1;
         continue;
        }
       } else {
        $599 = (($590) + 4|0);
        HEAP32[$589>>2] = $599;
        $$pre$i3$i$i157 = $865;$529 = $866;$583 = $867;$__ng$0 = $__ng$1;
        continue;
       }
      }
      $600 = HEAP32[$__gb>>2]|0;
      $601 = ($600|0)!=($583|0);
      $602 = ($__ng$0|0)!=(0);
      $or$cond8 = $601 & $602;
      if ($or$cond8) {
       $603 = HEAP32[$__ge>>2]|0;
       $604 = ($583|0)==($603|0);
       if ($604) {
        __THREW__ = 0;
        invoke_viii(503,($__gb|0),($__gn|0),($__ge|0));
        $605 = __THREW__; __THREW__ = 0;
        $606 = $605&1;
        if ($606) {
         label = 26;
         break L4;
        }
        $$pre271 = HEAP32[$__gn>>2]|0;
        $608 = $$pre271;
       } else {
        $608 = $583;
       }
       $607 = (($608) + 4|0);
       HEAP32[$__gn>>2] = $607;
       HEAP32[$608>>2] = $__ng$0;
       $868 = $607;
      } else {
       $868 = $583;
      }
      $609 = HEAP32[$__fd>>2]|0;
      $610 = ($609|0)>(0);
      if ($610) {
       $611 = HEAP32[$__b>>2]|0;
       $612 = ($611|0)==(0|0);
       do {
        if ($612) {
         $870 = 1;
        } else {
         $613 = (($611) + 12|0);
         $614 = HEAP32[$613>>2]|0;
         $615 = (($611) + 16|0);
         $616 = HEAP32[$615>>2]|0;
         $617 = ($614|0)==($616|0);
         if ($617) {
          $618 = HEAP32[$611>>2]|0;
          $619 = (($618) + 36|0);
          $620 = HEAP32[$619>>2]|0;
          __THREW__ = 0;
          $621 = (invoke_ii($620|0,($611|0))|0);
          $622 = __THREW__; __THREW__ = 0;
          $623 = $622&1;
          if ($623) {
           label = 26;
           break L4;
          } else {
           $$0$i$i$i$i117 = $621;
          }
         } else {
          $624 = HEAP32[$614>>2]|0;
          $$0$i$i$i$i117 = $624;
         }
         $625 = ($$0$i$i$i$i117|0)==(-1);
         if ($625) {
          HEAP32[$__b>>2] = 0;
          $870 = 1;
          break;
         } else {
          $$pre$i$i$i119 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i120 = ($$pre$i$i$i119|0)==(0|0);
          $870 = $phitmp$i$i$i120;
          break;
         }
        }
       } while(0);
       $626 = ($$pre$i3$i$i125|0)==(0|0);
       do {
        if ($626) {
         label = 248;
        } else {
         $627 = (($$pre$i3$i$i125) + 12|0);
         $628 = HEAP32[$627>>2]|0;
         $629 = (($$pre$i3$i$i125) + 16|0);
         $630 = HEAP32[$629>>2]|0;
         $631 = ($628|0)==($630|0);
         if ($631) {
          $632 = HEAP32[$$pre$i3$i$i125>>2]|0;
          $633 = (($632) + 36|0);
          $634 = HEAP32[$633>>2]|0;
          __THREW__ = 0;
          $635 = (invoke_ii($634|0,($$pre$i3$i$i125|0))|0);
          $636 = __THREW__; __THREW__ = 0;
          $637 = $636&1;
          if ($637) {
           label = 26;
           break L4;
          } else {
           $$0$i$i1$i$i123 = $635;
          }
         } else {
          $638 = HEAP32[$628>>2]|0;
          $$0$i$i1$i$i123 = $638;
         }
         $639 = ($$0$i$i1$i$i123|0)==(-1);
         if ($639) {
          HEAP32[$__e>>2] = 0;
          label = 248;
          break;
         } else {
          if ($870) {
           $871 = $$pre$i3$i$i125;
           break;
          } else {
           label = 254;
           break L4;
          }
         }
        }
       } while(0);
       if ((label|0) == 248) {
        label = 0;
        if ($870) {
         label = 254;
         break L4;
        } else {
         $871 = 0;
        }
       }
       $640 = HEAP32[$__b>>2]|0;
       $641 = (($640) + 12|0);
       $642 = HEAP32[$641>>2]|0;
       $643 = (($640) + 16|0);
       $644 = HEAP32[$643>>2]|0;
       $645 = ($642|0)==($644|0);
       if ($645) {
        $646 = HEAP32[$640>>2]|0;
        $647 = (($646) + 36|0);
        $648 = HEAP32[$647>>2]|0;
        __THREW__ = 0;
        $649 = (invoke_ii($648|0,($640|0))|0);
        $650 = __THREW__; __THREW__ = 0;
        $651 = $650&1;
        if ($651) {
         label = 26;
         break L4;
        } else {
         $$0$i$i110 = $649;
        }
       } else {
        $652 = HEAP32[$642>>2]|0;
        $$0$i$i110 = $652;
       }
       $653 = HEAP32[$__dp>>2]|0;
       $654 = ($$0$i$i110|0)==($653|0);
       if (!($654)) {
        label = 254;
        break L4;
       }
       $657 = HEAP32[$__b>>2]|0;
       $658 = (($657) + 12|0);
       $659 = HEAP32[$658>>2]|0;
       $660 = (($657) + 16|0);
       $661 = HEAP32[$660>>2]|0;
       $662 = ($659|0)==($661|0);
       if ($662) {
        $663 = HEAP32[$657>>2]|0;
        $664 = (($663) + 40|0);
        $665 = HEAP32[$664>>2]|0;
        __THREW__ = 0;
        (invoke_ii($665|0,($657|0))|0);
        $666 = __THREW__; __THREW__ = 0;
        $667 = $666&1;
        if ($667) {
         label = 26;
         break L4;
        } else {
         $$pre$i3$i$i91 = $871;$685 = $871;$742 = $609;
        }
       } else {
        $668 = (($659) + 4|0);
        HEAP32[$658>>2] = $668;
        $$pre$i3$i$i91 = $871;$685 = $871;$742 = $609;
       }
       while(1) {
        $669 = HEAP32[$__b>>2]|0;
        $670 = ($669|0)==(0|0);
        do {
         if ($670) {
          $699 = 1;
         } else {
          $671 = (($669) + 12|0);
          $672 = HEAP32[$671>>2]|0;
          $673 = (($669) + 16|0);
          $674 = HEAP32[$673>>2]|0;
          $675 = ($672|0)==($674|0);
          if ($675) {
           $676 = HEAP32[$669>>2]|0;
           $677 = (($676) + 36|0);
           $678 = HEAP32[$677>>2]|0;
           __THREW__ = 0;
           $679 = (invoke_ii($678|0,($669|0))|0);
           $680 = __THREW__; __THREW__ = 0;
           $681 = $680&1;
           if ($681) {
            label = 22;
            break L4;
           } else {
            $$0$i$i$i$i83 = $679;
           }
          } else {
           $682 = HEAP32[$672>>2]|0;
           $$0$i$i$i$i83 = $682;
          }
          $683 = ($$0$i$i$i$i83|0)==(-1);
          if ($683) {
           HEAP32[$__b>>2] = 0;
           $699 = 1;
           break;
          } else {
           $$pre$i$i$i85 = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i86 = ($$pre$i$i$i85|0)==(0|0);
           $699 = $phitmp$i$i$i86;
           break;
          }
         }
        } while(0);
        $684 = ($685|0)==(0|0);
        do {
         if ($684) {
          $$pre$i3$i$i91273$ph = $$pre$i3$i$i91;
          label = 271;
         } else {
          $686 = (($685) + 12|0);
          $687 = HEAP32[$686>>2]|0;
          $688 = (($685) + 16|0);
          $689 = HEAP32[$688>>2]|0;
          $690 = ($687|0)==($689|0);
          if ($690) {
           $691 = HEAP32[$685>>2]|0;
           $692 = (($691) + 36|0);
           $693 = HEAP32[$692>>2]|0;
           __THREW__ = 0;
           $694 = (invoke_ii($693|0,($685|0))|0);
           $695 = __THREW__; __THREW__ = 0;
           $696 = $695&1;
           if ($696) {
            label = 22;
            break L4;
           } else {
            $$0$i$i1$i$i89 = $694;
           }
          } else {
           $697 = HEAP32[$687>>2]|0;
           $$0$i$i1$i$i89 = $697;
          }
          $698 = ($$0$i$i1$i$i89|0)==(-1);
          if ($698) {
           HEAP32[$__e>>2] = 0;
           $$pre$i3$i$i91273$ph = 0;
           label = 271;
           break;
          } else {
           $phitmp$i4$i$i92 = ($$pre$i3$i$i91|0)==(0|0);
           $tmp$i$i94 = $699 ^ $phitmp$i4$i$i92;
           if ($tmp$i$i94) {
            $$pre$i3$i$i91273284 = $$pre$i3$i$i91;$872 = $$pre$i3$i$i91;
            break;
           } else {
            label = 278;
            break L4;
           }
          }
         }
        } while(0);
        if ((label|0) == 271) {
         label = 0;
         if ($699) {
          label = 278;
          break L4;
         } else {
          $$pre$i3$i$i91273284 = $$pre$i3$i$i91273$ph;$872 = 0;
         }
        }
        $700 = HEAP32[$__b>>2]|0;
        $701 = (($700) + 12|0);
        $702 = HEAP32[$701>>2]|0;
        $703 = (($700) + 16|0);
        $704 = HEAP32[$703>>2]|0;
        $705 = ($702|0)==($704|0);
        if ($705) {
         $706 = HEAP32[$700>>2]|0;
         $707 = (($706) + 36|0);
         $708 = HEAP32[$707>>2]|0;
         __THREW__ = 0;
         $709 = (invoke_ii($708|0,($700|0))|0);
         $710 = __THREW__; __THREW__ = 0;
         $711 = $710&1;
         if ($711) {
          label = 22;
          break L4;
         } else {
          $$0$i$i77 = $709;
         }
        } else {
         $712 = HEAP32[$702>>2]|0;
         $$0$i$i77 = $712;
        }
        $713 = HEAP32[$__ct>>2]|0;
        $714 = (($713) + 12|0);
        $715 = HEAP32[$714>>2]|0;
        __THREW__ = 0;
        $716 = (invoke_iiii($715|0,($__ct|0),2048,($$0$i$i77|0))|0);
        $717 = __THREW__; __THREW__ = 0;
        $718 = $717&1;
        if ($718) {
         label = 22;
         break L4;
        }
        if (!($716)) {
         label = 278;
         break L4;
        }
        $721 = HEAP32[$__wn>>2]|0;
        $722 = HEAP32[$0>>2]|0;
        $723 = ($721|0)==($722|0);
        if ($723) {
         __THREW__ = 0;
         invoke_viii(510,($__wb|0),($__wn|0),($0|0));
         $724 = __THREW__; __THREW__ = 0;
         $725 = $724&1;
         if ($725) {
          label = 22;
          break L4;
         }
        }
        $726 = HEAP32[$__b>>2]|0;
        $727 = (($726) + 12|0);
        $728 = HEAP32[$727>>2]|0;
        $729 = (($726) + 16|0);
        $730 = HEAP32[$729>>2]|0;
        $731 = ($728|0)==($730|0);
        if ($731) {
         $732 = HEAP32[$726>>2]|0;
         $733 = (($732) + 36|0);
         $734 = HEAP32[$733>>2]|0;
         __THREW__ = 0;
         $735 = (invoke_ii($734|0,($726|0))|0);
         $736 = __THREW__; __THREW__ = 0;
         $737 = $736&1;
         if ($737) {
          label = 22;
          break L4;
         } else {
          $$0$i$i69 = $735;
         }
        } else {
         $738 = HEAP32[$728>>2]|0;
         $$0$i$i69 = $738;
        }
        $739 = HEAP32[$__wn>>2]|0;
        $740 = (($739) + 4|0);
        HEAP32[$__wn>>2] = $740;
        HEAP32[$739>>2] = $$0$i$i69;
        $741 = (($742) + -1)|0;
        HEAP32[$__fd>>2] = $741;
        $743 = HEAP32[$__b>>2]|0;
        $744 = (($743) + 12|0);
        $745 = HEAP32[$744>>2]|0;
        $746 = (($743) + 16|0);
        $747 = HEAP32[$746>>2]|0;
        $748 = ($745|0)==($747|0);
        if ($748) {
         $749 = HEAP32[$743>>2]|0;
         $750 = (($749) + 40|0);
         $751 = HEAP32[$750>>2]|0;
         __THREW__ = 0;
         (invoke_ii($751|0,($743|0))|0);
         $752 = __THREW__; __THREW__ = 0;
         $753 = $752&1;
         if ($753) {
          label = 22;
          break L4;
         }
        } else {
         $755 = (($745) + 4|0);
         HEAP32[$744>>2] = $755;
        }
        $754 = ($741|0)>(0);
        if ($754) {
         $$pre$i3$i$i91 = $$pre$i3$i$i91273284;$685 = $872;$742 = $741;
        } else {
         $869 = $$pre$i3$i$i91273284;
         break;
        }
       }
      } else {
       $869 = $$pre$i3$i$i125;
      }
      $756 = HEAP32[$__wn>>2]|0;
      $757 = HEAP32[$__wb>>2]|0;
      $758 = ($756|0)==($757|0);
      if ($758) {
       label = 289;
       break L4;
      } else {
       $859 = $869;$860 = $868;$__trailing_sign$1 = $__trailing_sign$0252;
      }
      break;
     }
     case 3:  {
      $179 = HEAP8[$__psn>>0]|0;
      $180 = $179 & 1;
      $181 = ($180<<24>>24)==(0);
      if ($181) {
       $183 = $179&255;
       $184 = $183 >>> 1;
       $194 = $184;
      } else {
       $182 = HEAP32[$8>>2]|0;
       $194 = $182;
      }
      $185 = HEAP8[$__nsn>>0]|0;
      $186 = $185 & 1;
      $187 = ($186<<24>>24)==(0);
      if ($187) {
       $189 = $185&255;
       $190 = $189 >>> 1;
       $192 = $190;
      } else {
       $188 = HEAP32[$6>>2]|0;
       $192 = $188;
      }
      $191 = (0 - ($192))|0;
      $193 = ($194|0)==($191|0);
      if ($193) {
       $859 = $858;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
      } else {
       if ($181) {
        $196 = $179&255;
        $197 = $196 >>> 1;
        $199 = $197;
       } else {
        $195 = HEAP32[$8>>2]|0;
        $199 = $195;
       }
       $198 = ($199|0)==(0);
       if (!($198)) {
        if ($187) {
         $201 = $185&255;
         $202 = $201 >>> 1;
         $204 = $202;
        } else {
         $200 = HEAP32[$6>>2]|0;
         $204 = $200;
        }
        $203 = ($204|0)==(0);
        if (!($203)) {
         $282 = HEAP32[$__b>>2]|0;
         $283 = (($282) + 12|0);
         $284 = HEAP32[$283>>2]|0;
         $285 = (($282) + 16|0);
         $286 = HEAP32[$285>>2]|0;
         $287 = ($284|0)==($286|0);
         if ($287) {
          $288 = HEAP32[$282>>2]|0;
          $289 = (($288) + 36|0);
          $290 = HEAP32[$289>>2]|0;
          __THREW__ = 0;
          $291 = (invoke_ii($290|0,($282|0))|0);
          $292 = __THREW__; __THREW__ = 0;
          $293 = $292&1;
          if ($293) {
           label = 26;
           break L4;
          }
          $$pre264 = HEAP8[$__psn>>0]|0;
          $$0$i$i113 = $291;$296 = $$pre264;
         } else {
          $294 = HEAP32[$284>>2]|0;
          $$0$i$i113 = $294;$296 = $179;
         }
         $295 = $296 & 1;
         $297 = ($295<<24>>24)==(0);
         $298 = HEAP32[$9>>2]|0;
         $$289 = $297 ? $8 : $298;
         $299 = HEAP32[$$289>>2]|0;
         $300 = ($$0$i$i113|0)==($299|0);
         $301 = HEAP32[$__b>>2]|0;
         $302 = (($301) + 12|0);
         $303 = HEAP32[$302>>2]|0;
         $304 = (($301) + 16|0);
         $305 = HEAP32[$304>>2]|0;
         $306 = ($303|0)==($305|0);
         if ($300) {
          if ($306) {
           $307 = HEAP32[$301>>2]|0;
           $308 = (($307) + 40|0);
           $309 = HEAP32[$308>>2]|0;
           __THREW__ = 0;
           (invoke_ii($309|0,($301|0))|0);
           $310 = __THREW__; __THREW__ = 0;
           $311 = $310&1;
           if ($311) {
            label = 26;
            break L4;
           }
          } else {
           $312 = (($303) + 4|0);
           HEAP32[$302>>2] = $312;
          }
          $313 = HEAP8[$__psn>>0]|0;
          $314 = $313 & 1;
          $315 = ($314<<24>>24)==(0);
          if ($315) {
           $317 = $313&255;
           $318 = $317 >>> 1;
           $320 = $318;
          } else {
           $316 = HEAP32[$8>>2]|0;
           $320 = $316;
          }
          $319 = ($320>>>0)>(1);
          $__psn$__trailing_sign$09 = $319 ? $__psn : $__trailing_sign$0252;
          $859 = $858;$860 = $855;$__trailing_sign$1 = $__psn$__trailing_sign$09;
          break L28;
         }
         if ($306) {
          $321 = HEAP32[$301>>2]|0;
          $322 = (($321) + 36|0);
          $323 = HEAP32[$322>>2]|0;
          __THREW__ = 0;
          $324 = (invoke_ii($323|0,($301|0))|0);
          $325 = __THREW__; __THREW__ = 0;
          $326 = $325&1;
          if ($326) {
           label = 26;
           break L4;
          } else {
           $$0$i$i135 = $324;
          }
         } else {
          $327 = HEAP32[$303>>2]|0;
          $$0$i$i135 = $327;
         }
         $328 = HEAP8[$__nsn>>0]|0;
         $329 = $328 & 1;
         $330 = ($329<<24>>24)==(0);
         $331 = HEAP32[$7>>2]|0;
         $$290 = $330 ? $6 : $331;
         $332 = HEAP32[$$290>>2]|0;
         $333 = ($$0$i$i135|0)==($332|0);
         if (!($333)) {
          label = 135;
          break L4;
         }
         $334 = HEAP32[$__b>>2]|0;
         $335 = (($334) + 12|0);
         $336 = HEAP32[$335>>2]|0;
         $337 = (($334) + 16|0);
         $338 = HEAP32[$337>>2]|0;
         $339 = ($336|0)==($338|0);
         if ($339) {
          $340 = HEAP32[$334>>2]|0;
          $341 = (($340) + 40|0);
          $342 = HEAP32[$341>>2]|0;
          __THREW__ = 0;
          (invoke_ii($342|0,($334|0))|0);
          $343 = __THREW__; __THREW__ = 0;
          $344 = $343&1;
          if ($344) {
           label = 26;
           break L4;
          }
         } else {
          $345 = (($336) + 4|0);
          HEAP32[$335>>2] = $345;
         }
         HEAP8[$__neg>>0] = 1;
         $346 = HEAP8[$__nsn>>0]|0;
         $347 = $346 & 1;
         $348 = ($347<<24>>24)==(0);
         if ($348) {
          $350 = $346&255;
          $351 = $350 >>> 1;
          $353 = $351;
         } else {
          $349 = HEAP32[$6>>2]|0;
          $353 = $349;
         }
         $352 = ($353>>>0)>(1);
         $__nsn$__trailing_sign$010 = $352 ? $__nsn : $__trailing_sign$0252;
         $859 = $858;$860 = $855;$__trailing_sign$1 = $__nsn$__trailing_sign$010;
         break L28;
        }
       }
       if ($181) {
        $206 = $179&255;
        $207 = $206 >>> 1;
        $209 = $207;
       } else {
        $205 = HEAP32[$8>>2]|0;
        $209 = $205;
       }
       $208 = ($209|0)==(0);
       $210 = HEAP32[$__b>>2]|0;
       $211 = (($210) + 12|0);
       $212 = HEAP32[$211>>2]|0;
       $213 = (($210) + 16|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = ($212|0)==($214|0);
       if ($208) {
        if ($215) {
         $249 = HEAP32[$210>>2]|0;
         $250 = (($249) + 36|0);
         $251 = HEAP32[$250>>2]|0;
         __THREW__ = 0;
         $252 = (invoke_ii($251|0,($210|0))|0);
         $253 = __THREW__; __THREW__ = 0;
         $254 = $253&1;
         if ($254) {
          label = 26;
          break L4;
         }
         $$pre = HEAP8[$__nsn>>0]|0;
         $$0$i$i101 = $252;$257 = $$pre;
        } else {
         $255 = HEAP32[$212>>2]|0;
         $$0$i$i101 = $255;$257 = $185;
        }
        $256 = $257 & 1;
        $258 = ($256<<24>>24)==(0);
        $259 = HEAP32[$7>>2]|0;
        $$288 = $258 ? $6 : $259;
        $260 = HEAP32[$$288>>2]|0;
        $261 = ($$0$i$i101|0)==($260|0);
        if (!($261)) {
         $859 = $858;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
         break L28;
        }
        $262 = HEAP32[$__b>>2]|0;
        $263 = (($262) + 12|0);
        $264 = HEAP32[$263>>2]|0;
        $265 = (($262) + 16|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = ($264|0)==($266|0);
        if ($267) {
         $268 = HEAP32[$262>>2]|0;
         $269 = (($268) + 40|0);
         $270 = HEAP32[$269>>2]|0;
         __THREW__ = 0;
         (invoke_ii($270|0,($262|0))|0);
         $271 = __THREW__; __THREW__ = 0;
         $272 = $271&1;
         if ($272) {
          label = 26;
          break L4;
         }
        } else {
         $273 = (($264) + 4|0);
         HEAP32[$263>>2] = $273;
        }
        HEAP8[$__neg>>0] = 1;
        $274 = HEAP8[$__nsn>>0]|0;
        $275 = $274 & 1;
        $276 = ($275<<24>>24)==(0);
        if ($276) {
         $278 = $274&255;
         $279 = $278 >>> 1;
         $281 = $279;
        } else {
         $277 = HEAP32[$6>>2]|0;
         $281 = $277;
        }
        $280 = ($281>>>0)>(1);
        $__nsn$__trailing_sign$0 = $280 ? $__nsn : $__trailing_sign$0252;
        $859 = $858;$860 = $855;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L28;
       }
       if ($215) {
        $216 = HEAP32[$210>>2]|0;
        $217 = (($216) + 36|0);
        $218 = HEAP32[$217>>2]|0;
        __THREW__ = 0;
        $219 = (invoke_ii($218|0,($210|0))|0);
        $220 = __THREW__; __THREW__ = 0;
        $221 = $220&1;
        if ($221) {
         label = 26;
         break L4;
        }
        $$pre263 = HEAP8[$__psn>>0]|0;
        $$0$i$i80 = $219;$224 = $$pre263;
       } else {
        $222 = HEAP32[$212>>2]|0;
        $$0$i$i80 = $222;$224 = $179;
       }
       $223 = $224 & 1;
       $225 = ($223<<24>>24)==(0);
       $226 = HEAP32[$9>>2]|0;
       $$ = $225 ? $8 : $226;
       $227 = HEAP32[$$>>2]|0;
       $228 = ($$0$i$i80|0)==($227|0);
       if (!($228)) {
        HEAP8[$__neg>>0] = 1;
        $859 = $858;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
        break L28;
       }
       $229 = HEAP32[$__b>>2]|0;
       $230 = (($229) + 12|0);
       $231 = HEAP32[$230>>2]|0;
       $232 = (($229) + 16|0);
       $233 = HEAP32[$232>>2]|0;
       $234 = ($231|0)==($233|0);
       if ($234) {
        $235 = HEAP32[$229>>2]|0;
        $236 = (($235) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        __THREW__ = 0;
        (invoke_ii($237|0,($229|0))|0);
        $238 = __THREW__; __THREW__ = 0;
        $239 = $238&1;
        if ($239) {
         label = 26;
         break L4;
        }
       } else {
        $240 = (($231) + 4|0);
        HEAP32[$230>>2] = $240;
       }
       $241 = HEAP8[$__psn>>0]|0;
       $242 = $241 & 1;
       $243 = ($242<<24>>24)==(0);
       if ($243) {
        $245 = $241&255;
        $246 = $245 >>> 1;
        $248 = $246;
       } else {
        $244 = HEAP32[$8>>2]|0;
        $248 = $244;
       }
       $247 = ($248>>>0)>(1);
       $__psn$__trailing_sign$0 = $247 ? $__psn : $__trailing_sign$0252;
       $859 = $858;$860 = $855;$__trailing_sign$1 = $__psn$__trailing_sign$0;
      }
      break;
     }
     case 2:  {
      $356 = ($__trailing_sign$0252|0)!=(0|0);
      $357 = ($__p$0250>>>0)<(2);
      $or$cond = $356 | $357;
      if (!($or$cond)) {
       $358 = ($__p$0250|0)==(2);
       if ($358) {
        $359 = HEAP8[$16>>0]|0;
        $360 = ($359<<24>>24)!=(0);
        $361 = $360;
       } else {
        $361 = 0;
       }
       $brmerge = $11 | $361;
       if (!($brmerge)) {
        $859 = $858;$860 = $855;$__trailing_sign$1 = 0;
        break L28;
       }
      }
      $362 = HEAP8[$__sym>>0]|0;
      $363 = $362 & 1;
      $364 = ($363<<24>>24)==(0);
      $365 = HEAP32[$13>>2]|0;
      $$291 = $364 ? $12 : $365;
      $366 = ($__p$0250|0)==(0);
      L268: do {
       if ($366) {
        $$pre$i3$i$i182 = $858;$430 = $362;$440 = $$291;$457 = $858;
       } else {
        $367 = (($__p$0250) + -1)|0;
        $368 = (($__pat) + ($367)|0);
        $369 = HEAP8[$368>>0]|0;
        $switch = ($369&255)<(2);
        if ($switch) {
         $371 = $362;$381 = $$291;
         while(1) {
          $370 = $371 & 1;
          $372 = ($370<<24>>24)==(0);
          if ($372) {
           $375 = $371&255;
           $376 = $375 >>> 1;
           $378 = $12;$379 = $376;
          } else {
           $373 = HEAP32[$13>>2]|0;
           $374 = HEAP32[$12>>2]|0;
           $378 = $373;$379 = $374;
          }
          $377 = (($378) + ($379<<2)|0);
          $380 = ($381|0)==($377|0);
          if ($380) {
           $391 = $371;
           break;
          }
          $382 = HEAP32[$381>>2]|0;
          $383 = HEAP32[$__ct>>2]|0;
          $384 = (($383) + 12|0);
          $385 = HEAP32[$384>>2]|0;
          __THREW__ = 0;
          $386 = (invoke_iiii($385|0,($__ct|0),8192,($382|0))|0);
          $387 = __THREW__; __THREW__ = 0;
          $388 = $387&1;
          if ($388) {
           label = 23;
           break L4;
          }
          if (!($386)) {
           label = 148;
           break;
          }
          $389 = (($381) + 4|0);
          $$pre265 = HEAP8[$__sym>>0]|0;
          $371 = $$pre265;$381 = $389;
         }
         if ((label|0) == 148) {
          label = 0;
          $$pre266 = HEAP8[$__sym>>0]|0;
          $391 = $$pre266;
         }
         $390 = $391 & 1;
         $392 = ($390<<24>>24)==(0);
         $393 = HEAP32[$13>>2]|0;
         $$292 = $392 ? $12 : $393;
         $394 = $381;
         $395 = $$292;
         $396 = (($394) - ($395))|0;
         $397 = $396 >> 2;
         $398 = HEAP8[$__spaces>>0]|0;
         $399 = $398 & 1;
         $400 = ($399<<24>>24)==(0);
         if ($400) {
          $402 = $398&255;
          $403 = $402 >>> 1;
          $405 = $403;
         } else {
          $401 = HEAP32[$14>>2]|0;
          $405 = $401;
         }
         $404 = ($397>>>0)>($405>>>0);
         L286: do {
          if (!($404)) {
           if ($400) {
            $409 = $398&255;
            $410 = $409 >>> 1;
            $$sum280 = (($410) - ($397))|0;
            $411 = (($14) + ($$sum280<<2)|0);
            $412 = $398&255;
            $413 = $412 >>> 1;
            $415 = $14;$416 = $413;$419 = $411;
           } else {
            $406 = HEAP32[$15>>2]|0;
            $407 = HEAP32[$14>>2]|0;
            $$sum = (($407) - ($397))|0;
            $408 = (($406) + ($$sum<<2)|0);
            $415 = $406;$416 = $407;$419 = $408;
           }
           $414 = (($415) + ($416<<2)|0);
           $417 = HEAP32[$13>>2]|0;
           $$293 = $392 ? $12 : $417;
           $418 = ($419|0)==($414|0);
           if ($418) {
            $$pre$i3$i$i182 = $858;$430 = $391;$440 = $381;$457 = $858;
            break L268;
           } else {
            $421 = $419;$423 = $$293;
           }
           while(1) {
            $420 = HEAP32[$421>>2]|0;
            $422 = HEAP32[$423>>2]|0;
            $424 = ($420|0)==($422|0);
            if (!($424)) {
             break L286;
            }
            $425 = (($421) + 4|0);
            $426 = (($423) + 4|0);
            $427 = ($425|0)==($414|0);
            if ($427) {
             $$pre$i3$i$i182 = $858;$430 = $391;$440 = $381;$457 = $858;
             break L268;
            } else {
             $421 = $425;$423 = $426;
            }
           }
          }
         } while(0);
         $428 = HEAP32[$13>>2]|0;
         $$294 = $392 ? $12 : $428;
         $$pre$i3$i$i182 = $858;$430 = $391;$440 = $$294;$457 = $858;
        } else {
         $$pre$i3$i$i182 = $858;$430 = $362;$440 = $$291;$457 = $858;
        }
       }
      } while(0);
      L296: while(1) {
       $429 = $430 & 1;
       $431 = ($429<<24>>24)==(0);
       if ($431) {
        $434 = $430&255;
        $435 = $434 >>> 1;
        $437 = $12;$438 = $435;
       } else {
        $432 = HEAP32[$13>>2]|0;
        $433 = HEAP32[$12>>2]|0;
        $437 = $432;$438 = $433;
       }
       $436 = (($437) + ($438<<2)|0);
       $439 = ($440|0)==($436|0);
       if ($439) {
        $862 = $$pre$i3$i$i182;
        break;
       }
       $441 = HEAP32[$__b>>2]|0;
       $442 = ($441|0)==(0|0);
       do {
        if ($442) {
         $471 = 1;
        } else {
         $443 = (($441) + 12|0);
         $444 = HEAP32[$443>>2]|0;
         $445 = (($441) + 16|0);
         $446 = HEAP32[$445>>2]|0;
         $447 = ($444|0)==($446|0);
         if ($447) {
          $448 = HEAP32[$441>>2]|0;
          $449 = (($448) + 36|0);
          $450 = HEAP32[$449>>2]|0;
          __THREW__ = 0;
          $451 = (invoke_ii($450|0,($441|0))|0);
          $452 = __THREW__; __THREW__ = 0;
          $453 = $452&1;
          if ($453) {
           label = 24;
           break L4;
          } else {
           $$0$i$i$i$i174 = $451;
          }
         } else {
          $454 = HEAP32[$444>>2]|0;
          $$0$i$i$i$i174 = $454;
         }
         $455 = ($$0$i$i$i$i174|0)==(-1);
         if ($455) {
          HEAP32[$__b>>2] = 0;
          $471 = 1;
          break;
         } else {
          $$pre$i$i$i176 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i177 = ($$pre$i$i$i176|0)==(0|0);
          $471 = $phitmp$i$i$i177;
          break;
         }
        }
       } while(0);
       $456 = ($457|0)==(0|0);
       do {
        if ($456) {
         $$pre$i3$i$i182269 = $$pre$i3$i$i182;
         label = 178;
        } else {
         $458 = (($457) + 12|0);
         $459 = HEAP32[$458>>2]|0;
         $460 = (($457) + 16|0);
         $461 = HEAP32[$460>>2]|0;
         $462 = ($459|0)==($461|0);
         if ($462) {
          $463 = HEAP32[$457>>2]|0;
          $464 = (($463) + 36|0);
          $465 = HEAP32[$464>>2]|0;
          __THREW__ = 0;
          $466 = (invoke_ii($465|0,($457|0))|0);
          $467 = __THREW__; __THREW__ = 0;
          $468 = $467&1;
          if ($468) {
           label = 24;
           break L4;
          } else {
           $$0$i$i1$i$i180 = $466;
          }
         } else {
          $469 = HEAP32[$459>>2]|0;
          $$0$i$i1$i$i180 = $469;
         }
         $470 = ($$0$i$i1$i$i180|0)==(-1);
         if ($470) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i182269 = 0;
          label = 178;
          break;
         } else {
          $phitmp$i4$i$i183 = ($$pre$i3$i$i182|0)==(0|0);
          $tmp$i$i185 = $471 ^ $phitmp$i4$i$i183;
          if ($tmp$i$i185) {
           $$pre$i3$i$i182268 = $$pre$i3$i$i182;$863 = $$pre$i3$i$i182;
           break;
          } else {
           $862 = $$pre$i3$i$i182;
           break L296;
          }
         }
        }
       } while(0);
       if ((label|0) == 178) {
        label = 0;
        if ($471) {
         $862 = $$pre$i3$i$i182269;
         break;
        } else {
         $$pre$i3$i$i182268 = $$pre$i3$i$i182269;$863 = 0;
        }
       }
       $472 = HEAP32[$__b>>2]|0;
       $473 = (($472) + 12|0);
       $474 = HEAP32[$473>>2]|0;
       $475 = (($472) + 16|0);
       $476 = HEAP32[$475>>2]|0;
       $477 = ($474|0)==($476|0);
       if ($477) {
        $478 = HEAP32[$472>>2]|0;
        $479 = (($478) + 36|0);
        $480 = HEAP32[$479>>2]|0;
        __THREW__ = 0;
        $481 = (invoke_ii($480|0,($472|0))|0);
        $482 = __THREW__; __THREW__ = 0;
        $483 = $482&1;
        if ($483) {
         label = 24;
         break L4;
        } else {
         $$0$i$i170 = $481;
        }
       } else {
        $484 = HEAP32[$474>>2]|0;
        $$0$i$i170 = $484;
       }
       $485 = HEAP32[$440>>2]|0;
       $486 = ($$0$i$i170|0)==($485|0);
       if (!($486)) {
        $862 = $$pre$i3$i$i182268;
        break;
       }
       $487 = HEAP32[$__b>>2]|0;
       $488 = (($487) + 12|0);
       $489 = HEAP32[$488>>2]|0;
       $490 = (($487) + 16|0);
       $491 = HEAP32[$490>>2]|0;
       $492 = ($489|0)==($491|0);
       if ($492) {
        $493 = HEAP32[$487>>2]|0;
        $494 = (($493) + 40|0);
        $495 = HEAP32[$494>>2]|0;
        __THREW__ = 0;
        (invoke_ii($495|0,($487|0))|0);
        $496 = __THREW__; __THREW__ = 0;
        $497 = $496&1;
        if ($497) {
         label = 24;
         break L4;
        }
       } else {
        $498 = (($489) + 4|0);
        HEAP32[$488>>2] = $498;
       }
       $499 = (($440) + 4|0);
       $$pre267 = HEAP8[$__sym>>0]|0;
       $$pre$i3$i$i182 = $$pre$i3$i$i182268;$430 = $$pre267;$440 = $499;$457 = $863;
      }
      if ($11) {
       $500 = HEAP8[$__sym>>0]|0;
       $501 = $500 & 1;
       $502 = ($501<<24>>24)==(0);
       if ($502) {
        $505 = $500&255;
        $506 = $505 >>> 1;
        $508 = $12;$509 = $506;
       } else {
        $503 = HEAP32[$13>>2]|0;
        $504 = HEAP32[$12>>2]|0;
        $508 = $503;$509 = $504;
       }
       $507 = (($508) + ($509<<2)|0);
       $510 = ($440|0)==($507|0);
       if ($510) {
        $859 = $862;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
       } else {
        label = 193;
        break L4;
       }
      } else {
       $859 = $862;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
      }
      break;
     }
     default: {
      $859 = $858;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
     }
     }
    } while(0);
    L340: do {
     if ((label|0) == 43) {
      label = 0;
      $112 = ($__p$0250|0)==(3);
      if ($112) {
       $843 = $855;$857 = $858;$__trailing_sign$0$lcssa = $__trailing_sign$0252;
       label = 291;
       break L4;
      } else {
       $$pre$i3$i$i51 = $858;$129 = $858;
      }
      while(1) {
       $113 = HEAP32[$__b>>2]|0;
       $114 = ($113|0)==(0|0);
       do {
        if ($114) {
         $143 = 1;
        } else {
         $115 = (($113) + 12|0);
         $116 = HEAP32[$115>>2]|0;
         $117 = (($113) + 16|0);
         $118 = HEAP32[$117>>2]|0;
         $119 = ($116|0)==($118|0);
         if ($119) {
          $120 = HEAP32[$113>>2]|0;
          $121 = (($120) + 36|0);
          $122 = HEAP32[$121>>2]|0;
          __THREW__ = 0;
          $123 = (invoke_ii($122|0,($113|0))|0);
          $124 = __THREW__; __THREW__ = 0;
          $125 = $124&1;
          if ($125) {
           label = 25;
           break L4;
          } else {
           $$0$i$i$i$i43 = $123;
          }
         } else {
          $126 = HEAP32[$116>>2]|0;
          $$0$i$i$i$i43 = $126;
         }
         $127 = ($$0$i$i$i$i43|0)==(-1);
         if ($127) {
          HEAP32[$__b>>2] = 0;
          $143 = 1;
          break;
         } else {
          $$pre$i$i$i45 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i46 = ($$pre$i$i$i45|0)==(0|0);
          $143 = $phitmp$i$i$i46;
          break;
         }
        }
       } while(0);
       $128 = ($129|0)==(0|0);
       do {
        if ($128) {
         $$pre$i3$i$i51260 = $$pre$i3$i$i51;
         label = 57;
        } else {
         $130 = (($129) + 12|0);
         $131 = HEAP32[$130>>2]|0;
         $132 = (($129) + 16|0);
         $133 = HEAP32[$132>>2]|0;
         $134 = ($131|0)==($133|0);
         if ($134) {
          $135 = HEAP32[$129>>2]|0;
          $136 = (($135) + 36|0);
          $137 = HEAP32[$136>>2]|0;
          __THREW__ = 0;
          $138 = (invoke_ii($137|0,($129|0))|0);
          $139 = __THREW__; __THREW__ = 0;
          $140 = $139&1;
          if ($140) {
           label = 25;
           break L4;
          } else {
           $$0$i$i1$i$i49 = $138;
          }
         } else {
          $141 = HEAP32[$131>>2]|0;
          $$0$i$i1$i$i49 = $141;
         }
         $142 = ($$0$i$i1$i$i49|0)==(-1);
         if ($142) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i51260 = 0;
          label = 57;
          break;
         } else {
          $phitmp$i4$i$i52 = ($$pre$i3$i$i51|0)==(0|0);
          $tmp$i$i54 = $143 ^ $phitmp$i4$i$i52;
          if ($tmp$i$i54) {
           $$pre$i3$i$i51262 = $$pre$i3$i$i51;$861 = $$pre$i3$i$i51;
           break;
          } else {
           $859 = $$pre$i3$i$i51;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
           break L340;
          }
         }
        }
       } while(0);
       if ((label|0) == 57) {
        label = 0;
        if ($143) {
         $859 = $$pre$i3$i$i51260;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
         break L340;
        } else {
         $$pre$i3$i$i51262 = $$pre$i3$i$i51260;$861 = 0;
        }
       }
       $144 = HEAP32[$__b>>2]|0;
       $145 = (($144) + 12|0);
       $146 = HEAP32[$145>>2]|0;
       $147 = (($144) + 16|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = ($146|0)==($148|0);
       if ($149) {
        $150 = HEAP32[$144>>2]|0;
        $151 = (($150) + 36|0);
        $152 = HEAP32[$151>>2]|0;
        __THREW__ = 0;
        $153 = (invoke_ii($152|0,($144|0))|0);
        $154 = __THREW__; __THREW__ = 0;
        $155 = $154&1;
        if ($155) {
         label = 25;
         break L4;
        } else {
         $$0$i$i58 = $153;
        }
       } else {
        $156 = HEAP32[$146>>2]|0;
        $$0$i$i58 = $156;
       }
       $157 = HEAP32[$__ct>>2]|0;
       $158 = (($157) + 12|0);
       $159 = HEAP32[$158>>2]|0;
       __THREW__ = 0;
       $160 = (invoke_iiii($159|0,($__ct|0),8192,($$0$i$i58|0))|0);
       $161 = __THREW__; __THREW__ = 0;
       $162 = $161&1;
       if ($162) {
        label = 25;
        break L4;
       }
       if (!($160)) {
        $859 = $$pre$i3$i$i51262;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
        break L340;
       }
       $163 = HEAP32[$__b>>2]|0;
       $164 = (($163) + 12|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = (($163) + 16|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($165|0)==($167|0);
       if ($168) {
        $169 = HEAP32[$163>>2]|0;
        $170 = (($169) + 40|0);
        $171 = HEAP32[$170>>2]|0;
        __THREW__ = 0;
        $172 = (invoke_ii($171|0,($163|0))|0);
        $173 = __THREW__; __THREW__ = 0;
        $174 = $173&1;
        if ($174) {
         label = 25;
         break L4;
        } else {
         $$0$i$i64 = $172;
        }
       } else {
        $175 = (($165) + 4|0);
        HEAP32[$164>>2] = $175;
        $176 = HEAP32[$165>>2]|0;
        $$0$i$i64 = $176;
       }
       __THREW__ = 0;
       invoke_vii(509,($__spaces|0),($$0$i$i64|0));
       $177 = __THREW__; __THREW__ = 0;
       $178 = $177&1;
       if ($178) {
        label = 25;
        break L4;
       } else {
        $$pre$i3$i$i51 = $$pre$i3$i$i51262;$129 = $861;
       }
      }
     }
    } while(0);
    $761 = (($__p$0250) + 1)|0;
    $762 = ($761>>>0)<(4);
    if ($762) {
     $855 = $860;$__p$0250 = $761;$__trailing_sign$0252 = $__trailing_sign$1;
    } else {
     $843 = $860;$857 = $859;$__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 291;
     break;
    }
   }
   L377:    switch (label|0) {
    case 21: {
     $54 = ___cxa_find_matching_catch()|0;
     $55 = tempRet0;
     $lpad$phi$index = $54;$lpad$phi$index8 = $55;
     break L1;
     break;
    }
    case 22: {
     $56 = ___cxa_find_matching_catch()|0;
     $57 = tempRet0;
     $lpad$phi$index = $56;$lpad$phi$index8 = $57;
     break L1;
     break;
    }
    case 23: {
     $58 = ___cxa_find_matching_catch()|0;
     $59 = tempRet0;
     $lpad$phi$index = $58;$lpad$phi$index8 = $59;
     break L1;
     break;
    }
    case 24: {
     $60 = ___cxa_find_matching_catch()|0;
     $61 = tempRet0;
     $lpad$phi$index = $60;$lpad$phi$index8 = $61;
     break L1;
     break;
    }
    case 25: {
     $62 = ___cxa_find_matching_catch()|0;
     $63 = tempRet0;
     $lpad$phi$index = $62;$lpad$phi$index8 = $63;
     break L1;
     break;
    }
    case 26: {
     $64 = ___cxa_find_matching_catch()|0;
     $65 = tempRet0;
     $lpad$phi$index = $64;$lpad$phi$index8 = $65;
     break L1;
     break;
    }
    case 42: {
     $110 = HEAP32[$__err>>2]|0;
     $111 = $110 | 4;
     HEAP32[$__err>>2] = $111;
     $$0 = 0;
     break;
    }
    case 135: {
     $354 = HEAP32[$__err>>2]|0;
     $355 = $354 | 4;
     HEAP32[$__err>>2] = $355;
     $$0 = 0;
     break;
    }
    case 193: {
     $511 = HEAP32[$__err>>2]|0;
     $512 = $511 | 4;
     HEAP32[$__err>>2] = $512;
     $$0 = 0;
     break;
    }
    case 254: {
     $655 = HEAP32[$__err>>2]|0;
     $656 = $655 | 4;
     HEAP32[$__err>>2] = $656;
     $$0 = 0;
     break;
    }
    case 278: {
     $719 = HEAP32[$__err>>2]|0;
     $720 = $719 | 4;
     HEAP32[$__err>>2] = $720;
     $$0 = 0;
     break;
    }
    case 289: {
     $759 = HEAP32[$__err>>2]|0;
     $760 = $759 | 4;
     HEAP32[$__err>>2] = $760;
     $$0 = 0;
     break;
    }
    case 291: {
     $763 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L390: do {
      if (!($763)) {
       $764 = (($__trailing_sign$0$lcssa) + 4|0);
       $765 = (($__trailing_sign$0$lcssa) + 8|0);
       $$pre$i3$i$i = $857;$790 = $857;$__i$0 = 1;
       L392: while(1) {
        $766 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $767 = $766 & 1;
        $768 = ($767<<24>>24)==(0);
        if ($768) {
         $770 = $766&255;
         $771 = $770 >>> 1;
         $773 = $771;
        } else {
         $769 = HEAP32[$764>>2]|0;
         $773 = $769;
        }
        $772 = ($__i$0>>>0)<($773>>>0);
        if (!($772)) {
         break L390;
        }
        $774 = HEAP32[$__b>>2]|0;
        $775 = ($774|0)==(0|0);
        do {
         if ($775) {
          $804 = 1;
         } else {
          $776 = (($774) + 12|0);
          $777 = HEAP32[$776>>2]|0;
          $778 = (($774) + 16|0);
          $779 = HEAP32[$778>>2]|0;
          $780 = ($777|0)==($779|0);
          if ($780) {
           $781 = HEAP32[$774>>2]|0;
           $782 = (($781) + 36|0);
           $783 = HEAP32[$782>>2]|0;
           __THREW__ = 0;
           $784 = (invoke_ii($783|0,($774|0))|0);
           $785 = __THREW__; __THREW__ = 0;
           $786 = $785&1;
           if ($786) {
            label = 20;
            break L392;
           } else {
            $$0$i$i$i$i = $784;
           }
          } else {
           $787 = HEAP32[$777>>2]|0;
           $$0$i$i$i$i = $787;
          }
          $788 = ($$0$i$i$i$i|0)==(-1);
          if ($788) {
           HEAP32[$__b>>2] = 0;
           $804 = 1;
           break;
          } else {
           $$pre$i$i$i = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
           $804 = $phitmp$i$i$i;
           break;
          }
         }
        } while(0);
        $789 = ($790|0)==(0|0);
        do {
         if ($789) {
          $$pre$i3$i$i279$ph = $$pre$i3$i$i;
          label = 310;
         } else {
          $791 = (($790) + 12|0);
          $792 = HEAP32[$791>>2]|0;
          $793 = (($790) + 16|0);
          $794 = HEAP32[$793>>2]|0;
          $795 = ($792|0)==($794|0);
          if ($795) {
           $796 = HEAP32[$790>>2]|0;
           $797 = (($796) + 36|0);
           $798 = HEAP32[$797>>2]|0;
           __THREW__ = 0;
           $799 = (invoke_ii($798|0,($790|0))|0);
           $800 = __THREW__; __THREW__ = 0;
           $801 = $800&1;
           if ($801) {
            label = 20;
            break L392;
           } else {
            $$0$i$i1$i$i = $799;
           }
          } else {
           $802 = HEAP32[$792>>2]|0;
           $$0$i$i1$i$i = $802;
          }
          $803 = ($$0$i$i1$i$i|0)==(-1);
          if ($803) {
           HEAP32[$__e>>2] = 0;
           $$pre$i3$i$i279$ph = 0;
           label = 310;
           break;
          } else {
           $phitmp$i4$i$i = ($$pre$i3$i$i|0)==(0|0);
           $tmp$i$i = $804 ^ $phitmp$i4$i$i;
           if ($tmp$i$i) {
            $$pre$i3$i$i279287 = $$pre$i3$i$i;$873 = $$pre$i3$i$i;
            break;
           } else {
            label = 318;
            break L392;
           }
          }
         }
        } while(0);
        if ((label|0) == 310) {
         label = 0;
         if ($804) {
          label = 318;
          break;
         } else {
          $$pre$i3$i$i279287 = $$pre$i3$i$i279$ph;$873 = 0;
         }
        }
        $805 = HEAP32[$__b>>2]|0;
        $806 = (($805) + 12|0);
        $807 = HEAP32[$806>>2]|0;
        $808 = (($805) + 16|0);
        $809 = HEAP32[$808>>2]|0;
        $810 = ($807|0)==($809|0);
        if ($810) {
         $811 = HEAP32[$805>>2]|0;
         $812 = (($811) + 36|0);
         $813 = HEAP32[$812>>2]|0;
         __THREW__ = 0;
         $814 = (invoke_ii($813|0,($805|0))|0);
         $815 = __THREW__; __THREW__ = 0;
         $816 = $815&1;
         if ($816) {
          label = 20;
          break;
         } else {
          $$0$i$i = $814;
         }
        } else {
         $817 = HEAP32[$807>>2]|0;
         $$0$i$i = $817;
        }
        $818 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $819 = $818 & 1;
        $820 = ($819<<24>>24)==(0);
        if ($820) {
         $823 = $764;
        } else {
         $821 = HEAP32[$765>>2]|0;
         $823 = $821;
        }
        $822 = (($823) + ($__i$0<<2)|0);
        $824 = HEAP32[$822>>2]|0;
        $825 = ($$0$i$i|0)==($824|0);
        if (!($825)) {
         label = 318;
         break;
        }
        $828 = (($__i$0) + 1)|0;
        $829 = HEAP32[$__b>>2]|0;
        $830 = (($829) + 12|0);
        $831 = HEAP32[$830>>2]|0;
        $832 = (($829) + 16|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = ($831|0)==($833|0);
        if ($834) {
         $835 = HEAP32[$829>>2]|0;
         $836 = (($835) + 40|0);
         $837 = HEAP32[$836>>2]|0;
         __THREW__ = 0;
         (invoke_ii($837|0,($829|0))|0);
         $838 = __THREW__; __THREW__ = 0;
         $839 = $838&1;
         if ($839) {
          label = 20;
          break;
         } else {
          $$pre$i3$i$i = $$pre$i3$i$i279287;$790 = $873;$__i$0 = $828;
          continue;
         }
        } else {
         $840 = (($831) + 4|0);
         HEAP32[$830>>2] = $840;
         $$pre$i3$i$i = $$pre$i3$i$i279287;$790 = $873;$__i$0 = $828;
         continue;
        }
       }
       if ((label|0) == 20) {
        $52 = ___cxa_find_matching_catch()|0;
        $53 = tempRet0;
        $lpad$phi$index = $52;$lpad$phi$index8 = $53;
        break L1;
       }
       else if ((label|0) == 318) {
        $826 = HEAP32[$__err>>2]|0;
        $827 = $826 | 4;
        HEAP32[$__err>>2] = $827;
        $$0 = 0;
        break L377;
       }
      }
     } while(0);
     $841 = HEAP32[$__gb>>2]|0;
     $842 = ($841|0)==($843|0);
     if ($842) {
      $$0 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$841,$843,$__et);
      $844 = HEAP32[$__et>>2]|0;
      $845 = ($844|0)==(0);
      if ($845) {
       $$0 = 1;
      } else {
       $846 = HEAP32[$__err>>2]|0;
       $847 = $846 | 4;
       HEAP32[$__err>>2] = $847;
       $$0 = 0;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $848 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $849 = ($848|0)==(0|0);
   if ($849) {
    STACKTOP = sp;return ($$0|0);
   }
   $850 = HEAP32[$1>>2]|0;
   __THREW__ = 0;
   invoke_vi($850|0,($848|0));
   $851 = __THREW__; __THREW__ = 0;
   $852 = $851&1;
   if ($852) {
    $853 = ___cxa_find_matching_catch(0|0)|0;
    $854 = tempRet0;
    ___clang_call_terminate($853);
    // unreachable;
   } else {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $68 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $69 = ($68|0)==(0|0);
 if ($69) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $70 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi($70|0,($68|0));
 $71 = __THREW__; __THREW__ = 0;
 $72 = $71&1;
 if ($72) {
  $73 = ___cxa_find_matching_catch(0|0)|0;
  $74 = tempRet0;
  ___clang_call_terminate($73);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0111 = 0, $$0112 = 0, $$013 = 0, $$014 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$05 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $__wbuf = sp + 16|0;
 $__wb = sp + 8|0;
 $__wn = sp + 420|0;
 $__loc = sp;
 $__neg = sp + 424|0;
 $0 = sp + 416|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 498;
 $2 = (($__wbuf) + 400|0);
 __THREW__ = 0;
 invoke_vii(431,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $31 = ___cxa_find_matching_catch()|0;
  $32 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$0111 = $32;$$013 = $31;$94 = $__wbuf;
 } else {
  __THREW__ = 0;
  $5 = (invoke_iii(432,($__loc|0),(10848|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  L4: do {
   if (!($7)) {
    HEAP8[$__neg>>0] = 0;
    $8 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $8;
    $9 = (($__iob) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
    $11 = (invoke_iiiiiiiiiiii(507,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($10|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($2|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     if ($11) {
      $14 = HEAP8[$__v>>0]|0;
      $15 = $14 & 1;
      $16 = ($15<<24>>24)==(0);
      if ($16) {
       $20 = (($__v) + 4|0);
       HEAP32[$20>>2] = 0;
       HEAP8[$__v>>0] = 0;
      } else {
       $17 = (($__v) + 8|0);
       $18 = HEAP32[$17>>2]|0;
       HEAP32[$18>>2] = 0;
       $19 = (($__v) + 4|0);
       HEAP32[$19>>2] = 0;
      }
      $21 = HEAP8[$__neg>>0]|0;
      $22 = ($21<<24>>24)==(0);
      if (!($22)) {
       $23 = HEAP32[$5>>2]|0;
       $24 = (($23) + 44|0);
       $25 = HEAP32[$24>>2]|0;
       __THREW__ = 0;
       $26 = (invoke_iii($25|0,($5|0),45)|0);
       $27 = __THREW__; __THREW__ = 0;
       $28 = $27&1;
       if ($28) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(509,($__v|0),($26|0));
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        break;
       }
      }
      $33 = HEAP32[$5>>2]|0;
      $34 = (($33) + 44|0);
      $35 = HEAP32[$34>>2]|0;
      __THREW__ = 0;
      $36 = (invoke_iii($35|0,($5|0),48)|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if ($38) {
       break;
      }
      $39 = HEAP32[$__wb>>2]|0;
      $40 = HEAP32[$__wn>>2]|0;
      $41 = (($40) + -4|0);
      $42 = ($39>>>0)<($41>>>0);
      L18: do {
       if ($42) {
        $__w$05 = $39;
        while(1) {
         $45 = HEAP32[$__w$05>>2]|0;
         $46 = ($45|0)==($36|0);
         $44 = (($__w$05) + 4|0);
         if (!($46)) {
          $__w$0$lcssa = $__w$05;
          break L18;
         }
         $43 = ($44>>>0)<($41>>>0);
         if ($43) {
          $__w$05 = $44;
         } else {
          $__w$0$lcssa = $44;
          break;
         }
        }
       } else {
        $__w$0$lcssa = $39;
       }
      } while(0);
      __THREW__ = 0;
      (invoke_iiii(511,($__v|0),($__w$0$lcssa|0),($40|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       break;
      }
     }
     $49 = HEAP32[$__b>>2]|0;
     $50 = ($49|0)==(0|0);
     do {
      if ($50) {
       $99 = 1;
      } else {
       $51 = (($49) + 12|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = (($49) + 16|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ($52|0)==($54|0);
       if ($55) {
        $56 = HEAP32[$49>>2]|0;
        $57 = (($56) + 36|0);
        $58 = HEAP32[$57>>2]|0;
        __THREW__ = 0;
        $59 = (invoke_ii($58|0,($49|0))|0);
        $60 = __THREW__; __THREW__ = 0;
        $61 = $60&1;
        if ($61) {
         break L4;
        } else {
         $$0$i$i$i$i = $59;
        }
       } else {
        $62 = HEAP32[$52>>2]|0;
        $$0$i$i$i$i = $62;
       }
       $63 = ($$0$i$i$i$i|0)==(-1);
       if ($63) {
        HEAP32[$__b>>2] = 0;
        $99 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $99 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $64 = ($8|0)==(0|0);
     do {
      if ($64) {
       label = 30;
      } else {
       $65 = (($8) + 12|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = (($8) + 16|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = ($66|0)==($68|0);
       if ($69) {
        $70 = HEAP32[$8>>2]|0;
        $71 = (($70) + 36|0);
        $72 = HEAP32[$71>>2]|0;
        __THREW__ = 0;
        $73 = (invoke_ii($72|0,($8|0))|0);
        $74 = __THREW__; __THREW__ = 0;
        $75 = $74&1;
        if ($75) {
         break L4;
        } else {
         $$0$i$i1$i$i = $73;
        }
       } else {
        $76 = HEAP32[$66>>2]|0;
        $$0$i$i1$i$i = $76;
       }
       $77 = ($$0$i$i1$i$i|0)==(-1);
       if ($77) {
        HEAP32[$__e>>2] = 0;
        label = 30;
        break;
       } else {
        if ($99) {
         break;
        } else {
         label = 32;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 30) {
      if ($99) {
       label = 32;
      }
     }
     if ((label|0) == 32) {
      $78 = HEAP32[$__err>>2]|0;
      $79 = $78 | 2;
      HEAP32[$__err>>2] = $79;
     }
     $80 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $80;
     $81 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($81)|0);
     $82 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $83 = ($82|0)==(0|0);
     if ($83) {
      STACKTOP = sp;return;
     }
     $84 = HEAP32[$1>>2]|0;
     __THREW__ = 0;
     invoke_vi($84|0,($82|0));
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     if ($86) {
      $87 = ___cxa_find_matching_catch(0|0)|0;
      $88 = tempRet0;
      ___clang_call_terminate($87);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  $89 = ___cxa_find_matching_catch()|0;
  $90 = tempRet0;
  $91 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($91)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $92 = ($$pre|0)==(0|0);
  if ($92) {
   $$0112 = $90;$$014 = $89;
   ___resumeException($$014|0);
   // unreachable;
  } else {
   $$0111 = $90;$$013 = $89;$94 = $$pre;
  }
 }
 $93 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi($93|0,($94|0));
 $95 = __THREW__; __THREW__ = 0;
 $96 = $95&1;
 if ($96) {
  $97 = ___cxa_find_matching_catch(0|0)|0;
  $98 = tempRet0;
  ___clang_call_terminate($97);
  // unreachable;
 } else {
  $$0112 = $$0111;$$014 = $$013;
  ___resumeException($$014|0);
  // unreachable;
 }
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = sp + 40|0;
 $2 = sp + 76|0;
 $3 = sp + 4|0;
 $4 = sp + 88|0;
 $5 = sp + 100|0;
 $6 = sp + 28|0;
 $7 = sp + 64|0;
 $8 = sp + 52|0;
 $9 = sp + 16|0;
 if ($__intl) {
  $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,10424)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vii[$13 & 1023]($0,$10);
  $14 = HEAP32[$0>>2]|0;
  HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
  $15 = HEAP32[$10>>2]|0;
  $16 = (($15) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 1023]($1,$10);
  $18 = HEAP8[$__nsn>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   $24 = (($__nsn) + 4|0);
   HEAP32[$24>>2] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $21 = (($__nsn) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$22>>2] = 0;
   $23 = (($__nsn) + 4|0);
   HEAP32[$23>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(512,($__nsn|0),0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   $27 = ___cxa_find_matching_catch(0|0)|0;
   $28 = tempRet0;
   ___clang_call_terminate($27);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
  $29 = HEAP32[$10>>2]|0;
  $30 = (($29) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  FUNCTION_TABLE_vii[$31 & 1023]($2,$10);
  $32 = HEAP8[$__psn>>0]|0;
  $33 = $32 & 1;
  $34 = ($33<<24>>24)==(0);
  if ($34) {
   $38 = (($__psn) + 4|0);
   HEAP32[$38>>2] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $35 = (($__psn) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   HEAP32[$36>>2] = 0;
   $37 = (($__psn) + 4|0);
   HEAP32[$37>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(512,($__psn|0),0);
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   $41 = ___cxa_find_matching_catch(0|0)|0;
   $42 = tempRet0;
   ___clang_call_terminate($41);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
  $43 = HEAP32[$10>>2]|0;
  $44 = (($43) + 12|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (FUNCTION_TABLE_ii[$45 & 1023]($10)|0);
  HEAP32[$__dp>>2] = $46;
  $47 = HEAP32[$10>>2]|0;
  $48 = (($47) + 16|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (FUNCTION_TABLE_ii[$49 & 1023]($10)|0);
  HEAP32[$__ts>>2] = $50;
  $51 = HEAP32[$10>>2]|0;
  $52 = (($51) + 20|0);
  $53 = HEAP32[$52>>2]|0;
  FUNCTION_TABLE_vii[$53 & 1023]($3,$10);
  $54 = HEAP8[$__grp>>0]|0;
  $55 = $54 & 1;
  $56 = ($55<<24>>24)==(0);
  if ($56) {
   $60 = (($__grp) + 1|0);
   HEAP8[$60>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $57 = (($__grp) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   HEAP8[$58>>0] = 0;
   $59 = (($__grp) + 4|0);
   HEAP32[$59>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(506,($__grp|0),0);
  $61 = __THREW__; __THREW__ = 0;
  $62 = $61&1;
  if ($62) {
   $63 = ___cxa_find_matching_catch(0|0)|0;
   $64 = tempRet0;
   ___clang_call_terminate($63);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  $65 = HEAP32[$10>>2]|0;
  $66 = (($65) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  FUNCTION_TABLE_vii[$67 & 1023]($4,$10);
  $68 = HEAP8[$__sym>>0]|0;
  $69 = $68 & 1;
  $70 = ($69<<24>>24)==(0);
  if ($70) {
   $74 = (($__sym) + 4|0);
   HEAP32[$74>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $71 = (($__sym) + 8|0);
   $72 = HEAP32[$71>>2]|0;
   HEAP32[$72>>2] = 0;
   $73 = (($__sym) + 4|0);
   HEAP32[$73>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(512,($__sym|0),0);
  $75 = __THREW__; __THREW__ = 0;
  $76 = $75&1;
  if ($76) {
   $77 = ___cxa_find_matching_catch(0|0)|0;
   $78 = tempRet0;
   ___clang_call_terminate($77);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($4);
  $79 = HEAP32[$10>>2]|0;
  $80 = (($79) + 36|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (FUNCTION_TABLE_ii[$81 & 1023]($10)|0);
  $storemerge = $82;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $83 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,10360)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($84) + 44|0);
  $86 = HEAP32[$85>>2]|0;
  FUNCTION_TABLE_vii[$86 & 1023]($5,$83);
  $87 = HEAP32[$5>>2]|0;
  HEAP8[$__pat>>0]=$87&255;HEAP8[$__pat+1>>0]=($87>>8)&255;HEAP8[$__pat+2>>0]=($87>>16)&255;HEAP8[$__pat+3>>0]=$87>>24;
  $88 = HEAP32[$83>>2]|0;
  $89 = (($88) + 32|0);
  $90 = HEAP32[$89>>2]|0;
  FUNCTION_TABLE_vii[$90 & 1023]($6,$83);
  $91 = HEAP8[$__nsn>>0]|0;
  $92 = $91 & 1;
  $93 = ($92<<24>>24)==(0);
  if ($93) {
   $97 = (($__nsn) + 4|0);
   HEAP32[$97>>2] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $94 = (($__nsn) + 8|0);
   $95 = HEAP32[$94>>2]|0;
   HEAP32[$95>>2] = 0;
   $96 = (($__nsn) + 4|0);
   HEAP32[$96>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(512,($__nsn|0),0);
  $98 = __THREW__; __THREW__ = 0;
  $99 = $98&1;
  if ($99) {
   $100 = ___cxa_find_matching_catch(0|0)|0;
   $101 = tempRet0;
   ___clang_call_terminate($100);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($6);
  $102 = HEAP32[$83>>2]|0;
  $103 = (($102) + 28|0);
  $104 = HEAP32[$103>>2]|0;
  FUNCTION_TABLE_vii[$104 & 1023]($7,$83);
  $105 = HEAP8[$__psn>>0]|0;
  $106 = $105 & 1;
  $107 = ($106<<24>>24)==(0);
  if ($107) {
   $111 = (($__psn) + 4|0);
   HEAP32[$111>>2] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $108 = (($__psn) + 8|0);
   $109 = HEAP32[$108>>2]|0;
   HEAP32[$109>>2] = 0;
   $110 = (($__psn) + 4|0);
   HEAP32[$110>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(512,($__psn|0),0);
  $112 = __THREW__; __THREW__ = 0;
  $113 = $112&1;
  if ($113) {
   $114 = ___cxa_find_matching_catch(0|0)|0;
   $115 = tempRet0;
   ___clang_call_terminate($114);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
  $116 = HEAP32[$83>>2]|0;
  $117 = (($116) + 12|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (FUNCTION_TABLE_ii[$118 & 1023]($83)|0);
  HEAP32[$__dp>>2] = $119;
  $120 = HEAP32[$83>>2]|0;
  $121 = (($120) + 16|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (FUNCTION_TABLE_ii[$122 & 1023]($83)|0);
  HEAP32[$__ts>>2] = $123;
  $124 = HEAP32[$83>>2]|0;
  $125 = (($124) + 20|0);
  $126 = HEAP32[$125>>2]|0;
  FUNCTION_TABLE_vii[$126 & 1023]($8,$83);
  $127 = HEAP8[$__grp>>0]|0;
  $128 = $127 & 1;
  $129 = ($128<<24>>24)==(0);
  if ($129) {
   $133 = (($__grp) + 1|0);
   HEAP8[$133>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $130 = (($__grp) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   HEAP8[$131>>0] = 0;
   $132 = (($__grp) + 4|0);
   HEAP32[$132>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(506,($__grp|0),0);
  $134 = __THREW__; __THREW__ = 0;
  $135 = $134&1;
  if ($135) {
   $136 = ___cxa_find_matching_catch(0|0)|0;
   $137 = tempRet0;
   ___clang_call_terminate($136);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
  $138 = HEAP32[$83>>2]|0;
  $139 = (($138) + 24|0);
  $140 = HEAP32[$139>>2]|0;
  FUNCTION_TABLE_vii[$140 & 1023]($9,$83);
  $141 = HEAP8[$__sym>>0]|0;
  $142 = $141 & 1;
  $143 = ($142<<24>>24)==(0);
  if ($143) {
   $147 = (($__sym) + 4|0);
   HEAP32[$147>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $144 = (($__sym) + 8|0);
   $145 = HEAP32[$144>>2]|0;
   HEAP32[$145>>2] = 0;
   $146 = (($__sym) + 4|0);
   HEAP32[$146>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(512,($__sym|0),0);
  $148 = __THREW__; __THREW__ = 0;
  $149 = $148&1;
  if ($149) {
   $150 = ___cxa_find_matching_catch(0|0)|0;
   $151 = tempRet0;
   ___clang_call_terminate($150);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
  $152 = HEAP32[$83>>2]|0;
  $153 = (($152) + 36|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (FUNCTION_TABLE_ii[$154 & 1023]($83)|0);
  $storemerge = $155;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0;
 var $__ts = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 80|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 84|0;
 $__bb = sp + 48|0;
 $__digits = sp + 184|0;
 $__loc = sp + 76|0;
 $__pat = sp + 52|0;
 $__dp = sp + 284|0;
 $__ts = sp + 388|0;
 $__grp = sp + 64|0;
 $__sym = sp + 20|0;
 $__sn = sp + 32|0;
 $__fd = sp + 60|0;
 $__mbuf = sp + 288|0;
 $__mi = sp + 56|0;
 $__me = sp + 16|0;
 $0 = sp + 44|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $1 = (_snprintf($__buf,100,10608,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (invoke_i(481)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $112 = 0;$113 = 0;
   } else {
    __THREW__ = 0;
    HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $6 = (invoke_iiiii(486,($__bb|0),($3|0),(10608|0),($vararg_buffer1|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $112 = 0;$113 = 0;
    } else {
     $9 = HEAP32[$__bb>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(487);
      $11 = __THREW__; __THREW__ = 0;
      $12 = $11&1;
      if ($12) {
       $112 = 0;$113 = 0;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $114 = $$pre;
     } else {
      $114 = $9;
     }
     $15 = (_malloc($6)|0);
     $16 = ($15|0)==(0|0);
     if ($16) {
      __THREW__ = 0;
      invoke_v(487);
      $17 = __THREW__; __THREW__ = 0;
      $18 = $17&1;
      if ($18) {
       $112 = $114;$113 = 0;
      } else {
       $107 = 0;$108 = $114;$__db$0 = 0;$__n$0 = $6;
       label = 10;
      }
     } else {
      $107 = $15;$108 = $114;$__db$0 = $15;$__n$0 = $6;
      label = 10;
     }
    }
   }
  } else {
   $107 = 0;$108 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  __THREW__ = 0;
  invoke_vii(431,($__loc|0),($__iob|0));
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   $112 = $108;$113 = $107;
  } else {
   __THREW__ = 0;
   $21 = (invoke_iii(432,($__loc|0),(10856|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    label = 35;
   } else {
    $24 = HEAP32[$__bb>>2]|0;
    $25 = (($24) + ($__n$0)|0);
    $26 = HEAP32[$21>>2]|0;
    $27 = (($26) + 32|0);
    $28 = HEAP32[$27>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($28|0,($21|0),($24|0),($25|0),($__db$0|0))|0);
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if ($30) {
     label = 35;
    } else {
     $31 = ($__n$0|0)==(0);
     if ($31) {
      $35 = 0;
     } else {
      $32 = HEAP32[$__bb>>2]|0;
      $33 = HEAP8[$32>>0]|0;
      $34 = ($33<<24>>24)==(45);
      $35 = $34;
     }
     HEAP32[$__pat>>2] = 0;
     ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
     ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
     ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(513,($__intl|0),($35|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     do {
      if ($37) {
       $89 = ___cxa_find_matching_catch()|0;
       $90 = tempRet0;
       $$0 = $89;$$01 = $90;
      } else {
       $38 = HEAP32[$__fd>>2]|0;
       $39 = ($__n$0|0)>($38|0);
       if ($39) {
        $40 = (($__n$0) - ($38))|0;
        $41 = $40 << 1;
        $42 = HEAP8[$__sn>>0]|0;
        $43 = $42 & 1;
        $44 = ($43<<24>>24)==(0);
        if ($44) {
         $47 = $42&255;
         $48 = $47 >>> 1;
         $58 = $48;
        } else {
         $45 = (($__sn) + 4|0);
         $46 = HEAP32[$45>>2]|0;
         $58 = $46;
        }
        $49 = HEAP8[$__sym>>0]|0;
        $50 = $49 & 1;
        $51 = ($50<<24>>24)==(0);
        if ($51) {
         $54 = $49&255;
         $55 = $54 >>> 1;
         $60 = $55;
        } else {
         $52 = (($__sym) + 4|0);
         $53 = HEAP32[$52>>2]|0;
         $60 = $53;
        }
        $56 = $41 | 1;
        $57 = (($58) + ($56))|0;
        $59 = (($57) + ($60))|0;
        $$pn = $59;
       } else {
        $61 = HEAP8[$__sn>>0]|0;
        $62 = $61 & 1;
        $63 = ($62<<24>>24)==(0);
        if ($63) {
         $66 = $61&255;
         $67 = $66 >>> 1;
         $76 = $67;
        } else {
         $64 = (($__sn) + 4|0);
         $65 = HEAP32[$64>>2]|0;
         $76 = $65;
        }
        $68 = HEAP8[$__sym>>0]|0;
        $69 = $68 & 1;
        $70 = ($69<<24>>24)==(0);
        if ($70) {
         $73 = $68&255;
         $74 = $73 >>> 1;
         $78 = $74;
        } else {
         $71 = (($__sym) + 4|0);
         $72 = HEAP32[$71>>2]|0;
         $78 = $72;
        }
        $75 = (($76) + 2)|0;
        $77 = (($75) + ($78))|0;
        $$pn = $77;
       }
       $79 = (($$pn) + ($38))|0;
       $80 = ($79>>>0)>(100);
       if ($80) {
        $81 = (_malloc($79)|0);
        $82 = ($81|0)==(0|0);
        if ($82) {
         __THREW__ = 0;
         invoke_v(487);
         $83 = __THREW__; __THREW__ = 0;
         $84 = $83&1;
         if ($84) {
          $85 = ___cxa_find_matching_catch()|0;
          $86 = tempRet0;
          $$0 = $85;$$01 = $86;
          break;
         } else {
          $93 = 0;$__mb$0 = 0;
         }
        } else {
         $93 = $81;$__mb$0 = $81;
        }
       } else {
        $93 = 0;$__mb$0 = $__mbuf;
       }
       $94 = (($__iob) + 4|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = (($__db$0) + ($__n$0)|0);
       $97 = HEAP8[$__dp>>0]|0;
       $98 = HEAP8[$__ts>>0]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(514,($__mb$0|0),($__mi|0),($__me|0),($95|0),($__db$0|0),($96|0),($21|0),($35|0),($__pat|0),($97|0),($98|0),($__grp|0),($__sym|0),($__sn|0),($38|0));
       $99 = __THREW__; __THREW__ = 0;
       $100 = $99&1;
       if (!($100)) {
        $101 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $101;
        $102 = HEAP32[$__mi>>2]|0;
        $103 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
        invoke_viiiiiii(434,($agg$result|0),($$byval_copy|0),($__mb$0|0),($102|0),($103|0),($__iob|0),($__fl|0));
        $104 = __THREW__; __THREW__ = 0;
        $105 = $104&1;
        if (!($105)) {
         _free($93);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
         $106 = HEAP32[$__loc>>2]|0;
         (__ZNSt3__114__shared_count16__release_sharedEv($106)|0);
         _free($107);
         _free($108);
         STACKTOP = sp;return;
        }
       }
       $91 = ___cxa_find_matching_catch()|0;
       $92 = tempRet0;
       _free($93);
       $$0 = $91;$$01 = $92;
      }
     } while(0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
     $$1 = $$0;$$12 = $$01;
    }
   }
   if ((label|0) == 35) {
    $87 = ___cxa_find_matching_catch()|0;
    $88 = tempRet0;
    $$1 = $87;$$12 = $88;
   }
   $109 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($109)|0);
   $$2 = $$1;$$23 = $$12;$110 = $107;$111 = $108;
   _free($110);
   _free($111);
   ___resumeException($$2|0);
   // unreachable;
  }
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $$2 = $13;$$23 = $14;$110 = $113;$111 = $112;
 _free($110);
 _free($111);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = sp + 16|0;
 $2 = sp + 92|0;
 $3 = sp + 40|0;
 $4 = sp + 80|0;
 $5 = sp + 96|0;
 $6 = sp + 108|0;
 $7 = sp + 56|0;
 $8 = sp + 52|0;
 $9 = sp + 28|0;
 $10 = sp + 4|0;
 $11 = sp + 68|0;
 if ($__intl) {
  $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,10296)|0);
  $13 = HEAP32[$12>>2]|0;
  do {
   if ($__neg) {
    $14 = (($13) + 44|0);
    $15 = HEAP32[$14>>2]|0;
    FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
    $16 = HEAP32[$0>>2]|0;
    HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
    $17 = HEAP32[$12>>2]|0;
    $18 = (($17) + 32|0);
    $19 = HEAP32[$18>>2]|0;
    FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
    $20 = HEAP8[$__sn>>0]|0;
    $21 = $20 & 1;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     $26 = (($__sn) + 1|0);
     HEAP8[$26>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $23 = (($__sn) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     HEAP8[$24>>0] = 0;
     $25 = (($__sn) + 4|0);
     HEAP32[$25>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(506,($__sn|0),0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     $29 = ___cxa_find_matching_catch(0|0)|0;
     $30 = tempRet0;
     ___clang_call_terminate($29);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
     break;
    }
   } else {
    $31 = (($13) + 40|0);
    $32 = HEAP32[$31>>2]|0;
    FUNCTION_TABLE_vii[$32 & 1023]($2,$12);
    $33 = HEAP32[$2>>2]|0;
    HEAP8[$__pat>>0]=$33&255;HEAP8[$__pat+1>>0]=($33>>8)&255;HEAP8[$__pat+2>>0]=($33>>16)&255;HEAP8[$__pat+3>>0]=$33>>24;
    $34 = HEAP32[$12>>2]|0;
    $35 = (($34) + 28|0);
    $36 = HEAP32[$35>>2]|0;
    FUNCTION_TABLE_vii[$36 & 1023]($3,$12);
    $37 = HEAP8[$__sn>>0]|0;
    $38 = $37 & 1;
    $39 = ($38<<24>>24)==(0);
    if ($39) {
     $43 = (($__sn) + 1|0);
     HEAP8[$43>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $40 = (($__sn) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     HEAP8[$41>>0] = 0;
     $42 = (($__sn) + 4|0);
     HEAP32[$42>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(506,($__sn|0),0);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     $46 = ___cxa_find_matching_catch(0|0)|0;
     $47 = tempRet0;
     ___clang_call_terminate($46);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
     break;
    }
   }
  } while(0);
  $48 = HEAP32[$12>>2]|0;
  $49 = (($48) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (FUNCTION_TABLE_ii[$50 & 1023]($12)|0);
  HEAP8[$__dp>>0] = $51;
  $52 = HEAP32[$12>>2]|0;
  $53 = (($52) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (FUNCTION_TABLE_ii[$54 & 1023]($12)|0);
  HEAP8[$__ts>>0] = $55;
  $56 = HEAP32[$12>>2]|0;
  $57 = (($56) + 20|0);
  $58 = HEAP32[$57>>2]|0;
  FUNCTION_TABLE_vii[$58 & 1023]($4,$12);
  $59 = HEAP8[$__grp>>0]|0;
  $60 = $59 & 1;
  $61 = ($60<<24>>24)==(0);
  if ($61) {
   $65 = (($__grp) + 1|0);
   HEAP8[$65>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $62 = (($__grp) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   HEAP8[$63>>0] = 0;
   $64 = (($__grp) + 4|0);
   HEAP32[$64>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(506,($__grp|0),0);
  $66 = __THREW__; __THREW__ = 0;
  $67 = $66&1;
  if ($67) {
   $68 = ___cxa_find_matching_catch(0|0)|0;
   $69 = tempRet0;
   ___clang_call_terminate($68);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $70 = HEAP32[$12>>2]|0;
  $71 = (($70) + 24|0);
  $72 = HEAP32[$71>>2]|0;
  FUNCTION_TABLE_vii[$72 & 1023]($5,$12);
  $73 = HEAP8[$__sym>>0]|0;
  $74 = $73 & 1;
  $75 = ($74<<24>>24)==(0);
  if ($75) {
   $79 = (($__sym) + 1|0);
   HEAP8[$79>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $76 = (($__sym) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   HEAP8[$77>>0] = 0;
   $78 = (($__sym) + 4|0);
   HEAP32[$78>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(506,($__sym|0),0);
  $80 = __THREW__; __THREW__ = 0;
  $81 = $80&1;
  if ($81) {
   $82 = ___cxa_find_matching_catch(0|0)|0;
   $83 = tempRet0;
   ___clang_call_terminate($82);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
  $84 = HEAP32[$12>>2]|0;
  $85 = (($84) + 36|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (FUNCTION_TABLE_ii[$86 & 1023]($12)|0);
  $storemerge = $87;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $88 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,10232)|0);
  $89 = HEAP32[$88>>2]|0;
  do {
   if ($__neg) {
    $90 = (($89) + 44|0);
    $91 = HEAP32[$90>>2]|0;
    FUNCTION_TABLE_vii[$91 & 1023]($6,$88);
    $92 = HEAP32[$6>>2]|0;
    HEAP8[$__pat>>0]=$92&255;HEAP8[$__pat+1>>0]=($92>>8)&255;HEAP8[$__pat+2>>0]=($92>>16)&255;HEAP8[$__pat+3>>0]=$92>>24;
    $93 = HEAP32[$88>>2]|0;
    $94 = (($93) + 32|0);
    $95 = HEAP32[$94>>2]|0;
    FUNCTION_TABLE_vii[$95 & 1023]($7,$88);
    $96 = HEAP8[$__sn>>0]|0;
    $97 = $96 & 1;
    $98 = ($97<<24>>24)==(0);
    if ($98) {
     $102 = (($__sn) + 1|0);
     HEAP8[$102>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $99 = (($__sn) + 8|0);
     $100 = HEAP32[$99>>2]|0;
     HEAP8[$100>>0] = 0;
     $101 = (($__sn) + 4|0);
     HEAP32[$101>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(506,($__sn|0),0);
    $103 = __THREW__; __THREW__ = 0;
    $104 = $103&1;
    if ($104) {
     $105 = ___cxa_find_matching_catch(0|0)|0;
     $106 = tempRet0;
     ___clang_call_terminate($105);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
     ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
     break;
    }
   } else {
    $107 = (($89) + 40|0);
    $108 = HEAP32[$107>>2]|0;
    FUNCTION_TABLE_vii[$108 & 1023]($8,$88);
    $109 = HEAP32[$8>>2]|0;
    HEAP8[$__pat>>0]=$109&255;HEAP8[$__pat+1>>0]=($109>>8)&255;HEAP8[$__pat+2>>0]=($109>>16)&255;HEAP8[$__pat+3>>0]=$109>>24;
    $110 = HEAP32[$88>>2]|0;
    $111 = (($110) + 28|0);
    $112 = HEAP32[$111>>2]|0;
    FUNCTION_TABLE_vii[$112 & 1023]($9,$88);
    $113 = HEAP8[$__sn>>0]|0;
    $114 = $113 & 1;
    $115 = ($114<<24>>24)==(0);
    if ($115) {
     $119 = (($__sn) + 1|0);
     HEAP8[$119>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $116 = (($__sn) + 8|0);
     $117 = HEAP32[$116>>2]|0;
     HEAP8[$117>>0] = 0;
     $118 = (($__sn) + 4|0);
     HEAP32[$118>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(506,($__sn|0),0);
    $120 = __THREW__; __THREW__ = 0;
    $121 = $120&1;
    if ($121) {
     $122 = ___cxa_find_matching_catch(0|0)|0;
     $123 = tempRet0;
     ___clang_call_terminate($122);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
     ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
     break;
    }
   }
  } while(0);
  $124 = HEAP32[$88>>2]|0;
  $125 = (($124) + 12|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (FUNCTION_TABLE_ii[$126 & 1023]($88)|0);
  HEAP8[$__dp>>0] = $127;
  $128 = HEAP32[$88>>2]|0;
  $129 = (($128) + 16|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (FUNCTION_TABLE_ii[$130 & 1023]($88)|0);
  HEAP8[$__ts>>0] = $131;
  $132 = HEAP32[$88>>2]|0;
  $133 = (($132) + 20|0);
  $134 = HEAP32[$133>>2]|0;
  FUNCTION_TABLE_vii[$134 & 1023]($10,$88);
  $135 = HEAP8[$__grp>>0]|0;
  $136 = $135 & 1;
  $137 = ($136<<24>>24)==(0);
  if ($137) {
   $141 = (($__grp) + 1|0);
   HEAP8[$141>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $138 = (($__grp) + 8|0);
   $139 = HEAP32[$138>>2]|0;
   HEAP8[$139>>0] = 0;
   $140 = (($__grp) + 4|0);
   HEAP32[$140>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(506,($__grp|0),0);
  $142 = __THREW__; __THREW__ = 0;
  $143 = $142&1;
  if ($143) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
  $146 = HEAP32[$88>>2]|0;
  $147 = (($146) + 24|0);
  $148 = HEAP32[$147>>2]|0;
  FUNCTION_TABLE_vii[$148 & 1023]($11,$88);
  $149 = HEAP8[$__sym>>0]|0;
  $150 = $149 & 1;
  $151 = ($150<<24>>24)==(0);
  if ($151) {
   $155 = (($__sym) + 1|0);
   HEAP8[$155>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $152 = (($__sym) + 8|0);
   $153 = HEAP32[$152>>2]|0;
   HEAP8[$153>>0] = 0;
   $154 = (($__sym) + 4|0);
   HEAP32[$154>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(506,($__sym|0),0);
  $156 = __THREW__; __THREW__ = 0;
  $157 = $156&1;
  if ($157) {
   $158 = ___cxa_find_matching_catch(0|0)|0;
   $159 = tempRet0;
   ___clang_call_terminate($158);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11);
  $160 = HEAP32[$88>>2]|0;
  $161 = (($160) + 36|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (FUNCTION_TABLE_ii[$162 & 1023]($88)|0);
  $storemerge = $163;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i20 = 0, $$01$i$i = 0, $$01$i$i18 = 0, $$012$i$i = 0, $$055 = 0, $$2 = 0, $$lcssa41 = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$0$lcssa63 = 0, $__d$032 = 0, $__d$1$lcssa77 = 0, $__d$1$lcssa78 = 0, $__d$135 = 0, $__d$2 = 0, $__d$348 = 0, $__f$0$lcssa75 = 0;
 var $__f$0$lcssa76 = 0, $__f$036 = 0, $__f$142 = 0, $__gl$051 = 0, $__gl$1 = 0, $__ig$050 = 0, $__ig$1 = 0, $__ng$049 = 0, $__ng$1 = 0, $__p$054 = 0, $exitcond = 0, $isascii1$i = 0, $or$cond = 0, $or$cond3 = 0, $scevgep66 = 0, $scevgep6667 = 0, $scevgep68 = 0, $umax = 0, $umax65 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 1|0);
 $1 = (($__sn) + 8|0);
 $2 = (($__sn) + 4|0);
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 $5 = (($__sym) + 1|0);
 $6 = (($__sym) + 8|0);
 $7 = (($__sym) + 4|0);
 $8 = ($__fd|0)>(0);
 $9 = (($__grp) + 1|0);
 $10 = (($__grp) + 8|0);
 $11 = (($__grp) + 4|0);
 $12 = (($__ct) + 8|0);
 $13 = (0 - ($__fd))|0;
 $$055 = $__db;$__p$054 = 0;
 while(1) {
  $14 = (($__pat) + ($__p$054)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  switch ($16|0) {
  case 2:  {
   $38 = HEAP8[$__sym>>0]|0;
   $39 = $38 & 1;
   $40 = ($39<<24>>24)==(0);
   if ($40) {
    $42 = $38&255;
    $43 = $42 >>> 1;
    $45 = $43;
   } else {
    $41 = HEAP32[$7>>2]|0;
    $45 = $41;
   }
   $44 = ($45|0)==(0);
   $or$cond3 = $44 | $4;
   if ($or$cond3) {
    $$2 = $$055;
   } else {
    if ($40) {
     $48 = $38&255;
     $49 = $48 >>> 1;
     $51 = $5;$52 = $49;$55 = $5;
    } else {
     $46 = HEAP32[$6>>2]|0;
     $47 = HEAP32[$7>>2]|0;
     $51 = $46;$52 = $47;$55 = $46;
    }
    $50 = (($51) + ($52)|0);
    $53 = HEAP32[$__me>>2]|0;
    $54 = ($55|0)==($50|0);
    if ($54) {
     $$0$lcssa$i$i20 = $53;
    } else {
     $$01$i$i18 = $53;$57 = $55;
     while(1) {
      $56 = HEAP8[$57>>0]|0;
      HEAP8[$$01$i$i18>>0] = $56;
      $58 = (($57) + 1|0);
      $59 = (($$01$i$i18) + 1|0);
      $60 = ($58|0)==($50|0);
      if ($60) {
       $$0$lcssa$i$i20 = $59;
       break;
      } else {
       $$01$i$i18 = $59;$57 = $58;
      }
     }
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i20;
    $$2 = $$055;
   }
   break;
  }
  case 3:  {
   $25 = HEAP8[$__sn>>0]|0;
   $26 = $25 & 1;
   $27 = ($26<<24>>24)==(0);
   if ($27) {
    $29 = $25&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $28 = HEAP32[$2>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    $$2 = $$055;
   } else {
    if ($27) {
     $35 = $0;
    } else {
     $33 = HEAP32[$1>>2]|0;
     $35 = $33;
    }
    $34 = HEAP8[$35>>0]|0;
    $36 = HEAP32[$__me>>2]|0;
    $37 = (($36) + 1|0);
    HEAP32[$__me>>2] = $37;
    HEAP8[$36>>0] = $34;
    $$2 = $$055;
   }
   break;
  }
  case 0:  {
   $17 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $17;
   $$2 = $$055;
   break;
  }
  case 4:  {
   $61 = HEAP32[$__me>>2]|0;
   $62 = (($$055) + 1|0);
   $$$0 = $__neg ? $62 : $$055;
   $63 = ($$$0>>>0)<($__de>>>0);
   L29: do {
    if ($63) {
     $__d$032 = $$$0;
     while(1) {
      $66 = HEAP8[$__d$032>>0]|0;
      $isascii1$i = ($66<<24>>24)>(-1);
      if (!($isascii1$i)) {
       $__d$0$lcssa = $__d$032;
       break L29;
      }
      $67 = $66 << 24 >> 24;
      $68 = HEAP32[$12>>2]|0;
      $69 = (($68) + ($67<<1)|0);
      $70 = HEAP16[$69>>1]|0;
      $71 = $70 & 2048;
      $72 = ($71<<16>>16)==(0);
      $65 = (($__d$032) + 1|0);
      if ($72) {
       $__d$0$lcssa = $__d$032;
       break L29;
      }
      $64 = ($65>>>0)<($__de>>>0);
      if ($64) {
       $__d$032 = $65;
      } else {
       $__d$0$lcssa = $65;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   $__d$0$lcssa63 = $__d$0$lcssa;
   if ($8) {
    $73 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($73) {
     $74 = $$$0;
     $75 = (($74) - ($__d$0$lcssa63))|0;
     $76 = ($75>>>0)<($13>>>0);
     $umax = $76 ? $13 : $75;
     $umax65 = $umax;
     $scevgep66 = (($umax65) + ($__fd)|0);
     $scevgep6667 = $scevgep66;
     $80 = $61;$__d$135 = $__d$0$lcssa;$__f$036 = $__fd;
     while(1) {
      $77 = (($__d$135) + -1|0);
      $78 = HEAP8[$77>>0]|0;
      $79 = (($80) + 1|0);
      HEAP32[$__me>>2] = $79;
      HEAP8[$80>>0] = $78;
      $81 = (($__f$036) + -1)|0;
      $82 = ($77>>>0)>($$$0>>>0);
      $83 = ($81|0)>(0);
      $or$cond = $82 & $83;
      if (!($or$cond)) {
       break;
      }
      $$pre = HEAP32[$__me>>2]|0;
      $80 = $$pre;$__d$135 = $77;$__f$036 = $81;
     }
     $scevgep68 = (($__d$0$lcssa) + ($umax)|0);
     if ($83) {
      $__d$1$lcssa78 = $scevgep68;$__f$0$lcssa76 = $scevgep6667;
      label = 32;
     } else {
      $91 = 0;$__d$1$lcssa77 = $scevgep68;$__f$0$lcssa75 = $scevgep6667;
     }
    } else {
     $__d$1$lcssa78 = $__d$0$lcssa;$__f$0$lcssa76 = $__fd;
     label = 32;
    }
    if ((label|0) == 32) {
     label = 0;
     $84 = HEAP32[$__ct>>2]|0;
     $85 = (($84) + 28|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = (FUNCTION_TABLE_iii[$86 & 1023]($__ct,48)|0);
     $91 = $87;$__d$1$lcssa77 = $__d$1$lcssa78;$__f$0$lcssa75 = $__f$0$lcssa76;
    }
    $88 = ($__f$0$lcssa75|0)>(0);
    $89 = HEAP32[$__me>>2]|0;
    $90 = (($89) + 1|0);
    HEAP32[$__me>>2] = $90;
    if ($88) {
     $92 = $89;$__f$142 = $__f$0$lcssa75;
     while(1) {
      HEAP8[$92>>0] = $91;
      $93 = (($__f$142) + -1)|0;
      $94 = ($93|0)>(0);
      $95 = HEAP32[$__me>>2]|0;
      $96 = (($95) + 1|0);
      HEAP32[$__me>>2] = $96;
      if ($94) {
       $92 = $95;$__f$142 = $93;
      } else {
       $$lcssa41 = $95;
       break;
      }
     }
    } else {
     $$lcssa41 = $89;
    }
    HEAP8[$$lcssa41>>0] = $__dp;
    $__d$2 = $__d$1$lcssa77;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $97 = ($__d$2|0)==($$$0|0);
   if ($97) {
    $98 = HEAP32[$__ct>>2]|0;
    $99 = (($98) + 28|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = (FUNCTION_TABLE_iii[$100 & 1023]($__ct,48)|0);
    $102 = HEAP32[$__me>>2]|0;
    $103 = (($102) + 1|0);
    HEAP32[$__me>>2] = $103;
    HEAP8[$102>>0] = $101;
   } else {
    $104 = HEAP8[$__grp>>0]|0;
    $105 = $104 & 1;
    $106 = ($105<<24>>24)==(0);
    if ($106) {
     $108 = $104&255;
     $109 = $108 >>> 1;
     $111 = $109;
    } else {
     $107 = HEAP32[$11>>2]|0;
     $111 = $107;
    }
    $110 = ($111|0)==(0);
    if ($110) {
     $__d$348 = $__d$2;$__gl$051 = -1;$__ig$050 = 0;$__ng$049 = 0;
    } else {
     if ($106) {
      $114 = $9;
     } else {
      $112 = HEAP32[$10>>2]|0;
      $114 = $112;
     }
     $113 = HEAP8[$114>>0]|0;
     $115 = $113 << 24 >> 24;
     $__d$348 = $__d$2;$__gl$051 = $115;$__ig$050 = 0;$__ng$049 = 0;
    }
    while(1) {
     $116 = ($__ng$049|0)==($__gl$051|0);
     if ($116) {
      $117 = HEAP32[$__me>>2]|0;
      $118 = (($117) + 1|0);
      HEAP32[$__me>>2] = $118;
      HEAP8[$117>>0] = $__ts;
      $119 = (($__ig$050) + 1)|0;
      $120 = HEAP8[$__grp>>0]|0;
      $121 = $120 & 1;
      $122 = ($121<<24>>24)==(0);
      if ($122) {
       $124 = $120&255;
       $125 = $124 >>> 1;
       $127 = $125;
      } else {
       $123 = HEAP32[$11>>2]|0;
       $127 = $123;
      }
      $126 = ($119>>>0)<($127>>>0);
      if ($126) {
       if ($122) {
        $130 = $9;
       } else {
        $128 = HEAP32[$10>>2]|0;
        $130 = $128;
       }
       $129 = (($130) + ($119)|0);
       $131 = HEAP8[$129>>0]|0;
       $132 = ($131<<24>>24)==(127);
       if ($132) {
        $__gl$1 = -1;$__ig$1 = $119;$__ng$1 = 0;
       } else {
        if ($122) {
         $135 = $9;
        } else {
         $133 = HEAP32[$10>>2]|0;
         $135 = $133;
        }
        $134 = (($135) + ($119)|0);
        $136 = HEAP8[$134>>0]|0;
        $137 = $136 << 24 >> 24;
        $__gl$1 = $137;$__ig$1 = $119;$__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$051;$__ig$1 = $119;$__ng$1 = 0;
      }
     } else {
      $__gl$1 = $__gl$051;$__ig$1 = $__ig$050;$__ng$1 = $__ng$049;
     }
     $138 = (($__d$348) + -1|0);
     $139 = HEAP8[$138>>0]|0;
     $140 = HEAP32[$__me>>2]|0;
     $141 = (($140) + 1|0);
     HEAP32[$__me>>2] = $141;
     HEAP8[$140>>0] = $139;
     $142 = (($__ng$1) + 1)|0;
     $143 = ($138|0)==($$$0|0);
     if ($143) {
      break;
     } else {
      $__d$348 = $138;$__gl$051 = $__gl$1;$__ig$050 = $__ig$1;$__ng$049 = $142;
     }
    }
   }
   $144 = HEAP32[$__me>>2]|0;
   $145 = ($61|0)==($144|0);
   if ($145) {
    $$2 = $$$0;
   } else {
    $146 = (($144) + -1|0);
    $147 = ($146>>>0)>($61>>>0);
    if ($147) {
     $$012$i$i = $61;$150 = $146;
     while(1) {
      $148 = HEAP8[$$012$i$i>>0]|0;
      $149 = HEAP8[$150>>0]|0;
      HEAP8[$$012$i$i>>0] = $149;
      HEAP8[$150>>0] = $148;
      $151 = (($$012$i$i) + 1|0);
      $152 = (($150) + -1|0);
      $153 = ($151>>>0)<($152>>>0);
      if ($153) {
       $$012$i$i = $151;$150 = $152;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  case 1:  {
   $18 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $18;
   $19 = HEAP32[$__ct>>2]|0;
   $20 = (($19) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (FUNCTION_TABLE_iii[$21 & 1023]($__ct,32)|0);
   $23 = HEAP32[$__me>>2]|0;
   $24 = (($23) + 1|0);
   HEAP32[$__me>>2] = $24;
   HEAP8[$23>>0] = $22;
   $$2 = $$055;
   break;
  }
  default: {
   $$2 = $$055;
  }
  }
  $154 = (($__p$054) + 1)|0;
  $exitcond = ($154|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$055 = $$2;$__p$054 = $154;
  }
 }
 $155 = HEAP8[$__sn>>0]|0;
 $156 = $155 & 1;
 $157 = ($156<<24>>24)==(0);
 if ($157) {
  $159 = $155&255;
  $160 = $159 >>> 1;
  $162 = $160;
 } else {
  $158 = HEAP32[$2>>2]|0;
  $162 = $158;
 }
 $161 = ($162>>>0)>(1);
 if ($161) {
  if ($157) {
   $165 = $155&255;
   $166 = $165 >>> 1;
   $$pn = $0;$169 = $0;$170 = $166;
  } else {
   $163 = HEAP32[$1>>2]|0;
   $164 = HEAP32[$2>>2]|0;
   $$pn = $163;$169 = $163;$170 = $164;
  }
  $167 = (($$pn) + 1|0);
  $168 = (($169) + ($170)|0);
  $171 = HEAP32[$__me>>2]|0;
  $172 = ($167|0)==($168|0);
  if ($172) {
   $$0$lcssa$i$i = $171;
  } else {
   $$01$i$i = $171;$174 = $167;
   while(1) {
    $173 = HEAP8[$174>>0]|0;
    HEAP8[$$01$i$i>>0] = $173;
    $175 = (($174) + 1|0);
    $176 = (($$01$i$i) + 1|0);
    $177 = ($175|0)==($168|0);
    if ($177) {
     $$0$lcssa$i$i = $176;
     break;
    } else {
     $$01$i$i = $176;$174 = $175;
    }
   }
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $178 = $__flags & 176;
 if ((($178|0) == 32)) {
  $179 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $179;
  STACKTOP = sp;return;
 } else if ((($178|0) == 16)) {
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0;
 var $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $__loc = sp + 24|0;
 $__pat = sp + 12|0;
 $__dp = sp + 64|0;
 $__ts = sp + 65|0;
 $__grp = sp;
 $__sym = sp + 52|0;
 $__sn = sp + 32|0;
 $__fd = sp + 28|0;
 $__mbuf = sp + 68|0;
 $__mi = sp + 44|0;
 $__me = sp + 48|0;
 $0 = sp + 16|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $1 = (invoke_iii(432,($__loc|0),(10856|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if (!($3)) {
   $4 = HEAP8[$__digits>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = $4&255;
    $10 = $9 >>> 1;
    $12 = $10;
   } else {
    $7 = (($__digits) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $12 = $8;
   }
   $11 = ($12|0)==(0);
   if ($11) {
    $25 = 0;
   } else {
    if ($6) {
     $15 = (($__digits) + 1|0);
     $17 = $15;
    } else {
     $13 = (($__digits) + 8|0);
     $14 = HEAP32[$13>>2]|0;
     $17 = $14;
    }
    $16 = HEAP8[$17>>0]|0;
    $18 = HEAP32[$1>>2]|0;
    $19 = (($18) + 28|0);
    $20 = HEAP32[$19>>2]|0;
    __THREW__ = 0;
    $21 = (invoke_iii($20|0,($1|0),45)|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = ($16<<24>>24)==($21<<24>>24);
    $25 = $24;
   }
   HEAP32[$__pat>>2] = 0;
   ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
   ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
   ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(513,($__intl|0),($25|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   L15: do {
    if ($27) {
     $92 = ___cxa_find_matching_catch()|0;
     $93 = tempRet0;
     $$0 = $92;$$01 = $93;
    } else {
     $28 = HEAP8[$__digits>>0]|0;
     $29 = $28 & 1;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $33 = $28&255;
      $34 = $33 >>> 1;
      $37 = $34;
     } else {
      $31 = (($__digits) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $37 = $32;
     }
     $35 = HEAP32[$__fd>>2]|0;
     $36 = ($37|0)>($35|0);
     if ($36) {
      if ($30) {
       $40 = $28&255;
       $41 = $40 >>> 1;
       $43 = $41;
      } else {
       $38 = (($__digits) + 4|0);
       $39 = HEAP32[$38>>2]|0;
       $43 = $39;
      }
      $42 = (($43) - ($35))|0;
      $44 = $42 << 1;
      $45 = HEAP8[$__sn>>0]|0;
      $46 = $45 & 1;
      $47 = ($46<<24>>24)==(0);
      if ($47) {
       $50 = $45&255;
       $51 = $50 >>> 1;
       $61 = $51;
      } else {
       $48 = (($__sn) + 4|0);
       $49 = HEAP32[$48>>2]|0;
       $61 = $49;
      }
      $52 = HEAP8[$__sym>>0]|0;
      $53 = $52 & 1;
      $54 = ($53<<24>>24)==(0);
      if ($54) {
       $57 = $52&255;
       $58 = $57 >>> 1;
       $63 = $58;
      } else {
       $55 = (($__sym) + 4|0);
       $56 = HEAP32[$55>>2]|0;
       $63 = $56;
      }
      $59 = $44 | 1;
      $60 = (($61) + ($59))|0;
      $62 = (($60) + ($63))|0;
      $$pn = $62;
     } else {
      $64 = HEAP8[$__sn>>0]|0;
      $65 = $64 & 1;
      $66 = ($65<<24>>24)==(0);
      if ($66) {
       $69 = $64&255;
       $70 = $69 >>> 1;
       $79 = $70;
      } else {
       $67 = (($__sn) + 4|0);
       $68 = HEAP32[$67>>2]|0;
       $79 = $68;
      }
      $71 = HEAP8[$__sym>>0]|0;
      $72 = $71 & 1;
      $73 = ($72<<24>>24)==(0);
      if ($73) {
       $76 = $71&255;
       $77 = $76 >>> 1;
       $81 = $77;
      } else {
       $74 = (($__sym) + 4|0);
       $75 = HEAP32[$74>>2]|0;
       $81 = $75;
      }
      $78 = (($79) + 2)|0;
      $80 = (($78) + ($81))|0;
      $$pn = $80;
     }
     $82 = (($$pn) + ($35))|0;
     $83 = ($82>>>0)>(100);
     do {
      if ($83) {
       $84 = (_malloc($82)|0);
       $85 = ($84|0)==(0|0);
       if ($85) {
        __THREW__ = 0;
        invoke_v(487);
        $86 = __THREW__; __THREW__ = 0;
        $87 = $86&1;
        if ($87) {
         $88 = ___cxa_find_matching_catch()|0;
         $89 = tempRet0;
         $$0 = $88;$$01 = $89;
         break L15;
        } else {
         $$pre = HEAP8[$__digits>>0]|0;
         $100 = $$pre;$96 = 0;$__mb$0 = 0;
         break;
        }
       } else {
        $100 = $28;$96 = $84;$__mb$0 = $84;
       }
      } else {
       $100 = $28;$96 = 0;$__mb$0 = $__mbuf;
      }
     } while(0);
     $97 = (($__iob) + 4|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = $100 & 1;
     $101 = ($99<<24>>24)==(0);
     if ($101) {
      $106 = (($__digits) + 1|0);
      $107 = $100&255;
      $108 = $107 >>> 1;
      $110 = $106;$111 = $108;
     } else {
      $102 = (($__digits) + 8|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = (($__digits) + 4|0);
      $105 = HEAP32[$104>>2]|0;
      $110 = $103;$111 = $105;
     }
     $109 = (($110) + ($111)|0);
     $112 = HEAP8[$__dp>>0]|0;
     $113 = HEAP8[$__ts>>0]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(514,($__mb$0|0),($__mi|0),($__me|0),($98|0),($110|0),($109|0),($1|0),($25|0),($__pat|0),($112|0),($113|0),($__grp|0),($__sym|0),($__sn|0),($35|0));
     $114 = __THREW__; __THREW__ = 0;
     $115 = $114&1;
     if (!($115)) {
      $116 = HEAP32[$__s>>2]|0;
      HEAP32[$0>>2] = $116;
      $117 = HEAP32[$__mi>>2]|0;
      $118 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
      invoke_viiiiiii(434,($agg$result|0),($$byval_copy|0),($__mb$0|0),($117|0),($118|0),($__iob|0),($__fl|0));
      $119 = __THREW__; __THREW__ = 0;
      $120 = $119&1;
      if (!($120)) {
       _free($96);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
       $121 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($121)|0);
       STACKTOP = sp;return;
      }
     }
     $94 = ___cxa_find_matching_catch()|0;
     $95 = tempRet0;
     _free($96);
     $$0 = $94;$$01 = $95;
    }
   } while(0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $$1 = $$0;$$12 = $$01;
   $122 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($122)|0);
   ___resumeException($$1|0);
   // unreachable;
  }
 } while(0);
 $90 = ___cxa_find_matching_catch()|0;
 $91 = tempRet0;
 $$1 = $90;$$12 = $91;
 $122 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($122)|0);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0;
 var $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 444|0;
 $vararg_buffer1 = sp;
 $vararg_buffer = sp + 8|0;
 $__buf = sp + 896|0;
 $__bb = sp + 424|0;
 $__digits = sp + 24|0;
 $__loc = sp + 428|0;
 $__pat = sp + 436|0;
 $__dp = sp + 888|0;
 $__ts = sp + 892|0;
 $__grp = sp + 448|0;
 $__sym = sp + 460|0;
 $__sn = sp + 472|0;
 $__fd = sp + 484|0;
 $__mbuf = sp + 488|0;
 $__mi = sp + 16|0;
 $__me = sp + 432|0;
 $0 = sp + 440|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $1 = (_snprintf($__buf,100,10608,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (invoke_i(481)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $118 = 0;$119 = 0;
    label = 7;
   } else {
    __THREW__ = 0;
    HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $6 = (invoke_iiiii(486,($__bb|0),($3|0),(10608|0),($vararg_buffer1|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $118 = 0;$119 = 0;
     label = 7;
    } else {
     $9 = HEAP32[$__bb>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(487);
      $11 = __THREW__; __THREW__ = 0;
      $12 = $11&1;
      if ($12) {
       $118 = 0;$119 = 0;
       label = 7;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $120 = $$pre;
     } else {
      $120 = $9;
     }
     $15 = $6 << 2;
     $16 = (_malloc($15)|0);
     $17 = ($16|0)==(0|0);
     if ($17) {
      __THREW__ = 0;
      invoke_v(487);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if ($19) {
       $118 = $120;$119 = 0;
       label = 7;
      } else {
       $112 = 0;$113 = $120;$__db$0 = 0;$__n$0 = $6;
       label = 10;
      }
     } else {
      $112 = $16;$113 = $120;$__db$0 = $16;$__n$0 = $6;
      label = 10;
     }
    }
   }
  } else {
   $112 = 0;$113 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  __THREW__ = 0;
  invoke_vii(431,($__loc|0),($__iob|0));
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if ($21) {
   $118 = $113;$119 = $112;
   label = 7;
  } else {
   __THREW__ = 0;
   $22 = (invoke_iii(432,($__loc|0),(10848|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    label = 35;
   } else {
    $25 = HEAP32[$__bb>>2]|0;
    $26 = (($25) + ($__n$0)|0);
    $27 = HEAP32[$22>>2]|0;
    $28 = (($27) + 48|0);
    $29 = HEAP32[$28>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($29|0,($22|0),($25|0),($26|0),($__db$0|0))|0);
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if ($31) {
     label = 35;
    } else {
     $32 = ($__n$0|0)==(0);
     if ($32) {
      $36 = 0;
     } else {
      $33 = HEAP32[$__bb>>2]|0;
      $34 = HEAP8[$33>>0]|0;
      $35 = ($34<<24>>24)==(45);
      $36 = $35;
     }
     HEAP32[$__pat>>2] = 0;
     ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
     ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
     ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(515,($__intl|0),($36|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     do {
      if ($38) {
       $91 = ___cxa_find_matching_catch()|0;
       $92 = tempRet0;
       $$0 = $91;$$01 = $92;
      } else {
       $39 = HEAP32[$__fd>>2]|0;
       $40 = ($__n$0|0)>($39|0);
       if ($40) {
        $41 = (($__n$0) - ($39))|0;
        $42 = $41 << 1;
        $43 = HEAP8[$__sn>>0]|0;
        $44 = $43 & 1;
        $45 = ($44<<24>>24)==(0);
        if ($45) {
         $48 = $43&255;
         $49 = $48 >>> 1;
         $59 = $49;
        } else {
         $46 = (($__sn) + 4|0);
         $47 = HEAP32[$46>>2]|0;
         $59 = $47;
        }
        $50 = HEAP8[$__sym>>0]|0;
        $51 = $50 & 1;
        $52 = ($51<<24>>24)==(0);
        if ($52) {
         $55 = $50&255;
         $56 = $55 >>> 1;
         $61 = $56;
        } else {
         $53 = (($__sym) + 4|0);
         $54 = HEAP32[$53>>2]|0;
         $61 = $54;
        }
        $57 = $42 | 1;
        $58 = (($59) + ($57))|0;
        $60 = (($58) + ($61))|0;
        $$pn = $60;
       } else {
        $62 = HEAP8[$__sn>>0]|0;
        $63 = $62 & 1;
        $64 = ($63<<24>>24)==(0);
        if ($64) {
         $67 = $62&255;
         $68 = $67 >>> 1;
         $77 = $68;
        } else {
         $65 = (($__sn) + 4|0);
         $66 = HEAP32[$65>>2]|0;
         $77 = $66;
        }
        $69 = HEAP8[$__sym>>0]|0;
        $70 = $69 & 1;
        $71 = ($70<<24>>24)==(0);
        if ($71) {
         $74 = $69&255;
         $75 = $74 >>> 1;
         $79 = $75;
        } else {
         $72 = (($__sym) + 4|0);
         $73 = HEAP32[$72>>2]|0;
         $79 = $73;
        }
        $76 = (($77) + 2)|0;
        $78 = (($76) + ($79))|0;
        $$pn = $78;
       }
       $80 = (($$pn) + ($39))|0;
       $81 = ($80>>>0)>(100);
       if ($81) {
        $82 = $80 << 2;
        $83 = (_malloc($82)|0);
        $84 = ($83|0)==(0|0);
        if ($84) {
         __THREW__ = 0;
         invoke_v(487);
         $85 = __THREW__; __THREW__ = 0;
         $86 = $85&1;
         if ($86) {
          $87 = ___cxa_find_matching_catch()|0;
          $88 = tempRet0;
          $$0 = $87;$$01 = $88;
          break;
         } else {
          $96 = 0;$__mb$0 = 0;
         }
        } else {
         $96 = $83;$__mb$0 = $83;
        }
       } else {
        $96 = 0;$__mb$0 = $__mbuf;
       }
       $97 = (($__iob) + 4|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = (($__db$0) + ($__n$0<<2)|0);
       $100 = HEAP32[$__dp>>2]|0;
       $101 = HEAP32[$__ts>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(516,($__mb$0|0),($__mi|0),($__me|0),($98|0),($__db$0|0),($99|0),($22|0),($36|0),($__pat|0),($100|0),($101|0),($__grp|0),($__sym|0),($__sn|0),($39|0));
       $102 = __THREW__; __THREW__ = 0;
       $103 = $102&1;
       if (!($103)) {
        $104 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $104;
        $105 = HEAP32[$__mi>>2]|0;
        $106 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
        invoke_viiiiiii(494,($agg$result|0),($$byval_copy|0),($__mb$0|0),($105|0),($106|0),($__iob|0),($__fl|0));
        $107 = __THREW__; __THREW__ = 0;
        $108 = $107&1;
        if (!($108)) {
         $109 = ($96|0)==(0|0);
         if (!($109)) {
          _free($96);
         }
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
         $110 = HEAP32[$__loc>>2]|0;
         (__ZNSt3__114__shared_count16__release_sharedEv($110)|0);
         $111 = ($112|0)==(0|0);
         if ($111) {
          _free($113);
          STACKTOP = sp;return;
         }
         _free($112);
         _free($113);
         STACKTOP = sp;return;
        }
       }
       $93 = ___cxa_find_matching_catch()|0;
       $94 = tempRet0;
       $95 = ($96|0)==(0|0);
       if ($95) {
        $$0 = $93;$$01 = $94;
       } else {
        _free($96);
        $$0 = $93;$$01 = $94;
       }
      }
     } while(0);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
     $$1 = $$0;$$12 = $$01;
    }
   }
   if ((label|0) == 35) {
    $89 = ___cxa_find_matching_catch()|0;
    $90 = tempRet0;
    $$1 = $89;$$12 = $90;
   }
   $114 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($114)|0);
   $$2 = $$1;$$23 = $$12;$116 = $112;$117 = $113;
  }
 }
 if ((label|0) == 7) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $$2 = $13;$$23 = $14;$116 = $119;$117 = $118;
 }
 $115 = ($116|0)==(0|0);
 if ($115) {
  _free($117);
  ___resumeException($$2|0);
  // unreachable;
 }
 _free($116);
 _free($117);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = sp + 16|0;
 $2 = sp + 92|0;
 $3 = sp + 40|0;
 $4 = sp + 80|0;
 $5 = sp + 96|0;
 $6 = sp + 108|0;
 $7 = sp + 56|0;
 $8 = sp + 52|0;
 $9 = sp + 28|0;
 $10 = sp + 4|0;
 $11 = sp + 68|0;
 if ($__intl) {
  $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,10424)|0);
  $13 = HEAP32[$12>>2]|0;
  do {
   if ($__neg) {
    $14 = (($13) + 44|0);
    $15 = HEAP32[$14>>2]|0;
    FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
    $16 = HEAP32[$0>>2]|0;
    HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
    $17 = HEAP32[$12>>2]|0;
    $18 = (($17) + 32|0);
    $19 = HEAP32[$18>>2]|0;
    FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
    $20 = HEAP8[$__sn>>0]|0;
    $21 = $20 & 1;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     $26 = (($__sn) + 4|0);
     HEAP32[$26>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $23 = (($__sn) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     HEAP32[$24>>2] = 0;
     $25 = (($__sn) + 4|0);
     HEAP32[$25>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(512,($__sn|0),0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     $29 = ___cxa_find_matching_catch(0|0)|0;
     $30 = tempRet0;
     ___clang_call_terminate($29);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
     break;
    }
   } else {
    $31 = (($13) + 40|0);
    $32 = HEAP32[$31>>2]|0;
    FUNCTION_TABLE_vii[$32 & 1023]($2,$12);
    $33 = HEAP32[$2>>2]|0;
    HEAP8[$__pat>>0]=$33&255;HEAP8[$__pat+1>>0]=($33>>8)&255;HEAP8[$__pat+2>>0]=($33>>16)&255;HEAP8[$__pat+3>>0]=$33>>24;
    $34 = HEAP32[$12>>2]|0;
    $35 = (($34) + 28|0);
    $36 = HEAP32[$35>>2]|0;
    FUNCTION_TABLE_vii[$36 & 1023]($3,$12);
    $37 = HEAP8[$__sn>>0]|0;
    $38 = $37 & 1;
    $39 = ($38<<24>>24)==(0);
    if ($39) {
     $43 = (($__sn) + 4|0);
     HEAP32[$43>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $40 = (($__sn) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     HEAP32[$41>>2] = 0;
     $42 = (($__sn) + 4|0);
     HEAP32[$42>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(512,($__sn|0),0);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     $46 = ___cxa_find_matching_catch(0|0)|0;
     $47 = tempRet0;
     ___clang_call_terminate($46);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($3);
     break;
    }
   }
  } while(0);
  $48 = HEAP32[$12>>2]|0;
  $49 = (($48) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (FUNCTION_TABLE_ii[$50 & 1023]($12)|0);
  HEAP32[$__dp>>2] = $51;
  $52 = HEAP32[$12>>2]|0;
  $53 = (($52) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (FUNCTION_TABLE_ii[$54 & 1023]($12)|0);
  HEAP32[$__ts>>2] = $55;
  $56 = HEAP32[$12>>2]|0;
  $57 = (($56) + 20|0);
  $58 = HEAP32[$57>>2]|0;
  FUNCTION_TABLE_vii[$58 & 1023]($4,$12);
  $59 = HEAP8[$__grp>>0]|0;
  $60 = $59 & 1;
  $61 = ($60<<24>>24)==(0);
  if ($61) {
   $65 = (($__grp) + 1|0);
   HEAP8[$65>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $62 = (($__grp) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   HEAP8[$63>>0] = 0;
   $64 = (($__grp) + 4|0);
   HEAP32[$64>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(506,($__grp|0),0);
  $66 = __THREW__; __THREW__ = 0;
  $67 = $66&1;
  if ($67) {
   $68 = ___cxa_find_matching_catch(0|0)|0;
   $69 = tempRet0;
   ___clang_call_terminate($68);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $70 = HEAP32[$12>>2]|0;
  $71 = (($70) + 24|0);
  $72 = HEAP32[$71>>2]|0;
  FUNCTION_TABLE_vii[$72 & 1023]($5,$12);
  $73 = HEAP8[$__sym>>0]|0;
  $74 = $73 & 1;
  $75 = ($74<<24>>24)==(0);
  if ($75) {
   $79 = (($__sym) + 4|0);
   HEAP32[$79>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $76 = (($__sym) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   HEAP32[$77>>2] = 0;
   $78 = (($__sym) + 4|0);
   HEAP32[$78>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(512,($__sym|0),0);
  $80 = __THREW__; __THREW__ = 0;
  $81 = $80&1;
  if ($81) {
   $82 = ___cxa_find_matching_catch(0|0)|0;
   $83 = tempRet0;
   ___clang_call_terminate($82);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($5);
  $84 = HEAP32[$12>>2]|0;
  $85 = (($84) + 36|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (FUNCTION_TABLE_ii[$86 & 1023]($12)|0);
  $storemerge = $87;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $88 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,10360)|0);
  $89 = HEAP32[$88>>2]|0;
  do {
   if ($__neg) {
    $90 = (($89) + 44|0);
    $91 = HEAP32[$90>>2]|0;
    FUNCTION_TABLE_vii[$91 & 1023]($6,$88);
    $92 = HEAP32[$6>>2]|0;
    HEAP8[$__pat>>0]=$92&255;HEAP8[$__pat+1>>0]=($92>>8)&255;HEAP8[$__pat+2>>0]=($92>>16)&255;HEAP8[$__pat+3>>0]=$92>>24;
    $93 = HEAP32[$88>>2]|0;
    $94 = (($93) + 32|0);
    $95 = HEAP32[$94>>2]|0;
    FUNCTION_TABLE_vii[$95 & 1023]($7,$88);
    $96 = HEAP8[$__sn>>0]|0;
    $97 = $96 & 1;
    $98 = ($97<<24>>24)==(0);
    if ($98) {
     $102 = (($__sn) + 4|0);
     HEAP32[$102>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $99 = (($__sn) + 8|0);
     $100 = HEAP32[$99>>2]|0;
     HEAP32[$100>>2] = 0;
     $101 = (($__sn) + 4|0);
     HEAP32[$101>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(512,($__sn|0),0);
    $103 = __THREW__; __THREW__ = 0;
    $104 = $103&1;
    if ($104) {
     $105 = ___cxa_find_matching_catch(0|0)|0;
     $106 = tempRet0;
     ___clang_call_terminate($105);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
     ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
     break;
    }
   } else {
    $107 = (($89) + 40|0);
    $108 = HEAP32[$107>>2]|0;
    FUNCTION_TABLE_vii[$108 & 1023]($8,$88);
    $109 = HEAP32[$8>>2]|0;
    HEAP8[$__pat>>0]=$109&255;HEAP8[$__pat+1>>0]=($109>>8)&255;HEAP8[$__pat+2>>0]=($109>>16)&255;HEAP8[$__pat+3>>0]=$109>>24;
    $110 = HEAP32[$88>>2]|0;
    $111 = (($110) + 28|0);
    $112 = HEAP32[$111>>2]|0;
    FUNCTION_TABLE_vii[$112 & 1023]($9,$88);
    $113 = HEAP8[$__sn>>0]|0;
    $114 = $113 & 1;
    $115 = ($114<<24>>24)==(0);
    if ($115) {
     $119 = (($__sn) + 4|0);
     HEAP32[$119>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $116 = (($__sn) + 8|0);
     $117 = HEAP32[$116>>2]|0;
     HEAP32[$117>>2] = 0;
     $118 = (($__sn) + 4|0);
     HEAP32[$118>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(512,($__sn|0),0);
    $120 = __THREW__; __THREW__ = 0;
    $121 = $120&1;
    if ($121) {
     $122 = ___cxa_find_matching_catch(0|0)|0;
     $123 = tempRet0;
     ___clang_call_terminate($122);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
     ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
     break;
    }
   }
  } while(0);
  $124 = HEAP32[$88>>2]|0;
  $125 = (($124) + 12|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (FUNCTION_TABLE_ii[$126 & 1023]($88)|0);
  HEAP32[$__dp>>2] = $127;
  $128 = HEAP32[$88>>2]|0;
  $129 = (($128) + 16|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (FUNCTION_TABLE_ii[$130 & 1023]($88)|0);
  HEAP32[$__ts>>2] = $131;
  $132 = HEAP32[$88>>2]|0;
  $133 = (($132) + 20|0);
  $134 = HEAP32[$133>>2]|0;
  FUNCTION_TABLE_vii[$134 & 1023]($10,$88);
  $135 = HEAP8[$__grp>>0]|0;
  $136 = $135 & 1;
  $137 = ($136<<24>>24)==(0);
  if ($137) {
   $141 = (($__grp) + 1|0);
   HEAP8[$141>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $138 = (($__grp) + 8|0);
   $139 = HEAP32[$138>>2]|0;
   HEAP8[$139>>0] = 0;
   $140 = (($__grp) + 4|0);
   HEAP32[$140>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(506,($__grp|0),0);
  $142 = __THREW__; __THREW__ = 0;
  $143 = $142&1;
  if ($143) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
  $146 = HEAP32[$88>>2]|0;
  $147 = (($146) + 24|0);
  $148 = HEAP32[$147>>2]|0;
  FUNCTION_TABLE_vii[$148 & 1023]($11,$88);
  $149 = HEAP8[$__sym>>0]|0;
  $150 = $149 & 1;
  $151 = ($150<<24>>24)==(0);
  if ($151) {
   $155 = (($__sym) + 4|0);
   HEAP32[$155>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $152 = (($__sym) + 8|0);
   $153 = HEAP32[$152>>2]|0;
   HEAP32[$153>>2] = 0;
   $154 = (($__sym) + 4|0);
   HEAP32[$154>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(512,($__sym|0),0);
  $156 = __THREW__; __THREW__ = 0;
  $157 = $156&1;
  if ($157) {
   $158 = ___cxa_find_matching_catch(0|0)|0;
   $159 = tempRet0;
   ___clang_call_terminate($158);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($11);
  $160 = HEAP32[$88>>2]|0;
  $161 = (($160) + 36|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (FUNCTION_TABLE_ii[$162 & 1023]($88)|0);
  $storemerge = $163;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i22 = 0, $$01$i$i = 0, $$01$i$i19 = 0, $$012$i$i = 0, $$060 = 0, $$2 = 0, $$lcssa45 = 0, $$pn = 0, $$promoted4$i$i = 0, $$promoted4$i$i16 = 0, $$sum = 0, $$sum33 = 0, $$sum75 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $88$phi = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$034 = 0, $__d$1$lcssa7881 = 0, $__d$1$lcssa79 = 0;
 var $__d$137 = 0, $__d$2 = 0, $__d$354 = 0, $__f$0$lcssa77 = 0, $__f$038 = 0, $__f$146 = 0, $__gl$057 = 0, $__gl$1 = 0, $__ig$056 = 0, $__ig$1 = 0, $__me$promoted = 0, $__ng$055 = 0, $__ng$1 = 0, $__p$059 = 0, $exitcond = 0, $or$cond = 0, $or$cond3 = 0, $scevgep = 0, $scevgep$i$i = 0, $scevgep$i$i17 = 0;
 var $scevgep6$i$i = 0, $scevgep6$i$i20 = 0, $scevgep71 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 4|0);
 $1 = (($__sn) + 8|0);
 $2 = $__flags & 512;
 $3 = ($2|0)==(0);
 $4 = (($__sym) + 4|0);
 $5 = (($__sym) + 8|0);
 $6 = ($__fd|0)>(0);
 $7 = (($__grp) + 1|0);
 $8 = (($__grp) + 8|0);
 $9 = (($__grp) + 4|0);
 $$060 = $__db;$__p$059 = 0;
 while(1) {
  $10 = (($__pat) + ($__p$059)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  switch ($12|0) {
  case 2:  {
   $34 = HEAP8[$__sym>>0]|0;
   $35 = $34 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $38 = $34&255;
    $39 = $38 >>> 1;
    $41 = $39;
   } else {
    $37 = HEAP32[$4>>2]|0;
    $41 = $37;
   }
   $40 = ($41|0)==(0);
   $or$cond3 = $40 | $3;
   if ($or$cond3) {
    $$2 = $$060;
   } else {
    if ($36) {
     $44 = $34&255;
     $45 = $44 >>> 1;
     $47 = $4;$48 = $45;$51 = $4;
    } else {
     $42 = HEAP32[$5>>2]|0;
     $43 = HEAP32[$4>>2]|0;
     $47 = $42;$48 = $43;$51 = $42;
    }
    $46 = (($47) + ($48<<2)|0);
    $49 = HEAP32[$__me>>2]|0;
    $50 = ($51|0)==($46|0);
    if ($50) {
     $$0$lcssa$i$i22 = $49;
    } else {
     $$promoted4$i$i16 = $51;
     $$sum33 = (($48) + -1)|0;
     $scevgep$i$i17 = (($47) + ($$sum33<<2)|0);
     $52 = $scevgep$i$i17;
     $53 = (($52) - ($$promoted4$i$i16))|0;
     $54 = $53 >>> 2;
     $$01$i$i19 = $49;$56 = $51;
     while(1) {
      $55 = HEAP32[$56>>2]|0;
      HEAP32[$$01$i$i19>>2] = $55;
      $57 = (($56) + 4|0);
      $58 = (($$01$i$i19) + 4|0);
      $59 = ($57|0)==($46|0);
      if ($59) {
       break;
      } else {
       $$01$i$i19 = $58;$56 = $57;
      }
     }
     $60 = (($54) + 1)|0;
     $scevgep6$i$i20 = (($49) + ($60<<2)|0);
     $$0$lcssa$i$i22 = $scevgep6$i$i20;
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i22;
    $$2 = $$060;
   }
   break;
  }
  case 0:  {
   $13 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $13;
   $$2 = $$060;
   break;
  }
  case 1:  {
   $14 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $14;
   $15 = HEAP32[$__ct>>2]|0;
   $16 = (($15) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iii[$17 & 1023]($__ct,32)|0);
   $19 = HEAP32[$__me>>2]|0;
   $20 = (($19) + 4|0);
   HEAP32[$__me>>2] = $20;
   HEAP32[$19>>2] = $18;
   $$2 = $$060;
   break;
  }
  case 3:  {
   $21 = HEAP8[$__sn>>0]|0;
   $22 = $21 & 1;
   $23 = ($22<<24>>24)==(0);
   if ($23) {
    $25 = $21&255;
    $26 = $25 >>> 1;
    $28 = $26;
   } else {
    $24 = HEAP32[$0>>2]|0;
    $28 = $24;
   }
   $27 = ($28|0)==(0);
   if ($27) {
    $$2 = $$060;
   } else {
    if ($23) {
     $31 = $0;
    } else {
     $29 = HEAP32[$1>>2]|0;
     $31 = $29;
    }
    $30 = HEAP32[$31>>2]|0;
    $32 = HEAP32[$__me>>2]|0;
    $33 = (($32) + 4|0);
    HEAP32[$__me>>2] = $33;
    HEAP32[$32>>2] = $30;
    $$2 = $$060;
   }
   break;
  }
  case 4:  {
   $61 = HEAP32[$__me>>2]|0;
   $62 = (($$060) + 4|0);
   $$$0 = $__neg ? $62 : $$060;
   $63 = ($$$0>>>0)<($__de>>>0);
   L32: do {
    if ($63) {
     $__d$034 = $$$0;
     while(1) {
      $66 = HEAP32[$__d$034>>2]|0;
      $67 = HEAP32[$__ct>>2]|0;
      $68 = (($67) + 12|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = (FUNCTION_TABLE_iiii[$69 & 1023]($__ct,2048,$66)|0);
      $65 = (($__d$034) + 4|0);
      if (!($70)) {
       $__d$0$lcssa = $__d$034;
       break L32;
      }
      $64 = ($65>>>0)<($__de>>>0);
      if ($64) {
       $__d$034 = $65;
      } else {
       $__d$0$lcssa = $65;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   if ($6) {
    $71 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($71) {
     $__me$promoted = HEAP32[$__me>>2]|0;
     $75 = $__me$promoted;$__d$137 = $__d$0$lcssa;$__f$038 = $__fd;
     while(1) {
      $72 = (($__d$137) + -4|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = (($75) + 4|0);
      HEAP32[$75>>2] = $73;
      $76 = (($__f$038) + -1)|0;
      $77 = ($72>>>0)>($$$0>>>0);
      $78 = ($76|0)>(0);
      $or$cond = $77 & $78;
      if ($or$cond) {
       $75 = $74;$__d$137 = $72;$__f$038 = $76;
      } else {
       break;
      }
     }
     HEAP32[$__me>>2] = $74;
     if ($78) {
      $__d$1$lcssa79 = $72;$__f$0$lcssa77 = $76;
      label = 33;
     } else {
      $79 = HEAP32[$__me>>2]|0;
      $80 = (($79) + 4|0);
      HEAP32[$__me>>2] = $80;
      $$lcssa45 = $79;$__d$1$lcssa7881 = $72;
     }
    } else {
     $__d$1$lcssa79 = $__d$0$lcssa;$__f$0$lcssa77 = $__fd;
     label = 33;
    }
    if ((label|0) == 33) {
     label = 0;
     $81 = HEAP32[$__ct>>2]|0;
     $82 = (($81) + 44|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = (FUNCTION_TABLE_iii[$83 & 1023]($__ct,48)|0);
     $85 = ($__f$0$lcssa77|0)>(0);
     $86 = HEAP32[$__me>>2]|0;
     $87 = (($86) + 4|0);
     HEAP32[$__me>>2] = $87;
     if ($85) {
      $88 = $86;$92 = $87;$__f$146 = $__f$0$lcssa77;
      while(1) {
       HEAP32[$88>>2] = $84;
       $89 = (($__f$146) + -1)|0;
       $90 = ($89|0)>(0);
       $91 = (($92) + 4|0);
       if ($90) {
        $88$phi = $92;$92 = $91;$__f$146 = $89;$88 = $88$phi;
       } else {
        break;
       }
      }
      $$sum75 = (($__f$0$lcssa77) + 1)|0;
      $scevgep = (($86) + ($$sum75<<2)|0);
      $scevgep71 = (($86) + ($__f$0$lcssa77<<2)|0);
      HEAP32[$__me>>2] = $scevgep;
      $$lcssa45 = $scevgep71;$__d$1$lcssa7881 = $__d$1$lcssa79;
     } else {
      $$lcssa45 = $86;$__d$1$lcssa7881 = $__d$1$lcssa79;
     }
    }
    HEAP32[$$lcssa45>>2] = $__dp;
    $__d$2 = $__d$1$lcssa7881;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $93 = ($__d$2|0)==($$$0|0);
   if ($93) {
    $94 = HEAP32[$__ct>>2]|0;
    $95 = (($94) + 44|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (FUNCTION_TABLE_iii[$96 & 1023]($__ct,48)|0);
    $98 = HEAP32[$__me>>2]|0;
    $99 = (($98) + 4|0);
    HEAP32[$__me>>2] = $99;
    HEAP32[$98>>2] = $97;
    $141 = $99;
   } else {
    $100 = HEAP8[$__grp>>0]|0;
    $101 = $100 & 1;
    $102 = ($101<<24>>24)==(0);
    if ($102) {
     $104 = $100&255;
     $105 = $104 >>> 1;
     $107 = $105;
    } else {
     $103 = HEAP32[$9>>2]|0;
     $107 = $103;
    }
    $106 = ($107|0)==(0);
    if ($106) {
     $__d$354 = $__d$2;$__gl$057 = -1;$__ig$056 = 0;$__ng$055 = 0;
    } else {
     if ($102) {
      $110 = $7;
     } else {
      $108 = HEAP32[$8>>2]|0;
      $110 = $108;
     }
     $109 = HEAP8[$110>>0]|0;
     $111 = $109 << 24 >> 24;
     $__d$354 = $__d$2;$__gl$057 = $111;$__ig$056 = 0;$__ng$055 = 0;
    }
    while(1) {
     $112 = ($__ng$055|0)==($__gl$057|0);
     $113 = HEAP32[$__me>>2]|0;
     if ($112) {
      $114 = (($113) + 4|0);
      HEAP32[$__me>>2] = $114;
      HEAP32[$113>>2] = $__ts;
      $115 = (($__ig$056) + 1)|0;
      $116 = HEAP8[$__grp>>0]|0;
      $117 = $116 & 1;
      $118 = ($117<<24>>24)==(0);
      if ($118) {
       $120 = $116&255;
       $121 = $120 >>> 1;
       $123 = $121;
      } else {
       $119 = HEAP32[$9>>2]|0;
       $123 = $119;
      }
      $122 = ($115>>>0)<($123>>>0);
      if ($122) {
       if ($118) {
        $126 = $7;
       } else {
        $124 = HEAP32[$8>>2]|0;
        $126 = $124;
       }
       $125 = (($126) + ($115)|0);
       $127 = HEAP8[$125>>0]|0;
       $128 = ($127<<24>>24)==(127);
       if ($128) {
        $137 = $114;$__gl$1 = -1;$__ig$1 = $115;$__ng$1 = 0;
       } else {
        if ($118) {
         $131 = $7;
        } else {
         $129 = HEAP32[$8>>2]|0;
         $131 = $129;
        }
        $130 = (($131) + ($115)|0);
        $132 = HEAP8[$130>>0]|0;
        $133 = $132 << 24 >> 24;
        $137 = $114;$__gl$1 = $133;$__ig$1 = $115;$__ng$1 = 0;
       }
      } else {
       $137 = $114;$__gl$1 = $__gl$057;$__ig$1 = $115;$__ng$1 = 0;
      }
     } else {
      $137 = $113;$__gl$1 = $__gl$057;$__ig$1 = $__ig$056;$__ng$1 = $__ng$055;
     }
     $134 = (($__d$354) + -4|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = (($137) + 4|0);
     HEAP32[$__me>>2] = $136;
     HEAP32[$137>>2] = $135;
     $138 = (($__ng$1) + 1)|0;
     $139 = ($134|0)==($$$0|0);
     if ($139) {
      $141 = $136;
      break;
     } else {
      $__d$354 = $134;$__gl$057 = $__gl$1;$__ig$056 = $__ig$1;$__ng$055 = $138;
     }
    }
   }
   $140 = ($61|0)==($141|0);
   if ($140) {
    $$2 = $$$0;
   } else {
    $142 = (($141) + -4|0);
    $143 = ($142>>>0)>($61>>>0);
    if ($143) {
     $$012$i$i = $61;$146 = $142;
     while(1) {
      $144 = HEAP32[$$012$i$i>>2]|0;
      $145 = HEAP32[$146>>2]|0;
      HEAP32[$$012$i$i>>2] = $145;
      HEAP32[$146>>2] = $144;
      $147 = (($$012$i$i) + 4|0);
      $148 = (($146) + -4|0);
      $149 = ($147>>>0)<($148>>>0);
      if ($149) {
       $$012$i$i = $147;$146 = $148;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  default: {
   $$2 = $$060;
  }
  }
  $150 = (($__p$059) + 1)|0;
  $exitcond = ($150|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$060 = $$2;$__p$059 = $150;
  }
 }
 $151 = HEAP8[$__sn>>0]|0;
 $152 = $151 & 1;
 $153 = ($152<<24>>24)==(0);
 if ($153) {
  $155 = $151&255;
  $156 = $155 >>> 1;
  $158 = $156;
 } else {
  $154 = HEAP32[$0>>2]|0;
  $158 = $154;
 }
 $157 = ($158>>>0)>(1);
 if ($157) {
  if ($153) {
   $161 = $151&255;
   $162 = $161 >>> 1;
   $$pn = $0;$165 = $0;$166 = $162;
  } else {
   $159 = HEAP32[$1>>2]|0;
   $160 = HEAP32[$0>>2]|0;
   $$pn = $159;$165 = $159;$166 = $160;
  }
  $163 = (($$pn) + 4|0);
  $164 = (($165) + ($166<<2)|0);
  $167 = HEAP32[$__me>>2]|0;
  $168 = ($163|0)==($164|0);
  if ($168) {
   $$0$lcssa$i$i = $167;
  } else {
   $$promoted4$i$i = $163;
   $$sum = (($166) + -1)|0;
   $scevgep$i$i = (($165) + ($$sum<<2)|0);
   $169 = $scevgep$i$i;
   $170 = (($169) - ($$promoted4$i$i))|0;
   $171 = $170 >>> 2;
   $$01$i$i = $167;$173 = $163;
   while(1) {
    $172 = HEAP32[$173>>2]|0;
    HEAP32[$$01$i$i>>2] = $172;
    $174 = (($173) + 4|0);
    $175 = (($$01$i$i) + 4|0);
    $176 = ($174|0)==($164|0);
    if ($176) {
     break;
    } else {
     $$01$i$i = $175;$173 = $174;
    }
   }
   $177 = (($171) + 1)|0;
   $scevgep6$i$i = (($167) + ($177<<2)|0);
   $$0$lcssa$i$i = $scevgep6$i$i;
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $178 = $__flags & 176;
 if ((($178|0) == 32)) {
  $179 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $179;
  STACKTOP = sp;return;
 } else if ((($178|0) == 16)) {
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0;
 var $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 456|0;
 $__loc = sp + 440|0;
 $__pat = sp + 12|0;
 $__dp = sp + 8|0;
 $__ts = sp + 436|0;
 $__grp = sp + 444|0;
 $__sym = sp + 460|0;
 $__sn = sp + 16|0;
 $__fd = sp;
 $__mbuf = sp + 32|0;
 $__mi = sp + 4|0;
 $__me = sp + 432|0;
 $0 = sp + 28|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $1 = (invoke_iii(432,($__loc|0),(10848|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if (!($3)) {
   $4 = HEAP8[$__digits>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = $4&255;
    $10 = $9 >>> 1;
    $12 = $10;
   } else {
    $7 = (($__digits) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $12 = $8;
   }
   $11 = ($12|0)==(0);
   if ($11) {
    $25 = 0;
   } else {
    if ($6) {
     $15 = (($__digits) + 4|0);
     $17 = $15;
    } else {
     $13 = (($__digits) + 8|0);
     $14 = HEAP32[$13>>2]|0;
     $17 = $14;
    }
    $16 = HEAP32[$17>>2]|0;
    $18 = HEAP32[$1>>2]|0;
    $19 = (($18) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    __THREW__ = 0;
    $21 = (invoke_iii($20|0,($1|0),45)|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = ($16|0)==($21|0);
    $25 = $24;
   }
   HEAP32[$__pat>>2] = 0;
   ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
   ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
   ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(515,($__intl|0),($25|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   L15: do {
    if ($27) {
     $93 = ___cxa_find_matching_catch()|0;
     $94 = tempRet0;
     $$0 = $93;$$01 = $94;
    } else {
     $28 = HEAP8[$__digits>>0]|0;
     $29 = $28 & 1;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $33 = $28&255;
      $34 = $33 >>> 1;
      $37 = $34;
     } else {
      $31 = (($__digits) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $37 = $32;
     }
     $35 = HEAP32[$__fd>>2]|0;
     $36 = ($37|0)>($35|0);
     if ($36) {
      if ($30) {
       $40 = $28&255;
       $41 = $40 >>> 1;
       $43 = $41;
      } else {
       $38 = (($__digits) + 4|0);
       $39 = HEAP32[$38>>2]|0;
       $43 = $39;
      }
      $42 = (($43) - ($35))|0;
      $44 = $42 << 1;
      $45 = HEAP8[$__sn>>0]|0;
      $46 = $45 & 1;
      $47 = ($46<<24>>24)==(0);
      if ($47) {
       $50 = $45&255;
       $51 = $50 >>> 1;
       $61 = $51;
      } else {
       $48 = (($__sn) + 4|0);
       $49 = HEAP32[$48>>2]|0;
       $61 = $49;
      }
      $52 = HEAP8[$__sym>>0]|0;
      $53 = $52 & 1;
      $54 = ($53<<24>>24)==(0);
      if ($54) {
       $57 = $52&255;
       $58 = $57 >>> 1;
       $63 = $58;
      } else {
       $55 = (($__sym) + 4|0);
       $56 = HEAP32[$55>>2]|0;
       $63 = $56;
      }
      $59 = $44 | 1;
      $60 = (($61) + ($59))|0;
      $62 = (($60) + ($63))|0;
      $$pn = $62;
     } else {
      $64 = HEAP8[$__sn>>0]|0;
      $65 = $64 & 1;
      $66 = ($65<<24>>24)==(0);
      if ($66) {
       $69 = $64&255;
       $70 = $69 >>> 1;
       $79 = $70;
      } else {
       $67 = (($__sn) + 4|0);
       $68 = HEAP32[$67>>2]|0;
       $79 = $68;
      }
      $71 = HEAP8[$__sym>>0]|0;
      $72 = $71 & 1;
      $73 = ($72<<24>>24)==(0);
      if ($73) {
       $76 = $71&255;
       $77 = $76 >>> 1;
       $81 = $77;
      } else {
       $74 = (($__sym) + 4|0);
       $75 = HEAP32[$74>>2]|0;
       $81 = $75;
      }
      $78 = (($79) + 2)|0;
      $80 = (($78) + ($81))|0;
      $$pn = $80;
     }
     $82 = (($$pn) + ($35))|0;
     $83 = ($82>>>0)>(100);
     do {
      if ($83) {
       $84 = $82 << 2;
       $85 = (_malloc($84)|0);
       $86 = ($85|0)==(0|0);
       if ($86) {
        __THREW__ = 0;
        invoke_v(487);
        $87 = __THREW__; __THREW__ = 0;
        $88 = $87&1;
        if ($88) {
         $89 = ___cxa_find_matching_catch()|0;
         $90 = tempRet0;
         $$0 = $89;$$01 = $90;
         break L15;
        } else {
         $$pre = HEAP8[$__digits>>0]|0;
         $102 = $$pre;$98 = 0;$__mb$0 = 0;
         break;
        }
       } else {
        $102 = $28;$98 = $85;$__mb$0 = $85;
       }
      } else {
       $102 = $28;$98 = 0;$__mb$0 = $__mbuf;
      }
     } while(0);
     $99 = (($__iob) + 4|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = $102 & 1;
     $103 = ($101<<24>>24)==(0);
     if ($103) {
      $108 = (($__digits) + 4|0);
      $109 = $102&255;
      $110 = $109 >>> 1;
      $112 = $108;$113 = $110;
     } else {
      $104 = (($__digits) + 8|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = (($__digits) + 4|0);
      $107 = HEAP32[$106>>2]|0;
      $112 = $105;$113 = $107;
     }
     $111 = (($112) + ($113<<2)|0);
     $114 = HEAP32[$__dp>>2]|0;
     $115 = HEAP32[$__ts>>2]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(516,($__mb$0|0),($__mi|0),($__me|0),($100|0),($112|0),($111|0),($1|0),($25|0),($__pat|0),($114|0),($115|0),($__grp|0),($__sym|0),($__sn|0),($35|0));
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if (!($117)) {
      $118 = HEAP32[$__s>>2]|0;
      HEAP32[$0>>2] = $118;
      $119 = HEAP32[$__mi>>2]|0;
      $120 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
      invoke_viiiiiii(494,($agg$result|0),($$byval_copy|0),($__mb$0|0),($119|0),($120|0),($__iob|0),($__fl|0));
      $121 = __THREW__; __THREW__ = 0;
      $122 = $121&1;
      if (!($122)) {
       $123 = ($98|0)==(0|0);
       if ($123) {
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
        $124 = HEAP32[$__loc>>2]|0;
        (__ZNSt3__114__shared_count16__release_sharedEv($124)|0);
        STACKTOP = sp;return;
       }
       _free($98);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
       $124 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($124)|0);
       STACKTOP = sp;return;
      }
     }
     $95 = ___cxa_find_matching_catch()|0;
     $96 = tempRet0;
     $97 = ($98|0)==(0|0);
     if ($97) {
      $$0 = $95;$$01 = $96;
     } else {
      _free($98);
      $$0 = $95;$$01 = $96;
     }
    }
   } while(0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $$1 = $$0;$$12 = $$01;
   $125 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($125)|0);
   ___resumeException($$1|0);
   // unreachable;
  }
 } while(0);
 $91 = ___cxa_find_matching_catch()|0;
 $92 = tempRet0;
 $$1 = $91;$$12 = $92;
 $125 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($125)|0);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$01 = 0, $$01$i = 0, $$01$i7 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ndflt = 0, $exitcond$i = 0, $exitcond$i8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0;
 var $phitmp = 0, $phitmp18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__ndflt = sp;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $0 = HEAP8[$__dflt>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = (($__dflt) + 1|0);
  $8 = (($__dflt) + 1|0);
  $9 = $0&255;
  $10 = $9 >>> 1;
  $12 = $8;$13 = $10;$15 = $7;
 } else {
  $3 = (($__dflt) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($__dflt) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $12 = $4;$13 = $6;$15 = $4;
 }
 $11 = (($12) + ($13)|0);
 $14 = ($15>>>0)<($11>>>0);
 do {
  if ($14) {
   $$01$i7 = $15;
   while(1) {
    $20 = HEAP8[$$01$i7>>0]|0;
    __THREW__ = 0;
    invoke_vii(416,($__ndflt|0),($20|0));
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     label = 12;
     break;
    }
    $23 = (($$01$i7) + 1|0);
    $exitcond$i8 = ($23|0)==($11|0);
    if ($exitcond$i8) {
     break;
    } else {
     $$01$i7 = $23;
    }
   }
   if ((label|0) == 12) {
    $36 = ___cxa_find_matching_catch()|0;
    $37 = tempRet0;
    $lpad$phi$index = $36;$lpad$phi$index2 = $37;
    break;
   }
   $$pre = HEAP8[$__ndflt>>0]|0;
   $phitmp = $$pre & 1;
   $phitmp18 = ($phitmp<<24>>24)==(0);
   $24 = ($__c|0)==(-1);
   $25 = $__c << 1;
   $26 = $25;
   $27 = $24 ? (-1) : $26;
   if ($phitmp18) {
    $49 = $27;
    label = 10;
   } else {
    $28 = (($__ndflt) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    $31 = $27;$32 = $29;
    label = 11;
   }
  } else {
   $16 = ($__c|0)==(-1);
   $17 = $__c << 1;
   $18 = $17;
   $19 = $16 ? (-1) : $18;
   $49 = $19;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $30 = (($__ndflt) + 1|0);
  $31 = $49;$32 = $30;
  label = 11;
 }
 do {
  if ((label|0) == 11) {
   __THREW__ = 0;
   $33 = (invoke_iiiii(517,($31|0),($__set|0),($__msgid|0),($32|0))|0);
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if ($35) {
    $38 = ___cxa_find_matching_catch()|0;
    $39 = tempRet0;
    $lpad$phi$index = $38;$lpad$phi$index2 = $39;
    break;
   }
   ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
   $40 = (_strlen(($33|0))|0);
   $41 = (($33) + ($40)|0);
   $42 = ($40|0)>(0);
   if ($42) {
    $$01$i = $33;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
    STACKTOP = sp;return;
   }
   while(1) {
    $43 = HEAP8[$$01$i>>0]|0;
    __THREW__ = 0;
    invoke_vii(416,($agg$result|0),($43|0));
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     break;
    }
    $46 = (($$01$i) + 1|0);
    $exitcond$i = ($46|0)==($41|0);
    if ($exitcond$i) {
     label = 19;
     break;
    } else {
     $$01$i = $46;
    }
   }
   if ((label|0) == 19) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
    STACKTOP = sp;return;
   }
   $47 = ___cxa_find_matching_catch()|0;
   $48 = tempRet0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg$result);
   $$01 = $47;$$02 = $48;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   ___resumeException($$01|0);
   // unreachable;
  }
 } while(0);
 $$01 = $lpad$phi$index;$$02 = $lpad$phi$index2;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$05$i = 0, $$05$i16 = 0, $$1 = 0, $$13 = 0, $$pre = 0, $$pre$i21 = 0, $$pre44 = 0, $$pre9$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bn$i = 0, $__bn$i14 = 0, $__buf$i = 0;
 var $__buf$i13 = 0, $__mb$i = 0, $__mb$i11 = 0, $__ndflt = 0, $__nn$i = 0, $__p$04$i = 0, $__p$04$i20 = 0, $__wn$i = 0, $lpad$phi$index = 0, $lpad$phi$index10 = 0, $lpad$phi38$index = 0, $lpad$phi38$index3 = 0, $or$cond3$i = 0, $or$cond3$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__mb$i11 = sp + 8|0;
 $__buf$i13 = sp + 192|0;
 $__bn$i14 = sp + 168|0;
 $__wn$i = sp + 152|0;
 $__mb$i = sp;
 $__buf$i = sp + 24|0;
 $__bn$i = sp + 20|0;
 $__nn$i = sp + 16|0;
 $__ndflt = sp + 172|0;
 $0 = sp + 160|0;
 $1 = sp + 184|0;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $2 = (($0) + 4|0);
 HEAP32[$2>>2] = 0;
 HEAP32[$0>>2] = ((12504 + 8|0));
 $3 = HEAP8[$__dflt>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $10 = (($__dflt) + 4|0);
  $11 = (($__dflt) + 4|0);
  $12 = $3&255;
  $13 = $12 >>> 1;
  $15 = $11;$16 = $13;$22 = $10;
 } else {
  $6 = (($__dflt) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($__dflt) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $15 = $7;$16 = $9;$22 = $7;
 }
 $14 = (($15) + ($16<<2)|0);
 $17 = $__mb$i11;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = 0;
 $21 = ($22>>>0)<($14>>>0);
 L5: do {
  if ($21) {
   $23 = (($__buf$i13) + 32|0);
   $$05$i16 = $22;$25 = ((12504 + 8|0));
   L7: while(1) {
    HEAP32[$__wn$i>>2] = $$05$i16;
    $24 = (($25) + 12|0);
    $26 = HEAP32[$24>>2]|0;
    __THREW__ = 0;
    $27 = (invoke_iiiiiiiii($26|0,($0|0),($__mb$i11|0),($$05$i16|0),($14|0),($__wn$i|0),($__buf$i13|0),($23|0),($__bn$i14|0))|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if ($29) {
     label = 22;
     break;
    }
    $30 = ($27|0)==(2);
    $31 = HEAP32[$__wn$i>>2]|0;
    $32 = ($31|0)==($$05$i16|0);
    $or$cond3$i17 = $30 | $32;
    if ($or$cond3$i17) {
     label = 9;
     break;
    }
    $33 = HEAP32[$__bn$i14>>2]|0;
    $34 = ($__buf$i13>>>0)<($33>>>0);
    if ($34) {
     $__p$04$i20 = $__buf$i13;
     while(1) {
      $37 = HEAP8[$__p$04$i20>>0]|0;
      __THREW__ = 0;
      invoke_vii(416,($__ndflt|0),($37|0));
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 21;
       break L7;
      }
      $40 = (($__p$04$i20) + 1|0);
      $41 = HEAP32[$__bn$i14>>2]|0;
      $42 = ($40>>>0)<($41>>>0);
      if ($42) {
       $__p$04$i20 = $40;
      } else {
       break;
      }
     }
     $$pre$i21 = HEAP32[$__wn$i>>2]|0;
     $44 = $$pre$i21;
    } else {
     $44 = $31;
    }
    $43 = ($44>>>0)<($14>>>0);
    if (!($43)) {
     break L5;
    }
    $$pre = HEAP32[$0>>2]|0;
    $$05$i16 = $44;$25 = $$pre;
   }
   do {
    if ((label|0) == 9) {
     __THREW__ = 0;
     invoke_vi(500,(11736|0));
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if ($36) {
      $65 = ___cxa_find_matching_catch()|0;
      $66 = tempRet0;
      $lpad$phi38$index = $65;$lpad$phi38$index3 = $66;
      break;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 21) {
     $61 = ___cxa_find_matching_catch()|0;
     $62 = tempRet0;
     $lpad$phi38$index = $61;$lpad$phi38$index3 = $62;
    }
    else if ((label|0) == 22) {
     $63 = ___cxa_find_matching_catch()|0;
     $64 = tempRet0;
     $lpad$phi38$index = $63;$lpad$phi38$index3 = $64;
    }
   } while(0);
   $$1 = $lpad$phi38$index;$$13 = $lpad$phi38$index3;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   ___resumeException($$1|0);
   // unreachable;
  }
 } while(0);
 $45 = ($__c|0)==(-1);
 $46 = $__c << 1;
 $47 = $46;
 $48 = $45 ? (-1) : $47;
 $49 = HEAP8[$__ndflt>>0]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 if ($51) {
  $54 = (($__ndflt) + 1|0);
  $55 = $54;
 } else {
  $52 = (($__ndflt) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $55 = $53;
 }
 __THREW__ = 0;
 $56 = (invoke_iiiii(517,($48|0),($__set|0),($__msgid|0),($55|0))|0);
 $57 = __THREW__; __THREW__ = 0;
 $58 = $57&1;
 if ($58) {
  $59 = ___cxa_find_matching_catch()|0;
  $60 = tempRet0;
  $$1 = $59;$$13 = $60;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  ___resumeException($$1|0);
  // unreachable;
 }
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $67 = (($1) + 4|0);
 HEAP32[$67>>2] = 0;
 HEAP32[$1>>2] = ((12608 + 8|0));
 $68 = (_strlen(($56|0))|0);
 $69 = (($56) + ($68)|0);
 $70 = $__mb$i;
 $71 = $70;
 HEAP32[$71>>2] = 0;
 $72 = (($70) + 4)|0;
 $73 = $72;
 HEAP32[$73>>2] = 0;
 $74 = ($68|0)>(0);
 if (!($74)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  STACKTOP = sp;return;
 }
 $75 = $69;
 $76 = (($__buf$i) + 128|0);
 $$05$i = $56;$78 = ((12608 + 8|0));
 L39: while(1) {
  HEAP32[$__nn$i>>2] = $$05$i;
  $77 = (($78) + 16|0);
  $79 = HEAP32[$77>>2]|0;
  $80 = $$05$i;
  $81 = (($75) - ($80))|0;
  $82 = ($81|0)>(32);
  $83 = (($$05$i) + 32|0);
  $84 = $82 ? $83 : $69;
  __THREW__ = 0;
  $85 = (invoke_iiiiiiiii($79|0,($1|0),($__mb$i|0),($$05$i|0),($84|0),($__nn$i|0),($__buf$i|0),($76|0),($__bn$i|0))|0);
  $86 = __THREW__; __THREW__ = 0;
  $87 = $86&1;
  if ($87) {
   label = 39;
   break;
  }
  $88 = ($85|0)==(2);
  $89 = HEAP32[$__nn$i>>2]|0;
  $90 = ($89|0)==($$05$i|0);
  $or$cond3$i = $88 | $90;
  if ($or$cond3$i) {
   label = 30;
   break;
  }
  $91 = HEAP32[$__bn$i>>2]|0;
  $92 = ($__buf$i>>>0)<($91>>>0);
  if ($92) {
   $__p$04$i = $__buf$i;
   while(1) {
    $95 = HEAP32[$__p$04$i>>2]|0;
    __THREW__ = 0;
    invoke_vii(509,($agg$result|0),($95|0));
    $96 = __THREW__; __THREW__ = 0;
    $97 = $96&1;
    if ($97) {
     label = 38;
     break L39;
    }
    $98 = (($__p$04$i) + 4|0);
    $99 = HEAP32[$__bn$i>>2]|0;
    $100 = ($98>>>0)<($99>>>0);
    if ($100) {
     $__p$04$i = $98;
    } else {
     break;
    }
   }
   $$pre9$i = HEAP32[$__nn$i>>2]|0;
   $102 = $$pre9$i;
  } else {
   $102 = $89;
  }
  $101 = ($102>>>0)<($69>>>0);
  if (!($101)) {
   label = 37;
   break;
  }
  $$pre44 = HEAP32[$1>>2]|0;
  $$05$i = $102;$78 = $$pre44;
 }
 do {
  if ((label|0) == 30) {
   __THREW__ = 0;
   invoke_vi(500,(11736|0));
   $93 = __THREW__; __THREW__ = 0;
   $94 = $93&1;
   if ($94) {
    $107 = ___cxa_find_matching_catch()|0;
    $108 = tempRet0;
    $lpad$phi$index = $107;$lpad$phi$index10 = $108;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 37) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   STACKTOP = sp;return;
  }
  else if ((label|0) == 38) {
   $103 = ___cxa_find_matching_catch()|0;
   $104 = tempRet0;
   $lpad$phi$index = $103;$lpad$phi$index10 = $104;
  }
  else if ((label|0) == 39) {
   $105 = ___cxa_find_matching_catch()|0;
   $106 = tempRet0;
   $lpad$phi$index = $105;$lpad$phi$index10 = $106;
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($agg$result);
 $$1 = $lpad$phi$index;$$13 = $lpad$phi$index10;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 STACKTOP = sp;return;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(473,($0|0),(10736|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = ((19384 + 8|0));
  ___cxa_throw(($0|0),(19432|0),(372|0));
  // unreachable;
 }
}
function __ZNSt3__16locale5__impC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $__new_last2$i$i$i = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((10768 + 8|0));
 $2 = (($this) + 8|0);
 __THREW__ = 0;
 invoke_vii(518,($2|0),28);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $84 = ___cxa_find_matching_catch()|0;
  $85 = tempRet0;
  $$1 = $85;$$12 = $84;
  ___resumeException($$12|0);
  // unreachable;
 }
 $5 = (($this) + 144|0);
 __THREW__ = 0;
 invoke_viii(401,($5|0),(10760|0),1);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $86 = ___cxa_find_matching_catch()|0;
  $87 = tempRet0;
  $$0 = $87;$$01 = $86;
 } else {
  $8 = HEAP32[$2>>2]|0;
  $9 = (($this) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==($8|0);
  if (!($11)) {
   $__new_last2$i$i$i = $8;
   $scevgep$i$i$i = (($10) + -4|0);
   $12 = $scevgep$i$i$i;
   $13 = (($12) - ($__new_last2$i$i$i))|0;
   $14 = $13 >>> 2;
   $15 = $14 ^ -1;
   $scevgep4$i$i$i = (($10) + ($15<<2)|0);
   HEAP32[$9>>2] = $scevgep4$i$i$i;
  }
  HEAP32[((15664 + 4|0))>>2] = 0;
  HEAP32[15664>>2] = ((9216 + 8|0));
  __THREW__ = 0;
  invoke_vii(519,($this|0),(15664|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  do {
   if ($17) {
    label = 41;
   } else {
    HEAP32[((15656 + 4|0))>>2] = 0;
    HEAP32[15656>>2] = ((9256 + 8|0));
    __THREW__ = 0;
    invoke_vii(520,($this|0),(15656|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     label = 41;
    } else {
     __ZNSt3__15ctypeIcEC2EPKtbj(15640,0,0,1);
     __THREW__ = 0;
     invoke_vii(521,($this|0),(15640|0));
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if ($21) {
      label = 41;
     } else {
      HEAP32[((15632 + 4|0))>>2] = 0;
      HEAP32[15632>>2] = ((11824 + 8|0));
      __THREW__ = 0;
      invoke_vii(522,($this|0),(15632|0));
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 41;
      } else {
       HEAP32[((15624 + 4|0))>>2] = 0;
       HEAP32[15624>>2] = ((12040 + 8|0));
       __THREW__ = 0;
       invoke_vii(523,($this|0),(15624|0));
       $24 = __THREW__; __THREW__ = 0;
       $25 = $24&1;
       if ($25) {
        label = 41;
       } else {
        __THREW__ = 0;
        invoke_vii(524,(15608|0),1);
        $26 = __THREW__; __THREW__ = 0;
        $27 = $26&1;
        if ($27) {
         label = 41;
        } else {
         __THREW__ = 0;
         invoke_vii(525,($this|0),(15608|0));
         $28 = __THREW__; __THREW__ = 0;
         $29 = $28&1;
         if ($29) {
          label = 41;
         } else {
          HEAP32[((15600 + 4|0))>>2] = 0;
          HEAP32[15600>>2] = ((12264 + 8|0));
          __THREW__ = 0;
          invoke_vii(526,($this|0),(15600|0));
          $30 = __THREW__; __THREW__ = 0;
          $31 = $30&1;
          if ($31) {
           label = 41;
          } else {
           HEAP32[((15592 + 4|0))>>2] = 0;
           HEAP32[15592>>2] = ((12384 + 8|0));
           __THREW__ = 0;
           invoke_vii(527,($this|0),(15592|0));
           $32 = __THREW__; __THREW__ = 0;
           $33 = $32&1;
           if ($33) {
            label = 41;
           } else {
            HEAP32[((15568 + 4|0))>>2] = 0;
            HEAP32[15568>>2] = ((11016 + 8|0));
            HEAP8[((15568 + 8|0))>>0] = 46;
            HEAP8[((15568 + 9|0))>>0] = 44;
            ;HEAP32[((15568 + 12|0))+0>>2]=0|0;HEAP32[((15568 + 12|0))+4>>2]=0|0;HEAP32[((15568 + 12|0))+8>>2]=0|0;
            __THREW__ = 0;
            invoke_vii(528,($this|0),(15568|0));
            $34 = __THREW__; __THREW__ = 0;
            $35 = $34&1;
            if ($35) {
             label = 41;
            } else {
             HEAP32[((15536 + 4|0))>>2] = 0;
             HEAP32[15536>>2] = ((11056 + 8|0));
             HEAP32[((15536 + 8|0))>>2] = 46;
             HEAP32[((15536 + 12|0))>>2] = 44;
             ;HEAP32[((15536 + 16|0))+0>>2]=0|0;HEAP32[((15536 + 16|0))+4>>2]=0|0;HEAP32[((15536 + 16|0))+8>>2]=0|0;
             __THREW__ = 0;
             invoke_vii(529,($this|0),(15536|0));
             $36 = __THREW__; __THREW__ = 0;
             $37 = $36&1;
             if ($37) {
              label = 41;
             } else {
              HEAP32[((15528 + 4|0))>>2] = 0;
              HEAP32[15528>>2] = ((9296 + 8|0));
              __THREW__ = 0;
              invoke_vii(530,($this|0),(15528|0));
              $38 = __THREW__; __THREW__ = 0;
              $39 = $38&1;
              if ($39) {
               label = 41;
              } else {
               HEAP32[((15520 + 4|0))>>2] = 0;
               HEAP32[15520>>2] = ((9416 + 8|0));
               __THREW__ = 0;
               invoke_vii(531,($this|0),(15520|0));
               $40 = __THREW__; __THREW__ = 0;
               $41 = $40&1;
               if ($41) {
                label = 41;
               } else {
                HEAP32[((15512 + 4|0))>>2] = 0;
                HEAP32[15512>>2] = ((9488 + 8|0));
                __THREW__ = 0;
                invoke_vii(532,($this|0),(15512|0));
                $42 = __THREW__; __THREW__ = 0;
                $43 = $42&1;
                if ($43) {
                 label = 41;
                } else {
                 HEAP32[((15504 + 4|0))>>2] = 0;
                 HEAP32[15504>>2] = ((9584 + 8|0));
                 __THREW__ = 0;
                 invoke_vii(533,($this|0),(15504|0));
                 $44 = __THREW__; __THREW__ = 0;
                 $45 = $44&1;
                 if ($45) {
                  label = 41;
                 } else {
                  HEAP32[((15496 + 4|0))>>2] = 0;
                  HEAP32[15496>>2] = ((10176 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(534,($this|0),(15496|0));
                  $46 = __THREW__; __THREW__ = 0;
                  $47 = $46&1;
                  if ($47) {
                   label = 41;
                   break;
                  }
                  HEAP32[((15488 + 4|0))>>2] = 0;
                  HEAP32[15488>>2] = ((10240 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(535,($this|0),(15488|0));
                  $48 = __THREW__; __THREW__ = 0;
                  $49 = $48&1;
                  if ($49) {
                   label = 41;
                   break;
                  }
                  HEAP32[((15480 + 4|0))>>2] = 0;
                  HEAP32[15480>>2] = ((10304 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(536,($this|0),(15480|0));
                  $50 = __THREW__; __THREW__ = 0;
                  $51 = $50&1;
                  if ($51) {
                   label = 41;
                   break;
                  }
                  HEAP32[((15472 + 4|0))>>2] = 0;
                  HEAP32[15472>>2] = ((10368 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(537,($this|0),(15472|0));
                  $52 = __THREW__; __THREW__ = 0;
                  $53 = $52&1;
                  if ($53) {
                   label = 41;
                   break;
                  }
                  HEAP32[((15464 + 4|0))>>2] = 0;
                  HEAP32[15464>>2] = ((10432 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(538,($this|0),(15464|0));
                  $54 = __THREW__; __THREW__ = 0;
                  $55 = $54&1;
                  if ($55) {
                   label = 41;
                   break;
                  }
                  HEAP32[((15456 + 4|0))>>2] = 0;
                  HEAP32[15456>>2] = ((10512 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(539,($this|0),(15456|0));
                  $56 = __THREW__; __THREW__ = 0;
                  $57 = $56&1;
                  if ($57) {
                   label = 41;
                   break;
                  }
                  HEAP32[((15448 + 4|0))>>2] = 0;
                  HEAP32[15448>>2] = ((10568 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(540,($this|0),(15448|0));
                  $58 = __THREW__; __THREW__ = 0;
                  $59 = $58&1;
                  if ($59) {
                   label = 41;
                   break;
                  }
                  HEAP32[((15440 + 4|0))>>2] = 0;
                  HEAP32[15440>>2] = ((10616 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(541,($this|0),(15440|0));
                  $60 = __THREW__; __THREW__ = 0;
                  $61 = $60&1;
                  if ($61) {
                   label = 41;
                   break;
                  }
                  HEAP32[((15424 + 4|0))>>2] = 0;
                  HEAP32[15424>>2] = ((9664 + 8|0));
                  HEAP32[((15424 + 8|0))>>2] = ((9664 + 56|0));
                  __THREW__ = 0;
                  invoke_vii(542,($this|0),(15424|0));
                  $62 = __THREW__; __THREW__ = 0;
                  $63 = $62&1;
                  if ($63) {
                   label = 41;
                   break;
                  }
                  HEAP32[((15408 + 4|0))>>2] = 0;
                  HEAP32[15408>>2] = ((9816 + 8|0));
                  HEAP32[((15408 + 8|0))>>2] = ((9816 + 56|0));
                  __THREW__ = 0;
                  invoke_vii(543,($this|0),(15408|0));
                  $64 = __THREW__; __THREW__ = 0;
                  $65 = $64&1;
                  if ($65) {
                   label = 41;
                   break;
                  }
                  HEAP32[((15392 + 4|0))>>2] = 0;
                  HEAP32[15392>>2] = ((11760 + 8|0));
                  __THREW__ = 0;
                  $66 = (invoke_i(481)|0);
                  $67 = __THREW__; __THREW__ = 0;
                  $68 = $67&1;
                  if ($68) {
                   $69 = ___cxa_find_matching_catch()|0;
                   $70 = tempRet0;
                   $eh$lpad$body$index3Z2D = $70;$eh$lpad$body$indexZ2D = $69;
                   break;
                  }
                  HEAP32[((15392 + 8|0))>>2] = $66;
                  HEAP32[15392>>2] = ((10112 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(544,($this|0),(15392|0));
                  $71 = __THREW__; __THREW__ = 0;
                  $72 = $71&1;
                  if ($72) {
                   label = 41;
                   break;
                  }
                  HEAP32[((15376 + 4|0))>>2] = 0;
                  HEAP32[15376>>2] = ((11760 + 8|0));
                  __THREW__ = 0;
                  $73 = (invoke_i(481)|0);
                  $74 = __THREW__; __THREW__ = 0;
                  $75 = $74&1;
                  if ($75) {
                   $76 = ___cxa_find_matching_catch()|0;
                   $77 = tempRet0;
                   $eh$lpad$body$index3Z2D = $77;$eh$lpad$body$indexZ2D = $76;
                   break;
                  }
                  HEAP32[((15376 + 8|0))>>2] = $73;
                  HEAP32[15376>>2] = ((10144 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(545,($this|0),(15376|0));
                  $78 = __THREW__; __THREW__ = 0;
                  $79 = $78&1;
                  if ($79) {
                   label = 41;
                   break;
                  }
                  HEAP32[((15368 + 4|0))>>2] = 0;
                  HEAP32[15368>>2] = ((10656 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(546,($this|0),(15368|0));
                  $80 = __THREW__; __THREW__ = 0;
                  $81 = $80&1;
                  if ($81) {
                   label = 41;
                   break;
                  }
                  HEAP32[((15360 + 4|0))>>2] = 0;
                  HEAP32[15360>>2] = ((10696 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(547,($this|0),(15360|0));
                  $82 = __THREW__; __THREW__ = 0;
                  $83 = $82&1;
                  if ($83) {
                   label = 41;
                   break;
                  }
                  STACKTOP = sp;return;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 41) {
   $88 = ___cxa_find_matching_catch()|0;
   $89 = tempRet0;
   $eh$lpad$body$index3Z2D = $89;$eh$lpad$body$indexZ2D = $88;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
  $$0 = $eh$lpad$body$index3Z2D;$$01 = $eh$lpad$body$indexZ2D;
 }
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($2);
 $$1 = $$0;$$12 = $$01;
 ___resumeException($$12|0);
 // unreachable;
}
function __ZNSt3__16locale7classicEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[10808>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((10808|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(548)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch()|0;
     $8 = tempRet0;
     ___cxa_guard_abort((10808|0));
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[10800>>2] = 10792;
     ___cxa_guard_release((10808|0));
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[10800>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_count12__add_sharedEv($f);
 $0 = (($this) + 8|0);
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($id>>>0);
 do {
  if ($8) {
   $16 = $3;
  } else {
   $9 = (($id) + 1)|0;
   __THREW__ = 0;
   invoke_vii(549,($0|0),($9|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $$pre = HEAP32[$0>>2]|0;
    $16 = $$pre;
    break;
   }
   $12 = ___cxa_find_matching_catch()|0;
   $13 = tempRet0;
   $14 = ($f|0)==(0|0);
   if ($14) {
    ___resumeException($12|0);
    // unreachable;
   }
   (__ZNSt3__114__shared_count16__release_sharedEv($f)|0);
   ___resumeException($12|0);
   // unreachable;
  }
 } while(0);
 $15 = (($16) + ($id<<2)|0);
 $17 = HEAP32[$15>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $20 = $16;
  $19 = (($20) + ($id<<2)|0);
  HEAP32[$19>>2] = $f;
  STACKTOP = sp;return;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
 $$pre2 = HEAP32[$0>>2]|0;
 $20 = $$pre2;
 $19 = (($20) + ($id<<2)|0);
 HEAP32[$19>>2] = $f;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((10768 + 8|0));
 $0 = (($this) + 8|0);
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($2|0)==($3|0);
 if (!($4)) {
  $18 = $2;$6 = $3;$i$01 = 0;
  while(1) {
   $5 = (($6) + ($i$01<<2)|0);
   $7 = HEAP32[$5>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $11 = $18;$13 = $6;
   } else {
    (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
    $$pre = HEAP32[$1>>2]|0;
    $$pre2 = HEAP32[$0>>2]|0;
    $11 = $$pre;$13 = $$pre2;
   }
   $9 = (($i$01) + 1)|0;
   $10 = $11;
   $12 = $13;
   $14 = (($10) - ($12))|0;
   $15 = $14 >> 2;
   $16 = ($9>>>0)<($15>>>0);
   if ($16) {
    $18 = $11;$6 = $13;$i$01 = $9;
   } else {
    break;
   }
  }
 }
 $17 = (($this) + 144|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt3__16locale5__imp9use_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale5__imp9has_facetEl($this,$id)|0);
 if ($0) {
  $2 = (($this) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($id<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($5|0);
 } else {
  $1 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($1);
  ___cxa_throw(($1|0),(19632|0),(378|0));
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__16locale5__imp12make_classicEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impC2Ej(15200,1);
 HEAP32[10792>>2] = 15200;
 STACKTOP = sp;return (10792|0);
}
function __ZNSt3__16locale5__imp11make_globalEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale7classicEv()|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[10816>>2] = $1;
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 STACKTOP = sp;return (10816|0);
}
function __ZNSt3__16locale8__globalEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[10832>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((10832|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(550)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch()|0;
     $8 = tempRet0;
     ___cxa_guard_abort((10832|0));
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[10824>>2] = 10816;
     ___cxa_guard_release((10832|0));
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[10824>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(551)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  HEAP32[$this>>2] = $3;
  __ZNSt3__114__shared_count12__add_sharedEv($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16localeC2ERKS0_($this,$l) {
 $this = $this|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 HEAP32[$this>>2] = $0;
 __ZNSt3__114__shared_count12__add_sharedEv($0);
 STACKTOP = sp;return;
}
function __ZNSt3__16localeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 STACKTOP = sp;return;
}
function __ZNKSt3__16locale9has_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv($x)|0);
 $2 = (__ZNKSt3__16locale5__imp9has_facetEl($0,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__16locale2id5__getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__p$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p$i = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(-1);
 if (!($1)) {
  HEAP32[$__p$i>>2] = $this;
  $2 = (($__p$i) + 4|0);
  HEAP32[$2>>2] = (552);
  $3 = (($__p$i) + 8|0);
  HEAP32[$3>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($this,$__p$i,553);
 }
 $4 = (($this) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv($x)|0);
 $2 = (__ZNKSt3__16locale5__imp9use_facetEl($0,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023]($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[10840>>2]|0;HEAP32[10840>>2] = (($0+1)|0);
 $1 = (($0) + 1)|0;
 $2 = (($this) + 4|0);
 HEAP32[$2>>2] = $1;
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $5 = 0;
  STACKTOP = sp;return ($5|0);
 }
 $0 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
 $1 = (($0) + ($c<<1)|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2 & $m;
 $4 = ($3<<16>>16)!=(0);
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNSt3__15ctypeIcE13classic_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(554)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($3|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low5 = 0, $scevgep = 0, $scevgep7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 }
 $low5 = $low;
 $scevgep = (($high) + -4|0);
 $1 = $scevgep;
 $2 = (($1) - ($low5))|0;
 $3 = $2 >>> 2;
 $4 = (($3) + 1)|0;
 $$012 = $low;$$03 = $vec;
 while(1) {
  $5 = HEAP32[$$012>>2]|0;
  $isascii = ($5>>>0)<(128);
  if ($isascii) {
   $6 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
   $7 = (($6) + ($5<<1)|0);
   $8 = HEAP16[$7>>1]|0;
   $9 = $8;
  } else {
   $9 = 0;
  }
  HEAP16[$$03>>1] = $9;
  $10 = (($$012) + 4|0);
  $11 = (($$03) + 2|0);
  $12 = ($10|0)==($high|0);
  if ($12) {
   break;
  } else {
   $$012 = $10;$$03 = $11;
  }
 }
 $scevgep7 = (($low) + ($4<<2)|0);
 $$01$lcssa = $scevgep7;
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 L1: do {
  if ($0) {
   $$0$lcssa = $low;
  } else {
   $$01 = $low;
   while(1) {
    $1 = HEAP32[$$01>>2]|0;
    $isascii = ($1>>>0)<(128);
    if ($isascii) {
     $2 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
     $3 = (($2) + ($1<<1)|0);
     $4 = HEAP16[$3>>1]|0;
     $5 = $4 & $m;
     $6 = ($5<<16>>16)==(0);
     if (!($6)) {
      $$0$lcssa = $$01;
      break L1;
     }
    }
    $7 = (($$01) + 4|0);
    $8 = ($7|0)==($high|0);
    if ($8) {
     $$0$lcssa = $high;
     break;
    } else {
     $$01 = $7;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 L1: do {
  if ($0) {
   $$0$lcssa = $low;
  } else {
   $$01 = $low;
   while(1) {
    $3 = HEAP32[$$01>>2]|0;
    $isascii = ($3>>>0)<(128);
    if (!($isascii)) {
     $$0$lcssa = $$01;
     break L1;
    }
    $4 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
    $5 = (($4) + ($3<<1)|0);
    $6 = HEAP16[$5>>1]|0;
    $7 = $6 & $m;
    $8 = ($7<<16>>16)==(0);
    $2 = (($$01) + 4|0);
    if ($8) {
     $$0$lcssa = $$01;
     break L1;
    }
    $1 = ($2|0)==($high|0);
    if ($1) {
     $$0$lcssa = $high;
     break;
    } else {
     $$01 = $2;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $3 = $c;
  STACKTOP = sp;return ($3|0);
 }
 $0 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
 $1 = (($0) + ($c<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__15ctypeIcE21__classic_upper_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(555)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($3|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, $scevgep5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $low3 = $low;
 $scevgep = (($high) + -4|0);
 $1 = $scevgep;
 $2 = (($1) - ($low3))|0;
 $3 = $2 >>> 2;
 $4 = (($3) + 1)|0;
 $$01 = $low;
 while(1) {
  $5 = HEAP32[$$01>>2]|0;
  $isascii = ($5>>>0)<(128);
  if ($isascii) {
   $6 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
   $7 = (($6) + ($5<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8;
  } else {
   $9 = $5;
  }
  HEAP32[$$01>>2] = $9;
  $10 = (($$01) + 4|0);
  $11 = ($10|0)==($high|0);
  if ($11) {
   break;
  } else {
   $$01 = $10;
  }
 }
 $scevgep5 = (($low) + ($4<<2)|0);
 $$0$lcssa = $scevgep5;
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $3 = $c;
  STACKTOP = sp;return ($3|0);
 }
 $0 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
 $1 = (($0) + ($c<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__15ctypeIcE21__classic_lower_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(556)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($3|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, $scevgep5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $low3 = $low;
 $scevgep = (($high) + -4|0);
 $1 = $scevgep;
 $2 = (($1) - ($low3))|0;
 $3 = $2 >>> 2;
 $4 = (($3) + 1)|0;
 $$01 = $low;
 while(1) {
  $5 = HEAP32[$$01>>2]|0;
  $isascii = ($5>>>0)<(128);
  if ($isascii) {
   $6 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
   $7 = (($6) + ($5<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8;
  } else {
   $9 = $5;
  }
  HEAP32[$$01>>2] = $9;
  $10 = (($$01) + 4|0);
  $11 = ($10|0)==($high|0);
  if ($11) {
   break;
  } else {
   $$01 = $10;
  }
 }
 $scevgep5 = (($low) + ($4<<2)|0);
 $$0$lcssa = $scevgep5;
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c << 24 >> 24;
 STACKTOP = sp;return ($0|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$012 = $low;$$03 = $dest;
 }
 while(1) {
  $1 = HEAP8[$$012>>0]|0;
  $2 = $1 << 24 >> 24;
  HEAP32[$$03>>2] = $2;
  $3 = (($$012) + 1|0);
  $4 = (($$03) + 4|0);
  $5 = ($3|0)==($high|0);
  if ($5) {
   $$01$lcssa = $high;
   break;
  } else {
   $$012 = $3;$$03 = $4;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $$0 = 0, $0 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 $0 = $c&255;
 $$0 = $isascii ? $0 : $dfault;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low5 = 0, $scevgep = 0, $scevgep7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 }
 $low5 = $low;
 $scevgep = (($high) + -4|0);
 $1 = $scevgep;
 $2 = (($1) - ($low5))|0;
 $3 = $2 >>> 2;
 $4 = (($3) + 1)|0;
 $$012 = $low;$$03 = $dest;
 while(1) {
  $5 = HEAP32[$$012>>2]|0;
  $isascii = ($5>>>0)<(128);
  $6 = $5&255;
  $$dfault = $isascii ? $6 : $dfault;
  HEAP8[$$03>>0] = $$dfault;
  $7 = (($$012) + 4|0);
  $8 = (($$03) + 1|0);
  $9 = ($7|0)==($high|0);
  if ($9) {
   break;
  } else {
   $$012 = $7;$$03 = $8;
  }
 }
 $scevgep7 = (($low) + ($4<<2)|0);
 $$01$lcssa = $scevgep7;
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__15ctypeIcEC2EPKtbj($this,$tab,$del,$refs) {
 $this = $this|0;
 $tab = $tab|0;
 $del = $del|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((10864 + 8|0));
 $2 = (($this) + 8|0);
 HEAP32[$2>>2] = $tab;
 $3 = (($this) + 12|0);
 $4 = $del&1;
 HEAP8[$3>>0] = $4;
 $5 = ($tab|0)==(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
 HEAP32[$2>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__15ctypeIcED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((10864 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($this) + 12|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   __ZdaPv($1);
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $5 = $c;
  STACKTOP = sp;return ($5|0);
 }
 $0 = $c&255;
 $1 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
 $2 = (($1) + ($0<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3&255;
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP8[$$02>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   $2 = $1 << 24 >> 24;
   $3 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
   $4 = (($3) + ($2<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = $5&255;
   $7 = $6;
  } else {
   $7 = $1;
  }
  HEAP8[$$02>>0] = $7;
  $8 = (($$02) + 1|0);
  $9 = ($8|0)==($high|0);
  if ($9) {
   $$0$lcssa = $high;
   break;
  } else {
   $$02 = $8;
  }
 }
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $5 = $c;
  STACKTOP = sp;return ($5|0);
 }
 $0 = $c << 24 >> 24;
 $1 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
 $2 = (($1) + ($0<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3&255;
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP8[$$02>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   $2 = $1 << 24 >> 24;
   $3 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
   $4 = (($3) + ($2<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = $5&255;
   $7 = $6;
  } else {
   $7 = $1;
  }
  HEAP8[$$02>>0] = $7;
  $8 = (($$02) + 1|0);
  $9 = ($8|0)==($high|0);
  if ($9) {
   $$0$lcssa = $high;
   break;
  } else {
   $$02 = $8;
  }
 }
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($c|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
 } else {
  $$012 = $low;$$03 = $dest;
  while(1) {
   $1 = HEAP8[$$012>>0]|0;
   HEAP8[$$03>>0] = $1;
   $2 = (($$012) + 1|0);
   $3 = (($$03) + 1|0);
   $4 = ($2|0)==($high|0);
   if ($4) {
    $$01$lcssa = $high;
    break;
   } else {
    $$012 = $2;$$03 = $3;
   }
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 $c$dfault = $isascii1 ? $c : $dfault;
 STACKTOP = sp;return ($c$dfault|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$013 = $low;$$04 = $dest;
 }
 while(1) {
  $1 = HEAP8[$$013>>0]|0;
  $isascii2 = ($1<<24>>24)>(-1);
  $$dfault = $isascii2 ? $1 : $dfault;
  HEAP8[$$04>>0] = $$dfault;
  $2 = (($$013) + 1|0);
  $3 = (($$04) + 1|0);
  $4 = ($2|0)==($high|0);
  if ($4) {
   $$01$lcssa = $high;
   break;
  } else {
   $$013 = $2;$$04 = $3;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $end;
 $2 = $frm;
 $3 = (($1) - ($2))|0;
 $4 = ($3>>>0)<($mx>>>0);
 $5 = $4 ? $3 : $mx;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((10936 + 8|0));
 __THREW__ = 0;
 $2 = (invoke_i(481)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___resumeException($6|0);
  // unreachable;
 } else {
  $5 = (($this) + 8|0);
  HEAP32[$5>>2] = $2;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0148 = 0, $$0247 = 0, $$1$lcssa = 0, $$19 = 0, $$pre = 0, $$pre101 = 0, $$pre98 = 0, $$pre99 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$054 = 0, $fend$149 = 0, $fend$2$lcssa = 0, $fend$215 = 0, $fend$3 = 0, $n$011 = 0, $not$ = 0, $or$cond = 0, $or$cond46 = 0, $p$012 = 0, $save_state = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $tmp = sp + 8|0;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $112 = $frm;
  } else {
   $fend$054 = $frm;
   while(1) {
    $3 = HEAP32[$fend$054>>2]|0;
    $4 = ($3|0)==(0);
    $2 = (($fend$054) + 4|0);
    if ($4) {
     $fend$0$lcssa = $fend$054;
     break;
    }
    $1 = ($2|0)==($frm_end|0);
    if ($1) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$054 = $2;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   $or$cond46 = $0 | $5;
   if ($or$cond46) {
    $112 = $frm;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0148 = $frm;$$0247 = $to;$fend$149 = $fend$0$lcssa;
    while(1) {
     $8 = $st;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $save_state;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = $fend$149;
     $19 = $$0148;
     $20 = (($18) - ($19))|0;
     $21 = $20 >> 2;
     $22 = $$0247;
     $23 = (($6) - ($22))|0;
     $24 = HEAP32[$7>>2]|0;
     $25 = (_uselocale(($24|0))|0);
     __THREW__ = 0;
     $26 = (invoke_iiiiii(557,($$0247|0),($frm_nxt|0),($21|0),($23|0),($st|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      label = 11;
      break;
     }
     $29 = ($25|0)==(0|0);
     if (!($29)) {
      __THREW__ = 0;
      (invoke_ii(497,($25|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 10;
       break;
      }
     }
     if ((($26|0) == -1)) {
      label = 16;
      break;
     } else if ((($26|0) == 0)) {
      $$0 = 1;
      label = 51;
      break;
     }
     $68 = HEAP32[$to_nxt>>2]|0;
     $69 = (($68) + ($26)|0);
     HEAP32[$to_nxt>>2] = $69;
     $70 = ($69|0)==($to_end|0);
     if ($70) {
      label = 49;
      break;
     }
     $71 = ($fend$149|0)==($frm_end|0);
     if ($71) {
      $$pre98 = HEAP32[$frm_nxt>>2]|0;
      $109 = $$pre98;$111 = $69;$fend$3 = $frm_end;
     } else {
      $72 = HEAP32[$7>>2]|0;
      $73 = (_uselocale(($72|0))|0);
      __THREW__ = 0;
      $74 = (invoke_iiii(558,($tmp|0),0,($st|0))|0);
      $75 = __THREW__; __THREW__ = 0;
      $76 = $75&1;
      if ($76) {
       label = 35;
       break;
      }
      $77 = ($73|0)==(0|0);
      if (!($77)) {
       __THREW__ = 0;
       (invoke_ii(497,($73|0))|0);
       $78 = __THREW__; __THREW__ = 0;
       $79 = $78&1;
       if ($79) {
        label = 34;
        break;
       }
      }
      $89 = ($74|0)==(-1);
      if ($89) {
       $$0 = 2;
       label = 51;
       break;
      }
      $90 = HEAP32[$to_nxt>>2]|0;
      $91 = $90;
      $92 = (($6) - ($91))|0;
      $93 = ($74>>>0)>($92>>>0);
      if ($93) {
       $$0 = 1;
       label = 51;
       break;
      }
      $94 = ($74|0)==(0);
      L25: do {
       if (!($94)) {
        $97 = $90;$n$011 = $74;$p$012 = $tmp;
        while(1) {
         $95 = HEAP8[$p$012>>0]|0;
         $96 = (($97) + 1|0);
         HEAP32[$to_nxt>>2] = $96;
         HEAP8[$97>>0] = $95;
         $98 = (($n$011) + -1)|0;
         $99 = ($98|0)==(0);
         if ($99) {
          break L25;
         }
         $100 = (($p$012) + 1|0);
         $$pre101 = HEAP32[$to_nxt>>2]|0;
         $97 = $$pre101;$n$011 = $98;$p$012 = $100;
        }
       }
      } while(0);
      $101 = HEAP32[$frm_nxt>>2]|0;
      $102 = (($101) + 4|0);
      HEAP32[$frm_nxt>>2] = $102;
      $103 = ($102|0)==($frm_end|0);
      L30: do {
       if ($103) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$215 = $102;
        while(1) {
         $106 = HEAP32[$fend$215>>2]|0;
         $107 = ($106|0)==(0);
         $105 = (($fend$215) + 4|0);
         if ($107) {
          $fend$2$lcssa = $fend$215;
          break L30;
         }
         $104 = ($105|0)==($frm_end|0);
         if ($104) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$215 = $105;
         }
        }
       }
      } while(0);
      $$pre99 = HEAP32[$to_nxt>>2]|0;
      $109 = $102;$111 = $$pre99;$fend$3 = $fend$2$lcssa;
     }
     $108 = ($109|0)==($frm_end|0);
     $110 = ($111|0)==($to_end|0);
     $or$cond = $108 | $110;
     if ($or$cond) {
      $112 = $109;
      break L1;
     } else {
      $$0148 = $109;$$0247 = $111;$fend$149 = $fend$3;
     }
    }
    if ((label|0) == 10) {
     $32 = ___cxa_find_matching_catch(0|0)|0;
     $33 = tempRet0;
     ___clang_call_terminate($32);
     // unreachable;
    }
    else if ((label|0) == 11) {
     $34 = ___cxa_find_matching_catch()|0;
     $35 = tempRet0;
     $36 = ($25|0)==(0|0);
     if ($36) {
      ___resumeException($34|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(497,($25|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      $39 = ___cxa_find_matching_catch(0|0)|0;
      $40 = tempRet0;
      ___clang_call_terminate($39);
      // unreachable;
     } else {
      ___resumeException($34|0);
      // unreachable;
     }
    }
    else if ((label|0) == 16) {
     HEAP32[$to_nxt>>2] = $$0247;
     $41 = HEAP32[$frm_nxt>>2]|0;
     $42 = ($$0148|0)==($41|0);
     L46: do {
      if ($42) {
       $$1$lcssa = $$0148;
      } else {
       $$19 = $$0148;$46 = $$0247;
       while(1) {
        $43 = HEAP32[$$19>>2]|0;
        $44 = HEAP32[$7>>2]|0;
        $45 = (_uselocale(($44|0))|0);
        __THREW__ = 0;
        $47 = (invoke_iiii(558,($46|0),($43|0),($save_state|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         break;
        }
        $50 = ($45|0)==(0|0);
        if (!($50)) {
         __THREW__ = 0;
         (invoke_ii(497,($45|0))|0);
         $51 = __THREW__; __THREW__ = 0;
         $52 = $51&1;
         if ($52) {
          label = 20;
          break;
         }
        }
        $62 = ($47|0)==(-1);
        if ($62) {
         $$1$lcssa = $$19;
         break L46;
        }
        $63 = HEAP32[$to_nxt>>2]|0;
        $64 = (($63) + ($47)|0);
        HEAP32[$to_nxt>>2] = $64;
        $65 = (($$19) + 4|0);
        $66 = HEAP32[$frm_nxt>>2]|0;
        $67 = ($65|0)==($66|0);
        if ($67) {
         $$1$lcssa = $65;
         break L46;
        } else {
         $$19 = $65;$46 = $64;
        }
       }
       if ((label|0) == 20) {
        $53 = ___cxa_find_matching_catch(0|0)|0;
        $54 = tempRet0;
        ___clang_call_terminate($53);
        // unreachable;
       }
       $55 = ___cxa_find_matching_catch()|0;
       $56 = tempRet0;
       $57 = ($45|0)==(0|0);
       if ($57) {
        ___resumeException($55|0);
        // unreachable;
       }
       __THREW__ = 0;
       (invoke_ii(497,($45|0))|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        $60 = ___cxa_find_matching_catch(0|0)|0;
        $61 = tempRet0;
        ___clang_call_terminate($60);
        // unreachable;
       } else {
        ___resumeException($55|0);
        // unreachable;
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $$0 = 2;
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 34) {
     $80 = ___cxa_find_matching_catch(0|0)|0;
     $81 = tempRet0;
     ___clang_call_terminate($80);
     // unreachable;
    }
    else if ((label|0) == 35) {
     $82 = ___cxa_find_matching_catch()|0;
     $83 = tempRet0;
     $84 = ($73|0)==(0|0);
     if ($84) {
      ___resumeException($82|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(497,($73|0))|0);
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     if ($86) {
      $87 = ___cxa_find_matching_catch(0|0)|0;
      $88 = tempRet0;
      ___clang_call_terminate($87);
      // unreachable;
     } else {
      ___resumeException($82|0);
      // unreachable;
     }
    }
    else if ((label|0) == 49) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $112 = $$pre;
     break;
    }
    else if ((label|0) == 51) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $not$ = ($112|0)!=($frm_end|0);
 $113 = $not$&1;
 $$0 = $113;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0155 = 0, $$0254 = 0, $$1$lcssa = 0, $$115 = 0, $$2 = 0, $$pre = 0, $$pre114 = 0, $$pre115 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$061 = 0, $fend$156 = 0, $fend$2$lcssa = 0, $fend$216 = 0;
 var $fend$3 = 0, $not$ = 0, $not$3 = 0, $or$cond = 0, $or$cond53 = 0, $save_state = 0, $storemerge14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $104 = $frm;
  } else {
   $fend$061 = $frm;
   while(1) {
    $3 = HEAP8[$fend$061>>0]|0;
    $4 = ($3<<24>>24)==(0);
    $2 = (($fend$061) + 1|0);
    if ($4) {
     $fend$0$lcssa = $fend$061;
     break;
    }
    $1 = ($2|0)==($frm_end|0);
    if ($1) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$061 = $2;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   $or$cond53 = $0 | $5;
   if ($or$cond53) {
    $104 = $frm;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0155 = $frm;$$0254 = $to;$fend$156 = $fend$0$lcssa;
    while(1) {
     $8 = $st;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $save_state;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = $fend$156;
     $19 = $$0155;
     $20 = (($18) - ($19))|0;
     $21 = $$0254;
     $22 = (($6) - ($21))|0;
     $23 = $22 >> 2;
     $24 = HEAP32[$7>>2]|0;
     $25 = (_uselocale(($24|0))|0);
     __THREW__ = 0;
     $26 = (invoke_iiiiii(559,($$0254|0),($frm_nxt|0),($20|0),($23|0),($st|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      label = 11;
      break;
     }
     $29 = ($25|0)==(0|0);
     if (!($29)) {
      __THREW__ = 0;
      (invoke_ii(497,($25|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 10;
       break;
      }
     }
     if ((($26|0) == -1)) {
      label = 16;
      break;
     } else if ((($26|0) == 0)) {
      $$0 = 2;
      label = 50;
      break;
     }
     $69 = HEAP32[$to_nxt>>2]|0;
     $70 = (($69) + ($26<<2)|0);
     HEAP32[$to_nxt>>2] = $70;
     $71 = ($70|0)==($to_end|0);
     if ($71) {
      label = 48;
      break;
     }
     $72 = ($fend$156|0)==($frm_end|0);
     $$pre114 = HEAP32[$frm_nxt>>2]|0;
     if ($72) {
      $101 = $$pre114;$103 = $70;$fend$3 = $frm_end;
     } else {
      $73 = HEAP32[$7>>2]|0;
      $74 = (_uselocale(($73|0))|0);
      __THREW__ = 0;
      $75 = (invoke_iiiii(560,($70|0),($$pre114|0),1,($st|0))|0);
      $76 = __THREW__; __THREW__ = 0;
      $77 = $76&1;
      if ($77) {
       label = 38;
       break;
      }
      $78 = ($74|0)==(0|0);
      if (!($78)) {
       __THREW__ = 0;
       (invoke_ii(497,($74|0))|0);
       $79 = __THREW__; __THREW__ = 0;
       $80 = $79&1;
       if ($80) {
        label = 37;
        break;
       }
      }
      $90 = ($75|0)==(0);
      if (!($90)) {
       $$0 = 2;
       label = 50;
       break;
      }
      $91 = HEAP32[$to_nxt>>2]|0;
      $92 = (($91) + 4|0);
      HEAP32[$to_nxt>>2] = $92;
      $93 = HEAP32[$frm_nxt>>2]|0;
      $94 = (($93) + 1|0);
      HEAP32[$frm_nxt>>2] = $94;
      $95 = ($94|0)==($frm_end|0);
      L22: do {
       if ($95) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$216 = $94;
        while(1) {
         $98 = HEAP8[$fend$216>>0]|0;
         $99 = ($98<<24>>24)==(0);
         $97 = (($fend$216) + 1|0);
         if ($99) {
          $fend$2$lcssa = $fend$216;
          break L22;
         }
         $96 = ($97|0)==($frm_end|0);
         if ($96) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$216 = $97;
         }
        }
       }
      } while(0);
      $$pre115 = HEAP32[$to_nxt>>2]|0;
      $101 = $94;$103 = $$pre115;$fend$3 = $fend$2$lcssa;
     }
     $100 = ($101|0)==($frm_end|0);
     $102 = ($103|0)==($to_end|0);
     $or$cond = $100 | $102;
     if ($or$cond) {
      $104 = $101;
      break L1;
     } else {
      $$0155 = $101;$$0254 = $103;$fend$156 = $fend$3;
     }
    }
    if ((label|0) == 10) {
     $32 = ___cxa_find_matching_catch(0|0)|0;
     $33 = tempRet0;
     ___clang_call_terminate($32);
     // unreachable;
    }
    else if ((label|0) == 11) {
     $34 = ___cxa_find_matching_catch()|0;
     $35 = tempRet0;
     $36 = ($25|0)==(0|0);
     if ($36) {
      ___resumeException($34|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(497,($25|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      $39 = ___cxa_find_matching_catch(0|0)|0;
      $40 = tempRet0;
      ___clang_call_terminate($39);
      // unreachable;
     } else {
      ___resumeException($34|0);
      // unreachable;
     }
    }
    else if ((label|0) == 16) {
     HEAP32[$to_nxt>>2] = $$0254;
     $41 = HEAP32[$frm_nxt>>2]|0;
     $42 = ($$0155|0)==($41|0);
     L37: do {
      if ($42) {
       $$1$lcssa = $$0155;
      } else {
       $$115 = $$0155;$storemerge14 = $$0254;
       while(1) {
        $43 = $$115;
        $44 = (($18) - ($43))|0;
        $45 = HEAP32[$7>>2]|0;
        $46 = (_uselocale(($45|0))|0);
        __THREW__ = 0;
        $47 = (invoke_iiiii(560,($storemerge14|0),($$115|0),($44|0),($save_state|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         label = 21;
         break;
        }
        $50 = ($46|0)==(0|0);
        if (!($50)) {
         __THREW__ = 0;
         (invoke_ii(497,($46|0))|0);
         $51 = __THREW__; __THREW__ = 0;
         $52 = $51&1;
         if ($52) {
          label = 20;
          break;
         }
        }
        if ((($47|0) == 0)) {
         $62 = (($$115) + 1|0);
         $$2 = $62;
        } else if ((($47|0) == -1)) {
         label = 27;
         break;
        } else if ((($47|0) == -2)) {
         label = 28;
         break;
        } else {
         $63 = (($$115) + ($47)|0);
         $$2 = $63;
        }
        $64 = HEAP32[$to_nxt>>2]|0;
        $65 = (($64) + 4|0);
        HEAP32[$to_nxt>>2] = $65;
        $66 = HEAP32[$frm_nxt>>2]|0;
        $67 = ($$2|0)==($66|0);
        if ($67) {
         $$1$lcssa = $$2;
         break L37;
        } else {
         $$115 = $$2;$storemerge14 = $65;
        }
       }
       if ((label|0) == 20) {
        $53 = ___cxa_find_matching_catch(0|0)|0;
        $54 = tempRet0;
        ___clang_call_terminate($53);
        // unreachable;
       }
       else if ((label|0) == 21) {
        $55 = ___cxa_find_matching_catch()|0;
        $56 = tempRet0;
        $57 = ($46|0)==(0|0);
        if ($57) {
         ___resumeException($55|0);
         // unreachable;
        }
        __THREW__ = 0;
        (invoke_ii(497,($46|0))|0);
        $58 = __THREW__; __THREW__ = 0;
        $59 = $58&1;
        if ($59) {
         $60 = ___cxa_find_matching_catch(0|0)|0;
         $61 = tempRet0;
         ___clang_call_terminate($60);
         // unreachable;
        } else {
         ___resumeException($55|0);
         // unreachable;
        }
       }
       else if ((label|0) == 27) {
        HEAP32[$frm_nxt>>2] = $$115;
        $$0 = 2;
        STACKTOP = sp;return ($$0|0);
       }
       else if ((label|0) == 28) {
        HEAP32[$frm_nxt>>2] = $$115;
        $$0 = 1;
        STACKTOP = sp;return ($$0|0);
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $not$3 = ($$1$lcssa|0)!=($frm_end|0);
     $68 = $not$3&1;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 37) {
     $81 = ___cxa_find_matching_catch(0|0)|0;
     $82 = tempRet0;
     ___clang_call_terminate($81);
     // unreachable;
    }
    else if ((label|0) == 38) {
     $83 = ___cxa_find_matching_catch()|0;
     $84 = tempRet0;
     $85 = ($74|0)==(0|0);
     if ($85) {
      ___resumeException($83|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(497,($74|0))|0);
     $86 = __THREW__; __THREW__ = 0;
     $87 = $86&1;
     if ($87) {
      $88 = ___cxa_find_matching_catch(0|0)|0;
      $89 = tempRet0;
      ___clang_call_terminate($88);
      // unreachable;
     } else {
      ___resumeException($83|0);
      // unreachable;
     }
    }
    else if ((label|0) == 48) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $104 = $$pre;
     break;
    }
    else if ((label|0) == 50) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $not$ = ($104|0)!=($frm_end|0);
 $105 = $not$&1;
 $$0 = $105;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$02 = 0, $p$03 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 HEAP32[$to_nxt>>2] = $to;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_uselocale(($1|0))|0);
 __THREW__ = 0;
 $3 = (invoke_iiii(558,($tmp|0),0,($st|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $13 = ($2|0)==(0|0);
  if ($13) {
   ___resumeException($11|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(497,($2|0))|0);
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   $16 = ___cxa_find_matching_catch(0|0)|0;
   $17 = tempRet0;
   ___clang_call_terminate($16);
   // unreachable;
  } else {
   ___resumeException($11|0);
   // unreachable;
  }
 }
 $6 = ($2|0)==(0|0);
 if (!($6)) {
  __THREW__ = 0;
  (invoke_ii(497,($2|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $9 = ___cxa_find_matching_catch(0|0)|0;
   $10 = tempRet0;
   ___clang_call_terminate($9);
   // unreachable;
  }
 }
 if ((($3|0) == 0) | (($3|0) == -1)) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = (($3) + -1)|0;
 $19 = HEAP32[$to_nxt>>2]|0;
 $20 = $to_end;
 $21 = $19;
 $22 = (($20) - ($21))|0;
 $23 = ($18>>>0)>($22>>>0);
 if ($23) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = ($18|0)==(0);
 if ($24) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $27 = $19;$n$02 = $18;$p$03 = $tmp;
 }
 while(1) {
  $25 = HEAP8[$p$03>>0]|0;
  $26 = (($27) + 1|0);
  HEAP32[$to_nxt>>2] = $26;
  HEAP8[$27>>0] = $25;
  $28 = (($n$02) + -1)|0;
  $29 = ($28|0)==(0);
  if ($29) {
   $$0 = 0;
   break;
  }
  $30 = (($p$03) + 1|0);
  $$pre = HEAP32[$to_nxt>>2]|0;
  $27 = $$pre;$n$02 = $28;$p$03 = $30;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_ii(497,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  __THREW__ = 0;
  $5 = (invoke_iiii(561,(0|0),(0|0),4)|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $13 = ___cxa_find_matching_catch(0|0)|0;
   $14 = tempRet0;
   $15 = ($2|0)==(0|0);
   if ($15) {
    $eh$lpad$body$indexZ2D = $13;
    ___clang_call_terminate($eh$lpad$body$indexZ2D);
    // unreachable;
   }
   __THREW__ = 0;
   (invoke_ii(497,($2|0))|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    $18 = ___cxa_find_matching_catch(0|0)|0;
    $19 = tempRet0;
    ___clang_call_terminate($18);
    // unreachable;
   } else {
    $eh$lpad$body$indexZ2D = $13;
    ___clang_call_terminate($eh$lpad$body$indexZ2D);
    // unreachable;
   }
  }
  $8 = ($2|0)==(0|0);
  if (!($8)) {
   __THREW__ = 0;
   (invoke_ii(497,($2|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $11 = ___cxa_find_matching_catch(0|0)|0;
    $12 = tempRet0;
    ___clang_call_terminate($11);
    // unreachable;
   }
  }
  $20 = ($5|0)==(0);
  if (!($20)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $21 = HEAP32[$0>>2]|0;
  $22 = ($21|0)==(0|0);
  if ($22) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  __THREW__ = 0;
  $23 = (invoke_ii(497,($21|0))|0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if (!($25)) {
   $26 = ($23|0)==(0|0);
   if ($26) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   __THREW__ = 0;
   (invoke_ii(497,($23|0))|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    $29 = ___cxa_find_matching_catch(0|0)|0;
    $30 = tempRet0;
    ___clang_call_terminate($29);
    // unreachable;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $31 = ___cxa_find_matching_catch(0|0)|0;
 $32 = tempRet0;
 $eh$lpad$body$indexZ2D = $31;
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$016 = 0, $$1 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbytes$0$lcssa = 0, $nbytes$07 = 0, $nbytes$1 = 0, $nwchar_t$08 = 0, $or$cond = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mx|0)==(0);
 $1 = ($frm|0)==($frm_end|0);
 $or$cond5 = $0 | $1;
 if ($or$cond5) {
  $nbytes$0$lcssa = 0;
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 $2 = $frm_end;
 $3 = (($this) + 8|0);
 $$016 = $frm;$nbytes$07 = 0;$nwchar_t$08 = 0;
 while(1) {
  $4 = $$016;
  $5 = (($2) - ($4))|0;
  $6 = HEAP32[$3>>2]|0;
  $7 = (_uselocale(($6|0))|0);
  __THREW__ = 0;
  $8 = (invoke_iiii(562,($$016|0),($5|0),($st|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   label = 7;
   break;
  }
  $11 = ($7|0)==(0|0);
  if (!($11)) {
   __THREW__ = 0;
   (invoke_ii(497,($7|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    label = 6;
    break;
   }
  }
  if ((($8|0) == 0)) {
   $23 = (($$016) + 1|0);
   $$1 = $23;$$pn = 1;
  } else if ((($8|0) == -2) | (($8|0) == -1)) {
   $nbytes$0$lcssa = $nbytes$07;
   label = 15;
   break;
  } else {
   $24 = (($$016) + ($8)|0);
   $$1 = $24;$$pn = $8;
  }
  $nbytes$1 = (($$pn) + ($nbytes$07))|0;
  $25 = (($nwchar_t$08) + 1)|0;
  $26 = ($25>>>0)>=($mx>>>0);
  $27 = ($$1|0)==($frm_end|0);
  $or$cond = $26 | $27;
  if ($or$cond) {
   $nbytes$0$lcssa = $nbytes$1;
   label = 15;
   break;
  } else {
   $$016 = $$1;$nbytes$07 = $nbytes$1;$nwchar_t$08 = $25;
  }
 }
 if ((label|0) == 6) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 else if ((label|0) == 7) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  $18 = ($7|0)==(0|0);
  if ($18) {
   ___resumeException($16|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(497,($7|0))|0);
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   $21 = ___cxa_find_matching_catch(0|0)|0;
   $22 = tempRet0;
   ___clang_call_terminate($21);
   // unreachable;
  } else {
   ___resumeException($16|0);
   // unreachable;
  }
 }
 else if ((label|0) == 15) {
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $11 = 1;
  STACKTOP = sp;return ($11|0);
 }
 __THREW__ = 0;
 $3 = (invoke_ii(497,($1|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $12 = ___cxa_find_matching_catch(0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 }
 $6 = ($3|0)==(0|0);
 if ($6) {
  $11 = 4;
  STACKTOP = sp;return ($11|0);
 }
 __THREW__ = 0;
 (invoke_ii(497,($3|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  $11 = 4;
  STACKTOP = sp;return ($11|0);
 }
 return 0|0;
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 1;
 $7 = (($frm) + ($6<<1)|0);
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $12 = (($to) + ($11)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = (($frm) + ($5)|0);
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 1;
 $12 = (($to) + ($11<<1)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = (($frm) + ($6<<2)|0);
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $12 = (($to) + ($11)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = (($frm) + ($5)|0);
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 2;
 $12 = (($to) + ($11<<2)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIcED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((11016 + 8|0));
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIwED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((11056 + 8|0));
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 9|0);
 $1 = HEAP8[$0>>0]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,11096,4);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(11104)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,11104,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,11128,5);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(11136)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,11136,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($iob) {
 $iob = $iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 8)) {
  $$0 = 16;
 } else if ((($2|0) == 0)) {
  $$0 = 0;
 } else if ((($2|0) == 64)) {
  $$0 = 8;
 } else {
  $$0 = 10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11168>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $36 = HEAP32[11160>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $2 = (___cxa_guard_acquire((11168|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $36 = HEAP32[11160>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $4 = HEAP8[18368>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((18368|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((18200|0),0,168)|0;
   (___cxa_atexit((563|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((18368|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(409,(18200|0),(18376|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  (invoke_iii(409,(((18200 + 12|0))|0),(18384|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   (invoke_iii(409,(((18200 + 24|0))|0),(18392|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    (invoke_iii(409,(((18200 + 36|0))|0),(18400|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     (invoke_iii(409,(((18200 + 48|0))|0),(18416|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      (invoke_iii(409,(((18200 + 60|0))|0),(18432|0))|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       (invoke_iii(409,(((18200 + 72|0))|0),(18440|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        (invoke_iii(409,(((18200 + 84|0))|0),(18456|0))|0);
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         (invoke_iii(409,(((18200 + 96|0))|0),(18464|0))|0);
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          (invoke_iii(409,(((18200 + 108|0))|0),(18472|0))|0);
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           (invoke_iii(409,(((18200 + 120|0))|0),(18480|0))|0);
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            (invoke_iii(409,(((18200 + 132|0))|0),(18488|0))|0);
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             (invoke_iii(409,(((18200 + 144|0))|0),(18496|0))|0);
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              (invoke_iii(409,(((18200 + 156|0))|0),(18504|0))|0);
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               HEAP32[11160>>2] = 18200;
               ___cxa_guard_release((11168|0));
               $36 = HEAP32[11160>>2]|0;
               STACKTOP = sp;return ($36|0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $37 = ___cxa_find_matching_catch()|0;
 $38 = tempRet0;
 ___cxa_guard_abort((11168|0));
 ___resumeException($37|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11184>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $36 = HEAP32[11176>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $2 = (___cxa_guard_acquire((11184|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $36 = HEAP32[11176>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $4 = HEAP8[17832>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((17832|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((17664|0),0,168)|0;
   (___cxa_atexit((564|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((17832|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(565,(17664|0),(17840|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  (invoke_iii(565,(((17664 + 12|0))|0),(17872|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   (invoke_iii(565,(((17664 + 24|0))|0),(17904|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    (invoke_iii(565,(((17664 + 36|0))|0),(17936|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     (invoke_iii(565,(((17664 + 48|0))|0),(17976|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      (invoke_iii(565,(((17664 + 60|0))|0),(18016|0))|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       (invoke_iii(565,(((17664 + 72|0))|0),(18048|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        (invoke_iii(565,(((17664 + 84|0))|0),(18088|0))|0);
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         (invoke_iii(565,(((17664 + 96|0))|0),(18104|0))|0);
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          (invoke_iii(565,(((17664 + 108|0))|0),(18120|0))|0);
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           (invoke_iii(565,(((17664 + 120|0))|0),(18136|0))|0);
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            (invoke_iii(565,(((17664 + 132|0))|0),(18152|0))|0);
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             (invoke_iii(565,(((17664 + 144|0))|0),(18168|0))|0);
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              (invoke_iii(565,(((17664 + 156|0))|0),(18184|0))|0);
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               HEAP32[11176>>2] = 17664;
               ___cxa_guard_release((11184|0));
               $36 = HEAP32[11176>>2]|0;
               STACKTOP = sp;return ($36|0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $37 = ___cxa_find_matching_catch()|0;
 $38 = tempRet0;
 ___cxa_guard_abort((11184|0));
 ___resumeException($37|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11200>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $56 = HEAP32[11192>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $2 = (___cxa_guard_acquire((11200|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $56 = HEAP32[11192>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $4 = HEAP8[17440>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((17440|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((17152|0),0,288)|0;
   (___cxa_atexit((566|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((17440|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(409,(17152|0),(17448|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if (!($9)) {
   __THREW__ = 0;
   (invoke_iii(409,(((17152 + 12|0))|0),(17456|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    __THREW__ = 0;
    (invoke_iii(409,(((17152 + 24|0))|0),(17472|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     __THREW__ = 0;
     (invoke_iii(409,(((17152 + 36|0))|0),(17480|0))|0);
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if (!($15)) {
      __THREW__ = 0;
      (invoke_iii(409,(((17152 + 48|0))|0),(17488|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if (!($17)) {
       __THREW__ = 0;
       (invoke_iii(409,(((17152 + 60|0))|0),(17496|0))|0);
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if (!($19)) {
        __THREW__ = 0;
        (invoke_iii(409,(((17152 + 72|0))|0),(17504|0))|0);
        $20 = __THREW__; __THREW__ = 0;
        $21 = $20&1;
        if (!($21)) {
         __THREW__ = 0;
         (invoke_iii(409,(((17152 + 84|0))|0),(17512|0))|0);
         $22 = __THREW__; __THREW__ = 0;
         $23 = $22&1;
         if (!($23)) {
          __THREW__ = 0;
          (invoke_iii(409,(((17152 + 96|0))|0),(17520|0))|0);
          $24 = __THREW__; __THREW__ = 0;
          $25 = $24&1;
          if (!($25)) {
           __THREW__ = 0;
           (invoke_iii(409,(((17152 + 108|0))|0),(17536|0))|0);
           $26 = __THREW__; __THREW__ = 0;
           $27 = $26&1;
           if (!($27)) {
            __THREW__ = 0;
            (invoke_iii(409,(((17152 + 120|0))|0),(17544|0))|0);
            $28 = __THREW__; __THREW__ = 0;
            $29 = $28&1;
            if (!($29)) {
             __THREW__ = 0;
             (invoke_iii(409,(((17152 + 132|0))|0),(17560|0))|0);
             $30 = __THREW__; __THREW__ = 0;
             $31 = $30&1;
             if (!($31)) {
              __THREW__ = 0;
              (invoke_iii(409,(((17152 + 144|0))|0),(17576|0))|0);
              $32 = __THREW__; __THREW__ = 0;
              $33 = $32&1;
              if (!($33)) {
               __THREW__ = 0;
               (invoke_iii(409,(((17152 + 156|0))|0),(17584|0))|0);
               $34 = __THREW__; __THREW__ = 0;
               $35 = $34&1;
               if (!($35)) {
                __THREW__ = 0;
                (invoke_iii(409,(((17152 + 168|0))|0),(17592|0))|0);
                $36 = __THREW__; __THREW__ = 0;
                $37 = $36&1;
                if (!($37)) {
                 __THREW__ = 0;
                 (invoke_iii(409,(((17152 + 180|0))|0),(17600|0))|0);
                 $38 = __THREW__; __THREW__ = 0;
                 $39 = $38&1;
                 if (!($39)) {
                  __THREW__ = 0;
                  (invoke_iii(409,(((17152 + 192|0))|0),(17488|0))|0);
                  $40 = __THREW__; __THREW__ = 0;
                  $41 = $40&1;
                  if ($41) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(409,(((17152 + 204|0))|0),(17608|0))|0);
                  $42 = __THREW__; __THREW__ = 0;
                  $43 = $42&1;
                  if ($43) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(409,(((17152 + 216|0))|0),(17616|0))|0);
                  $44 = __THREW__; __THREW__ = 0;
                  $45 = $44&1;
                  if ($45) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(409,(((17152 + 228|0))|0),(17624|0))|0);
                  $46 = __THREW__; __THREW__ = 0;
                  $47 = $46&1;
                  if ($47) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(409,(((17152 + 240|0))|0),(17632|0))|0);
                  $48 = __THREW__; __THREW__ = 0;
                  $49 = $48&1;
                  if ($49) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(409,(((17152 + 252|0))|0),(17640|0))|0);
                  $50 = __THREW__; __THREW__ = 0;
                  $51 = $50&1;
                  if ($51) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(409,(((17152 + 264|0))|0),(17648|0))|0);
                  $52 = __THREW__; __THREW__ = 0;
                  $53 = $52&1;
                  if ($53) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(409,(((17152 + 276|0))|0),(17656|0))|0);
                  $54 = __THREW__; __THREW__ = 0;
                  $55 = $54&1;
                  if ($55) {
                   break;
                  }
                  HEAP32[11192>>2] = 17152;
                  ___cxa_guard_release((11200|0));
                  $56 = HEAP32[11192>>2]|0;
                  STACKTOP = sp;return ($56|0);
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $57 = ___cxa_find_matching_catch()|0;
 $58 = tempRet0;
 ___cxa_guard_abort((11200|0));
 ___resumeException($57|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11216>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $56 = HEAP32[11208>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $2 = (___cxa_guard_acquire((11216|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $56 = HEAP32[11208>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $4 = HEAP8[16600>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((16600|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((16312|0),0,288)|0;
   (___cxa_atexit((567|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((16600|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(565,(16312|0),(16608|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if (!($9)) {
   __THREW__ = 0;
   (invoke_iii(565,(((16312 + 12|0))|0),(16640|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    __THREW__ = 0;
    (invoke_iii(565,(((16312 + 24|0))|0),(16680|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     __THREW__ = 0;
     (invoke_iii(565,(((16312 + 36|0))|0),(16704|0))|0);
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if (!($15)) {
      __THREW__ = 0;
      (invoke_iii(565,(((16312 + 48|0))|0),(17024|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if (!($17)) {
       __THREW__ = 0;
       (invoke_iii(565,(((16312 + 60|0))|0),(16728|0))|0);
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if (!($19)) {
        __THREW__ = 0;
        (invoke_iii(565,(((16312 + 72|0))|0),(16752|0))|0);
        $20 = __THREW__; __THREW__ = 0;
        $21 = $20&1;
        if (!($21)) {
         __THREW__ = 0;
         (invoke_iii(565,(((16312 + 84|0))|0),(16776|0))|0);
         $22 = __THREW__; __THREW__ = 0;
         $23 = $22&1;
         if (!($23)) {
          __THREW__ = 0;
          (invoke_iii(565,(((16312 + 96|0))|0),(16808|0))|0);
          $24 = __THREW__; __THREW__ = 0;
          $25 = $24&1;
          if (!($25)) {
           __THREW__ = 0;
           (invoke_iii(565,(((16312 + 108|0))|0),(16848|0))|0);
           $26 = __THREW__; __THREW__ = 0;
           $27 = $26&1;
           if (!($27)) {
            __THREW__ = 0;
            (invoke_iii(565,(((16312 + 120|0))|0),(16880|0))|0);
            $28 = __THREW__; __THREW__ = 0;
            $29 = $28&1;
            if (!($29)) {
             __THREW__ = 0;
             (invoke_iii(565,(((16312 + 132|0))|0),(16920|0))|0);
             $30 = __THREW__; __THREW__ = 0;
             $31 = $30&1;
             if (!($31)) {
              __THREW__ = 0;
              (invoke_iii(565,(((16312 + 144|0))|0),(16960|0))|0);
              $32 = __THREW__; __THREW__ = 0;
              $33 = $32&1;
              if (!($33)) {
               __THREW__ = 0;
               (invoke_iii(565,(((16312 + 156|0))|0),(16976|0))|0);
               $34 = __THREW__; __THREW__ = 0;
               $35 = $34&1;
               if (!($35)) {
                __THREW__ = 0;
                (invoke_iii(565,(((16312 + 168|0))|0),(16992|0))|0);
                $36 = __THREW__; __THREW__ = 0;
                $37 = $36&1;
                if (!($37)) {
                 __THREW__ = 0;
                 (invoke_iii(565,(((16312 + 180|0))|0),(17008|0))|0);
                 $38 = __THREW__; __THREW__ = 0;
                 $39 = $38&1;
                 if (!($39)) {
                  __THREW__ = 0;
                  (invoke_iii(565,(((16312 + 192|0))|0),(17024|0))|0);
                  $40 = __THREW__; __THREW__ = 0;
                  $41 = $40&1;
                  if ($41) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(565,(((16312 + 204|0))|0),(17040|0))|0);
                  $42 = __THREW__; __THREW__ = 0;
                  $43 = $42&1;
                  if ($43) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(565,(((16312 + 216|0))|0),(17056|0))|0);
                  $44 = __THREW__; __THREW__ = 0;
                  $45 = $44&1;
                  if ($45) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(565,(((16312 + 228|0))|0),(17072|0))|0);
                  $46 = __THREW__; __THREW__ = 0;
                  $47 = $46&1;
                  if ($47) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(565,(((16312 + 240|0))|0),(17088|0))|0);
                  $48 = __THREW__; __THREW__ = 0;
                  $49 = $48&1;
                  if ($49) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(565,(((16312 + 252|0))|0),(17104|0))|0);
                  $50 = __THREW__; __THREW__ = 0;
                  $51 = $50&1;
                  if ($51) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(565,(((16312 + 264|0))|0),(17120|0))|0);
                  $52 = __THREW__; __THREW__ = 0;
                  $53 = $52&1;
                  if ($53) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(565,(((16312 + 276|0))|0),(17136|0))|0);
                  $54 = __THREW__; __THREW__ = 0;
                  $55 = $54&1;
                  if ($55) {
                   break;
                  }
                  HEAP32[11208>>2] = 16312;
                  ___cxa_guard_release((11216|0));
                  $56 = HEAP32[11208>>2]|0;
                  STACKTOP = sp;return ($56|0);
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $57 = ___cxa_find_matching_catch()|0;
 $58 = tempRet0;
 ___cxa_guard_abort((11216|0));
 ___resumeException($57|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11232>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $12 = HEAP32[11224>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $2 = (___cxa_guard_acquire((11232|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $12 = HEAP32[11224>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $4 = HEAP8[16288>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((16288|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((16000|0),0,288)|0;
   (___cxa_atexit((568|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((16288|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(409,(16000|0),(16296|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  ___cxa_guard_abort((11232|0));
  ___resumeException($13|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(409,(((16000 + 12|0))|0),(16304|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  ___cxa_guard_abort((11232|0));
  ___resumeException($13|0);
  // unreachable;
 }
 HEAP32[11224>>2] = 16000;
 ___cxa_guard_release((11232|0));
 $12 = HEAP32[11224>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11248>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $12 = HEAP32[11240>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $2 = (___cxa_guard_acquire((11248|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $12 = HEAP32[11240>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $4 = HEAP8[15960>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((15960|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((15672|0),0,288)|0;
   (___cxa_atexit((569|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((15960|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(565,(15672|0),(15968|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  ___cxa_guard_abort((11248|0));
  ___resumeException($13|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(565,(((15672 + 12|0))|0),(15984|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  ___cxa_guard_abort((11248|0));
  ___resumeException($13|0);
  // unreachable;
 }
 HEAP32[11240>>2] = 15672;
 ___cxa_guard_release((11248|0));
 $12 = HEAP32[11240>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11272>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (11256|0);
 }
 $2 = (___cxa_guard_acquire((11272|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (11256|0);
 }
 __THREW__ = 0;
 invoke_viii(401,(11256|0),(11280|0),8);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___cxa_guard_abort((11272|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (___cxa_atexit((403|0),(11256|0),(___dso_handle|0))|0);
 ___cxa_guard_release((11272|0));
 STACKTOP = sp;return (11256|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11312>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (11296|0);
 }
 $2 = (___cxa_guard_acquire((11312|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (11296|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(570,(11320|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(571,(11296|0),(11320|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (___cxa_atexit((572|0),(11296|0),(___dso_handle|0))|0);
   ___cxa_guard_release((11312|0));
   STACKTOP = sp;return (11296|0);
  }
 }
 $9 = ___cxa_find_matching_catch()|0;
 $10 = tempRet0;
 ___cxa_guard_abort((11312|0));
 ___resumeException($9|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11376>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (11360|0);
 }
 $2 = (___cxa_guard_acquire((11376|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (11360|0);
 }
 __THREW__ = 0;
 invoke_viii(401,(11360|0),(11384|0),8);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___cxa_guard_abort((11376|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (___cxa_atexit((403|0),(11360|0),(___dso_handle|0))|0);
 ___cxa_guard_release((11376|0));
 STACKTOP = sp;return (11360|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11416>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (11400|0);
 }
 $2 = (___cxa_guard_acquire((11416|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (11400|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(570,(11424|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(571,(11400|0),(11424|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (___cxa_atexit((572|0),(11400|0),(___dso_handle|0))|0);
   ___cxa_guard_release((11416|0));
   STACKTOP = sp;return (11400|0);
  }
 }
 $9 = ___cxa_find_matching_catch()|0;
 $10 = tempRet0;
 ___cxa_guard_abort((11416|0));
 ___resumeException($9|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11480>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (11464|0);
 }
 $2 = (___cxa_guard_acquire((11480|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (11464|0);
 }
 __THREW__ = 0;
 invoke_viii(401,(11464|0),(11488|0),20);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___cxa_guard_abort((11480|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (___cxa_atexit((403|0),(11464|0),(___dso_handle|0))|0);
 ___cxa_guard_release((11480|0));
 STACKTOP = sp;return (11464|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11528>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (11512|0);
 }
 $2 = (___cxa_guard_acquire((11528|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (11512|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(570,(11536|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(571,(11512|0),(11536|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (___cxa_atexit((572|0),(11512|0),(___dso_handle|0))|0);
   ___cxa_guard_release((11528|0));
   STACKTOP = sp;return (11512|0);
  }
 }
 $9 = ___cxa_find_matching_catch()|0;
 $10 = tempRet0;
 ___cxa_guard_abort((11528|0));
 ___resumeException($9|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11640>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (11624|0);
 }
 $2 = (___cxa_guard_acquire((11640|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (11624|0);
 }
 __THREW__ = 0;
 invoke_viii(401,(11624|0),(11648|0),11);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___cxa_guard_abort((11640|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (___cxa_atexit((403|0),(11624|0),(___dso_handle|0))|0);
 ___cxa_guard_release((11640|0));
 STACKTOP = sp;return (11624|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[11680>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (11664|0);
 }
 $2 = (___cxa_guard_acquire((11680|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (11664|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(570,(11688|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(571,(11664|0),(11688|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (___cxa_atexit((572|0),(11664|0),(___dso_handle|0))|0);
   ___cxa_guard_release((11680|0));
   STACKTOP = sp;return (11664|0);
  }
 }
 $9 = ___cxa_find_matching_catch()|0;
 $10 = tempRet0;
 ___cxa_guard_abort((11680|0));
 ___resumeException($9|0);
 // unreachable;
 return 0|0;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((10936 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_i(481)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  $5 = ($1|0)==($2|0);
  if ($5) {
   STACKTOP = sp;return;
  }
  $6 = HEAP32[$0>>2]|0;
  __THREW__ = 0;
  invoke_vi(495,($6|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   STACKTOP = sp;return;
  }
 }
 $9 = ___cxa_find_matching_catch(0|0)|0;
 $10 = tempRet0;
 ___clang_call_terminate($9);
 // unreachable;
}
function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,10928)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 1023]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 1023]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fwrite(($__s|0),4,($__n|0),($5|0))|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($__n|0)>(0);
 if ($3) {
  $$012 = $__s;$__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$$012>>2]|0;
  $11 = (FUNCTION_TABLE_iii[$9 & 1023]($this,$10)|0);
  $12 = ($11|0)==(-1);
  if ($12) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $13 = (($__i$03) + 1)|0;
  $14 = (($$012) + 4|0);
  $15 = ($13|0)<($__n|0);
  if ($15) {
   $$012 = $14;$__i$03 = $13;
  } else {
   $$0 = $13;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__e = 0;
 var $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 L1: do {
  if (!($0)) {
   HEAP32[$__1buf>>2] = $__c;
   $1 = (($this) + 44|0);
   $2 = HEAP8[$1>>0]|0;
   $3 = ($2<<24>>24)==(0);
   if (!($3)) {
    $4 = (($this) + 32|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = (_fwrite(($__1buf|0),4,1,($5|0))|0);
    $7 = ($6|0)==(1);
    if ($7) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $8 = (($__1buf) + 4|0);
   $9 = (($this) + 36|0);
   $10 = (($this) + 40|0);
   $11 = (($__extbuf) + 8|0);
   $12 = $__extbuf;
   $13 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $14 = HEAP32[$9>>2]|0;
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$14>>2]|0;
    $17 = (($16) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 511]($14,$15,$pbase$0,$8,$__e,$__extbuf,$11,$__extbe)|0);
    $20 = HEAP32[$__e>>2]|0;
    $21 = ($20|0)==($pbase$0|0);
    if ($21) {
     $$0 = -1;
     label = 12;
     break;
    }
    $22 = ($19|0)==(3);
    if ($22) {
     label = 7;
     break;
    }
    $26 = ($19|0)==(1);
    $27 = ($19>>>0)<(2);
    if (!($27)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $28 = HEAP32[$__extbe>>2]|0;
    $29 = $28;
    $30 = (($29) - ($12))|0;
    $31 = HEAP32[$13>>2]|0;
    $32 = (_fwrite(($__extbuf|0),1,($30|0),($31|0))|0);
    $33 = ($32|0)==($30|0);
    if (!($33)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $34 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $26 ? $34 : $pbase$0;
    if ($26) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $23 = HEAP32[$13>>2]|0;
    $24 = (_fwrite(($pbase$0|0),1,1,($23|0))|0);
    $25 = ($24|0)==(1);
    if ($25) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $0 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,10928)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 __ZNSt3__121__throw_runtime_errorEPKc(7456);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__enxt = sp + 8|0;
 $__ci = sp + 4|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($0) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(-1);
  $7 = $6&1;
  HEAP8[$1>>0] = $7;
  $$01 = $5;
  STACKTOP = sp;return ($$01|0);
 }
 $8 = (($this) + 48|0);
 L8: do {
  if ($3) {
   $9 = HEAP32[$8>>2]|0;
   HEAP32[$__ci>>2] = $9;
   $10 = (($this) + 36|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($this) + 40|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($__ci) + 4|0);
   $15 = (($__extbuf) + 8|0);
   $16 = HEAP32[$11>>2]|0;
   $17 = (($16) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 511]($11,$13,$__ci,$14,$__inxt,$__extbuf,$15,$__enxt)|0);
   if ((($19|0) == 1) | (($19|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   } else if ((($19|0) == 3)) {
    $20 = HEAP32[$8>>2]|0;
    $21 = $20&255;
    HEAP8[$__extbuf>>0] = $21;
    $22 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $22;
   }
   $23 = (($this) + 32|0);
   while(1) {
    $24 = HEAP32[$__enxt>>2]|0;
    $25 = ($24>>>0)>($__extbuf>>>0);
    if (!($25)) {
     break L8;
    }
    $26 = (($24) + -1|0);
    HEAP32[$__enxt>>2] = $26;
    $27 = HEAP8[$26>>0]|0;
    $28 = $27 << 24 >> 24;
    $29 = HEAP32[$23>>2]|0;
    $30 = (_ungetc(($28|0),($29|0))|0);
    $31 = ($30|0)==(-1);
    if ($31) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$8>>2] = $__c;
 HEAP8[$1>>0] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,10920)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 1023]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 1023]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fwrite(($__s|0),1,($__n|0),($5|0))|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($__n|0)>(0);
 if ($3) {
  $$012 = $__s;$__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP8[$$012>>0]|0;
  $11 = $10&255;
  $12 = (FUNCTION_TABLE_iii[$9 & 1023]($this,$11)|0);
  $13 = ($12|0)==(-1);
  if ($13) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $14 = (($__i$03) + 1)|0;
  $15 = (($$012) + 1|0);
  $16 = ($14|0)<($__n|0);
  if ($16) {
   $$012 = $15;$__i$03 = $14;
  } else {
   $$0 = $14;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0;
 var $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 L1: do {
  if (!($0)) {
   $1 = $__c&255;
   HEAP8[$__1buf>>0] = $1;
   $2 = (($this) + 44|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if (!($4)) {
    $5 = (($this) + 32|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = (_fwrite(($__1buf|0),1,1,($6|0))|0);
    $8 = ($7|0)==(1);
    if ($8) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $9 = (($__1buf) + 1|0);
   $10 = (($this) + 36|0);
   $11 = (($this) + 40|0);
   $12 = (($__extbuf) + 8|0);
   $13 = $__extbuf;
   $14 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$11>>2]|0;
    $17 = HEAP32[$15>>2]|0;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 511]($15,$16,$pbase$0,$9,$__e,$__extbuf,$12,$__extbe)|0);
    $21 = HEAP32[$__e>>2]|0;
    $22 = ($21|0)==($pbase$0|0);
    if ($22) {
     $$0 = -1;
     label = 12;
     break;
    }
    $23 = ($20|0)==(3);
    if ($23) {
     label = 7;
     break;
    }
    $27 = ($20|0)==(1);
    $28 = ($20>>>0)<(2);
    if (!($28)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $29 = HEAP32[$__extbe>>2]|0;
    $30 = $29;
    $31 = (($30) - ($13))|0;
    $32 = HEAP32[$14>>2]|0;
    $33 = (_fwrite(($__extbuf|0),1,($31|0),($32|0))|0);
    $34 = ($33|0)==($31|0);
    if (!($34)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $35 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $27 ? $35 : $pbase$0;
    if ($27) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $24 = HEAP32[$14>>2]|0;
    $25 = (_fwrite(($pbase$0|0),1,1,($24|0))|0);
    $26 = ($25|0)==(1);
    if ($26) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $0 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,10920)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 __ZNSt3__121__throw_runtime_errorEPKc(7456);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__enxt = sp + 4|0;
 $__ci = sp + 8|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($0) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(-1);
  $7 = $6&1;
  HEAP8[$1>>0] = $7;
  $$01 = $5;
  STACKTOP = sp;return ($$01|0);
 }
 $8 = (($this) + 48|0);
 L8: do {
  if ($3) {
   $9 = HEAP32[$8>>2]|0;
   $10 = $9&255;
   HEAP8[$__ci>>0] = $10;
   $11 = (($this) + 36|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($this) + 40|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($__ci) + 1|0);
   $16 = (($__extbuf) + 8|0);
   $17 = HEAP32[$12>>2]|0;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 511]($12,$14,$__ci,$15,$__inxt,$__extbuf,$16,$__enxt)|0);
   if ((($20|0) == 3)) {
    $21 = HEAP32[$8>>2]|0;
    $22 = $21&255;
    HEAP8[$__extbuf>>0] = $22;
    $23 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $23;
   } else if ((($20|0) == 1) | (($20|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   }
   $24 = (($this) + 32|0);
   while(1) {
    $25 = HEAP32[$__enxt>>2]|0;
    $26 = ($25>>>0)>($__extbuf>>>0);
    if (!($26)) {
     break L8;
    }
    $27 = (($25) + -1|0);
    HEAP32[$__enxt>>2] = $27;
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = HEAP32[$24>>2]|0;
    $31 = (_ungetc(($29|0),($30|0))|0);
    $32 = ($31|0)==(-1);
    if ($32) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$8>>2] = $__c;
 HEAP8[$1>>0] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __GLOBAL__I_a() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_base4InitC2Ev(0);
 (___cxa_atexit((573|0),(6880|0),(___dso_handle|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this>>2] = ((7608 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 40|0);
 HEAP32[$2>>2] = $__st;
 $3 = (($this) + 48|0);
 HEAP32[$3>>2] = -1;
 $4 = (($this) + 52|0);
 HEAP8[$4>>0] = 0;
 $5 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$5);
 __THREW__ = 0;
 invoke_vii(94,($this|0),($0|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this>>2] = ((7496 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$2);
 __THREW__ = 0;
 $3 = (invoke_iii(432,($0|0),(10920|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
  ___resumeException($14|0);
  // unreachable;
 } else {
  $6 = (($this) + 36|0);
  __ZNSt3__16localeD2Ev($0);
  HEAP32[$6>>2] = $3;
  $7 = (($this) + 40|0);
  HEAP32[$7>>2] = $__st;
  $8 = (($this) + 44|0);
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (FUNCTION_TABLE_ii[$11 & 1023]($3)|0);
  $13 = $12&1;
  HEAP8[$8>>0] = $13;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this>>2] = ((7352 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 40|0);
 HEAP32[$2>>2] = $__st;
 $3 = (($this) + 48|0);
 HEAP32[$3>>2] = -1;
 $4 = (($this) + 52|0);
 HEAP8[$4>>0] = 0;
 $5 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$5);
 __THREW__ = 0;
 invoke_vii(76,($this|0),($0|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this>>2] = ((7240 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$2);
 __THREW__ = 0;
 $3 = (invoke_iii(432,($0|0),(10928|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
  ___resumeException($14|0);
  // unreachable;
 } else {
  $6 = (($this) + 36|0);
  __ZNSt3__16localeD2Ev($0);
  HEAP32[$6>>2] = $3;
  $7 = (($this) + 40|0);
  HEAP32[$7>>2] = $__st;
  $8 = (($this) + 44|0);
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (FUNCTION_TABLE_ii[$11 & 1023]($3)|0);
  $13 = $12&1;
  HEAP8[$8>>0] = $13;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__118__libcpp_refstringC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($msg|0))|0);
 $1 = (($0) + 13)|0;
 $2 = (__Znwj($1)|0);
 HEAP32[$2>>2] = $0;
 $3 = (($2) + 4|0);
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = (($2) + 12|0);
 $6 = (($0) + 1)|0;
 _memcpy(($5|0),($msg|0),($6|0))|0;
 HEAP32[$this>>2] = $5;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$01 = 0, $scevgep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  HEAP8[$this>>0] = $6;
  $7 = (($this) + 1|0);
  $__p$0$ph = $7;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = (($this) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  HEAP32[$this>>2] = $12;
  $13 = (($this) + 4|0);
  HEAP32[$13>>2] = $2;
  $__p$0$ph = $10;
 }
 $14 = ($__first|0)==($__last|0);
 if ($14) {
  $__p$0$lcssa = $__p$0$ph;
  HEAP8[$__p$0$lcssa>>0] = 0;
  STACKTOP = sp;return;
 }
 $15 = $__last;
 $16 = (($15) - ($0))|0;
 $$02 = $__first;$__p$01 = $__p$0$ph;
 while(1) {
  $17 = HEAP8[$$02>>0]|0;
  HEAP8[$__p$01>>0] = $17;
  $18 = (($$02) + 1|0);
  $19 = (($__p$01) + 1|0);
  $20 = ($18|0)==($__last|0);
  if ($20) {
   break;
  } else {
   $$02 = $18;$__p$01 = $19;
  }
 }
 $scevgep4 = (($__p$0$ph) + ($16)|0);
 $__p$0$lcssa = $scevgep4;
 HEAP8[$__p$0$lcssa>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$01 = 0, $scevgep = 0, $scevgep5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $5 = ($3>>>0)<(2);
 if ($5) {
  $6 = $2 >>> 1;
  $7 = $6&255;
  HEAP8[$this>>0] = $7;
  $8 = (($this) + 4|0);
  $__p$0$ph = $8;
 } else {
  $9 = (($3) + 4)|0;
  $10 = $9 & -4;
  $11 = $10 << 2;
  $12 = (__Znwj($11)|0);
  $13 = (($this) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = $10 | 1;
  HEAP32[$this>>2] = $14;
  $15 = (($this) + 4|0);
  HEAP32[$15>>2] = $3;
  $__p$0$ph = $12;
 }
 $16 = ($__first|0)==($__last|0);
 if ($16) {
  $__p$0$lcssa = $__p$0$ph;
  HEAP32[$__p$0$lcssa>>2] = 0;
  STACKTOP = sp;return;
 }
 $scevgep = (($__last) + -4|0);
 $17 = $scevgep;
 $18 = (($17) - ($0))|0;
 $19 = $18 >>> 2;
 $20 = (($19) + 1)|0;
 $$02 = $__first;$__p$01 = $__p$0$ph;
 while(1) {
  $21 = HEAP32[$$02>>2]|0;
  HEAP32[$__p$01>>2] = $21;
  $22 = (($$02) + 4|0);
  $23 = (($__p$01) + 4|0);
  $24 = ($22|0)==($__last|0);
  if ($24) {
   break;
  } else {
   $$02 = $22;$__p$01 = $23;
  }
 }
 $scevgep5 = (($__p$0$ph) + ($20<<2)|0);
 $__p$0$lcssa = $scevgep5;
 HEAP32[$__p$0$lcssa>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$0$i$i = 0, $$025 = 0, $$027 = 0, $$index = 0, $$index10 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i13 = 0, $$pre$i2$i$i17 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off036 = 0, $__consume$1$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$063 = 0, $__ky1$037 = 0, $__ky2$048 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$061 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$phi = 0, $__n_does_match$333 = 0, $__n_does_match$4 = 0, $__n_does_match$546 = 0, $__n_does_match$6 = 0;
 var $__n_might_match$0$lcssa = 0, $__n_might_match$060 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$2$phi = 0, $__n_might_match$332 = 0, $__n_might_match$4 = 0, $__st$062 = 0, $__st$134 = 0, $__st$247 = 0, $__st$326 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $or$cond = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __THREW__ = 0;
   invoke_v(487);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    $$index = $9;$$index10 = $10;
    ___resumeException($$index|0);
    // unreachable;
   } else {
    $18 = 0;$__status$0 = 0;
   }
  } else {
   $18 = $5;$__status$0 = $5;
  }
 } else {
  $18 = 0;$__status$0 = $__statbuf;
 }
 $23 = ($__kb|0)==($__ke|0);
 if ($23) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
 } else {
  $__ky$063 = $__kb;$__n_does_match$061 = 0;$__n_might_match$060 = $3;$__st$062 = $__status$0;
  while(1) {
   $24 = HEAP8[$__ky$063>>0]|0;
   $25 = $24 & 1;
   $26 = ($25<<24>>24)==(0);
   if ($26) {
    $29 = $24&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $27 = (($__ky$063) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    HEAP8[$__st$062>>0] = 2;
    $33 = (($__n_might_match$060) + -1)|0;
    $34 = (($__n_does_match$061) + 1)|0;
    $__n_does_match$1 = $34;$__n_might_match$1 = $33;
   } else {
    HEAP8[$__st$062>>0] = 1;
    $__n_does_match$1 = $__n_does_match$061;$__n_might_match$1 = $__n_might_match$060;
   }
   $35 = (($__ky$063) + 12|0);
   $36 = (($__st$062) + 1|0);
   $37 = ($35|0)==($__ke|0);
   if ($37) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$063 = $35;$__n_does_match$061 = $__n_does_match$1;$__n_might_match$060 = $__n_might_match$1;$__st$062 = $36;
   }
  }
 }
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L19: while(1) {
  $38 = HEAP32[$__b>>2]|0;
  $39 = ($38|0)==(0|0);
  do {
   if ($39) {
    $53 = 0;
   } else {
    $40 = (($38) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($38) + 16|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($41|0)==($43|0);
    if ($44) {
     $45 = HEAP32[$38>>2]|0;
     $46 = (($45) + 36|0);
     $47 = HEAP32[$46>>2]|0;
     __THREW__ = 0;
     $48 = (invoke_ii($47|0,($38|0))|0);
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     if ($50) {
      label = 6;
      break L19;
     }
     $51 = ($48|0)==(-1);
     if ($51) {
      HEAP32[$__b>>2] = 0;
      $53 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $53 = $$pre$i$i$i;
      break;
     }
    } else {
     $53 = $38;
    }
   }
  } while(0);
  $52 = ($53|0)==(0|0);
  $54 = HEAP32[$__e>>2]|0;
  $55 = ($54|0)==(0|0);
  if ($55) {
   $$pre$i2$i$i17 = 0;
  } else {
   $56 = (($54) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($54) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($57|0)==($59|0);
   if ($60) {
    $61 = HEAP32[$54>>2]|0;
    $62 = (($61) + 36|0);
    $63 = HEAP32[$62>>2]|0;
    __THREW__ = 0;
    $64 = (invoke_ii($63|0,($54|0))|0);
    $65 = __THREW__; __THREW__ = 0;
    $66 = $65&1;
    if ($66) {
     label = 6;
     break;
    }
    $67 = ($64|0)==(-1);
    if ($67) {
     HEAP32[$__e>>2] = 0;
     $$pre$i2$i$i17 = 0;
    } else {
     $$pre$i2$i$i17 = $54;
    }
   } else {
    $$pre$i2$i$i17 = $54;
   }
  }
  $68 = ($$pre$i2$i$i17|0)==(0|0);
  $tmp$i$i = $52 ^ $68;
  $69 = ($__n_might_match$2|0)!=(0);
  $or$cond = $tmp$i$i & $69;
  $70 = HEAP32[$__b>>2]|0;
  if (!($or$cond)) {
   label = 65;
   break;
  }
  $71 = (($70) + 12|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($70) + 16|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($72|0)==($74|0);
  if ($75) {
   $76 = HEAP32[$70>>2]|0;
   $77 = (($76) + 36|0);
   $78 = HEAP32[$77>>2]|0;
   __THREW__ = 0;
   $79 = (invoke_ii($78|0,($70|0))|0);
   $80 = __THREW__; __THREW__ = 0;
   $81 = $80&1;
   if ($81) {
    label = 6;
    break;
   } else {
    $$0$i$i = $79;
   }
  } else {
   $82 = HEAP8[$72>>0]|0;
   $83 = $82&255;
   $$0$i$i = $83;
  }
  $84 = $$0$i$i&255;
  if ($__case_sensitive) {
   $__c$0 = $84;
  } else {
   $85 = HEAP32[$__ct>>2]|0;
   $86 = (($85) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   __THREW__ = 0;
   $88 = (invoke_iii($87|0,($__ct|0),($84|0))|0);
   $89 = __THREW__; __THREW__ = 0;
   $90 = $89&1;
   if ($90) {
    label = 6;
    break;
   } else {
    $__c$0 = $88;
   }
  }
  $$pre = (($__indx$0) + 1)|0;
  if ($23) {
   $__n_might_match$2$phi = $__n_might_match$2;$__n_does_match$2$phi = $__n_does_match$2;$__indx$0 = $$pre;$__n_might_match$2 = $__n_might_match$2$phi;$__n_does_match$2 = $__n_does_match$2$phi;
   continue;
  } else {
   $__consume$0$off036 = 0;$__ky1$037 = $__kb;$__n_does_match$333 = $__n_does_match$2;$__n_might_match$332 = $__n_might_match$2;$__st$134 = $__status$0;
  }
  while(1) {
   $91 = HEAP8[$__st$134>>0]|0;
   $92 = ($91<<24>>24)==(1);
   do {
    if ($92) {
     $93 = HEAP8[$__ky1$037>>0]|0;
     $94 = $93 & 1;
     $95 = ($94<<24>>24)==(0);
     if ($95) {
      $98 = (($__ky1$037) + 1|0);
      $100 = $98;
     } else {
      $96 = (($__ky1$037) + 8|0);
      $97 = HEAP32[$96>>2]|0;
      $100 = $97;
     }
     $99 = (($100) + ($__indx$0)|0);
     $101 = HEAP8[$99>>0]|0;
     if ($__case_sensitive) {
      $__kc$0 = $101;
     } else {
      $102 = HEAP32[$__ct>>2]|0;
      $103 = (($102) + 12|0);
      $104 = HEAP32[$103>>2]|0;
      __THREW__ = 0;
      $105 = (invoke_iii($104|0,($__ct|0),($101|0))|0);
      $106 = __THREW__; __THREW__ = 0;
      $107 = $106&1;
      if ($107) {
       label = 5;
       break L19;
      } else {
       $__kc$0 = $105;
      }
     }
     $108 = ($__c$0<<24>>24)==($__kc$0<<24>>24);
     if (!($108)) {
      HEAP8[$__st$134>>0] = 0;
      $120 = (($__n_might_match$332) + -1)|0;
      $__consume$1$off0 = $__consume$0$off036;$__n_does_match$4 = $__n_does_match$333;$__n_might_match$4 = $120;
      break;
     }
     $109 = HEAP8[$__ky1$037>>0]|0;
     $110 = $109 & 1;
     $111 = ($110<<24>>24)==(0);
     if ($111) {
      $114 = $109&255;
      $115 = $114 >>> 1;
      $117 = $115;
     } else {
      $112 = (($__ky1$037) + 4|0);
      $113 = HEAP32[$112>>2]|0;
      $117 = $113;
     }
     $116 = ($117|0)==($$pre|0);
     if ($116) {
      HEAP8[$__st$134>>0] = 2;
      $118 = (($__n_might_match$332) + -1)|0;
      $119 = (($__n_does_match$333) + 1)|0;
      $__consume$1$off0 = 1;$__n_does_match$4 = $119;$__n_might_match$4 = $118;
     } else {
      $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$333;$__n_might_match$4 = $__n_might_match$332;
     }
    } else {
     $__consume$1$off0 = $__consume$0$off036;$__n_does_match$4 = $__n_does_match$333;$__n_might_match$4 = $__n_might_match$332;
    }
   } while(0);
   $121 = (($__ky1$037) + 12|0);
   $122 = (($__st$134) + 1|0);
   $123 = ($121|0)==($__ke|0);
   if ($123) {
    break;
   } else {
    $__consume$0$off036 = $__consume$1$off0;$__ky1$037 = $121;$__n_does_match$333 = $__n_does_match$4;$__n_might_match$332 = $__n_might_match$4;$__st$134 = $122;
   }
  }
  if (!($__consume$1$off0)) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$4;$__n_might_match$2 = $__n_might_match$4;
   continue;
  }
  $124 = HEAP32[$__b>>2]|0;
  $125 = (($124) + 12|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (($124) + 16|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = ($126|0)==($128|0);
  if ($129) {
   $130 = HEAP32[$124>>2]|0;
   $131 = (($130) + 40|0);
   $132 = HEAP32[$131>>2]|0;
   __THREW__ = 0;
   (invoke_ii($132|0,($124|0))|0);
   $133 = __THREW__; __THREW__ = 0;
   $134 = $133&1;
   if ($134) {
    label = 6;
    break;
   }
  } else {
   $135 = (($126) + 1|0);
   HEAP32[$125>>2] = $135;
  }
  $136 = (($__n_does_match$4) + ($__n_might_match$4))|0;
  $$not = ($136>>>0)<(2);
  if ($$not) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$4;$__n_might_match$2 = $__n_might_match$4;
   continue;
  } else {
   $__ky2$048 = $__kb;$__n_does_match$546 = $__n_does_match$4;$__st$247 = $__status$0;
  }
  while(1) {
   $137 = HEAP8[$__st$247>>0]|0;
   $138 = ($137<<24>>24)==(2);
   if ($138) {
    $139 = HEAP8[$__ky2$048>>0]|0;
    $140 = $139 & 1;
    $141 = ($140<<24>>24)==(0);
    if ($141) {
     $144 = $139&255;
     $145 = $144 >>> 1;
     $147 = $145;
    } else {
     $142 = (($__ky2$048) + 4|0);
     $143 = HEAP32[$142>>2]|0;
     $147 = $143;
    }
    $146 = ($147|0)==($$pre|0);
    if ($146) {
     $__n_does_match$6 = $__n_does_match$546;
    } else {
     HEAP8[$__st$247>>0] = 0;
     $148 = (($__n_does_match$546) + -1)|0;
     $__n_does_match$6 = $148;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$546;
   }
   $149 = (($__ky2$048) + 12|0);
   $150 = (($__st$247) + 1|0);
   $151 = ($149|0)==($__ke|0);
   if ($151) {
    $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$4;
    continue L19;
   } else {
    $__ky2$048 = $149;$__n_does_match$546 = $__n_does_match$6;$__st$247 = $150;
   }
  }
 }
 if ((label|0) == 5) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $lpad$phi$index = $11;$lpad$phi$index3 = $12;
 }
 else if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 else if ((label|0) == 65) {
  $152 = ($70|0)==(0|0);
  do {
   if ($152) {
    $166 = 0;
    label = 71;
   } else {
    $153 = (($70) + 12|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = (($70) + 16|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($154|0)==($156|0);
    if ($157) {
     $158 = HEAP32[$70>>2]|0;
     $159 = (($158) + 36|0);
     $160 = HEAP32[$159>>2]|0;
     __THREW__ = 0;
     $161 = (invoke_ii($160|0,($70|0))|0);
     $162 = __THREW__; __THREW__ = 0;
     $163 = $162&1;
     if (!($163)) {
      $164 = ($161|0)==(-1);
      if ($164) {
       HEAP32[$__b>>2] = 0;
       $166 = 0;
       label = 71;
       break;
      } else {
       $$pre$i$i$i13 = HEAP32[$__b>>2]|0;
       $166 = $$pre$i$i$i13;
       label = 71;
       break;
      }
     }
    } else {
     $166 = $70;
     label = 71;
    }
   }
  } while(0);
  L90: do {
   if ((label|0) == 71) {
    $165 = ($166|0)==(0|0);
    do {
     if ($68) {
      label = 77;
     } else {
      $167 = (($$pre$i2$i$i17) + 12|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = (($$pre$i2$i$i17) + 16|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($168|0)==($170|0);
      if (!($171)) {
       if ($165) {
        break;
       } else {
        label = 79;
        break;
       }
      }
      $172 = HEAP32[$$pre$i2$i$i17>>2]|0;
      $173 = (($172) + 36|0);
      $174 = HEAP32[$173>>2]|0;
      __THREW__ = 0;
      $175 = (invoke_ii($174|0,($$pre$i2$i$i17|0))|0);
      $176 = __THREW__; __THREW__ = 0;
      $177 = $176&1;
      if ($177) {
       break L90;
      }
      $178 = ($175|0)==(-1);
      if ($178) {
       HEAP32[$__e>>2] = 0;
       label = 77;
       break;
      } else {
       if ($165) {
        break;
       } else {
        label = 79;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 77) {
     if ($165) {
      label = 79;
     }
    }
    if ((label|0) == 79) {
     $179 = HEAP32[$__err>>2]|0;
     $180 = $179 | 2;
     HEAP32[$__err>>2] = $180;
    }
    L106: do {
     if ($23) {
      label = 83;
     } else {
      $$027 = $__kb;$__st$326 = $__status$0;
      while(1) {
       $181 = HEAP8[$__st$326>>0]|0;
       $182 = ($181<<24>>24)==(2);
       if ($182) {
        $$025 = $$027;
        break L106;
       }
       $183 = (($$027) + 12|0);
       $184 = (($__st$326) + 1|0);
       $185 = ($183|0)==($__ke|0);
       if ($185) {
        label = 83;
        break;
       } else {
        $$027 = $183;$__st$326 = $184;
       }
      }
     }
    } while(0);
    if ((label|0) == 83) {
     $186 = HEAP32[$__err>>2]|0;
     $187 = $186 | 4;
     HEAP32[$__err>>2] = $187;
     $$025 = $__ke;
    }
    $188 = ($18|0)==(0|0);
    if ($188) {
     STACKTOP = sp;return ($$025|0);
    }
    __THREW__ = 0;
    invoke_vi(489,($18|0));
    $189 = __THREW__; __THREW__ = 0;
    $190 = $189&1;
    if ($190) {
     $191 = ___cxa_find_matching_catch(0|0)|0;
     $192 = tempRet0;
     ___clang_call_terminate($191);
     // unreachable;
    } else {
     STACKTOP = sp;return ($$025|0);
    }
   }
  } while(0);
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $lpad$phi$index = $15;$lpad$phi$index3 = $16;
 }
 $17 = ($18|0)==(0|0);
 if ($17) {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(489,($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(417,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(574,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if (!($123)) {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($26|0)==(0|0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = (($26) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($26) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$26>>2]|0;
      $132 = (($131) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($26|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $139 = 0;
      } else {
       $139 = $26;
      }
     } else {
      $139 = $26;
     }
    }
    $138 = ($139|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 61;
     } else {
      $141 = (($$pre$i2$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i2$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if (!($145)) {
       if (!($138)) {
        break;
       }
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $146 = HEAP32[$$pre$i2$i$i>>2]|0;
      $147 = (($146) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      __THREW__ = 0;
      $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
      $150 = __THREW__; __THREW__ = 0;
      $151 = $150&1;
      if ($151) {
       break L1;
      }
      $152 = ($149|0)==(-1);
      if ($152) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $153 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $138 ^ $153;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($138)) {
      HEAP32[$agg$result>>2] = $139;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $139;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(417,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $161 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $161 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(575,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = tempRet0;
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if (!($124)) {
    $125 = $__v;
    $126 = $125;
    HEAP32[$126>>2] = $121;
    $127 = (($125) + 4)|0;
    $128 = $127;
    HEAP32[$128>>2] = $122;
    $129 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$129,$__err);
    $130 = ($26|0)==(0|0);
    if ($130) {
     $144 = 0;
    } else {
     $131 = (($26) + 12|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($26) + 16|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($132|0)==($134|0);
     if ($135) {
      $136 = HEAP32[$26>>2]|0;
      $137 = (($136) + 36|0);
      $138 = HEAP32[$137>>2]|0;
      __THREW__ = 0;
      $139 = (invoke_ii($138|0,($26|0))|0);
      $140 = __THREW__; __THREW__ = 0;
      $141 = $140&1;
      if ($141) {
       break;
      }
      $142 = ($139|0)==(-1);
      if ($142) {
       HEAP32[$__b>>2] = 0;
       $144 = 0;
      } else {
       $144 = $26;
      }
     } else {
      $144 = $26;
     }
    }
    $143 = ($144|0)==(0|0);
    $145 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($145) {
      label = 61;
     } else {
      $146 = (($$pre$i2$i$i) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (($$pre$i2$i$i) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if (!($150)) {
       if (!($143)) {
        break;
       }
       HEAP32[$agg$result>>2] = $144;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $151 = HEAP32[$$pre$i2$i$i>>2]|0;
      $152 = (($151) + 36|0);
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = (invoke_ii($153|0,($$pre$i2$i$i|0))|0);
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      if ($156) {
       break L1;
      }
      $157 = ($154|0)==(-1);
      if ($157) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $158 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $143 ^ $158;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $144;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($143)) {
      HEAP32[$agg$result>>2] = $144;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $159 = HEAP32[$__err>>2]|0;
    $160 = $159 | 2;
    HEAP32[$__err>>2] = $160;
    HEAP32[$agg$result>>2] = $144;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(417,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(576,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if (!($123)) {
    HEAP16[$__v>>1] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($26|0)==(0|0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = (($26) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($26) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$26>>2]|0;
      $132 = (($131) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($26|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $139 = 0;
      } else {
       $139 = $26;
      }
     } else {
      $139 = $26;
     }
    }
    $138 = ($139|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 61;
     } else {
      $141 = (($$pre$i2$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i2$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if (!($145)) {
       if (!($138)) {
        break;
       }
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $146 = HEAP32[$$pre$i2$i$i>>2]|0;
      $147 = (($146) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      __THREW__ = 0;
      $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
      $150 = __THREW__; __THREW__ = 0;
      $151 = $150&1;
      if ($151) {
       break L1;
      }
      $152 = ($149|0)==(-1);
      if ($152) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $153 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $138 ^ $153;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($138)) {
      HEAP32[$agg$result>>2] = $139;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $139;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(417,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(577,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if (!($123)) {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($26|0)==(0|0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = (($26) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($26) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$26>>2]|0;
      $132 = (($131) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($26|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $139 = 0;
      } else {
       $139 = $26;
      }
     } else {
      $139 = $26;
     }
    }
    $138 = ($139|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 61;
     } else {
      $141 = (($$pre$i2$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i2$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if (!($145)) {
       if (!($138)) {
        break;
       }
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $146 = HEAP32[$$pre$i2$i$i>>2]|0;
      $147 = (($146) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      __THREW__ = 0;
      $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
      $150 = __THREW__; __THREW__ = 0;
      $151 = $150&1;
      if ($151) {
       break L1;
      }
      $152 = ($149|0)==(-1);
      if ($152) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $153 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $138 ^ $153;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($138)) {
      HEAP32[$agg$result>>2] = $139;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $139;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(417,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(578,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if (!($123)) {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($26|0)==(0|0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = (($26) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($26) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$26>>2]|0;
      $132 = (($131) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($26|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $139 = 0;
      } else {
       $139 = $26;
      }
     } else {
      $139 = $26;
     }
    }
    $138 = ($139|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 61;
     } else {
      $141 = (($$pre$i2$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i2$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if (!($145)) {
       if (!($138)) {
        break;
       }
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $146 = HEAP32[$$pre$i2$i$i>>2]|0;
      $147 = (($146) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      __THREW__ = 0;
      $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
      $150 = __THREW__; __THREW__ = 0;
      $151 = $150&1;
      if ($151) {
       break L1;
      }
      $152 = ($149|0)==(-1);
      if ($152) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $153 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $138 ^ $153;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($138)) {
      HEAP32[$agg$result>>2] = $139;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $139;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(417,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $161 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $161 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(579,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = tempRet0;
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if (!($124)) {
    $125 = $__v;
    $126 = $125;
    HEAP32[$126>>2] = $121;
    $127 = (($125) + 4)|0;
    $128 = $127;
    HEAP32[$128>>2] = $122;
    $129 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$129,$__err);
    $130 = ($26|0)==(0|0);
    if ($130) {
     $144 = 0;
    } else {
     $131 = (($26) + 12|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($26) + 16|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($132|0)==($134|0);
     if ($135) {
      $136 = HEAP32[$26>>2]|0;
      $137 = (($136) + 36|0);
      $138 = HEAP32[$137>>2]|0;
      __THREW__ = 0;
      $139 = (invoke_ii($138|0,($26|0))|0);
      $140 = __THREW__; __THREW__ = 0;
      $141 = $140&1;
      if ($141) {
       break;
      }
      $142 = ($139|0)==(-1);
      if ($142) {
       HEAP32[$__b>>2] = 0;
       $144 = 0;
      } else {
       $144 = $26;
      }
     } else {
      $144 = $26;
     }
    }
    $143 = ($144|0)==(0|0);
    $145 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($145) {
      label = 61;
     } else {
      $146 = (($$pre$i2$i$i) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (($$pre$i2$i$i) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if (!($150)) {
       if (!($143)) {
        break;
       }
       HEAP32[$agg$result>>2] = $144;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $151 = HEAP32[$$pre$i2$i$i>>2]|0;
      $152 = (($151) + 36|0);
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = (invoke_ii($153|0,($$pre$i2$i$i|0))|0);
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      if ($156) {
       break L1;
      }
      $157 = ($154|0)==(-1);
      if ($157) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $158 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $143 ^ $158;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $144;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($143)) {
      HEAP32[$agg$result>>2] = $144;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $159 = HEAP32[$__err>>2]|0;
    $160 = $159 | 2;
    HEAP32[$__err>>2] = $160;
    HEAP32[$agg$result>>2] = $144;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $$pre$phi31Z2D = 0, $$pre$phi33Z2D = 0, $$pre30 = 0, $$pre32 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i20 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 240|0;
 $__grouping = sp;
 $__buf = sp + 188|0;
 $__a_end = sp + 184|0;
 $__g = sp + 16|0;
 $__g_end = sp + 176|0;
 $__dc = sp + 180|0;
 $__in_units = sp + 241|0;
 $__exp = sp + 242|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(417,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre32 = (($__buf) + 8|0);
    $$pre$phi31Z2D = $7;$$pre$phi33Z2D = $$pre32;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre30 = (($__buf) + 1|0);
    $$pre$phi31Z2D = $$pre30;$$pre$phi33Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point>>0]|0;
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i5;
      }
     } else {
      $26 = $$pre$i$i$i5;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i20 = (($64) + -1)|0;
      $65 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi31Z2D;
     } else {
      $71 = HEAP32[$$pre$phi33Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i5 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i5 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $111 | $114;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = (($115) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(580,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if (!($125)) {
    HEAPF32[$__v>>2] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($26|0)==(0|0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = (($26) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($26) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$26>>2]|0;
      $134 = (($133) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($26|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $141 = 0;
      } else {
       $141 = $26;
      }
     } else {
      $141 = $26;
     }
    }
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 61;
     } else {
      $143 = (($$pre$i2$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i2$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if (!($147)) {
       if (!($140)) {
        break;
       }
       HEAP32[$agg$result>>2] = $141;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $148 = HEAP32[$$pre$i2$i$i>>2]|0;
      $149 = (($148) + 36|0);
      $150 = HEAP32[$149>>2]|0;
      __THREW__ = 0;
      $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
      $152 = __THREW__; __THREW__ = 0;
      $153 = $152&1;
      if ($153) {
       break L1;
      }
      $154 = ($151|0)==(-1);
      if ($154) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $155 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $140 ^ $155;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $141;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($140)) {
      HEAP32[$agg$result>>2] = $141;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $141;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $$pre$phi31Z2D = 0, $$pre$phi33Z2D = 0, $$pre30 = 0, $$pre32 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i20 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 240|0;
 $__grouping = sp;
 $__buf = sp + 188|0;
 $__a_end = sp + 184|0;
 $__g = sp + 16|0;
 $__g_end = sp + 176|0;
 $__dc = sp + 180|0;
 $__in_units = sp + 241|0;
 $__exp = sp + 242|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(417,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre32 = (($__buf) + 8|0);
    $$pre$phi31Z2D = $7;$$pre$phi33Z2D = $$pre32;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre30 = (($__buf) + 1|0);
    $$pre$phi31Z2D = $$pre30;$$pre$phi33Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point>>0]|0;
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i5;
      }
     } else {
      $26 = $$pre$i$i$i5;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i20 = (($64) + -1)|0;
      $65 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi31Z2D;
     } else {
      $71 = HEAP32[$$pre$phi33Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i5 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i5 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $111 | $114;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = (($115) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(581,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if (!($125)) {
    HEAPF64[$__v>>3] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($26|0)==(0|0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = (($26) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($26) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$26>>2]|0;
      $134 = (($133) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($26|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $141 = 0;
      } else {
       $141 = $26;
      }
     } else {
      $141 = $26;
     }
    }
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 61;
     } else {
      $143 = (($$pre$i2$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i2$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if (!($147)) {
       if (!($140)) {
        break;
       }
       HEAP32[$agg$result>>2] = $141;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $148 = HEAP32[$$pre$i2$i$i>>2]|0;
      $149 = (($148) + 36|0);
      $150 = HEAP32[$149>>2]|0;
      __THREW__ = 0;
      $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
      $152 = __THREW__; __THREW__ = 0;
      $153 = $152&1;
      if ($153) {
       break L1;
      }
      $154 = ($151|0)==(-1);
      if ($154) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $155 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $140 ^ $155;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $141;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($140)) {
      HEAP32[$agg$result>>2] = $141;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $141;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $$pre$phi31Z2D = 0, $$pre$phi33Z2D = 0, $$pre30 = 0, $$pre32 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i20 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 240|0;
 $__grouping = sp;
 $__buf = sp + 188|0;
 $__a_end = sp + 184|0;
 $__g = sp + 16|0;
 $__g_end = sp + 176|0;
 $__dc = sp + 180|0;
 $__in_units = sp + 241|0;
 $__exp = sp + 242|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(417,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre32 = (($__buf) + 8|0);
    $$pre$phi31Z2D = $7;$$pre$phi33Z2D = $$pre32;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre30 = (($__buf) + 1|0);
    $$pre$phi31Z2D = $$pre30;$$pre$phi33Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point>>0]|0;
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i5;
      }
     } else {
      $26 = $$pre$i$i$i5;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i20 = (($64) + -1)|0;
      $65 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi31Z2D;
     } else {
      $71 = HEAP32[$$pre$phi33Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i5 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i5 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $111 | $114;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = (($115) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(582,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if (!($125)) {
    HEAPF64[$__v>>3] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($26|0)==(0|0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = (($26) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($26) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$26>>2]|0;
      $134 = (($133) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($26|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $141 = 0;
      } else {
       $141 = $26;
      }
     } else {
      $141 = $26;
     }
    }
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 61;
     } else {
      $143 = (($$pre$i2$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i2$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if (!($147)) {
       if (!($140)) {
        break;
       }
       HEAP32[$agg$result>>2] = $141;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $148 = HEAP32[$$pre$i2$i$i>>2]|0;
      $149 = (($148) + 36|0);
      $150 = HEAP32[$149>>2]|0;
      __THREW__ = 0;
      $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
      $152 = __THREW__; __THREW__ = 0;
      $153 = $152&1;
      if ($153) {
       break L1;
      }
      $154 = ($151|0)==(-1);
      if ($154) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $155 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $140 ^ $155;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $141;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($140)) {
      HEAP32[$agg$result>>2] = $141;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $141;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsscanf($__s,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 __THREW__ = 0;
 (invoke_ii(497,($0|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  STACKTOP = sp;return ($1|0);
 }
 return 0|0;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i12 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i18 = 0, $$029 = 0, $$031 = 0, $$index = 0, $$index10 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i14 = 0, $$pre$i3$i$i20 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off040 = 0, $__consume$1$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$067 = 0, $__ky1$041 = 0, $__ky2$052 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$065 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0;
 var $__n_does_match$2$phi = 0, $__n_does_match$337 = 0, $__n_does_match$4 = 0, $__n_does_match$550 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$064 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$2$phi = 0, $__n_might_match$336 = 0, $__n_might_match$4 = 0, $__st$066 = 0, $__st$138 = 0, $__st$251 = 0, $__st$330 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0;
 var $or$cond = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i15 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __THREW__ = 0;
   invoke_v(487);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    $$index = $9;$$index10 = $10;
    ___resumeException($$index|0);
    // unreachable;
   } else {
    $18 = 0;$__status$0 = 0;
   }
  } else {
   $18 = $5;$__status$0 = $5;
  }
 } else {
  $18 = 0;$__status$0 = $__statbuf;
 }
 $23 = ($__kb|0)==($__ke|0);
 if ($23) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
 } else {
  $__ky$067 = $__kb;$__n_does_match$065 = 0;$__n_might_match$064 = $3;$__st$066 = $__status$0;
  while(1) {
   $24 = HEAP8[$__ky$067>>0]|0;
   $25 = $24 & 1;
   $26 = ($25<<24>>24)==(0);
   if ($26) {
    $29 = $24&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $27 = (($__ky$067) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    HEAP8[$__st$066>>0] = 2;
    $33 = (($__n_might_match$064) + -1)|0;
    $34 = (($__n_does_match$065) + 1)|0;
    $__n_does_match$1 = $34;$__n_might_match$1 = $33;
   } else {
    HEAP8[$__st$066>>0] = 1;
    $__n_does_match$1 = $__n_does_match$065;$__n_might_match$1 = $__n_might_match$064;
   }
   $35 = (($__ky$067) + 12|0);
   $36 = (($__st$066) + 1|0);
   $37 = ($35|0)==($__ke|0);
   if ($37) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$067 = $35;$__n_does_match$065 = $__n_does_match$1;$__n_might_match$064 = $__n_might_match$1;$__st$066 = $36;
   }
  }
 }
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L19: while(1) {
  $38 = HEAP32[$__b>>2]|0;
  $39 = ($38|0)==(0|0);
  do {
   if ($39) {
    $68 = 1;
   } else {
    $40 = (($38) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($38) + 16|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($41|0)==($43|0);
    if ($44) {
     $45 = HEAP32[$38>>2]|0;
     $46 = (($45) + 36|0);
     $47 = HEAP32[$46>>2]|0;
     __THREW__ = 0;
     $48 = (invoke_ii($47|0,($38|0))|0);
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     if ($50) {
      label = 6;
      break L19;
     } else {
      $$0$i$i$i$i = $48;
     }
    } else {
     $51 = HEAP32[$41>>2]|0;
     $$0$i$i$i$i = $51;
    }
    $52 = ($$0$i$i$i$i|0)==(-1);
    if ($52) {
     HEAP32[$__b>>2] = 0;
     $68 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $68 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $53 = HEAP32[$__e>>2]|0;
  $54 = ($53|0)==(0|0);
  if ($54) {
   $$pre$i3$i$i20 = 0;$69 = 1;
  } else {
   $55 = (($53) + 12|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($53) + 16|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($56|0)==($58|0);
   if ($59) {
    $60 = HEAP32[$53>>2]|0;
    $61 = (($60) + 36|0);
    $62 = HEAP32[$61>>2]|0;
    __THREW__ = 0;
    $63 = (invoke_ii($62|0,($53|0))|0);
    $64 = __THREW__; __THREW__ = 0;
    $65 = $64&1;
    if ($65) {
     label = 6;
     break;
    } else {
     $$0$i$i1$i$i = $63;
    }
   } else {
    $66 = HEAP32[$56>>2]|0;
    $$0$i$i1$i$i = $66;
   }
   $67 = ($$0$i$i1$i$i|0)==(-1);
   if ($67) {
    HEAP32[$__e>>2] = 0;
    $$pre$i3$i$i20 = 0;$69 = 1;
   } else {
    $$pre$i3$i$i20 = $53;$69 = 0;
   }
  }
  $tmp$i$i = $68 ^ $69;
  $70 = ($__n_might_match$2|0)!=(0);
  $or$cond = $tmp$i$i & $70;
  $71 = HEAP32[$__b>>2]|0;
  if (!($or$cond)) {
   label = 67;
   break;
  }
  $72 = (($71) + 12|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($71) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($73|0)==($75|0);
  if ($76) {
   $77 = HEAP32[$71>>2]|0;
   $78 = (($77) + 36|0);
   $79 = HEAP32[$78>>2]|0;
   __THREW__ = 0;
   $80 = (invoke_ii($79|0,($71|0))|0);
   $81 = __THREW__; __THREW__ = 0;
   $82 = $81&1;
   if ($82) {
    label = 6;
    break;
   } else {
    $$0$i$i = $80;
   }
  } else {
   $83 = HEAP32[$73>>2]|0;
   $$0$i$i = $83;
  }
  if ($__case_sensitive) {
   $__c$0 = $$0$i$i;
  } else {
   $84 = HEAP32[$__ct>>2]|0;
   $85 = (($84) + 28|0);
   $86 = HEAP32[$85>>2]|0;
   __THREW__ = 0;
   $87 = (invoke_iii($86|0,($__ct|0),($$0$i$i|0))|0);
   $88 = __THREW__; __THREW__ = 0;
   $89 = $88&1;
   if ($89) {
    label = 6;
    break;
   } else {
    $__c$0 = $87;
   }
  }
  $$pre = (($__indx$0) + 1)|0;
  if ($23) {
   $__n_might_match$2$phi = $__n_might_match$2;$__n_does_match$2$phi = $__n_does_match$2;$__indx$0 = $$pre;$__n_might_match$2 = $__n_might_match$2$phi;$__n_does_match$2 = $__n_does_match$2$phi;
   continue;
  } else {
   $__consume$0$off040 = 0;$__ky1$041 = $__kb;$__n_does_match$337 = $__n_does_match$2;$__n_might_match$336 = $__n_might_match$2;$__st$138 = $__status$0;
  }
  while(1) {
   $90 = HEAP8[$__st$138>>0]|0;
   $91 = ($90<<24>>24)==(1);
   do {
    if ($91) {
     $92 = HEAP8[$__ky1$041>>0]|0;
     $93 = $92 & 1;
     $94 = ($93<<24>>24)==(0);
     if ($94) {
      $97 = (($__ky1$041) + 4|0);
      $99 = $97;
     } else {
      $95 = (($__ky1$041) + 8|0);
      $96 = HEAP32[$95>>2]|0;
      $99 = $96;
     }
     $98 = (($99) + ($__indx$0<<2)|0);
     $100 = HEAP32[$98>>2]|0;
     if ($__case_sensitive) {
      $__kc$0 = $100;
     } else {
      $101 = HEAP32[$__ct>>2]|0;
      $102 = (($101) + 28|0);
      $103 = HEAP32[$102>>2]|0;
      __THREW__ = 0;
      $104 = (invoke_iii($103|0,($__ct|0),($100|0))|0);
      $105 = __THREW__; __THREW__ = 0;
      $106 = $105&1;
      if ($106) {
       label = 5;
       break L19;
      } else {
       $__kc$0 = $104;
      }
     }
     $107 = ($__c$0|0)==($__kc$0|0);
     if (!($107)) {
      HEAP8[$__st$138>>0] = 0;
      $119 = (($__n_might_match$336) + -1)|0;
      $__consume$1$off0 = $__consume$0$off040;$__n_does_match$4 = $__n_does_match$337;$__n_might_match$4 = $119;
      break;
     }
     $108 = HEAP8[$__ky1$041>>0]|0;
     $109 = $108 & 1;
     $110 = ($109<<24>>24)==(0);
     if ($110) {
      $113 = $108&255;
      $114 = $113 >>> 1;
      $116 = $114;
     } else {
      $111 = (($__ky1$041) + 4|0);
      $112 = HEAP32[$111>>2]|0;
      $116 = $112;
     }
     $115 = ($116|0)==($$pre|0);
     if ($115) {
      HEAP8[$__st$138>>0] = 2;
      $117 = (($__n_might_match$336) + -1)|0;
      $118 = (($__n_does_match$337) + 1)|0;
      $__consume$1$off0 = 1;$__n_does_match$4 = $118;$__n_might_match$4 = $117;
     } else {
      $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$337;$__n_might_match$4 = $__n_might_match$336;
     }
    } else {
     $__consume$1$off0 = $__consume$0$off040;$__n_does_match$4 = $__n_does_match$337;$__n_might_match$4 = $__n_might_match$336;
    }
   } while(0);
   $120 = (($__ky1$041) + 12|0);
   $121 = (($__st$138) + 1|0);
   $122 = ($120|0)==($__ke|0);
   if ($122) {
    break;
   } else {
    $__consume$0$off040 = $__consume$1$off0;$__ky1$041 = $120;$__n_does_match$337 = $__n_does_match$4;$__n_might_match$336 = $__n_might_match$4;$__st$138 = $121;
   }
  }
  if (!($__consume$1$off0)) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$4;$__n_might_match$2 = $__n_might_match$4;
   continue;
  }
  $123 = HEAP32[$__b>>2]|0;
  $124 = (($123) + 12|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (($123) + 16|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ($125|0)==($127|0);
  if ($128) {
   $129 = HEAP32[$123>>2]|0;
   $130 = (($129) + 40|0);
   $131 = HEAP32[$130>>2]|0;
   __THREW__ = 0;
   (invoke_ii($131|0,($123|0))|0);
   $132 = __THREW__; __THREW__ = 0;
   $133 = $132&1;
   if ($133) {
    label = 6;
    break;
   }
  } else {
   $134 = (($125) + 4|0);
   HEAP32[$124>>2] = $134;
  }
  $135 = (($__n_does_match$4) + ($__n_might_match$4))|0;
  $$not = ($135>>>0)<(2);
  if ($$not) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$4;$__n_might_match$2 = $__n_might_match$4;
   continue;
  } else {
   $__ky2$052 = $__kb;$__n_does_match$550 = $__n_does_match$4;$__st$251 = $__status$0;
  }
  while(1) {
   $136 = HEAP8[$__st$251>>0]|0;
   $137 = ($136<<24>>24)==(2);
   if ($137) {
    $138 = HEAP8[$__ky2$052>>0]|0;
    $139 = $138 & 1;
    $140 = ($139<<24>>24)==(0);
    if ($140) {
     $143 = $138&255;
     $144 = $143 >>> 1;
     $146 = $144;
    } else {
     $141 = (($__ky2$052) + 4|0);
     $142 = HEAP32[$141>>2]|0;
     $146 = $142;
    }
    $145 = ($146|0)==($$pre|0);
    if ($145) {
     $__n_does_match$6 = $__n_does_match$550;
    } else {
     HEAP8[$__st$251>>0] = 0;
     $147 = (($__n_does_match$550) + -1)|0;
     $__n_does_match$6 = $147;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$550;
   }
   $148 = (($__ky2$052) + 12|0);
   $149 = (($__st$251) + 1|0);
   $150 = ($148|0)==($__ke|0);
   if ($150) {
    $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$4;
    continue L19;
   } else {
    $__ky2$052 = $148;$__n_does_match$550 = $__n_does_match$6;$__st$251 = $149;
   }
  }
 }
 if ((label|0) == 5) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $lpad$phi$index = $11;$lpad$phi$index3 = $12;
 }
 else if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 else if ((label|0) == 67) {
  $151 = ($71|0)==(0|0);
  do {
   if ($151) {
    $193 = 1;
    label = 74;
   } else {
    $152 = (($71) + 12|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = (($71) + 16|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ($153|0)==($155|0);
    if ($156) {
     $157 = HEAP32[$71>>2]|0;
     $158 = (($157) + 36|0);
     $159 = HEAP32[$158>>2]|0;
     __THREW__ = 0;
     $160 = (invoke_ii($159|0,($71|0))|0);
     $161 = __THREW__; __THREW__ = 0;
     $162 = $161&1;
     if ($162) {
      break;
     } else {
      $$0$i$i$i$i12 = $160;
     }
    } else {
     $163 = HEAP32[$153>>2]|0;
     $$0$i$i$i$i12 = $163;
    }
    $164 = ($$0$i$i$i$i12|0)==(-1);
    if ($164) {
     HEAP32[$__b>>2] = 0;
     $193 = 1;
     label = 74;
     break;
    } else {
     $$pre$i$i$i14 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i15 = ($$pre$i$i$i14|0)==(0|0);
     $193 = $phitmp$i$i$i15;
     label = 74;
     break;
    }
   }
  } while(0);
  L96: do {
   if ((label|0) == 74) {
    $165 = ($$pre$i3$i$i20|0)==(0|0);
    do {
     if ($165) {
      label = 80;
     } else {
      $166 = (($$pre$i3$i$i20) + 12|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = (($$pre$i3$i$i20) + 16|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = ($167|0)==($169|0);
      if ($170) {
       $171 = HEAP32[$$pre$i3$i$i20>>2]|0;
       $172 = (($171) + 36|0);
       $173 = HEAP32[$172>>2]|0;
       __THREW__ = 0;
       $174 = (invoke_ii($173|0,($$pre$i3$i$i20|0))|0);
       $175 = __THREW__; __THREW__ = 0;
       $176 = $175&1;
       if ($176) {
        break L96;
       } else {
        $$0$i$i1$i$i18 = $174;
       }
      } else {
       $177 = HEAP32[$167>>2]|0;
       $$0$i$i1$i$i18 = $177;
      }
      $178 = ($$0$i$i1$i$i18|0)==(-1);
      if ($178) {
       HEAP32[$__e>>2] = 0;
       label = 80;
       break;
      } else {
       if ($193) {
        break;
       } else {
        label = 82;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 80) {
     if ($193) {
      label = 82;
     }
    }
    if ((label|0) == 82) {
     $179 = HEAP32[$__err>>2]|0;
     $180 = $179 | 2;
     HEAP32[$__err>>2] = $180;
    }
    L112: do {
     if ($23) {
      label = 86;
     } else {
      $$031 = $__kb;$__st$330 = $__status$0;
      while(1) {
       $181 = HEAP8[$__st$330>>0]|0;
       $182 = ($181<<24>>24)==(2);
       if ($182) {
        $$029 = $$031;
        break L112;
       }
       $183 = (($$031) + 12|0);
       $184 = (($__st$330) + 1|0);
       $185 = ($183|0)==($__ke|0);
       if ($185) {
        label = 86;
        break;
       } else {
        $$031 = $183;$__st$330 = $184;
       }
      }
     }
    } while(0);
    if ((label|0) == 86) {
     $186 = HEAP32[$__err>>2]|0;
     $187 = $186 | 4;
     HEAP32[$__err>>2] = $187;
     $$029 = $__ke;
    }
    $188 = ($18|0)==(0|0);
    if ($188) {
     STACKTOP = sp;return ($$029|0);
    }
    __THREW__ = 0;
    invoke_vi(489,($18|0));
    $189 = __THREW__; __THREW__ = 0;
    $190 = $189&1;
    if ($190) {
     $191 = ___cxa_find_matching_catch(0|0)|0;
     $192 = tempRet0;
     ___clang_call_terminate($191);
     // unreachable;
    } else {
     STACKTOP = sp;return ($$029|0);
    }
   }
  } while(0);
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $lpad$phi$index = $15;$lpad$phi$index3 = $16;
 }
 $17 = ($18|0)==(0|0);
 if ($17) {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(489,($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(417,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $155 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $155 = 1;$80 = 0;
     } else {
      $155 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($155) {
        $156 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($155) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(574,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if (!($122)) {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($80|0)==(0|0);
    if ($124) {
     $154 = 0;$157 = 1;
    } else {
     $125 = (($80) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($80) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$80>>2]|0;
      $131 = (($130) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($80|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $154 = 0;$157 = 1;
     } else {
      $154 = $80;$157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 63;
     } else {
      $139 = (($$pre$i3$i$i) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($$pre$i3$i$i) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = (($144) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        break L1;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($157) {
       HEAP32[$agg$result>>2] = $154;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($157)) {
      HEAP32[$agg$result>>2] = $154;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $152 = HEAP32[$__err>>2]|0;
    $153 = $152 | 2;
    HEAP32[$__err>>2] = $153;
    HEAP32[$agg$result>>2] = $154;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(417,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $160 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $160 = 1;$80 = 0;
     } else {
      $160 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($160) {
        $161 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($160) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(575,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = tempRet0;
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if (!($123)) {
    $124 = $__v;
    $125 = $124;
    HEAP32[$125>>2] = $120;
    $126 = (($124) + 4)|0;
    $127 = $126;
    HEAP32[$127>>2] = $121;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($80|0)==(0|0);
    if ($129) {
     $159 = 0;$162 = 1;
    } else {
     $130 = (($80) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($80) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$80>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($80|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      } else {
       $$0$i$i$i$i = $138;
      }
     } else {
      $141 = HEAP32[$131>>2]|0;
      $$0$i$i$i$i = $141;
     }
     $142 = ($$0$i$i$i$i|0)==(-1);
     if ($142) {
      HEAP32[$__b>>2] = 0;
      $159 = 0;$162 = 1;
     } else {
      $159 = $80;$162 = 0;
     }
    }
    $143 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($143) {
      label = 63;
     } else {
      $144 = (($$pre$i3$i$i) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (($$pre$i3$i$i) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i3$i$i>>2]|0;
       $150 = (($149) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       $152 = (invoke_ii($151|0,($$pre$i3$i$i|0))|0);
       $153 = __THREW__; __THREW__ = 0;
       $154 = $153&1;
       if ($154) {
        break L1;
       } else {
        $$0$i$i1$i$i = $152;
       }
      } else {
       $155 = HEAP32[$145>>2]|0;
       $$0$i$i1$i$i = $155;
      }
      $156 = ($$0$i$i1$i$i|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($162) {
       HEAP32[$agg$result>>2] = $159;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($162)) {
      HEAP32[$agg$result>>2] = $159;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $157 = HEAP32[$__err>>2]|0;
    $158 = $157 | 2;
    HEAP32[$__err>>2] = $158;
    HEAP32[$agg$result>>2] = $159;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(417,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $155 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $155 = 1;$80 = 0;
     } else {
      $155 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($155) {
        $156 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($155) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(576,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if (!($122)) {
    HEAP16[$__v>>1] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($80|0)==(0|0);
    if ($124) {
     $154 = 0;$157 = 1;
    } else {
     $125 = (($80) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($80) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$80>>2]|0;
      $131 = (($130) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($80|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $154 = 0;$157 = 1;
     } else {
      $154 = $80;$157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 63;
     } else {
      $139 = (($$pre$i3$i$i) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($$pre$i3$i$i) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = (($144) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        break L1;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($157) {
       HEAP32[$agg$result>>2] = $154;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($157)) {
      HEAP32[$agg$result>>2] = $154;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $152 = HEAP32[$__err>>2]|0;
    $153 = $152 | 2;
    HEAP32[$__err>>2] = $153;
    HEAP32[$agg$result>>2] = $154;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(417,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $155 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $155 = 1;$80 = 0;
     } else {
      $155 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($155) {
        $156 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($155) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(577,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if (!($122)) {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($80|0)==(0|0);
    if ($124) {
     $154 = 0;$157 = 1;
    } else {
     $125 = (($80) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($80) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$80>>2]|0;
      $131 = (($130) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($80|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $154 = 0;$157 = 1;
     } else {
      $154 = $80;$157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 63;
     } else {
      $139 = (($$pre$i3$i$i) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($$pre$i3$i$i) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = (($144) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        break L1;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($157) {
       HEAP32[$agg$result>>2] = $154;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($157)) {
      HEAP32[$agg$result>>2] = $154;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $152 = HEAP32[$__err>>2]|0;
    $153 = $152 | 2;
    HEAP32[$__err>>2] = $153;
    HEAP32[$agg$result>>2] = $154;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(417,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $155 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $155 = 1;$80 = 0;
     } else {
      $155 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($155) {
        $156 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($155) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(578,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if (!($122)) {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($80|0)==(0|0);
    if ($124) {
     $154 = 0;$157 = 1;
    } else {
     $125 = (($80) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($80) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$80>>2]|0;
      $131 = (($130) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($80|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $154 = 0;$157 = 1;
     } else {
      $154 = $80;$157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 63;
     } else {
      $139 = (($$pre$i3$i$i) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($$pre$i3$i$i) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = (($144) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        break L1;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($157) {
       HEAP32[$agg$result>>2] = $154;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($157)) {
      HEAP32[$agg$result>>2] = $154;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $152 = HEAP32[$__err>>2]|0;
    $153 = $152 | 2;
    HEAP32[$__err>>2] = $153;
    HEAP32[$agg$result>>2] = $154;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(417,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $160 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $160 = 1;$80 = 0;
     } else {
      $160 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($160) {
        $161 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($160) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(579,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = tempRet0;
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if (!($123)) {
    $124 = $__v;
    $125 = $124;
    HEAP32[$125>>2] = $120;
    $126 = (($124) + 4)|0;
    $127 = $126;
    HEAP32[$127>>2] = $121;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($80|0)==(0|0);
    if ($129) {
     $159 = 0;$162 = 1;
    } else {
     $130 = (($80) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($80) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$80>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($80|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      } else {
       $$0$i$i$i$i = $138;
      }
     } else {
      $141 = HEAP32[$131>>2]|0;
      $$0$i$i$i$i = $141;
     }
     $142 = ($$0$i$i$i$i|0)==(-1);
     if ($142) {
      HEAP32[$__b>>2] = 0;
      $159 = 0;$162 = 1;
     } else {
      $159 = $80;$162 = 0;
     }
    }
    $143 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($143) {
      label = 63;
     } else {
      $144 = (($$pre$i3$i$i) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (($$pre$i3$i$i) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i3$i$i>>2]|0;
       $150 = (($149) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       $152 = (invoke_ii($151|0,($$pre$i3$i$i|0))|0);
       $153 = __THREW__; __THREW__ = 0;
       $154 = $153&1;
       if ($154) {
        break L1;
       } else {
        $$0$i$i1$i$i = $152;
       }
      } else {
       $155 = HEAP32[$145>>2]|0;
       $$0$i$i1$i$i = $155;
      }
      $156 = ($$0$i$i1$i$i|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($162) {
       HEAP32[$agg$result>>2] = $159;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($162)) {
      HEAP32[$agg$result>>2] = $159;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $157 = HEAP32[$__err>>2]|0;
    $158 = $157 | 2;
    HEAP32[$__err>>2] = $158;
    HEAP32[$agg$result>>2] = $159;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0;
 var $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 184|0;
 $__thousands_sep = sp + 4|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 196|0;
 $__a_end = sp;
 $__g = sp + 24|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(417,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $7;$$pre$phi36Z2D = $$pre35;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i6|0)==(0|0);
    if ($12) {
     $157 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i6) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i6) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i6>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i6|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i4 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i4 = $24;
     }
     $25 = ($$0$i$i$i$i4|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;$80 = 0;
     } else {
      $157 = 0;$80 = $$pre$i$i$i6;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i10 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i10 = $39;
      }
      $40 = ($$0$i$i1$i$i10|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($157) {
        $158 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($157) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i24 = (($64) + -1)|0;
      $65 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi34Z2D;
     } else {
      $71 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $110 | $113;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = (($114) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(580,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if (!($124)) {
    HEAPF32[$__v>>2] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($80|0)==(0|0);
    if ($126) {
     $156 = 0;$159 = 1;
    } else {
     $127 = (($80) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($80) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$80>>2]|0;
      $133 = (($132) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($80|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $156 = 0;$159 = 1;
     } else {
      $156 = $80;$159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 63;
     } else {
      $141 = (($$pre$i3$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i3$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = (($146) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        break L1;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($159) {
       HEAP32[$agg$result>>2] = $156;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($159)) {
      HEAP32[$agg$result>>2] = $156;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $156;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0;
 var $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 184|0;
 $__thousands_sep = sp + 4|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 196|0;
 $__a_end = sp;
 $__g = sp + 24|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(417,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $7;$$pre$phi36Z2D = $$pre35;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i6|0)==(0|0);
    if ($12) {
     $157 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i6) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i6) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i6>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i6|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i4 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i4 = $24;
     }
     $25 = ($$0$i$i$i$i4|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;$80 = 0;
     } else {
      $157 = 0;$80 = $$pre$i$i$i6;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i10 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i10 = $39;
      }
      $40 = ($$0$i$i1$i$i10|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($157) {
        $158 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($157) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i24 = (($64) + -1)|0;
      $65 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi34Z2D;
     } else {
      $71 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $110 | $113;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = (($114) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(581,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if (!($124)) {
    HEAPF64[$__v>>3] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($80|0)==(0|0);
    if ($126) {
     $156 = 0;$159 = 1;
    } else {
     $127 = (($80) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($80) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$80>>2]|0;
      $133 = (($132) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($80|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $156 = 0;$159 = 1;
     } else {
      $156 = $80;$159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 63;
     } else {
      $141 = (($$pre$i3$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i3$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = (($146) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        break L1;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($159) {
       HEAP32[$agg$result>>2] = $156;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($159)) {
      HEAP32[$agg$result>>2] = $156;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $156;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0;
 var $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 184|0;
 $__thousands_sep = sp + 4|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 196|0;
 $__a_end = sp;
 $__g = sp + 24|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(417,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $7;$$pre$phi36Z2D = $$pre35;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i6|0)==(0|0);
    if ($12) {
     $157 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i6) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i6) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i6>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i6|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i4 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i4 = $24;
     }
     $25 = ($$0$i$i$i$i4|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;$80 = 0;
     } else {
      $157 = 0;$80 = $$pre$i$i$i6;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i10 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i10 = $39;
      }
      $40 = ($$0$i$i1$i$i10|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($157) {
        $158 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($157) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i24 = (($64) + -1)|0;
      $65 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(417,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi34Z2D;
     } else {
      $71 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $110 | $113;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = (($114) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(582,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if (!($124)) {
    HEAPF64[$__v>>3] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($80|0)==(0|0);
    if ($126) {
     $156 = 0;$159 = 1;
    } else {
     $127 = (($80) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($80) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$80>>2]|0;
      $133 = (($132) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($80|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $156 = 0;$159 = 1;
     } else {
      $156 = $80;$159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 63;
     } else {
      $141 = (($$pre$i3$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i3$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = (($146) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        break L1;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($159) {
       HEAP32[$agg$result>>2] = $156;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($159)) {
      HEAP32[$agg$result>>2] = $156;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $156;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsnprintf($__s,$__n,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 __THREW__ = 0;
 (invoke_ii(497,($0|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  STACKTOP = sp;return ($1|0);
 }
 return 0|0;
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 __THREW__ = 0;
 $1 = (invoke_iiii(583,($__s|0),($__format|0),($__va|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = ($0|0)==(0|0);
  if ($11) {
   ___resumeException($9|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(497,($0|0))|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $14 = ___cxa_find_matching_catch(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   ___resumeException($9|0);
   // unreachable;
  }
 } else {
  $4 = ($0|0)==(0|0);
  if ($4) {
   STACKTOP = sp;return ($1|0);
  }
  __THREW__ = 0;
  (invoke_ii(497,($0|0))|0);
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   $7 = ___cxa_find_matching_catch(0|0)|0;
   $8 = tempRet0;
   ___clang_call_terminate($7);
   // unreachable;
  } else {
   STACKTOP = sp;return ($1|0);
  }
 }
 return 0|0;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$agg$result>>2] = 0;
  STACKTOP = sp;return;
 }
 $2 = $__oe;
 $3 = $__ob;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 $6 = (($__iob) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>($5|0);
 $9 = (($7) - ($5))|0;
 $__ns$0 = $8 ? $9 : 0;
 $10 = $__op;
 $11 = (($10) - ($3))|0;
 $12 = $11 >> 2;
 $13 = ($11|0)>(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $15 = (($14) + 48|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_iiii[$16 & 1023]($0,$__ob,$12)|0);
  $18 = ($17|0)==($12|0);
  if (!($18)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $19 = ($__ns$0|0)>(0);
 do {
  if ($19) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns$0,$__fl);
   $20 = HEAP8[$__sp>>0]|0;
   $21 = $20 & 1;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    $25 = (($__sp) + 4|0);
    $29 = $25;
   } else {
    $23 = (($__sp) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $29 = $24;
   }
   $26 = HEAP32[$0>>2]|0;
   $27 = (($26) + 48|0);
   $28 = HEAP32[$27>>2]|0;
   __THREW__ = 0;
   $30 = (invoke_iiii($28|0,($0|0),($29|0),($__ns$0|0))|0);
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    $34 = ___cxa_find_matching_catch()|0;
    $35 = tempRet0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
    ___resumeException($34|0);
    // unreachable;
   }
   $33 = ($30|0)==($__ns$0|0);
   if ($33) {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
    break;
   }
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
   STACKTOP = sp;return;
  }
 } while(0);
 $36 = (($2) - ($10))|0;
 $37 = $36 >> 2;
 $38 = ($36|0)>(0);
 if ($38) {
  $39 = HEAP32[$0>>2]|0;
  $40 = (($39) + 48|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($0,$__op,$37)|0);
  $43 = ($42|0)==($37|0);
  if (!($43)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$6>>2] = 0;
 HEAP32[$agg$result>>2] = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i11 = 0, $$0$in = 0, $$02 = 0, $$pre$i$i$i = 0, $$pre$i$i$i17 = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i21 = 0, $$pre$i2$i$i8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $isascii1$i = 0, $isascii1$i13 = 0, $or$cond = 0, $sext = 0, $sext25 = 0, $tmp$i$i10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while(0);
 $12 = ($13|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = (($14) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($14) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = (($21) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $156 = $14;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $156 = 0;
  }
 }
 if ((label|0) == 12) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  $$02 = 0;
  STACKTOP = sp;return ($$02|0);
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP8[$30>>0]|0;
  $39 = $38&255;
  $$0$i$i = $39;
 }
 $40 = $$0$i$i&255;
 $isascii1$i = ($40<<24>>24)>(-1);
 if ($isascii1$i) {
  $sext = $$0$i$i << 24;
  $41 = $sext >> 24;
  $42 = (($__ct) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($41<<1)|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45 & 2048;
  $47 = ($46<<16>>16)==(0);
  if (!($47)) {
   $50 = HEAP32[$__ct>>2]|0;
   $51 = (($50) + 36|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (FUNCTION_TABLE_iiii[$52 & 1023]($__ct,$40,0)|0);
   $54 = $53 << 24 >> 24;
   $55 = HEAP32[$__b>>2]|0;
   $56 = (($55) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($55) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($57|0)==($59|0);
   if ($60) {
    $61 = HEAP32[$55>>2]|0;
    $62 = (($61) + 40|0);
    $63 = HEAP32[$62>>2]|0;
    (FUNCTION_TABLE_ii[$63 & 1023]($55)|0);
    $$0$in = $__n;$$pre$i2$i$i8 = $156;$80 = $156;$__r$0$in = $54;
   } else {
    $64 = (($57) + 1|0);
    HEAP32[$56>>2] = $64;
    $$0$in = $__n;$$pre$i2$i$i8 = $156;$80 = $156;$__r$0$in = $54;
   }
   while(1) {
    $__r$0 = (($__r$0$in) + -48)|0;
    $$0 = (($$0$in) + -1)|0;
    $65 = HEAP32[$__b>>2]|0;
    $66 = ($65|0)==(0|0);
    do {
     if ($66) {
      $78 = 0;
     } else {
      $67 = (($65) + 12|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (($65) + 16|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($68|0)==($70|0);
      if ($71) {
       $72 = HEAP32[$65>>2]|0;
       $73 = (($72) + 36|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = (FUNCTION_TABLE_ii[$74 & 1023]($65)|0);
       $76 = ($75|0)==(-1);
       if ($76) {
        HEAP32[$__b>>2] = 0;
        $78 = 0;
        break;
       } else {
        $$pre$i$i$i4 = HEAP32[$__b>>2]|0;
        $78 = $$pre$i$i$i4;
        break;
       }
      } else {
       $78 = $65;
      }
     }
    } while(0);
    $77 = ($78|0)==(0|0);
    $79 = ($80|0)==(0|0);
    if ($79) {
     $$pre$i2$i$i21 = $$pre$i2$i$i8;$92 = 0;
    } else {
     $81 = (($80) + 12|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (($80) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($82|0)==($84|0);
     if ($85) {
      $86 = HEAP32[$80>>2]|0;
      $87 = (($86) + 36|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (FUNCTION_TABLE_ii[$88 & 1023]($80)|0);
      $90 = ($89|0)==(-1);
      if ($90) {
       HEAP32[$__e>>2] = 0;
       $$pre$i2$i$i21 = 0;$92 = 0;
      } else {
       $$pre$i2$i$i21 = $$pre$i2$i$i8;$92 = $$pre$i2$i$i8;
      }
     } else {
      $$pre$i2$i$i21 = $$pre$i2$i$i8;$92 = $80;
     }
    }
    $91 = ($92|0)==(0|0);
    $tmp$i$i10 = $77 ^ $91;
    $93 = ($$0|0)>(0);
    $or$cond = $tmp$i$i10 & $93;
    $94 = HEAP32[$__b>>2]|0;
    if (!($or$cond)) {
     label = 40;
     break;
    }
    $95 = (($94) + 12|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (($94) + 16|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($96|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$94>>2]|0;
     $101 = (($100) + 36|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = (FUNCTION_TABLE_ii[$102 & 1023]($94)|0);
     $$0$i$i11 = $103;
    } else {
     $104 = HEAP8[$96>>0]|0;
     $105 = $104&255;
     $$0$i$i11 = $105;
    }
    $106 = $$0$i$i11&255;
    $isascii1$i13 = ($106<<24>>24)>(-1);
    if (!($isascii1$i13)) {
     $$02 = $__r$0;
     label = 52;
     break;
    }
    $sext25 = $$0$i$i11 << 24;
    $107 = $sext25 >> 24;
    $108 = HEAP32[$42>>2]|0;
    $109 = (($108) + ($107<<1)|0);
    $110 = HEAP16[$109>>1]|0;
    $111 = $110 & 2048;
    $112 = ($111<<16>>16)==(0);
    if ($112) {
     $$02 = $__r$0;
     label = 52;
     break;
    }
    $113 = ($__r$0*10)|0;
    $114 = HEAP32[$__ct>>2]|0;
    $115 = (($114) + 36|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (FUNCTION_TABLE_iiii[$116 & 1023]($__ct,$106,0)|0);
    $118 = $117 << 24 >> 24;
    $119 = (($118) + ($113))|0;
    $120 = HEAP32[$__b>>2]|0;
    $121 = (($120) + 12|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = (($120) + 16|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ($122|0)==($124|0);
    if ($125) {
     $126 = HEAP32[$120>>2]|0;
     $127 = (($126) + 40|0);
     $128 = HEAP32[$127>>2]|0;
     (FUNCTION_TABLE_ii[$128 & 1023]($120)|0);
     $$0$in = $$0;$$pre$i2$i$i8 = $$pre$i2$i$i21;$80 = $92;$__r$0$in = $119;
     continue;
    } else {
     $129 = (($122) + 1|0);
     HEAP32[$121>>2] = $129;
     $$0$in = $$0;$$pre$i2$i$i8 = $$pre$i2$i$i21;$80 = $92;$__r$0$in = $119;
     continue;
    }
   }
   if ((label|0) == 40) {
    $130 = ($94|0)==(0|0);
    do {
     if ($130) {
      $142 = 0;
     } else {
      $131 = (($94) + 12|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = (($94) + 16|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($132|0)==($134|0);
      if ($135) {
       $136 = HEAP32[$94>>2]|0;
       $137 = (($136) + 36|0);
       $138 = HEAP32[$137>>2]|0;
       $139 = (FUNCTION_TABLE_ii[$138 & 1023]($94)|0);
       $140 = ($139|0)==(-1);
       if ($140) {
        HEAP32[$__b>>2] = 0;
        $142 = 0;
        break;
       } else {
        $$pre$i$i$i17 = HEAP32[$__b>>2]|0;
        $142 = $$pre$i$i$i17;
        break;
       }
      } else {
       $142 = $94;
      }
     }
    } while(0);
    $141 = ($142|0)==(0|0);
    $143 = ($$pre$i2$i$i21|0)==(0|0);
    do {
     if ($143) {
      label = 50;
     } else {
      $144 = (($$pre$i2$i$i21) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (($$pre$i2$i$i21) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i2$i$i21>>2]|0;
       $150 = (($149) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = (FUNCTION_TABLE_ii[$151 & 1023]($$pre$i2$i$i21)|0);
       $153 = ($152|0)==(-1);
       if ($153) {
        HEAP32[$__e>>2] = 0;
        label = 50;
        break;
       }
      }
      if ($141) {
       $$02 = $__r$0;
       STACKTOP = sp;return ($$02|0);
      }
     }
    } while(0);
    if ((label|0) == 50) {
     if (!($141)) {
      $$02 = $__r$0;
      STACKTOP = sp;return ($$02|0);
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    $$02 = $__r$0;
    STACKTOP = sp;return ($$02|0);
   }
   else if ((label|0) == 52) {
    STACKTOP = sp;return ($$02|0);
   }
  }
 }
 $48 = HEAP32[$__err>>2]|0;
 $49 = $48 | 4;
 HEAP32[$__err>>2] = $49;
 $$02 = 0;
 STACKTOP = sp;return ($$02|0);
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i18 = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i24 = 0, $$0$i$i1$i$i9 = 0, $$0$i$i15 = 0, $$0$in = 0, $$02 = 0, $$pre$i$i$i = 0, $$pre$i$i$i20 = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i11 = 0, $$pre$i3$i$i26 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $or$cond = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i21 = 0, $phitmp$i$i$i6 = 0, $phitmp$i4$i$i12 = 0, $tmp$i$i14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $147 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $147 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $147 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = (($13) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($147) {
     $148 = $13;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($147) {
   label = 16;
  } else {
   $148 = 0;
  }
 }
 if ((label|0) == 16) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  $$02 = 0;
  STACKTOP = sp;return ($$02|0);
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP32[$30>>2]|0;
  $$0$i$i = $38;
 }
 $39 = HEAP32[$__ct>>2]|0;
 $40 = (($39) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,2048,$$0$i$i)|0);
 if (!($42)) {
  $43 = HEAP32[$__err>>2]|0;
  $44 = $43 | 4;
  HEAP32[$__err>>2] = $44;
  $$02 = 0;
  STACKTOP = sp;return ($$02|0);
 }
 $45 = HEAP32[$__ct>>2]|0;
 $46 = (($45) + 52|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (FUNCTION_TABLE_iiii[$47 & 1023]($__ct,$$0$i$i,0)|0);
 $49 = $48 << 24 >> 24;
 $50 = HEAP32[$__b>>2]|0;
 $51 = (($50) + 12|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($50) + 16|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($52|0)==($54|0);
 if ($55) {
  $56 = HEAP32[$50>>2]|0;
  $57 = (($56) + 40|0);
  $58 = HEAP32[$57>>2]|0;
  (FUNCTION_TABLE_ii[$58 & 1023]($50)|0);
  $$0$in = $__n;$$pre$i3$i$i11 = $148;$74 = $148;$__r$0$in = $49;
 } else {
  $59 = (($52) + 4|0);
  HEAP32[$51>>2] = $59;
  $$0$in = $__n;$$pre$i3$i$i11 = $148;$74 = $148;$__r$0$in = $49;
 }
 while(1) {
  $__r$0 = (($__r$0$in) + -48)|0;
  $$0 = (($$0$in) + -1)|0;
  $60 = HEAP32[$__b>>2]|0;
  $61 = ($60|0)==(0|0);
  do {
   if ($61) {
    $86 = 1;
   } else {
    $62 = (($60) + 12|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($60) + 16|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($63|0)==($65|0);
    if ($66) {
     $67 = HEAP32[$60>>2]|0;
     $68 = (($67) + 36|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (FUNCTION_TABLE_ii[$69 & 1023]($60)|0);
     $$0$i$i$i$i3 = $70;
    } else {
     $71 = HEAP32[$63>>2]|0;
     $$0$i$i$i$i3 = $71;
    }
    $72 = ($$0$i$i$i$i3|0)==(-1);
    if ($72) {
     HEAP32[$__b>>2] = 0;
     $86 = 1;
     break;
    } else {
     $$pre$i$i$i5 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i6 = ($$pre$i$i$i5|0)==(0|0);
     $86 = $phitmp$i$i$i6;
     break;
    }
   }
  } while(0);
  $73 = ($74|0)==(0|0);
  do {
   if ($73) {
    $$pre$i3$i$i26 = $$pre$i3$i$i11;$149 = 0;$87 = 1;
   } else {
    $75 = (($74) + 12|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (($74) + 16|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($76|0)==($78|0);
    if ($79) {
     $80 = HEAP32[$74>>2]|0;
     $81 = (($80) + 36|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (FUNCTION_TABLE_ii[$82 & 1023]($74)|0);
     $$0$i$i1$i$i9 = $83;
    } else {
     $84 = HEAP32[$76>>2]|0;
     $$0$i$i1$i$i9 = $84;
    }
    $85 = ($$0$i$i1$i$i9|0)==(-1);
    if ($85) {
     HEAP32[$__e>>2] = 0;
     $$pre$i3$i$i26 = 0;$149 = 0;$87 = 1;
     break;
    } else {
     $phitmp$i4$i$i12 = ($$pre$i3$i$i11|0)==(0|0);
     $$pre$i3$i$i26 = $$pre$i3$i$i11;$149 = $$pre$i3$i$i11;$87 = $phitmp$i4$i$i12;
     break;
    }
   }
  } while(0);
  $tmp$i$i14 = $86 ^ $87;
  $88 = ($$0|0)>(0);
  $or$cond = $tmp$i$i14 & $88;
  $89 = HEAP32[$__b>>2]|0;
  if (!($or$cond)) {
   break;
  }
  $90 = (($89) + 12|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($89) + 16|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($91|0)==($93|0);
  if ($94) {
   $95 = HEAP32[$89>>2]|0;
   $96 = (($95) + 36|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (FUNCTION_TABLE_ii[$97 & 1023]($89)|0);
   $$0$i$i15 = $98;
  } else {
   $99 = HEAP32[$91>>2]|0;
   $$0$i$i15 = $99;
  }
  $100 = HEAP32[$__ct>>2]|0;
  $101 = (($100) + 12|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (FUNCTION_TABLE_iiii[$102 & 1023]($__ct,2048,$$0$i$i15)|0);
  if (!($103)) {
   $$02 = $__r$0;
   label = 63;
   break;
  }
  $104 = ($__r$0*10)|0;
  $105 = HEAP32[$__ct>>2]|0;
  $106 = (($105) + 52|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (FUNCTION_TABLE_iiii[$107 & 1023]($__ct,$$0$i$i15,0)|0);
  $109 = $108 << 24 >> 24;
  $110 = (($109) + ($104))|0;
  $111 = HEAP32[$__b>>2]|0;
  $112 = (($111) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($111) + 16|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($113|0)==($115|0);
  if ($116) {
   $117 = HEAP32[$111>>2]|0;
   $118 = (($117) + 40|0);
   $119 = HEAP32[$118>>2]|0;
   (FUNCTION_TABLE_ii[$119 & 1023]($111)|0);
   $$0$in = $$0;$$pre$i3$i$i11 = $$pre$i3$i$i26;$74 = $149;$__r$0$in = $110;
   continue;
  } else {
   $120 = (($113) + 4|0);
   HEAP32[$112>>2] = $120;
   $$0$in = $$0;$$pre$i3$i$i11 = $$pre$i3$i$i26;$74 = $149;$__r$0$in = $110;
   continue;
  }
 }
 if ((label|0) == 63) {
  STACKTOP = sp;return ($$02|0);
 }
 $121 = ($89|0)==(0|0);
 do {
  if ($121) {
   $150 = 1;
  } else {
   $122 = (($89) + 12|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = (($89) + 16|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ($123|0)==($125|0);
   if ($126) {
    $127 = HEAP32[$89>>2]|0;
    $128 = (($127) + 36|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (FUNCTION_TABLE_ii[$129 & 1023]($89)|0);
    $$0$i$i$i$i18 = $130;
   } else {
    $131 = HEAP32[$123>>2]|0;
    $$0$i$i$i$i18 = $131;
   }
   $132 = ($$0$i$i$i$i18|0)==(-1);
   if ($132) {
    HEAP32[$__b>>2] = 0;
    $150 = 1;
    break;
   } else {
    $$pre$i$i$i20 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i21 = ($$pre$i$i$i20|0)==(0|0);
    $150 = $phitmp$i$i$i21;
    break;
   }
  }
 } while(0);
 $133 = ($$pre$i3$i$i26|0)==(0|0);
 do {
  if ($133) {
   label = 60;
  } else {
   $134 = (($$pre$i3$i$i26) + 12|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = (($$pre$i3$i$i26) + 16|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = ($135|0)==($137|0);
   if ($138) {
    $139 = HEAP32[$$pre$i3$i$i26>>2]|0;
    $140 = (($139) + 36|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (FUNCTION_TABLE_ii[$141 & 1023]($$pre$i3$i$i26)|0);
    $$0$i$i1$i$i24 = $142;
   } else {
    $143 = HEAP32[$135>>2]|0;
    $$0$i$i1$i$i24 = $143;
   }
   $144 = ($$0$i$i1$i$i24|0)==(-1);
   if ($144) {
    HEAP32[$__e>>2] = 0;
    label = 60;
    break;
   }
   if ($150) {
    $$02 = $__r$0;
    STACKTOP = sp;return ($$02|0);
   }
  }
 } while(0);
 if ((label|0) == 60) {
  if (!($150)) {
   $$02 = $__r$0;
   STACKTOP = sp;return ($$02|0);
  }
 }
 $145 = HEAP32[$__err>>2]|0;
 $146 = $145 | 2;
 HEAP32[$__err>>2] = $146;
 $$02 = $__r$0;
 STACKTOP = sp;return ($$02|0);
}
function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(498|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $2 ? $4 : 0;
 $14 = (_realloc($13,$$)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   HEAP32[$__b>>2] = $14;
   $23 = $14;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $14;
   $16 = ($$pr|0)==(0|0);
   if ($16) {
    $23 = $14;
   } else {
    $17 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($17|0,($$pr|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     $20 = ___cxa_find_matching_catch(0|0)|0;
     $21 = tempRet0;
     ___clang_call_terminate($20);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $23 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 489;
 $22 = (($23) + ($12)|0);
 HEAP32[$__n>>2] = $22;
 $24 = HEAP32[$__b>>2]|0;
 $25 = (($24) + ($$)|0);
 HEAP32[$__e>>2] = $25;
 STACKTOP = sp;return;
}
function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(498|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 if ($2) {
  $14 = $4;
 } else {
  $14 = 0;
 }
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   HEAP32[$__b>>2] = $15;
   $25 = $15;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $15;
   $17 = ($$pr|0)==(0|0);
   if ($17) {
    $25 = $15;
   } else {
    $18 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($18|0,($$pr|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(0|0)|0;
     $22 = tempRet0;
     ___clang_call_terminate($21);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $25 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 489;
 $23 = $$ >>> 2;
 $24 = (($25) + ($13<<2)|0);
 HEAP32[$__n>>2] = $24;
 $26 = HEAP32[$__b>>2]|0;
 $27 = (($26) + ($23<<2)|0);
 HEAP32[$__e>>2] = $27;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__p$02 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep3 = 0, $scevgep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $15 = 10;$16 = $5;$40 = $1;
 } else {
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $15 = $phitmp$i;$16 = $7;$40 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = ($__last|0)==($__first|0);
 if ($13) {
  STACKTOP = sp;return ($this|0);
 }
 $14 = (($15) - ($16))|0;
 $17 = ($14>>>0)<($12>>>0);
 if ($17) {
  $18 = (($16) + ($12))|0;
  $19 = (($18) - ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
  $$pre = HEAP8[$this>>0]|0;
  $21 = $$pre;
 } else {
  $21 = $40;
 }
 $20 = $21 & 1;
 $22 = ($20<<24>>24)==(0);
 if ($22) {
  $25 = (($this) + 1|0);
  $27 = $25;
 } else {
  $23 = (($this) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 }
 $26 = (($27) + ($16)|0);
 $28 = (($16) - ($0))|0;
 $scevgep = (($__last) + ($28)|0);
 $scevgep3 = $scevgep;
 $$01 = $__first;$__p$02 = $26;
 while(1) {
  $29 = HEAP8[$$01>>0]|0;
  HEAP8[$__p$02>>0] = $29;
  $30 = (($__p$02) + 1|0);
  $31 = (($$01) + 1|0);
  $32 = ($31|0)==($__last|0);
  if ($32) {
   break;
  } else {
   $$01 = $31;$__p$02 = $30;
  }
 }
 $scevgep4 = (($27) + ($scevgep3)|0);
 HEAP8[$scevgep4>>0] = 0;
 $33 = (($16) + ($12))|0;
 $34 = HEAP8[$this>>0]|0;
 $35 = $34 & 1;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $38 = $33 << 1;
  $39 = $38&255;
  HEAP8[$this>>0] = $39;
  STACKTOP = sp;return ($this|0);
 } else {
  $37 = (($this) + 4|0);
  HEAP32[$37>>2] = $33;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(498|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 if ($2) {
  $14 = $4;
 } else {
  $14 = 0;
 }
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   HEAP32[$__b>>2] = $15;
   $25 = $15;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $15;
   $17 = ($$pr|0)==(0|0);
   if ($17) {
    $25 = $15;
   } else {
    $18 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($18|0,($$pr|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(0|0)|0;
     $22 = tempRet0;
     ___clang_call_terminate($21);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $25 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 489;
 $23 = $$ >>> 2;
 $24 = (($25) + ($13<<2)|0);
 HEAP32[$__n>>2] = $24;
 $26 = HEAP32[$__b>>2]|0;
 $27 = (($26) + ($23<<2)|0);
 HEAP32[$__e>>2] = $27;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$02 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $16 = 1;$17 = $5;$46 = $1;
 } else {
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $16 = $phitmp$i;$17 = $7;$46 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = $12 >> 2;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return ($this|0);
 }
 $15 = (($16) - ($17))|0;
 $18 = ($15>>>0)<($13>>>0);
 if ($18) {
  $19 = (($17) + ($13))|0;
  $20 = (($19) - ($16))|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$16,$20,$17,$17,0,0);
  $$pre = HEAP8[$this>>0]|0;
  $22 = $$pre;
 } else {
  $22 = $46;
 }
 $21 = $22 & 1;
 $23 = ($21<<24>>24)==(0);
 if ($23) {
  $26 = (($this) + 4|0);
  $28 = $26;
 } else {
  $24 = (($this) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $28 = $25;
 }
 $27 = (($28) + ($17<<2)|0);
 $29 = ($__first|0)==($__last|0);
 if ($29) {
  $__p$0$lcssa = $27;
 } else {
  $scevgep = (($__last) + -4|0);
  $30 = $scevgep;
  $31 = (($30) - ($0))|0;
  $32 = $31 >>> 2;
  $33 = (($17) + ($32))|0;
  $34 = (($33) + 1)|0;
  $$01 = $__first;$__p$02 = $27;
  while(1) {
   $35 = HEAP32[$$01>>2]|0;
   HEAP32[$__p$02>>2] = $35;
   $36 = (($__p$02) + 4|0);
   $37 = (($$01) + 4|0);
   $38 = ($37|0)==($__last|0);
   if ($38) {
    break;
   } else {
    $$01 = $37;$__p$02 = $36;
   }
  }
  $scevgep5 = (($28) + ($34<<2)|0);
  $__p$0$lcssa = $scevgep5;
 }
 HEAP32[$__p$0$lcssa>>2] = 0;
 $39 = (($17) + ($13))|0;
 $40 = HEAP8[$this>>0]|0;
 $41 = $40 & 1;
 $42 = ($41<<24>>24)==(0);
 if ($42) {
  $44 = $39 << 1;
  $45 = $44&255;
  HEAP8[$this>>0] = $45;
  STACKTOP = sp;return ($this|0);
 } else {
  $43 = (($this) + 4|0);
  HEAP32[$43>>2] = $39;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 128|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__n|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_vii(584,($this|0),($__n|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this);
  ___resumeException($6|0);
  // unreachable;
 }
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(9248)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(9288)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10856)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10848)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10920)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10928)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10984)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10992)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11000)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11008)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(9360)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(9480)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(9544)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(9640)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10232)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10296)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10360)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10424)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10464)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10544)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10600)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10648)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(9752)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(9904)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10136)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10168)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10688)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10728)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  $__new_last2$i$i = $0;
  $scevgep$i$i = (($3) + -4|0);
  $5 = $scevgep$i$i;
  $6 = (($5) - ($__new_last2$i$i))|0;
  $7 = $6 >>> 2;
  $8 = $7 ^ -1;
  $scevgep4$i$i = (($3) + ($8<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i;
 }
 $9 = (($this) + 16|0);
 $10 = ($9|0)==($0|0);
 if ($10) {
  $11 = (($this) + 128|0);
  HEAP8[$11>>0] = 0;
  STACKTOP = sp;return;
 } else {
  __ZdlPv($0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($__sz>>>0);
 if ($7) {
  $8 = (($__sz) - ($6))|0;
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$8);
  STACKTOP = sp;return;
 }
 $9 = ($6>>>0)>($__sz>>>0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = (($2) + ($__sz<<2)|0);
 $11 = ($1|0)==($10|0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $__new_last2$i$i = $10;
 $scevgep$i$i = (($1) + -4|0);
 $12 = $scevgep$i$i;
 $13 = (($12) - ($__new_last2$i$i))|0;
 $14 = $13 >>> 2;
 $15 = $14 ^ -1;
 $scevgep4$i$i = (($1) + ($15<<2)|0);
 HEAP32[$0>>2] = $scevgep4$i$i;
 STACKTOP = sp;return;
}
function __ZNKSt3__16locale5__imp9has_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($id>>>0);
 if (!($8)) {
  $12 = 0;
  STACKTOP = sp;return ($12|0);
 }
 $9 = (($3) + ($id<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 $12 = $11;
 STACKTOP = sp;return ($12|0);
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__vp) + 4|0);
 $$field = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 $$index1 = (($0) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $1 = HEAP32[$__vp>>2]|0;
 $2 = $$field2 >> 1;
 $3 = (($1) + ($2)|0);
 $4 = $$field2 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $9 = $$field;
  $10 = $9;
  FUNCTION_TABLE_vi[$10 & 1023]($3);
  STACKTOP = sp;return;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($$field)|0);
  $8 = HEAP32[$7>>2]|0;
  $10 = $8;
  FUNCTION_TABLE_vi[$10 & 1023]($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 do {
  if (!($1)) {
   $2 = $to_end;
   $3 = $to;
   $4 = (($2) - ($3))|0;
   $5 = ($4|0)<(3);
   if ($5) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $6 = (($to) + 1|0);
    HEAP32[$to_nxt>>2] = $6;
    HEAP8[$to>>0] = -17;
    $7 = HEAP32[$to_nxt>>2]|0;
    $8 = (($7) + 1|0);
    HEAP32[$to_nxt>>2] = $8;
    HEAP8[$7>>0] = -69;
    $9 = HEAP32[$to_nxt>>2]|0;
    $10 = (($9) + 1|0);
    HEAP32[$to_nxt>>2] = $10;
    HEAP8[$9>>0] = -65;
    break;
   }
  }
 } while(0);
 $11 = $frm_end;
 $12 = HEAP32[$frm_nxt>>2]|0;
 $13 = ($12>>>0)<($frm_end>>>0);
 if (!($13)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = $to_end;
 $16 = $12;
 L10: while(1) {
  $15 = HEAP16[$16>>1]|0;
  $17 = $15&65535;
  $18 = ($17>>>0)>($Maxcode>>>0);
  if ($18) {
   $$0 = 2;
   label = 26;
   break;
  }
  $19 = ($15&65535)<(128);
  do {
   if ($19) {
    $20 = HEAP32[$to_nxt>>2]|0;
    $21 = $20;
    $22 = (($14) - ($21))|0;
    $23 = ($22|0)<(1);
    if ($23) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $24 = $15&255;
    $25 = (($20) + 1|0);
    HEAP32[$to_nxt>>2] = $25;
    HEAP8[$20>>0] = $24;
   } else {
    $26 = ($15&65535)<(2048);
    if ($26) {
     $27 = HEAP32[$to_nxt>>2]|0;
     $28 = $27;
     $29 = (($14) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $31 = $17 >>> 6;
     $32 = $31 | 192;
     $33 = $32&255;
     $34 = (($27) + 1|0);
     HEAP32[$to_nxt>>2] = $34;
     HEAP8[$27>>0] = $33;
     $35 = $17 & 63;
     $36 = $35 | 128;
     $37 = $36&255;
     $38 = HEAP32[$to_nxt>>2]|0;
     $39 = (($38) + 1|0);
     HEAP32[$to_nxt>>2] = $39;
     HEAP8[$38>>0] = $37;
     break;
    }
    $40 = ($15&65535)<(55296);
    if ($40) {
     $41 = HEAP32[$to_nxt>>2]|0;
     $42 = $41;
     $43 = (($14) - ($42))|0;
     $44 = ($43|0)<(3);
     if ($44) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $45 = $17 >>> 12;
     $46 = $45 | 224;
     $47 = $46&255;
     $48 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $48;
     HEAP8[$41>>0] = $47;
     $49 = $17 >>> 6;
     $50 = $49 & 63;
     $51 = $50 | 128;
     $52 = $51&255;
     $53 = HEAP32[$to_nxt>>2]|0;
     $54 = (($53) + 1|0);
     HEAP32[$to_nxt>>2] = $54;
     HEAP8[$53>>0] = $52;
     $55 = $17 & 63;
     $56 = $55 | 128;
     $57 = $56&255;
     $58 = HEAP32[$to_nxt>>2]|0;
     $59 = (($58) + 1|0);
     HEAP32[$to_nxt>>2] = $59;
     HEAP8[$58>>0] = $57;
     break;
    }
    $60 = ($15&65535)<(56320);
    if (!($60)) {
     $112 = ($15&65535)<(57344);
     if ($112) {
      $$0 = 2;
      label = 26;
      break L10;
     }
     $113 = HEAP32[$to_nxt>>2]|0;
     $114 = $113;
     $115 = (($14) - ($114))|0;
     $116 = ($115|0)<(3);
     if ($116) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $117 = $17 >>> 12;
     $118 = $117 | 224;
     $119 = $118&255;
     $120 = (($113) + 1|0);
     HEAP32[$to_nxt>>2] = $120;
     HEAP8[$113>>0] = $119;
     $121 = $17 >>> 6;
     $122 = $121 & 63;
     $123 = $122 | 128;
     $124 = $123&255;
     $125 = HEAP32[$to_nxt>>2]|0;
     $126 = (($125) + 1|0);
     HEAP32[$to_nxt>>2] = $126;
     HEAP8[$125>>0] = $124;
     $127 = $17 & 63;
     $128 = $127 | 128;
     $129 = $128&255;
     $130 = HEAP32[$to_nxt>>2]|0;
     $131 = (($130) + 1|0);
     HEAP32[$to_nxt>>2] = $131;
     HEAP8[$130>>0] = $129;
     break;
    }
    $61 = $16;
    $62 = (($11) - ($61))|0;
    $63 = ($62|0)<(4);
    if ($63) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $64 = (($16) + 2|0);
    $65 = HEAP16[$64>>1]|0;
    $66 = $65&65535;
    $67 = $66 & 64512;
    $68 = ($67|0)==(56320);
    if (!($68)) {
     $$0 = 2;
     label = 26;
     break L10;
    }
    $69 = HEAP32[$to_nxt>>2]|0;
    $70 = $69;
    $71 = (($14) - ($70))|0;
    $72 = ($71|0)<(4);
    if ($72) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $73 = $17 & 960;
    $74 = $73 << 10;
    $75 = (($74) + 65536)|0;
    $76 = $17 << 10;
    $77 = $76 & 64512;
    $78 = $75 | $77;
    $79 = $66 & 1023;
    $80 = $78 | $79;
    $81 = ($80>>>0)>($Maxcode>>>0);
    if ($81) {
     $$0 = 2;
     label = 26;
     break L10;
    }
    HEAP32[$frm_nxt>>2] = $64;
    $82 = $73 >>> 6;
    $83 = (($82) + 1)|0;
    $84 = $83 >>> 2;
    $85 = $84 | 240;
    $86 = $85&255;
    $87 = HEAP32[$to_nxt>>2]|0;
    $88 = (($87) + 1|0);
    HEAP32[$to_nxt>>2] = $88;
    HEAP8[$87>>0] = $86;
    $89 = $83 << 4;
    $90 = $89 & 48;
    $91 = $17 >>> 2;
    $92 = $91 & 15;
    $93 = $92 | $90;
    $94 = $93 | 128;
    $95 = $94&255;
    $96 = HEAP32[$to_nxt>>2]|0;
    $97 = (($96) + 1|0);
    HEAP32[$to_nxt>>2] = $97;
    HEAP8[$96>>0] = $95;
    $98 = $17 << 4;
    $99 = $98 & 48;
    $100 = $66 >>> 6;
    $101 = $100 & 15;
    $102 = $99 | $101;
    $103 = $102 | 128;
    $104 = $103&255;
    $105 = HEAP32[$to_nxt>>2]|0;
    $106 = (($105) + 1|0);
    HEAP32[$to_nxt>>2] = $106;
    HEAP8[$105>>0] = $104;
    $107 = $66 & 63;
    $108 = $107 | 128;
    $109 = $108&255;
    $110 = HEAP32[$to_nxt>>2]|0;
    $111 = (($110) + 1|0);
    HEAP32[$to_nxt>>2] = $111;
    HEAP8[$110>>0] = $109;
   }
  } while(0);
  $132 = HEAP32[$frm_nxt>>2]|0;
  $133 = (($132) + 2|0);
  HEAP32[$frm_nxt>>2] = $133;
  $134 = ($133>>>0)<($frm_end>>>0);
  if ($134) {
   $16 = $133;
  } else {
   $$0 = 0;
   label = 26;
   break;
  }
 }
 if ((label|0) == 26) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$off = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre = HEAP32[$frm_nxt>>2]|0;
 if ($1) {
  $16 = $$pre;
 } else {
  $2 = $frm_end;
  $3 = $$pre;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$$pre>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($$pre) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($$pre) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     if ($13) {
      $14 = (($$pre) + 3|0);
      HEAP32[$frm_nxt>>2] = $14;
      $16 = $14;
     } else {
      $16 = $$pre;
     }
    } else {
     $16 = $$pre;
    }
   } else {
    $16 = $$pre;
   }
  } else {
   $16 = $$pre;
  }
 }
 $15 = ($16>>>0)<($frm_end>>>0);
 L8: do {
  if ($15) {
   $17 = $frm_end;
   $18 = $to_end;
   $$pre1 = HEAP32[$to_nxt>>2]|0;
   $20 = $$pre1;$22 = $16;
   L10: while(1) {
    $19 = ($20>>>0)<($to_end>>>0);
    if (!($19)) {
     $135 = $22;
     break L8;
    }
    $21 = HEAP8[$22>>0]|0;
    $23 = $21&255;
    $24 = ($23>>>0)>($Maxcode>>>0);
    if ($24) {
     $$0 = 2;
     label = 41;
     break;
    }
    $25 = ($21<<24>>24)>(-1);
    do {
     if ($25) {
      $26 = $21&255;
      HEAP16[$20>>1] = $26;
      $27 = (($22) + 1|0);
      HEAP32[$frm_nxt>>2] = $27;
     } else {
      $28 = ($21&255)<(194);
      if ($28) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $29 = ($21&255)<(224);
      if ($29) {
       $30 = $22;
       $31 = (($17) - ($30))|0;
       $32 = ($31|0)<(2);
       if ($32) {
        $$0 = 1;
        label = 41;
        break L10;
       }
       $33 = (($22) + 1|0);
       $34 = HEAP8[$33>>0]|0;
       $35 = $34&255;
       $36 = $35 & 192;
       $37 = ($36|0)==(128);
       if (!($37)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $38 = $23 << 6;
       $39 = $38 & 1984;
       $40 = $35 & 63;
       $41 = $40 | $39;
       $42 = ($41>>>0)>($Maxcode>>>0);
       if ($42) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $43 = $41&65535;
       HEAP16[$20>>1] = $43;
       $44 = (($22) + 2|0);
       HEAP32[$frm_nxt>>2] = $44;
       break;
      }
      $45 = ($21&255)<(240);
      if ($45) {
       $46 = $22;
       $47 = (($17) - ($46))|0;
       $48 = ($47|0)<(3);
       if ($48) {
        $$0 = 1;
        label = 41;
        break L10;
       }
       $49 = (($22) + 1|0);
       $50 = HEAP8[$49>>0]|0;
       $51 = (($22) + 2|0);
       $52 = HEAP8[$51>>0]|0;
       if ((($23|0) == 237)) {
        $55 = $50 & -32;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       } else if ((($23|0) == 224)) {
        $53 = $50 & -32;
        $54 = ($53<<24>>24)==(-96);
        if (!($54)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       } else {
        $57 = $50 & -64;
        $58 = ($57<<24>>24)==(-128);
        if (!($58)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       }
       $59 = $52&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $62 = $23 << 12;
       $63 = $50&255;
       $64 = $63 << 6;
       $65 = $64 & 4032;
       $66 = $65 | $62;
       $67 = $59 & 63;
       $68 = $66 | $67;
       $69 = $68 & 65535;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $71 = $68&65535;
       HEAP16[$20>>1] = $71;
       $72 = (($22) + 3|0);
       HEAP32[$frm_nxt>>2] = $72;
       break;
      }
      $73 = ($21&255)<(245);
      if (!($73)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $74 = $22;
      $75 = (($17) - ($74))|0;
      $76 = ($75|0)<(4);
      if ($76) {
       $$0 = 1;
       label = 41;
       break L10;
      }
      $77 = (($22) + 1|0);
      $78 = HEAP8[$77>>0]|0;
      $79 = (($22) + 2|0);
      $80 = HEAP8[$79>>0]|0;
      $81 = (($22) + 3|0);
      $82 = HEAP8[$81>>0]|0;
      if ((($23|0) == 240)) {
       $$off = (($78) + 112)<<24>>24;
       $83 = ($$off&255)<(48);
       if (!($83)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      } else if ((($23|0) == 244)) {
       $84 = $78 & -16;
       $85 = ($84<<24>>24)==(-128);
       if (!($85)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      } else {
       $86 = $78 & -64;
       $87 = ($86<<24>>24)==(-128);
       if (!($87)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      }
      $88 = $80&255;
      $89 = $88 & 192;
      $90 = ($89|0)==(128);
      if (!($90)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $91 = $82&255;
      $92 = $91 & 192;
      $93 = ($92|0)==(128);
      if (!($93)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $94 = $20;
      $95 = (($18) - ($94))|0;
      $96 = ($95|0)<(4);
      if ($96) {
       $$0 = 1;
       label = 41;
       break L10;
      }
      $97 = $23 & 7;
      $98 = $97 << 18;
      $99 = $78&255;
      $100 = $99 << 12;
      $101 = $100 & 258048;
      $102 = $101 | $98;
      $103 = $88 << 6;
      $104 = $103 & 4032;
      $105 = $102 | $104;
      $106 = $91 & 63;
      $107 = $105 | $106;
      $108 = ($107>>>0)>($Maxcode>>>0);
      if ($108) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $109 = $97 << 2;
      $110 = $99 >>> 4;
      $111 = $110 & 3;
      $112 = $111 | $109;
      $113 = $112 << 6;
      $114 = (($113) + 16320)|0;
      $115 = $99 << 2;
      $116 = $115 & 60;
      $117 = $88 >>> 4;
      $118 = $117 & 3;
      $119 = $116 | $118;
      $120 = $119 | $114;
      $121 = $120 | 55296;
      $122 = $121&65535;
      HEAP16[$20>>1] = $122;
      $123 = $103 & 960;
      $124 = $106 | $123;
      $125 = $124 | 56320;
      $126 = $125&65535;
      $127 = (($20) + 2|0);
      HEAP32[$to_nxt>>2] = $127;
      HEAP16[$127>>1] = $126;
      $128 = HEAP32[$frm_nxt>>2]|0;
      $129 = (($128) + 4|0);
      HEAP32[$frm_nxt>>2] = $129;
     }
    } while(0);
    $130 = HEAP32[$to_nxt>>2]|0;
    $131 = (($130) + 2|0);
    HEAP32[$to_nxt>>2] = $131;
    $132 = HEAP32[$frm_nxt>>2]|0;
    $133 = ($132>>>0)<($frm_end>>>0);
    if ($133) {
     $20 = $131;$22 = $132;
    } else {
     $135 = $132;
     break L8;
    }
   }
   if ((label|0) == 41) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $135 = $16;
  }
 } while(0);
 $134 = ($135>>>0)<($frm_end>>>0);
 $136 = $134&1;
 $$0 = $136;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$117 = 0, $frm_nxt$2 = 0, $nchar16_t$016 = 0, $nchar16_t$1 = 0, $or$cond = 0, $or$cond15 = 0, $or$cond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm_end;
  $3 = $frm;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$frm>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($frm) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($frm) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     $14 = (($frm) + 3|0);
     $$frm = $13 ? $14 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $15 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $16 = ($mx|0)!=(0);
 $or$cond15 = $15 & $16;
 L7: do {
  if ($or$cond15) {
   $17 = $frm_end;
   $frm_nxt$117 = $frm_nxt$1$ph;$nchar16_t$016 = 0;
   L9: while(1) {
    $18 = HEAP8[$frm_nxt$117>>0]|0;
    $19 = $18&255;
    $20 = ($19>>>0)>($Maxcode>>>0);
    if ($20) {
     $frm_nxt$1$lcssa = $frm_nxt$117;
     break L7;
    }
    $21 = ($18<<24>>24)>(-1);
    do {
     if ($21) {
      $22 = (($frm_nxt$117) + 1|0);
      $frm_nxt$2 = $22;$nchar16_t$1 = $nchar16_t$016;
     } else {
      $23 = ($18&255)<(194);
      if ($23) {
       $frm_nxt$1$lcssa = $frm_nxt$117;
       break L7;
      }
      $24 = ($18&255)<(224);
      if ($24) {
       $25 = $frm_nxt$117;
       $26 = (($17) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $frm_nxt$1$lcssa = $frm_nxt$117;
        break L7;
       }
       $28 = (($frm_nxt$117) + 1|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = $29&255;
       $31 = $30 & 192;
       $32 = ($31|0)==(128);
       if (!($32)) {
        $frm_nxt$1$lcssa = $frm_nxt$117;
        break L7;
       }
       $33 = $19 << 6;
       $34 = $33 & 1984;
       $35 = $30 & 63;
       $36 = $35 | $34;
       $37 = ($36>>>0)>($Maxcode>>>0);
       if ($37) {
        $frm_nxt$1$lcssa = $frm_nxt$117;
        break L7;
       }
       $38 = (($frm_nxt$117) + 2|0);
       $frm_nxt$2 = $38;$nchar16_t$1 = $nchar16_t$016;
       break;
      }
      $39 = ($18&255)<(240);
      if ($39) {
       $40 = $frm_nxt$117;
       $41 = (($17) - ($40))|0;
       $42 = ($41|0)<(3);
       if ($42) {
        $frm_nxt$1$lcssa = $frm_nxt$117;
        break L7;
       }
       $43 = (($frm_nxt$117) + 1|0);
       $44 = HEAP8[$43>>0]|0;
       $45 = (($frm_nxt$117) + 2|0);
       $46 = HEAP8[$45>>0]|0;
       if ((($19|0) == 237)) {
        $51 = $44 & -32;
        $52 = ($51<<24>>24)==(-128);
        if (!($52)) {
         label = 23;
         break L9;
        }
       } else if ((($19|0) == 224)) {
        $47 = $44 & -32;
        $48 = ($47<<24>>24)==(-96);
        if (!($48)) {
         label = 21;
         break L9;
        }
       } else {
        $55 = $44 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         label = 25;
         break L9;
        }
       }
       $59 = $46&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $frm_nxt$1$lcssa = $frm_nxt$117;
        break L7;
       }
       $62 = $19 << 12;
       $63 = $62 & 61440;
       $64 = $44&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $59 & 63;
       $69 = $67 | $68;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $frm_nxt$1$lcssa = $frm_nxt$117;
        break L7;
       }
       $71 = (($frm_nxt$117) + 3|0);
       $frm_nxt$2 = $71;$nchar16_t$1 = $nchar16_t$016;
       break;
      }
      $72 = ($18&255)<(245);
      if (!($72)) {
       $frm_nxt$1$lcssa = $frm_nxt$117;
       break L7;
      }
      $73 = $frm_nxt$117;
      $74 = (($17) - ($73))|0;
      $75 = ($74|0)<(4);
      $76 = (($mx) - ($nchar16_t$016))|0;
      $77 = ($76>>>0)<(2);
      $or$cond2 = $75 | $77;
      if ($or$cond2) {
       $frm_nxt$1$lcssa = $frm_nxt$117;
       break L7;
      }
      $78 = (($frm_nxt$117) + 1|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = (($frm_nxt$117) + 2|0);
      $81 = HEAP8[$80>>0]|0;
      $82 = (($frm_nxt$117) + 3|0);
      $83 = HEAP8[$82>>0]|0;
      if ((($19|0) == 244)) {
       $87 = $79 & -16;
       $88 = ($87<<24>>24)==(-128);
       if (!($88)) {
        label = 35;
        break L9;
       }
      } else if ((($19|0) == 240)) {
       $$off = (($79) + 112)<<24>>24;
       $84 = ($$off&255)<(48);
       if (!($84)) {
        label = 33;
        break L9;
       }
      } else {
       $91 = $79 & -64;
       $92 = ($91<<24>>24)==(-128);
       if (!($92)) {
        label = 37;
        break L9;
       }
      }
      $95 = $81&255;
      $96 = $95 & 192;
      $97 = ($96|0)==(128);
      if (!($97)) {
       $frm_nxt$1$lcssa = $frm_nxt$117;
       break L7;
      }
      $98 = $83&255;
      $99 = $98 & 192;
      $100 = ($99|0)==(128);
      if (!($100)) {
       $frm_nxt$1$lcssa = $frm_nxt$117;
       break L7;
      }
      $101 = $19 << 18;
      $102 = $101 & 1835008;
      $103 = $79&255;
      $104 = $103 << 12;
      $105 = $104 & 258048;
      $106 = $105 | $102;
      $107 = $95 << 6;
      $108 = $107 & 4032;
      $109 = $106 | $108;
      $110 = $98 & 63;
      $111 = $109 | $110;
      $112 = ($111>>>0)>($Maxcode>>>0);
      if ($112) {
       $frm_nxt$1$lcssa = $frm_nxt$117;
       break L7;
      }
      $113 = (($nchar16_t$016) + 1)|0;
      $114 = (($frm_nxt$117) + 4|0);
      $frm_nxt$2 = $114;$nchar16_t$1 = $113;
     }
    } while(0);
    $115 = (($nchar16_t$1) + 1)|0;
    $116 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $117 = ($115>>>0)<($mx>>>0);
    $or$cond = $116 & $117;
    if ($or$cond) {
     $frm_nxt$117 = $frm_nxt$2;$nchar16_t$016 = $115;
    } else {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    }
   }
   if ((label|0) == 21) {
    $49 = $frm;
    $50 = (($40) - ($49))|0;
    $$0 = $50;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 23) {
    $53 = $frm;
    $54 = (($40) - ($53))|0;
    $$0 = $54;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 25) {
    $57 = $frm;
    $58 = (($40) - ($57))|0;
    $$0 = $58;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 33) {
    $85 = $frm;
    $86 = (($73) - ($85))|0;
    $$0 = $86;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 35) {
    $89 = $frm;
    $90 = (($73) - ($89))|0;
    $$0 = $90;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 37) {
    $93 = $frm;
    $94 = (($73) - ($93))|0;
    $$0 = $94;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while(0);
 $118 = $frm_nxt$1$lcssa;
 $119 = $frm;
 $120 = (($118) - ($119))|0;
 $$0 = $120;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 do {
  if (!($1)) {
   $2 = $to_end;
   $3 = $to;
   $4 = (($2) - ($3))|0;
   $5 = ($4|0)<(3);
   if ($5) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $6 = (($to) + 1|0);
    HEAP32[$to_nxt>>2] = $6;
    HEAP8[$to>>0] = -17;
    $7 = HEAP32[$to_nxt>>2]|0;
    $8 = (($7) + 1|0);
    HEAP32[$to_nxt>>2] = $8;
    HEAP8[$7>>0] = -69;
    $9 = HEAP32[$to_nxt>>2]|0;
    $10 = (($9) + 1|0);
    HEAP32[$to_nxt>>2] = $10;
    HEAP8[$9>>0] = -65;
    break;
   }
  }
 } while(0);
 $11 = HEAP32[$frm_nxt>>2]|0;
 $12 = ($11>>>0)<($frm_end>>>0);
 if (!($12)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = $to_end;
 $15 = $11;
 L10: while(1) {
  $14 = HEAP32[$15>>2]|0;
  $16 = $14 & -2048;
  $17 = ($16|0)==(55296);
  $18 = ($14>>>0)>($Maxcode>>>0);
  $or$cond = $17 | $18;
  if ($or$cond) {
   $$0 = 2;
   label = 19;
   break;
  }
  $19 = ($14>>>0)<(128);
  do {
   if ($19) {
    $20 = HEAP32[$to_nxt>>2]|0;
    $21 = $20;
    $22 = (($13) - ($21))|0;
    $23 = ($22|0)<(1);
    if ($23) {
     $$0 = 1;
     label = 19;
     break L10;
    }
    $24 = $14&255;
    $25 = (($20) + 1|0);
    HEAP32[$to_nxt>>2] = $25;
    HEAP8[$20>>0] = $24;
   } else {
    $26 = ($14>>>0)<(2048);
    if ($26) {
     $27 = HEAP32[$to_nxt>>2]|0;
     $28 = $27;
     $29 = (($13) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $31 = $14 >>> 6;
     $32 = $31 | 192;
     $33 = $32&255;
     $34 = (($27) + 1|0);
     HEAP32[$to_nxt>>2] = $34;
     HEAP8[$27>>0] = $33;
     $35 = $14 & 63;
     $36 = $35 | 128;
     $37 = $36&255;
     $38 = HEAP32[$to_nxt>>2]|0;
     $39 = (($38) + 1|0);
     HEAP32[$to_nxt>>2] = $39;
     HEAP8[$38>>0] = $37;
     break;
    }
    $40 = ($14>>>0)<(65536);
    $41 = HEAP32[$to_nxt>>2]|0;
    $42 = $41;
    $43 = (($13) - ($42))|0;
    if ($40) {
     $44 = ($43|0)<(3);
     if ($44) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $45 = $14 >>> 12;
     $46 = $45 | 224;
     $47 = $46&255;
     $48 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $48;
     HEAP8[$41>>0] = $47;
     $49 = $14 >>> 6;
     $50 = $49 & 63;
     $51 = $50 | 128;
     $52 = $51&255;
     $53 = HEAP32[$to_nxt>>2]|0;
     $54 = (($53) + 1|0);
     HEAP32[$to_nxt>>2] = $54;
     HEAP8[$53>>0] = $52;
     $55 = $14 & 63;
     $56 = $55 | 128;
     $57 = $56&255;
     $58 = HEAP32[$to_nxt>>2]|0;
     $59 = (($58) + 1|0);
     HEAP32[$to_nxt>>2] = $59;
     HEAP8[$58>>0] = $57;
     break;
    } else {
     $60 = ($43|0)<(4);
     if ($60) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $61 = $14 >>> 18;
     $62 = $61 | 240;
     $63 = $62&255;
     $64 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $64;
     HEAP8[$41>>0] = $63;
     $65 = $14 >>> 12;
     $66 = $65 & 63;
     $67 = $66 | 128;
     $68 = $67&255;
     $69 = HEAP32[$to_nxt>>2]|0;
     $70 = (($69) + 1|0);
     HEAP32[$to_nxt>>2] = $70;
     HEAP8[$69>>0] = $68;
     $71 = $14 >>> 6;
     $72 = $71 & 63;
     $73 = $72 | 128;
     $74 = $73&255;
     $75 = HEAP32[$to_nxt>>2]|0;
     $76 = (($75) + 1|0);
     HEAP32[$to_nxt>>2] = $76;
     HEAP8[$75>>0] = $74;
     $77 = $14 & 63;
     $78 = $77 | 128;
     $79 = $78&255;
     $80 = HEAP32[$to_nxt>>2]|0;
     $81 = (($80) + 1|0);
     HEAP32[$to_nxt>>2] = $81;
     HEAP8[$80>>0] = $79;
     break;
    }
   }
  } while(0);
  $82 = HEAP32[$frm_nxt>>2]|0;
  $83 = (($82) + 4|0);
  HEAP32[$frm_nxt>>2] = $83;
  $84 = ($83>>>0)<($frm_end>>>0);
  if ($84) {
   $15 = $83;
  } else {
   $$0 = 0;
   label = 19;
   break;
  }
 }
 if ((label|0) == 19) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$off = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre = HEAP32[$frm_nxt>>2]|0;
 if ($1) {
  $16 = $$pre;
 } else {
  $2 = $frm_end;
  $3 = $$pre;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$$pre>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($$pre) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($$pre) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     if ($13) {
      $14 = (($$pre) + 3|0);
      HEAP32[$frm_nxt>>2] = $14;
      $16 = $14;
     } else {
      $16 = $$pre;
     }
    } else {
     $16 = $$pre;
    }
   } else {
    $16 = $$pre;
   }
  } else {
   $16 = $$pre;
  }
 }
 $15 = ($16>>>0)<($frm_end>>>0);
 L8: do {
  if ($15) {
   $17 = $frm_end;
   $$pre1 = HEAP32[$to_nxt>>2]|0;
   $19 = $$pre1;$21 = $16;
   while(1) {
    $18 = ($19>>>0)<($to_end>>>0);
    if (!($18)) {
     $108 = $21;
     label = 39;
     break L8;
    }
    $20 = HEAP8[$21>>0]|0;
    $22 = $20&255;
    $23 = ($20<<24>>24)>(-1);
    do {
     if ($23) {
      $24 = ($22>>>0)>($Maxcode>>>0);
      if ($24) {
       $$0 = 2;
       break L8;
      }
      HEAP32[$19>>2] = $22;
      $25 = (($21) + 1|0);
      HEAP32[$frm_nxt>>2] = $25;
     } else {
      $26 = ($20&255)<(194);
      if ($26) {
       $$0 = 2;
       break L8;
      }
      $27 = ($20&255)<(224);
      if ($27) {
       $28 = $21;
       $29 = (($17) - ($28))|0;
       $30 = ($29|0)<(2);
       if ($30) {
        $$0 = 1;
        break L8;
       }
       $31 = (($21) + 1|0);
       $32 = HEAP8[$31>>0]|0;
       $33 = $32&255;
       $34 = $33 & 192;
       $35 = ($34|0)==(128);
       if (!($35)) {
        $$0 = 2;
        break L8;
       }
       $36 = $22 << 6;
       $37 = $36 & 1984;
       $38 = $33 & 63;
       $39 = $38 | $37;
       $40 = ($39>>>0)>($Maxcode>>>0);
       if ($40) {
        $$0 = 2;
        break L8;
       }
       HEAP32[$19>>2] = $39;
       $41 = (($21) + 2|0);
       HEAP32[$frm_nxt>>2] = $41;
       break;
      }
      $42 = ($20&255)<(240);
      if ($42) {
       $43 = $21;
       $44 = (($17) - ($43))|0;
       $45 = ($44|0)<(3);
       if ($45) {
        $$0 = 1;
        break L8;
       }
       $46 = (($21) + 1|0);
       $47 = HEAP8[$46>>0]|0;
       $48 = (($21) + 2|0);
       $49 = HEAP8[$48>>0]|0;
       if ((($22|0) == 224)) {
        $50 = $47 & -32;
        $51 = ($50<<24>>24)==(-96);
        if (!($51)) {
         $$0 = 2;
         break L8;
        }
       } else if ((($22|0) == 237)) {
        $52 = $47 & -32;
        $53 = ($52<<24>>24)==(-128);
        if (!($53)) {
         $$0 = 2;
         break L8;
        }
       } else {
        $54 = $47 & -64;
        $55 = ($54<<24>>24)==(-128);
        if (!($55)) {
         $$0 = 2;
         break L8;
        }
       }
       $56 = $49&255;
       $57 = $56 & 192;
       $58 = ($57|0)==(128);
       if (!($58)) {
        $$0 = 2;
        break L8;
       }
       $59 = $22 << 12;
       $60 = $59 & 61440;
       $61 = $47&255;
       $62 = $61 << 6;
       $63 = $62 & 4032;
       $64 = $63 | $60;
       $65 = $56 & 63;
       $66 = $64 | $65;
       $67 = ($66>>>0)>($Maxcode>>>0);
       if ($67) {
        $$0 = 2;
        break L8;
       }
       HEAP32[$19>>2] = $66;
       $68 = (($21) + 3|0);
       HEAP32[$frm_nxt>>2] = $68;
       break;
      }
      $69 = ($20&255)<(245);
      if (!($69)) {
       $$0 = 2;
       break L8;
      }
      $70 = $21;
      $71 = (($17) - ($70))|0;
      $72 = ($71|0)<(4);
      if ($72) {
       $$0 = 1;
       break L8;
      }
      $73 = (($21) + 1|0);
      $74 = HEAP8[$73>>0]|0;
      $75 = (($21) + 2|0);
      $76 = HEAP8[$75>>0]|0;
      $77 = (($21) + 3|0);
      $78 = HEAP8[$77>>0]|0;
      if ((($22|0) == 244)) {
       $80 = $74 & -16;
       $81 = ($80<<24>>24)==(-128);
       if (!($81)) {
        $$0 = 2;
        break L8;
       }
      } else if ((($22|0) == 240)) {
       $$off = (($74) + 112)<<24>>24;
       $79 = ($$off&255)<(48);
       if (!($79)) {
        $$0 = 2;
        break L8;
       }
      } else {
       $82 = $74 & -64;
       $83 = ($82<<24>>24)==(-128);
       if (!($83)) {
        $$0 = 2;
        break L8;
       }
      }
      $84 = $76&255;
      $85 = $84 & 192;
      $86 = ($85|0)==(128);
      if (!($86)) {
       $$0 = 2;
       break L8;
      }
      $87 = $78&255;
      $88 = $87 & 192;
      $89 = ($88|0)==(128);
      if (!($89)) {
       $$0 = 2;
       break L8;
      }
      $90 = $22 << 18;
      $91 = $90 & 1835008;
      $92 = $74&255;
      $93 = $92 << 12;
      $94 = $93 & 258048;
      $95 = $94 | $91;
      $96 = $84 << 6;
      $97 = $96 & 4032;
      $98 = $95 | $97;
      $99 = $87 & 63;
      $100 = $98 | $99;
      $101 = ($100>>>0)>($Maxcode>>>0);
      if ($101) {
       $$0 = 2;
       break L8;
      }
      HEAP32[$19>>2] = $100;
      $102 = (($21) + 4|0);
      HEAP32[$frm_nxt>>2] = $102;
     }
    } while(0);
    $103 = HEAP32[$to_nxt>>2]|0;
    $104 = (($103) + 4|0);
    HEAP32[$to_nxt>>2] = $104;
    $105 = HEAP32[$frm_nxt>>2]|0;
    $106 = ($105>>>0)<($frm_end>>>0);
    if ($106) {
     $19 = $104;$21 = $105;
    } else {
     $108 = $105;
     label = 39;
     break;
    }
   }
  } else {
   $108 = $16;
   label = 39;
  }
 } while(0);
 if ((label|0) == 39) {
  $107 = ($108>>>0)<($frm_end>>>0);
  $109 = $107&1;
  $$0 = $109;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $nchar32_t$014 = 0, $or$cond = 0, $or$cond13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm_end;
  $3 = $frm;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$frm>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($frm) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($frm) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     $14 = (($frm) + 3|0);
     $$frm = $13 ? $14 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $15 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $16 = ($mx|0)!=(0);
 $or$cond13 = $15 & $16;
 L7: do {
  if ($or$cond13) {
   $17 = $frm_end;
   $frm_nxt$115 = $frm_nxt$1$ph;$nchar32_t$014 = 0;
   L9: while(1) {
    $18 = HEAP8[$frm_nxt$115>>0]|0;
    $19 = $18&255;
    $20 = ($18<<24>>24)>(-1);
    do {
     if ($20) {
      $21 = ($19>>>0)>($Maxcode>>>0);
      if ($21) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $22 = (($frm_nxt$115) + 1|0);
      $frm_nxt$2 = $22;
     } else {
      $23 = ($18&255)<(194);
      if ($23) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $24 = ($18&255)<(224);
      if ($24) {
       $25 = $frm_nxt$115;
       $26 = (($17) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $28 = (($frm_nxt$115) + 1|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = $29&255;
       $31 = $30 & 192;
       $32 = ($31|0)==(128);
       if (!($32)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $33 = $19 << 6;
       $34 = $33 & 1984;
       $35 = $30 & 63;
       $36 = $35 | $34;
       $37 = ($36>>>0)>($Maxcode>>>0);
       if ($37) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $38 = (($frm_nxt$115) + 2|0);
       $frm_nxt$2 = $38;
       break;
      }
      $39 = ($18&255)<(240);
      if ($39) {
       $40 = $frm_nxt$115;
       $41 = (($17) - ($40))|0;
       $42 = ($41|0)<(3);
       if ($42) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $43 = (($frm_nxt$115) + 1|0);
       $44 = HEAP8[$43>>0]|0;
       $45 = (($frm_nxt$115) + 2|0);
       $46 = HEAP8[$45>>0]|0;
       if ((($19|0) == 224)) {
        $47 = $44 & -32;
        $48 = ($47<<24>>24)==(-96);
        if (!($48)) {
         label = 21;
         break L9;
        }
       } else if ((($19|0) == 237)) {
        $51 = $44 & -32;
        $52 = ($51<<24>>24)==(-128);
        if (!($52)) {
         label = 23;
         break L9;
        }
       } else {
        $55 = $44 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         label = 25;
         break L9;
        }
       }
       $59 = $46&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $62 = $19 << 12;
       $63 = $62 & 61440;
       $64 = $44&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $59 & 63;
       $69 = $67 | $68;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $71 = (($frm_nxt$115) + 3|0);
       $frm_nxt$2 = $71;
       break;
      }
      $72 = ($18&255)<(245);
      if (!($72)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $73 = $frm_nxt$115;
      $74 = (($17) - ($73))|0;
      $75 = ($74|0)<(4);
      if ($75) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $76 = (($frm_nxt$115) + 1|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = (($frm_nxt$115) + 2|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = (($frm_nxt$115) + 3|0);
      $81 = HEAP8[$80>>0]|0;
      if ((($19|0) == 244)) {
       $85 = $77 & -16;
       $86 = ($85<<24>>24)==(-128);
       if (!($86)) {
        label = 35;
        break L9;
       }
      } else if ((($19|0) == 240)) {
       $$off = (($77) + 112)<<24>>24;
       $82 = ($$off&255)<(48);
       if (!($82)) {
        label = 33;
        break L9;
       }
      } else {
       $89 = $77 & -64;
       $90 = ($89<<24>>24)==(-128);
       if (!($90)) {
        label = 37;
        break L9;
       }
      }
      $93 = $79&255;
      $94 = $93 & 192;
      $95 = ($94|0)==(128);
      if (!($95)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $96 = $81&255;
      $97 = $96 & 192;
      $98 = ($97|0)==(128);
      if (!($98)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $99 = $19 << 18;
      $100 = $99 & 1835008;
      $101 = $77&255;
      $102 = $101 << 12;
      $103 = $102 & 258048;
      $104 = $103 | $100;
      $105 = $93 << 6;
      $106 = $105 & 4032;
      $107 = $104 | $106;
      $108 = $96 & 63;
      $109 = $107 | $108;
      $110 = ($109>>>0)>($Maxcode>>>0);
      if ($110) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $111 = (($frm_nxt$115) + 4|0);
      $frm_nxt$2 = $111;
     }
    } while(0);
    $112 = (($nchar32_t$014) + 1)|0;
    $113 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $114 = ($112>>>0)<($mx>>>0);
    $or$cond = $113 & $114;
    if ($or$cond) {
     $frm_nxt$115 = $frm_nxt$2;$nchar32_t$014 = $112;
    } else {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    }
   }
   if ((label|0) == 21) {
    $49 = $frm;
    $50 = (($40) - ($49))|0;
    $$0 = $50;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 23) {
    $53 = $frm;
    $54 = (($40) - ($53))|0;
    $$0 = $54;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 25) {
    $57 = $frm;
    $58 = (($40) - ($57))|0;
    $$0 = $58;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 33) {
    $83 = $frm;
    $84 = (($73) - ($83))|0;
    $$0 = $84;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 35) {
    $87 = $frm;
    $88 = (($73) - ($87))|0;
    $$0 = $88;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 37) {
    $91 = $frm;
    $92 = (($73) - ($91))|0;
    $$0 = $92;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while(0);
 $115 = $frm_nxt$1$lcssa;
 $116 = $frm;
 $117 = (($115) - ($116))|0;
 $$0 = $117;
 STACKTOP = sp;return ($$0|0);
}
function ___cxx_global_array_dtor112($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18200 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18200 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18200 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18200 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18200 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18200 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18200 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18200 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18200 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18200 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18200 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18200 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18200 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(18200);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor97($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17664 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17664 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17664 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17664 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17664 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17664 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17664 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17664 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17664 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17664 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17664 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17664 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17664 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(17664);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor73($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17152 + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17152 + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17152 + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17152 + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17152 + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17152 + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17152 + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17152 + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17152 + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17152 + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17152 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17152 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17152 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17152 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17152 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17152 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17152 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17152 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17152 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17152 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17152 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17152 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17152 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(17152);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor48($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16312 + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16312 + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16312 + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16312 + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16312 + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16312 + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16312 + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16312 + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16312 + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16312 + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16312 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16312 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16312 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16312 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16312 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16312 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16312 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16312 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16312 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16312 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16312 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16312 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((16312 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(16312);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor45($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16000 + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16000 + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16000 + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16000 + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16000 + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16000 + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16000 + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16000 + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16000 + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16000 + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16000 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16000 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16000 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16000 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16000 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16000 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16000 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16000 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16000 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16000 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16000 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16000 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16000 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(16000);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15672 + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15672 + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15672 + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15672 + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15672 + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15672 + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15672 + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15672 + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15672 + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15672 + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15672 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15672 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15672 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15672 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15672 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15672 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15672 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15672 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15672 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15672 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15672 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15672 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15672 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(15672);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  if (!($__consume)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$3>>2] = -1;
  HEAP8[$0>>0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 $8 = $7 ? $6 : 1;
 $9 = ($8|0)>(0);
 L8: do {
  if ($9) {
   $10 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $11 = HEAP32[$10>>2]|0;
    $12 = (_getc(($11|0))|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0 = -1;
     break;
    }
    $14 = $12&255;
    $15 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$15>>0] = $14;
    $16 = (($__i$09) + 1)|0;
    $17 = ($16|0)<($8|0);
    if ($17) {
     $__i$09 = $16;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = (($this) + 53|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==(0);
 L15: do {
  if ($20) {
   $21 = (($this) + 40|0);
   $22 = (($this) + 36|0);
   $23 = (($__1buf) + 4|0);
   $24 = (($this) + 32|0);
   $__nread$0 = $8;
   while(1) {
    $27 = HEAP32[$21>>2]|0;
    $28 = $27;
    $29 = $28;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 4)|0;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP32[$22>>2]|0;
    $35 = (($__extbuf) + ($__nread$0)|0);
    $36 = HEAP32[$34>>2]|0;
    $37 = (($36) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iiiiiiiii[$38 & 511]($34,$27,$__extbuf,$35,$__enxt,$__1buf,$23,$__inxt)|0);
    if ((($39|0) == 2)) {
     $$0 = -1;
     label = 22;
     break;
    } else if ((($39|0) == 3)) {
     label = 14;
     break;
    } else if (!((($39|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $40 = HEAP32[$21>>2]|0;
    $41 = $40;
    $42 = $41;
    HEAP32[$42>>2] = $30;
    $43 = (($41) + 4)|0;
    $44 = $43;
    HEAP32[$44>>2] = $33;
    $45 = ($__nread$0|0)==(8);
    if ($45) {
     $$0 = -1;
     label = 22;
     break;
    }
    $46 = HEAP32[$24>>2]|0;
    $47 = (_getc(($46|0))|0);
    $48 = ($47|0)==(-1);
    if ($48) {
     $$0 = -1;
     label = 22;
     break;
    }
    $51 = $47&255;
    HEAP8[$35>>0] = $51;
    $52 = (($__nread$0) + 1)|0;
    $__nread$0 = $52;
   }
   if ((label|0) == 14) {
    $49 = HEAP8[$__extbuf>>0]|0;
    $50 = $49 << 24 >> 24;
    HEAP32[$__1buf>>2] = $50;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 22) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $25 = HEAP8[$__extbuf>>0]|0;
   $26 = $25 << 24 >> 24;
   HEAP32[$__1buf>>2] = $26;
   $__nread$2 = $8;
  }
 } while(0);
 if ($__consume) {
  $62 = HEAP32[$__1buf>>2]|0;
  $63 = (($this) + 48|0);
  HEAP32[$63>>2] = $62;
  $$0 = $62;
  STACKTOP = sp;return ($$0|0);
 }
 $53 = (($this) + 32|0);
 $__i2$0 = $__nread$2;
 while(1) {
  $54 = ($__i2$0|0)>(0);
  if (!($54)) {
   break;
  }
  $55 = (($__i2$0) + -1)|0;
  $56 = (($__extbuf) + ($55)|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57 << 24 >> 24;
  $59 = HEAP32[$53>>2]|0;
  $60 = (_ungetc(($58|0),($59|0))|0);
  $61 = ($60|0)==(-1);
  if ($61) {
   $$0 = -1;
   label = 22;
   break;
  } else {
   $__i2$0 = $55;
  }
 }
 if ((label|0) == 22) {
  STACKTOP = sp;return ($$0|0);
 }
 $$pre = HEAP32[$__1buf>>2]|0;
 $$0 = $$pre;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  if (!($__consume)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$3>>2] = -1;
  HEAP8[$0>>0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 $8 = $7 ? $6 : 1;
 $9 = ($8|0)>(0);
 L8: do {
  if ($9) {
   $10 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $11 = HEAP32[$10>>2]|0;
    $12 = (_getc(($11|0))|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0 = -1;
     break;
    }
    $14 = $12&255;
    $15 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$15>>0] = $14;
    $16 = (($__i$09) + 1)|0;
    $17 = ($16|0)<($8|0);
    if ($17) {
     $__i$09 = $16;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = (($this) + 53|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==(0);
 L15: do {
  if ($20) {
   $21 = (($this) + 40|0);
   $22 = (($this) + 36|0);
   $23 = (($__1buf) + 1|0);
   $24 = (($this) + 32|0);
   $__nread$0 = $8;
   while(1) {
    $26 = HEAP32[$21>>2]|0;
    $27 = $26;
    $28 = $27;
    $29 = HEAP32[$28>>2]|0;
    $30 = (($27) + 4)|0;
    $31 = $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = HEAP32[$22>>2]|0;
    $34 = (($__extbuf) + ($__nread$0)|0);
    $35 = HEAP32[$33>>2]|0;
    $36 = (($35) + 16|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_iiiiiiiii[$37 & 511]($33,$26,$__extbuf,$34,$__enxt,$__1buf,$23,$__inxt)|0);
    if ((($38|0) == 2)) {
     $$0 = -1;
     label = 23;
     break;
    } else if ((($38|0) == 3)) {
     label = 14;
     break;
    } else if (!((($38|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $39 = HEAP32[$21>>2]|0;
    $40 = $39;
    $41 = $40;
    HEAP32[$41>>2] = $29;
    $42 = (($40) + 4)|0;
    $43 = $42;
    HEAP32[$43>>2] = $32;
    $44 = ($__nread$0|0)==(8);
    if ($44) {
     $$0 = -1;
     label = 23;
     break;
    }
    $45 = HEAP32[$24>>2]|0;
    $46 = (_getc(($45|0))|0);
    $47 = ($46|0)==(-1);
    if ($47) {
     $$0 = -1;
     label = 23;
     break;
    }
    $49 = $46&255;
    HEAP8[$34>>0] = $49;
    $50 = (($__nread$0) + 1)|0;
    $__nread$0 = $50;
   }
   if ((label|0) == 14) {
    $48 = HEAP8[$__extbuf>>0]|0;
    HEAP8[$__1buf>>0] = $48;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $25 = HEAP8[$__extbuf>>0]|0;
   HEAP8[$__1buf>>0] = $25;
   $__nread$2 = $8;
  }
 } while(0);
 do {
  if ($__consume) {
   $60 = HEAP8[$__1buf>>0]|0;
   $61 = $60&255;
   $62 = (($this) + 48|0);
   HEAP32[$62>>2] = $61;
   $64 = $60;
  } else {
   $51 = (($this) + 32|0);
   $__i2$0 = $__nread$2;
   while(1) {
    $52 = ($__i2$0|0)>(0);
    if (!($52)) {
     label = 21;
     break;
    }
    $53 = (($__i2$0) + -1)|0;
    $54 = (($__extbuf) + ($53)|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    $57 = HEAP32[$51>>2]|0;
    $58 = (_ungetc(($56|0),($57|0))|0);
    $59 = ($58|0)==(-1);
    if ($59) {
     $$0 = -1;
     label = 23;
     break;
    } else {
     $__i2$0 = $53;
    }
   }
   if ((label|0) == 21) {
    $$pre = HEAP8[$__1buf>>0]|0;
    $64 = $$pre;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $63 = $64&255;
 $$0 = $63;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = (__ZNSt3__16__clocEv()|0);
 $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
 $5 = tempRet0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  HEAP32[$1>>2] = $2;
 }
 $8 = HEAP32[$__p2>>2]|0;
 $9 = ($8|0)==($__a_end|0);
 if (!($9)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ($6|0)==(34);
 do {
  if ($10) {
   HEAP32[$__err>>2] = 4;
   $21 = ($5|0)>(0);
   $22 = ($4>>>0)>(0);
   $23 = ($5|0)==(0);
   $24 = $23 & $22;
   $25 = $21 | $24;
   if ($25) {
    $$0 = 2147483647;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $11 = ($5|0)<(-1);
   $12 = ($4>>>0)<(2147483648);
   $13 = ($5|0)==(-1);
   $14 = $13 & $12;
   $15 = $11 | $14;
   if ($15) {
    HEAP32[$__err>>2] = 4;
    break;
   }
   $16 = ($5|0)>(0);
   $17 = ($4>>>0)>(2147483647);
   $18 = ($5|0)==(0);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    HEAP32[$__err>>2] = 4;
    $$0 = 2147483647;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$0 = $4;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$0 = -2147483648;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $18 = 0;$19 = 0;
  tempRet0 = $18;
  STACKTOP = sp;return ($19|0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = (__ZNSt3__16__clocEv()|0);
 $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
 $5 = tempRet0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  HEAP32[$1>>2] = $2;
 }
 $8 = HEAP32[$__p2>>2]|0;
 $9 = ($8|0)==($__a_end|0);
 if (!($9)) {
  HEAP32[$__err>>2] = 4;
  $18 = 0;$19 = 0;
  tempRet0 = $18;
  STACKTOP = sp;return ($19|0);
 }
 $10 = ($6|0)==(34);
 if ($10) {
  HEAP32[$__err>>2] = 4;
  $11 = ($5|0)>(0);
  $12 = ($4>>>0)>(0);
  $13 = ($5|0)==(0);
  $14 = $13 & $12;
  $15 = $11 | $14;
  $16 = $15 ? -1 : 0;
  $17 = $15 ? 2147483647 : -2147483648;
  tempRet0 = $17;
  STACKTOP = sp;return ($16|0);
 } else {
  $18 = $5;$19 = $4;
  tempRet0 = $18;
  STACKTOP = sp;return ($19|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = (__ZNSt3__16__clocEv()|0);
 $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
 $7 = tempRet0;
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$3>>2] = $4;
 }
 $10 = HEAP32[$__p2>>2]|0;
 $11 = ($10|0)==($__a_end|0);
 if (!($11)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($8|0)==(34);
 $13 = ($7>>>0)>(0);
 $14 = ($6>>>0)>(65535);
 $15 = ($7|0)==(0);
 $16 = $15 & $14;
 $17 = $13 | $16;
 $or$cond = $12 | $17;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $18 = $6&65535;
  $$0 = $18;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = (__ZNSt3__16__clocEv()|0);
 $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
 $7 = tempRet0;
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$3>>2] = $4;
 }
 $10 = HEAP32[$__p2>>2]|0;
 $11 = ($10|0)==($__a_end|0);
 if (!($11)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($8|0)==(34);
 $13 = ($7>>>0)>(0);
 $14 = ($6>>>0)>(4294967295);
 $15 = ($7|0)==(0);
 $16 = $15 & $14;
 $17 = $13 | $16;
 $or$cond = $12 | $17;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = (__ZNSt3__16__clocEv()|0);
 $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
 $7 = tempRet0;
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$3>>2] = $4;
 }
 $10 = HEAP32[$__p2>>2]|0;
 $11 = ($10|0)==($__a_end|0);
 if (!($11)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($8|0)==(34);
 $13 = ($7>>>0)>(0);
 $14 = ($6>>>0)>(4294967295);
 $15 = ($7|0)==(0);
 $16 = $15 & $14;
 $17 = $13 | $16;
 $or$cond = $12 | $17;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $13 = 0;$14 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $13 = 0;$14 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $13 = 0;$14 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   if ($12) {
    HEAP32[$__err>>2] = 4;
    $13 = -1;$14 = -1;
   } else {
    $13 = $7;$14 = $6;
   }
  }
 } while(0);
 tempRet0 = $13;
 STACKTOP = sp;return ($14|0);
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = (__ZNSt3__16__clocEv()|0);
 $4 = (+_strtold_l($__a,$__p2,$3));
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  HEAP32[$1>>2] = $2;
 }
 $7 = HEAP32[$__p2>>2]|0;
 $8 = ($7|0)==($__a_end|0);
 if (!($8)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $9 = ($5|0)==(34);
 if ($9) {
  HEAP32[$__err>>2] = 4;
 }
 $10 = $4;
 $$0 = $10;
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i$i = 0, $$not$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741823);
 if ($0) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = (($this) + 128|0);
 $2 = HEAP8[$1>>0]|0;
 $$not$i$i = ($2<<24>>24)==(0);
 $3 = ($__n>>>0)<(29);
 $or$cond$i$i = $$not$i$i & $3;
 if ($or$cond$i$i) {
  $4 = (($this) + 16|0);
  HEAP8[$1>>0] = 1;
  $$0$i$i = $4;
 } else {
  $5 = $__n << 2;
  $6 = (__Znwj($5)|0);
  $$0$i$i = $6;
 }
 $7 = (($this) + 4|0);
 HEAP32[$7>>2] = $$0$i$i;
 HEAP32[$this>>2] = $$0$i$i;
 $8 = (($$0$i$i) + ($__n<<2)|0);
 $9 = (($this) + 8|0);
 HEAP32[$9>>2] = $8;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $$pre = HEAP32[$0>>2]|0;
 $$0 = $__n;$2 = $$pre;
 while(1) {
  $1 = ($2|0)==(0|0);
  if ($1) {
   $4 = 0;
  } else {
   HEAP32[$2>>2] = 0;
   $$pre1 = HEAP32[$0>>2]|0;
   $4 = $$pre1;
  }
  $3 = (($4) + 4|0);
  HEAP32[$0>>2] = $3;
  $5 = (($$0) + -1)|0;
  $6 = ($5|0)==(0);
  if ($6) {
   break;
  } else {
   $$0 = $5;$2 = $3;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)<($__n>>>0);
 if (!($8)) {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
  STACKTOP = sp;return;
 }
 $9 = (($this) + 16|0);
 $10 = HEAP32[$this>>2]|0;
 $11 = $10;
 $12 = (($5) - ($11))|0;
 $13 = $12 >> 2;
 $14 = (($13) + ($__n))|0;
 $15 = ($14>>>0)>(1073741823);
 if ($15) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $16 = (($4) - ($11))|0;
 $17 = $16 >> 2;
 $18 = ($17>>>0)<(536870911);
 if ($18) {
  $19 = $16 >> 1;
  $20 = ($19>>>0)<($14>>>0);
  $21 = $20 ? $14 : $19;
  $$0$i = $21;
 } else {
  $$0$i = 1073741823;
 }
 __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($__v,$$0$i,$13,$9);
 __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($__v,$__n);
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v);
 __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $$not$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 do {
  if ($2) {
   $8 = 0;
  } else {
   $3 = (($__a) + 112|0);
   $4 = HEAP8[$3>>0]|0;
   $$not$i$i = ($4<<24>>24)==(0);
   $5 = ($__cap>>>0)<(29);
   $or$cond$i$i = $$not$i$i & $5;
   if ($or$cond$i$i) {
    HEAP8[$3>>0] = 1;
    $8 = $__a;
    break;
   } else {
    $6 = $__cap << 2;
    $7 = (__Znwj($6)|0);
    $8 = $7;
    break;
   }
  }
 } while(0);
 HEAP32[$this>>2] = $8;
 $9 = (($8) + ($__start<<2)|0);
 $10 = (($this) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = (($this) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = (($8) + ($__cap<<2)|0);
 HEAP32[$0>>2] = $12;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $$pre = HEAP32[$0>>2]|0;
 $$0 = $__n;$2 = $$pre;
 while(1) {
  $1 = ($2|0)==(0|0);
  if ($1) {
   $4 = 0;
  } else {
   HEAP32[$2>>2] = 0;
   $$pre1 = HEAP32[$0>>2]|0;
   $4 = $$pre1;
  }
  $3 = (($4) + 4|0);
  HEAP32[$0>>2] = $3;
  $5 = (($$0) + -1)|0;
  $6 = ($5|0)==(0);
  if ($6) {
   break;
  } else {
   $$0 = $5;$2 = $3;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = HEAP32[$3>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9<<2)|0);
 HEAP32[$3>>2] = $10;
 _memcpy(($10|0),($0|0),($6|0))|0;
 $11 = HEAP32[$this>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $12;
 HEAP32[$3>>2] = $11;
 $13 = (($__v) + 8|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$13>>2]|0;
 HEAP32[$1>>2] = $15;
 HEAP32[$13>>2] = $14;
 $16 = (($this) + 8|0);
 $17 = (($__v) + 12|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $20;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $__new_last2$i$i$i = $1;
  $scevgep$i$i$i = (($3) + -4|0);
  $5 = $scevgep$i$i$i;
  $6 = (($5) - ($__new_last2$i$i$i))|0;
  $7 = $6 >>> 2;
  $8 = $7 ^ -1;
  $scevgep4$i$i$i = (($3) + ($8<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i$i;
 }
 $9 = HEAP32[$this>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = (($this) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($9|0);
 if ($13) {
  $14 = (($12) + 112|0);
  HEAP8[$14>>0] = 0;
  STACKTOP = sp;return;
 } else {
  __ZdlPv($9);
  STACKTOP = sp;return;
 }
}
function _strtoull_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoull($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = $1;
 STACKTOP = sp;return ($0|0);
}
function _strtoll_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoll($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = $1;
 STACKTOP = sp;return ($0|0);
}
function _isdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $0 = $isdigit&1;
 STACKTOP = sp;return ($0|0);
}
function _isxdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isxdigit($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _mbrlen($s,$n,$st) {
 $s = $s|0;
 $n = $n|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)!=(0|0);
 $1 = $0 ? $st : 18720;
 $2 = (_mbrtowc(0,$s,$n,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($st|0)==(0|0);
 $$01 = $1 ? 18728 : $st;
 $2 = HEAP32[$$01>>2]|0;
 $3 = ($src|0)==(0|0);
 L1: do {
  if ($3) {
   $4 = ($2|0)==(0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $5 = ($wc|0)==(0|0);
   if ($5) {
    HEAP32[$0>>2] = $0;
    $11 = $0;
   } else {
    $11 = $wc;
   }
   $6 = ($n|0)==(0);
   if ($6) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($2|0)==(0);
   do {
    if ($7) {
     $8 = HEAP8[$src>>0]|0;
     $9 = $8&255;
     $10 = ($8<<24>>24)>(-1);
     if ($10) {
      HEAP32[$11>>2] = $9;
      $12 = ($8<<24>>24)!=(0);
      $13 = $12&1;
      $$0 = $13;
      STACKTOP = sp;return ($$0|0);
     } else {
      $14 = (($9) + -194)|0;
      $15 = ($14>>>0)>(50);
      if ($15) {
       break L1;
      }
      $16 = (($src) + 1|0);
      $17 = (18512 + ($14<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (($n) + -1)|0;
      $$02 = $19;$c$0 = $18;$s$0 = $16;
      break;
     }
    } else {
     $$02 = $n;$c$0 = $2;$s$0 = $src;
    }
   } while(0);
   $20 = ($$02|0)==(0);
   L17: do {
    if ($20) {
     $c$2 = $c$0;
    } else {
     $21 = HEAP8[$s$0>>0]|0;
     $22 = $21&255;
     $23 = $22 >>> 3;
     $24 = (($23) + -16)|0;
     $25 = $c$0 >> 26;
     $26 = (($23) + ($25))|0;
     $27 = $24 | $26;
     $28 = ($27>>>0)>(7);
     if ($28) {
      break L1;
     } else {
      $$1 = $$02;$32 = $21;$c$1 = $c$0;$s$1 = $s$0;
     }
     while(1) {
      $29 = $c$1 << 6;
      $30 = (($s$1) + 1|0);
      $31 = $32&255;
      $33 = (($31) + -128)|0;
      $34 = $33 | $29;
      $35 = (($$1) + -1)|0;
      $36 = ($34|0)<(0);
      if (!($36)) {
       break;
      }
      $38 = ($35|0)==(0);
      if ($38) {
       $c$2 = $34;
       break L17;
      }
      $39 = HEAP8[$30>>0]|0;
      $40 = $39 & -64;
      $41 = ($40<<24>>24)==(-128);
      if ($41) {
       $$1 = $35;$32 = $39;$c$1 = $34;$s$1 = $30;
      } else {
       break L1;
      }
     }
     HEAP32[$$01>>2] = 0;
     HEAP32[$11>>2] = $34;
     $37 = (($n) - ($35))|0;
     $$0 = $37;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   HEAP32[$$01>>2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$01>>2] = 0;
 $42 = (___errno_location()|0);
 HEAP32[$42>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
 $wcs = $wcs|0;
 $src = $src|0;
 $n = $n|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0$lcssa = 0, $$014$ = 0, $$014$lcssa = 0, $$01428 = 0, $$031 = 0, $$115 = 0, $$2 = 0, $$3 = 0, $$old4 = 0, $$old7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $cnt$0$lcssa = 0, $cnt$029 = 0, $cnt$2 = 0, $cnt$3 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond13 = 0, $or$cond27 = 0, $or$cond5 = 0, $or$cond8 = 0, $s = 0, $wbuf = 0, $wcs$ = 0, $wn$ = 0, $ws$0$lcssa = 0, $ws$030 = 0, $ws$1 = 0;
 var $ws$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wbuf = sp + 8|0;
 $s = sp;
 $0 = HEAP32[$src>>2]|0;
 HEAP32[$s>>2] = $0;
 $1 = ($wcs|0)!=(0|0);
 $wn$ = $1 ? $wn : 256;
 $wcs$ = $1 ? $wcs : $wbuf;
 $2 = ($0|0)!=(0|0);
 $3 = ($wn$|0)!=(0);
 $or$cond27 = $2 & $3;
 L1: do {
  if ($or$cond27) {
   $$01428 = $wn$;$$031 = $n;$32 = $0;$cnt$029 = 0;$ws$030 = $wcs$;
   while(1) {
    $4 = $$031 >>> 2;
    $5 = ($4>>>0)>=($$01428>>>0);
    $6 = ($$031>>>0)>(131);
    $or$cond13 = $5 | $6;
    if (!($or$cond13)) {
     $$0$lcssa = $$031;$$014$lcssa = $$01428;$18 = $32;$cnt$0$lcssa = $cnt$029;$ws$0$lcssa = $ws$030;
     label = 7;
     break L1;
    }
    $$014$ = $5 ? $$01428 : $4;
    $7 = (($$031) - ($$014$))|0;
    $8 = (_mbsrtowcs($ws$030,$s,$$014$,$st)|0);
    $9 = ($8|0)==(-1);
    if ($9) {
     $cnt$3 = -1;
     break L1;
    }
    $10 = ($ws$030|0)==($wbuf|0);
    if ($10) {
     $$115 = $$01428;$ws$1 = $wbuf;
    } else {
     $11 = (($ws$030) + ($8<<2)|0);
     $12 = (($$01428) - ($8))|0;
     $$115 = $12;$ws$1 = $11;
    }
    $13 = (($8) + ($cnt$029))|0;
    $14 = HEAP32[$s>>2]|0;
    $15 = ($14|0)!=(0|0);
    $16 = ($$115|0)!=(0);
    $or$cond = $15 & $16;
    if ($or$cond) {
     $$01428 = $$115;$$031 = $7;$32 = $14;$cnt$029 = $13;$ws$030 = $ws$1;
    } else {
     $$0$lcssa = $7;$$014$lcssa = $$115;$18 = $14;$cnt$0$lcssa = $13;$ws$0$lcssa = $ws$1;
     label = 7;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$014$lcssa = $wn$;$18 = $0;$cnt$0$lcssa = 0;$ws$0$lcssa = $wcs$;
   label = 7;
  }
 } while(0);
 L9: do {
  if ((label|0) == 7) {
   $17 = ($18|0)!=(0|0);
   $19 = ($$014$lcssa|0)!=(0);
   $or$cond5 = $17 & $19;
   $20 = ($$0$lcssa|0)!=(0);
   $or$cond8 = $or$cond5 & $20;
   if ($or$cond8) {
    $$2 = $$0$lcssa;$$3 = $$014$lcssa;$21 = $18;$cnt$2 = $cnt$0$lcssa;$ws$2 = $ws$0$lcssa;
    while(1) {
     $22 = (_mbrtowc($ws$2,$21,$$2,$st)|0);
     $23 = (($22) + 2)|0;
     $24 = ($23>>>0)<(3);
     if ($24) {
      break;
     }
     $25 = HEAP32[$s>>2]|0;
     $26 = (($25) + ($22)|0);
     HEAP32[$s>>2] = $26;
     $27 = (($$2) - ($22))|0;
     $28 = (($ws$2) + 4|0);
     $29 = (($$3) + -1)|0;
     $30 = (($cnt$2) + 1)|0;
     $$old4 = ($29|0)!=(0);
     $$old7 = ($$2|0)!=($22|0);
     $or$cond10 = $$old4 & $$old7;
     if ($or$cond10) {
      $$2 = $27;$$3 = $29;$21 = $26;$cnt$2 = $30;$ws$2 = $28;
     } else {
      $cnt$3 = $30;
      break L9;
     }
    }
    if ((($22|0) == -1)) {
     $cnt$3 = -1;
     break;
    } else if ((($22|0) == 0)) {
     HEAP32[$s>>2] = 0;
     $cnt$3 = $cnt$2;
     break;
    } else {
     HEAP32[$st>>2] = 0;
     $cnt$3 = $cnt$2;
     break;
    }
   } else {
    $cnt$3 = $cnt$0$lcssa;
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $31 = HEAP32[$s>>2]|0;
 HEAP32[$src>>2] = $31;
 STACKTOP = sp;return ($cnt$3|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$02$ph = 0, $$0217 = 0, $$03 = 0, $$1 = 0, $$14$lcssa = 0, $$148 = 0, $$2 = 0, $$25 = 0, $$3 = 0, $$36 = 0, $$4 = 0, $$431 = 0, $$432 = 0, $$47$ph = 0, $$4716 = 0, $$5 = 0, $$6 = 0, $$7 = 0, $$8 = 0;
 var $$830 = 0, $$in = 0, $$old1 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $or$cond = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0;
 var $s$1033 = 0, $s$1034 = 0, $s$19 = 0, $s$2 = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0, $s$518 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $1 = ($st|0)==(0|0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$st>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   label = 5;
  } else {
   $4 = ($ws|0)==(0|0);
   if ($4) {
    $$36 = $wn;$c$2 = $2;$s$3 = $0;
    label = 16;
   } else {
    HEAP32[$st>>2] = 0;
    $$3 = $ws;$$7 = $wn;$c$4 = $2;$s$8 = $0;
    label = 36;
   }
  }
 }
 if ((label|0) == 5) {
  $5 = ($ws|0)==(0|0);
  if ($5) {
   $$03 = $wn;$s$0 = $0;
   label = 7;
  } else {
   $$02$ph = $ws;$$47$ph = $wn;$s$5$ph = $0;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $6 = ($$47$ph|0)==(0);
   if ($6) {
    $s$5$lcssa = $s$5$ph;
    label = 26;
    break;
   } else {
    $$0217 = $$02$ph;$$4716 = $$47$ph;$s$518 = $s$5$ph;
   }
   while(1) {
    $63 = HEAP8[$s$518>>0]|0;
    $64 = $63&255;
    $65 = (($64) + -1)|0;
    $66 = ($65>>>0)<(127);
    L25: do {
     if ($66) {
      $67 = $s$518;
      $68 = $67 & 3;
      $69 = ($68|0)==(0);
      $70 = ($$4716>>>0)>(4);
      $or$cond = $69 & $70;
      if ($or$cond) {
       $$1 = $$0217;$$5 = $$4716;$s$6 = $s$518;
       while(1) {
        $71 = HEAP32[$s$6>>2]|0;
        $72 = (($71) + -16843009)|0;
        $73 = $72 | $71;
        $74 = $73 & -2139062144;
        $75 = ($74|0)==(0);
        $76 = $71&255;
        if (!($75)) {
         $$2 = $$1;$$6 = $$5;$94 = $76;$s$7 = $s$6;
         break L25;
        }
        $77 = (($s$6) + 1|0);
        $78 = $71 & 255;
        $79 = (($$1) + 4|0);
        HEAP32[$$1>>2] = $78;
        $80 = (($s$6) + 2|0);
        $81 = HEAP8[$77>>0]|0;
        $82 = $81&255;
        $83 = (($$1) + 8|0);
        HEAP32[$79>>2] = $82;
        $84 = (($s$6) + 3|0);
        $85 = HEAP8[$80>>0]|0;
        $86 = $85&255;
        $87 = (($$1) + 12|0);
        HEAP32[$83>>2] = $86;
        $88 = (($s$6) + 4|0);
        $89 = HEAP8[$84>>0]|0;
        $90 = $89&255;
        $91 = (($$1) + 16|0);
        HEAP32[$87>>2] = $90;
        $92 = (($$5) + -4)|0;
        $$old1 = ($92>>>0)>(4);
        if ($$old1) {
         $$1 = $91;$$5 = $92;$s$6 = $88;
        } else {
         break;
        }
       }
       $$pre$pre = HEAP8[$88>>0]|0;
       $$2 = $91;$$6 = $92;$94 = $$pre$pre;$s$7 = $88;
      } else {
       $$2 = $$0217;$$6 = $$4716;$94 = $63;$s$7 = $s$518;
      }
     } else {
      $$2 = $$0217;$$6 = $$4716;$94 = $63;$s$7 = $s$518;
     }
    } while(0);
    $93 = $94&255;
    $95 = (($93) + -1)|0;
    $96 = ($95>>>0)<(127);
    if (!($96)) {
     break;
    }
    $97 = (($s$7) + 1|0);
    $98 = (($$2) + 4|0);
    HEAP32[$$2>>2] = $93;
    $99 = (($$6) + -1)|0;
    $100 = ($99|0)==(0);
    if ($100) {
     $s$5$lcssa = $97;
     label = 26;
     break L7;
    } else {
     $$0217 = $98;$$4716 = $99;$s$518 = $97;
    }
   }
   $101 = (($93) + -194)|0;
   $102 = ($101>>>0)>(50);
   if ($102) {
    $$432 = $$2;$$830 = $$6;$s$1034 = $s$7;
    label = 47;
    break;
   }
   $103 = (($s$7) + 1|0);
   $104 = (18512 + ($101<<2)|0);
   $105 = HEAP32[$104>>2]|0;
   $$3 = $$2;$$7 = $$6;$c$4 = $105;$s$8 = $103;
   label = 36;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $7 = HEAP8[$s$0>>0]|0;
   $8 = $7&255;
   $9 = (($8) + -1)|0;
   $10 = ($9>>>0)<(127);
   if ($10) {
    $11 = $s$0;
    $12 = $11 & 3;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = HEAP32[$s$0>>2]|0;
     $15 = (($14) + -16843009)|0;
     $16 = $15 | $14;
     $17 = $16 & -2139062144;
     $18 = ($17|0)==(0);
     if ($18) {
      $$148 = $$03;$s$19 = $s$0;
      while(1) {
       $19 = (($s$19) + 4|0);
       $20 = (($$148) + -4)|0;
       $21 = HEAP32[$19>>2]|0;
       $22 = (($21) + -16843009)|0;
       $23 = $22 | $21;
       $24 = $23 & -2139062144;
       $25 = ($24|0)==(0);
       if ($25) {
        $$148 = $20;$s$19 = $19;
       } else {
        $$14$lcssa = $20;$$in = $21;$s$1$lcssa = $19;
        break;
       }
      }
     } else {
      $$14$lcssa = $$03;$$in = $14;$s$1$lcssa = $s$0;
     }
     $26 = $$in&255;
     $$25 = $$14$lcssa;$28 = $26;$s$2 = $s$1$lcssa;
    } else {
     $$25 = $$03;$28 = $7;$s$2 = $s$0;
    }
   } else {
    $$25 = $$03;$28 = $7;$s$2 = $s$0;
   }
   $27 = $28&255;
   $29 = (($27) + -1)|0;
   $30 = ($29>>>0)<(127);
   if ($30) {
    $31 = (($s$2) + 1|0);
    $32 = (($$25) + -1)|0;
    $$03 = $32;$s$0 = $31;
    label = 7;
    continue;
   }
   $33 = (($27) + -194)|0;
   $34 = ($33>>>0)>(50);
   if ($34) {
    $$432 = $ws;$$830 = $$25;$s$1034 = $s$2;
    label = 47;
    break;
   }
   $35 = (($s$2) + 1|0);
   $36 = (18512 + ($33<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $$36 = $$25;$c$2 = $37;$s$3 = $35;
   label = 16;
   continue;
  }
  else if ((label|0) == 16) {
   label = 0;
   $38 = HEAP8[$s$3>>0]|0;
   $39 = $38&255;
   $40 = $39 >>> 3;
   $41 = (($40) + -16)|0;
   $42 = $c$2 >> 26;
   $43 = (($40) + ($42))|0;
   $44 = $41 | $43;
   $45 = ($44>>>0)>(7);
   if ($45) {
    label = 17;
    break;
   }
   $47 = (($s$3) + 1|0);
   $48 = $c$2 & 33554432;
   $49 = ($48|0)==(0);
   if ($49) {
    $s$4 = $47;
   } else {
    $50 = HEAP8[$47>>0]|0;
    $51 = $50 & -64;
    $52 = ($51<<24>>24)==(-128);
    if (!($52)) {
     label = 20;
     break;
    }
    $54 = (($s$3) + 2|0);
    $55 = $c$2 & 524288;
    $56 = ($55|0)==(0);
    if ($56) {
     $s$4 = $54;
    } else {
     $57 = HEAP8[$54>>0]|0;
     $58 = $57 & -64;
     $59 = ($58<<24>>24)==(-128);
     if (!($59)) {
      label = 23;
      break;
     }
     $61 = (($s$3) + 3|0);
     $s$4 = $61;
    }
   }
   $62 = (($$36) + -1)|0;
   $$03 = $62;$s$0 = $s$4;
   label = 7;
   continue;
  }
  else if ((label|0) == 36) {
   label = 0;
   $106 = HEAP8[$s$8>>0]|0;
   $107 = $106&255;
   $108 = $107 >>> 3;
   $109 = (($108) + -16)|0;
   $110 = $c$4 >> 26;
   $111 = (($108) + ($110))|0;
   $112 = $109 | $111;
   $113 = ($112>>>0)>(7);
   if ($113) {
    label = 37;
    break;
   }
   $115 = $c$4 << 6;
   $116 = (($s$8) + 1|0);
   $117 = (($107) + -128)|0;
   $118 = $117 | $115;
   $119 = ($118|0)<(0);
   if ($119) {
    $120 = HEAP8[$116>>0]|0;
    $121 = $120&255;
    $122 = $121 & 192;
    $123 = ($122|0)==(128);
    if (!($123)) {
     label = 40;
     break;
    }
    $125 = $118 << 6;
    $126 = (($s$8) + 2|0);
    $127 = (($121) + -128)|0;
    $128 = $127 | $125;
    $129 = ($128|0)<(0);
    if ($129) {
     $130 = HEAP8[$126>>0]|0;
     $131 = $130&255;
     $132 = $131 & 192;
     $133 = ($132|0)==(128);
     if (!($133)) {
      label = 43;
      break;
     }
     $135 = $128 << 6;
     $136 = (($s$8) + 3|0);
     $137 = (($131) + -128)|0;
     $138 = $137 | $135;
     $c$5 = $138;$s$9 = $136;
    } else {
     $c$5 = $128;$s$9 = $126;
    }
   } else {
    $c$5 = $118;$s$9 = $116;
   }
   $139 = (($$3) + 4|0);
   HEAP32[$$3>>2] = $c$5;
   $140 = (($$7) + -1)|0;
   $$02$ph = $139;$$47$ph = $140;$s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 17) {
  $46 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $46;
  label = 46;
 }
 else if ((label|0) == 20) {
  $53 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $53;
  label = 46;
 }
 else if ((label|0) == 23) {
  $60 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $60;
  label = 46;
 }
 else if ((label|0) == 26) {
  HEAP32[$src>>2] = $s$5$lcssa;
  $$0 = $wn;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 37) {
  $114 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $114;
  label = 46;
 }
 else if ((label|0) == 40) {
  $124 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $118;$s$10 = $124;
  label = 46;
 }
 else if ((label|0) == 43) {
  $134 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $128;$s$10 = $134;
  label = 46;
 }
 if ((label|0) == 46) {
  $141 = ($c$6|0)==(0);
  if ($141) {
   $$432 = $$4;$$830 = $$8;$s$1034 = $s$10;
   label = 47;
  } else {
   $$431 = $$4;$s$1033 = $s$10;
  }
 }
 if ((label|0) == 47) {
  $142 = HEAP8[$s$1034>>0]|0;
  $143 = ($142<<24>>24)==(0);
  if ($143) {
   $144 = ($$432|0)==(0|0);
   if (!($144)) {
    HEAP32[$$432>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $145 = (($wn) - ($$830))|0;
   $$0 = $145;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$431 = $$432;$s$1033 = $s$1034;
  }
 }
 $146 = (___errno_location()|0);
 HEAP32[$146>>2] = 84;
 $147 = ($$431|0)==(0|0);
 if ($147) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$src>>2] = $s$1033;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($src|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($n|0)==(0);
 do {
  if (!($2)) {
   $3 = ($wc|0)==(0|0);
   if ($3) {
    HEAP32[$0>>2] = $0;
    $7 = $0;
   } else {
    $7 = $wc;
   }
   $4 = HEAP8[$src>>0]|0;
   $5 = $4&255;
   $6 = ($4<<24>>24)>(-1);
   if ($6) {
    HEAP32[$7>>2] = $5;
    $8 = ($4<<24>>24)!=(0);
    $9 = $8&1;
    $$0 = $9;
    STACKTOP = sp;return ($$0|0);
   }
   $10 = (($5) + -194)|0;
   $11 = ($10>>>0)>(50);
   if (!($11)) {
    $12 = (($src) + 1|0);
    $13 = (18512 + ($10<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($n>>>0)<(4);
    if ($15) {
     $16 = ($n*6)|0;
     $17 = (($16) + -6)|0;
     $18 = -2147483648 >>> $17;
     $19 = $14 & $18;
     $20 = ($19|0)==(0);
     if (!($20)) {
      break;
     }
    }
    $21 = HEAP8[$12>>0]|0;
    $22 = $21&255;
    $23 = $22 >>> 3;
    $24 = (($23) + -16)|0;
    $25 = $14 >> 26;
    $26 = (($23) + ($25))|0;
    $27 = $24 | $26;
    $28 = ($27>>>0)>(7);
    if (!($28)) {
     $29 = $14 << 6;
     $30 = (($22) + -128)|0;
     $31 = $30 | $29;
     $32 = ($31|0)<(0);
     if (!($32)) {
      HEAP32[$7>>2] = $31;
      $$0 = 2;
      STACKTOP = sp;return ($$0|0);
     }
     $33 = (($src) + 2|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34&255;
     $36 = $35 & 192;
     $37 = ($36|0)==(128);
     if ($37) {
      $38 = $31 << 6;
      $39 = (($35) + -128)|0;
      $40 = $39 | $38;
      $41 = ($40|0)<(0);
      if (!($41)) {
       HEAP32[$7>>2] = $40;
       $$0 = 3;
       STACKTOP = sp;return ($$0|0);
      }
      $42 = (($src) + 3|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = $43&255;
      $45 = $44 & 192;
      $46 = ($45|0)==(128);
      if ($46) {
       $47 = $40 << 6;
       $48 = (($44) + -128)|0;
       $49 = $48 | $47;
       HEAP32[$7>>2] = $49;
       $$0 = 4;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
   }
  }
 } while(0);
 $50 = (___errno_location()|0);
 HEAP32[$50>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
 $dst = $dst|0;
 $wcs = $wcs|0;
 $wn = $wn|0;
 $n = $n|0;
 $st = $st|0;
 var $$0$lcssa = 0, $$014$$0 = 0, $$014$lcssa = 0, $$01428 = 0, $$031 = 0, $$115 = 0, $$2 = 0, $$3 = 0, $$old4 = 0, $$old7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cnt$0$lcssa = 0, $cnt$029 = 0, $cnt$2 = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $or$cond = 0, $or$cond10 = 0, $or$cond13 = 0, $or$cond27 = 0, $or$cond5 = 0, $or$cond8 = 0, $s$0$lcssa = 0, $s$030 = 0, $s$1 = 0;
 var $s$2 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 8|0;
 $ws = sp;
 $0 = HEAP32[$wcs>>2]|0;
 HEAP32[$ws>>2] = $0;
 $1 = ($dst|0)!=(0|0);
 $n$ = $1 ? $n : 256;
 $dst$ = $1 ? $dst : $buf;
 $2 = ($0|0)!=(0|0);
 $3 = ($n$|0)!=(0);
 $or$cond27 = $2 & $3;
 L1: do {
  if ($or$cond27) {
   $$01428 = $n$;$$031 = $wn;$33 = $0;$cnt$029 = 0;$s$030 = $dst$;
   while(1) {
    $4 = ($$031>>>0)>=($$01428>>>0);
    $5 = ($$031>>>0)>(32);
    $or$cond13 = $4 | $5;
    if (!($or$cond13)) {
     $$0$lcssa = $$031;$$014$lcssa = $$01428;$17 = $33;$cnt$0$lcssa = $cnt$029;$s$0$lcssa = $s$030;
     label = 7;
     break L1;
    }
    $$014$$0 = $4 ? $$01428 : $$031;
    $6 = (($$031) - ($$014$$0))|0;
    $7 = (_wcsrtombs($s$030,$ws,$$014$$0,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     $cnt$3 = -1;
     break L1;
    }
    $9 = ($s$030|0)==($buf|0);
    if ($9) {
     $$115 = $$01428;$s$1 = $buf;
    } else {
     $10 = (($s$030) + ($7)|0);
     $11 = (($$01428) - ($7))|0;
     $$115 = $11;$s$1 = $10;
    }
    $12 = (($7) + ($cnt$029))|0;
    $13 = HEAP32[$ws>>2]|0;
    $14 = ($13|0)!=(0|0);
    $15 = ($$115|0)!=(0);
    $or$cond = $14 & $15;
    if ($or$cond) {
     $$01428 = $$115;$$031 = $6;$33 = $13;$cnt$029 = $12;$s$030 = $s$1;
    } else {
     $$0$lcssa = $6;$$014$lcssa = $$115;$17 = $13;$cnt$0$lcssa = $12;$s$0$lcssa = $s$1;
     label = 7;
     break;
    }
   }
  } else {
   $$0$lcssa = $wn;$$014$lcssa = $n$;$17 = $0;$cnt$0$lcssa = 0;$s$0$lcssa = $dst$;
   label = 7;
  }
 } while(0);
 L9: do {
  if ((label|0) == 7) {
   $16 = ($17|0)!=(0|0);
   $18 = ($$014$lcssa|0)!=(0);
   $or$cond5 = $16 & $18;
   $19 = ($$0$lcssa|0)!=(0);
   $or$cond8 = $or$cond5 & $19;
   if ($or$cond8) {
    $$2 = $$0$lcssa;$$3 = $$014$lcssa;$21 = $17;$cnt$2 = $cnt$0$lcssa;$s$2 = $s$0$lcssa;
    while(1) {
     $20 = HEAP32[$21>>2]|0;
     $22 = (_wcrtomb($s$2,$20,0)|0);
     $23 = (($22) + 1)|0;
     $24 = ($23>>>0)<(2);
     if ($24) {
      break;
     }
     $26 = HEAP32[$ws>>2]|0;
     $27 = (($26) + 4|0);
     HEAP32[$ws>>2] = $27;
     $28 = (($$2) + -1)|0;
     $29 = (($s$2) + ($22)|0);
     $30 = (($$3) - ($22))|0;
     $31 = (($cnt$2) + 1)|0;
     $$old4 = ($$3|0)!=($22|0);
     $$old7 = ($28|0)!=(0);
     $or$cond10 = $$old4 & $$old7;
     if ($or$cond10) {
      $$2 = $28;$$3 = $30;$21 = $27;$cnt$2 = $31;$s$2 = $29;
     } else {
      $cnt$3 = $31;
      break L9;
     }
    }
    $25 = ($22|0)==(0);
    if ($25) {
     HEAP32[$ws>>2] = 0;
     $cnt$3 = $cnt$2;
    } else {
     $cnt$3 = -1;
    }
   } else {
    $cnt$3 = $cnt$0$lcssa;
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $32 = HEAP32[$ws>>2]|0;
 HEAP32[$wcs>>2] = $32;
 STACKTOP = sp;return ($cnt$3|0);
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01$lcssa = 0, $$0125 = 0, $$026 = 0, $$1 = 0, $$13 = 0, $$215 = 0, $$24$lcssa = 0, $$2424 = 0, $$3 = 0, $$35 = 0, $$414 = 0, $$5 = 0, $$pn = 0, $$pre = 0, $$pre39 = 0, $$pre40 = 0, $$pre41 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ws2$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $2 = HEAP32[$ws>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$026 = 0;$6 = $3;$ws2$07 = $2;
  }
  while(1) {
   $5 = ($6>>>0)>(127);
   if ($5) {
    $7 = (_wcrtomb($buf,$6,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     $$0 = -1;
     label = 26;
     break;
    } else {
     $$pn = $7;
    }
   } else {
    $$pn = 1;
   }
   $$13 = (($$pn) + ($$026))|0;
   $9 = (($ws2$07) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $$0 = $$13;
    label = 26;
    break;
   } else {
    $$026 = $$13;$6 = $10;$ws2$07 = $9;
   }
  }
  if ((label|0) == 26) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1 = ($n>>>0)>(3);
 L14: do {
  if ($1) {
   $$pre40 = HEAP32[$ws>>2]|0;
   $$0125 = $s;$$2424 = $n;$14 = $$pre40;
   while(1) {
    $13 = HEAP32[$14>>2]|0;
    $15 = (($13) + -1)|0;
    $16 = ($15>>>0)>(126);
    if ($16) {
     $17 = ($13|0)==(0);
     if ($17) {
      break;
     }
     $19 = (_wcrtomb($$0125,$13,0)|0);
     $20 = ($19|0)==(-1);
     if ($20) {
      $$0 = -1;
      label = 26;
      break;
     }
     $21 = (($$0125) + ($19)|0);
     $22 = (($$2424) - ($19))|0;
     $$1 = $21;$$35 = $22;$27 = $14;
    } else {
     $23 = $13&255;
     $24 = (($$0125) + 1|0);
     HEAP8[$$0125>>0] = $23;
     $25 = (($$2424) + -1)|0;
     $$pre41 = HEAP32[$ws>>2]|0;
     $$1 = $24;$$35 = $25;$27 = $$pre41;
    }
    $26 = (($27) + 4|0);
    HEAP32[$ws>>2] = $26;
    $28 = ($$35>>>0)>(3);
    if ($28) {
     $$0125 = $$1;$$2424 = $$35;$14 = $26;
    } else {
     $$01$lcssa = $$1;$$24$lcssa = $$35;
     break L14;
    }
   }
   if ((label|0) == 26) {
    STACKTOP = sp;return ($$0|0);
   }
   HEAP8[$$0125>>0] = 0;
   HEAP32[$ws>>2] = 0;
   $18 = (($n) - ($$2424))|0;
   $$0 = $18;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$01$lcssa = $s;$$24$lcssa = $n;
  }
 } while(0);
 $12 = ($$24$lcssa|0)==(0);
 if ($12) {
  $$0 = $n;
  STACKTOP = sp;return ($$0|0);
 }
 $$pre = HEAP32[$ws>>2]|0;
 $$215 = $$01$lcssa;$$414 = $$24$lcssa;$30 = $$pre;
 while(1) {
  $29 = HEAP32[$30>>2]|0;
  $31 = (($29) + -1)|0;
  $32 = ($31>>>0)>(126);
  if ($32) {
   $33 = ($29|0)==(0);
   if ($33) {
    label = 19;
    break;
   }
   $35 = (_wcrtomb($buf,$29,0)|0);
   $36 = ($35|0)==(-1);
   if ($36) {
    $$0 = -1;
    label = 26;
    break;
   }
   $37 = ($$414>>>0)<($35>>>0);
   if ($37) {
    label = 22;
    break;
   }
   $39 = HEAP32[$30>>2]|0;
   (_wcrtomb($$215,$39,0)|0);
   $40 = (($$215) + ($35)|0);
   $41 = (($$414) - ($35))|0;
   $$3 = $40;$$5 = $41;$46 = $30;
  } else {
   $42 = $29&255;
   $43 = (($$215) + 1|0);
   HEAP8[$$215>>0] = $42;
   $44 = (($$414) + -1)|0;
   $$pre39 = HEAP32[$ws>>2]|0;
   $$3 = $43;$$5 = $44;$46 = $$pre39;
  }
  $45 = (($46) + 4|0);
  HEAP32[$ws>>2] = $45;
  $47 = ($$5|0)==(0);
  if ($47) {
   $$0 = $n;
   label = 26;
   break;
  } else {
   $$215 = $$3;$$414 = $$5;$30 = $45;
  }
 }
 if ((label|0) == 19) {
  HEAP8[$$215>>0] = 0;
  HEAP32[$ws>>2] = 0;
  $34 = (($n) - ($$414))|0;
  $$0 = $34;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 22) {
  $38 = (($n) - ($$414))|0;
  $$0 = $38;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 26) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $k$0 = $2;
 } else {
  $5 = $3;
  $6 = $1;
  $7 = (($5) - ($6))|0;
  $k$0 = $7;
 }
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = (($f) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = (($f) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 STACKTOP = sp;return ($k$0$len|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vasprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp;
 $0 = (_malloc(240)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $vacopy_currentptr = HEAP32[$ap>>2]|0;
   HEAP32[$ap2>>2] = $vacopy_currentptr;
   $2 = (_vsnprintf($0,240,$fmt,$ap2)|0);
   $3 = ($2>>>0)<(240);
   if ($3) {
    $4 = (($2) + 1)|0;
    $5 = (_realloc($0,$4)|0);
    $6 = ($5|0)!=(0|0);
    $7 = $6 ? $5 : $0;
    HEAP32[$s>>2] = $7;
    $$0 = $2;
    break;
   }
   _free($0);
   $8 = ($2|0)<(0);
   if ($8) {
    $$0 = -1;
   } else {
    $9 = (($2) + 1)|0;
    $10 = (_malloc($9)|0);
    HEAP32[$s>>2] = $10;
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$0 = -1;
    } else {
     $12 = (_vsnprintf($10,$9,$fmt,$ap)|0);
     $$0 = $12;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _MUSL_vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$13 = 0, $$8 = 0, $$lcssa21 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi243Z2D = 0, $$pre229 = 0, $$pre231 = 0, $$pre235 = 0, $$pre237 = 0, $$pre238 = 0, $$pre240 = 0, $$pre241 = 0, $$pre242 = 0, $$size$0 = 0;
 var $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0.0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0224 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$030 = 0, $dest$0 = 0;
 var $factor = 0, $factor17 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph49 = 0, $i$0$ph49$lcssa = 0, $i$0$ph49$us56 = 0, $i$1$lcssa = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit7 = 0, $isdigit723 = 0, $isdigittmp = 0, $isdigittmp6 = 0, $isdigittmp622 = 0;
 var $k$0$ph = 0, $k$1$ph = 0, $matches$0$ = 0, $matches$0135 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond$us = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond9 = 0, $p$0141 = 0, $p$1 = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$324 = 0, $p$4 = 0;
 var $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0140 = 0, $pos$1 = 0, $pos$2 = 0, $s$0133 = 0, $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $scanset = 0, $size$0 = 0;
 var $st = 0, $vacopy_currentptr = 0, $wc = 0, $wcs$0134 = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph165 = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$025 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = HEAP8[$fmt>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $matches$3 = 0;
  STACKTOP = sp;return ($matches$3|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 $5 = (($f) + 108|0);
 $6 = (($f) + 8|0);
 $7 = (($scanset) + 10|0);
 $8 = (($scanset) + 33|0);
 $9 = (($st) + 4|0);
 $10 = (($scanset) + 46|0);
 $11 = (($scanset) + 94|0);
 $13 = $1;$matches$0135 = 0;$p$0141 = $fmt;$pos$0140 = 0;$s$0133 = 0;$wcs$0134 = 0;
 L4: while(1) {
  $12 = $13&255;
  $14 = (_isspace($12)|0);
  $15 = ($14|0)==(0);
  L6: do {
   if ($15) {
    $42 = HEAP8[$p$0141>>0]|0;
    $43 = ($42<<24>>24)==(37);
    L21: do {
     if ($43) {
      $44 = (($p$0141) + 1|0);
      $45 = HEAP8[$44>>0]|0;
      do {
       if ((($45<<24>>24) == 42)) {
        $66 = (($p$0141) + 2|0);
        $dest$0 = 0;$p$2 = $66;
       } else if ((($45<<24>>24) == 37)) {
        break L21;
       } else {
        $67 = $45&255;
        $isdigittmp = (($67) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $68 = (($p$0141) + 2|0);
         $69 = HEAP8[$68>>0]|0;
         $70 = ($69<<24>>24)==(36);
         if ($70) {
          $vacopy_currentptr = HEAP32[$ap>>2]|0;
          HEAP32[$ap2$i>>2] = $vacopy_currentptr;
          $i$0$i = $isdigittmp;
          while(1) {
           $71 = ($i$0$i>>>0)>(1);
           $arglist_current = HEAP32[$ap2$i>>2]|0;
           $72 = HEAP32[$arglist_current>>2]|0;
           $arglist_next = (($arglist_current) + 4|0);
           HEAP32[$ap2$i>>2] = $arglist_next;
           $73 = (($i$0$i) + -1)|0;
           if ($71) {
            $i$0$i = $73;
           } else {
            break;
           }
          }
          $74 = (($p$0141) + 3|0);
          $dest$0 = $72;$p$2 = $74;
          break;
         }
        }
        $arglist_current2 = HEAP32[$ap>>2]|0;
        $75 = HEAP32[$arglist_current2>>2]|0;
        $arglist_next3 = (($arglist_current2) + 4|0);
        HEAP32[$ap>>2] = $arglist_next3;
        $dest$0 = $75;$p$2 = $44;
       }
      } while(0);
      $76 = HEAP8[$p$2>>0]|0;
      $77 = $76&255;
      $isdigittmp622 = (($77) + -48)|0;
      $isdigit723 = ($isdigittmp622>>>0)<(10);
      if ($isdigit723) {
       $81 = $77;$p$324 = $p$2;$width$025 = 0;
       while(1) {
        $78 = ($width$025*10)|0;
        $79 = (($78) + -48)|0;
        $80 = (($79) + ($81))|0;
        $82 = (($p$324) + 1|0);
        $83 = HEAP8[$82>>0]|0;
        $84 = $83&255;
        $isdigittmp6 = (($84) + -48)|0;
        $isdigit7 = ($isdigittmp6>>>0)<(10);
        if ($isdigit7) {
         $81 = $84;$p$324 = $82;$width$025 = $80;
        } else {
         $$lcssa21 = $83;$p$3$lcssa = $82;$width$0$lcssa = $80;
         break;
        }
       }
      } else {
       $$lcssa21 = $76;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
      }
      $85 = ($$lcssa21<<24>>24)==(109);
      if ($85) {
       $86 = ($dest$0|0)!=(0|0);
       $87 = $86&1;
       $88 = (($p$3$lcssa) + 1|0);
       $$pre = HEAP8[$88>>0]|0;
       $91 = $$pre;$alloc$0 = $87;$p$4 = $88;$s$1 = 0;$wcs$1 = 0;
      } else {
       $91 = $$lcssa21;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0133;$wcs$1 = $wcs$0134;
      }
      $89 = (($p$4) + 1|0);
      $90 = $91&255;
      switch ($90|0) {
      case 104:  {
       $92 = HEAP8[$89>>0]|0;
       $93 = ($92<<24>>24)==(104);
       $94 = (($p$4) + 2|0);
       $$10 = $93 ? $94 : $89;
       $$11 = $93 ? -2 : -1;
       $p$5 = $$10;$size$0 = $$11;
       break;
      }
      case 108:  {
       $95 = HEAP8[$89>>0]|0;
       $96 = ($95<<24>>24)==(108);
       $97 = (($p$4) + 2|0);
       $$12 = $96 ? $97 : $89;
       $$13 = $96 ? 3 : 1;
       $p$5 = $$12;$size$0 = $$13;
       break;
      }
      case 116: case 122:  {
       $p$5 = $89;$size$0 = 1;
       break;
      }
      case 76:  {
       $p$5 = $89;$size$0 = 2;
       break;
      }
      case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
       $p$5 = $p$4;$size$0 = 0;
       break;
      }
      case 106:  {
       $p$5 = $89;$size$0 = 3;
       break;
      }
      default: {
       $alloc$0224 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
       label = 162;
       break L4;
      }
      }
      $98 = HEAP8[$p$5>>0]|0;
      $99 = $98&255;
      $100 = $99 & 47;
      $101 = ($100|0)==(3);
      $102 = $99 | 32;
      $$ = $101 ? $102 : $99;
      $$size$0 = $101 ? 1 : $size$0;
      if ((($$|0) == 99)) {
       $103 = ($width$0$lcssa|0)<(1);
       $$width$0 = $103 ? 1 : $width$0$lcssa;
       $pos$1 = $pos$0140;$width$1 = $$width$0;
      } else if ((($$|0) == 110)) {
       $104 = ($pos$0140|0)<(0);
       $105 = $104 << 31 >> 31;
       $106 = ($dest$0|0)==(0|0);
       if ($106) {
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       switch ($$size$0|0) {
       case -2:  {
        $107 = $pos$0140&255;
        HEAP8[$dest$0>>0] = $107;
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case -1:  {
        $108 = $pos$0140&65535;
        HEAP16[$dest$0>>1] = $108;
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 0:  {
        HEAP32[$dest$0>>2] = $pos$0140;
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 1:  {
        HEAP32[$dest$0>>2] = $pos$0140;
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 3:  {
        $109 = $dest$0;
        $110 = $109;
        HEAP32[$110>>2] = $pos$0140;
        $111 = (($109) + 4)|0;
        $112 = $111;
        HEAP32[$112>>2] = $105;
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       default: {
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       }
      } else if ((($$|0) == 91)) {
       $pos$1 = $pos$0140;$width$1 = $width$0$lcssa;
      } else {
       ___shlim($f,0);
       while(1) {
        $113 = HEAP32[$3>>2]|0;
        $114 = HEAP32[$4>>2]|0;
        $115 = ($113>>>0)<($114>>>0);
        if ($115) {
         $116 = (($113) + 1|0);
         HEAP32[$3>>2] = $116;
         $117 = HEAP8[$113>>0]|0;
         $118 = $117&255;
         $120 = $118;
        } else {
         $119 = (___shgetc($f)|0);
         $120 = $119;
        }
        $121 = (_isspace($120)|0);
        $122 = ($121|0)==(0);
        if ($122) {
         break;
        }
       }
       $123 = HEAP32[$4>>2]|0;
       $124 = ($123|0)==(0|0);
       $$pre229 = HEAP32[$3>>2]|0;
       if ($124) {
        $129 = $$pre229;
       } else {
        $125 = (($$pre229) + -1|0);
        HEAP32[$3>>2] = $125;
        $129 = $125;
       }
       $126 = HEAP32[$5>>2]|0;
       $127 = HEAP32[$6>>2]|0;
       $128 = $129;
       $130 = $127;
       $131 = (($126) + ($pos$0140))|0;
       $132 = (($131) + ($128))|0;
       $133 = (($132) - ($130))|0;
       $pos$1 = $133;$width$1 = $width$0$lcssa;
      }
      ___shlim($f,$width$1);
      $134 = HEAP32[$3>>2]|0;
      $135 = HEAP32[$4>>2]|0;
      $136 = ($134>>>0)<($135>>>0);
      if ($136) {
       $137 = (($134) + 1|0);
       HEAP32[$3>>2] = $137;
       $141 = $135;
      } else {
       $138 = (___shgetc($f)|0);
       $139 = ($138|0)<(0);
       if ($139) {
        $alloc$0224 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
        label = 162;
        break L4;
       }
       $$pre231 = HEAP32[$4>>2]|0;
       $141 = $$pre231;
      }
      $140 = ($141|0)==(0|0);
      if (!($140)) {
       $142 = HEAP32[$3>>2]|0;
       $143 = (($142) + -1|0);
       HEAP32[$3>>2] = $143;
      }
      L78: do {
       switch ($$|0) {
       case 91: case 99: case 115:  {
        $144 = ($$|0)==(99);
        $145 = $$ & 239;
        $146 = ($145|0)==(99);
        L80: do {
         if ($146) {
          $147 = ($$|0)==(115);
          _memset(($scanset|0),-1,257)|0;
          HEAP8[$scanset>>0] = 0;
          if ($147) {
           HEAP8[$8>>0] = 0;
           ;HEAP8[$7+0>>0]=0|0;HEAP8[$7+1>>0]=0|0;HEAP8[$7+2>>0]=0|0;HEAP8[$7+3>>0]=0|0;HEAP8[$7+4>>0]=0|0;
           $p$9 = $p$5;
          } else {
           $p$9 = $p$5;
          }
         } else {
          $148 = (($p$5) + 1|0);
          $149 = HEAP8[$148>>0]|0;
          $150 = ($149<<24>>24)==(94);
          $151 = (($p$5) + 2|0);
          $invert$0 = $150&1;
          $p$6 = $150 ? $151 : $148;
          $152 = $150&1;
          _memset(($scanset|0),($152|0),257)|0;
          HEAP8[$scanset>>0] = 0;
          $153 = HEAP8[$p$6>>0]|0;
          if ((($153<<24>>24) == 45)) {
           $154 = (($p$6) + 1|0);
           $155 = $invert$0 ^ 1;
           $156 = $155&255;
           HEAP8[$10>>0] = $156;
           $$pre$phi243Z2D = $156;$p$7$ph = $154;
          } else if ((($153<<24>>24) == 93)) {
           $157 = (($p$6) + 1|0);
           $158 = $invert$0 ^ 1;
           $159 = $158&255;
           HEAP8[$11>>0] = $159;
           $$pre$phi243Z2D = $159;$p$7$ph = $157;
          } else {
           $$pre241 = $invert$0 ^ 1;
           $$pre242 = $$pre241&255;
           $$pre$phi243Z2D = $$pre242;$p$7$ph = $p$6;
          }
          $p$7 = $p$7$ph;
          while(1) {
           $160 = HEAP8[$p$7>>0]|0;
           if ((($160<<24>>24) == 93)) {
            $p$9 = $p$7;
            break L80;
           } else if ((($160<<24>>24) == 45)) {
            $161 = (($p$7) + 1|0);
            $162 = HEAP8[$161>>0]|0;
            if ((($162<<24>>24) == 93) | (($162<<24>>24) == 0)) {
             $173 = 45;$p$8 = $p$7;
            } else {
             $163 = (($p$7) + -1|0);
             $164 = HEAP8[$163>>0]|0;
             $165 = ($164&255)<($162&255);
             if ($165) {
              $166 = $164&255;
              $c$030 = $166;
              while(1) {
               $167 = (($c$030) + 1)|0;
               $168 = (($scanset) + ($167)|0);
               HEAP8[$168>>0] = $$pre$phi243Z2D;
               $169 = HEAP8[$161>>0]|0;
               $170 = $169&255;
               $171 = ($167|0)<($170|0);
               if ($171) {
                $c$030 = $167;
               } else {
                $173 = $169;$p$8 = $161;
                break;
               }
              }
             } else {
              $173 = $162;$p$8 = $161;
             }
            }
           } else if ((($160<<24>>24) == 0)) {
            $alloc$0224 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
            label = 162;
            break L4;
           } else {
            $173 = $160;$p$8 = $p$7;
           }
           $172 = $173&255;
           $174 = (($172) + 1)|0;
           $175 = (($scanset) + ($174)|0);
           HEAP8[$175>>0] = $$pre$phi243Z2D;
           $176 = (($p$8) + 1|0);
           $p$7 = $176;
          }
         }
        } while(0);
        $177 = (($width$1) + 1)|0;
        $$8 = $144 ? $177 : 31;
        $178 = ($$size$0|0)==(1);
        $179 = ($alloc$0|0)!=(0);
        L99: do {
         if ($178) {
          if ($179) {
           $180 = $$8 << 2;
           $181 = (_malloc($180)|0);
           $182 = ($181|0)==(0|0);
           if ($182) {
            $alloc$0224 = $alloc$0;$s$6 = 0;$wcs$7 = $181;
            label = 162;
            break L4;
           } else {
            $wcs$2 = $181;
           }
          } else {
           $wcs$2 = $dest$0;
          }
          HEAP32[$st>>2] = 0;
          HEAP32[$9>>2] = 0;
          $i$0$ph = 0;$k$0$ph = $$8;$wcs$3$ph = $wcs$2;
          L105: while(1) {
           $183 = ($wcs$3$ph|0)==(0|0);
           if ($183) {
            while(1) {
             $186 = HEAP32[$3>>2]|0;
             $197 = HEAP32[$4>>2]|0;
             $198 = ($186>>>0)<($197>>>0);
             if ($198) {
              $185 = (($186) + 1|0);
              HEAP32[$3>>2] = $185;
              $187 = HEAP8[$186>>0]|0;
              $188 = $187&255;
              $190 = $188;
             } else {
              $184 = (___shgetc($f)|0);
              $190 = $184;
             }
             $189 = (($190) + 1)|0;
             $191 = (($scanset) + ($189)|0);
             $192 = HEAP8[$191>>0]|0;
             $193 = ($192<<24>>24)==(0);
             if ($193) {
              $i$0$ph49$lcssa = $i$0$ph;$wcs$3$ph165 = 0;
              break L105;
             }
             $194 = $190&255;
             HEAP8[$0>>0] = $194;
             $195 = (_mbrtowc($wc,$0,1,$st)|0);
             if ((($195|0) == -2)) {
              continue;
             } else if ((($195|0) == -1)) {
              $alloc$0224 = $alloc$0;$s$6 = 0;$wcs$7 = 0;
              label = 162;
              break L4;
             }
             $196 = ($i$0$ph|0)==($k$0$ph|0);
             $or$cond$us = $179 & $196;
             if ($or$cond$us) {
              $i$1$lcssa = $i$0$ph;
              break;
             }
            }
           } else {
            if ($179) {
             $i$0$ph49$us56 = $i$0$ph;
            } else {
             $i$0$ph49 = $i$0$ph;
             label = 98;
             break;
            }
            while(1) {
             while(1) {
              $201 = HEAP32[$3>>2]|0;
              $215 = HEAP32[$4>>2]|0;
              $216 = ($201>>>0)<($215>>>0);
              if ($216) {
               $200 = (($201) + 1|0);
               HEAP32[$3>>2] = $200;
               $202 = HEAP8[$201>>0]|0;
               $203 = $202&255;
               $205 = $203;
              } else {
               $199 = (___shgetc($f)|0);
               $205 = $199;
              }
              $204 = (($205) + 1)|0;
              $206 = (($scanset) + ($204)|0);
              $207 = HEAP8[$206>>0]|0;
              $208 = ($207<<24>>24)==(0);
              if ($208) {
               $i$0$ph49$lcssa = $i$0$ph49$us56;$wcs$3$ph165 = $wcs$3$ph;
               break L105;
              }
              $209 = $205&255;
              HEAP8[$0>>0] = $209;
              $210 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($210|0) == -1)) {
               $alloc$0224 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
               label = 162;
               break L4;
              } else if (!((($210|0) == -2))) {
               break;
              }
             }
             $211 = HEAP32[$wc>>2]|0;
             $212 = (($i$0$ph49$us56) + 1)|0;
             $213 = (($wcs$3$ph) + ($i$0$ph49$us56<<2)|0);
             HEAP32[$213>>2] = $211;
             $214 = ($212|0)==($k$0$ph|0);
             if ($214) {
              $i$1$lcssa = $k$0$ph;
              break;
             } else {
              $i$0$ph49$us56 = $212;
             }
            }
           }
           $factor = $k$0$ph << 1;
           $234 = $factor | 1;
           $235 = $234 << 2;
           $236 = (_realloc($wcs$3$ph,$235)|0);
           $237 = ($236|0)==(0|0);
           if ($237) {
            $alloc$0224 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
            label = 162;
            break L4;
           }
           $i$0$ph = $i$1$lcssa;$k$0$ph = $234;$wcs$3$ph = $236;
          }
          L129: do {
           if ((label|0) == 98) {
            while(1) {
             label = 0;
             while(1) {
              $217 = HEAP32[$3>>2]|0;
              $218 = HEAP32[$4>>2]|0;
              $219 = ($217>>>0)<($218>>>0);
              if ($219) {
               $220 = (($217) + 1|0);
               HEAP32[$3>>2] = $220;
               $221 = HEAP8[$217>>0]|0;
               $222 = $221&255;
               $225 = $222;
              } else {
               $223 = (___shgetc($f)|0);
               $225 = $223;
              }
              $224 = (($225) + 1)|0;
              $226 = (($scanset) + ($224)|0);
              $227 = HEAP8[$226>>0]|0;
              $228 = ($227<<24>>24)==(0);
              if ($228) {
               $i$0$ph49$lcssa = $i$0$ph49;$wcs$3$ph165 = $wcs$3$ph;
               break L129;
              }
              $229 = $225&255;
              HEAP8[$0>>0] = $229;
              $230 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($230|0) == -1)) {
               $alloc$0224 = 0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
               label = 162;
               break L4;
              } else if (!((($230|0) == -2))) {
               break;
              }
             }
             $231 = HEAP32[$wc>>2]|0;
             $232 = (($i$0$ph49) + 1)|0;
             $233 = (($wcs$3$ph) + ($i$0$ph49<<2)|0);
             HEAP32[$233>>2] = $231;
             $i$0$ph49 = $232;
             label = 98;
            }
           }
          } while(0);
          $238 = (_mbsinit($st)|0);
          $239 = ($238|0)==(0);
          if ($239) {
           $alloc$0224 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph165;
           label = 162;
           break L4;
          } else {
           $i$4 = $i$0$ph49$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph165;
          }
         } else {
          if ($179) {
           $240 = (_malloc($$8)|0);
           $241 = ($240|0)==(0|0);
           if ($241) {
            $alloc$0224 = $alloc$0;$s$6 = 0;$wcs$7 = 0;
            label = 162;
            break L4;
           } else {
            $i$2$ph = 0;$k$1$ph = $$8;$s$2$ph = $240;
           }
           while(1) {
            $i$2 = $i$2$ph;
            while(1) {
             $242 = HEAP32[$3>>2]|0;
             $243 = HEAP32[$4>>2]|0;
             $244 = ($242>>>0)<($243>>>0);
             if ($244) {
              $245 = (($242) + 1|0);
              HEAP32[$3>>2] = $245;
              $246 = HEAP8[$242>>0]|0;
              $247 = $246&255;
              $250 = $247;
             } else {
              $248 = (___shgetc($f)|0);
              $250 = $248;
             }
             $249 = (($250) + 1)|0;
             $251 = (($scanset) + ($249)|0);
             $252 = HEAP8[$251>>0]|0;
             $253 = ($252<<24>>24)==(0);
             if ($253) {
              $i$4 = $i$2;$s$3 = $s$2$ph;$wcs$4 = 0;
              break L99;
             }
             $254 = $250&255;
             $255 = (($i$2) + 1)|0;
             $256 = (($s$2$ph) + ($i$2)|0);
             HEAP8[$256>>0] = $254;
             $257 = ($255|0)==($k$1$ph|0);
             if ($257) {
              break;
             } else {
              $i$2 = $255;
             }
            }
            $factor17 = $k$1$ph << 1;
            $258 = $factor17 | 1;
            $259 = (_realloc($s$2$ph,$258)|0);
            $260 = ($259|0)==(0|0);
            if ($260) {
             $alloc$0224 = $alloc$0;$s$6 = $s$2$ph;$wcs$7 = 0;
             label = 162;
             break L4;
            } else {
             $i$2$ph$phi = $k$1$ph;$k$1$ph = $258;$s$2$ph = $259;$i$2$ph = $i$2$ph$phi;
            }
           }
          }
          $261 = ($dest$0|0)==(0|0);
          if ($261) {
           $279 = $141;
           while(1) {
            $277 = HEAP32[$3>>2]|0;
            $278 = ($277>>>0)<($279>>>0);
            if ($278) {
             $280 = (($277) + 1|0);
             HEAP32[$3>>2] = $280;
             $281 = HEAP8[$277>>0]|0;
             $282 = $281&255;
             $285 = $282;
            } else {
             $283 = (___shgetc($f)|0);
             $285 = $283;
            }
            $284 = (($285) + 1)|0;
            $286 = (($scanset) + ($284)|0);
            $287 = HEAP8[$286>>0]|0;
            $288 = ($287<<24>>24)==(0);
            if ($288) {
             $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
             break L99;
            }
            $$pre237 = HEAP32[$4>>2]|0;
            $279 = $$pre237;
           }
          } else {
           $264 = $141;$i$3 = 0;
           while(1) {
            $262 = HEAP32[$3>>2]|0;
            $263 = ($262>>>0)<($264>>>0);
            if ($263) {
             $265 = (($262) + 1|0);
             HEAP32[$3>>2] = $265;
             $266 = HEAP8[$262>>0]|0;
             $267 = $266&255;
             $270 = $267;
            } else {
             $268 = (___shgetc($f)|0);
             $270 = $268;
            }
            $269 = (($270) + 1)|0;
            $271 = (($scanset) + ($269)|0);
            $272 = HEAP8[$271>>0]|0;
            $273 = ($272<<24>>24)==(0);
            if ($273) {
             $i$4 = $i$3;$s$3 = $dest$0;$wcs$4 = 0;
             break L99;
            }
            $274 = $270&255;
            $275 = (($i$3) + 1)|0;
            $276 = (($dest$0) + ($i$3)|0);
            HEAP8[$276>>0] = $274;
            $$pre238 = HEAP32[$4>>2]|0;
            $264 = $$pre238;$i$3 = $275;
           }
          }
         }
        } while(0);
        $289 = HEAP32[$4>>2]|0;
        $290 = ($289|0)==(0|0);
        $$pre235 = HEAP32[$3>>2]|0;
        if ($290) {
         $295 = $$pre235;
        } else {
         $291 = (($$pre235) + -1|0);
         HEAP32[$3>>2] = $291;
         $295 = $291;
        }
        $292 = HEAP32[$5>>2]|0;
        $293 = HEAP32[$6>>2]|0;
        $294 = $295;
        $296 = $293;
        $297 = (($294) - ($296))|0;
        $298 = (($297) + ($292))|0;
        $299 = ($298|0)==(0);
        if ($299) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0135;$s$8 = $s$3;$wcs$9 = $wcs$4;
         break L4;
        }
        $$not = $144 ^ 1;
        $300 = ($298|0)==($width$1|0);
        $or$cond9 = $300 | $$not;
        if (!($or$cond9)) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0135;$s$8 = $s$3;$wcs$9 = $wcs$4;
         break L4;
        }
        do {
         if ($179) {
          if ($178) {
           HEAP32[$dest$0>>2] = $wcs$4;
           break;
          } else {
           HEAP32[$dest$0>>2] = $s$3;
           break;
          }
         }
        } while(0);
        if ($144) {
         $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
        } else {
         $301 = ($wcs$4|0)==(0|0);
         if (!($301)) {
          $302 = (($wcs$4) + ($i$4<<2)|0);
          HEAP32[$302>>2] = 0;
         }
         $303 = ($s$3|0)==(0|0);
         if ($303) {
          $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
         } else {
          $304 = (($s$3) + ($i$4)|0);
          HEAP8[$304>>0] = 0;
          $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
         }
        }
        break;
       }
       case 111:  {
        $base$0 = 8;
        label = 144;
        break;
       }
       case 117: case 100:  {
        $base$0 = 10;
        label = 144;
        break;
       }
       case 105:  {
        $base$0 = 0;
        label = 144;
        break;
       }
       case 120: case 88: case 112:  {
        $base$0 = 16;
        label = 144;
        break;
       }
       case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
        $324 = (+___floatscan($f,$$size$0,0));
        $325 = HEAP32[$5>>2]|0;
        $326 = HEAP32[$3>>2]|0;
        $327 = HEAP32[$6>>2]|0;
        $328 = $326;
        $329 = $327;
        $330 = (($329) - ($328))|0;
        $331 = ($325|0)==($330|0);
        if ($331) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0135;$s$8 = $s$1;$wcs$9 = $wcs$1;
         break L4;
        }
        $332 = ($dest$0|0)==(0|0);
        if ($332) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         if ((($$size$0|0) == 0)) {
          $333 = $324;
          HEAPF32[$dest$0>>2] = $333;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else if ((($$size$0|0) == 1)) {
          HEAPF64[$dest$0>>3] = $324;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else if ((($$size$0|0) == 2)) {
          HEAPF64[$dest$0>>3] = $324;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         }
        }
        break;
       }
       default: {
        $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
       }
       }
      } while(0);
      L197: do {
       if ((label|0) == 144) {
        label = 0;
        $305 = (___intscan($f,$base$0,0,-1,-1)|0);
        $306 = tempRet0;
        $307 = HEAP32[$5>>2]|0;
        $308 = HEAP32[$3>>2]|0;
        $309 = HEAP32[$6>>2]|0;
        $310 = $308;
        $311 = $309;
        $312 = (($311) - ($310))|0;
        $313 = ($307|0)==($312|0);
        if ($313) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0135;$s$8 = $s$1;$wcs$9 = $wcs$1;
         break L4;
        }
        $314 = ($$|0)==(112);
        $315 = ($dest$0|0)!=(0|0);
        $or$cond3 = $314 & $315;
        if ($or$cond3) {
         $316 = $305;
         HEAP32[$dest$0>>2] = $316;
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
         break;
        }
        $317 = ($dest$0|0)==(0|0);
        if ($317) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         switch ($$size$0|0) {
         case -2:  {
          $318 = $305&255;
          HEAP8[$dest$0>>0] = $318;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case -1:  {
          $319 = $305&65535;
          HEAP16[$dest$0>>1] = $319;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $305;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $305;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case 3:  {
          $320 = $dest$0;
          $321 = $320;
          HEAP32[$321>>2] = $305;
          $322 = (($320) + 4)|0;
          $323 = $322;
          HEAP32[$323>>2] = $306;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         default: {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
         }
         }
        }
       }
      } while(0);
      $334 = HEAP32[$5>>2]|0;
      $335 = HEAP32[$3>>2]|0;
      $336 = HEAP32[$6>>2]|0;
      $337 = $335;
      $338 = $336;
      $339 = (($334) + ($pos$1))|0;
      $340 = (($339) + ($337))|0;
      $341 = (($340) - ($338))|0;
      $not$ = ($dest$0|0)!=(0|0);
      $342 = $not$&1;
      $matches$0$ = (($342) + ($matches$0135))|0;
      $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $341;$s$5 = $s$4;$wcs$6 = $wcs$5;
      break L6;
     }
    } while(0);
    $46 = $43&1;
    $47 = (($p$0141) + ($46)|0);
    ___shlim($f,0);
    $48 = HEAP32[$3>>2]|0;
    $49 = HEAP32[$4>>2]|0;
    $50 = ($48>>>0)<($49>>>0);
    if ($50) {
     $51 = (($48) + 1|0);
     HEAP32[$3>>2] = $51;
     $52 = HEAP8[$48>>0]|0;
     $53 = $52&255;
     $58 = $53;
    } else {
     $54 = (___shgetc($f)|0);
     $58 = $54;
    }
    $55 = HEAP8[$47>>0]|0;
    $56 = $55&255;
    $57 = ($58|0)==($56|0);
    if (!($57)) {
     label = 19;
     break L4;
    }
    $65 = (($pos$0140) + 1)|0;
    $matches$1 = $matches$0135;$p$11 = $47;$pos$2 = $65;$s$5 = $s$0133;$wcs$6 = $wcs$0134;
   } else {
    $p$1 = $p$0141;
    while(1) {
     $16 = (($p$1) + 1|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = (_isspace($18)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      break;
     } else {
      $p$1 = $16;
     }
    }
    ___shlim($f,0);
    while(1) {
     $21 = HEAP32[$3>>2]|0;
     $22 = HEAP32[$4>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = (($21) + 1|0);
      HEAP32[$3>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $28 = $26;
     } else {
      $27 = (___shgetc($f)|0);
      $28 = $27;
     }
     $29 = (_isspace($28)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      break;
     }
    }
    $31 = HEAP32[$4>>2]|0;
    $32 = ($31|0)==(0|0);
    $$pre240 = HEAP32[$3>>2]|0;
    if ($32) {
     $37 = $$pre240;
    } else {
     $33 = (($$pre240) + -1|0);
     HEAP32[$3>>2] = $33;
     $37 = $33;
    }
    $34 = HEAP32[$5>>2]|0;
    $35 = HEAP32[$6>>2]|0;
    $36 = $37;
    $38 = $35;
    $39 = (($34) + ($pos$0140))|0;
    $40 = (($39) + ($36))|0;
    $41 = (($40) - ($38))|0;
    $matches$1 = $matches$0135;$p$11 = $p$1;$pos$2 = $41;$s$5 = $s$0133;$wcs$6 = $wcs$0134;
   }
  } while(0);
  $343 = (($p$11) + 1|0);
  $344 = HEAP8[$343>>0]|0;
  $345 = ($344<<24>>24)==(0);
  if ($345) {
   $matches$3 = $matches$1;
   label = 166;
   break;
  } else {
   $13 = $344;$matches$0135 = $matches$1;$p$0141 = $343;$pos$0140 = $pos$2;$s$0133 = $s$5;$wcs$0134 = $wcs$6;
  }
 }
 if ((label|0) == 19) {
  $59 = HEAP32[$4>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   $61 = HEAP32[$3>>2]|0;
   $62 = (($61) + -1|0);
   HEAP32[$3>>2] = $62;
  }
  $63 = ($58|0)>(-1);
  $64 = ($matches$0135|0)!=(0);
  $or$cond5 = $63 | $64;
  if ($or$cond5) {
   $matches$3 = $matches$0135;
   STACKTOP = sp;return ($matches$3|0);
  } else {
   $alloc$1 = 0;$s$7 = $s$0133;$wcs$8 = $wcs$0134;
   label = 163;
  }
 }
 else if ((label|0) == 162) {
  $$old4 = ($matches$0135|0)==(0);
  if ($$old4) {
   $alloc$1 = $alloc$0224;$s$7 = $s$6;$wcs$8 = $wcs$7;
   label = 163;
  } else {
   $alloc$2 = $alloc$0224;$matches$2 = $matches$0135;$s$8 = $s$6;$wcs$9 = $wcs$7;
  }
 }
 else if ((label|0) == 166) {
  STACKTOP = sp;return ($matches$3|0);
 }
 if ((label|0) == 163) {
  $alloc$2 = $alloc$1;$matches$2 = -1;$s$8 = $s$7;$wcs$9 = $wcs$8;
 }
 $346 = ($alloc$2|0)==(0);
 if ($346) {
  $matches$3 = $matches$2;
  STACKTOP = sp;return ($matches$3|0);
 }
 _free($s$8);
 _free($wcs$9);
 $matches$3 = $matches$2;
 STACKTOP = sp;return ($matches$3|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f) + 32|0);
 HEAP32[$0>>2] = 585;
 $1 = (($f) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = (($f) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = (($f) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_MUSL_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 STACKTOP = sp;return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$01$lcssa = 0, $$019 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond4 = 0, $w$0$lcssa = 0, $w$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L5: do {
  if ($4) {
   $$01$lcssa = $s;
  } else {
   $5 = $c&255;
   $$019 = $s;
   while(1) {
    $12 = HEAP8[$$019>>0]|0;
    $13 = ($12<<24>>24)==(0);
    $14 = ($12<<24>>24)==($5<<24>>24);
    $or$cond = $13 | $14;
    $9 = (($$019) + 1|0);
    if ($or$cond) {
     $$0 = $$019;
     break;
    }
    $8 = $9;
    $10 = $8 & 3;
    $11 = ($10|0)==(0);
    if ($11) {
     $$01$lcssa = $9;
     break L5;
    } else {
     $$019 = $9;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$01$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 L12: do {
  if ($21) {
   $30 = $16;$w$05 = $$01$lcssa;
   while(1) {
    $29 = $30 ^ $15;
    $31 = (($29) + -16843009)|0;
    $32 = $29 & -2139062144;
    $33 = $32 ^ -2139062144;
    $34 = $33 & $31;
    $35 = ($34|0)==(0);
    $23 = (($w$05) + 4|0);
    if (!($35)) {
     $w$0$lcssa = $w$05;
     break L12;
    }
    $22 = HEAP32[$23>>2]|0;
    $24 = (($22) + -16843009)|0;
    $25 = $22 & -2139062144;
    $26 = $25 ^ -2139062144;
    $27 = $26 & $24;
    $28 = ($27|0)==(0);
    if ($28) {
     $30 = $22;$w$05 = $23;
    } else {
     $w$0$lcssa = $23;
     break;
    }
   }
  } else {
   $w$0$lcssa = $$01$lcssa;
  }
 } while(0);
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond4 = $38 | $39;
  $40 = (($$1) + 1|0);
  if ($or$cond4) {
   $$0 = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$$i = 0, $$$i17 = 0, $$$i8 = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i16 = 0, $$0$lcssa$i7 = 0, $$01$i = 0, $$02$i = 0, $$02$i12 = 0, $$02$i5 = 0, $$02$us$i = 0, $$lcssa$i = 0, $$lcssa$i15 = 0, $$mem$0$us$i = 0, $$pr5$i = 0, $$pr5$us$i = 0, $0 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $byteset$i = 0;
 var $div$i = 0, $div$us$i = 0, $div3$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i11 = 0, $ip$0$ph77$i = 0, $ip$0$ph77142$i = 0, $ip$0$ph80$i = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph57$i = 0, $ip$1$ph60$i = 0, $jp$0$ph24$ph71$i = 0, $jp$0$ph2465$i = 0, $jp$0$ph81$i = 0, $jp$1$ph15$ph51$i = 0, $jp$1$ph1545$i = 0, $jp$1$ph61$i = 0, $k$032$i = 0;
 var $k$121$i = 0, $k$2$us$i = 0, $k$311$i = 0, $k$311$us$i = 0, $k$4$i = 0, $k$4$us$i = 0, $l$040$i = 0, $mem$0$us$i = 0, $or$cond$i = 0, $or$cond$i13 = 0, $or$cond4$us$i = 0, $p$0$ph$ph69$i = 0, $p$0$ph$ph69146$i = 0, $p$0$ph$ph72$i = 0, $p$1$p$0$i = 0, $p$1$ph$ph49$i = 0, $p$1$ph$ph52$i = 0, $p$3151$i = 0, $shift$i = 0, $z$0$i = 0;
 var $z$0$us$i = 0, $z$1$i = 0, $z$1$us$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = $h;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $0 << 24 >> 24;
 $3 = (_strchr($h,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($n) + 1|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$0 = $3;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = (($3) + 1|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = (($n) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 if ($13) {
  $14 = $0&255;
  $15 = $14 << 8;
  $16 = $6&255;
  $17 = $16 | $15;
  $18 = HEAP8[$3>>0]|0;
  $19 = $18&255;
  $20 = $9&255;
  $21 = $19 << 8;
  $22 = $21 | $20;
  $$01$i = $8;$275 = $9;$hw$0$in2$i = $22;
  while(1) {
   $23 = $hw$0$in2$i & 65535;
   $24 = ($23|0)==($17|0);
   if ($24) {
    $$0$lcssa$i = $$01$i;$32 = $275;
    break;
   }
   $25 = $23 << 8;
   $26 = (($$01$i) + 1|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = $28 | $25;
   $30 = ($27<<24>>24)==(0);
   if ($30) {
    $$0$lcssa$i = $26;$32 = 0;
    break;
   } else {
    $$01$i = $26;$275 = $27;$hw$0$in2$i = $29;
   }
  }
  $31 = ($32<<24>>24)==(0);
  $33 = (($$0$lcssa$i) + -1|0);
  $$$i = $31 ? 0 : $33;
  $$0 = $$$i;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = (($3) + 2|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $37 = (($n) + 3|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = ($38<<24>>24)==(0);
 if ($39) {
  $40 = $0&255;
  $41 = $40 << 24;
  $42 = $6&255;
  $43 = $42 << 16;
  $44 = $43 | $41;
  $45 = $12&255;
  $46 = $45 << 8;
  $47 = $44 | $46;
  $48 = HEAP8[$3>>0]|0;
  $49 = $48&255;
  $50 = $49 << 24;
  $51 = $9&255;
  $52 = $51 << 16;
  $53 = $35&255;
  $54 = $53 << 8;
  $55 = $54 | $52;
  $56 = $55 | $50;
  $57 = ($56|0)==($47|0);
  if ($57) {
   $$0$lcssa$i7 = $34;$$lcssa$i = 0;
  } else {
   $$02$i5 = $34;$hw$03$i = $56;
   while(1) {
    $58 = (($$02$i5) + 1|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = $60 | $hw$03$i;
    $62 = $61 << 8;
    $63 = ($59<<24>>24)==(0);
    $64 = ($62|0)==($47|0);
    $or$cond$i = $63 | $64;
    if ($or$cond$i) {
     $$0$lcssa$i7 = $58;$$lcssa$i = $63;
     break;
    } else {
     $$02$i5 = $58;$hw$03$i = $62;
    }
   }
  }
  $65 = (($$0$lcssa$i7) + -2|0);
  $$$i8 = $$lcssa$i ? 0 : $65;
  $$0 = $$$i8;
  STACKTOP = sp;return ($$0|0);
 }
 $66 = (($3) + 3|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = ($67<<24>>24)==(0);
 if ($68) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $69 = (($n) + 4|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = ($70<<24>>24)==(0);
 if ($71) {
  $72 = $0&255;
  $73 = $72 << 24;
  $74 = $6&255;
  $75 = $74 << 16;
  $76 = $75 | $73;
  $77 = $12&255;
  $78 = $77 << 8;
  $79 = $76 | $78;
  $80 = $38&255;
  $81 = $79 | $80;
  $82 = HEAP8[$3>>0]|0;
  $83 = $82&255;
  $84 = $83 << 24;
  $85 = $9&255;
  $86 = $85 << 16;
  $87 = $35&255;
  $88 = $87 << 8;
  $89 = $67&255;
  $90 = $88 | $86;
  $91 = $90 | $89;
  $92 = $91 | $84;
  $93 = ($92|0)==($81|0);
  if ($93) {
   $$0$lcssa$i16 = $66;$$lcssa$i15 = 0;
  } else {
   $$02$i12 = $66;$hw$03$i11 = $92;
   while(1) {
    $94 = $hw$03$i11 << 8;
    $95 = (($$02$i12) + 1|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = $96&255;
    $98 = $97 | $94;
    $99 = ($96<<24>>24)==(0);
    $100 = ($98|0)==($81|0);
    $or$cond$i13 = $99 | $100;
    if ($or$cond$i13) {
     $$0$lcssa$i16 = $95;$$lcssa$i15 = $99;
     break;
    } else {
     $$02$i12 = $95;$hw$03$i11 = $98;
    }
   }
  }
  $101 = (($$0$lcssa$i16) + -3|0);
  $$$i17 = $$lcssa$i15 ? 0 : $101;
  $$0 = $$$i17;
  STACKTOP = sp;return ($$0|0);
 }
 ;HEAP32[$byteset$i+0>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
 $106 = $0;$l$040$i = 0;
 while(1) {
  $102 = (($3) + ($l$040$i)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = ($103<<24>>24)==(0);
  if ($104) {
   $$0 = 0;
   label = 79;
   break;
  }
  $105 = $106 & 31;
  $107 = $105&255;
  $108 = 1 << $107;
  $div3$i = ($106&255) >>> 5;
  $109 = $div3$i&255;
  $110 = (($byteset$i) + ($109<<2)|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = $111 | $108;
  HEAP32[$110>>2] = $112;
  $113 = (($l$040$i) + 1)|0;
  $114 = $106&255;
  $115 = (($shift$i) + ($114<<2)|0);
  HEAP32[$115>>2] = $113;
  $116 = (($n) + ($113)|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = ($117<<24>>24)==(0);
  if ($118) {
   break;
  } else {
   $106 = $117;$l$040$i = $113;
  }
 }
 if ((label|0) == 79) {
  STACKTOP = sp;return ($$0|0);
 }
 $119 = ($113>>>0)>(1);
 L49: do {
  if ($119) {
   $276 = 1;$ip$0$ph80$i = -1;$jp$0$ph81$i = 0;
   L50: while(1) {
    $277 = $276;$jp$0$ph24$ph71$i = $jp$0$ph81$i;$p$0$ph$ph72$i = 1;
    while(1) {
     $278 = $277;$jp$0$ph2465$i = $jp$0$ph24$ph71$i;
     L54: while(1) {
      $121 = $278;$k$032$i = 1;
      while(1) {
       $126 = (($k$032$i) + ($ip$0$ph80$i))|0;
       $127 = (($n) + ($126)|0);
       $128 = HEAP8[$127>>0]|0;
       $129 = (($n) + ($121)|0);
       $130 = HEAP8[$129>>0]|0;
       $131 = ($128<<24>>24)==($130<<24>>24);
       if (!($131)) {
        break L54;
       }
       $132 = ($k$032$i|0)==($p$0$ph$ph72$i|0);
       $124 = (($k$032$i) + 1)|0;
       if ($132) {
        break;
       }
       $123 = (($124) + ($jp$0$ph2465$i))|0;
       $125 = ($123>>>0)<($113>>>0);
       if ($125) {
        $121 = $123;$k$032$i = $124;
       } else {
        $ip$0$ph77$i = $ip$0$ph80$i;$p$0$ph$ph69$i = $p$0$ph$ph72$i;
        break L50;
       }
      }
      $133 = (($jp$0$ph2465$i) + ($p$0$ph$ph72$i))|0;
      $134 = (($133) + 1)|0;
      $135 = ($134>>>0)<($113>>>0);
      if ($135) {
       $278 = $134;$jp$0$ph2465$i = $133;
      } else {
       $ip$0$ph77$i = $ip$0$ph80$i;$p$0$ph$ph69$i = $p$0$ph$ph72$i;
       break L50;
      }
     }
     $136 = ($128&255)>($130&255);
     $137 = (($121) - ($ip$0$ph80$i))|0;
     if (!($136)) {
      break;
     }
     $120 = (($121) + 1)|0;
     $122 = ($120>>>0)<($113>>>0);
     if ($122) {
      $277 = $120;$jp$0$ph24$ph71$i = $121;$p$0$ph$ph72$i = $137;
     } else {
      $ip$0$ph77$i = $ip$0$ph80$i;$p$0$ph$ph69$i = $137;
      break L50;
     }
    }
    $138 = (($jp$0$ph2465$i) + 1)|0;
    $139 = (($jp$0$ph2465$i) + 2)|0;
    $140 = ($139>>>0)<($113>>>0);
    if ($140) {
     $276 = $139;$ip$0$ph80$i = $jp$0$ph2465$i;$jp$0$ph81$i = $138;
    } else {
     $ip$0$ph77$i = $jp$0$ph2465$i;$p$0$ph$ph69$i = 1;
     break;
    }
   }
   $279 = 1;$ip$1$ph60$i = -1;$jp$1$ph61$i = 0;
   while(1) {
    $281 = $279;$jp$1$ph15$ph51$i = $jp$1$ph61$i;$p$1$ph$ph52$i = 1;
    while(1) {
     $280 = $281;$jp$1$ph1545$i = $jp$1$ph15$ph51$i;
     L69: while(1) {
      $148 = $280;$k$121$i = 1;
      while(1) {
       $144 = (($k$121$i) + ($ip$1$ph60$i))|0;
       $145 = (($n) + ($144)|0);
       $146 = HEAP8[$145>>0]|0;
       $147 = (($n) + ($148)|0);
       $149 = HEAP8[$147>>0]|0;
       $150 = ($146<<24>>24)==($149<<24>>24);
       if (!($150)) {
        break L69;
       }
       $151 = ($k$121$i|0)==($p$1$ph$ph52$i|0);
       $142 = (($k$121$i) + 1)|0;
       if ($151) {
        break;
       }
       $141 = (($142) + ($jp$1$ph1545$i))|0;
       $143 = ($141>>>0)<($113>>>0);
       if ($143) {
        $148 = $141;$k$121$i = $142;
       } else {
        $ip$0$ph77142$i = $ip$0$ph77$i;$ip$1$ph57$i = $ip$1$ph60$i;$p$0$ph$ph69146$i = $p$0$ph$ph69$i;$p$1$ph$ph49$i = $p$1$ph$ph52$i;
        break L49;
       }
      }
      $152 = (($jp$1$ph1545$i) + ($p$1$ph$ph52$i))|0;
      $153 = (($152) + 1)|0;
      $154 = ($153>>>0)<($113>>>0);
      if ($154) {
       $280 = $153;$jp$1$ph1545$i = $152;
      } else {
       $ip$0$ph77142$i = $ip$0$ph77$i;$ip$1$ph57$i = $ip$1$ph60$i;$p$0$ph$ph69146$i = $p$0$ph$ph69$i;$p$1$ph$ph49$i = $p$1$ph$ph52$i;
       break L49;
      }
     }
     $155 = ($146&255)<($149&255);
     $156 = (($148) - ($ip$1$ph60$i))|0;
     if (!($155)) {
      break;
     }
     $157 = (($148) + 1)|0;
     $158 = ($157>>>0)<($113>>>0);
     if ($158) {
      $281 = $157;$jp$1$ph15$ph51$i = $148;$p$1$ph$ph52$i = $156;
     } else {
      $ip$0$ph77142$i = $ip$0$ph77$i;$ip$1$ph57$i = $ip$1$ph60$i;$p$0$ph$ph69146$i = $p$0$ph$ph69$i;$p$1$ph$ph49$i = $156;
      break L49;
     }
    }
    $159 = (($jp$1$ph1545$i) + 1)|0;
    $160 = (($jp$1$ph1545$i) + 2)|0;
    $161 = ($160>>>0)<($113>>>0);
    if ($161) {
     $279 = $160;$ip$1$ph60$i = $jp$1$ph1545$i;$jp$1$ph61$i = $159;
    } else {
     $ip$0$ph77142$i = $ip$0$ph77$i;$ip$1$ph57$i = $jp$1$ph1545$i;$p$0$ph$ph69146$i = $p$0$ph$ph69$i;$p$1$ph$ph49$i = 1;
     break;
    }
   }
  } else {
   $ip$0$ph77142$i = -1;$ip$1$ph57$i = -1;$p$0$ph$ph69146$i = 1;$p$1$ph$ph49$i = 1;
  }
 } while(0);
 $162 = (($ip$1$ph57$i) + 1)|0;
 $163 = (($ip$0$ph77142$i) + 1)|0;
 $164 = ($162>>>0)>($163>>>0);
 $p$1$p$0$i = $164 ? $p$1$ph$ph49$i : $p$0$ph$ph69146$i;
 $ip$1$ip$0$i = $164 ? $ip$1$ph57$i : $ip$0$ph77142$i;
 $165 = (($n) + ($p$1$p$0$i)|0);
 $166 = (($ip$1$ip$0$i) + 1)|0;
 $167 = (_memcmp($n,$165,$166)|0);
 $168 = ($167|0)==(0);
 if ($168) {
  $174 = (($113) - ($p$1$p$0$i))|0;
  $175 = $113 | 63;
  $176 = ($113|0)==($p$1$p$0$i|0);
  if ($176) {
   $232 = $175;$p$3151$i = $113;
  } else {
   $$02$us$i = $3;$mem$0$us$i = 0;$z$0$us$i = $3;
   L83: while(1) {
    $178 = $z$0$us$i;
    $179 = $$02$us$i;
    $180 = (($178) - ($179))|0;
    $181 = ($180>>>0)<($113>>>0);
    do {
     if ($181) {
      $182 = (_memchr($z$0$us$i,0,$175)|0);
      $183 = ($182|0)==(0|0);
      if ($183) {
       $187 = (($z$0$us$i) + ($175)|0);
       $z$1$us$i = $187;
       break;
      } else {
       $184 = $182;
       $185 = (($184) - ($179))|0;
       $186 = ($185>>>0)<($113>>>0);
       if ($186) {
        $$0 = 0;
        label = 79;
        break L83;
       } else {
        $z$1$us$i = $182;
        break;
       }
      }
     } else {
      $z$1$us$i = $z$0$us$i;
     }
    } while(0);
    $188 = (($$02$us$i) + ($l$040$i)|0);
    $189 = HEAP8[$188>>0]|0;
    $div$us$i = ($189&255) >>> 5;
    $190 = $div$us$i&255;
    $191 = (($byteset$i) + ($190<<2)|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = $189 & 31;
    $194 = $193&255;
    $195 = 1 << $194;
    $196 = $195 & $192;
    $197 = ($196|0)==(0);
    if ($197) {
     $227 = (($$02$us$i) + ($113)|0);
     $$02$us$i = $227;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
     continue;
    }
    $198 = $189&255;
    $199 = (($shift$i) + ($198<<2)|0);
    $200 = HEAP32[$199>>2]|0;
    $201 = (($113) - ($200))|0;
    $202 = ($113|0)==($200|0);
    if (!($202)) {
     $203 = ($mem$0$us$i|0)!=(0);
     $204 = ($201>>>0)<($p$1$p$0$i>>>0);
     $or$cond4$us$i = $203 & $204;
     $k$2$us$i = $or$cond4$us$i ? $174 : $201;
     $205 = (($$02$us$i) + ($k$2$us$i)|0);
     $$02$us$i = $205;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
     continue;
    }
    $206 = ($166>>>0)>($mem$0$us$i>>>0);
    $$mem$0$us$i = $206 ? $166 : $mem$0$us$i;
    $207 = (($n) + ($$mem$0$us$i)|0);
    $208 = HEAP8[$207>>0]|0;
    $209 = ($208<<24>>24)==(0);
    L97: do {
     if ($209) {
      $k$4$us$i = $166;
     } else {
      $$pr5$us$i = $208;$k$311$us$i = $$mem$0$us$i;
      while(1) {
       $214 = (($$02$us$i) + ($k$311$us$i)|0);
       $215 = HEAP8[$214>>0]|0;
       $216 = ($$pr5$us$i<<24>>24)==($215<<24>>24);
       $211 = (($k$311$us$i) + 1)|0;
       if (!($216)) {
        break;
       }
       $210 = (($n) + ($211)|0);
       $212 = HEAP8[$210>>0]|0;
       $213 = ($212<<24>>24)==(0);
       if ($213) {
        $k$4$us$i = $166;
        break L97;
       } else {
        $$pr5$us$i = $212;$k$311$us$i = $211;
       }
      }
      $217 = (($k$311$us$i) - ($ip$1$ip$0$i))|0;
      $218 = (($$02$us$i) + ($217)|0);
      $$02$us$i = $218;$mem$0$us$i = 0;$z$0$us$i = $z$1$us$i;
      continue L83;
     }
    } while(0);
    while(1) {
     $219 = ($k$4$us$i>>>0)>($mem$0$us$i>>>0);
     if (!($219)) {
      $$0 = $$02$us$i;
      label = 79;
      break L83;
     }
     $220 = (($k$4$us$i) + -1)|0;
     $221 = (($n) + ($220)|0);
     $222 = HEAP8[$221>>0]|0;
     $223 = (($$02$us$i) + ($220)|0);
     $224 = HEAP8[$223>>0]|0;
     $225 = ($222<<24>>24)==($224<<24>>24);
     if ($225) {
      $k$4$us$i = $220;
     } else {
      break;
     }
    }
    $226 = (($$02$us$i) + ($p$1$p$0$i)|0);
    $$02$us$i = $226;$mem$0$us$i = $174;$z$0$us$i = $z$1$us$i;
   }
   if ((label|0) == 79) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } else {
  $169 = (($113) - ($ip$1$ip$0$i))|0;
  $170 = (($169) + -1)|0;
  $171 = ($ip$1$ip$0$i>>>0)>($170>>>0);
  $ip$1$ip$0$$i = $171 ? $ip$1$ip$0$i : $170;
  $172 = (($ip$1$ip$0$$i) + 1)|0;
  $173 = $113 | 63;
  $232 = $173;$p$3151$i = $172;
 }
 $177 = (($n) + ($166)|0);
 $$02$i = $3;$z$0$i = $3;
 L110: while(1) {
  $228 = $z$0$i;
  $229 = $$02$i;
  $230 = (($228) - ($229))|0;
  $231 = ($230>>>0)<($113>>>0);
  do {
   if ($231) {
    $233 = (_memchr($z$0$i,0,$232)|0);
    $234 = ($233|0)==(0|0);
    if ($234) {
     $238 = (($z$0$i) + ($232)|0);
     $z$1$i = $238;
     break;
    } else {
     $235 = $233;
     $236 = (($235) - ($229))|0;
     $237 = ($236>>>0)<($113>>>0);
     if ($237) {
      $$0 = 0;
      label = 79;
      break L110;
     } else {
      $z$1$i = $233;
      break;
     }
    }
   } else {
    $z$1$i = $z$0$i;
   }
  } while(0);
  $239 = (($$02$i) + ($l$040$i)|0);
  $240 = HEAP8[$239>>0]|0;
  $div$i = ($240&255) >>> 5;
  $241 = $div$i&255;
  $242 = (($byteset$i) + ($241<<2)|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = $240 & 31;
  $245 = $244&255;
  $246 = 1 << $245;
  $247 = $246 & $243;
  $248 = ($247|0)==(0);
  if ($248) {
   $255 = (($$02$i) + ($113)|0);
   $$02$i = $255;$z$0$i = $z$1$i;
   continue;
  }
  $249 = $240&255;
  $250 = (($shift$i) + ($249<<2)|0);
  $251 = HEAP32[$250>>2]|0;
  $252 = ($113|0)==($251|0);
  if (!($252)) {
   $253 = (($113) - ($251))|0;
   $254 = (($$02$i) + ($253)|0);
   $$02$i = $254;$z$0$i = $z$1$i;
   continue;
  }
  $256 = HEAP8[$177>>0]|0;
  $257 = ($256<<24>>24)==(0);
  L124: do {
   if ($257) {
    $k$4$i = $166;
   } else {
    $$pr5$i = $256;$k$311$i = $166;
    while(1) {
     $262 = (($$02$i) + ($k$311$i)|0);
     $263 = HEAP8[$262>>0]|0;
     $264 = ($$pr5$i<<24>>24)==($263<<24>>24);
     $259 = (($k$311$i) + 1)|0;
     if (!($264)) {
      break;
     }
     $258 = (($n) + ($259)|0);
     $260 = HEAP8[$258>>0]|0;
     $261 = ($260<<24>>24)==(0);
     if ($261) {
      $k$4$i = $166;
      break L124;
     } else {
      $$pr5$i = $260;$k$311$i = $259;
     }
    }
    $265 = (($k$311$i) - ($ip$1$ip$0$i))|0;
    $266 = (($$02$i) + ($265)|0);
    $$02$i = $266;$z$0$i = $z$1$i;
    continue L110;
   }
  } while(0);
  while(1) {
   $267 = ($k$4$i|0)==(0);
   if ($267) {
    $$0 = $$02$i;
    label = 79;
    break L110;
   }
   $268 = (($k$4$i) + -1)|0;
   $269 = (($n) + ($268)|0);
   $270 = HEAP8[$269>>0]|0;
   $271 = (($$02$i) + ($268)|0);
   $272 = HEAP8[$271>>0]|0;
   $273 = ($270<<24>>24)==($272<<24>>24);
   if ($273) {
    $k$4$i = $268;
   } else {
    break;
   }
  }
  $274 = (($$02$i) + ($p$3151$i)|0);
  $$02$i = $274;$z$0$i = $z$1$i;
 }
 if ((label|0) == 79) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0);
  $2 = (($$0) + 4|0);
  if ($1) {
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0;
 $4 = $s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 STACKTOP = sp;return ($6|0);
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  STACKTOP = sp;return ($d|0);
 } else {
  $$014 = $n;$$023 = $s;$$05 = $d;
 }
 while(1) {
  $1 = (($$014) + -1)|0;
  $2 = (($$023) + 4|0);
  $3 = HEAP32[$$023>>2]|0;
  $4 = (($$05) + 4|0);
  HEAP32[$$05>>2] = $3;
  $5 = ($1|0)==(0);
  if ($5) {
   break;
  } else {
   $$014 = $1;$$023 = $2;$$05 = $4;
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $d;
 $1 = $s;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)<($n>>>0);
 $5 = ($n|0)==(0);
 if ($4) {
  if (!($5)) {
   $$in = $n;
   while(1) {
    $6 = (($$in) + -1)|0;
    $7 = (($s) + ($6<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($d) + ($6<<2)|0);
    HEAP32[$9>>2] = $8;
    $10 = ($6|0)==(0);
    if ($10) {
     break;
    } else {
     $$in = $6;
    }
   }
  }
 } else {
  if (!($5)) {
   $$025 = $s;$$07 = $d;$$16 = $n;
   while(1) {
    $11 = (($$16) + -1)|0;
    $12 = (($$025) + 4|0);
    $13 = HEAP32[$$025>>2]|0;
    $14 = (($$07) + 4|0);
    HEAP32[$$07>>2] = $13;
    $15 = ($11|0)==(0);
    if ($15) {
     break;
    } else {
     $$025 = $12;$$07 = $14;$$16 = $11;
    }
   }
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if (!($0)) {
  $$012 = $n;$$03 = $d;
  while(1) {
   $1 = (($$012) + -1)|0;
   $2 = (($$03) + 4|0);
   HEAP32[$$03>>2] = $c;
   $3 = ($1|0)==(0);
   if ($3) {
    break;
   } else {
    $$012 = $1;$$03 = $2;
   }
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 STACKTOP = sp;return ($0|0);
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[_stderr>>2]|0;
 (_vfprintf(($0|0),($format|0),($list|0))|0);
 (_fputc(10,($0|0))|0);
 _abort();
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((18928|0),(586|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[18920>>2]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(18936,$vararg_buffer);
  // unreachable;
 }
 return 0|0;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 $1 = (_malloc($$size)|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$lcssa = $1;
  STACKTOP = sp;return ($$lcssa|0);
 }
 while(1) {
  $3 = (__ZSt15get_new_handlerv()|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   label = 4;
   break;
  }
  FUNCTION_TABLE_v[$3 & 1023]();
  $5 = (_malloc($$size)|0);
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $$lcssa = $5;
   label = 5;
   break;
  }
 }
 if ((label|0) == 4) {
  $7 = (___cxa_allocate_exception(4)|0);
  HEAP32[$7>>2] = ((19104 + 8|0));
  ___cxa_throw(($7|0),(19160|0),(369|0));
  // unreachable;
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$lcssa|0);
 }
 return 0|0;
}
function __Znaj($size) {
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj($size)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 STACKTOP = sp;return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((19104 + 8|0));
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (19128|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vii(587,(19176|0),($vararg_buffer|0));
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  if (!($3)) {
   // unreachable;
  }
 }
 $4 = ___cxa_find_matching_catch(0|0)|0;
 $5 = tempRet0;
 (___cxa_begin_catch(($4|0))|0);
 __THREW__ = 0;
 invoke_vii(587,(19216|0),($vararg_buffer1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  // unreachable;
 }
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 __THREW__ = 0;
 invoke_v(438);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch(0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 } else {
  ___clang_call_terminate($8);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(588)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = (($4) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = (($4) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = HEAP32[4684]|0;HEAP32[4684] = (($19+0)|0);
 $20 = $19;
 __ZSt11__terminatePFvvE($20);
 // unreachable;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[19272>>2]|0;HEAP32[19272>>2] = (($0+0)|0);
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((19304 + 8|0));
 $0 = (($this) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((19328 + 8|0));
 $0 = (($this) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt12out_of_rangeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt8bad_castC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((19552 + 8|0));
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (19576|0);
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this|0)==($thrown_type|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $1 = ($thrown_type|0)==(0|0);
 if ($1) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $2 = (___dynamic_cast($thrown_type,19688,19744,0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$info>>2] = $2;
 $4 = (($info) + 8|0);
 HEAP32[$4>>2] = $this;
 $5 = (($info) + 12|0);
 HEAP32[$5>>2] = -1;
 $6 = (($info) + 48|0);
 HEAP32[$6>>2] = 1;
 $7 = HEAP32[$2>>2]|0;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$adjustedPtr>>2]|0;
 FUNCTION_TABLE_viiii[$9 & 511]($2,$info,$10,1);
 $11 = (($info) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(1);
 if (!($13)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $14 = (($info) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$adjustedPtr>>2] = $15;
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  HEAP32[$0>>2] = $adjustedPtr;
  $3 = (($info) + 24|0);
  HEAP32[$3>>2] = $path_below;
  $4 = (($info) + 36|0);
  HEAP32[$4>>2] = 1;
  STACKTOP = sp;return;
 }
 $5 = ($1|0)==($adjustedPtr|0);
 if (!($5)) {
  $9 = (($info) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $12 = (($info) + 24|0);
  HEAP32[$12>>2] = 2;
  $13 = (($info) + 54|0);
  HEAP8[$13>>0] = 1;
  STACKTOP = sp;return;
 }
 $6 = (($info) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(2);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 HEAP32[$6>>2] = $path_below;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 511]($4,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 511]($8,$info,$12,$15);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
 $3 = (($this) + 16|0);
 $4 = (($this) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($this) + ($5<<3)|0) + 16|0);
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
 $7 = ($5|0)>(1);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = (($this) + 24|0);
 $9 = (($info) + 54|0);
 $p$0 = $8;
 while(1) {
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if (!($11)) {
   label = 7;
   break;
  }
  $12 = (($p$0) + 8|0);
  $13 = ($12>>>0)<($6>>>0);
  if ($13) {
   $p$0 = $12;
  } else {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = (($0) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = (($0) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = (($info) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = (($info) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = (($info) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = (($info) + 16|0);
 $11 = (($info) + 20|0);
 $12 = (($info) + 24|0);
 $13 = (($info) + 28|0);
 $14 = (($info) + 32|0);
 $15 = (($info) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 if ($16) {
  $17 = (($info) + 48|0);
  HEAP32[$17>>2] = 1;
  $18 = HEAP32[$6>>2]|0;
  $19 = (($18) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  FUNCTION_TABLE_viiiiii[$20 & 511]($6,$info,$4,$4,1,0);
  $21 = HEAP32[$12>>2]|0;
  $22 = ($21|0)==(1);
  $$ = $22 ? $4 : 0;
  $dst_ptr$0 = $$;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 $23 = (($info) + 36|0);
 $24 = HEAP32[$6>>2]|0;
 $25 = (($24) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_viiiii[$26 & 511]($6,$info,$4,1,0);
 $27 = HEAP32[$23>>2]|0;
 if ((($27|0) == 1)) {
  $35 = HEAP32[$12>>2]|0;
  $36 = ($35|0)==(1);
  if (!($36)) {
   $37 = HEAP32[$15>>2]|0;
   $38 = ($37|0)==(0);
   $39 = HEAP32[$13>>2]|0;
   $40 = ($39|0)==(1);
   $or$cond5 = $38 & $40;
   $41 = HEAP32[$14>>2]|0;
   $42 = ($41|0)==(1);
   $or$cond7 = $or$cond5 & $42;
   if (!($or$cond7)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
  }
  $43 = HEAP32[$10>>2]|0;
  $dst_ptr$0 = $43;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else if ((($27|0) == 0)) {
  $28 = HEAP32[$15>>2]|0;
  $29 = ($28|0)==(1);
  $30 = HEAP32[$13>>2]|0;
  $31 = ($30|0)==(1);
  $or$cond = $29 & $31;
  $32 = HEAP32[$14>>2]|0;
  $33 = ($32|0)==(1);
  $or$cond3 = $or$cond & $33;
  $34 = HEAP32[$11>>2]|0;
  $$8 = $or$cond3 ? $34 : 0;
  $dst_ptr$0 = $$8;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else {
  $dst_ptr$0 = 0;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 return 0|0;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = (($info) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($info) + 52|0);
 HEAP8[$4>>0] = 1;
 $5 = (($info) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  HEAP32[$5>>2] = $dst_ptr;
  $8 = (($info) + 24|0);
  HEAP32[$8>>2] = $path_below;
  $9 = (($info) + 36|0);
  HEAP32[$9>>2] = 1;
  $10 = (($info) + 48|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(1);
  $13 = ($path_below|0)==(1);
  $or$cond = $12 & $13;
  if (!($or$cond)) {
   STACKTOP = sp;return;
  }
  $14 = (($info) + 54|0);
  HEAP8[$14>>0] = 1;
  STACKTOP = sp;return;
 }
 $15 = ($6|0)==($dst_ptr|0);
 if (!($15)) {
  $25 = (($info) + 36|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$25>>2] = $27;
  $28 = (($info) + 54|0);
  HEAP8[$28>>0] = 1;
  STACKTOP = sp;return;
 }
 $16 = (($info) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(2);
 if ($18) {
  HEAP32[$16>>2] = $path_below;
  $23 = $path_below;
 } else {
  $23 = $17;
 }
 $19 = (($info) + 48|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(1);
 $22 = ($23|0)==(1);
 $or$cond1 = $21 & $22;
 if (!($or$cond1)) {
  STACKTOP = sp;return;
 }
 $24 = (($info) + 54|0);
 HEAP8[$24>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off012 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off014 = 0;
 var $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $is_dst_type_derived_from_static_type$2$off023 = 0, $is_dst_type_derived_from_static_type$2$off024 = 0, $p$013 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if (!($10)) {
  $59 = (($this) + 16|0);
  $60 = (($this) + 12|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($this) + ($61<<3)|0) + 16|0);
  __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($59,$info,$current_ptr,$path_below,$use_strcmp);
  $63 = (($this) + 24|0);
  $64 = ($61|0)>(1);
  if (!($64)) {
   STACKTOP = sp;return;
  }
  $65 = (($this) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $66 & 2;
  $68 = ($67|0)==(0);
  if ($68) {
   $69 = (($info) + 36|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if (!($71)) {
    $77 = $66 & 1;
    $78 = ($77|0)==(0);
    if ($78) {
     $81 = (($info) + 54|0);
     $p2$2 = $63;
     while(1) {
      $90 = HEAP8[$81>>0]|0;
      $91 = ($90<<24>>24)==(0);
      if (!($91)) {
       label = 43;
       break;
      }
      $92 = HEAP32[$69>>2]|0;
      $93 = ($92|0)==(1);
      if ($93) {
       label = 43;
       break;
      }
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
      $94 = (($p2$2) + 8|0);
      $95 = ($94>>>0)<($62>>>0);
      if ($95) {
       $p2$2 = $94;
      } else {
       label = 43;
       break;
      }
     }
     if ((label|0) == 43) {
      STACKTOP = sp;return;
     }
    }
    $79 = (($info) + 24|0);
    $80 = (($info) + 54|0);
    $p2$1 = $63;
    while(1) {
     $82 = HEAP8[$80>>0]|0;
     $83 = ($82<<24>>24)==(0);
     if (!($83)) {
      label = 43;
      break;
     }
     $84 = HEAP32[$69>>2]|0;
     $85 = ($84|0)==(1);
     if ($85) {
      $86 = HEAP32[$79>>2]|0;
      $87 = ($86|0)==(1);
      if ($87) {
       label = 43;
       break;
      }
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
     $88 = (($p2$1) + 8|0);
     $89 = ($88>>>0)<($62>>>0);
     if ($89) {
      $p2$1 = $88;
     } else {
      label = 43;
      break;
     }
    }
    if ((label|0) == 43) {
     STACKTOP = sp;return;
    }
   }
  }
  $72 = (($info) + 54|0);
  $p2$0 = $63;
  while(1) {
   $73 = HEAP8[$72>>0]|0;
   $74 = ($73<<24>>24)==(0);
   if (!($74)) {
    label = 43;
    break;
   }
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
   $75 = (($p2$0) + 8|0);
   $76 = ($75>>>0)<($62>>>0);
   if ($76) {
    $p2$0 = $75;
   } else {
    label = 43;
    break;
   }
  }
  if ((label|0) == 43) {
   STACKTOP = sp;return;
  }
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   $20 = (($info) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(4);
   if ($22) {
    STACKTOP = sp;return;
   }
   $23 = (($this) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($this) + ($24<<3)|0) + 16|0);
   $26 = ($24|0)>(0);
   L54: do {
    if ($26) {
     $27 = (($this) + 16|0);
     $28 = (($info) + 52|0);
     $29 = (($info) + 53|0);
     $30 = (($info) + 54|0);
     $31 = (($this) + 8|0);
     $32 = (($info) + 24|0);
     $does_dst_type_point_to_our_static_type$0$off012 = 0;$is_dst_type_derived_from_static_type$0$off014 = 0;$p$013 = $27;
     L56: while(1) {
      HEAP8[$28>>0] = 0;
      HEAP8[$29>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$013,$info,$current_ptr,$current_ptr,1,$use_strcmp);
      $33 = HEAP8[$30>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if (!($34)) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off014;
       break;
      }
      $35 = HEAP8[$29>>0]|0;
      $36 = ($35<<24>>24)==(0);
      do {
       if ($36) {
        $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off014;
       } else {
        $37 = HEAP8[$28>>0]|0;
        $38 = ($37<<24>>24)==(0);
        if ($38) {
         $44 = HEAP32[$31>>2]|0;
         $45 = $44 & 1;
         $46 = ($45|0)==(0);
         if ($46) {
          $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$2$off0 = 1;
          break L56;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$1$off0 = 1;
          break;
         }
        }
        $39 = HEAP32[$32>>2]|0;
        $40 = ($39|0)==(1);
        if ($40) {
         label = 25;
         break L54;
        }
        $41 = HEAP32[$31>>2]|0;
        $42 = $41 & 2;
        $43 = ($42|0)==(0);
        if ($43) {
         label = 25;
         break L54;
        } else {
         $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
        }
       }
      } while(0);
      $47 = (($p$013) + 8|0);
      $48 = ($47>>>0)<($25>>>0);
      if ($48) {
       $does_dst_type_point_to_our_static_type$0$off012 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off014 = $is_dst_type_derived_from_static_type$1$off0;$p$013 = $47;
      } else {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
       break;
      }
     }
     if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
      $is_dst_type_derived_from_static_type$2$off024 = $is_dst_type_derived_from_static_type$2$off0;
      label = 24;
     } else {
      $is_dst_type_derived_from_static_type$2$off023 = $is_dst_type_derived_from_static_type$2$off0;
      label = 21;
     }
    } else {
     $is_dst_type_derived_from_static_type$2$off023 = 0;
     label = 21;
    }
   } while(0);
   if ((label|0) == 21) {
    HEAP32[$14>>2] = $current_ptr;
    $49 = (($info) + 40|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (($50) + 1)|0;
    HEAP32[$49>>2] = $51;
    $52 = (($info) + 36|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==(1);
    if ($54) {
     $55 = (($info) + 24|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==(2);
     if ($57) {
      $58 = (($info) + 54|0);
      HEAP8[$58>>0] = 1;
      if ($is_dst_type_derived_from_static_type$2$off023) {
       label = 25;
      } else {
       label = 26;
      }
     } else {
      $is_dst_type_derived_from_static_type$2$off024 = $is_dst_type_derived_from_static_type$2$off023;
      label = 24;
     }
    } else {
     $is_dst_type_derived_from_static_type$2$off024 = $is_dst_type_derived_from_static_type$2$off023;
     label = 24;
    }
   }
   if ((label|0) == 24) {
    if ($is_dst_type_derived_from_static_type$2$off024) {
     label = 25;
    } else {
     label = 26;
    }
   }
   if ((label|0) == 25) {
    HEAP32[$20>>2] = 3;
    STACKTOP = sp;return;
   }
   else if ((label|0) == 26) {
    HEAP32[$20>>2] = 4;
    STACKTOP = sp;return;
   }
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 511]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 511]($8,$info,$12,$15,$use_strcmp);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if (!($10)) {
  $43 = (($this) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  FUNCTION_TABLE_viiiii[$47 & 511]($44,$info,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   $20 = (($info) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(4);
   if ($22) {
    STACKTOP = sp;return;
   }
   $23 = (($info) + 52|0);
   HEAP8[$23>>0] = 0;
   $24 = (($info) + 53|0);
   HEAP8[$24>>0] = 0;
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_viiiiii[$29 & 511]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
   $30 = HEAP8[$24>>0]|0;
   $31 = ($30<<24>>24)==(0);
   if ($31) {
    $is_dst_type_derived_from_static_type$0$off01 = 0;
    label = 13;
   } else {
    $32 = HEAP8[$23>>0]|0;
    $not$ = ($32<<24>>24)==(0);
    if ($not$) {
     $is_dst_type_derived_from_static_type$0$off01 = 1;
     label = 13;
    }
   }
   do {
    if ((label|0) == 13) {
     HEAP32[$14>>2] = $current_ptr;
     $33 = (($info) + 40|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (($34) + 1)|0;
     HEAP32[$33>>2] = $35;
     $36 = (($info) + 36|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(1);
     if ($38) {
      $39 = (($info) + 24|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==(2);
      if ($41) {
       $42 = (($info) + 54|0);
       HEAP8[$42>>0] = 1;
       if ($is_dst_type_derived_from_static_type$0$off01) {
        break;
       }
      } else {
       label = 16;
      }
     } else {
      label = 16;
     }
     if ((label|0) == 16) {
      if ($is_dst_type_derived_from_static_type$0$off01) {
       break;
      }
     }
     HEAP32[$20>>2] = 4;
     STACKTOP = sp;return;
    }
   } while(0);
   HEAP32[$20>>2] = 3;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($9|0)==($this|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   HEAP32[$14>>2] = $current_ptr;
   $20 = (($info) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 1)|0;
   HEAP32[$20>>2] = $22;
   $23 = (($info) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(1);
   if ($25) {
    $26 = (($info) + 24|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(2);
    if ($28) {
     $29 = (($info) + 54|0);
     HEAP8[$29>>0] = 1;
    }
   }
   $30 = (($info) + 44|0);
   HEAP32[$30>>2] = 4;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
  STACKTOP = sp;return;
 }
 $3 = (($info) + 52|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = (($info) + 53|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = (($this) + 16|0);
 $8 = (($this) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($this) + ($9<<3)|0) + 16|0);
 HEAP8[$3>>0] = 0;
 HEAP8[$5>>0] = 0;
 __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($7,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 $11 = ($9|0)>(1);
 L5: do {
  if ($11) {
   $12 = (($this) + 24|0);
   $13 = (($info) + 24|0);
   $14 = (($this) + 8|0);
   $15 = (($info) + 54|0);
   $p$0 = $12;
   while(1) {
    $16 = HEAP8[$15>>0]|0;
    $17 = ($16<<24>>24)==(0);
    if (!($17)) {
     break L5;
    }
    $18 = HEAP8[$3>>0]|0;
    $19 = ($18<<24>>24)==(0);
    if ($19) {
     $25 = HEAP8[$5>>0]|0;
     $26 = ($25<<24>>24)==(0);
     if (!($26)) {
      $27 = HEAP32[$14>>2]|0;
      $28 = $27 & 1;
      $29 = ($28|0)==(0);
      if ($29) {
       break L5;
      }
     }
    } else {
     $20 = HEAP32[$13>>2]|0;
     $21 = ($20|0)==(1);
     if ($21) {
      break L5;
     }
     $22 = HEAP32[$14>>2]|0;
     $23 = $22 & 2;
     $24 = ($23|0)==(0);
     if ($24) {
      break L5;
     }
    }
    HEAP8[$3>>0] = 0;
    HEAP8[$5>>0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
    $30 = (($p$0) + 8|0);
    $31 = ($30>>>0)<($10>>>0);
    if ($31) {
     $p$0 = $30;
    } else {
     break;
    }
   }
  }
 } while(0);
 HEAP8[$3>>0] = $4;
 HEAP8[$5>>0] = $6;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
  STACKTOP = sp;return;
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 511]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 STACKTOP = sp;return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 1023]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if (!($4)) {
  STACKTOP = sp;return ($5|0);
 }
 $6 = HEAP32[$temp>>2]|0;
 HEAP32[$thrown>>2] = $6;
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,19688,19856,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 STACKTOP = sp;return ($2|0);
}
function __ZSt17__throw_bad_allocv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(4)|0);
 __ZNSt9bad_allocC2Ev($0);
 ___cxa_throw(($0|0),(19160|0),(369|0));
 // unreachable;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _abort_message(18904,$vararg_buffer10);
  // unreachable;
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _abort_message(18904,$vararg_buffer10);
  // unreachable;
 }
 $4 = (($2) + 80|0);
 $5 = (($2) + 48|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $8 & -256;
 $13 = ($12|0)==(1126902528);
 $14 = ($11|0)==(1129074247);
 $15 = $13 & $14;
 if (!($15)) {
  $36 = HEAP32[18744>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $36;
  _abort_message(18864,$vararg_buffer7);
  // unreachable;
 }
 $16 = ($8|0)==(1126902529);
 $17 = ($11|0)==(1129074247);
 $18 = $16 & $17;
 if ($18) {
  $19 = (($2) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20;
 } else {
  $21 = $4;
 }
 HEAP32[$thrown_object>>2] = $21;
 $22 = HEAP32[$2>>2]|0;
 $23 = (($22) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[19296>>2]|0;
 $26 = (($25) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (FUNCTION_TABLE_iiii[$27 & 1023](19296,$22,$thrown_object)|0);
 if ($28) {
  $29 = HEAP32[$thrown_object>>2]|0;
  $30 = HEAP32[18744>>2]|0;
  $31 = HEAP32[$29>>2]|0;
  $32 = (($31) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (FUNCTION_TABLE_ii[$33 & 1023]($29)|0);
  HEAP32[$vararg_buffer>>2] = $30;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $24;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $34;
  _abort_message(18768,$vararg_buffer);
  // unreachable;
 } else {
  $35 = HEAP32[18744>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $35;
  $vararg_ptr6 = (($vararg_buffer3) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $24;
  _abort_message(18816,$vararg_buffer3);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((18920|0),(589|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(18992,$vararg_buffer);
  // unreachable;
 }
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$this>>2]|0;
 $6 = (($5) + -12|0);
 __ZdlPv($6);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[18920>>2]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(19048,$vararg_buffer);
  // unreachable;
 }
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i23$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i24$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre58$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i12$i = 0, $$sum$i13$i = 0;
 var $$sum$i16$i = 0, $$sum$i19$i = 0, $$sum$i2338 = 0, $$sum$i32 = 0, $$sum$i39 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum102$i = 0, $$sum103$i = 0, $$sum104$i = 0, $$sum105$i = 0, $$sum106$i = 0;
 var $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i22$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0;
 var $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i15$i = 0, $$sum2$i17$i = 0, $$sum2$i21$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0;
 var $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0;
 var $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0;
 var $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0;
 var $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0;
 var $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0;
 var $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$027$i = 0, $K2$015$i$i = 0, $K8$053$i$i = 0;
 var $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i26$i = 0, $T$014$i$i = 0, $T$026$i = 0, $T$052$i$i = 0, $br$0$i = 0, $br$030$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0;
 var $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i27$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond24$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond47$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$i = 0;
 var $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$073$i = 0, $sp$166$i = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$129$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0;
 var $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$245$i = 0, $tsize$03141$i = 0, $tsize$1$i = 0, $tsize$244$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[20208>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((20208 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((20208 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[20208>>2] = $22;
     } else {
      $23 = HEAP32[((20208 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((20208 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((20208 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((20208 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[20208>>2] = $74;
       $89 = $34;
      } else {
       $75 = HEAP32[((20208 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[((20208 + 8|0))>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = ($89|0)==(0);
     if (!($88)) {
      $90 = HEAP32[((20208 + 20|0))>>2]|0;
      $91 = $89 >>> 3;
      $92 = $91 << 1;
      $93 = ((20208 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[20208>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[20208>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre105 = ((20208 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre105;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((20208 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((20208 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((20208 + 8|0))>>2] = $81;
     HEAP32[((20208 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((20208 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((20208 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((20208 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((20208 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((20208 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((20208 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((20208 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((20208 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = (($R$1$i) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = (($201) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = (($v$0$i) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[((20208 + 16|0))>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = (($R$1$i) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = (($207) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i) + ($5))|0;
      $215 = $214 | 3;
      $216 = (($v$0$i) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $5 | 3;
      $221 = (($v$0$i) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i | 1;
      $$sum$i39 = $5 | 4;
      $223 = (($v$0$i) + ($$sum$i39)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $224 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i;
      $225 = HEAP32[((20208 + 8|0))>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[((20208 + 20|0))>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = ((20208 + ($229<<2)|0) + 40|0);
       $231 = HEAP32[20208>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[20208>>2] = $235;
        $$sum2$pre$i = (($229) + 2)|0;
        $$pre$i = ((20208 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = ((20208 + ($$sum3$i<<2)|0) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[((20208 + 16|0))>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = (($F1$0$i) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = (($227) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = (($227) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[((20208 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((20208 + 20|0))>>2] = $151;
     }
     $243 = (($v$0$i) + 8|0);
     $mem$0 = $243;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[((20208 + 4|0))>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = ((20208 + ($idx$0$i<<2)|0) + 304|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L126: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
      } else {
       $278 = ($idx$0$i|0)==(31);
       if ($278) {
        $282 = 0;
       } else {
        $279 = $idx$0$i >>> 1;
        $280 = (25 - ($279))|0;
        $282 = $280;
       }
       $281 = $246 << $282;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $281;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = (($t$0$i14) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$2$i = $286;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = (($t$0$i14) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = ((($t$0$i14) + ($291<<2)|0) + 16|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $298 = ($t$1$i|0)==(0|0);
     $299 = ($v$2$i|0)==(0|0);
     $or$cond$i = $298 & $299;
     if ($or$cond$i) {
      $300 = 2 << $idx$0$i;
      $301 = (0 - ($300))|0;
      $302 = $300 | $301;
      $303 = $247 & $302;
      $304 = ($303|0)==(0);
      if ($304) {
       $nb$0 = $246;
       break;
      }
      $305 = (0 - ($303))|0;
      $306 = $303 & $305;
      $307 = (($306) + -1)|0;
      $308 = $307 >>> 12;
      $309 = $308 & 16;
      $310 = $307 >>> $309;
      $311 = $310 >>> 5;
      $312 = $311 & 8;
      $313 = $312 | $309;
      $314 = $310 >>> $312;
      $315 = $314 >>> 2;
      $316 = $315 & 4;
      $317 = $313 | $316;
      $318 = $314 >>> $316;
      $319 = $318 >>> 1;
      $320 = $319 & 2;
      $321 = $317 | $320;
      $322 = $318 >>> $320;
      $323 = $322 >>> 1;
      $324 = $323 & 1;
      $325 = $321 | $324;
      $326 = $322 >>> $324;
      $327 = (($325) + ($326))|0;
      $328 = ((20208 + ($327<<2)|0) + 304|0);
      $329 = HEAP32[$328>>2]|0;
      $t$2$ph$i = $329;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $330 = ($t$2$ph$i|0)==(0|0);
     if ($330) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$2$i;
      while(1) {
       $331 = (($t$230$i) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = (($t$230$i) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        continue;
       }
       $339 = (($t$230$i) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[((20208 + 8|0))>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[((20208 + 16|0))>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = (($v$3$lcssa$i) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($v$3$lcssa$i) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = (($v$3$lcssa$i) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = (($v$3$lcssa$i) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = (($R$0$i18) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = (($R$0$i18) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $355 = (($v$3$lcssa$i) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = (($356) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = (($353) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = (($v$3$lcssa$i) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = ((20208 + ($379<<2)|0) + 304|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[((20208 + 4|0))>>2]|0;
           $386 = $385 & $384;
           HEAP32[((20208 + 4|0))>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[((20208 + 16|0))>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = (($351) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = (($351) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[((20208 + 16|0))>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = (($R$1$i20) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = (($v$3$lcssa$i) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = (($R$1$i20) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = (($398) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = (($v$3$lcssa$i) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[((20208 + 16|0))>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = (($R$1$i20) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = (($404) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2338 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2338)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = ((20208 + ($424<<2)|0) + 40|0);
          $426 = HEAP32[20208>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          do {
           if ($429) {
            $430 = $426 | $427;
            HEAP32[20208>>2] = $430;
            $$sum14$pre$i = (($424) + 2)|0;
            $$pre$i25 = ((20208 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $425;
           } else {
            $$sum17$i = (($424) + 2)|0;
            $431 = ((20208 + ($$sum17$i<<2)|0) + 40|0);
            $432 = HEAP32[$431>>2]|0;
            $433 = HEAP32[((20208 + 16|0))>>2]|0;
            $434 = ($432>>>0)<($433>>>0);
            if (!($434)) {
             $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = (($F5$0$i) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = ((20208 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[((20208 + 4|0))>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[((20208 + 4|0))>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ($I7$0$i|0)==(31);
         if ($476) {
          $484 = 0;
         } else {
          $477 = $I7$0$i >>> 1;
          $478 = (25 - ($477))|0;
          $484 = $478;
         }
         $479 = (($475) + 4|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $480 & -8;
         $482 = ($481|0)==($rsize$3$lcssa$i|0);
         L225: do {
          if ($482) {
           $T$0$lcssa$i = $475;
          } else {
           $483 = $rsize$3$lcssa$i << $484;
           $K12$027$i = $483;$T$026$i = $475;
           while(1) {
            $491 = $K12$027$i >>> 31;
            $492 = ((($T$026$i) + ($491<<2)|0) + 16|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             break;
            }
            $485 = $K12$027$i << 1;
            $486 = (($487) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L225;
            } else {
             $K12$027$i = $485;$T$026$i = $487;
            }
           }
           $494 = HEAP32[((20208 + 16|0))>>2]|0;
           $495 = ($492>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$492>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$026$i;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L204;
           }
          }
         } while(0);
         $499 = (($T$0$lcssa$i) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[((20208 + 16|0))>>2]|0;
         $502 = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = ($500>>>0)>=($501>>>0);
         $or$cond24$i = $502 & $503;
         if ($or$cond24$i) {
          $504 = (($500) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $508;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[((20208 + 8|0))>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[((20208 + 20|0))>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[((20208 + 20|0))>>2] = $514;
   HEAP32[((20208 + 8|0))>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = (($512) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[((20208 + 8|0))>>2] = 0;
   HEAP32[((20208 + 20|0))>>2] = 0;
   $520 = $509 | 3;
   $521 = (($512) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = (($512) + 8|0);
  $mem$0 = $525;
  STACKTOP = sp;return ($mem$0|0);
 }
 $526 = HEAP32[((20208 + 12|0))>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[((20208 + 12|0))>>2] = $528;
  $529 = HEAP32[((20208 + 24|0))>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[((20208 + 24|0))>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = (($529) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = (($529) + 8|0);
  $mem$0 = $535;
  STACKTOP = sp;return ($mem$0|0);
 }
 $536 = HEAP32[20680>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[((20680 + 8|0))>>2] = $538;
    HEAP32[((20680 + 4|0))>>2] = $538;
    HEAP32[((20680 + 12|0))>>2] = -1;
    HEAP32[((20680 + 16|0))>>2] = -1;
    HEAP32[((20680 + 20|0))>>2] = 0;
    HEAP32[((20208 + 444|0))>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[20680>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[((20680 + 8|0))>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $552 = HEAP32[((20208 + 440|0))>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[((20208 + 432|0))>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $558 = HEAP32[((20208 + 444|0))>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L266: do {
  if ($560) {
   $561 = HEAP32[((20208 + 24|0))>>2]|0;
   $562 = ($561|0)==(0|0);
   L268: do {
    if ($562) {
     label = 181;
    } else {
     $sp$0$i$i = ((20208 + 448|0));
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = (($sp$0$i$i) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        break;
       }
      }
      $569 = (($sp$0$i$i) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 181;
       break L268;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $572 = ($sp$0$i$i|0)==(0|0);
     if ($572) {
      label = 181;
     } else {
      $595 = HEAP32[((20208 + 12|0))>>2]|0;
      $596 = (($548) - ($595))|0;
      $597 = $596 & $549;
      $598 = ($597>>>0)<(2147483647);
      if ($598) {
       $599 = (_sbrk(($597|0))|0);
       $600 = HEAP32[$sp$0$i$i>>2]|0;
       $601 = HEAP32[$565>>2]|0;
       $602 = (($600) + ($601)|0);
       $603 = ($599|0)==($602|0);
       if ($603) {
        $br$0$i = $599;$ssize$1$i = $597;
        label = 190;
       } else {
        $br$030$i = $599;$ssize$129$i = $597;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 181) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if ($574) {
      $tsize$03141$i = 0;
     } else {
      $575 = $573;
      $576 = HEAP32[((20680 + 4|0))>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $550;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($550) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[((20208 + 432|0))>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $587 & $588;
      if ($or$cond$i29) {
       $589 = HEAP32[((20208 + 440|0))>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         $tsize$03141$i = 0;
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $br$0$i = $573;$ssize$1$i = $ssize$0$i;
        label = 190;
       } else {
        $br$030$i = $593;$ssize$129$i = $ssize$0$i;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   L288: do {
    if ((label|0) == 190) {
     $604 = ($br$0$i|0)==((-1)|0);
     if ($604) {
      $tsize$03141$i = $ssize$1$i;
     } else {
      $tbase$245$i = $br$0$i;$tsize$244$i = $ssize$1$i;
      label = 201;
      break L266;
     }
    }
    else if ((label|0) == 191) {
     $605 = (0 - ($ssize$129$i))|0;
     $606 = ($br$030$i|0)!=((-1)|0);
     $607 = ($ssize$129$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $607;
     $608 = ($545>>>0)>($ssize$129$i>>>0);
     $or$cond4$i = $or$cond5$i & $608;
     do {
      if ($or$cond4$i) {
       $609 = HEAP32[((20680 + 8|0))>>2]|0;
       $610 = (($547) - ($ssize$129$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         $tsize$03141$i = 0;
         break L288;
        } else {
         $617 = (($613) + ($ssize$129$i))|0;
         $ssize$2$i = $617;
         break;
        }
       } else {
        $ssize$2$i = $ssize$129$i;
       }
      } else {
       $ssize$2$i = $ssize$129$i;
      }
     } while(0);
     $618 = ($br$030$i|0)==((-1)|0);
     if ($618) {
      $tsize$03141$i = 0;
     } else {
      $tbase$245$i = $br$030$i;$tsize$244$i = $ssize$2$i;
      label = 201;
      break L266;
     }
    }
   } while(0);
   $619 = HEAP32[((20208 + 444|0))>>2]|0;
   $620 = $619 | 4;
   HEAP32[((20208 + 444|0))>>2] = $620;
   $tsize$1$i = $tsize$03141$i;
   label = 198;
  } else {
   $tsize$1$i = 0;
   label = 198;
  }
 } while(0);
 if ((label|0) == 198) {
  $621 = ($550>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($550|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond3$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond6$i = $or$cond3$i & $626;
   if ($or$cond6$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$245$i = $622;$tsize$244$i = $$tsize$1$i;
     label = 201;
    }
   }
  }
 }
 if ((label|0) == 201) {
  $632 = HEAP32[((20208 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$244$i))|0;
  HEAP32[((20208 + 432|0))>>2] = $633;
  $634 = HEAP32[((20208 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((20208 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((20208 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L308: do {
   if ($637) {
    $638 = HEAP32[((20208 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$245$i>>>0)<($638>>>0);
    $or$cond8$i = $639 | $640;
    if ($or$cond8$i) {
     HEAP32[((20208 + 16|0))>>2] = $tbase$245$i;
    }
    HEAP32[((20208 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((20208 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((20208 + 460|0))>>2] = 0;
    $641 = HEAP32[20680>>2]|0;
    HEAP32[((20208 + 36|0))>>2] = $641;
    HEAP32[((20208 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((20208 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((20208 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((20208 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$244$i) + -40)|0;
    $648 = (($tbase$245$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$245$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((20208 + 24|0))>>2] = $654;
    HEAP32[((20208 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i12$i = (($655) + 4)|0;
    $658 = (($tbase$245$i) + ($$sum$i12$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$244$i) + -36)|0;
    $659 = (($tbase$245$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((20680 + 16|0))>>2]|0;
    HEAP32[((20208 + 28|0))>>2] = $660;
   } else {
    $sp$073$i = ((20208 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$073$i>>2]|0;
     $662 = (($sp$073$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$245$i|0)==($664|0);
     if ($665) {
      label = 213;
      break;
     }
     $666 = (($sp$073$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$073$i = $667;
     }
    }
    if ((label|0) == 213) {
     $669 = (($sp$073$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$245$i>>>0);
      $or$cond47$i = $673 & $674;
      if ($or$cond47$i) {
       $675 = (($663) + ($tsize$244$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((20208 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$244$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((20208 + 24|0))>>2] = $684;
       HEAP32[((20208 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i16$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i16$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i17$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i17$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((20680 + 16|0))>>2]|0;
       HEAP32[((20208 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((20208 + 16|0))>>2]|0;
    $692 = ($tbase$245$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((20208 + 16|0))>>2] = $tbase$245$i;
     $756 = $tbase$245$i;
    } else {
     $756 = $691;
    }
    $693 = (($tbase$245$i) + ($tsize$244$i)|0);
    $sp$166$i = ((20208 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$166$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 223;
      break;
     }
     $696 = (($sp$166$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$166$i = $697;
     }
    }
    if ((label|0) == 223) {
     $699 = (($sp$166$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$166$i>>2] = $tbase$245$i;
      $703 = (($sp$166$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$244$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$245$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$245$i) + ($713)|0);
      $$sum102$i = (($tsize$244$i) + 8)|0;
      $714 = (($tbase$245$i) + ($$sum102$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum103$i = (($720) + ($tsize$244$i))|0;
      $721 = (($tbase$245$i) + ($$sum103$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i19$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$245$i) + ($$sum$i19$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i20$i = (($713) + 4)|0;
      $728 = (($tbase$245$i) + ($$sum1$i20$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = ($721|0)==($636|0);
      L345: do {
       if ($729) {
        $730 = HEAP32[((20208 + 12|0))>>2]|0;
        $731 = (($730) + ($726))|0;
        HEAP32[((20208 + 12|0))>>2] = $731;
        HEAP32[((20208 + 24|0))>>2] = $725;
        $732 = $731 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $733 = (($tbase$245$i) + ($$sum42$i$i)|0);
        HEAP32[$733>>2] = $732;
       } else {
        $734 = HEAP32[((20208 + 20|0))>>2]|0;
        $735 = ($721|0)==($734|0);
        if ($735) {
         $736 = HEAP32[((20208 + 8|0))>>2]|0;
         $737 = (($736) + ($726))|0;
         HEAP32[((20208 + 8|0))>>2] = $737;
         HEAP32[((20208 + 20|0))>>2] = $725;
         $738 = $737 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $739 = (($tbase$245$i) + ($$sum40$i$i)|0);
         HEAP32[$739>>2] = $738;
         $$sum41$i$i = (($737) + ($$sum$i19$i))|0;
         $740 = (($tbase$245$i) + ($$sum41$i$i)|0);
         HEAP32[$740>>2] = $737;
         break;
        }
        $$sum2$i21$i = (($tsize$244$i) + 4)|0;
        $$sum104$i = (($$sum2$i21$i) + ($720))|0;
        $741 = (($tbase$245$i) + ($$sum104$i)|0);
        $742 = HEAP32[$741>>2]|0;
        $743 = $742 & 3;
        $744 = ($743|0)==(1);
        if ($744) {
         $745 = $742 & -8;
         $746 = $742 >>> 3;
         $747 = ($742>>>0)<(256);
         L353: do {
          if ($747) {
           $$sum3738$i$i = $720 | 8;
           $$sum114$i = (($$sum3738$i$i) + ($tsize$244$i))|0;
           $748 = (($tbase$245$i) + ($$sum114$i)|0);
           $749 = HEAP32[$748>>2]|0;
           $$sum39$i$i = (($tsize$244$i) + 12)|0;
           $$sum115$i = (($$sum39$i$i) + ($720))|0;
           $750 = (($tbase$245$i) + ($$sum115$i)|0);
           $751 = HEAP32[$750>>2]|0;
           $752 = $746 << 1;
           $753 = ((20208 + ($752<<2)|0) + 40|0);
           $754 = ($749|0)==($753|0);
           do {
            if (!($754)) {
             $755 = ($749>>>0)<($756>>>0);
             if ($755) {
              _abort();
              // unreachable;
             }
             $757 = (($749) + 12|0);
             $758 = HEAP32[$757>>2]|0;
             $759 = ($758|0)==($721|0);
             if ($759) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $760 = ($751|0)==($749|0);
           if ($760) {
            $761 = 1 << $746;
            $762 = $761 ^ -1;
            $763 = HEAP32[20208>>2]|0;
            $764 = $763 & $762;
            HEAP32[20208>>2] = $764;
            break;
           }
           $765 = ($751|0)==($753|0);
           do {
            if ($765) {
             $$pre58$i$i = (($751) + 8|0);
             $$pre$phi59$i$iZ2D = $$pre58$i$i;
            } else {
             $766 = ($751>>>0)<($756>>>0);
             if ($766) {
              _abort();
              // unreachable;
             }
             $767 = (($751) + 8|0);
             $768 = HEAP32[$767>>2]|0;
             $769 = ($768|0)==($721|0);
             if ($769) {
              $$pre$phi59$i$iZ2D = $767;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $770 = (($749) + 12|0);
           HEAP32[$770>>2] = $751;
           HEAP32[$$pre$phi59$i$iZ2D>>2] = $749;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum105$i = (($$sum34$i$i) + ($tsize$244$i))|0;
           $771 = (($tbase$245$i) + ($$sum105$i)|0);
           $772 = HEAP32[$771>>2]|0;
           $$sum5$i$i = (($tsize$244$i) + 12)|0;
           $$sum106$i = (($$sum5$i$i) + ($720))|0;
           $773 = (($tbase$245$i) + ($$sum106$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $775 = ($774|0)==($721|0);
           do {
            if ($775) {
             $$sum67$i$i = $720 | 16;
             $$sum112$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $785 = (($tbase$245$i) + ($$sum112$i)|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==(0|0);
             if ($787) {
              $$sum113$i = (($$sum67$i$i) + ($tsize$244$i))|0;
              $788 = (($tbase$245$i) + ($$sum113$i)|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if ($790) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $789;$RP$0$i$i = $788;
              }
             } else {
              $R$0$i$i = $786;$RP$0$i$i = $785;
             }
             while(1) {
              $791 = (($R$0$i$i) + 20|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if (!($793)) {
               $R$0$i$i = $792;$RP$0$i$i = $791;
               continue;
              }
              $794 = (($R$0$i$i) + 16|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if ($796) {
               break;
              } else {
               $R$0$i$i = $795;$RP$0$i$i = $794;
              }
             }
             $797 = ($RP$0$i$i>>>0)<($756>>>0);
             if ($797) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum107$i = (($$sum3536$i$i) + ($tsize$244$i))|0;
             $776 = (($tbase$245$i) + ($$sum107$i)|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777>>>0)<($756>>>0);
             if ($778) {
              _abort();
              // unreachable;
             }
             $779 = (($777) + 12|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($721|0);
             if (!($781)) {
              _abort();
              // unreachable;
             }
             $782 = (($774) + 8|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if ($784) {
              HEAP32[$779>>2] = $774;
              HEAP32[$782>>2] = $777;
              $R$1$i$i = $774;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $798 = ($772|0)==(0|0);
           if ($798) {
            break;
           }
           $$sum30$i$i = (($tsize$244$i) + 28)|0;
           $$sum108$i = (($$sum30$i$i) + ($720))|0;
           $799 = (($tbase$245$i) + ($$sum108$i)|0);
           $800 = HEAP32[$799>>2]|0;
           $801 = ((20208 + ($800<<2)|0) + 304|0);
           $802 = HEAP32[$801>>2]|0;
           $803 = ($721|0)==($802|0);
           do {
            if ($803) {
             HEAP32[$801>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $804 = 1 << $800;
             $805 = $804 ^ -1;
             $806 = HEAP32[((20208 + 4|0))>>2]|0;
             $807 = $806 & $805;
             HEAP32[((20208 + 4|0))>>2] = $807;
             break L353;
            } else {
             $808 = HEAP32[((20208 + 16|0))>>2]|0;
             $809 = ($772>>>0)<($808>>>0);
             if ($809) {
              _abort();
              // unreachable;
             }
             $810 = (($772) + 16|0);
             $811 = HEAP32[$810>>2]|0;
             $812 = ($811|0)==($721|0);
             if ($812) {
              HEAP32[$810>>2] = $R$1$i$i;
             } else {
              $813 = (($772) + 20|0);
              HEAP32[$813>>2] = $R$1$i$i;
             }
             $814 = ($R$1$i$i|0)==(0|0);
             if ($814) {
              break L353;
             }
            }
           } while(0);
           $815 = HEAP32[((20208 + 16|0))>>2]|0;
           $816 = ($R$1$i$i>>>0)<($815>>>0);
           if ($816) {
            _abort();
            // unreachable;
           }
           $817 = (($R$1$i$i) + 24|0);
           HEAP32[$817>>2] = $772;
           $$sum3132$i$i = $720 | 16;
           $$sum109$i = (($$sum3132$i$i) + ($tsize$244$i))|0;
           $818 = (($tbase$245$i) + ($$sum109$i)|0);
           $819 = HEAP32[$818>>2]|0;
           $820 = ($819|0)==(0|0);
           do {
            if (!($820)) {
             $821 = ($819>>>0)<($815>>>0);
             if ($821) {
              _abort();
              // unreachable;
             } else {
              $822 = (($R$1$i$i) + 16|0);
              HEAP32[$822>>2] = $819;
              $823 = (($819) + 24|0);
              HEAP32[$823>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum110$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $824 = (($tbase$245$i) + ($$sum110$i)|0);
           $825 = HEAP32[$824>>2]|0;
           $826 = ($825|0)==(0|0);
           if ($826) {
            break;
           }
           $827 = HEAP32[((20208 + 16|0))>>2]|0;
           $828 = ($825>>>0)<($827>>>0);
           if ($828) {
            _abort();
            // unreachable;
           } else {
            $829 = (($R$1$i$i) + 20|0);
            HEAP32[$829>>2] = $825;
            $830 = (($825) + 24|0);
            HEAP32[$830>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $745 | $720;
         $$sum111$i = (($$sum9$i$i) + ($tsize$244$i))|0;
         $831 = (($tbase$245$i) + ($$sum111$i)|0);
         $832 = (($745) + ($726))|0;
         $oldfirst$0$i$i = $831;$qsize$0$i$i = $832;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $833 = (($oldfirst$0$i$i) + 4|0);
        $834 = HEAP32[$833>>2]|0;
        $835 = $834 & -2;
        HEAP32[$833>>2] = $835;
        $836 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $837 = (($tbase$245$i) + ($$sum10$i$i)|0);
        HEAP32[$837>>2] = $836;
        $$sum11$i22$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $838 = (($tbase$245$i) + ($$sum11$i22$i)|0);
        HEAP32[$838>>2] = $qsize$0$i$i;
        $839 = $qsize$0$i$i >>> 3;
        $840 = ($qsize$0$i$i>>>0)<(256);
        if ($840) {
         $841 = $839 << 1;
         $842 = ((20208 + ($841<<2)|0) + 40|0);
         $843 = HEAP32[20208>>2]|0;
         $844 = 1 << $839;
         $845 = $843 & $844;
         $846 = ($845|0)==(0);
         do {
          if ($846) {
           $847 = $843 | $844;
           HEAP32[20208>>2] = $847;
           $$sum26$pre$i$i = (($841) + 2)|0;
           $$pre$i23$i = ((20208 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i24$iZ2D = $$pre$i23$i;$F4$0$i$i = $842;
          } else {
           $$sum29$i$i = (($841) + 2)|0;
           $848 = ((20208 + ($$sum29$i$i<<2)|0) + 40|0);
           $849 = HEAP32[$848>>2]|0;
           $850 = HEAP32[((20208 + 16|0))>>2]|0;
           $851 = ($849>>>0)<($850>>>0);
           if (!($851)) {
            $$pre$phi$i24$iZ2D = $848;$F4$0$i$i = $849;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i24$iZ2D>>2] = $725;
         $852 = (($F4$0$i$i) + 12|0);
         HEAP32[$852>>2] = $725;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $853 = (($tbase$245$i) + ($$sum27$i$i)|0);
         HEAP32[$853>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $854 = (($tbase$245$i) + ($$sum28$i$i)|0);
         HEAP32[$854>>2] = $842;
         break;
        }
        $855 = $qsize$0$i$i >>> 8;
        $856 = ($855|0)==(0);
        do {
         if ($856) {
          $I7$0$i$i = 0;
         } else {
          $857 = ($qsize$0$i$i>>>0)>(16777215);
          if ($857) {
           $I7$0$i$i = 31;
           break;
          }
          $858 = (($855) + 1048320)|0;
          $859 = $858 >>> 16;
          $860 = $859 & 8;
          $861 = $855 << $860;
          $862 = (($861) + 520192)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 4;
          $865 = $864 | $860;
          $866 = $861 << $864;
          $867 = (($866) + 245760)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 2;
          $870 = $865 | $869;
          $871 = (14 - ($870))|0;
          $872 = $866 << $869;
          $873 = $872 >>> 15;
          $874 = (($871) + ($873))|0;
          $875 = $874 << 1;
          $876 = (($874) + 7)|0;
          $877 = $qsize$0$i$i >>> $876;
          $878 = $877 & 1;
          $879 = $878 | $875;
          $I7$0$i$i = $879;
         }
        } while(0);
        $880 = ((20208 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $881 = (($tbase$245$i) + ($$sum12$i$i)|0);
        HEAP32[$881>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $882 = (($tbase$245$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $883 = (($tbase$245$i) + ($$sum14$i$i)|0);
        HEAP32[$883>>2] = 0;
        HEAP32[$882>>2] = 0;
        $884 = HEAP32[((20208 + 4|0))>>2]|0;
        $885 = 1 << $I7$0$i$i;
        $886 = $884 & $885;
        $887 = ($886|0)==(0);
        if ($887) {
         $888 = $884 | $885;
         HEAP32[((20208 + 4|0))>>2] = $888;
         HEAP32[$880>>2] = $725;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $889 = (($tbase$245$i) + ($$sum15$i$i)|0);
         HEAP32[$889>>2] = $880;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $890 = (($tbase$245$i) + ($$sum16$i$i)|0);
         HEAP32[$890>>2] = $725;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $891 = (($tbase$245$i) + ($$sum17$i$i)|0);
         HEAP32[$891>>2] = $725;
         break;
        }
        $892 = HEAP32[$880>>2]|0;
        $893 = ($I7$0$i$i|0)==(31);
        if ($893) {
         $901 = 0;
        } else {
         $894 = $I7$0$i$i >>> 1;
         $895 = (25 - ($894))|0;
         $901 = $895;
        }
        $896 = (($892) + 4|0);
        $897 = HEAP32[$896>>2]|0;
        $898 = $897 & -8;
        $899 = ($898|0)==($qsize$0$i$i|0);
        L442: do {
         if ($899) {
          $T$0$lcssa$i26$i = $892;
         } else {
          $900 = $qsize$0$i$i << $901;
          $K8$053$i$i = $900;$T$052$i$i = $892;
          while(1) {
           $908 = $K8$053$i$i >>> 31;
           $909 = ((($T$052$i$i) + ($908<<2)|0) + 16|0);
           $904 = HEAP32[$909>>2]|0;
           $910 = ($904|0)==(0|0);
           if ($910) {
            break;
           }
           $902 = $K8$053$i$i << 1;
           $903 = (($904) + 4|0);
           $905 = HEAP32[$903>>2]|0;
           $906 = $905 & -8;
           $907 = ($906|0)==($qsize$0$i$i|0);
           if ($907) {
            $T$0$lcssa$i26$i = $904;
            break L442;
           } else {
            $K8$053$i$i = $902;$T$052$i$i = $904;
           }
          }
          $911 = HEAP32[((20208 + 16|0))>>2]|0;
          $912 = ($909>>>0)<($911>>>0);
          if ($912) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$909>>2] = $725;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $913 = (($tbase$245$i) + ($$sum23$i$i)|0);
           HEAP32[$913>>2] = $T$052$i$i;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $914 = (($tbase$245$i) + ($$sum24$i$i)|0);
           HEAP32[$914>>2] = $725;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $915 = (($tbase$245$i) + ($$sum25$i$i)|0);
           HEAP32[$915>>2] = $725;
           break L345;
          }
         }
        } while(0);
        $916 = (($T$0$lcssa$i26$i) + 8|0);
        $917 = HEAP32[$916>>2]|0;
        $918 = HEAP32[((20208 + 16|0))>>2]|0;
        $919 = ($T$0$lcssa$i26$i>>>0)>=($918>>>0);
        $920 = ($917>>>0)>=($918>>>0);
        $or$cond$i27$i = $919 & $920;
        if ($or$cond$i27$i) {
         $921 = (($917) + 12|0);
         HEAP32[$921>>2] = $725;
         HEAP32[$916>>2] = $725;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $922 = (($tbase$245$i) + ($$sum20$i$i)|0);
         HEAP32[$922>>2] = $917;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $923 = (($tbase$245$i) + ($$sum21$i$i)|0);
         HEAP32[$923>>2] = $T$0$lcssa$i26$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $924 = (($tbase$245$i) + ($$sum22$i$i)|0);
         HEAP32[$924>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $925 = (($tbase$245$i) + ($$sum1819$i$i)|0);
      $mem$0 = $925;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((20208 + 448|0));
    while(1) {
     $926 = HEAP32[$sp$0$i$i$i>>2]|0;
     $927 = ($926>>>0)>($636>>>0);
     if (!($927)) {
      $928 = (($sp$0$i$i$i) + 4|0);
      $929 = HEAP32[$928>>2]|0;
      $930 = (($926) + ($929)|0);
      $931 = ($930>>>0)>($636>>>0);
      if ($931) {
       break;
      }
     }
     $932 = (($sp$0$i$i$i) + 8|0);
     $933 = HEAP32[$932>>2]|0;
     $sp$0$i$i$i = $933;
    }
    $$sum$i13$i = (($929) + -47)|0;
    $$sum1$i14$i = (($929) + -39)|0;
    $934 = (($926) + ($$sum1$i14$i)|0);
    $935 = $934;
    $936 = $935 & 7;
    $937 = ($936|0)==(0);
    if ($937) {
     $940 = 0;
    } else {
     $938 = (0 - ($935))|0;
     $939 = $938 & 7;
     $940 = $939;
    }
    $$sum2$i15$i = (($$sum$i13$i) + ($940))|0;
    $941 = (($926) + ($$sum2$i15$i)|0);
    $942 = (($636) + 16|0);
    $943 = ($941>>>0)<($942>>>0);
    $944 = $943 ? $636 : $941;
    $945 = (($944) + 8|0);
    $946 = (($tsize$244$i) + -40)|0;
    $947 = (($tbase$245$i) + 8|0);
    $948 = $947;
    $949 = $948 & 7;
    $950 = ($949|0)==(0);
    if ($950) {
     $954 = 0;
    } else {
     $951 = (0 - ($948))|0;
     $952 = $951 & 7;
     $954 = $952;
    }
    $953 = (($tbase$245$i) + ($954)|0);
    $955 = (($946) - ($954))|0;
    HEAP32[((20208 + 24|0))>>2] = $953;
    HEAP32[((20208 + 12|0))>>2] = $955;
    $956 = $955 | 1;
    $$sum$i$i$i = (($954) + 4)|0;
    $957 = (($tbase$245$i) + ($$sum$i$i$i)|0);
    HEAP32[$957>>2] = $956;
    $$sum2$i$i$i = (($tsize$244$i) + -36)|0;
    $958 = (($tbase$245$i) + ($$sum2$i$i$i)|0);
    HEAP32[$958>>2] = 40;
    $959 = HEAP32[((20680 + 16|0))>>2]|0;
    HEAP32[((20208 + 28|0))>>2] = $959;
    $960 = (($944) + 4|0);
    HEAP32[$960>>2] = 27;
    ;HEAP32[$945+0>>2]=HEAP32[((20208 + 448|0))+0>>2]|0;HEAP32[$945+4>>2]=HEAP32[((20208 + 448|0))+4>>2]|0;HEAP32[$945+8>>2]=HEAP32[((20208 + 448|0))+8>>2]|0;HEAP32[$945+12>>2]=HEAP32[((20208 + 448|0))+12>>2]|0;
    HEAP32[((20208 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((20208 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((20208 + 460|0))>>2] = 0;
    HEAP32[((20208 + 456|0))>>2] = $945;
    $961 = (($944) + 28|0);
    HEAP32[$961>>2] = 7;
    $962 = (($944) + 32|0);
    $963 = ($962>>>0)<($930>>>0);
    if ($963) {
     $965 = $961;
     while(1) {
      $964 = (($965) + 4|0);
      HEAP32[$964>>2] = 7;
      $966 = (($965) + 8|0);
      $967 = ($966>>>0)<($930>>>0);
      if ($967) {
       $965 = $964;
      } else {
       break;
      }
     }
    }
    $968 = ($944|0)==($636|0);
    if (!($968)) {
     $969 = $944;
     $970 = $636;
     $971 = (($969) - ($970))|0;
     $972 = (($636) + ($971)|0);
     $$sum3$i$i = (($971) + 4)|0;
     $973 = (($636) + ($$sum3$i$i)|0);
     $974 = HEAP32[$973>>2]|0;
     $975 = $974 & -2;
     HEAP32[$973>>2] = $975;
     $976 = $971 | 1;
     $977 = (($636) + 4|0);
     HEAP32[$977>>2] = $976;
     HEAP32[$972>>2] = $971;
     $978 = $971 >>> 3;
     $979 = ($971>>>0)<(256);
     if ($979) {
      $980 = $978 << 1;
      $981 = ((20208 + ($980<<2)|0) + 40|0);
      $982 = HEAP32[20208>>2]|0;
      $983 = 1 << $978;
      $984 = $982 & $983;
      $985 = ($984|0)==(0);
      do {
       if ($985) {
        $986 = $982 | $983;
        HEAP32[20208>>2] = $986;
        $$sum10$pre$i$i = (($980) + 2)|0;
        $$pre$i$i = ((20208 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $981;
       } else {
        $$sum11$i$i = (($980) + 2)|0;
        $987 = ((20208 + ($$sum11$i$i<<2)|0) + 40|0);
        $988 = HEAP32[$987>>2]|0;
        $989 = HEAP32[((20208 + 16|0))>>2]|0;
        $990 = ($988>>>0)<($989>>>0);
        if (!($990)) {
         $$pre$phi$i$iZ2D = $987;$F$0$i$i = $988;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $991 = (($F$0$i$i) + 12|0);
      HEAP32[$991>>2] = $636;
      $992 = (($636) + 8|0);
      HEAP32[$992>>2] = $F$0$i$i;
      $993 = (($636) + 12|0);
      HEAP32[$993>>2] = $981;
      break;
     }
     $994 = $971 >>> 8;
     $995 = ($994|0)==(0);
     if ($995) {
      $I1$0$i$i = 0;
     } else {
      $996 = ($971>>>0)>(16777215);
      if ($996) {
       $I1$0$i$i = 31;
      } else {
       $997 = (($994) + 1048320)|0;
       $998 = $997 >>> 16;
       $999 = $998 & 8;
       $1000 = $994 << $999;
       $1001 = (($1000) + 520192)|0;
       $1002 = $1001 >>> 16;
       $1003 = $1002 & 4;
       $1004 = $1003 | $999;
       $1005 = $1000 << $1003;
       $1006 = (($1005) + 245760)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 2;
       $1009 = $1004 | $1008;
       $1010 = (14 - ($1009))|0;
       $1011 = $1005 << $1008;
       $1012 = $1011 >>> 15;
       $1013 = (($1010) + ($1012))|0;
       $1014 = $1013 << 1;
       $1015 = (($1013) + 7)|0;
       $1016 = $971 >>> $1015;
       $1017 = $1016 & 1;
       $1018 = $1017 | $1014;
       $I1$0$i$i = $1018;
      }
     }
     $1019 = ((20208 + ($I1$0$i$i<<2)|0) + 304|0);
     $1020 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1020>>2] = $I1$0$c$i$i;
     $1021 = (($636) + 20|0);
     HEAP32[$1021>>2] = 0;
     $1022 = (($636) + 16|0);
     HEAP32[$1022>>2] = 0;
     $1023 = HEAP32[((20208 + 4|0))>>2]|0;
     $1024 = 1 << $I1$0$i$i;
     $1025 = $1023 & $1024;
     $1026 = ($1025|0)==(0);
     if ($1026) {
      $1027 = $1023 | $1024;
      HEAP32[((20208 + 4|0))>>2] = $1027;
      HEAP32[$1019>>2] = $636;
      $1028 = (($636) + 24|0);
      HEAP32[$1028>>2] = $1019;
      $1029 = (($636) + 12|0);
      HEAP32[$1029>>2] = $636;
      $1030 = (($636) + 8|0);
      HEAP32[$1030>>2] = $636;
      break;
     }
     $1031 = HEAP32[$1019>>2]|0;
     $1032 = ($I1$0$i$i|0)==(31);
     if ($1032) {
      $1040 = 0;
     } else {
      $1033 = $I1$0$i$i >>> 1;
      $1034 = (25 - ($1033))|0;
      $1040 = $1034;
     }
     $1035 = (($1031) + 4|0);
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = $1036 & -8;
     $1038 = ($1037|0)==($971|0);
     L493: do {
      if ($1038) {
       $T$0$lcssa$i$i = $1031;
      } else {
       $1039 = $971 << $1040;
       $K2$015$i$i = $1039;$T$014$i$i = $1031;
       while(1) {
        $1047 = $K2$015$i$i >>> 31;
        $1048 = ((($T$014$i$i) + ($1047<<2)|0) + 16|0);
        $1043 = HEAP32[$1048>>2]|0;
        $1049 = ($1043|0)==(0|0);
        if ($1049) {
         break;
        }
        $1041 = $K2$015$i$i << 1;
        $1042 = (($1043) + 4|0);
        $1044 = HEAP32[$1042>>2]|0;
        $1045 = $1044 & -8;
        $1046 = ($1045|0)==($971|0);
        if ($1046) {
         $T$0$lcssa$i$i = $1043;
         break L493;
        } else {
         $K2$015$i$i = $1041;$T$014$i$i = $1043;
        }
       }
       $1050 = HEAP32[((20208 + 16|0))>>2]|0;
       $1051 = ($1048>>>0)<($1050>>>0);
       if ($1051) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1048>>2] = $636;
        $1052 = (($636) + 24|0);
        HEAP32[$1052>>2] = $T$014$i$i;
        $1053 = (($636) + 12|0);
        HEAP32[$1053>>2] = $636;
        $1054 = (($636) + 8|0);
        HEAP32[$1054>>2] = $636;
        break L308;
       }
      }
     } while(0);
     $1055 = (($T$0$lcssa$i$i) + 8|0);
     $1056 = HEAP32[$1055>>2]|0;
     $1057 = HEAP32[((20208 + 16|0))>>2]|0;
     $1058 = ($T$0$lcssa$i$i>>>0)>=($1057>>>0);
     $1059 = ($1056>>>0)>=($1057>>>0);
     $or$cond$i$i = $1058 & $1059;
     if ($or$cond$i$i) {
      $1060 = (($1056) + 12|0);
      HEAP32[$1060>>2] = $636;
      HEAP32[$1055>>2] = $636;
      $1061 = (($636) + 8|0);
      HEAP32[$1061>>2] = $1056;
      $1062 = (($636) + 12|0);
      HEAP32[$1062>>2] = $T$0$lcssa$i$i;
      $1063 = (($636) + 24|0);
      HEAP32[$1063>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1064 = HEAP32[((20208 + 12|0))>>2]|0;
  $1065 = ($1064>>>0)>($nb$0>>>0);
  if ($1065) {
   $1066 = (($1064) - ($nb$0))|0;
   HEAP32[((20208 + 12|0))>>2] = $1066;
   $1067 = HEAP32[((20208 + 24|0))>>2]|0;
   $1068 = (($1067) + ($nb$0)|0);
   HEAP32[((20208 + 24|0))>>2] = $1068;
   $1069 = $1066 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1070 = (($1067) + ($$sum$i32)|0);
   HEAP32[$1070>>2] = $1069;
   $1071 = $nb$0 | 3;
   $1072 = (($1067) + 4|0);
   HEAP32[$1072>>2] = $1071;
   $1073 = (($1067) + 8|0);
   $mem$0 = $1073;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1074 = (___errno_location()|0);
 HEAP32[$1074>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi66Z2D = 0, $$pre$phi68Z2D = 0, $$pre$phiZ2D = 0, $$pre65 = 0, $$pre67 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$058 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0;
 var $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$057 = 0, $cond = 0, $cond54 = 0, $or$cond = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((20208 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((20208 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((20208 + 8|0))>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum26)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((20208 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[20208>>2]|0;
     $36 = $35 & $34;
     HEAP32[20208>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre67 = (($24) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi68Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi68Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((20208 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((20208 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((20208 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((20208 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((20208 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = (($R$1) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = (($91) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum34)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[((20208 + 16|0))>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = (($R$1) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = (($97) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum25)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[((20208 + 24|0))>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[((20208 + 12|0))>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[((20208 + 12|0))>>2] = $120;
   HEAP32[((20208 + 24|0))>>2] = $p$0;
   $121 = $120 | 1;
   $122 = (($p$0) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[((20208 + 20|0))>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    STACKTOP = sp;return;
   }
   HEAP32[((20208 + 20|0))>>2] = 0;
   HEAP32[((20208 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $125 = HEAP32[((20208 + 20|0))>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[((20208 + 8|0))>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[((20208 + 8|0))>>2] = $128;
   HEAP32[((20208 + 20|0))>>2] = $p$0;
   $129 = $128 | 1;
   $130 = (($p$0) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   STACKTOP = sp;return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum2324 = $8 | 4;
    $138 = (($mem) + ($$sum2324)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = ((20208 + ($140<<2)|0) + 40|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[((20208 + 16|0))>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = (($137) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[20208>>2]|0;
     $152 = $151 & $150;
     HEAP32[20208>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre65 = (($139) + 8|0);
     $$pre$phi66Z2D = $$pre65;
    } else {
     $154 = HEAP32[((20208 + 16|0))>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = (($139) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi66Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = (($137) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi66Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = (($R7$0) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = (($R7$0) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[((20208 + 16|0))>>2]|0;
      $188 = ($RP9$0>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[((20208 + 16|0))>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = (($166) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = (($163) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum18 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum18)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((20208 + ($191<<2)|0) + 304|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[((20208 + 4|0))>>2]|0;
       $198 = $197 & $196;
       HEAP32[((20208 + 4|0))>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[((20208 + 16|0))>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = (($161) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = (($161) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[((20208 + 16|0))>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = (($R7$1) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum19 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum19)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = (($R7$1) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = (($210) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum20)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[((20208 + 16|0))>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = (($R7$1) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = (($216) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = (($p$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[((20208 + 20|0))>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[((20208 + 8|0))>>2] = $133;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = (($p$0) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = ((20208 + ($233<<2)|0) + 40|0);
  $235 = HEAP32[20208>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[20208>>2] = $239;
   $$sum16$pre = (($233) + 2)|0;
   $$pre = ((20208 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $234;
  } else {
   $$sum17 = (($233) + 2)|0;
   $240 = ((20208 + ($$sum17<<2)|0) + 40|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[((20208 + 16|0))>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = (($F16$0) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = (($p$0) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = (($p$0) + 12|0);
  HEAP32[$246>>2] = $234;
  STACKTOP = sp;return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = ((20208 + ($I18$0<<2)|0) + 304|0);
 $273 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$273>>2] = $I18$0$c;
 $274 = (($p$0) + 20|0);
 HEAP32[$274>>2] = 0;
 $275 = (($p$0) + 16|0);
 HEAP32[$275>>2] = 0;
 $276 = HEAP32[((20208 + 4|0))>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[((20208 + 4|0))>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = (($p$0) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = (($p$0) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = (($p$0) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ($I18$0|0)==(31);
   if ($285) {
    $293 = 0;
   } else {
    $286 = $I18$0 >>> 1;
    $287 = (25 - ($286))|0;
    $293 = $287;
   }
   $288 = (($284) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 & -8;
   $291 = ($290|0)==($psize$1|0);
   L205: do {
    if ($291) {
     $T$0$lcssa = $284;
    } else {
     $292 = $psize$1 << $293;
     $K19$058 = $292;$T$057 = $284;
     while(1) {
      $300 = $K19$058 >>> 31;
      $301 = ((($T$057) + ($300<<2)|0) + 16|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       break;
      }
      $294 = $K19$058 << 1;
      $295 = (($296) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L205;
      } else {
       $K19$058 = $294;$T$057 = $296;
      }
     }
     $303 = HEAP32[((20208 + 16|0))>>2]|0;
     $304 = ($301>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$301>>2] = $p$0;
      $305 = (($p$0) + 24|0);
      HEAP32[$305>>2] = $T$057;
      $306 = (($p$0) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = (($p$0) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = (($T$0$lcssa) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[((20208 + 16|0))>>2]|0;
   $311 = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = ($309>>>0)>=($310>>>0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $313 = (($309) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = (($p$0) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = (($p$0) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = (($p$0) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[((20208 + 32|0))>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[((20208 + 32|0))>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = ((20208 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = (($sp$0$i) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[((20208 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   if ($4) {
    $8 = 16;
   } else {
    $5 = (($bytes) + 11)|0;
    $6 = $5 & -8;
    $8 = $6;
   }
   $7 = (($oldmem) + -8|0);
   $9 = (_try_realloc_chunk($7,$8)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = (($9) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = (($oldmem) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 STACKTOP = sp;return ($mem$0|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  $4 = 1;
 } else {
  $0 = $c | 32;
  $1 = (($0) + -97)|0;
  $2 = ($1>>>0)<(6);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$125 = 0, $$126 = 0, $$base24 = 0, $$lcssa = 0, $$sum = 0, $$sum17 = 0, $$sum1737 = 0, $$sum18 = 0, $$sum19 = 0, $$sum20 = 0, $$sum21 = 0, $$sum2155 = 0, $$sum22 = 0, $$sum23 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$127 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$362 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$747 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0;
 var $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond31 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $x$073 = 0, $x$138 = 0, $x$256 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $279 = 0;$280 = 0;
  tempRet0 = $279;
  STACKTOP = sp;return ($280|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   break;
  }
 }
 $16 = ($13|0)==(45);
 do {
  if ((($13|0) == 43) | (($13|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = (($18) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $13;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond5 = $27 & $28;
 do {
  if ($or$cond5) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = (($29) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    if ($25) {
     $$126 = 8;$c$127 = $37;
     label = 46;
     break;
    } else {
     $$1 = $base;$c$1 = $37;
     label = 32;
     break;
    }
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = (($39) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum23 = (($46) + 1)|0;
   $47 = (20704 + ($$sum23)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = (($52) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     STACKTOP = sp;return ($280|0);
    }
    if ($51) {
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     STACKTOP = sp;return ($280|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) + -1|0);
    HEAP32[$3>>2] = $56;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    STACKTOP = sp;return ($280|0);
   } else {
    $$126 = 16;$c$127 = $46;
    label = 46;
   }
  } else {
   $$base24 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (20704 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base24>>>0);
   if ($60) {
    $$1 = $$base24;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = (($63) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    STACKTOP = sp;return ($280|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $71 = $67;$x$073 = 0;
    while(1) {
     $69 = ($x$073*10)|0;
     $70 = (($69) + ($71))|0;
     $72 = HEAP32[$3>>2]|0;
     $73 = HEAP32[$4>>2]|0;
     $74 = ($72>>>0)<($73>>>0);
     if ($74) {
      $75 = (($72) + 1|0);
      HEAP32[$3>>2] = $75;
      $76 = HEAP8[$72>>0]|0;
      $77 = $76&255;
      $c$2$be = $77;
     } else {
      $78 = (___shgetc($f)|0);
      $c$2$be = $78;
     }
     $79 = (($c$2$be) + -48)|0;
     $80 = ($79>>>0)<(10);
     $81 = ($70>>>0)<(429496729);
     $or$cond7 = $80 & $81;
     if ($or$cond7) {
      $71 = $79;$x$073 = $70;
     } else {
      break;
     }
    }
    $281 = $70;$282 = 0;$c$2$lcssa = $c$2$be;
   } else {
    $281 = 0;$282 = 0;$c$2$lcssa = $c$1;
   }
   $82 = (($c$2$lcssa) + -48)|0;
   $83 = ($82>>>0)<(10);
   if ($83) {
    $84 = $281;$85 = $282;$89 = $82;$c$362 = $c$2$lcssa;
    while(1) {
     $86 = (___muldi3(($84|0),($85|0),10,0)|0);
     $87 = tempRet0;
     $88 = ($89|0)<(0);
     $90 = $88 << 31 >> 31;
     $91 = $89 ^ -1;
     $92 = $90 ^ -1;
     $93 = ($87>>>0)>($92>>>0);
     $94 = ($86>>>0)>($91>>>0);
     $95 = ($87|0)==($92|0);
     $96 = $95 & $94;
     $97 = $93 | $96;
     if ($97) {
      $$lcssa = $89;$283 = $84;$284 = $85;$c$3$lcssa = $c$362;
      break;
     }
     $98 = (_i64Add(($86|0),($87|0),($89|0),($90|0))|0);
     $99 = tempRet0;
     $100 = HEAP32[$3>>2]|0;
     $101 = HEAP32[$4>>2]|0;
     $102 = ($100>>>0)<($101>>>0);
     if ($102) {
      $103 = (($100) + 1|0);
      HEAP32[$3>>2] = $103;
      $104 = HEAP8[$100>>0]|0;
      $105 = $104&255;
      $c$3$be = $105;
     } else {
      $106 = (___shgetc($f)|0);
      $c$3$be = $106;
     }
     $107 = (($c$3$be) + -48)|0;
     $108 = ($107>>>0)<(10);
     $109 = ($99>>>0)<(429496729);
     $110 = ($98>>>0)<(2576980378);
     $111 = ($99|0)==(429496729);
     $112 = $111 & $110;
     $113 = $109 | $112;
     $or$cond9 = $108 & $113;
     if ($or$cond9) {
      $84 = $98;$85 = $99;$89 = $107;$c$362 = $c$3$be;
     } else {
      $$lcssa = $107;$283 = $98;$284 = $99;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $114 = ($$lcssa>>>0)>(9);
    if ($114) {
     $253 = $284;$255 = $283;
    } else {
     $$125 = 10;$285 = $283;$286 = $284;$c$8 = $c$3$lcssa;
     label = 72;
    }
   } else {
    $253 = $282;$255 = $281;
   }
  } else {
   $$126 = $$1;$c$127 = $c$1;
   label = 46;
  }
 }
 L69: do {
  if ((label|0) == 46) {
   $115 = (($$126) + -1)|0;
   $116 = $115 & $$126;
   $117 = ($116|0)==(0);
   if ($117) {
    $122 = ($$126*23)|0;
    $123 = $122 >>> 5;
    $124 = $123 & 7;
    $125 = (20968 + ($124)|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126 << 24 >> 24;
    $$sum1737 = (($c$127) + 1)|0;
    $128 = (20704 + ($$sum1737)|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = ($130>>>0)<($$126>>>0);
    if ($131) {
     $134 = $130;$x$138 = 0;
     while(1) {
      $132 = $x$138 << $127;
      $133 = $134 | $132;
      $135 = HEAP32[$3>>2]|0;
      $136 = HEAP32[$4>>2]|0;
      $137 = ($135>>>0)<($136>>>0);
      if ($137) {
       $138 = (($135) + 1|0);
       HEAP32[$3>>2] = $138;
       $139 = HEAP8[$135>>0]|0;
       $140 = $139&255;
       $c$4$be = $140;
      } else {
       $141 = (___shgetc($f)|0);
       $c$4$be = $141;
      }
      $$sum17 = (($c$4$be) + 1)|0;
      $142 = (20704 + ($$sum17)|0);
      $143 = HEAP8[$142>>0]|0;
      $144 = $143&255;
      $145 = ($144>>>0)<($$126>>>0);
      $146 = ($133>>>0)<(134217728);
      $or$cond11 = $145 & $146;
      if ($or$cond11) {
       $134 = $144;$x$138 = $133;
      } else {
       break;
      }
     }
     $150 = $143;$153 = 0;$155 = $133;$c$4$lcssa = $c$4$be;
    } else {
     $150 = $129;$153 = 0;$155 = 0;$c$4$lcssa = $c$127;
    }
    $147 = (_bitshift64Lshr(-1,-1,($127|0))|0);
    $148 = tempRet0;
    $149 = $150&255;
    $151 = ($149>>>0)>=($$126>>>0);
    $152 = ($153>>>0)>($148>>>0);
    $154 = ($155>>>0)>($147>>>0);
    $156 = ($153|0)==($148|0);
    $157 = $156 & $154;
    $158 = $152 | $157;
    $or$cond31 = $151 | $158;
    if ($or$cond31) {
     $$125 = $$126;$285 = $155;$286 = $153;$c$8 = $c$4$lcssa;
     label = 72;
     break;
    } else {
     $159 = $155;$160 = $153;$164 = $150;
    }
    while(1) {
     $161 = (_bitshift64Shl(($159|0),($160|0),($127|0))|0);
     $162 = tempRet0;
     $163 = $164&255;
     $165 = $163 | $161;
     $166 = HEAP32[$3>>2]|0;
     $167 = HEAP32[$4>>2]|0;
     $168 = ($166>>>0)<($167>>>0);
     if ($168) {
      $169 = (($166) + 1|0);
      HEAP32[$3>>2] = $169;
      $170 = HEAP8[$166>>0]|0;
      $171 = $170&255;
      $c$5$be = $171;
     } else {
      $172 = (___shgetc($f)|0);
      $c$5$be = $172;
     }
     $$sum18 = (($c$5$be) + 1)|0;
     $173 = (20704 + ($$sum18)|0);
     $174 = HEAP8[$173>>0]|0;
     $175 = $174&255;
     $176 = ($175>>>0)>=($$126>>>0);
     $177 = ($162>>>0)>($148>>>0);
     $178 = ($165>>>0)>($147>>>0);
     $179 = ($162|0)==($148|0);
     $180 = $179 & $178;
     $181 = $177 | $180;
     $or$cond = $176 | $181;
     if ($or$cond) {
      $$125 = $$126;$285 = $165;$286 = $162;$c$8 = $c$5$be;
      label = 72;
      break L69;
     } else {
      $159 = $165;$160 = $162;$164 = $174;
     }
    }
   }
   $$sum2155 = (($c$127) + 1)|0;
   $118 = (20704 + ($$sum2155)|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = ($120>>>0)<($$126>>>0);
   if ($121) {
    $184 = $120;$x$256 = 0;
    while(1) {
     $182 = Math_imul($x$256, $$126)|0;
     $183 = (($184) + ($182))|0;
     $185 = HEAP32[$3>>2]|0;
     $186 = HEAP32[$4>>2]|0;
     $187 = ($185>>>0)<($186>>>0);
     if ($187) {
      $188 = (($185) + 1|0);
      HEAP32[$3>>2] = $188;
      $189 = HEAP8[$185>>0]|0;
      $190 = $189&255;
      $c$6$be = $190;
     } else {
      $191 = (___shgetc($f)|0);
      $c$6$be = $191;
     }
     $$sum21 = (($c$6$be) + 1)|0;
     $192 = (20704 + ($$sum21)|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $195 = ($194>>>0)<($$126>>>0);
     $196 = ($183>>>0)<(119304647);
     $or$cond13 = $195 & $196;
     if ($or$cond13) {
      $184 = $194;$x$256 = $183;
     } else {
      break;
     }
    }
    $198 = $193;$287 = $183;$288 = 0;$c$6$lcssa = $c$6$be;
   } else {
    $198 = $119;$287 = 0;$288 = 0;$c$6$lcssa = $c$127;
   }
   $197 = $198&255;
   $199 = ($197>>>0)<($$126>>>0);
   if ($199) {
    $200 = (___udivdi3(-1,-1,($$126|0),0)|0);
    $201 = tempRet0;
    $203 = $288;$205 = $287;$212 = $198;$c$747 = $c$6$lcssa;
    while(1) {
     $202 = ($203>>>0)>($201>>>0);
     $204 = ($205>>>0)>($200>>>0);
     $206 = ($203|0)==($201|0);
     $207 = $206 & $204;
     $208 = $202 | $207;
     if ($208) {
      $$125 = $$126;$285 = $205;$286 = $203;$c$8 = $c$747;
      label = 72;
      break L69;
     }
     $209 = (___muldi3(($205|0),($203|0),($$126|0),0)|0);
     $210 = tempRet0;
     $211 = $212&255;
     $213 = $211 ^ -1;
     $214 = ($210>>>0)>(4294967295);
     $215 = ($209>>>0)>($213>>>0);
     $216 = ($210|0)==(-1);
     $217 = $216 & $215;
     $218 = $214 | $217;
     if ($218) {
      $$125 = $$126;$285 = $205;$286 = $203;$c$8 = $c$747;
      label = 72;
      break L69;
     }
     $219 = (_i64Add(($211|0),0,($209|0),($210|0))|0);
     $220 = tempRet0;
     $221 = HEAP32[$3>>2]|0;
     $222 = HEAP32[$4>>2]|0;
     $223 = ($221>>>0)<($222>>>0);
     if ($223) {
      $224 = (($221) + 1|0);
      HEAP32[$3>>2] = $224;
      $225 = HEAP8[$221>>0]|0;
      $226 = $225&255;
      $c$7$be = $226;
     } else {
      $227 = (___shgetc($f)|0);
      $c$7$be = $227;
     }
     $$sum22 = (($c$7$be) + 1)|0;
     $228 = (20704 + ($$sum22)|0);
     $229 = HEAP8[$228>>0]|0;
     $230 = $229&255;
     $231 = ($230>>>0)<($$126>>>0);
     if ($231) {
      $203 = $220;$205 = $219;$212 = $229;$c$747 = $c$7$be;
     } else {
      $$125 = $$126;$285 = $219;$286 = $220;$c$8 = $c$7$be;
      label = 72;
      break;
     }
    }
   } else {
    $$125 = $$126;$285 = $287;$286 = $288;$c$8 = $c$6$lcssa;
    label = 72;
   }
  }
 } while(0);
 if ((label|0) == 72) {
  $$sum19 = (($c$8) + 1)|0;
  $232 = (20704 + ($$sum19)|0);
  $233 = HEAP8[$232>>0]|0;
  $234 = $233&255;
  $235 = ($234>>>0)<($$125>>>0);
  if ($235) {
   while(1) {
    $236 = HEAP32[$3>>2]|0;
    $237 = HEAP32[$4>>2]|0;
    $238 = ($236>>>0)<($237>>>0);
    if ($238) {
     $239 = (($236) + 1|0);
     HEAP32[$3>>2] = $239;
     $240 = HEAP8[$236>>0]|0;
     $241 = $240&255;
     $c$9$be = $241;
    } else {
     $242 = (___shgetc($f)|0);
     $c$9$be = $242;
    }
    $$sum20 = (($c$9$be) + 1)|0;
    $243 = (20704 + ($$sum20)|0);
    $244 = HEAP8[$243>>0]|0;
    $245 = $244&255;
    $246 = ($245>>>0)<($$125>>>0);
    if (!($246)) {
     break;
    }
   }
   $247 = (___errno_location()|0);
   HEAP32[$247>>2] = 34;
   $253 = $1;$255 = $0;
  } else {
   $253 = $286;$255 = $285;
  }
 }
 $248 = HEAP32[$4>>2]|0;
 $249 = ($248|0)==(0|0);
 if (!($249)) {
  $250 = HEAP32[$3>>2]|0;
  $251 = (($250) + -1|0);
  HEAP32[$3>>2] = $251;
 }
 $252 = ($253>>>0)<($1>>>0);
 $254 = ($255>>>0)<($0>>>0);
 $256 = ($253|0)==($1|0);
 $257 = $256 & $254;
 $258 = $252 | $257;
 if (!($258)) {
  $259 = $0 & 1;
  $260 = ($259|0)!=(0);
  $261 = (0)!=(0);
  $262 = $260 | $261;
  $263 = ($neg$0|0)!=(0);
  $or$cond15 = $262 | $263;
  if (!($or$cond15)) {
   $264 = (___errno_location()|0);
   HEAP32[$264>>2] = 34;
   $265 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $266 = tempRet0;
   $279 = $266;$280 = $265;
   tempRet0 = $279;
   STACKTOP = sp;return ($280|0);
  }
  $267 = ($253>>>0)>($1>>>0);
  $268 = ($255>>>0)>($0>>>0);
  $269 = ($253|0)==($1|0);
  $270 = $269 & $268;
  $271 = $267 | $270;
  if ($271) {
   $272 = (___errno_location()|0);
   HEAP32[$272>>2] = 34;
   $279 = $1;$280 = $0;
   tempRet0 = $279;
   STACKTOP = sp;return ($280|0);
  }
 }
 $273 = ($neg$0|0)<(0);
 $274 = $273 << 31 >> 31;
 $275 = $255 ^ $neg$0;
 $276 = $253 ^ $274;
 $277 = (_i64Subtract(($275|0),($276|0),($neg$0|0),($274|0))|0);
 $278 = tempRet0;
 $279 = $278;$280 = $277;
 tempRet0 = $279;
 STACKTOP = sp;return ($280|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$011$i = 0, $$012$i = 0, $$01231$i = 0, $$01232$i = 0, $$06$i = 0, $$0611$i = 0, $$0612$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$13$i = 0, $$2$i = 0, $$20$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3120$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa60$i = 0;
 var $$lnz$0$i = 0, $$neg37$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i18 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us70$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0.0, $448 = 0.0, $449 = 0.0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0.0, $474 = 0, $475 = 0.0, $476 = 0.0, $477 = 0, $478 = 0.0, $479 = 0, $48 = 0.0, $480 = 0.0, $481 = 0.0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0;
 var $486 = 0.0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0, $496 = 0, $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0.0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0.0, $652 = 0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0.0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0.0, $668 = 0.0, $669 = 0.0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0.0, $673 = 0, $674 = 0, $675 = 0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0;
 var $684 = 0.0, $685 = 0.0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0.0, $692 = 0, $693 = 0, $694 = 0, $695 = 0.0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0.0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0.0, $708 = 0, $709 = 0, $71 = 0, $710 = 0.0, $711 = 0.0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa182$i = 0, $a$078$i = 0, $a$1$i = 0, $a$2$ph57$i = 0, $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$444$i = 0, $a$5$i = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge = 0;
 var $brmerge108 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$171 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$369 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$080$i = 0, $carry1$0$us$i = 0, $carry1$0$us66$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us71$i = 0, $carry3$047$i = 0;
 var $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$029$i = 0, $denormal$030$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us61$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0;
 var $gotdig$0$i = 0, $gotdig$0$i11 = 0, $gotdig$2$i = 0, $gotdig$2$i12 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3116$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i13 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1117$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$042$i = 0, $i$070 = 0;
 var $i$1 = 0, $i$1$i = 0, $i$268 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$0108$i = 0, $j$0109$i = 0, $j$0110$i = 0, $j$0119$i = 0, $j$2$i = 0, $j$388$i = 0, $k$0$lcssa$i = 0, $k$0104$i = 0, $k$0105$i = 0, $k$0106$i = 0, $k$0118$i = 0, $k$2$i = 0, $k$3$i = 0, $k$479$i = 0;
 var $k$5$in$us$i = 0, $k$5$in$us65$i = 0, $k$5$us$i = 0, $k$5$us67$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us73$i = 0, $k$645$i = 0, $lnz$0$lcssa$i = 0, $lnz$0100$i = 0, $lnz$0115$i = 0, $lnz$098$i = 0, $lnz$099$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i15 = 0, $or$cond10$i = 0, $or$cond112$i = 0;
 var $or$cond15$i = 0, $or$cond17$i = 0, $or$cond18$i = 0, $or$cond187$i = 0, $or$cond19$us$i = 0, $or$cond19$us72$i = 0, $or$cond21$i = 0, $or$cond22$i = 0, $or$cond3$i = 0, $or$cond3$i16 = 0, $or$cond5 = 0, $or$cond5$i = 0, $or$cond5$i17 = 0, $or$cond7 = 0, $or$cond8$i = 0, $or$cond8$i20 = 0, $or$cond9$not = 0, $rp$0$lcssa183$i = 0, $rp$077$i = 0, $rp$1$i19 = 0;
 var $rp$2$ph55$i = 0, $rp$3$i$ph = 0, $rp$3$ph50$i = 0, $rp$443$i = 0, $rp$5$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$318$i = 0, $x$4$lcssa$i = 0, $x$413$i = 0, $x$5$i = 0, $x$6$i = 0;
 var $x$i = 0, $y$0$i = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$314$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph56$i = 0, $z$1$us$i = 0, $z$1$us62$i = 0, $z$2$us$i = 0, $z$2$us64$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us74$i = 0;
 var $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   break;
  }
 }
 $12 = ($9|0)==(45);
 do {
  if ((($9|0) == 43) | (($9|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $9;$sign$0 = 1;
  }
 } while(0);
 $c$171 = $c$0;$i$070 = 0;
 while(1) {
  $23 = $c$171 | 32;
  $24 = (20984 + ($i$070)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$171;$i$0$lcssa = $i$070;
   break;
  }
  $28 = ($i$070>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$171;
   }
  } while(0);
  $36 = (($i$070) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$171 = $c$2;$i$070 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)>(3);
   $39 = ($pok|0)!=(0);
   $or$cond5 = $38 & $39;
   if ($or$cond5) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $51 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($51) {
     $c$369 = $c$1$lcssa;$i$268 = 0;
     while(1) {
      $52 = $c$369 | 32;
      $53 = (21000 + ($i$268)|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = $54 << 24 >> 24;
      $56 = ($52|0)==($55|0);
      if (!($56)) {
       $c$5 = $c$369;$i$3 = $i$268;
       break L34;
      }
      $57 = ($i$268>>>0)<(2);
      do {
       if ($57) {
        $58 = HEAP32[$0>>2]|0;
        $59 = HEAP32[$1>>2]|0;
        $60 = ($58>>>0)<($59>>>0);
        if ($60) {
         $61 = (($58) + 1|0);
         HEAP32[$0>>2] = $61;
         $62 = HEAP8[$58>>0]|0;
         $63 = $62&255;
         $c$4 = $63;
         break;
        } else {
         $64 = (___shgetc($f)|0);
         $c$4 = $64;
         break;
        }
       } else {
        $c$4 = $c$369;
       }
      } while(0);
      $65 = (($i$268) + 1)|0;
      $66 = ($65>>>0)<(3);
      if ($66) {
       $c$369 = $c$4;$i$268 = $65;
      } else {
       $c$5 = $c$4;$i$3 = $65;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 0)) {
    $112 = ($c$5|0)==(48);
    do {
     if ($112) {
      $113 = HEAP32[$0>>2]|0;
      $114 = HEAP32[$1>>2]|0;
      $115 = ($113>>>0)<($114>>>0);
      if ($115) {
       $116 = (($113) + 1|0);
       HEAP32[$0>>2] = $116;
       $117 = HEAP8[$113>>0]|0;
       $118 = $117&255;
       $121 = $118;
      } else {
       $119 = (___shgetc($f)|0);
       $121 = $119;
      }
      $120 = $121 | 32;
      $122 = ($120|0)==(120);
      if (!($122)) {
       $322 = HEAP32[$1>>2]|0;
       $323 = ($322|0)==(0|0);
       if ($323) {
        $c$6 = 48;
        break;
       }
       $324 = HEAP32[$0>>2]|0;
       $325 = (($324) + -1|0);
       HEAP32[$0>>2] = $325;
       $c$6 = 48;
       break;
      }
      $123 = HEAP32[$0>>2]|0;
      $124 = HEAP32[$1>>2]|0;
      $125 = ($123>>>0)<($124>>>0);
      if ($125) {
       $126 = (($123) + 1|0);
       HEAP32[$0>>2] = $126;
       $127 = HEAP8[$123>>0]|0;
       $128 = $127&255;
       $c$0$i = $128;$gotdig$0$i = 0;
      } else {
       $129 = (___shgetc($f)|0);
       $c$0$i = $129;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        label = 70;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $168 = 0;$170 = 0;$212 = 0;$214 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $130 = HEAP32[$0>>2]|0;
       $131 = HEAP32[$1>>2]|0;
       $132 = ($130>>>0)<($131>>>0);
       if ($132) {
        $133 = (($130) + 1|0);
        HEAP32[$0>>2] = $133;
        $134 = HEAP8[$130>>0]|0;
        $135 = $134&255;
        $c$0$i = $135;$gotdig$0$i = 1;
        continue;
       } else {
        $136 = (___shgetc($f)|0);
        $c$0$i = $136;$gotdig$0$i = 1;
        continue;
       }
      }
      if ((label|0) == 70) {
       $137 = HEAP32[$0>>2]|0;
       $138 = HEAP32[$1>>2]|0;
       $139 = ($137>>>0)<($138>>>0);
       if ($139) {
        $140 = (($137) + 1|0);
        HEAP32[$0>>2] = $140;
        $141 = HEAP8[$137>>0]|0;
        $142 = $141&255;
        $c$1$ph$i = $142;
       } else {
        $143 = (___shgetc($f)|0);
        $c$1$ph$i = $143;
       }
       $144 = ($c$1$ph$i|0)==(48);
       if ($144) {
        $152 = 0;$153 = 0;
        while(1) {
         $145 = HEAP32[$0>>2]|0;
         $146 = HEAP32[$1>>2]|0;
         $147 = ($145>>>0)<($146>>>0);
         if ($147) {
          $148 = (($145) + 1|0);
          HEAP32[$0>>2] = $148;
          $149 = HEAP8[$145>>0]|0;
          $150 = $149&255;
          $157 = $150;
         } else {
          $151 = (___shgetc($f)|0);
          $157 = $151;
         }
         $154 = (_i64Add(($152|0),($153|0),-1,-1)|0);
         $155 = tempRet0;
         $156 = ($157|0)==(48);
         if ($156) {
          $152 = $154;$153 = $155;
         } else {
          $168 = 0;$170 = 0;$212 = $154;$214 = $155;$c$2$i = $157;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break;
         }
        }
       } else {
        $168 = 0;$170 = 0;$212 = 0;$214 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
       }
      }
      L78: while(1) {
       $158 = (($c$2$i) + -48)|0;
       $159 = ($158>>>0)<(10);
       do {
        if ($159) {
         $d$0$i = $158;
         label = 83;
        } else {
         $160 = $c$2$i | 32;
         $161 = (($160) + -97)|0;
         $162 = ($161>>>0)<(6);
         $163 = ($c$2$i|0)==(46);
         $or$cond$i = $162 | $163;
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L78;
         }
         if ($163) {
          $164 = ($gotrad$0$i|0)==(0);
          if ($164) {
           $713 = $170;$714 = $168;$715 = $170;$716 = $168;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L78;
          }
         } else {
          $165 = ($c$2$i|0)>(57);
          $166 = (($160) + -87)|0;
          $$$i = $165 ? $166 : $158;
          $d$0$i = $$$i;
          label = 83;
          break;
         }
        }
       } while(0);
       if ((label|0) == 83) {
        label = 0;
        $167 = ($168|0)<(0);
        $169 = ($170>>>0)<(8);
        $171 = ($168|0)==(0);
        $172 = $171 & $169;
        $173 = $167 | $172;
        do {
         if ($173) {
          $174 = $x$0$i << 4;
          $175 = (($d$0$i) + ($174))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $175;$y$1$i = $y$0$i;
         } else {
          $176 = ($168|0)<(0);
          $177 = ($170>>>0)<(14);
          $178 = ($168|0)==(0);
          $179 = $178 & $177;
          $180 = $176 | $179;
          if ($180) {
           $181 = (+($d$0$i|0));
           $182 = $scale$0$i * 0.0625;
           $183 = $182 * $181;
           $184 = $y$0$i + $183;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $182;$x$1$i = $x$0$i;$y$1$i = $184;
           break;
          }
          $185 = ($d$0$i|0)==(0);
          $186 = ($gottail$0$i|0)!=(0);
          $or$cond3$i = $185 | $186;
          if ($or$cond3$i) {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          } else {
           $187 = $scale$0$i * 0.5;
           $188 = $y$0$i + $187;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $188;
          }
         }
        } while(0);
        $189 = (_i64Add(($170|0),($168|0),1,0)|0);
        $190 = tempRet0;
        $713 = $212;$714 = $214;$715 = $189;$716 = $190;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $191 = HEAP32[$0>>2]|0;
       $192 = HEAP32[$1>>2]|0;
       $193 = ($191>>>0)<($192>>>0);
       if ($193) {
        $194 = (($191) + 1|0);
        HEAP32[$0>>2] = $194;
        $195 = HEAP8[$191>>0]|0;
        $196 = $195&255;
        $168 = $716;$170 = $715;$212 = $713;$214 = $714;$c$2$i = $196;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $197 = (___shgetc($f)|0);
        $168 = $716;$170 = $715;$212 = $713;$214 = $714;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $198 = ($gotdig$2$i|0)==(0);
      if ($198) {
       $199 = HEAP32[$1>>2]|0;
       $200 = ($199|0)==(0|0);
       if (!($200)) {
        $201 = HEAP32[$0>>2]|0;
        $202 = (($201) + -1|0);
        HEAP32[$0>>2] = $202;
       }
       $203 = ($pok|0)==(0);
       if ($203) {
        ___shlim($f,0);
       } else {
        if (!($200)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i|0)==(0);
      $211 = $210 ? $170 : $212;
      $213 = $210 ? $168 : $214;
      $215 = ($168|0)<(0);
      $216 = ($170>>>0)<(8);
      $217 = ($168|0)==(0);
      $218 = $217 & $216;
      $219 = $215 | $218;
      if ($219) {
       $221 = $170;$222 = $168;$x$318$i = $x$0$i;
       while(1) {
        $220 = $x$318$i << 4;
        $223 = (_i64Add(($221|0),($222|0),1,0)|0);
        $224 = tempRet0;
        $225 = ($224|0)<(0);
        $226 = ($223>>>0)<(8);
        $227 = ($224|0)==(0);
        $228 = $227 & $226;
        $229 = $225 | $228;
        if ($229) {
         $221 = $223;$222 = $224;$x$318$i = $220;
        } else {
         $x$3$lcssa$i = $220;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      $230 = $c$2$lcssa$i | 32;
      $231 = ($230|0)==(112);
      do {
       if ($231) {
        $232 = (_scanexp($f,$pok)|0);
        $233 = tempRet0;
        $234 = ($232|0)==(0);
        $235 = ($233|0)==(-2147483648);
        $236 = $234 & $235;
        if ($236) {
         $237 = ($pok|0)==(0);
         if ($237) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $238 = HEAP32[$1>>2]|0;
          $239 = ($238|0)==(0|0);
          if ($239) {
           $250 = 0;$251 = 0;
           break;
          }
          $240 = HEAP32[$0>>2]|0;
          $241 = (($240) + -1|0);
          HEAP32[$0>>2] = $241;
          $250 = 0;$251 = 0;
          break;
         }
        } else {
         $250 = $232;$251 = $233;
        }
       } else {
        $242 = HEAP32[$1>>2]|0;
        $243 = ($242|0)==(0|0);
        if ($243) {
         $250 = 0;$251 = 0;
        } else {
         $244 = HEAP32[$0>>2]|0;
         $245 = (($244) + -1|0);
         HEAP32[$0>>2] = $245;
         $250 = 0;$251 = 0;
        }
       }
      } while(0);
      $246 = (_bitshift64Shl(($211|0),($213|0),2)|0);
      $247 = tempRet0;
      $248 = (_i64Add(($246|0),($247|0),-32,-1)|0);
      $249 = tempRet0;
      $252 = (_i64Add(($248|0),($249|0),($250|0),($251|0))|0);
      $253 = tempRet0;
      $254 = ($x$3$lcssa$i|0)==(0);
      if ($254) {
       $255 = (+($sign$0|0));
       $256 = $255 * 0.0;
       $$0 = $256;
       STACKTOP = sp;return (+$$0);
      }
      $257 = (0 - ($emin$0$ph))|0;
      $258 = ($253|0)>(0);
      $259 = ($252>>>0)>($257>>>0);
      $260 = ($253|0)==(0);
      $261 = $260 & $259;
      $262 = $258 | $261;
      if ($262) {
       $263 = (___errno_location()|0);
       HEAP32[$263>>2] = 34;
       $264 = (+($sign$0|0));
       $265 = $264 * 1.7976931348623157E+308;
       $266 = $265 * 1.7976931348623157E+308;
       $$0 = $266;
       STACKTOP = sp;return (+$$0);
      }
      $267 = (($emin$0$ph) + -106)|0;
      $268 = ($267|0)<(0);
      $269 = $268 << 31 >> 31;
      $270 = ($253|0)<($269|0);
      $271 = ($252>>>0)<($267>>>0);
      $272 = ($253|0)==($269|0);
      $273 = $272 & $271;
      $274 = $270 | $273;
      if ($274) {
       $276 = (___errno_location()|0);
       HEAP32[$276>>2] = 34;
       $277 = (+($sign$0|0));
       $278 = $277 * 2.2250738585072014E-308;
       $279 = $278 * 2.2250738585072014E-308;
       $$0 = $279;
       STACKTOP = sp;return (+$$0);
      }
      $275 = ($x$3$lcssa$i|0)>(-1);
      if ($275) {
       $284 = $252;$285 = $253;$x$413$i = $x$3$lcssa$i;$y$314$i = $y$0$i;
       while(1) {
        $280 = !($y$314$i >= 0.5);
        $281 = $x$413$i << 1;
        if ($280) {
         $$pn$i = $y$314$i;$x$5$i = $281;
        } else {
         $282 = $281 | 1;
         $283 = $y$314$i + -1.0;
         $$pn$i = $283;$x$5$i = $282;
        }
        $y$4$i = $y$314$i + $$pn$i;
        $286 = (_i64Add(($284|0),($285|0),-1,-1)|0);
        $287 = tempRet0;
        $288 = ($x$5$i|0)>(-1);
        if ($288) {
         $284 = $286;$285 = $287;$x$413$i = $x$5$i;$y$314$i = $y$4$i;
        } else {
         $293 = $286;$294 = $287;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $293 = $252;$294 = $253;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      $289 = ($emin$0$ph|0)<(0);
      $290 = $289 << 31 >> 31;
      $291 = (_i64Subtract(32,0,($emin$0$ph|0),($290|0))|0);
      $292 = tempRet0;
      $295 = (_i64Add(($293|0),($294|0),($291|0),($292|0))|0);
      $296 = tempRet0;
      $297 = (0)>($296|0);
      $298 = ($bits$0$ph>>>0)>($295>>>0);
      $299 = (0)==($296|0);
      $300 = $299 & $298;
      $301 = $297 | $300;
      if ($301) {
       $302 = ($295|0)<(0);
       if ($302) {
        $$0611$i = 0;
        label = 126;
       } else {
        $$06$i = $295;
        label = 124;
       }
      } else {
       $$06$i = $bits$0$ph;
       label = 124;
      }
      if ((label|0) == 124) {
       $303 = ($$06$i|0)<(53);
       if ($303) {
        $$0611$i = $$06$i;
        label = 126;
       } else {
        $$pre$i = (+($sign$0|0));
        $$0612$i = $$06$i;$$pre$phi$iZ2D = $$pre$i;$bias$0$i = 0.0;
       }
      }
      if ((label|0) == 126) {
       $304 = (84 - ($$0611$i))|0;
       $305 = (+_scalbn(1.0,$304));
       $306 = (+($sign$0|0));
       $307 = (+_copysignl((+$305),(+$306)));
       $$0612$i = $$0611$i;$$pre$phi$iZ2D = $306;$bias$0$i = $307;
      }
      $308 = ($$0612$i|0)<(32);
      $309 = $y$3$lcssa$i != 0.0;
      $or$cond5$i = $308 & $309;
      $310 = $x$4$lcssa$i & 1;
      $311 = ($310|0)==(0);
      $or$cond8$i = $or$cond5$i & $311;
      $312 = $or$cond8$i&1;
      $x$6$i = (($312) + ($x$4$lcssa$i))|0;
      $y$5$i = $or$cond8$i ? 0.0 : $y$3$lcssa$i;
      $313 = (+($x$6$i>>>0));
      $314 = $$pre$phi$iZ2D * $313;
      $315 = $bias$0$i + $314;
      $316 = $$pre$phi$iZ2D * $y$5$i;
      $317 = $316 + $315;
      $318 = $317 - $bias$0$i;
      $319 = $318 != 0.0;
      if (!($319)) {
       $320 = (___errno_location()|0);
       HEAP32[$320>>2] = 34;
      }
      $321 = (+_scalbnl($318,$293));
      $$0 = $321;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $326 = (0 - ($sum$i))|0;
    $$011$i = $c$6;$gotdig$0$i11 = 0;
    while(1) {
     if ((($$011$i|0) == 46)) {
      label = 137;
      break;
     } else if (!((($$011$i|0) == 48))) {
      $$2$i = $$011$i;$717 = 0;$718 = 0;$gotdig$2$i12 = $gotdig$0$i11;$gotrad$0$i13 = 0;
      break;
     }
     $327 = HEAP32[$0>>2]|0;
     $328 = HEAP32[$1>>2]|0;
     $329 = ($327>>>0)<($328>>>0);
     if ($329) {
      $330 = (($327) + 1|0);
      HEAP32[$0>>2] = $330;
      $331 = HEAP8[$327>>0]|0;
      $332 = $331&255;
      $$011$i = $332;$gotdig$0$i11 = 1;
      continue;
     } else {
      $333 = (___shgetc($f)|0);
      $$011$i = $333;$gotdig$0$i11 = 1;
      continue;
     }
    }
    if ((label|0) == 137) {
     $334 = HEAP32[$0>>2]|0;
     $335 = HEAP32[$1>>2]|0;
     $336 = ($334>>>0)<($335>>>0);
     if ($336) {
      $337 = (($334) + 1|0);
      HEAP32[$0>>2] = $337;
      $338 = HEAP8[$334>>0]|0;
      $339 = $338&255;
      $$1$ph$i = $339;
     } else {
      $340 = (___shgetc($f)|0);
      $$1$ph$i = $340;
     }
     $341 = ($$1$ph$i|0)==(48);
     if ($341) {
      $342 = 0;$343 = 0;
      while(1) {
       $344 = (_i64Add(($342|0),($343|0),-1,-1)|0);
       $345 = tempRet0;
       $346 = HEAP32[$0>>2]|0;
       $347 = HEAP32[$1>>2]|0;
       $348 = ($346>>>0)<($347>>>0);
       if ($348) {
        $349 = (($346) + 1|0);
        HEAP32[$0>>2] = $349;
        $350 = HEAP8[$346>>0]|0;
        $351 = $350&255;
        $$1$be$i = $351;
       } else {
        $352 = (___shgetc($f)|0);
        $$1$be$i = $352;
       }
       $353 = ($$1$be$i|0)==(48);
       if ($353) {
        $342 = $344;$343 = $345;
       } else {
        $$2$i = $$1$be$i;$717 = $344;$718 = $345;$gotdig$2$i12 = 1;$gotrad$0$i13 = 1;
        break;
       }
      }
     } else {
      $$2$i = $$1$ph$i;$717 = 0;$718 = 0;$gotdig$2$i12 = $gotdig$0$i11;$gotrad$0$i13 = 1;
     }
    }
    HEAP32[$x$i>>2] = 0;
    $354 = (($$2$i) + -48)|0;
    $355 = ($354>>>0)<(10);
    $356 = ($$2$i|0)==(46);
    $or$cond112$i = $355 | $356;
    L180: do {
     if ($or$cond112$i) {
      $357 = (($x$i) + 496|0);
      $$3120$i = $$2$i;$360 = 0;$361 = 0;$719 = $356;$720 = $354;$721 = $717;$722 = $718;$gotdig$3116$i = $gotdig$2$i12;$gotrad$1117$i = $gotrad$0$i13;$j$0119$i = 0;$k$0118$i = 0;$lnz$0115$i = 0;
      L182: while(1) {
       do {
        if ($719) {
         $cond$i = ($gotrad$1117$i|0)==(0);
         if ($cond$i) {
          $723 = $360;$724 = $361;$725 = $360;$726 = $361;$gotdig$4$i = $gotdig$3116$i;$gotrad$2$i = 1;$j$2$i = $j$0119$i;$k$2$i = $k$0118$i;$lnz$2$i = $lnz$0115$i;
         } else {
          break L182;
         }
        } else {
         $359 = ($k$0118$i|0)<(125);
         $362 = (_i64Add(($360|0),($361|0),1,0)|0);
         $363 = tempRet0;
         $364 = ($$3120$i|0)!=(48);
         if (!($359)) {
          if (!($364)) {
           $723 = $721;$724 = $722;$725 = $362;$726 = $363;$gotdig$4$i = $gotdig$3116$i;$gotrad$2$i = $gotrad$1117$i;$j$2$i = $j$0119$i;$k$2$i = $k$0118$i;$lnz$2$i = $lnz$0115$i;
           break;
          }
          $374 = HEAP32[$357>>2]|0;
          $375 = $374 | 1;
          HEAP32[$357>>2] = $375;
          $723 = $721;$724 = $722;$725 = $362;$726 = $363;$gotdig$4$i = $gotdig$3116$i;$gotrad$2$i = $gotrad$1117$i;$j$2$i = $j$0119$i;$k$2$i = $k$0118$i;$lnz$2$i = $lnz$0115$i;
          break;
         }
         $$lnz$0$i = $364 ? $362 : $lnz$0115$i;
         $365 = ($j$0119$i|0)==(0);
         $366 = (($x$i) + ($k$0118$i<<2)|0);
         if ($365) {
          $storemerge$i = $720;
         } else {
          $367 = HEAP32[$366>>2]|0;
          $368 = ($367*10)|0;
          $369 = (($$3120$i) + -48)|0;
          $370 = (($369) + ($368))|0;
          $storemerge$i = $370;
         }
         HEAP32[$366>>2] = $storemerge$i;
         $371 = (($j$0119$i) + 1)|0;
         $372 = ($371|0)==(9);
         $373 = $372&1;
         $$k$0$i = (($373) + ($k$0118$i))|0;
         $$13$i = $372 ? 0 : $371;
         $723 = $721;$724 = $722;$725 = $362;$726 = $363;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1117$i;$j$2$i = $$13$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $376 = HEAP32[$0>>2]|0;
       $377 = HEAP32[$1>>2]|0;
       $378 = ($376>>>0)<($377>>>0);
       if ($378) {
        $379 = (($376) + 1|0);
        HEAP32[$0>>2] = $379;
        $380 = HEAP8[$376>>0]|0;
        $381 = $380&255;
        $$3$be$i = $381;
       } else {
        $382 = (___shgetc($f)|0);
        $$3$be$i = $382;
       }
       $383 = (($$3$be$i) + -48)|0;
       $384 = ($383>>>0)<(10);
       $385 = ($$3$be$i|0)==(46);
       $or$cond$i15 = $384 | $385;
       if ($or$cond$i15) {
        $$3120$i = $$3$be$i;$360 = $725;$361 = $726;$719 = $385;$720 = $383;$721 = $723;$722 = $724;$gotdig$3116$i = $gotdig$4$i;$gotrad$1117$i = $gotrad$2$i;$j$0119$i = $j$2$i;$k$0118$i = $k$2$i;$lnz$0115$i = $lnz$2$i;
       } else {
        $$3$lcssa$i = $$3$be$i;$388 = $725;$389 = $723;$391 = $726;$392 = $724;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 160;
        break L180;
       }
      }
      $358 = ($gotdig$3116$i|0)!=(0);
      $727 = $360;$728 = $361;$729 = $721;$730 = $722;$731 = $358;$j$0110$i = $j$0119$i;$k$0106$i = $k$0118$i;$lnz$0100$i = $lnz$0115$i;
      label = 168;
     } else {
      $$3$lcssa$i = $$2$i;$388 = 0;$389 = $717;$391 = 0;$392 = $718;$gotdig$3$lcssa$i = $gotdig$2$i12;$gotrad$1$lcssa$i = $gotrad$0$i13;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 160;
     }
    } while(0);
    do {
     if ((label|0) == 160) {
      $386 = ($gotrad$1$lcssa$i|0)==(0);
      $387 = $386 ? $388 : $389;
      $390 = $386 ? $391 : $392;
      $393 = ($gotdig$3$lcssa$i|0)!=(0);
      $394 = $$3$lcssa$i | 32;
      $395 = ($394|0)==(101);
      $or$cond15$i = $393 & $395;
      if (!($or$cond15$i)) {
       $410 = ($$3$lcssa$i|0)>(-1);
       if ($410) {
        $727 = $388;$728 = $391;$729 = $387;$730 = $390;$731 = $393;$j$0110$i = $j$0$lcssa$i;$k$0106$i = $k$0$lcssa$i;$lnz$0100$i = $lnz$0$lcssa$i;
        label = 168;
        break;
       } else {
        $732 = $388;$733 = $391;$734 = $393;$735 = $387;$736 = $390;$j$0109$i = $j$0$lcssa$i;$k$0105$i = $k$0$lcssa$i;$lnz$099$i = $lnz$0$lcssa$i;
        label = 170;
        break;
       }
      }
      $396 = (_scanexp($f,$pok)|0);
      $397 = tempRet0;
      $398 = ($396|0)==(0);
      $399 = ($397|0)==(-2147483648);
      $400 = $398 & $399;
      do {
       if ($400) {
        $401 = ($pok|0)==(0);
        if ($401) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $402 = HEAP32[$1>>2]|0;
         $403 = ($402|0)==(0|0);
         if ($403) {
          $406 = 0;$407 = 0;
          break;
         }
         $404 = HEAP32[$0>>2]|0;
         $405 = (($404) + -1|0);
         HEAP32[$0>>2] = $405;
         $406 = 0;$407 = 0;
         break;
        }
       } else {
        $406 = $396;$407 = $397;
       }
      } while(0);
      $408 = (_i64Add(($406|0),($407|0),($387|0),($390|0))|0);
      $409 = tempRet0;
      $421 = $408;$422 = $388;$424 = $409;$425 = $391;$j$0108$i = $j$0$lcssa$i;$k$0104$i = $k$0$lcssa$i;$lnz$098$i = $lnz$0$lcssa$i;
     }
    } while(0);
    if ((label|0) == 168) {
     $411 = HEAP32[$1>>2]|0;
     $412 = ($411|0)==(0|0);
     if ($412) {
      $732 = $727;$733 = $728;$734 = $731;$735 = $729;$736 = $730;$j$0109$i = $j$0110$i;$k$0105$i = $k$0106$i;$lnz$099$i = $lnz$0100$i;
      label = 170;
     } else {
      $413 = HEAP32[$0>>2]|0;
      $414 = (($413) + -1|0);
      HEAP32[$0>>2] = $414;
      if ($731) {
       $421 = $729;$422 = $727;$424 = $730;$425 = $728;$j$0108$i = $j$0110$i;$k$0104$i = $k$0106$i;$lnz$098$i = $lnz$0100$i;
      } else {
       label = 171;
      }
     }
    }
    if ((label|0) == 170) {
     if ($734) {
      $421 = $735;$422 = $732;$424 = $736;$425 = $733;$j$0108$i = $j$0109$i;$k$0104$i = $k$0105$i;$lnz$098$i = $lnz$099$i;
     } else {
      label = 171;
     }
    }
    if ((label|0) == 171) {
     $415 = (___errno_location()|0);
     HEAP32[$415>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $416 = HEAP32[$x$i>>2]|0;
    $417 = ($416|0)==(0);
    if ($417) {
     $418 = (+($sign$0|0));
     $419 = $418 * 0.0;
     $$0 = $419;
     STACKTOP = sp;return (+$$0);
    }
    $420 = ($421|0)==($422|0);
    $423 = ($424|0)==($425|0);
    $426 = $420 & $423;
    $427 = ($425|0)<(0);
    $428 = ($422>>>0)<(10);
    $429 = ($425|0)==(0);
    $430 = $429 & $428;
    $431 = $427 | $430;
    $or$cond3$i16 = $426 & $431;
    if ($or$cond3$i16) {
     $432 = ($bits$0$ph>>>0)>(30);
     $433 = $416 >>> $bits$0$ph;
     $434 = ($433|0)==(0);
     $or$cond17$i = $432 | $434;
     if ($or$cond17$i) {
      $435 = (+($sign$0|0));
      $436 = (+($416>>>0));
      $437 = $435 * $436;
      $$0 = $437;
      STACKTOP = sp;return (+$$0);
     }
    }
    $438 = (($emin$0$ph|0) / -2)&-1;
    $439 = ($438|0)<(0);
    $440 = $439 << 31 >> 31;
    $441 = ($424|0)>($440|0);
    $442 = ($421>>>0)>($438>>>0);
    $443 = ($424|0)==($440|0);
    $444 = $443 & $442;
    $445 = $441 | $444;
    if ($445) {
     $446 = (___errno_location()|0);
     HEAP32[$446>>2] = 34;
     $447 = (+($sign$0|0));
     $448 = $447 * 1.7976931348623157E+308;
     $449 = $448 * 1.7976931348623157E+308;
     $$0 = $449;
     STACKTOP = sp;return (+$$0);
    }
    $450 = (($emin$0$ph) + -106)|0;
    $451 = ($450|0)<(0);
    $452 = $451 << 31 >> 31;
    $453 = ($424|0)<($452|0);
    $454 = ($421>>>0)<($450>>>0);
    $455 = ($424|0)==($452|0);
    $456 = $455 & $454;
    $457 = $453 | $456;
    if ($457) {
     $458 = (___errno_location()|0);
     HEAP32[$458>>2] = 34;
     $459 = (+($sign$0|0));
     $460 = $459 * 2.2250738585072014E-308;
     $461 = $460 * 2.2250738585072014E-308;
     $$0 = $461;
     STACKTOP = sp;return (+$$0);
    }
    $462 = ($j$0108$i|0)==(0);
    if ($462) {
     $k$3$i = $k$0104$i;
    } else {
     $463 = ($j$0108$i|0)<(9);
     if ($463) {
      $464 = (($x$i) + ($k$0104$i<<2)|0);
      $$promoted$i = HEAP32[$464>>2]|0;
      $466 = $$promoted$i;$j$388$i = $j$0108$i;
      while(1) {
       $465 = ($466*10)|0;
       $467 = (($j$388$i) + 1)|0;
       $exitcond$i = ($467|0)==(9);
       if ($exitcond$i) {
        break;
       } else {
        $466 = $465;$j$388$i = $467;
       }
      }
      HEAP32[$464>>2] = $465;
     }
     $468 = (($k$0104$i) + 1)|0;
     $k$3$i = $468;
    }
    $469 = ($lnz$098$i|0)<(9);
    if ($469) {
     $470 = ($lnz$098$i|0)<=($421|0);
     $471 = ($421|0)<(18);
     $or$cond5$i17 = $470 & $471;
     if ($or$cond5$i17) {
      $472 = ($421|0)==(9);
      if ($472) {
       $473 = (+($sign$0|0));
       $474 = HEAP32[$x$i>>2]|0;
       $475 = (+($474>>>0));
       $476 = $473 * $475;
       $$0 = $476;
       STACKTOP = sp;return (+$$0);
      }
      $477 = ($421|0)<(9);
      if ($477) {
       $478 = (+($sign$0|0));
       $479 = HEAP32[$x$i>>2]|0;
       $480 = (+($479>>>0));
       $481 = $478 * $480;
       $482 = (8 - ($421))|0;
       $483 = (21016 + ($482<<2)|0);
       $484 = HEAP32[$483>>2]|0;
       $485 = (+($484|0));
       $486 = $481 / $485;
       $$0 = $486;
       STACKTOP = sp;return (+$$0);
      }
      $487 = Math_imul($421, -3)|0;
      $$neg37$i = (($bits$0$ph) + 27)|0;
      $488 = (($$neg37$i) + ($487))|0;
      $489 = ($488|0)>(30);
      $$pre$i18 = HEAP32[$x$i>>2]|0;
      $490 = $$pre$i18 >>> $488;
      $491 = ($490|0)==(0);
      $or$cond187$i = $489 | $491;
      if ($or$cond187$i) {
       $492 = (+($sign$0|0));
       $493 = (+($$pre$i18>>>0));
       $494 = $492 * $493;
       $495 = (($421) + -10)|0;
       $496 = (21016 + ($495<<2)|0);
       $497 = HEAP32[$496>>2]|0;
       $498 = (+($497|0));
       $499 = $494 * $498;
       $$0 = $499;
       STACKTOP = sp;return (+$$0);
      }
     }
    }
    $500 = (($421|0) % 9)&-1;
    $501 = ($500|0)==(0);
    if ($501) {
     $a$2$ph57$i = 0;$e2$0$ph$i = 0;$rp$2$ph55$i = $421;$z$1$ph56$i = $k$3$i;
    } else {
     $502 = ($421|0)>(-1);
     $503 = (($500) + 9)|0;
     $504 = $502 ? $500 : $503;
     $505 = (8 - ($504))|0;
     $506 = (21016 + ($505<<2)|0);
     $507 = HEAP32[$506>>2]|0;
     $508 = ($k$3$i|0)==(0);
     if ($508) {
      $a$0$lcssa182$i = 0;$rp$0$lcssa183$i = $421;$z$0$i = 0;
     } else {
      $509 = (1000000000 / ($507|0))&-1;
      $a$078$i = 0;$carry$080$i = 0;$k$479$i = 0;$rp$077$i = $421;
      while(1) {
       $510 = (($x$i) + ($k$479$i<<2)|0);
       $511 = HEAP32[$510>>2]|0;
       $512 = (($511>>>0) % ($507>>>0))&-1;
       $513 = (($511>>>0) / ($507>>>0))&-1;
       $514 = (($513) + ($carry$080$i))|0;
       HEAP32[$510>>2] = $514;
       $515 = Math_imul($512, $509)|0;
       $516 = ($k$479$i|0)==($a$078$i|0);
       $517 = ($514|0)==(0);
       $or$cond18$i = $516 & $517;
       $518 = (($k$479$i) + 1)|0;
       if ($or$cond18$i) {
        $519 = $518 & 127;
        $520 = (($rp$077$i) + -9)|0;
        $a$1$i = $519;$rp$1$i19 = $520;
       } else {
        $a$1$i = $a$078$i;$rp$1$i19 = $rp$077$i;
       }
       $521 = ($518|0)==($k$3$i|0);
       if ($521) {
        break;
       } else {
        $a$078$i = $a$1$i;$carry$080$i = $515;$k$479$i = $518;$rp$077$i = $rp$1$i19;
       }
      }
      $522 = ($515|0)==(0);
      if ($522) {
       $a$0$lcssa182$i = $a$1$i;$rp$0$lcssa183$i = $rp$1$i19;$z$0$i = $k$3$i;
      } else {
       $523 = (($k$3$i) + 1)|0;
       $524 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$524>>2] = $515;
       $a$0$lcssa182$i = $a$1$i;$rp$0$lcssa183$i = $rp$1$i19;$z$0$i = $523;
      }
     }
     $525 = (9 - ($504))|0;
     $526 = (($525) + ($rp$0$lcssa183$i))|0;
     $a$2$ph57$i = $a$0$lcssa182$i;$e2$0$ph$i = 0;$rp$2$ph55$i = $526;$z$1$ph56$i = $z$0$i;
    }
    L274: while(1) {
     $527 = ($rp$2$ph55$i|0)<(18);
     $528 = (($x$i) + ($a$2$ph57$i<<2)|0);
     if ($527) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph56$i;
      while(1) {
       $530 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $530;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $531 = (($x$i) + ($k$5$us$i<<2)|0);
        $532 = HEAP32[$531>>2]|0;
        $533 = (_bitshift64Shl(($532|0),0,29)|0);
        $534 = tempRet0;
        $535 = (_i64Add(($533|0),($534|0),($carry1$0$us$i|0),0)|0);
        $536 = tempRet0;
        $537 = ($536>>>0)>(0);
        $538 = ($535>>>0)>(1000000000);
        $539 = ($536|0)==(0);
        $540 = $539 & $538;
        $541 = $537 | $540;
        if ($541) {
         $542 = (___udivdi3(($535|0),($536|0),1000000000,0)|0);
         $543 = tempRet0;
         $544 = (___uremdi3(($535|0),($536|0),1000000000,0)|0);
         $545 = tempRet0;
         $$sink$off0$us$i = $544;$carry1$1$us$i = $542;
        } else {
         $$sink$off0$us$i = $535;$carry1$1$us$i = 0;
        }
        HEAP32[$531>>2] = $$sink$off0$us$i;
        $546 = (($z$2$us$i) + 127)|0;
        $547 = $546 & 127;
        $548 = ($k$5$us$i|0)!=($547|0);
        $549 = ($k$5$us$i|0)==($a$2$ph57$i|0);
        $or$cond19$us$i = $548 | $549;
        if ($or$cond19$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $550 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $550 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $551 = (($k$5$us$i) + -1)|0;
        if ($549) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $551;$z$2$us$i = $z$3$us$i;
        }
       }
       $552 = (($e2$0$us$i) + -29)|0;
       $553 = ($carry1$1$us$i|0)==(0);
       if ($553) {
        $e2$0$us$i = $552;$z$1$us$i = $z$3$us$i;
       } else {
        $$lcssa60$i = $552;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $529 = ($rp$2$ph55$i|0)==(18);
      if ($529) {
       $e2$0$us61$i = $e2$0$ph$i;$z$1$us62$i = $z$1$ph56$i;
      } else {
       $a$3$ph$i = $a$2$ph57$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph50$i = $rp$2$ph55$i;$z$5$ph$i = $z$1$ph56$i;
       break;
      }
      while(1) {
       $554 = HEAP32[$528>>2]|0;
       $555 = ($554>>>0)<(9007199);
       if (!($555)) {
        $a$3$ph$i = $a$2$ph57$i;$e2$1$ph$i = $e2$0$us61$i;$rp$3$ph50$i = 18;$z$5$ph$i = $z$1$us62$i;
        break L274;
       }
       $556 = (($z$1$us62$i) + 127)|0;
       $carry1$0$us66$i = 0;$k$5$in$us65$i = $556;$z$2$us64$i = $z$1$us62$i;
       while(1) {
        $k$5$us67$i = $k$5$in$us65$i & 127;
        $557 = (($x$i) + ($k$5$us67$i<<2)|0);
        $558 = HEAP32[$557>>2]|0;
        $559 = (_bitshift64Shl(($558|0),0,29)|0);
        $560 = tempRet0;
        $561 = (_i64Add(($559|0),($560|0),($carry1$0$us66$i|0),0)|0);
        $562 = tempRet0;
        $563 = ($562>>>0)>(0);
        $564 = ($561>>>0)>(1000000000);
        $565 = ($562|0)==(0);
        $566 = $565 & $564;
        $567 = $563 | $566;
        if ($567) {
         $568 = (___udivdi3(($561|0),($562|0),1000000000,0)|0);
         $569 = tempRet0;
         $570 = (___uremdi3(($561|0),($562|0),1000000000,0)|0);
         $571 = tempRet0;
         $$sink$off0$us70$i = $570;$carry1$1$us71$i = $568;
        } else {
         $$sink$off0$us70$i = $561;$carry1$1$us71$i = 0;
        }
        HEAP32[$557>>2] = $$sink$off0$us70$i;
        $572 = (($z$2$us64$i) + 127)|0;
        $573 = $572 & 127;
        $574 = ($k$5$us67$i|0)!=($573|0);
        $575 = ($k$5$us67$i|0)==($a$2$ph57$i|0);
        $or$cond19$us72$i = $574 | $575;
        if ($or$cond19$us72$i) {
         $z$3$us74$i = $z$2$us64$i;
        } else {
         $576 = ($$sink$off0$us70$i|0)==(0);
         $k$5$z$2$us73$i = $576 ? $k$5$us67$i : $z$2$us64$i;
         $z$3$us74$i = $k$5$z$2$us73$i;
        }
        $577 = (($k$5$us67$i) + -1)|0;
        if ($575) {
         break;
        } else {
         $carry1$0$us66$i = $carry1$1$us71$i;$k$5$in$us65$i = $577;$z$2$us64$i = $z$3$us74$i;
        }
       }
       $578 = (($e2$0$us61$i) + -29)|0;
       $579 = ($carry1$1$us71$i|0)==(0);
       if ($579) {
        $e2$0$us61$i = $578;$z$1$us62$i = $z$3$us74$i;
       } else {
        $$lcssa60$i = $578;$carry1$1$lcssa$lcssa$i = $carry1$1$us71$i;$z$3$lcssa$lcssa$i = $z$3$us74$i;
        break;
       }
      }
     }
     $580 = (($rp$2$ph55$i) + 9)|0;
     $581 = (($a$2$ph57$i) + 127)|0;
     $582 = $581 & 127;
     $583 = ($582|0)==($z$3$lcssa$lcssa$i|0);
     if ($583) {
      $584 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $585 = $584 & 127;
      $586 = (($x$i) + ($585<<2)|0);
      $587 = HEAP32[$586>>2]|0;
      $588 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $589 = $588 & 127;
      $590 = (($x$i) + ($589<<2)|0);
      $591 = HEAP32[$590>>2]|0;
      $592 = $591 | $587;
      HEAP32[$590>>2] = $592;
      $z$4$i = $585;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $593 = (($x$i) + ($582<<2)|0);
     HEAP32[$593>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph57$i = $582;$e2$0$ph$i = $$lcssa60$i;$rp$2$ph55$i = $580;$z$1$ph56$i = $z$4$i;
    }
    L305: while(1) {
     $630 = (($z$5$ph$i) + 1)|0;
     $628 = $630 & 127;
     $631 = (($z$5$ph$i) + 127)|0;
     $632 = $631 & 127;
     $633 = (($x$i) + ($632<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph50$i;
     while(1) {
      $606 = ($rp$3$i$ph|0)==(18);
      $634 = ($rp$3$i$ph|0)>(27);
      $$20$i = $634 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$042$i = 0;
       while(1) {
        $596 = (($i$042$i) + ($a$3$i))|0;
        $597 = $596 & 127;
        $598 = ($597|0)==($z$5$ph$i|0);
        if ($598) {
         $i$1$i = 2;
         break;
        }
        $599 = (($x$i) + ($597<<2)|0);
        $600 = HEAP32[$599>>2]|0;
        $601 = (21008 + ($i$042$i<<2)|0);
        $602 = HEAP32[$601>>2]|0;
        $603 = ($600>>>0)<($602>>>0);
        if ($603) {
         $i$1$i = 2;
         break;
        }
        $604 = ($600>>>0)>($602>>>0);
        $595 = (($i$042$i) + 1)|0;
        if ($604) {
         $i$1$i = $i$042$i;
         break;
        }
        $594 = ($595|0)<(2);
        if ($594) {
         $i$042$i = $595;
        } else {
         $i$1$i = $595;
         break;
        }
       }
       $605 = ($i$1$i|0)==(2);
       $or$cond8$i20 = $605 & $606;
       if ($or$cond8$i20) {
        break L305;
       }
       $609 = (($$20$i) + ($e2$1$i))|0;
       $610 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($610) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $609;
       } else {
        break;
       }
      }
      $611 = 1 << $$20$i;
      $612 = (($611) + -1)|0;
      $613 = 1000000000 >>> $$20$i;
      $a$444$i = $a$3$i;$carry3$047$i = 0;$k$645$i = $a$3$i;$rp$443$i = $rp$3$i$ph;
      while(1) {
       $614 = (($x$i) + ($k$645$i<<2)|0);
       $615 = HEAP32[$614>>2]|0;
       $616 = $615 & $612;
       $617 = $615 >>> $$20$i;
       $618 = (($617) + ($carry3$047$i))|0;
       HEAP32[$614>>2] = $618;
       $619 = Math_imul($616, $613)|0;
       $620 = ($k$645$i|0)==($a$444$i|0);
       $621 = ($618|0)==(0);
       $or$cond21$i = $620 & $621;
       $622 = (($k$645$i) + 1)|0;
       $623 = $622 & 127;
       $624 = (($rp$443$i) + -9)|0;
       $rp$5$i = $or$cond21$i ? $624 : $rp$443$i;
       $a$5$i = $or$cond21$i ? $623 : $a$444$i;
       $625 = ($623|0)==($z$5$ph$i|0);
       if ($625) {
        break;
       } else {
        $a$444$i = $a$5$i;$carry3$047$i = $619;$k$645$i = $623;$rp$443$i = $rp$5$i;
       }
      }
      $626 = ($619|0)==(0);
      if ($626) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $609;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $627 = ($628|0)==($a$5$i|0);
      if (!($627)) {
       break;
      }
      $635 = HEAP32[$633>>2]|0;
      $636 = $635 | 1;
      HEAP32[$633>>2] = $636;
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $609;$rp$3$i$ph = $rp$5$i;
     }
     $629 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$629>>2] = $619;
     $a$3$ph$i = $a$5$i;$e2$1$ph$i = $609;$rp$3$ph50$i = $rp$5$i;$z$5$ph$i = $628;
    }
    $607 = $a$3$i & 127;
    $608 = ($607|0)==($z$5$ph$i|0);
    if ($608) {
     $637 = (($628) + -1)|0;
     $638 = (($x$i) + ($637<<2)|0);
     HEAP32[$638>>2] = 0;
     $z$7$i = $628;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $639 = (($x$i) + ($607<<2)|0);
    $640 = HEAP32[$639>>2]|0;
    $641 = (+($640>>>0));
    $642 = (($a$3$i) + 1)|0;
    $643 = $642 & 127;
    $644 = ($643|0)==($z$7$i|0);
    if ($644) {
     $703 = (($z$7$i) + 1)|0;
     $704 = $703 & 127;
     $705 = (($704) + -1)|0;
     $706 = (($x$i) + ($705<<2)|0);
     HEAP32[$706>>2] = 0;
     $z$7$1$i = $704;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $707 = $641 * 1.0E+9;
    $708 = (($x$i) + ($643<<2)|0);
    $709 = HEAP32[$708>>2]|0;
    $710 = (+($709>>>0));
    $711 = $707 + $710;
    $668 = (+($sign$0|0));
    $650 = $668 * $711;
    $688 = (($e2$1$i) + 53)|0;
    $646 = (($688) - ($emin$0$ph))|0;
    $712 = ($646|0)<($bits$0$ph|0);
    if ($712) {
     $645 = ($646|0)<(0);
     if ($645) {
      $$01231$i = 0;$denormal$030$i = 1;
      label = 244;
     } else {
      $$012$i = $646;$denormal$0$i = 1;
      label = 243;
     }
    } else {
     $$012$i = $bits$0$ph;$denormal$0$i = 0;
     label = 243;
    }
    if ((label|0) == 243) {
     $647 = ($$012$i|0)<(53);
     if ($647) {
      $$01231$i = $$012$i;$denormal$030$i = $denormal$0$i;
      label = 244;
     } else {
      $$01232$i = $$012$i;$bias$0$i25 = 0.0;$denormal$029$i = $denormal$0$i;$frac$0$i = 0.0;$y$1$i24 = $650;
     }
    }
    if ((label|0) == 244) {
     $648 = (105 - ($$01231$i))|0;
     $649 = (+_scalbn(1.0,$648));
     $651 = (+_copysignl((+$649),(+$650)));
     $652 = (53 - ($$01231$i))|0;
     $653 = (+_scalbn(1.0,$652));
     $654 = (+_fmodl((+$650),(+$653)));
     $655 = $650 - $654;
     $656 = $651 + $655;
     $$01232$i = $$01231$i;$bias$0$i25 = $651;$denormal$029$i = $denormal$030$i;$frac$0$i = $654;$y$1$i24 = $656;
    }
    $657 = (($a$3$i) + 2)|0;
    $658 = $657 & 127;
    $659 = ($658|0)==($z$7$1$i|0);
    do {
     if ($659) {
      $frac$2$i = $frac$0$i;
     } else {
      $660 = (($x$i) + ($658<<2)|0);
      $661 = HEAP32[$660>>2]|0;
      $662 = ($661>>>0)<(500000000);
      do {
       if ($662) {
        $663 = ($661|0)==(0);
        if ($663) {
         $664 = (($a$3$i) + 3)|0;
         $665 = $664 & 127;
         $666 = ($665|0)==($z$7$1$i|0);
         if ($666) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $667 = $668 * 0.25;
        $669 = $667 + $frac$0$i;
        $frac$1$i = $669;
       } else {
        $670 = ($661>>>0)>(500000000);
        if ($670) {
         $671 = $668 * 0.75;
         $672 = $671 + $frac$0$i;
         $frac$1$i = $672;
         break;
        }
        $673 = (($a$3$i) + 3)|0;
        $674 = $673 & 127;
        $675 = ($674|0)==($z$7$1$i|0);
        if ($675) {
         $676 = $668 * 0.5;
         $677 = $676 + $frac$0$i;
         $frac$1$i = $677;
         break;
        } else {
         $678 = $668 * 0.75;
         $679 = $678 + $frac$0$i;
         $frac$1$i = $679;
         break;
        }
       }
      } while(0);
      $680 = (53 - ($$01232$i))|0;
      $681 = ($680|0)>(1);
      if (!($681)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $682 = (+_fmodl((+$frac$1$i),1.0));
      $683 = $682 != 0.0;
      if ($683) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $684 = $frac$1$i + 1.0;
      $frac$2$i = $684;
     }
    } while(0);
    $685 = $y$1$i24 + $frac$2$i;
    $686 = $685 - $bias$0$i25;
    $687 = $688 & 2147483647;
    $689 = (-2 - ($sum$i))|0;
    $690 = ($687|0)>($689|0);
    do {
     if ($690) {
      $691 = (+Math_abs((+$686)));
      $692 = !($691 >= 9007199254740992.0);
      if ($692) {
       $denormal$2$i = $denormal$029$i;$e2$2$i = $e2$1$i;$y$2$i26 = $686;
      } else {
       $693 = ($denormal$029$i|0)!=(0);
       $694 = ($$01232$i|0)==($646|0);
       $or$cond22$i = $693 & $694;
       $denormal$1$i = $or$cond22$i ? 0 : $denormal$029$i;
       $695 = $686 * 0.5;
       $696 = (($e2$1$i) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $696;$y$2$i26 = $695;
      }
      $697 = (($e2$2$i) + 50)|0;
      $698 = ($697|0)>($326|0);
      if (!($698)) {
       $699 = ($denormal$2$i|0)!=(0);
       $700 = $frac$2$i != 0.0;
       $or$cond10$i = $699 & $700;
       if (!($or$cond10$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
        break;
       }
      }
      $701 = (___errno_location()|0);
      HEAP32[$701>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $686;
     }
    } while(0);
    $702 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $702;
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 3)) {
    $67 = HEAP32[$0>>2]|0;
    $68 = HEAP32[$1>>2]|0;
    $69 = ($67>>>0)<($68>>>0);
    if ($69) {
     $70 = (($67) + 1|0);
     HEAP32[$0>>2] = $70;
     $71 = HEAP8[$67>>0]|0;
     $72 = $71&255;
     $75 = $72;
    } else {
     $73 = (___shgetc($f)|0);
     $75 = $73;
    }
    $74 = ($75|0)==(40);
    if ($74) {
     $i$4 = 1;
    } else {
     $76 = HEAP32[$1>>2]|0;
     $77 = ($76|0)==(0|0);
     if ($77) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $78 = HEAP32[$0>>2]|0;
     $79 = (($78) + -1|0);
     HEAP32[$0>>2] = $79;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    while(1) {
     $80 = HEAP32[$0>>2]|0;
     $81 = HEAP32[$1>>2]|0;
     $82 = ($80>>>0)<($81>>>0);
     if ($82) {
      $83 = (($80) + 1|0);
      HEAP32[$0>>2] = $83;
      $84 = HEAP8[$80>>0]|0;
      $85 = $84&255;
      $88 = $85;
     } else {
      $86 = (___shgetc($f)|0);
      $88 = $86;
     }
     $87 = (($88) + -48)|0;
     $89 = ($87>>>0)<(10);
     $90 = (($88) + -65)|0;
     $91 = ($90>>>0)<(26);
     $or$cond = $89 | $91;
     if (!($or$cond)) {
      $92 = (($88) + -97)|0;
      $93 = ($92>>>0)<(26);
      $94 = ($88|0)==(95);
      $or$cond7 = $93 | $94;
      if (!($or$cond7)) {
       break;
      }
     }
     $106 = (($i$4) + 1)|0;
     $i$4 = $106;
    }
    $95 = ($88|0)==(41);
    if ($95) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $96 = HEAP32[$1>>2]|0;
    $97 = ($96|0)==(0|0);
    if (!($97)) {
     $98 = HEAP32[$0>>2]|0;
     $99 = (($98) + -1|0);
     HEAP32[$0>>2] = $99;
    }
    if (!($39)) {
     $101 = (___errno_location()|0);
     HEAP32[$101>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $100 = ($i$4|0)==(0);
    $brmerge108 = $100 | $97;
    if ($brmerge108) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    } else {
     $$in = $i$4;
    }
    while(1) {
     $102 = (($$in) + -1)|0;
     $103 = HEAP32[$0>>2]|0;
     $104 = (($103) + -1|0);
     HEAP32[$0>>2] = $104;
     $105 = ($102|0)==(0);
     if ($105) {
      $$0 = nan;
      break;
     } else {
      $$in = $102;
     }
    }
    STACKTOP = sp;return (+$$0);
   } else {
    $107 = HEAP32[$1>>2]|0;
    $108 = ($107|0)==(0|0);
    if (!($108)) {
     $109 = HEAP32[$0>>2]|0;
     $110 = (($109) + -1|0);
     HEAP32[$0>>2] = $110;
    }
    $111 = (___errno_location()|0);
    HEAP32[$111>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond9$not = $notrhs | $notlhs;
  $brmerge = $or$cond9$not | $42;
  if (!($brmerge)) {
   $i$1 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$1) + -1)|0;
    $$old8 = ($47>>>0)>(3);
    if ($$old8) {
     $i$1 = $47;
    } else {
     break;
    }
   }
  }
 }
 $48 = (+($sign$0|0));
 $49 = $48 * inf;
 $50 = $49;
 $$0 = $50;
 STACKTOP = sp;return (+$$0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $11;
  STACKTOP = sp;return;
 } else {
  $13 = (($f) + 100|0);
  HEAP32[$13>>2] = $2;
  STACKTOP = sp;return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    STACKTOP = sp;return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +0;
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 STACKTOP = sp;return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 STACKTOP = sp;return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 1023]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 1023]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $8 = $$pre;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $8 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $8;
 $9 = $6;
 $10 = (($7) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 1023]($f,$s,$l)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 1023]($f,$s,$i$0)|0);
   $26 = ($25>>>0)<($i$0>>>0);
   if ($26) {
    $$0 = $i$0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $27 = (($s) + ($i$0)|0);
    $28 = (($l) - ($i$0))|0;
    $$pre5 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre5;$i$1 = $i$0;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 1023]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=21616+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _strtold_l($s,$p,$loc) {
 $s = $s|0;
 $p = $p|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i$i = sp;
 dest=$f$i$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i$i,0);
 $4 = (+___floatscan($f$i$i,2,1));
 $5 = (($f$i$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _strtoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i) + 8|0);
  HEAP32[$3>>2] = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i) + 8|0);
  HEAP32[$5>>2] = $4;
 }
 $6 = (($f$i) + 76|0);
 HEAP32[$6>>2] = -1;
 ___shlim($f$i,0);
 $7 = (___intscan($f$i,$base,1,-1,-1)|0);
 $8 = tempRet0;
 $9 = ($p|0)==(0|0);
 if ($9) {
  tempRet0 = $8;
  STACKTOP = sp;return ($7|0);
 }
 $10 = (($f$i) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($f$i) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) + ($11))|0;
 $18 = (($17) - ($16))|0;
 $19 = (($s) + ($18)|0);
 HEAP32[$p>>2] = $19;
 tempRet0 = $8;
 STACKTOP = sp;return ($7|0);
}
function _strtoll($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i) + 8|0);
  HEAP32[$3>>2] = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i) + 8|0);
  HEAP32[$5>>2] = $4;
 }
 $6 = (($f$i) + 76|0);
 HEAP32[$6>>2] = -1;
 ___shlim($f$i,0);
 $7 = (___intscan($f$i,$base,1,0,-2147483648)|0);
 $8 = tempRet0;
 $9 = ($p|0)==(0|0);
 if ($9) {
  tempRet0 = $8;
  STACKTOP = sp;return ($7|0);
 }
 $10 = (($f$i) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($f$i) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) + ($11))|0;
 $18 = (($17) - ($16))|0;
 $19 = (($s) + ($18)|0);
 HEAP32[$p>>2] = $19;
 tempRet0 = $8;
 STACKTOP = sp;return ($7|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa36 = 0, $$012 = 0, $$1$lcssa = 0, $$15 = 0, $$22 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond11 = 0, $s$0$lcssa = 0, $s$0$lcssa35 = 0, $s$013 = 0, $s$13 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond11 = $3 & $4;
 L1: do {
  if ($or$cond11) {
   $5 = $c&255;
   $$012 = $n;$s$013 = $src;
   while(1) {
    $6 = HEAP8[$s$013>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa36 = $$012;$s$0$lcssa35 = $s$013;
     label = 6;
     break L1;
    }
    $8 = (($s$013) + 1|0);
    $9 = (($$012) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $12 & $13;
    if ($or$cond) {
     $$012 = $9;$s$013 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa36 = $$0$lcssa;$s$0$lcssa35 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa35>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa36;$s$2 = $s$0$lcssa35;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa36>>>0)>(3);
    L11: do {
     if ($18) {
      $$15 = $$0$lcssa36;$w$06 = $s$0$lcssa35;
      while(1) {
       $19 = HEAP32[$w$06>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$15;$w$0$lcssa = $w$06;
        break L11;
       }
       $26 = (($w$06) + 4|0);
       $27 = (($$15) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$15 = $27;$w$06 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa36;$w$0$lcssa = $s$0$lcssa35;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$22 = $$1$lcssa;$s$13 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$13>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$22;$s$2 = $s$13;
       break L8;
      }
      $32 = (($s$13) + 1|0);
      $33 = (($$22) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$22 = $33;$s$13 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 STACKTOP = sp;return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$03 = 0, $r$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$02 = $n;$l$03 = $vl;$r$04 = $vr;
   while(1) {
    $1 = HEAP8[$l$03>>0]|0;
    $2 = HEAP8[$r$04>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     break;
    }
    $4 = (($$02) + -1)|0;
    $5 = (($l$03) + 1|0);
    $6 = (($r$04) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$02 = $4;$l$03 = $5;$r$04 = $6;
    }
   }
   $8 = $1&255;
   $9 = $2&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($11|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $2 | $3;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = (($$014) + 1|0);
   $5 = (($$05) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $8 | $9;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 STACKTOP = sp;return ($12|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$02 = 0, $$07 = 0, $$07$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $l$05 = 0, $or$cond = 0, $or$cond3 = 0, $r$0$lcssa = 0, $r$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$02 = 0;
  STACKTOP = sp;return ($$02|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $13 = 0;$r$0$lcssa = $_r;
  } else {
   $$07$in = $n;$7 = $1;$l$05 = $_l;$r$06 = $_r;
   while(1) {
    $$07 = (($$07$in) + -1)|0;
    $3 = HEAP8[$r$06>>0]|0;
    $4 = ($3<<24>>24)!=(0);
    $5 = ($$07|0)!=(0);
    $or$cond = $4 & $5;
    $6 = ($7<<24>>24)==($3<<24>>24);
    $or$cond3 = $or$cond & $6;
    if (!($or$cond3)) {
     $13 = $7;$r$0$lcssa = $r$06;
     break L4;
    }
    $8 = (($l$05) + 1|0);
    $9 = (($r$06) + 1|0);
    $10 = HEAP8[$8>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $13 = 0;$r$0$lcssa = $9;
     break;
    } else {
     $$07$in = $$07;$7 = $10;$l$05 = $8;$r$06 = $9;
    }
   }
  }
 } while(0);
 $12 = $13&255;
 $14 = HEAP8[$r$0$lcssa>>0]|0;
 $15 = $14&255;
 $16 = (($12) - ($15))|0;
 $$02 = $16;
 STACKTOP = sp;return ($$02|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0, $cond = 0, $newp$0 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0;
 var $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((20208 + 16|0))>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[((20680 + 8|0))>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $30 = HEAP32[((20208 + 24|0))>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[((20208 + 12|0))>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[((20208 + 24|0))>>2] = $36;
  HEAP32[((20208 + 12|0))>>2] = $35;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $42 = HEAP32[((20208 + 20|0))>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[((20208 + 8|0))>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((20208 + 8|0))>>2] = $storemerge21;
  HEAP32[((20208 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = ((20208 + ($77<<2)|0) + 40|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = (($74) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[20208>>2]|0;
    $88 = $87 & $86;
    HEAP32[20208>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = (($76) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = (($76) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = (($74) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = (($R$0) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = (($R$0) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = (($101) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = (($98) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((20208 + ($124<<2)|0) + 304|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[((20208 + 4|0))>>2]|0;
      $131 = $130 & $129;
      HEAP32[((20208 + 4|0))>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[((20208 + 16|0))>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = (($96) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = (($96) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[((20208 + 16|0))>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = (($R$1) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = (($R$1) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = (($143) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[((20208 + 16|0))>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = (($R$1) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = (($149) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return 0|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi57Z2D = 0, $$pre$phi59Z2D = 0, $$pre$phiZ2D = 0, $$pre56 = 0, $$pre58 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$050 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$049 = 0, $cond = 0, $cond46 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((20208 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((20208 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((20208 + 8|0))>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $105 = (($p) + ($$sum20)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((20208 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[20208>>2]|0;
     $32 = $31 & $30;
     HEAP32[20208>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre58 = (($20) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi59Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi59Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((20208 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((20208 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((20208 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((20208 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((20208 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = (($R$1) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = (($87) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $92 = (($p) + ($$sum28)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[((20208 + 16|0))>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = (($R$1) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = (($93) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[((20208 + 16|0))>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[((20208 + 24|0))>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[((20208 + 12|0))>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[((20208 + 12|0))>>2] = $115;
   HEAP32[((20208 + 24|0))>>2] = $$0;
   $116 = $115 | 1;
   $117 = (($$0) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[((20208 + 20|0))>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    STACKTOP = sp;return;
   }
   HEAP32[((20208 + 20|0))>>2] = 0;
   HEAP32[((20208 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $120 = HEAP32[((20208 + 20|0))>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[((20208 + 8|0))>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[((20208 + 8|0))>>2] = $123;
   HEAP32[((20208 + 20|0))>>2] = $$0;
   $124 = $123 | 1;
   $125 = (($$0) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   STACKTOP = sp;return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum18 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum18)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum19)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = ((20208 + ($135<<2)|0) + 40|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = (($132) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[20208>>2]|0;
     $146 = $145 & $144;
     HEAP32[20208>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre56 = (($134) + 8|0);
     $$pre$phi57Z2D = $$pre56;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = (($134) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi57Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = (($132) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi57Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = (($R7$0) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = (($R7$0) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum17)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = (($159) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = (($156) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum14 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum14)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ((20208 + ($182<<2)|0) + 304|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[((20208 + 4|0))>>2]|0;
       $189 = $188 & $187;
       HEAP32[((20208 + 4|0))>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[((20208 + 16|0))>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = (($154) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = (($154) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[((20208 + 16|0))>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = (($R7$1) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum15 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum15)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = (($R7$1) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = (($201) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum16)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[((20208 + 16|0))>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = (($R7$1) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = (($207) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = (($$0) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[((20208 + 20|0))>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[((20208 + 8|0))>>2] = $128;
   STACKTOP = sp;return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = (($$0) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = ((20208 + ($224<<2)|0) + 40|0);
  $226 = HEAP32[20208>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[20208>>2] = $230;
   $$sum12$pre = (($224) + 2)|0;
   $$pre = ((20208 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $225;
  } else {
   $$sum13 = (($224) + 2)|0;
   $231 = ((20208 + ($$sum13<<2)|0) + 40|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[((20208 + 16|0))>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = (($F16$0) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = (($$0) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = (($$0) + 12|0);
  HEAP32[$237>>2] = $225;
  STACKTOP = sp;return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = ((20208 + ($I19$0<<2)|0) + 304|0);
 $264 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$264>>2] = $I19$0$c;
 $265 = (($$0) + 20|0);
 HEAP32[$265>>2] = 0;
 $266 = (($$0) + 16|0);
 HEAP32[$266>>2] = 0;
 $267 = HEAP32[((20208 + 4|0))>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[((20208 + 4|0))>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = (($$0) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = (($$0) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = (($$0) + 8|0);
  HEAP32[$274>>2] = $$0;
  STACKTOP = sp;return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($I19$0|0)==(31);
 if ($276) {
  $284 = 0;
 } else {
  $277 = $I19$0 >>> 1;
  $278 = (25 - ($277))|0;
  $284 = $278;
 }
 $279 = (($275) + 4|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = $280 & -8;
 $282 = ($281|0)==($$1|0);
 L194: do {
  if ($282) {
   $T$0$lcssa = $275;
  } else {
   $283 = $$1 << $284;
   $K20$050 = $283;$T$049 = $275;
   while(1) {
    $291 = $K20$050 >>> 31;
    $292 = ((($T$049) + ($291<<2)|0) + 16|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     break;
    }
    $285 = $K20$050 << 1;
    $286 = (($287) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L194;
    } else {
     $K20$050 = $285;$T$049 = $287;
    }
   }
   $294 = HEAP32[((20208 + 16|0))>>2]|0;
   $295 = ($292>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$292>>2] = $$0;
   $296 = (($$0) + 24|0);
   HEAP32[$296>>2] = $T$049;
   $297 = (($$0) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = (($$0) + 8|0);
   HEAP32[$298>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $299 = (($T$0$lcssa) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[((20208 + 16|0))>>2]|0;
 $302 = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = ($300>>>0)>=($301>>>0);
 $or$cond = $302 & $303;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $304 = (($300) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = (($$0) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = (($$0) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = (($$0) + 24|0);
 HEAP32[$307>>2] = 0;
 STACKTOP = sp;return;
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $c$0 = 0, $c$1$be = 0;
 var $c$116 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$29 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$017 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $10 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $10 = $8;
 }
 $9 = ($10|0)==(45);
 if ((($10|0) == 43) | (($10|0) == 45)) {
  $11 = HEAP32[$0>>2]|0;
  $12 = $9&1;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = (($11) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$11>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $21 & $22;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $12;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $12;
   }
  } else {
   $c$0 = $20;$neg$0 = $12;
  }
 } else {
  $c$0 = $10;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $96 = -2147483648;$97 = 0;
   tempRet0 = $96;
   STACKTOP = sp;return ($97|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $96 = -2147483648;$97 = 0;
  tempRet0 = $96;
  STACKTOP = sp;return ($97|0);
 } else {
  $c$116 = $c$0;$x$017 = 0;
 }
 while(1) {
  $33 = ($x$017*10)|0;
  $34 = (($c$116) + -48)|0;
  $35 = (($34) + ($33))|0;
  $36 = HEAP32[$0>>2]|0;
  $37 = HEAP32[$2>>2]|0;
  $38 = ($36>>>0)<($37>>>0);
  if ($38) {
   $39 = (($36) + 1|0);
   HEAP32[$0>>2] = $39;
   $40 = HEAP8[$36>>0]|0;
   $41 = $40&255;
   $c$1$be = $41;
  } else {
   $42 = (___shgetc($f)|0);
   $c$1$be = $42;
  }
  $43 = (($c$1$be) + -48)|0;
  $44 = ($43>>>0)<(10);
  $45 = ($35|0)<(214748364);
  $or$cond5 = $44 & $45;
  if ($or$cond5) {
   $c$116 = $c$1$be;$x$017 = $35;
  } else {
   break;
  }
 }
 $46 = ($35|0)<(0);
 $47 = $46 << 31 >> 31;
 $48 = (($c$1$be) + -48)|0;
 $49 = ($48>>>0)<(10);
 if ($49) {
  $52 = $35;$53 = $47;$c$29 = $c$1$be;
  while(1) {
   $54 = (___muldi3(($52|0),($53|0),10,0)|0);
   $55 = tempRet0;
   $56 = ($c$29|0)<(0);
   $57 = $56 << 31 >> 31;
   $58 = (_i64Add(($c$29|0),($57|0),-48,-1)|0);
   $59 = tempRet0;
   $60 = (_i64Add(($58|0),($59|0),($54|0),($55|0))|0);
   $61 = tempRet0;
   $62 = HEAP32[$0>>2]|0;
   $63 = HEAP32[$2>>2]|0;
   $64 = ($62>>>0)<($63>>>0);
   if ($64) {
    $65 = (($62) + 1|0);
    HEAP32[$0>>2] = $65;
    $66 = HEAP8[$62>>0]|0;
    $67 = $66&255;
    $c$2$be = $67;
   } else {
    $68 = (___shgetc($f)|0);
    $c$2$be = $68;
   }
   $69 = (($c$2$be) + -48)|0;
   $70 = ($69>>>0)<(10);
   $71 = ($61|0)<(21474836);
   $72 = ($60>>>0)<(2061584302);
   $73 = ($61|0)==(21474836);
   $74 = $73 & $72;
   $75 = $71 | $74;
   $or$cond7 = $70 & $75;
   if ($or$cond7) {
    $52 = $60;$53 = $61;$c$29 = $c$2$be;
   } else {
    $90 = $60;$91 = $61;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $90 = $35;$91 = $47;$c$2$lcssa = $c$1$be;
 }
 $50 = (($c$2$lcssa) + -48)|0;
 $51 = ($50>>>0)<(10);
 if ($51) {
  while(1) {
   $76 = HEAP32[$0>>2]|0;
   $77 = HEAP32[$2>>2]|0;
   $78 = ($76>>>0)<($77>>>0);
   if ($78) {
    $79 = (($76) + 1|0);
    HEAP32[$0>>2] = $79;
    $80 = HEAP8[$76>>0]|0;
    $81 = $80&255;
    $c$3$be = $81;
   } else {
    $82 = (___shgetc($f)|0);
    $c$3$be = $82;
   }
   $83 = (($c$3$be) + -48)|0;
   $84 = ($83>>>0)<(10);
   if (!($84)) {
    break;
   }
  }
 }
 $85 = HEAP32[$2>>2]|0;
 $86 = ($85|0)==(0|0);
 if (!($86)) {
  $87 = HEAP32[$0>>2]|0;
  $88 = (($87) + -1|0);
  HEAP32[$0>>2] = $88;
 }
 $89 = ($neg$0|0)!=(0);
 $92 = (_i64Subtract(0,0,($90|0),($91|0))|0);
 $93 = tempRet0;
 $94 = $89 ? $92 : $90;
 $95 = $89 ? $93 : $91;
 $96 = $95;$97 = $94;
 tempRet0 = $96;
 STACKTOP = sp;return ($97|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i102$i = 0, $$0$lcssa$i109$i = 0, $$0$lcssa$i133$i = 0, $$0$lcssa$i148$i = 0, $$0$lcssa$i40 = 0, $$0$lcssa$i44$i = 0, $$0$lcssa$i45 = 0, $$0$lcssa$i47 = 0, $$0$lcssa$i51$i = 0, $$0$lcssa$i53$i = 0, $$0$lcssa$i55 = 0, $$0$lcssa$i61$i = 0, $$0$lcssa$i62 = 0;
 var $$0$lcssa$i68$i = 0, $$0$lcssa$i69 = 0, $$0$lcssa$i74$i = 0, $$0$lcssa$i79 = 0, $$0$lcssa$i81$i = 0, $$0$lcssa$i89$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i100$i = 0, $$01$i107$i = 0, $$01$i131$i = 0, $$01$i146$i = 0, $$01$i38 = 0, $$01$i42$i = 0, $$01$i49$i = 0, $$01$i53 = 0, $$01$i59$i = 0, $$01$i60 = 0, $$01$i66$i = 0, $$01$i67 = 0;
 var $$01$i72$i = 0, $$01$i77 = 0, $$01$i79$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i90$i = 0, $$010$i = 0.0, $$012$i = 0, $$016$i = 0, $$03$i42 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i84$i = 0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i117$i = 0, $$117$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i115$i = 0;
 var $$12$i124$i = 0, $$12$i139$i = 0, $$12$i92$i = 0, $$15 = 0, $$19 = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$20 = 0, $$213$$26$i = 0, $$213$$28$i = 0, $$213$i = 0, $$23$i = 0, $$23$us$i = 0, $$24$i = 0, $$25$i = 0.0, $$26$i = 0, $$28$i = 0, $$3$i = 0.0, $$314$i = 0;
 var $$36$i = 0, $$4$i = 0.0, $$415$lcssa$i = 0, $$415171$i = 0, $$5189$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us307$i = 0, $$a$3$us308$i = 0, $$a$3309$i = 0, $$a$3310$i = 0, $$fl$4 = 0, $$lcssa292$i = 0, $$mask$i = 0, $$mask$i32 = 0, $$mask1$i = 0, $$mask1$i31 = 0, $$neg156$i = 0, $$neg157$i = 0, $$not$i = 0;
 var $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr151$i = 0, $$pre = 0, $$pre$i = 0, $$pre260 = 0, $$pre261 = 0, $$pre306$i = 0, $$sum$i = 0, $$sum18$i = 0, $$sum19$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0;
 var $1019 = 0, $102 = 0, $1020 = 0.0, $1021 = 0.0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $1029$phi = 0, $103 = 0, $1030 = 0, $1030$phi = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0.0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0.0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0.0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0.0, $562 = 0.0, $563 = 0.0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0.0, $7 = 0, $70 = 0, $700 = 0.0, $701 = 0, $702 = 0.0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1258$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3244$i = 0, $a$3244$us$i = 0, $a$5$lcssa$i = 0, $a$5218$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0;
 var $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0;
 var $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0;
 var $buf = 0, $buf$i = 0, $carry$0250$i = 0, $carry3$0238$i = 0, $carry3$0238$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0$i = 0, $d$0249$i = 0, $d$0251$i = 0, $d$1237$i = 0, $d$1237$us$i = 0, $d$2$lcssa$i = 0, $d$2217$i = 0, $d$3$i = 0, $d$4180$i = 0, $d$5170$i = 0, $d$6188$i = 0, $e$0233$i = 0, $e$1$i = 0;
 var $e$2213$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1195$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0113 = 0, $fl$0118 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt81$lcssa = 0, $fmt81102 = 0;
 var $fmt82 = 0, $fmt83 = 0, $fmt84 = 0, $fmt86 = 0, $fmt87 = 0, $i$0$lcssa = 0, $i$0$lcssa267 = 0, $i$0166 = 0, $i$0232$i = 0, $i$03$i = 0, $i$03$i24 = 0, $i$1$lcssa$i = 0, $i$1174 = 0, $i$1225$i = 0, $i$2100 = 0, $i$2212$i = 0, $i$3204$i = 0, $i$397 = 0, $isdigit = 0, $isdigit$i = 0;
 var $isdigit$i26 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigit4 = 0, $isdigit6 = 0, $isdigittmp = 0, $isdigittmp$i = 0, $isdigittmp$i25 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp3 = 0, $isdigittmp5 = 0, $j$0$i = 0, $j$0224$i = 0, $j$0226$i = 0, $j$1205$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0;
 var $l$1165 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i105$i = 0, $or$cond$i40$i = 0, $or$cond$i47$i = 0, $or$cond$i51 = 0, $or$cond$i57$i = 0, $or$cond$i58 = 0, $or$cond$i64$i = 0;
 var $or$cond$i65 = 0, $or$cond$i73 = 0, $or$cond$i75 = 0, $or$cond$i77$i = 0, $or$cond$i98$i = 0, $or$cond13 = 0, $or$cond17 = 0, $or$cond271 = 0, $or$cond32$i = 0, $or$cond34$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond7169$i = 0, $or$cond9 = 0, $or$cond9$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4266 = 0;
 var $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1163$i = 0, $round$0162$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0;
 var $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s1$0$i = 0, $s7$0177$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0165$i = 0, $s9$0$i = 0, $s9$1184$i = 0, $s9$2$i = 0, $sext = 0, $sext93 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge2111 = 0, $storemerge2117 = 0;
 var $storemerge7 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$22$i = 0, $w$35$i = 0, $wc = 0, $ws$0167 = 0, $ws$1175 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i114$i = 0, $y$03$i123$i = 0, $y$03$i138$i = 0, $y$03$i91$i = 0, $z$0$i = 0, $z$0$lcssa = 0;
 var $z$0103 = 0, $z$1$lcssa$i = 0, $z$1257$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3243$i = 0, $z$3243$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 560|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 840|0;
 $pad$i = sp + 584|0;
 $buf = sp + 520|0;
 $wc = sp;
 $mb = sp + 852|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = $wc;
 $7 = (($ebuf0$i) + 12|0);
 $8 = (($ebuf0$i) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = (($big$i) + 288|0);
 $14 = (($buf$i) + 9|0);
 $15 = $14;
 $16 = (($buf$i) + 8|0);
 $1029 = 0;$1030 = 0;$cnt$0 = 0;$fmt83 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$fmt83>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   label = 352;
   break;
  } else {
   $1031 = $22;$fmt82 = $fmt83;
  }
  while(1) {
   if ((($1031<<24>>24) == 0)) {
    $fmt81$lcssa = $fmt82;$z$0$lcssa = $fmt82;
    break;
   } else if ((($1031<<24>>24) == 37)) {
    $fmt81102 = $fmt82;$z$0103 = $fmt82;
    label = 9;
    break;
   }
   $24 = (($fmt82) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1031 = $$pre;$fmt82 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = (($fmt81102) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt81$lcssa = $fmt81102;$z$0$lcssa = $z$0103;
      break L12;
     }
     $28 = (($z$0103) + 1|0);
     $29 = (($fmt81102) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt81102 = $29;$z$0103 = $28;
      label = 9;
     } else {
      $fmt81$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt83;
  $34 = (($32) - ($33))|0;
  if ($1) {
   (___fwritex($fmt83,$34,$f)|0);
  }
  $35 = ($z$0$lcssa|0)==($fmt83|0);
  if (!($35)) {
   $l10n$0$phi = $l10n$0;$1030$phi = $1030;$1029$phi = $1029;$cnt$0 = $cnt$1;$fmt83 = $fmt81$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;$1030 = $1030$phi;$1029 = $1029$phi;
   continue;
  }
  $36 = (($fmt81$lcssa) + 1|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $isdigittmp = (($38) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $39 = (($fmt81$lcssa) + 2|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = ($40<<24>>24)==(36);
   if ($41) {
    $42 = (($fmt81$lcssa) + 3|0);
    $$pre260 = HEAP8[$42>>0]|0;
    $44 = $$pre260;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $42;
   } else {
    $44 = $37;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $36;
   }
  } else {
   $44 = $37;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $36;
  }
  $43 = $44 << 24 >> 24;
  $45 = $43 & -32;
  $46 = ($45|0)==(32);
  L25: do {
   if ($46) {
    $$pr = $44;$48 = $43;$fl$0118 = 0;$storemerge2117 = $storemerge;
    while(1) {
     $47 = (($48) + -32)|0;
     $49 = 1 << $47;
     $50 = $49 & 75913;
     $51 = ($50|0)==(0);
     if ($51) {
      $59 = $$pr;$fl$0113 = $fl$0118;$storemerge2111 = $storemerge2117;
      break L25;
     }
     $52 = $49 | $fl$0118;
     $53 = (($storemerge2117) + 1|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = $54 << 24 >> 24;
     $56 = $55 & -32;
     $57 = ($56|0)==(32);
     if ($57) {
      $$pr = $54;$48 = $55;$fl$0118 = $52;$storemerge2117 = $53;
     } else {
      $59 = $54;$fl$0113 = $52;$storemerge2111 = $53;
      break;
     }
    }
   } else {
    $59 = $44;$fl$0113 = 0;$storemerge2111 = $storemerge;
   }
  } while(0);
  $58 = ($59<<24>>24)==(42);
  do {
   if ($58) {
    $60 = (($storemerge2111) + 1|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61 << 24 >> 24;
    $isdigittmp5 = (($62) + -48)|0;
    $isdigit6 = ($isdigittmp5>>>0)<(10);
    if ($isdigit6) {
     $63 = (($storemerge2111) + 2|0);
     $64 = HEAP8[$63>>0]|0;
     $65 = ($64<<24>>24)==(36);
     if ($65) {
      $66 = (($nl_type) + ($isdigittmp5<<2)|0);
      HEAP32[$66>>2] = 10;
      $67 = HEAP8[$60>>0]|0;
      $68 = $67 << 24 >> 24;
      $69 = (($68) + -48)|0;
      $70 = (($nl_arg) + ($69<<3)|0);
      $71 = $70;
      $72 = $71;
      $73 = HEAP32[$72>>2]|0;
      $74 = (($71) + 4)|0;
      $75 = $74;
      $76 = HEAP32[$75>>2]|0;
      $77 = (($storemerge2111) + 3|0);
      $l10n$2 = 1;$storemerge7 = $77;$w$0 = $73;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $78 = ($l10n$1|0)==(0);
     if (!($78)) {
      $$0 = -1;
      label = 370;
      break L1;
     }
     if (!($1)) {
      $fl$1 = $fl$0113;$fmt84 = $60;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $79 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge7 = $60;$w$0 = $79;
    }
    $80 = ($w$0|0)<(0);
    if ($80) {
     $81 = $fl$0113 | 8192;
     $82 = (0 - ($w$0))|0;
     $fl$1 = $81;$fmt84 = $storemerge7;$l10n$3 = $l10n$2;$w$1 = $82;
    } else {
     $fl$1 = $fl$0113;$fmt84 = $storemerge7;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $83 = $59 << 24 >> 24;
    $isdigittmp1$i = (($83) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $86 = $83;$89 = $storemerge2111;$i$03$i = 0;
     while(1) {
      $84 = ($i$03$i*10)|0;
      $85 = (($86) + -48)|0;
      $87 = (($85) + ($84))|0;
      $88 = (($89) + 1|0);
      $90 = HEAP8[$88>>0]|0;
      $91 = $90 << 24 >> 24;
      $isdigittmp$i = (($91) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $86 = $91;$89 = $88;$i$03$i = $87;
      } else {
       break;
      }
     }
     $92 = ($87|0)<(0);
     if ($92) {
      $$0 = -1;
      label = 370;
      break L1;
     } else {
      $fl$1 = $fl$0113;$fmt84 = $88;$l10n$3 = $l10n$1;$w$1 = $87;
     }
    } else {
     $fl$1 = $fl$0113;$fmt84 = $storemerge2111;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $93 = HEAP8[$fmt84>>0]|0;
  $94 = ($93<<24>>24)==(46);
  L46: do {
   if ($94) {
    $95 = (($fmt84) + 1|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = ($96<<24>>24)==(42);
    if (!($97)) {
     $118 = $96 << 24 >> 24;
     $isdigittmp1$i22 = (($118) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $121 = $118;$124 = $95;$i$03$i24 = 0;
     } else {
      $fmt87 = $95;$p$0 = 0;
      break;
     }
     while(1) {
      $119 = ($i$03$i24*10)|0;
      $120 = (($121) + -48)|0;
      $122 = (($120) + ($119))|0;
      $123 = (($124) + 1|0);
      $125 = HEAP8[$123>>0]|0;
      $126 = $125 << 24 >> 24;
      $isdigittmp$i25 = (($126) + -48)|0;
      $isdigit$i26 = ($isdigittmp$i25>>>0)<(10);
      if ($isdigit$i26) {
       $121 = $126;$124 = $123;$i$03$i24 = $122;
      } else {
       $fmt87 = $123;$p$0 = $122;
       break L46;
      }
     }
    }
    $98 = (($fmt84) + 2|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99 << 24 >> 24;
    $isdigittmp3 = (($100) + -48)|0;
    $isdigit4 = ($isdigittmp3>>>0)<(10);
    if ($isdigit4) {
     $101 = (($fmt84) + 3|0);
     $102 = HEAP8[$101>>0]|0;
     $103 = ($102<<24>>24)==(36);
     if ($103) {
      $104 = (($nl_type) + ($isdigittmp3<<2)|0);
      HEAP32[$104>>2] = 10;
      $105 = HEAP8[$98>>0]|0;
      $106 = $105 << 24 >> 24;
      $107 = (($106) + -48)|0;
      $108 = (($nl_arg) + ($107<<3)|0);
      $109 = $108;
      $110 = $109;
      $111 = HEAP32[$110>>2]|0;
      $112 = (($109) + 4)|0;
      $113 = $112;
      $114 = HEAP32[$113>>2]|0;
      $115 = (($fmt84) + 4|0);
      $fmt87 = $115;$p$0 = $111;
      break;
     }
    }
    $116 = ($l10n$3|0)==(0);
    if (!($116)) {
     $$0 = -1;
     label = 370;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $117 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt87 = $98;$p$0 = $117;
    } else {
     $fmt87 = $98;$p$0 = 0;
    }
   } else {
    $fmt87 = $fmt84;$p$0 = -1;
   }
  } while(0);
  $fmt86 = $fmt87;$st$0 = 0;
  while(1) {
   $127 = HEAP8[$fmt86>>0]|0;
   $128 = $127 << 24 >> 24;
   $129 = (($128) + -65)|0;
   $130 = ($129>>>0)>(57);
   if ($130) {
    $$0 = -1;
    label = 370;
    break L1;
   }
   $131 = (($fmt86) + 1|0);
   $132 = ((21048 + (($st$0*58)|0)|0) + ($129)|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = (($134) + -1)|0;
   $136 = ($135>>>0)<(8);
   if ($136) {
    $fmt86 = $131;$st$0 = $134;
   } else {
    break;
   }
  }
  $137 = ($133<<24>>24)==(0);
  if ($137) {
   $$0 = -1;
   label = 370;
   break;
  }
  $138 = ($133<<24>>24)==(19);
  $139 = ($argpos$0|0)>(-1);
  L65: do {
   if ($138) {
    if ($139) {
     $$0 = -1;
     label = 370;
     break L1;
    } else {
     $1032 = $1029;$1033 = $1030;
     label = 63;
    }
   } else {
    if ($139) {
     $140 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$140>>2] = $134;
     $141 = (($nl_arg) + ($argpos$0<<3)|0);
     $142 = $141;
     $143 = $142;
     $144 = HEAP32[$143>>2]|0;
     $145 = (($142) + 4)|0;
     $146 = $145;
     $147 = HEAP32[$146>>2]|0;
     $1032 = $144;$1033 = $147;
     label = 63;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 370;
     break L1;
    }
    $148 = ($133&255)>(20);
    if ($148) {
     $182 = $127;$191 = $1029;$218 = $1030;
    } else {
     do {
      switch ($134|0) {
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $167 = HEAP32[$arglist_current20>>2]|0;
       $arglist_next21 = (($arglist_current20) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i31 = $167 & 65535;
       $1034 = 0;$1035 = $$mask1$i31;
       label = 64;
       break L65;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $168 = HEAP32[$arglist_current23>>2]|0;
       $arglist_next24 = (($arglist_current23) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $169 = $168&255;
       $170 = $169 << 24 >> 24;
       $171 = ($170|0)<(0);
       $172 = $171 << 31 >> 31;
       $sext = $168 << 24;
       $173 = $sext >> 24;
       $1034 = $172;$1035 = $173;
       label = 64;
       break L65;
       break;
      }
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $155 = $arglist_current14;
       $156 = $155;
       $157 = HEAP32[$156>>2]|0;
       $158 = (($155) + 4)|0;
       $159 = $158;
       $160 = HEAP32[$159>>2]|0;
       $arglist_next15 = (($arglist_current14) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $1034 = $160;$1035 = $157;
       label = 64;
       break L65;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$175 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next30 = (($arglist_current29) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $175;$176 = HEAP32[tempDoublePtr>>2]|0;
       $177 = HEAP32[tempDoublePtr+4>>2]|0;
       $1034 = $177;$1035 = $176;
       label = 64;
       break L65;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$178 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next33 = (($arglist_current32) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $178;$179 = HEAP32[tempDoublePtr>>2]|0;
       $180 = HEAP32[tempDoublePtr+4>>2]|0;
       $1032 = $179;$1033 = $180;
       label = 63;
       break L65;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $149 = HEAP32[$arglist_current5>>2]|0;
       $arglist_next6 = (($arglist_current5) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $150 = $149;
       $1034 = $1030;$1035 = $150;
       label = 64;
       break L65;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $154 = HEAP32[$arglist_current11>>2]|0;
       $arglist_next12 = (($arglist_current11) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $1034 = 0;$1035 = $154;
       label = 64;
       break L65;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $151 = HEAP32[$arglist_current8>>2]|0;
       $arglist_next9 = (($arglist_current8) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $152 = ($151|0)<(0);
       $153 = $152 << 31 >> 31;
       $1034 = $153;$1035 = $151;
       label = 64;
       break L65;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $161 = HEAP32[$arglist_current17>>2]|0;
       $arglist_next18 = (($arglist_current17) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $162 = $161&65535;
       $163 = $162 << 16 >> 16;
       $164 = ($163|0)<(0);
       $165 = $164 << 31 >> 31;
       $sext93 = $161 << 16;
       $166 = $sext93 >> 16;
       $1034 = $165;$1035 = $166;
       label = 64;
       break L65;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $174 = HEAP32[$arglist_current26>>2]|0;
       $arglist_next27 = (($arglist_current26) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i32 = $174 & 255;
       $1034 = 0;$1035 = $$mask$i32;
       label = 64;
       break L65;
       break;
      }
      default: {
       $1034 = $1030;$1035 = $1029;
       label = 64;
       break L65;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 63) {
   label = 0;
   if ($1) {
    $1034 = $1033;$1035 = $1032;
    label = 64;
   } else {
    $1029 = $1032;$1030 = $1033;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 64) {
   label = 0;
   $$pre261 = HEAP8[$fmt86>>0]|0;
   $182 = $$pre261;$191 = $1035;$218 = $1034;
  }
  $181 = $182 << 24 >> 24;
  $183 = ($st$0|0)!=(0);
  $184 = $181 & 15;
  $185 = ($184|0)==(3);
  $or$cond9 = $183 & $185;
  $186 = $181 & -33;
  $t$0 = $or$cond9 ? $186 : $181;
  $187 = $fl$1 & 8192;
  $188 = ($187|0)==(0);
  $189 = $fl$1 & -65537;
  $fl$1$ = $188 ? $fl$1 : $189;
  L89: do {
   switch ($t$0|0) {
   case 112:  {
    $212 = ($p$0>>>0)>(8);
    $213 = $212 ? $p$0 : 8;
    $214 = $fl$1$ | 8;
    $fl$3 = $214;$p$1 = $213;$t$1 = 120;
    label = 75;
    break;
   }
   case 115:  {
    $308 = $191;
    $309 = ($191|0)==(0);
    $$15 = $309 ? 21528 : $308;
    $a$1 = $$15;
    label = 96;
    break;
   }
   case 105: case 100:  {
    $255 = ($218|0)<(0);
    if ($255) {
     $256 = (_i64Subtract(0,0,($191|0),($218|0))|0);
     $257 = tempRet0;
     $263 = $257;$265 = $256;$pl$0 = 1;$prefix$0 = 21512;
     label = 86;
     break L89;
    }
    $258 = $fl$1$ & 2048;
    $259 = ($258|0)==(0);
    if ($259) {
     $260 = $fl$1$ & 1;
     $261 = ($260|0)==(0);
     $$ = $261 ? 21512 : ((21512 + 2|0));
     $263 = $218;$265 = $191;$pl$0 = $260;$prefix$0 = $$;
     label = 86;
    } else {
     $263 = $218;$265 = $191;$pl$0 = 1;$prefix$0 = ((21512 + 1|0));
     label = 86;
    }
    break;
   }
   case 99:  {
    $304 = $191&255;
    HEAP8[$4>>0] = $304;
    $1036 = $191;$1037 = $218;$a$2 = $4;$fl$6 = $189;$p$5 = 1;$pl$2 = 0;$prefix$2 = 21512;$z$2 = $2;
    break;
   }
   case 117:  {
    $263 = $218;$265 = $191;$pl$0 = 0;$prefix$0 = 21512;
    label = 86;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 75;
    break;
   }
   case 110:  {
    switch ($st$0|0) {
    case 4:  {
     $202 = $cnt$1&255;
     $203 = $191;
     HEAP8[$203>>0] = $202;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $205 = ($cnt$1|0)<(0);
     $206 = $205 << 31 >> 31;
     $207 = $191;
     $208 = $207;
     $209 = $208;
     HEAP32[$209>>2] = $cnt$1;
     $210 = (($208) + 4)|0;
     $211 = $210;
     HEAP32[$211>>2] = $206;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $192 = $191;
     HEAP32[$192>>2] = $cnt$1;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $200 = $cnt$1&65535;
     $201 = $191;
     HEAP16[$201>>1] = $200;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 0:  {
     $190 = $191;
     HEAP32[$190>>2] = $cnt$1;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $193 = ($cnt$1|0)<(0);
     $194 = $193 << 31 >> 31;
     $195 = $191;
     $196 = $195;
     $197 = $196;
     HEAP32[$197>>2] = $cnt$1;
     $198 = (($196) + 4)|0;
     $199 = $198;
     HEAP32[$199>>2] = $194;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $204 = $191;
     HEAP32[$204>>2] = $cnt$1;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 109:  {
    $305 = (___errno_location()|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = (_strerror(($306|0))|0);
    $a$1 = $307;
    label = 96;
    break;
   }
   case 67:  {
    HEAP32[$wc>>2] = $191;
    HEAP32[$5>>2] = 0;
    $1038 = $wc;$1039 = $6;$p$4266 = -1;
    label = 101;
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    HEAP32[tempDoublePtr>>2] = $191;HEAP32[tempDoublePtr+4>>2] = $218;$355 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $356 = ($218|0)<(0);
    if ($356) {
     $357 = -$355;
     $$010$i = $357;$pl$0$i = 1;$prefix$0$i = 21536;
    } else {
     $358 = $fl$1$ & 2048;
     $359 = ($358|0)==(0);
     if ($359) {
      $360 = $fl$1$ & 1;
      $361 = ($360|0)==(0);
      $$$i = $361 ? ((21536 + 1|0)) : ((21536 + 6|0));
      $$010$i = $355;$pl$0$i = $360;$prefix$0$i = $$$i;
     } else {
      $$010$i = $355;$pl$0$i = 1;$prefix$0$i = ((21536 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$010$i;$362 = HEAP32[tempDoublePtr>>2]|0;
    $363 = HEAP32[tempDoublePtr+4>>2]|0;
    $364 = $363 & 2146435072;
    $365 = ($364>>>0)<(2146435072);
    $366 = (0)<(0);
    $367 = ($364|0)==(2146435072);
    $368 = $367 & $366;
    $369 = $365 | $368;
    if (!($369)) {
     $370 = $t$0 & 32;
     $371 = ($370|0)!=(0);
     $372 = $371 ? 21560 : 21568;
     $373 = ($$010$i != $$010$i) | (0.0 != 0.0);
     if ($373) {
      $374 = $371 ? 21576 : 21584;
      $pl$1$i = 0;$s1$0$i = $374;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $372;
     }
     $375 = (($pl$1$i) + 3)|0;
     $376 = $fl$1$ & 8192;
     $377 = ($376|0)==(0);
     $378 = ($w$1|0)>($375|0);
     $or$cond$i40$i = $377 & $378;
     if ($or$cond$i40$i) {
      $379 = (($w$1) - ($375))|0;
      $380 = ($379>>>0)>(256);
      $381 = $380 ? 256 : $379;
      _memset(($pad$i|0),32,($381|0))|0;
      $382 = ($379>>>0)>(255);
      if ($382) {
       $$01$i42$i = $379;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $383 = (($$01$i42$i) + -256)|0;
        $384 = ($383>>>0)>(255);
        if ($384) {
         $$01$i42$i = $383;
        } else {
         break;
        }
       }
       $385 = $379 & 255;
       $$0$lcssa$i44$i = $385;
      } else {
       $$0$lcssa$i44$i = $379;
      }
      (___fwritex($pad$i,$$0$lcssa$i44$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s1$0$i,3,$f)|0);
     $386 = $fl$1$ & 73728;
     $387 = ($386|0)==(8192);
     $or$cond$i47$i = $387 & $378;
     if ($or$cond$i47$i) {
      $388 = (($w$1) - ($375))|0;
      $389 = ($388>>>0)>(256);
      $390 = $389 ? 256 : $388;
      _memset(($pad$i|0),32,($390|0))|0;
      $391 = ($388>>>0)>(255);
      if ($391) {
       $$01$i49$i = $388;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $392 = (($$01$i49$i) + -256)|0;
        $393 = ($392>>>0)>(255);
        if ($393) {
         $$01$i49$i = $392;
        } else {
         break;
        }
       }
       $394 = $388 & 255;
       $$0$lcssa$i51$i = $394;
      } else {
       $$0$lcssa$i51$i = $388;
      }
      (___fwritex($pad$i,$$0$lcssa$i51$i,$f)|0);
     }
     $w$$i = $378 ? $w$1 : $375;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $395 = (+_frexpl($$010$i,$e2$i));
    $396 = $395 * 2.0;
    $397 = $396 != 0.0;
    if ($397) {
     $398 = HEAP32[$e2$i>>2]|0;
     $399 = (($398) + -1)|0;
     HEAP32[$e2$i>>2] = $399;
    }
    $400 = $t$0 | 32;
    $401 = ($400|0)==(97);
    if ($401) {
     $402 = $t$0 & 32;
     $403 = ($402|0)==(0);
     $404 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $403 ? $prefix$0$i : $404;
     $405 = $pl$0$i | 2;
     $406 = ($p$0>>>0)>(11);
     $407 = (12 - ($p$0))|0;
     $re$0$i = $406 ? 0 : $407;
     $408 = ($re$0$i|0)==(0);
     do {
      if ($408) {
       $$1$i = $396;
      } else {
       $re$1163$i = $re$0$i;$round$0162$i = 8.0;
       while(1) {
        $409 = (($re$1163$i) + -1)|0;
        $410 = $round$0162$i * 16.0;
        $411 = ($409|0)==(0);
        if ($411) {
         break;
        } else {
         $re$1163$i = $409;$round$0162$i = $410;
        }
       }
       $412 = HEAP8[$prefix$0$$i>>0]|0;
       $413 = ($412<<24>>24)==(45);
       if ($413) {
        $414 = -$396;
        $415 = $414 - $410;
        $416 = $410 + $415;
        $417 = -$416;
        $$1$i = $417;
        break;
       } else {
        $418 = $396 + $410;
        $419 = $418 - $410;
        $$1$i = $419;
        break;
       }
      }
     } while(0);
     $420 = HEAP32[$e2$i>>2]|0;
     $421 = ($420|0)<(0);
     $422 = (0 - ($420))|0;
     $423 = $421 ? $422 : $420;
     $424 = ($423|0)<(0);
     if ($424) {
      $425 = ($423|0)<(0);
      $426 = $425 << 31 >> 31;
      $$05$i$i = $7;$427 = $423;$428 = $426;
      while(1) {
       $429 = (___uremdi3(($427|0),($428|0),10,0)|0);
       $430 = tempRet0;
       $431 = $429 | 48;
       $432 = $431&255;
       $433 = (($$05$i$i) + -1|0);
       HEAP8[$433>>0] = $432;
       $434 = (___udivdi3(($427|0),($428|0),10,0)|0);
       $435 = tempRet0;
       $436 = ($428>>>0)>(9);
       $437 = ($427>>>0)>(4294967295);
       $438 = ($428|0)==(9);
       $439 = $438 & $437;
       $440 = $436 | $439;
       if ($440) {
        $$05$i$i = $433;$427 = $434;$428 = $435;
       } else {
        break;
       }
      }
      $$0$lcssa$i53$i = $433;$$01$lcssa$off0$i$i = $434;
     } else {
      $$0$lcssa$i53$i = $7;$$01$lcssa$off0$i$i = $423;
     }
     $441 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($441) {
      $$1$lcssa$i$i = $$0$lcssa$i53$i;
     } else {
      $$12$i$i = $$0$lcssa$i53$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $442 = (($y$03$i$i>>>0) % 10)&-1;
       $443 = $442 | 48;
       $444 = $443&255;
       $445 = (($$12$i$i) + -1|0);
       HEAP8[$445>>0] = $444;
       $446 = (($y$03$i$i>>>0) / 10)&-1;
       $447 = ($y$03$i$i>>>0)<(10);
       if ($447) {
        $$1$lcssa$i$i = $445;
        break;
       } else {
        $$12$i$i = $445;$y$03$i$i = $446;
       }
      }
     }
     $448 = ($$1$lcssa$i$i|0)==($7|0);
     if ($448) {
      HEAP8[$8>>0] = 48;
      $estr$0$i = $8;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $449 = HEAP32[$e2$i>>2]|0;
     $450 = $449 >> 31;
     $451 = $450 & 2;
     $452 = (($451) + 43)|0;
     $453 = $452&255;
     $454 = (($estr$0$i) + -1|0);
     HEAP8[$454>>0] = $453;
     $455 = (($t$0) + 15)|0;
     $456 = $455&255;
     $457 = (($estr$0$i) + -2|0);
     HEAP8[$457>>0] = $456;
     $notrhs$i = ($p$0|0)<(1);
     if ($notrhs$i) {
      $458 = $fl$1$ & 8;
      $459 = ($458|0)==(0);
      if ($459) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $460 = (~~(($$2$us$us$i)));
        $461 = (21592 + ($460)|0);
        $462 = HEAP8[$461>>0]|0;
        $463 = $462&255;
        $464 = $463 | $402;
        $465 = $464&255;
        $466 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $465;
        $467 = (+($460|0));
        $468 = $$2$us$us$i - $467;
        $469 = $468 * 16.0;
        $470 = $466;
        $471 = (($470) - ($0))|0;
        $472 = ($471|0)!=(1);
        $notlhs$us$us$i = $469 == 0.0;
        $or$cond$i73 = $472 | $notlhs$us$us$i;
        if ($or$cond$i73) {
         $s$1$us$us$i = $466;
        } else {
         $473 = (($s$0$us$us$i) + 2|0);
         HEAP8[$466>>0] = 46;
         $s$1$us$us$i = $473;
        }
        $474 = $469 != 0.0;
        if ($474) {
         $$2$us$us$i = $469;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $475 = (~~(($$2$us$i)));
        $476 = (21592 + ($475)|0);
        $477 = HEAP8[$476>>0]|0;
        $478 = $477&255;
        $479 = $478 | $402;
        $480 = $479&255;
        $481 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $480;
        $482 = (+($475|0));
        $483 = $$2$us$i - $482;
        $484 = $483 * 16.0;
        $485 = $481;
        $486 = (($485) - ($0))|0;
        $487 = ($486|0)==(1);
        if ($487) {
         $488 = (($s$0$us$i) + 2|0);
         HEAP8[$481>>0] = 46;
         $s$1$us$i = $488;
        } else {
         $s$1$us$i = $481;
        }
        $489 = $484 != 0.0;
        if ($489) {
         $$2$us$i = $484;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      $$2$i = $$1$i;$s$0$i = $buf$i;
      while(1) {
       $490 = (~~(($$2$i)));
       $491 = (21592 + ($490)|0);
       $492 = HEAP8[$491>>0]|0;
       $493 = $492&255;
       $494 = $493 | $402;
       $495 = $494&255;
       $496 = (($s$0$i) + 1|0);
       HEAP8[$s$0$i>>0] = $495;
       $497 = (+($490|0));
       $498 = $$2$i - $497;
       $499 = $498 * 16.0;
       $500 = $496;
       $501 = (($500) - ($0))|0;
       $502 = ($501|0)==(1);
       if ($502) {
        $503 = (($s$0$i) + 2|0);
        HEAP8[$496>>0] = 46;
        $s$1$i = $503;
       } else {
        $s$1$i = $496;
       }
       $504 = $499 != 0.0;
       if ($504) {
        $$2$i = $499;$s$0$i = $s$1$i;
       } else {
        $s$1$lcssa$i = $s$1$i;
        break;
       }
      }
     }
     $505 = ($p$0|0)!=(0);
     $$pre306$i = $s$1$lcssa$i;
     $506 = (($11) + ($$pre306$i))|0;
     $507 = ($506|0)<($p$0|0);
     $or$cond271 = $505 & $507;
     $508 = $457;
     if ($or$cond271) {
      $509 = (($12) + ($p$0))|0;
      $510 = (($509) - ($508))|0;
      $l$0$i = $510;
     } else {
      $511 = (($10) - ($508))|0;
      $512 = (($511) + ($$pre306$i))|0;
      $l$0$i = $512;
     }
     $513 = (($l$0$i) + ($405))|0;
     $514 = $fl$1$ & 73728;
     $515 = ($514|0)==(0);
     $516 = ($w$1|0)>($513|0);
     $or$cond$i57$i = $515 & $516;
     if ($or$cond$i57$i) {
      $517 = (($w$1) - ($513))|0;
      $518 = ($517>>>0)>(256);
      $519 = $518 ? 256 : $517;
      _memset(($pad$i|0),32,($519|0))|0;
      $520 = ($517>>>0)>(255);
      if ($520) {
       $$01$i59$i = $517;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $521 = (($$01$i59$i) + -256)|0;
        $522 = ($521>>>0)>(255);
        if ($522) {
         $$01$i59$i = $521;
        } else {
         break;
        }
       }
       $523 = $517 & 255;
       $$0$lcssa$i61$i = $523;
      } else {
       $$0$lcssa$i61$i = $517;
      }
      (___fwritex($pad$i,$$0$lcssa$i61$i,$f)|0);
     }
     (___fwritex($prefix$0$$i,$405,$f)|0);
     $524 = ($514|0)==(65536);
     $or$cond$i64$i = $524 & $516;
     if ($or$cond$i64$i) {
      $525 = (($w$1) - ($513))|0;
      $526 = ($525>>>0)>(256);
      $527 = $526 ? 256 : $525;
      _memset(($pad$i|0),48,($527|0))|0;
      $528 = ($525>>>0)>(255);
      if ($528) {
       $$01$i66$i = $525;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $529 = (($$01$i66$i) + -256)|0;
        $530 = ($529>>>0)>(255);
        if ($530) {
         $$01$i66$i = $529;
        } else {
         break;
        }
       }
       $531 = $525 & 255;
       $$0$lcssa$i68$i = $531;
      } else {
       $$0$lcssa$i68$i = $525;
      }
      (___fwritex($pad$i,$$0$lcssa$i68$i,$f)|0);
     }
     $532 = (($$pre306$i) - ($0))|0;
     (___fwritex($buf$i,$532,$f)|0);
     $533 = $457;
     $534 = (($9) - ($533))|0;
     $535 = (($l$0$i) - ($534))|0;
     $536 = (($535) - ($532))|0;
     $537 = ($536|0)>(0);
     if ($537) {
      $538 = ($536>>>0)>(256);
      $539 = $538 ? 256 : $536;
      _memset(($pad$i|0),48,($539|0))|0;
      $540 = ($536>>>0)>(255);
      if ($540) {
       $$01$i72$i = $536;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $541 = (($$01$i72$i) + -256)|0;
        $542 = ($541>>>0)>(255);
        if ($542) {
         $$01$i72$i = $541;
        } else {
         break;
        }
       }
       $543 = $536 & 255;
       $$0$lcssa$i74$i = $543;
      } else {
       $$0$lcssa$i74$i = $536;
      }
      (___fwritex($pad$i,$$0$lcssa$i74$i,$f)|0);
     }
     (___fwritex($457,$534,$f)|0);
     $544 = ($514|0)==(8192);
     $or$cond$i77$i = $544 & $516;
     if ($or$cond$i77$i) {
      $545 = (($w$1) - ($513))|0;
      $546 = ($545>>>0)>(256);
      $547 = $546 ? 256 : $545;
      _memset(($pad$i|0),32,($547|0))|0;
      $548 = ($545>>>0)>(255);
      if ($548) {
       $$01$i79$i = $545;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $549 = (($$01$i79$i) + -256)|0;
        $550 = ($549>>>0)>(255);
        if ($550) {
         $$01$i79$i = $549;
        } else {
         break;
        }
       }
       $551 = $545 & 255;
       $$0$lcssa$i81$i = $551;
      } else {
       $$0$lcssa$i81$i = $545;
      }
      (___fwritex($pad$i,$$0$lcssa$i81$i,$f)|0);
     }
     $w$22$i = $516 ? $w$1 : $513;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$22$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $552 = ($p$0|0)<(0);
    $$p$i = $552 ? 6 : $p$0;
    if ($397) {
     $553 = $396 * 268435456.0;
     $554 = HEAP32[$e2$i>>2]|0;
     $555 = (($554) + -28)|0;
     HEAP32[$e2$i>>2] = $555;
     $$3$i = $553;$557 = $555;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $396;$557 = $$pre$i;
    }
    $556 = ($557|0)<(0);
    $$36$i = $556 ? $big$i : $13;
    $558 = $$36$i;
    $$4$i = $$3$i;$z$0$i = $$36$i;
    while(1) {
     $559 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $559;
     $560 = (($z$0$i) + 4|0);
     $561 = (+($559>>>0));
     $562 = $$4$i - $561;
     $563 = $562 * 1.0E+9;
     $564 = $563 != 0.0;
     if ($564) {
      $$4$i = $563;$z$0$i = $560;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $565 = ($$pr$i|0)>(0);
    if ($565) {
     $567 = $$pr$i;$a$1258$i = $$36$i;$z$1257$i = $560;
     while(1) {
      $566 = ($567|0)>(29);
      $568 = $566 ? 29 : $567;
      $d$0249$i = (($z$1257$i) + -4|0);
      $569 = ($d$0249$i>>>0)<($a$1258$i>>>0);
      do {
       if ($569) {
        $a$2$ph$i = $a$1258$i;
       } else {
        $carry$0250$i = 0;$d$0251$i = $d$0249$i;
        while(1) {
         $570 = HEAP32[$d$0251$i>>2]|0;
         $571 = (_bitshift64Shl(($570|0),0,($568|0))|0);
         $572 = tempRet0;
         $573 = (_i64Add(($571|0),($572|0),($carry$0250$i|0),0)|0);
         $574 = tempRet0;
         $575 = (___uremdi3(($573|0),($574|0),1000000000,0)|0);
         $576 = tempRet0;
         HEAP32[$d$0251$i>>2] = $575;
         $577 = (___udivdi3(($573|0),($574|0),1000000000,0)|0);
         $578 = tempRet0;
         $d$0$i = (($d$0251$i) + -4|0);
         $579 = ($d$0$i>>>0)<($a$1258$i>>>0);
         if ($579) {
          break;
         } else {
          $carry$0250$i = $577;$d$0251$i = $d$0$i;
         }
        }
        $580 = ($577|0)==(0);
        if ($580) {
         $a$2$ph$i = $a$1258$i;
         break;
        }
        $581 = (($a$1258$i) + -4|0);
        HEAP32[$581>>2] = $577;
        $a$2$ph$i = $581;
       }
      } while(0);
      $z$2$i = $z$1257$i;
      while(1) {
       $582 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
       if (!($582)) {
        break;
       }
       $583 = (($z$2$i) + -4|0);
       $584 = HEAP32[$583>>2]|0;
       $585 = ($584|0)==(0);
       if ($585) {
        $z$2$i = $583;
       } else {
        break;
       }
      }
      $586 = HEAP32[$e2$i>>2]|0;
      $587 = (($586) - ($568))|0;
      HEAP32[$e2$i>>2] = $587;
      $588 = ($587|0)>(0);
      if ($588) {
       $567 = $587;$a$1258$i = $a$2$ph$i;$z$1257$i = $z$2$i;
      } else {
       $$pr151$i = $587;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i;
       break;
      }
     }
    } else {
     $$pr151$i = $$pr$i;$a$1$lcssa$i = $$36$i;$z$1$lcssa$i = $560;
    }
    $589 = ($$pr151$i|0)<(0);
    L241: do {
     if ($589) {
      $590 = (($$p$i) + 25)|0;
      $591 = (($590|0) / 9)&-1;
      $592 = (($591) + 1)|0;
      $593 = ($400|0)==(102);
      if ($593) {
       $594 = (($$36$i) + ($592<<2)|0);
       $596 = $$pr151$i;$a$3244$us$i = $a$1$lcssa$i;$z$3243$us$i = $z$1$lcssa$i;
       while(1) {
        $595 = (0 - ($596))|0;
        $597 = ($595|0)>(9);
        $$23$us$i = $597 ? 9 : $595;
        $598 = ($a$3244$us$i>>>0)<($z$3243$us$i>>>0);
        do {
         if ($598) {
          $623 = 1 << $$23$us$i;
          $617 = (($623) + -1)|0;
          $620 = 1000000000 >>> $$23$us$i;
          $carry3$0238$us$i = 0;$d$1237$us$i = $a$3244$us$i;
          while(1) {
           $615 = HEAP32[$d$1237$us$i>>2]|0;
           $616 = $615 & $617;
           $618 = $615 >>> $$23$us$i;
           $619 = (($618) + ($carry3$0238$us$i))|0;
           HEAP32[$d$1237$us$i>>2] = $619;
           $606 = Math_imul($616, $620)|0;
           $621 = (($d$1237$us$i) + 4|0);
           $622 = ($621>>>0)<($z$3243$us$i>>>0);
           if ($622) {
            $carry3$0238$us$i = $606;$d$1237$us$i = $621;
           } else {
            break;
           }
          }
          $602 = HEAP32[$a$3244$us$i>>2]|0;
          $603 = ($602|0)==(0);
          $604 = (($a$3244$us$i) + 4|0);
          $$a$3$us$i = $603 ? $604 : $a$3244$us$i;
          $605 = ($606|0)==(0);
          if ($605) {
           $$a$3$us308$i = $$a$3$us$i;$z$4$us$i = $z$3243$us$i;
           break;
          }
          $607 = (($z$3243$us$i) + 4|0);
          HEAP32[$z$3243$us$i>>2] = $606;
          $$a$3$us308$i = $$a$3$us$i;$z$4$us$i = $607;
         } else {
          $599 = HEAP32[$a$3244$us$i>>2]|0;
          $600 = ($599|0)==(0);
          $601 = (($a$3244$us$i) + 4|0);
          $$a$3$us307$i = $600 ? $601 : $a$3244$us$i;
          $$a$3$us308$i = $$a$3$us307$i;$z$4$us$i = $z$3243$us$i;
         }
        } while(0);
        $608 = $z$4$us$i;
        $609 = (($608) - ($558))|0;
        $610 = $609 >> 2;
        $611 = ($610|0)>($592|0);
        $$z$4$us$i = $611 ? $594 : $z$4$us$i;
        $612 = HEAP32[$e2$i>>2]|0;
        $613 = (($612) + ($$23$us$i))|0;
        HEAP32[$e2$i>>2] = $613;
        $614 = ($613|0)<(0);
        if ($614) {
         $596 = $613;$a$3244$us$i = $$a$3$us308$i;$z$3243$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us308$i;$z$3$lcssa$i = $$z$4$us$i;
         break L241;
        }
       }
      } else {
       $625 = $$pr151$i;$a$3244$i = $a$1$lcssa$i;$z$3243$i = $z$1$lcssa$i;
      }
      while(1) {
       $624 = (0 - ($625))|0;
       $626 = ($624|0)>(9);
       $$23$i = $626 ? 9 : $624;
       $627 = ($a$3244$i>>>0)<($z$3243$i>>>0);
       do {
        if ($627) {
         $631 = 1 << $$23$i;
         $632 = (($631) + -1)|0;
         $633 = 1000000000 >>> $$23$i;
         $carry3$0238$i = 0;$d$1237$i = $a$3244$i;
         while(1) {
          $634 = HEAP32[$d$1237$i>>2]|0;
          $635 = $634 & $632;
          $636 = $634 >>> $$23$i;
          $637 = (($636) + ($carry3$0238$i))|0;
          HEAP32[$d$1237$i>>2] = $637;
          $638 = Math_imul($635, $633)|0;
          $639 = (($d$1237$i) + 4|0);
          $640 = ($639>>>0)<($z$3243$i>>>0);
          if ($640) {
           $carry3$0238$i = $638;$d$1237$i = $639;
          } else {
           break;
          }
         }
         $641 = HEAP32[$a$3244$i>>2]|0;
         $642 = ($641|0)==(0);
         $643 = (($a$3244$i) + 4|0);
         $$a$3$i = $642 ? $643 : $a$3244$i;
         $644 = ($638|0)==(0);
         if ($644) {
          $$a$3310$i = $$a$3$i;$z$4$i = $z$3243$i;
          break;
         }
         $645 = (($z$3243$i) + 4|0);
         HEAP32[$z$3243$i>>2] = $638;
         $$a$3310$i = $$a$3$i;$z$4$i = $645;
        } else {
         $628 = HEAP32[$a$3244$i>>2]|0;
         $629 = ($628|0)==(0);
         $630 = (($a$3244$i) + 4|0);
         $$a$3309$i = $629 ? $630 : $a$3244$i;
         $$a$3310$i = $$a$3309$i;$z$4$i = $z$3243$i;
        }
       } while(0);
       $646 = $z$4$i;
       $647 = $$a$3310$i;
       $648 = (($646) - ($647))|0;
       $649 = $648 >> 2;
       $650 = ($649|0)>($592|0);
       if ($650) {
        $651 = (($$a$3310$i) + ($592<<2)|0);
        $z$5$i = $651;
       } else {
        $z$5$i = $z$4$i;
       }
       $652 = HEAP32[$e2$i>>2]|0;
       $653 = (($652) + ($$23$i))|0;
       HEAP32[$e2$i>>2] = $653;
       $654 = ($653|0)<(0);
       if ($654) {
        $625 = $653;$a$3244$i = $$a$3310$i;$z$3243$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3310$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $655 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    do {
     if ($655) {
      $656 = $a$3$lcssa$i;
      $657 = (($558) - ($656))|0;
      $658 = $657 >> 2;
      $659 = ($658*9)|0;
      $660 = HEAP32[$a$3$lcssa$i>>2]|0;
      $661 = ($660>>>0)<(10);
      if ($661) {
       $e$1$i = $659;
       break;
      } else {
       $e$0233$i = $659;$i$0232$i = 10;
      }
      while(1) {
       $662 = ($i$0232$i*10)|0;
       $663 = (($e$0233$i) + 1)|0;
       $664 = ($660>>>0)<($662>>>0);
       if ($664) {
        $e$1$i = $663;
        break;
       } else {
        $e$0233$i = $663;$i$0232$i = $662;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $665 = ($400|0)!=(102);
    $666 = $665 ? $e$1$i : 0;
    $667 = (($$p$i) - ($666))|0;
    $668 = ($400|0)==(103);
    $669 = ($$p$i|0)!=(0);
    $$24$i = $668 & $669;
    $$neg156$i = $$24$i << 31 >> 31;
    $670 = (($667) + ($$neg156$i))|0;
    $671 = $z$3$lcssa$i;
    $672 = (($671) - ($558))|0;
    $673 = $672 >> 2;
    $674 = ($673*9)|0;
    $675 = (($674) + -9)|0;
    $676 = ($670|0)<($675|0);
    if ($676) {
     $677 = (($670) + 9216)|0;
     $678 = (($677|0) / 9)&-1;
     $$sum$i = (($678) + -1023)|0;
     $679 = (($$36$i) + ($$sum$i<<2)|0);
     $680 = (($677|0) % 9)&-1;
     $j$0224$i = (($680) + 1)|0;
     $681 = ($j$0224$i|0)<(9);
     if ($681) {
      $i$1225$i = 10;$j$0226$i = $j$0224$i;
      while(1) {
       $682 = ($i$1225$i*10)|0;
       $j$0$i = (($j$0226$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $682;
        break;
       } else {
        $i$1225$i = $682;$j$0226$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $683 = HEAP32[$679>>2]|0;
     $684 = (($683>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $685 = ($684|0)==(0);
     if ($685) {
      $$sum18$i = (($678) + -1022)|0;
      $686 = (($$36$i) + ($$sum18$i<<2)|0);
      $687 = ($686|0)==($z$3$lcssa$i|0);
      if ($687) {
       $a$7$i = $a$3$lcssa$i;$d$3$i = $679;$e$3$i = $e$1$i;
      } else {
       label = 232;
      }
     } else {
      label = 232;
     }
     do {
      if ((label|0) == 232) {
       label = 0;
       $688 = (($683>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $689 = $688 & 1;
       $690 = ($689|0)==(0);
       $$25$i = $690 ? 9007199254740992.0 : 9007199254740994.0;
       $691 = (($i$1$lcssa$i|0) / 2)&-1;
       $692 = ($684>>>0)<($691>>>0);
       do {
        if ($692) {
         $small$0$i = 0.5;
        } else {
         $693 = ($684|0)==($691|0);
         if ($693) {
          $$sum19$i = (($678) + -1022)|0;
          $694 = (($$36$i) + ($$sum19$i<<2)|0);
          $695 = ($694|0)==($z$3$lcssa$i|0);
          if ($695) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $696 = ($pl$0$i|0)==(0);
       do {
        if ($696) {
         $round6$1$i = $$25$i;$small$1$i = $small$0$i;
        } else {
         $697 = HEAP8[$prefix$0$i>>0]|0;
         $698 = ($697<<24>>24)==(45);
         if (!($698)) {
          $round6$1$i = $$25$i;$small$1$i = $small$0$i;
          break;
         }
         $699 = $$25$i * -1.0;
         $700 = $small$0$i * -1.0;
         $round6$1$i = $699;$small$1$i = $700;
        }
       } while(0);
       $701 = (($683) - ($684))|0;
       HEAP32[$679>>2] = $701;
       $702 = $round6$1$i + $small$1$i;
       $703 = $702 != $round6$1$i;
       if (!($703)) {
        $a$7$i = $a$3$lcssa$i;$d$3$i = $679;$e$3$i = $e$1$i;
        break;
       }
       $704 = (($701) + ($i$1$lcssa$i))|0;
       HEAP32[$679>>2] = $704;
       $705 = ($704>>>0)>(999999999);
       if ($705) {
        $a$5218$i = $a$3$lcssa$i;$d$2217$i = $679;
        while(1) {
         $706 = (($d$2217$i) + -4|0);
         HEAP32[$d$2217$i>>2] = 0;
         $707 = ($706>>>0)<($a$5218$i>>>0);
         if ($707) {
          $708 = (($a$5218$i) + -4|0);
          HEAP32[$708>>2] = 0;
          $a$6$i = $708;
         } else {
          $a$6$i = $a$5218$i;
         }
         $709 = HEAP32[$706>>2]|0;
         $710 = (($709) + 1)|0;
         HEAP32[$706>>2] = $710;
         $711 = ($710>>>0)>(999999999);
         if ($711) {
          $a$5218$i = $a$6$i;$d$2217$i = $706;
         } else {
          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $706;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $679;
       }
       $712 = $a$5$lcssa$i;
       $713 = (($558) - ($712))|0;
       $714 = $713 >> 2;
       $715 = ($714*9)|0;
       $716 = HEAP32[$a$5$lcssa$i>>2]|0;
       $717 = ($716>>>0)<(10);
       if ($717) {
        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $715;
        break;
       } else {
        $e$2213$i = $715;$i$2212$i = 10;
       }
       while(1) {
        $718 = ($i$2212$i*10)|0;
        $719 = (($e$2213$i) + 1)|0;
        $720 = ($716>>>0)<($718>>>0);
        if ($720) {
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $719;
         break;
        } else {
         $e$2213$i = $719;$i$2212$i = $718;
        }
       }
      }
     } while(0);
     $721 = (($d$3$i) + 4|0);
     $722 = ($z$3$lcssa$i>>>0)>($721>>>0);
     $$z$3$i = $722 ? $721 : $z$3$lcssa$i;
     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
    }
    $723 = (0 - ($e$4$ph$i))|0;
    $z$6$i = $z$6$ph$i;
    while(1) {
     $724 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
     if (!($724)) {
      $$lcssa292$i = 0;
      break;
     }
     $725 = (($z$6$i) + -4|0);
     $726 = HEAP32[$725>>2]|0;
     $727 = ($726|0)==(0);
     if ($727) {
      $z$6$i = $725;
     } else {
      $$lcssa292$i = 1;
      break;
     }
    }
    do {
     if ($668) {
      $728 = ($$p$i|0)==(0);
      $729 = $728&1;
      $$$p$i = (($729) + ($$p$i))|0;
      $730 = ($$$p$i|0)>($e$4$ph$i|0);
      $731 = ($e$4$ph$i|0)>(-5);
      $or$cond5$i = $730 & $731;
      if ($or$cond5$i) {
       $732 = (($t$0) + -1)|0;
       $$neg157$i = (($$$p$i) + -1)|0;
       $733 = (($$neg157$i) - ($e$4$ph$i))|0;
       $$016$i = $732;$$213$i = $733;
      } else {
       $734 = (($t$0) + -2)|0;
       $735 = (($$$p$i) + -1)|0;
       $$016$i = $734;$$213$i = $735;
      }
      $736 = $fl$1$ & 8;
      $737 = ($736|0)==(0);
      if (!($737)) {
       $$117$i = $$016$i;$$314$i = $$213$i;
       break;
      }
      do {
       if ($$lcssa292$i) {
        $738 = (($z$6$i) + -4|0);
        $739 = HEAP32[$738>>2]|0;
        $740 = ($739|0)==(0);
        if ($740) {
         $j$2$i = 9;
         break;
        }
        $741 = (($739>>>0) % 10)&-1;
        $742 = ($741|0)==(0);
        if ($742) {
         $i$3204$i = 10;$j$1205$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $743 = ($i$3204$i*10)|0;
         $744 = (($j$1205$i) + 1)|0;
         $745 = (($739>>>0) % ($743>>>0))&-1;
         $746 = ($745|0)==(0);
         if ($746) {
          $i$3204$i = $743;$j$1205$i = $744;
         } else {
          $j$2$i = $744;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $747 = $$016$i | 32;
      $748 = ($747|0)==(102);
      $749 = $z$6$i;
      $750 = (($749) - ($558))|0;
      $751 = $750 >> 2;
      $752 = ($751*9)|0;
      $753 = (($752) + -9)|0;
      if ($748) {
       $754 = (($753) - ($j$2$i))|0;
       $755 = ($754|0)<(0);
       $$26$i = $755 ? 0 : $754;
       $756 = ($$213$i|0)<($$26$i|0);
       $$213$$26$i = $756 ? $$213$i : $$26$i;
       $$117$i = $$016$i;$$314$i = $$213$$26$i;
       break;
      } else {
       $757 = (($753) + ($e$4$ph$i))|0;
       $758 = (($757) - ($j$2$i))|0;
       $759 = ($758|0)<(0);
       $$28$i = $759 ? 0 : $758;
       $760 = ($$213$i|0)<($$28$i|0);
       $$213$$28$i = $760 ? $$213$i : $$28$i;
       $$117$i = $$016$i;$$314$i = $$213$$28$i;
       break;
      }
     } else {
      $$117$i = $t$0;$$314$i = $$p$i;
     }
    } while(0);
    $761 = ($$314$i|0)!=(0);
    if ($761) {
     $765 = 1;
    } else {
     $762 = $fl$1$ & 8;
     $763 = ($762|0)!=(0);
     $765 = $763;
    }
    $764 = $765&1;
    $766 = $$117$i | 32;
    $767 = ($766|0)==(102);
    if ($767) {
     $768 = ($e$4$ph$i|0)>(0);
     $769 = $768 ? $e$4$ph$i : 0;
     $$pn$i = $769;$estr$2$i = 0;
    } else {
     $770 = ($e$4$ph$i|0)<(0);
     $771 = $770 ? $723 : $e$4$ph$i;
     $772 = ($771|0)<(0);
     if ($772) {
      $773 = ($771|0)<(0);
      $774 = $773 << 31 >> 31;
      $$05$i84$i = $7;$775 = $771;$776 = $774;
      while(1) {
       $777 = (___uremdi3(($775|0),($776|0),10,0)|0);
       $778 = tempRet0;
       $779 = $777 | 48;
       $780 = $779&255;
       $781 = (($$05$i84$i) + -1|0);
       HEAP8[$781>>0] = $780;
       $782 = (___udivdi3(($775|0),($776|0),10,0)|0);
       $783 = tempRet0;
       $784 = ($776>>>0)>(9);
       $785 = ($775>>>0)>(4294967295);
       $786 = ($776|0)==(9);
       $787 = $786 & $785;
       $788 = $784 | $787;
       if ($788) {
        $$05$i84$i = $781;$775 = $782;$776 = $783;
       } else {
        break;
       }
      }
      $$0$lcssa$i89$i = $781;$$01$lcssa$off0$i90$i = $782;
     } else {
      $$0$lcssa$i89$i = $7;$$01$lcssa$off0$i90$i = $771;
     }
     $789 = ($$01$lcssa$off0$i90$i|0)==(0);
     if ($789) {
      $estr$1$ph$i = $$0$lcssa$i89$i;
     } else {
      $$12$i92$i = $$0$lcssa$i89$i;$y$03$i91$i = $$01$lcssa$off0$i90$i;
      while(1) {
       $790 = (($y$03$i91$i>>>0) % 10)&-1;
       $791 = $790 | 48;
       $792 = $791&255;
       $793 = (($$12$i92$i) + -1|0);
       HEAP8[$793>>0] = $792;
       $794 = (($y$03$i91$i>>>0) / 10)&-1;
       $795 = ($y$03$i91$i>>>0)<(10);
       if ($795) {
        $estr$1$ph$i = $793;
        break;
       } else {
        $$12$i92$i = $793;$y$03$i91$i = $794;
       }
      }
     }
     $796 = $estr$1$ph$i;
     $797 = (($9) - ($796))|0;
     $798 = ($797|0)<(2);
     if ($798) {
      $estr$1195$i = $estr$1$ph$i;
      while(1) {
       $799 = (($estr$1195$i) + -1|0);
       HEAP8[$799>>0] = 48;
       $800 = $799;
       $801 = (($9) - ($800))|0;
       $802 = ($801|0)<(2);
       if ($802) {
        $estr$1195$i = $799;
       } else {
        $estr$1$lcssa$i = $799;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $803 = $e$4$ph$i >> 31;
     $804 = $803 & 2;
     $805 = (($804) + 43)|0;
     $806 = $805&255;
     $807 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$807>>0] = $806;
     $808 = $$117$i&255;
     $809 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$809>>0] = $808;
     $810 = $809;
     $811 = (($9) - ($810))|0;
     $$pn$i = $811;$estr$2$i = $809;
    }
    $812 = (($pl$0$i) + 1)|0;
    $813 = (($812) + ($$314$i))|0;
    $l$1$i = (($813) + ($764))|0;
    $814 = (($l$1$i) + ($$pn$i))|0;
    $815 = $fl$1$ & 73728;
    $816 = ($815|0)==(0);
    $817 = ($w$1|0)>($814|0);
    $or$cond$i98$i = $816 & $817;
    if ($or$cond$i98$i) {
     $818 = (($w$1) - ($814))|0;
     $819 = ($818>>>0)>(256);
     $820 = $819 ? 256 : $818;
     _memset(($pad$i|0),32,($820|0))|0;
     $821 = ($818>>>0)>(255);
     if ($821) {
      $$01$i100$i = $818;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $822 = (($$01$i100$i) + -256)|0;
       $823 = ($822>>>0)>(255);
       if ($823) {
        $$01$i100$i = $822;
       } else {
        break;
       }
      }
      $824 = $818 & 255;
      $$0$lcssa$i102$i = $824;
     } else {
      $$0$lcssa$i102$i = $818;
     }
     (___fwritex($pad$i,$$0$lcssa$i102$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $825 = ($815|0)==(65536);
    $or$cond$i105$i = $825 & $817;
    if ($or$cond$i105$i) {
     $826 = (($w$1) - ($814))|0;
     $827 = ($826>>>0)>(256);
     $828 = $827 ? 256 : $826;
     _memset(($pad$i|0),48,($828|0))|0;
     $829 = ($826>>>0)>(255);
     if ($829) {
      $$01$i107$i = $826;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $830 = (($$01$i107$i) + -256)|0;
       $831 = ($830>>>0)>(255);
       if ($831) {
        $$01$i107$i = $830;
       } else {
        break;
       }
      }
      $832 = $826 & 255;
      $$0$lcssa$i109$i = $832;
     } else {
      $$0$lcssa$i109$i = $826;
     }
     (___fwritex($pad$i,$$0$lcssa$i109$i,$f)|0);
    }
    do {
     if ($767) {
      $833 = ($a$8$ph$i>>>0)>($$36$i>>>0);
      $r$0$a$8$i = $833 ? $$36$i : $a$8$ph$i;
      $d$4180$i = $r$0$a$8$i;
      while(1) {
       $834 = HEAP32[$d$4180$i>>2]|0;
       $835 = ($834|0)==(0);
       if ($835) {
        $$1$lcssa$i117$i = $14;
       } else {
        $$12$i115$i = $14;$y$03$i114$i = $834;
        while(1) {
         $836 = (($y$03$i114$i>>>0) % 10)&-1;
         $837 = $836 | 48;
         $838 = $837&255;
         $839 = (($$12$i115$i) + -1|0);
         HEAP8[$839>>0] = $838;
         $840 = (($y$03$i114$i>>>0) / 10)&-1;
         $841 = ($y$03$i114$i>>>0)<(10);
         if ($841) {
          $$1$lcssa$i117$i = $839;
          break;
         } else {
          $$12$i115$i = $839;$y$03$i114$i = $840;
         }
        }
       }
       $842 = ($d$4180$i|0)==($r$0$a$8$i|0);
       do {
        if ($842) {
         $846 = ($$1$lcssa$i117$i|0)==($14|0);
         if (!($846)) {
          $s7$1$i = $$1$lcssa$i117$i;
          break;
         }
         HEAP8[$16>>0] = 48;
         $s7$1$i = $16;
        } else {
         $843 = ($$1$lcssa$i117$i>>>0)>($buf$i>>>0);
         if ($843) {
          $s7$0177$i = $$1$lcssa$i117$i;
         } else {
          $s7$1$i = $$1$lcssa$i117$i;
          break;
         }
         while(1) {
          $844 = (($s7$0177$i) + -1|0);
          HEAP8[$844>>0] = 48;
          $845 = ($844>>>0)>($buf$i>>>0);
          if ($845) {
           $s7$0177$i = $844;
          } else {
           $s7$1$i = $844;
           break;
          }
         }
        }
       } while(0);
       $847 = $s7$1$i;
       $848 = (($15) - ($847))|0;
       (___fwritex($s7$1$i,$848,$f)|0);
       $849 = (($d$4180$i) + 4|0);
       $850 = ($849>>>0)>($$36$i>>>0);
       if ($850) {
        break;
       } else {
        $d$4180$i = $849;
       }
      }
      $$not$i = $761 ^ 1;
      $851 = $fl$1$ & 8;
      $852 = ($851|0)==(0);
      $or$cond32$i = $852 & $$not$i;
      if (!($or$cond32$i)) {
       (___fwritex(21608,1,$f)|0);
      }
      $853 = ($849>>>0)<($z$6$i>>>0);
      $854 = ($$314$i|0)>(0);
      $or$cond7169$i = $853 & $854;
      if ($or$cond7169$i) {
       $$415171$i = $$314$i;$d$5170$i = $849;
       while(1) {
        $855 = HEAP32[$d$5170$i>>2]|0;
        $856 = ($855|0)==(0);
        if ($856) {
         $s8$0165$i = $14;
         label = 301;
        } else {
         $$12$i124$i = $14;$y$03$i123$i = $855;
         while(1) {
          $857 = (($y$03$i123$i>>>0) % 10)&-1;
          $858 = $857 | 48;
          $859 = $858&255;
          $860 = (($$12$i124$i) + -1|0);
          HEAP8[$860>>0] = $859;
          $861 = (($y$03$i123$i>>>0) / 10)&-1;
          $862 = ($y$03$i123$i>>>0)<(10);
          if ($862) {
           break;
          } else {
           $$12$i124$i = $860;$y$03$i123$i = $861;
          }
         }
         $863 = ($860>>>0)>($buf$i>>>0);
         if ($863) {
          $s8$0165$i = $860;
          label = 301;
         } else {
          $s8$0$lcssa$i = $860;
         }
        }
        if ((label|0) == 301) {
         while(1) {
          label = 0;
          $864 = (($s8$0165$i) + -1|0);
          HEAP8[$864>>0] = 48;
          $865 = ($864>>>0)>($buf$i>>>0);
          if ($865) {
           $s8$0165$i = $864;
           label = 301;
          } else {
           $s8$0$lcssa$i = $864;
           break;
          }
         }
        }
        $866 = ($$415171$i|0)>(9);
        $867 = $866 ? 9 : $$415171$i;
        (___fwritex($s8$0$lcssa$i,$867,$f)|0);
        $868 = (($d$5170$i) + 4|0);
        $869 = (($$415171$i) + -9)|0;
        $870 = ($868>>>0)<($z$6$i>>>0);
        $871 = ($869|0)>(0);
        $or$cond7$i = $870 & $871;
        if ($or$cond7$i) {
         $$415171$i = $869;$d$5170$i = $868;
        } else {
         $$415$lcssa$i = $869;
         break;
        }
       }
      } else {
       $$415$lcssa$i = $$314$i;
      }
      $872 = ($$415$lcssa$i|0)>(0);
      if (!($872)) {
       break;
      }
      $873 = ($$415$lcssa$i>>>0)>(256);
      $874 = $873 ? 256 : $$415$lcssa$i;
      _memset(($pad$i|0),48,($874|0))|0;
      $875 = ($$415$lcssa$i>>>0)>(255);
      if ($875) {
       $$01$i131$i = $$415$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $876 = (($$01$i131$i) + -256)|0;
        $877 = ($876>>>0)>(255);
        if ($877) {
         $$01$i131$i = $876;
        } else {
         break;
        }
       }
       $878 = $$415$lcssa$i & 255;
       $$0$lcssa$i133$i = $878;
      } else {
       $$0$lcssa$i133$i = $$415$lcssa$i;
      }
      (___fwritex($pad$i,$$0$lcssa$i133$i,$f)|0);
     } else {
      $879 = (($a$8$ph$i) + 4|0);
      $z$6$$i = $$lcssa292$i ? $z$6$i : $879;
      $880 = ($$314$i|0)>(-1);
      do {
       if ($880) {
        $881 = $fl$1$ & 8;
        $882 = ($881|0)==(0);
        $$5189$i = $$314$i;$d$6188$i = $a$8$ph$i;
        while(1) {
         $883 = HEAP32[$d$6188$i>>2]|0;
         $884 = ($883|0)==(0);
         if ($884) {
          label = 313;
         } else {
          $$12$i139$i = $14;$y$03$i138$i = $883;
          while(1) {
           $885 = (($y$03$i138$i>>>0) % 10)&-1;
           $886 = $885 | 48;
           $887 = $886&255;
           $888 = (($$12$i139$i) + -1|0);
           HEAP8[$888>>0] = $887;
           $889 = (($y$03$i138$i>>>0) / 10)&-1;
           $890 = ($y$03$i138$i>>>0)<(10);
           if ($890) {
            break;
           } else {
            $$12$i139$i = $888;$y$03$i138$i = $889;
           }
          }
          $891 = ($888|0)==($14|0);
          if ($891) {
           label = 313;
          } else {
           $s9$0$i = $888;
          }
         }
         if ((label|0) == 313) {
          label = 0;
          HEAP8[$16>>0] = 48;
          $s9$0$i = $16;
         }
         $892 = ($d$6188$i|0)==($a$8$ph$i|0);
         do {
          if ($892) {
           $896 = (($s9$0$i) + 1|0);
           (___fwritex($s9$0$i,1,$f)|0);
           $897 = ($$5189$i|0)<(1);
           $or$cond34$i = $897 & $882;
           if ($or$cond34$i) {
            $s9$2$i = $896;
            break;
           }
           (___fwritex(21608,1,$f)|0);
           $s9$2$i = $896;
          } else {
           $893 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($893) {
            $s9$1184$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $894 = (($s9$1184$i) + -1|0);
            HEAP8[$894>>0] = 48;
            $895 = ($894>>>0)>($buf$i>>>0);
            if ($895) {
             $s9$1184$i = $894;
            } else {
             $s9$2$i = $894;
             break;
            }
           }
          }
         } while(0);
         $898 = $s9$2$i;
         $899 = (($15) - ($898))|0;
         $900 = ($$5189$i|0)>($899|0);
         $$$5$i = $900 ? $899 : $$5189$i;
         (___fwritex($s9$2$i,$$$5$i,$f)|0);
         $901 = (($$5189$i) - ($899))|0;
         $902 = (($d$6188$i) + 4|0);
         $903 = ($902>>>0)<($z$6$$i>>>0);
         $904 = ($901|0)>(-1);
         $or$cond9$i = $903 & $904;
         if ($or$cond9$i) {
          $$5189$i = $901;$d$6188$i = $902;
         } else {
          break;
         }
        }
        $905 = ($901|0)>(0);
        if (!($905)) {
         break;
        }
        $906 = ($901>>>0)>(256);
        $907 = $906 ? 256 : $901;
        _memset(($pad$i|0),48,($907|0))|0;
        $908 = ($901>>>0)>(255);
        if ($908) {
         $$01$i146$i = $901;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $909 = (($$01$i146$i) + -256)|0;
          $910 = ($909>>>0)>(255);
          if ($910) {
           $$01$i146$i = $909;
          } else {
           break;
          }
         }
         $911 = $901 & 255;
         $$0$lcssa$i148$i = $911;
        } else {
         $$0$lcssa$i148$i = $901;
        }
        (___fwritex($pad$i,$$0$lcssa$i148$i,$f)|0);
       }
      } while(0);
      $912 = $estr$2$i;
      $913 = (($9) - ($912))|0;
      (___fwritex($estr$2$i,$913,$f)|0);
     }
    } while(0);
    $914 = ($815|0)==(8192);
    $or$cond$i$i = $914 & $817;
    if ($or$cond$i$i) {
     $915 = (($w$1) - ($814))|0;
     $916 = ($915>>>0)>(256);
     $917 = $916 ? 256 : $915;
     _memset(($pad$i|0),32,($917|0))|0;
     $918 = ($915>>>0)>(255);
     if ($918) {
      $$01$i$i = $915;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $919 = (($$01$i$i) + -256)|0;
       $920 = ($919>>>0)>(255);
       if ($920) {
        $$01$i$i = $919;
       } else {
        break;
       }
      }
      $921 = $915 & 255;
      $$0$lcssa$i$i = $921;
     } else {
      $$0$lcssa$i$i = $915;
     }
     (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
    }
    $w$35$i = $817 ? $w$1 : $814;
    $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$35$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 83:  {
    $316 = $191;
    $317 = ($p$0|0)==(0);
    if ($317) {
     $1040 = $191;$1041 = $316;$i$0$lcssa267 = 0;
     label = 106;
    } else {
     $1038 = $316;$1039 = $191;$p$4266 = $p$0;
     label = 101;
    }
    break;
   }
   case 111:  {
    $238 = ($191|0)==(0);
    $239 = ($218|0)==(0);
    $240 = $238 & $239;
    if ($240) {
     $$0$lcssa$i45 = $2;
    } else {
     $$03$i42 = $2;$242 = $191;$246 = $218;
     while(1) {
      $241 = $242 & 7;
      $243 = $241 | 48;
      $244 = $243&255;
      $245 = (($$03$i42) + -1|0);
      HEAP8[$245>>0] = $244;
      $247 = (_bitshift64Lshr(($242|0),($246|0),3)|0);
      $248 = tempRet0;
      $249 = ($247|0)==(0);
      $250 = ($248|0)==(0);
      $251 = $249 & $250;
      if ($251) {
       $$0$lcssa$i45 = $245;
       break;
      } else {
       $$03$i42 = $245;$242 = $247;$246 = $248;
      }
     }
    }
    $252 = $fl$1$ & 8;
    $253 = ($252|0)==(0);
    $or$cond13 = $253 | $240;
    $$19 = $or$cond13 ? 21512 : ((21512 + 5|0));
    $254 = $or$cond13&1;
    $$20 = $254 ^ 1;
    $293 = $191;$295 = $218;$a$0 = $$0$lcssa$i45;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$20;$prefix$1 = $$19;
    label = 91;
    break;
   }
   default: {
    $1036 = $191;$1037 = $218;$a$2 = $fmt83;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 21512;$z$2 = $2;
   }
   }
  } while(0);
  do {
   if ((label|0) == 75) {
    label = 0;
    $215 = $t$1 & 32;
    $216 = ($191|0)==(0);
    $217 = ($218|0)==(0);
    $219 = $216 & $217;
    if ($219) {
     $293 = $191;$295 = $218;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 21512;
     label = 91;
    } else {
     $$012$i = $2;$221 = $191;$228 = $218;
     while(1) {
      $220 = $221 & 15;
      $222 = (21592 + ($220)|0);
      $223 = HEAP8[$222>>0]|0;
      $224 = $223&255;
      $225 = $224 | $215;
      $226 = $225&255;
      $227 = (($$012$i) + -1|0);
      HEAP8[$227>>0] = $226;
      $229 = (_bitshift64Lshr(($221|0),($228|0),4)|0);
      $230 = tempRet0;
      $231 = ($229|0)==(0);
      $232 = ($230|0)==(0);
      $233 = $231 & $232;
      if ($233) {
       break;
      } else {
       $$012$i = $227;$221 = $229;$228 = $230;
      }
     }
     $234 = $fl$3 & 8;
     $235 = ($234|0)==(0);
     if ($235) {
      $293 = $191;$295 = $218;$a$0 = $227;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 21512;
      label = 91;
     } else {
      $236 = $t$1 >> 4;
      $237 = (21512 + ($236)|0);
      $293 = $191;$295 = $218;$a$0 = $227;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $237;
      label = 91;
     }
    }
   }
   else if ((label|0) == 86) {
    label = 0;
    $262 = ($263>>>0)>(0);
    $264 = ($265>>>0)>(4294967295);
    $266 = ($263|0)==(0);
    $267 = $266 & $264;
    $268 = $262 | $267;
    if ($268) {
     $$05$i = $2;$269 = $265;$270 = $263;
     while(1) {
      $271 = (___uremdi3(($269|0),($270|0),10,0)|0);
      $272 = tempRet0;
      $273 = $271 | 48;
      $274 = $273&255;
      $275 = (($$05$i) + -1|0);
      HEAP8[$275>>0] = $274;
      $276 = (___udivdi3(($269|0),($270|0),10,0)|0);
      $277 = tempRet0;
      $278 = ($270>>>0)>(9);
      $279 = ($269>>>0)>(4294967295);
      $280 = ($270|0)==(9);
      $281 = $280 & $279;
      $282 = $278 | $281;
      if ($282) {
       $$05$i = $275;$269 = $276;$270 = $277;
      } else {
       break;
      }
     }
     $$0$lcssa$i47 = $275;$$01$lcssa$off0$i = $276;
    } else {
     $$0$lcssa$i47 = $2;$$01$lcssa$off0$i = $265;
    }
    $283 = ($$01$lcssa$off0$i|0)==(0);
    if ($283) {
     $293 = $265;$295 = $263;$a$0 = $$0$lcssa$i47;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 91;
    } else {
     $$12$i = $$0$lcssa$i47;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $284 = (($y$03$i>>>0) % 10)&-1;
      $285 = $284 | 48;
      $286 = $285&255;
      $287 = (($$12$i) + -1|0);
      HEAP8[$287>>0] = $286;
      $288 = (($y$03$i>>>0) / 10)&-1;
      $289 = ($y$03$i>>>0)<(10);
      if ($289) {
       $293 = $265;$295 = $263;$a$0 = $287;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 91;
       break;
      } else {
       $$12$i = $287;$y$03$i = $288;
      }
     }
    }
   }
   else if ((label|0) == 96) {
    label = 0;
    $310 = (_memchr($a$1,0,$p$0)|0);
    $311 = ($310|0)==(0|0);
    if ($311) {
     $312 = (($a$1) + ($p$0)|0);
     $1036 = $191;$1037 = $218;$a$2 = $a$1;$fl$6 = $189;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 21512;$z$2 = $312;
     break;
    } else {
     $313 = $310;
     $314 = $a$1;
     $315 = (($313) - ($314))|0;
     $1036 = $191;$1037 = $218;$a$2 = $a$1;$fl$6 = $189;$p$5 = $315;$pl$2 = 0;$prefix$2 = 21512;$z$2 = $310;
     break;
    }
   }
   else if ((label|0) == 101) {
    label = 0;
    $i$0166 = 0;$l$1165 = 0;$ws$0167 = $1038;
    while(1) {
     $318 = HEAP32[$ws$0167>>2]|0;
     $319 = ($318|0)==(0);
     if ($319) {
      $i$0$lcssa = $i$0166;$l$2 = $l$1165;
      break;
     }
     $320 = (_wctomb($mb,$318)|0);
     $321 = ($320|0)<(0);
     $322 = (($p$4266) - ($i$0166))|0;
     $323 = ($320>>>0)>($322>>>0);
     $or$cond17 = $321 | $323;
     if ($or$cond17) {
      $i$0$lcssa = $i$0166;$l$2 = $320;
      break;
     }
     $324 = (($ws$0167) + 4|0);
     $325 = (($320) + ($i$0166))|0;
     $326 = ($p$4266>>>0)>($325>>>0);
     if ($326) {
      $i$0166 = $325;$l$1165 = $320;$ws$0167 = $324;
     } else {
      $i$0$lcssa = $325;$l$2 = $320;
      break;
     }
    }
    $327 = ($l$2|0)<(0);
    if ($327) {
     $$0 = -1;
     label = 370;
     break L1;
    } else {
     $1040 = $1039;$1041 = $1038;$i$0$lcssa267 = $i$0$lcssa;
     label = 106;
    }
   }
  } while(0);
  if ((label|0) == 91) {
   label = 0;
   $290 = ($p$2|0)>(-1);
   $291 = $fl$4 & -65537;
   $$fl$4 = $290 ? $291 : $fl$4;
   $292 = ($293|0)!=(0);
   $294 = ($295|0)!=(0);
   $296 = $292 | $294;
   $297 = ($p$2|0)!=(0);
   $or$cond = $296 | $297;
   if ($or$cond) {
    $298 = $a$0;
    $299 = (($3) - ($298))|0;
    $300 = $296&1;
    $301 = $300 ^ 1;
    $302 = (($301) + ($299))|0;
    $303 = ($p$2|0)>($302|0);
    $p$2$ = $303 ? $p$2 : $302;
    $1036 = $293;$1037 = $295;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $1036 = $293;$1037 = $295;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 106) {
   label = 0;
   $328 = $fl$1$ & 73728;
   $329 = ($328|0)==(0);
   $330 = ($w$1|0)>($i$0$lcssa267|0);
   $or$cond$i58 = $329 & $330;
   if ($or$cond$i58) {
    $331 = (($w$1) - ($i$0$lcssa267))|0;
    $332 = ($331>>>0)>(256);
    $333 = $332 ? 256 : $331;
    _memset(($pad$i|0),32,($333|0))|0;
    $334 = ($331>>>0)>(255);
    if ($334) {
     $$01$i60 = $331;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $335 = (($$01$i60) + -256)|0;
      $336 = ($335>>>0)>(255);
      if ($336) {
       $$01$i60 = $335;
      } else {
       break;
      }
     }
     $337 = $331 & 255;
     $$0$lcssa$i62 = $337;
    } else {
     $$0$lcssa$i62 = $331;
    }
    (___fwritex($pad$i,$$0$lcssa$i62,$f)|0);
   }
   $338 = ($i$0$lcssa267|0)==(0);
   L477: do {
    if (!($338)) {
     $i$1174 = 0;$ws$1175 = $1041;
     while(1) {
      $339 = HEAP32[$ws$1175>>2]|0;
      $340 = ($339|0)==(0);
      if ($340) {
       break L477;
      }
      $341 = (_wctomb($mb,$339)|0);
      $342 = (($341) + ($i$1174))|0;
      $343 = ($342|0)>($i$0$lcssa267|0);
      if ($343) {
       break L477;
      }
      $344 = (($ws$1175) + 4|0);
      (___fwritex($mb,$341,$f)|0);
      $345 = ($342>>>0)<($i$0$lcssa267>>>0);
      if ($345) {
       $i$1174 = $342;$ws$1175 = $344;
      } else {
       break;
      }
     }
    }
   } while(0);
   $346 = ($328|0)==(8192);
   $or$cond$i65 = $346 & $330;
   if ($or$cond$i65) {
    $347 = (($w$1) - ($i$0$lcssa267))|0;
    $348 = ($347>>>0)>(256);
    $349 = $348 ? 256 : $347;
    _memset(($pad$i|0),32,($349|0))|0;
    $350 = ($347>>>0)>(255);
    if ($350) {
     $$01$i67 = $347;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $351 = (($$01$i67) + -256)|0;
      $352 = ($351>>>0)>(255);
      if ($352) {
       $$01$i67 = $351;
      } else {
       break;
      }
     }
     $353 = $347 & 255;
     $$0$lcssa$i69 = $353;
    } else {
     $$0$lcssa$i69 = $347;
    }
    (___fwritex($pad$i,$$0$lcssa$i69,$f)|0);
   }
   $354 = $330 ? $w$1 : $i$0$lcssa267;
   $1029 = $1040;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $354;$l10n$0 = $l10n$3;
   continue;
  }
  $922 = $z$2;
  $923 = $a$2;
  $924 = (($922) - ($923))|0;
  $925 = ($p$5|0)<($924|0);
  $$p$5 = $925 ? $924 : $p$5;
  $926 = (($pl$2) + ($$p$5))|0;
  $927 = ($w$1|0)<($926|0);
  $w$2 = $927 ? $926 : $w$1;
  $928 = $fl$6 & 73728;
  $929 = ($928|0)==(0);
  $930 = ($w$2|0)>($926|0);
  $or$cond$i75 = $929 & $930;
  if ($or$cond$i75) {
   $931 = (($w$2) - ($926))|0;
   $932 = ($931>>>0)>(256);
   $933 = $932 ? 256 : $931;
   _memset(($pad$i|0),32,($933|0))|0;
   $934 = ($931>>>0)>(255);
   if ($934) {
    $$01$i77 = $931;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $935 = (($$01$i77) + -256)|0;
     $936 = ($935>>>0)>(255);
     if ($936) {
      $$01$i77 = $935;
     } else {
      break;
     }
    }
    $937 = $931 & 255;
    $$0$lcssa$i79 = $937;
   } else {
    $$0$lcssa$i79 = $931;
   }
   (___fwritex($pad$i,$$0$lcssa$i79,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $938 = ($928|0)==(65536);
  $or$cond$i51 = $938 & $930;
  if ($or$cond$i51) {
   $939 = (($w$2) - ($926))|0;
   $940 = ($939>>>0)>(256);
   $941 = $940 ? 256 : $939;
   _memset(($pad$i|0),48,($941|0))|0;
   $942 = ($939>>>0)>(255);
   if ($942) {
    $$01$i53 = $939;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $943 = (($$01$i53) + -256)|0;
     $944 = ($943>>>0)>(255);
     if ($944) {
      $$01$i53 = $943;
     } else {
      break;
     }
    }
    $945 = $939 & 255;
    $$0$lcssa$i55 = $945;
   } else {
    $$0$lcssa$i55 = $939;
   }
   (___fwritex($pad$i,$$0$lcssa$i55,$f)|0);
  }
  $946 = ($$p$5|0)>($924|0);
  if ($946) {
   $947 = (($$p$5) - ($924))|0;
   $948 = ($947>>>0)>(256);
   $949 = $948 ? 256 : $947;
   _memset(($pad$i|0),48,($949|0))|0;
   $950 = ($947>>>0)>(255);
   if ($950) {
    $$01$i38 = $947;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $951 = (($$01$i38) + -256)|0;
     $952 = ($951>>>0)>(255);
     if ($952) {
      $$01$i38 = $951;
     } else {
      break;
     }
    }
    $953 = $947 & 255;
    $$0$lcssa$i40 = $953;
   } else {
    $$0$lcssa$i40 = $947;
   }
   (___fwritex($pad$i,$$0$lcssa$i40,$f)|0);
  }
  (___fwritex($a$2,$924,$f)|0);
  $954 = ($928|0)==(8192);
  $or$cond$i = $954 & $930;
  if (!($or$cond$i)) {
   $1029 = $1036;$1030 = $1037;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $955 = (($w$2) - ($926))|0;
  $956 = ($955>>>0)>(256);
  $957 = $956 ? 256 : $955;
  _memset(($pad$i|0),32,($957|0))|0;
  $958 = ($955>>>0)>(255);
  if ($958) {
   $$01$i = $955;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $959 = (($$01$i) + -256)|0;
    $960 = ($959>>>0)>(255);
    if ($960) {
     $$01$i = $959;
    } else {
     break;
    }
   }
   $961 = $955 & 255;
   $$0$lcssa$i = $961;
  } else {
   $$0$lcssa$i = $955;
  }
  (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  $1029 = $1036;$1030 = $1037;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 352) {
  $962 = ($f|0)==(0|0);
  if (!($962)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $963 = ($l10n$0|0)==(0);
  if ($963) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$2100 = 1;
  }
  while(1) {
   $964 = (($nl_type) + ($i$2100<<2)|0);
   $965 = HEAP32[$964>>2]|0;
   $966 = ($965|0)==(0);
   if ($966) {
    $i$397 = $i$2100;
    break;
   }
   $967 = (($nl_arg) + ($i$2100<<3)|0);
   $968 = ($965>>>0)>(20);
   L534: do {
    if (!($968)) {
     do {
      switch ($965|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $969 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$967>>2] = $969;
       break L534;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $970 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $971 = ($970|0)<(0);
       $972 = $971 << 31 >> 31;
       $973 = $967;
       $974 = $973;
       HEAP32[$974>>2] = $970;
       $975 = (($973) + 4)|0;
       $976 = $975;
       HEAP32[$976>>2] = $972;
       break L534;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $977 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $978 = $967;
       $979 = $978;
       HEAP32[$979>>2] = $977;
       $980 = (($978) + 4)|0;
       $981 = $980;
       HEAP32[$981>>2] = 0;
       break L534;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $982 = $arglist_current44;
       $983 = $982;
       $984 = HEAP32[$983>>2]|0;
       $985 = (($982) + 4)|0;
       $986 = $985;
       $987 = HEAP32[$986>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $988 = $967;
       $989 = $988;
       HEAP32[$989>>2] = $984;
       $990 = (($988) + 4)|0;
       $991 = $990;
       HEAP32[$991>>2] = $987;
       break L534;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $992 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $993 = $992&65535;
       $994 = $993 << 16 >> 16;
       $995 = ($994|0)<(0);
       $996 = $995 << 31 >> 31;
       $997 = $967;
       $998 = $997;
       HEAP32[$998>>2] = $994;
       $999 = (($997) + 4)|0;
       $1000 = $999;
       HEAP32[$1000>>2] = $996;
       break L534;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1001 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1001 & 65535;
       $1002 = $967;
       $1003 = $1002;
       HEAP32[$1003>>2] = $$mask1$i;
       $1004 = (($1002) + 4)|0;
       $1005 = $1004;
       HEAP32[$1005>>2] = 0;
       break L534;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1006 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1007 = $1006&255;
       $1008 = $1007 << 24 >> 24;
       $1009 = ($1008|0)<(0);
       $1010 = $1009 << 31 >> 31;
       $1011 = $967;
       $1012 = $1011;
       HEAP32[$1012>>2] = $1008;
       $1013 = (($1011) + 4)|0;
       $1014 = $1013;
       HEAP32[$1014>>2] = $1010;
       break L534;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1015 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1015 & 255;
       $1016 = $967;
       $1017 = $1016;
       HEAP32[$1017>>2] = $$mask$i;
       $1018 = (($1016) + 4)|0;
       $1019 = $1018;
       HEAP32[$1019>>2] = 0;
       break L534;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1020 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$967>>3] = $1020;
       break L534;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1021 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$967>>3] = $1021;
       break L534;
       break;
      }
      default: {
       break L534;
      }
      }
     } while(0);
    }
   } while(0);
   $1022 = (($i$2100) + 1)|0;
   $1023 = ($1022|0)<(10);
   if ($1023) {
    $i$2100 = $1022;
   } else {
    $$0 = 1;
    label = 370;
    break;
   }
  }
  if ((label|0) == 370) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1026 = (($nl_type) + ($i$397<<2)|0);
   $1027 = HEAP32[$1026>>2]|0;
   $1028 = ($1027|0)==(0);
   $1025 = (($i$397) + 1)|0;
   if (!($1028)) {
    $$0 = -1;
    label = 370;
    break;
   }
   $1024 = ($1025|0)<(10);
   if ($1024) {
    $i$397 = $1025;
   } else {
    $$0 = 1;
    label = 370;
    break;
   }
  }
  if ((label|0) == 370) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 370) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

  
  function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
    return FUNCTION_TABLE_iiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
  }


  function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    FUNCTION_TABLE_viiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0);
  }


  function dynCall_vi(index,a1) {
    index = index|0;
    a1=a1|0;
    FUNCTION_TABLE_vi[index&1023](a1|0);
  }


  function dynCall_vii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    FUNCTION_TABLE_vii[index&1023](a1|0,a2|0);
  }


  function dynCall_ii(index,a1) {
    index = index|0;
    a1=a1|0;
    return FUNCTION_TABLE_ii[index&1023](a1|0)|0;
  }


  function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
    return FUNCTION_TABLE_iiiiiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
  }


  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&1023](a1|0,a2|0,a3|0)|0;
  }


  function dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
    FUNCTION_TABLE_viiiiiiiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
  }


  function dynCall_viiiiid(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
    FUNCTION_TABLE_viiiiid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
  }


  function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
    FUNCTION_TABLE_viiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
  }


  function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
    FUNCTION_TABLE_viiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
  }


  function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
    FUNCTION_TABLE_viiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
  }


  function dynCall_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
    FUNCTION_TABLE_viiiiiid[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
  }


  function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
    FUNCTION_TABLE_viiiiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
  }


  function dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
    FUNCTION_TABLE_viiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
  }


  function dynCall_iii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return FUNCTION_TABLE_iii[index&1023](a1|0,a2|0)|0;
  }


  function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    return FUNCTION_TABLE_iiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
  }


  function dynCall_diii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return +FUNCTION_TABLE_diii[index&1023](a1|0,a2|0,a3|0);
  }


  function dynCall_i(index) {
    index = index|0;
    
    return FUNCTION_TABLE_i[index&1023]()|0;
  }


  function dynCall_iiiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    return FUNCTION_TABLE_iiiii[index&1023](a1|0,a2|0,a3|0,a4|0)|0;
  }


  function dynCall_viii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    FUNCTION_TABLE_viii[index&1023](a1|0,a2|0,a3|0);
  }


  function dynCall_v(index) {
    index = index|0;
    
    FUNCTION_TABLE_v[index&1023]();
  }


  function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
    return FUNCTION_TABLE_iiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
  }


  function dynCall_viiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
  }

function b0(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0; }
  function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1); }
  function b2(p0) { p0 = p0|0; nullFunc_vi(2); }
  function _freelocale__wrapper(p0) { p0 = p0|0; _freelocale(p0|0); }
  function b3(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(3); }
  function b4(p0) { p0 = p0|0; nullFunc_ii(4);return 0; }
  function _fclose__wrapper(p0) { p0 = p0|0; return _fclose(p0|0)|0; }
  function _pthread_mutex_unlock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0; }
  function _pthread_mutex_lock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_lock(p0|0)|0; }
  function _pthread_cond_broadcast__wrapper(p0) { p0 = p0|0; return _pthread_cond_broadcast(p0|0)|0; }
  function _uselocale__wrapper(p0) { p0 = p0|0; return _uselocale(p0|0)|0; }
  function b5(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(5);return 0; }
  function b6(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(6);return 0; }
  function _newlocale__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _newlocale(p0|0,p1|0,p2|0)|0; }
  function b7(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0;p13 = p13|0;p14 = p14|0; nullFunc_viiiiiiiiiiiiiii(7); }
  function b8(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_viiiiid(8); }
  function b9(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_viiiiiiii(9); }
  function b10(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(10); }
  function b11(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(11); }
  function b12(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = +p6; nullFunc_viiiiiid(12); }
  function b13(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(13); }
  function b14(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_viiiiiiiiii(14); }
  function b15(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(15);return 0; }
  function _strcpy__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _strcpy(p0|0,p1|0)|0; }
  function b16(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(16);return 0; }
  function b17(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(17);return +0; }
  function b18() { ; nullFunc_i(18);return 0; }
  function ___ctype_b_loc__wrapper() { ; return ___ctype_b_loc()|0; }
  function ___ctype_toupper_loc__wrapper() { ; return ___ctype_toupper_loc()|0; }
  function ___ctype_tolower_loc__wrapper() { ; return ___ctype_tolower_loc()|0; }
  function b19(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(19);return 0; }
  function _catgets__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _catgets(p0|0,p1|0,p2|0,p3|0)|0; }
  function b20(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(20); }
  function ___cxa_throw__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; ___cxa_throw(p0|0,p1|0,p2|0); }
  function b21() { ; nullFunc_v(21); }
  function ___cxa_end_catch__wrapper() { ; ___cxa_end_catch(); }
  function ___cxa_rethrow__wrapper() { ; ___cxa_rethrow(); }
  function b22(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(22);return 0; }
  function b23(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(23); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0];
  var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1
  ,b1,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_jjRKS4_,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1];
  var FUNCTION_TABLE_vi = [b2,__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,__ZN9ExceptionISt11logic_errorED2Ev,__ZN9ExceptionISt11logic_errorED0Ev,b2,__ZN9ExceptionISt13runtime_errorED2Ev,__ZN9ExceptionISt13runtime_errorED0Ev,b2,__ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED0Ev,__ZThn8_NSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev,__ZThn8_NSt3__113basic_fstreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_fstreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_fstreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev,b2,b2,b2,b2,b2,b2
  ,b2,b2,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__111__stdoutbufIwED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__110__stdinbufIwED0Ev,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__111__stdoutbufIcED0Ev,b2,b2,b2,b2
  ,b2,b2,b2,b2,__ZNSt3__110__stdinbufIcED0Ev,b2,b2,b2,b2,b2,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED1Ev,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,b2,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev
  ,__ZNSt3__18ios_baseD0Ev,__ZNSt3__114error_categoryD2Ev,__ZNSt3__119__iostream_categoryD0Ev,b2,b2,b2,b2,b2,__ZNSt3__17collateIcED1Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,b2,b2,b2,__ZNSt3__17collateIwED1Ev,__ZNSt3__17collateIwED0Ev,b2,b2,b2,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b2,b2,b2
  ,b2,b2,b2,b2,b2,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b2,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b2,__ZNSt3__110moneypunctIcLb0EED1Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__110moneypunctIcLb1EED1Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,__ZNSt3__110moneypunctIwLb0EED1Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__110moneypunctIwLb1EED1Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b2
  ,b2,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b2,b2,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b2,b2,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b2,b2,__ZNSt3__18messagesIcED1Ev,__ZNSt3__18messagesIcED0Ev,b2,b2,b2,__ZNSt3__18messagesIwED1Ev,__ZNSt3__18messagesIwED0Ev,b2,b2,b2,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,b2,b2,b2
  ,b2,b2,b2,b2,b2,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,b2,b2,b2,b2,b2,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,b2,b2,b2,b2,b2,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev
  ,__ZNSt3__15ctypeIwED0Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev
  ,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,b2,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b2,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt12out_of_rangeD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,b2,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b2,b2,b2,b2
  ,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,b2,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b2,b2,b2,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,b2,b2,b2,__ZN12CmdArgReaderC2Ev,b2,b2,b2,b2,__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEED2Ev,__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEENS_4lessIS6_EENS4_INS7_IKS6_SC_EEEEED2Ev,b2,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev,b2,b2,b2
  ,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__16localeD2Ev,b2,b2,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev,__ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv,b2,__ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED2Ev,__ZNSt3__112__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEEED2Ev,b2,b2,b2,b2,b2,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_free,b2,b2,b2,b2,b2,_freelocale__wrapper,b2,b2,__ZNSt3__112__do_nothingEPv,b2,__ZNSt3__121__throw_runtime_errorEPKc,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,b2,b2,b2,b2,b2,b2,b2,b2,b2,___cxx_global_array_dtor112,___cxx_global_array_dtor97,b2,___cxx_global_array_dtor73,___cxx_global_array_dtor48,___cxx_global_array_dtor45
  ,___cxx_global_array_dtor,b2,b2,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,__ZNSt3__18ios_base4InitD2Ev,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2];
  var FUNCTION_TABLE_vii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,b3,b3,b3
  ,b3,b3,b3,b3,b3,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,b3,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,b3,b3,b3,b3,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv
  ,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,b3,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,b3,b3,b3,b3,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,b3,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,b3,b3,b3,b3,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,b3,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNKSt3__18messagesIcE8do_closeEi,b3,b3,b3,b3,__ZNKSt3__18messagesIwE8do_closeEi,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,b3,b3,b3,b3,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEEC2ERKSC_,b3,b3,b3,b3,b3,__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,b3,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,b3,__ZNSt3__18ios_base4initEPv
  ,b3,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE,b3,b3,__ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv,__ZN9ExceptionISt11logic_errorEC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,b3,__ZN9ExceptionISt13runtime_errorEC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE,b3,b3,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_,__ZNKSt3__18ios_base6getlocEv,b3,b3,b3,__ZNSt3__18ios_base5clearEj,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,__ZN12CmdArgReader4initEiPPKc,b3,b3,b3,__ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,__ZNSt3__113basic_fstreamIcNS_11char_traitsIcEEED2Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__118__libcpp_refstringC2EPKc,b3,b3,__ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b3,b3,b3,b3,__ZNSt11logic_errorC2EPKc,b3,b3,__ZNSt3__18ios_base16__call_callbacksENS0_5eventE,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_,b3
  ,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt13runtime_errorC2EPKc,b3,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,b3,b3
  ,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw,b3,b3,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj,b3,b3,b3,b3,b3,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej,__ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_,__ZNSt3__17codecvtIwc11__mbstate_tEC2Ej,__ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_
  ,__ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_,b3,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj,b3,b3,_abort_message,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3];
  var FUNCTION_TABLE_ii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv
  ,b4,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,b4,b4,b4,b4,b4,__ZNKSt11logic_error4whatEv,b4,b4,__ZNKSt13runtime_error4whatEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv
  ,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,b4,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,b4,b4,b4,b4,b4,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__111__stdoutbufIcE4syncEv
  ,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,b4,b4,b4,b4,b4,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,__ZNKSt3__119__iostream_category4nameEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,b4,b4,b4,b4,b4,b4,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,b4,b4,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,b4,b4,b4,b4,b4,b4
  ,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,b4,b4
  ,b4,b4,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,b4,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,b4,b4,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,b4,b4,b4,b4,b4,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,b4,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,b4,b4,b4,b4,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,b4,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,b4
  ,b4,b4,b4,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,b4,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,b4,b4,b4,b4,b4,__ZNKSt9bad_alloc4whatEv,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt8bad_cast4whatEv,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__111char_traitsIcE6lengthEPKc,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_malloc
  ,b4,__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_,b4,__ZN12CmdArgReader8existArgERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZN12CmdArgReader6getArgIiEEPKT_RKNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE,__ZN12CmdArgReader6getArgINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEPKT_RKS7_,b4,b4,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv,b4,_fclose__wrapper,b4,b4,b4,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv,b4,b4,b4,b4,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,b4,b4,__Znwj,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_uselocale__wrapper,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,_wcslen,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_iiiiiiiiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b5
  ,b5,b5,b5];
  var FUNCTION_TABLE_iiii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,b6,b6,b6,b6
  ,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,b6,b6,b6,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,b6,b6,b6,b6,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,b6,b6,b6,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,b6,b6,b6,b6,b6,b6,__ZNKSt3__17collateIcE7do_hashEPKcS3_,b6,b6,b6,b6,__ZNKSt3__17collateIwE7do_hashEPKwS3_,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b6,b6,b6,b6,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b6,b6,b6,b6,b6,b6,b6,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,b6
  ,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,b6,b6,__ZNKSt3__15ctypeIcE9do_narrowEcc,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,__ZNKSt3__15ctypeIwE5do_isEtw,b6,b6,b6,b6,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,b6,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,b6,b6,__ZNKSt3__15ctypeIwE9do_narrowEwc,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b6,b6,b6
  ,b6,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,b6,b6,b6,b6,b6,b6,b6,b6,_sn_write,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__111char_traitsIcE7compareEPKcS3_j,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5eraseEjj,b6,b6,b6,b6,b6,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,_newlocale__wrapper,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b6,b6,b6
  ,b6,b6,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_wcrtomb,b6,b6,_mbtowc,_mbrlen,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_vasprintf,b6,_do_read,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6];
  var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,__ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,b7,__ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7];
  var FUNCTION_TABLE_viiiiid = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,b8,b8,b8,b8,b8,b8
  ,b8,b8,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8];
  var FUNCTION_TABLE_viiiiiiii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,b9,b9,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe
  ,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b9,b9,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9];
  var FUNCTION_TABLE_viiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,b10,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,b10,b10,b10,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,b10,b10,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,b10
  ,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,b10,b10,b10,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b10,b10,b10,b10,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10
  ,b10,b10,b10,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10];
  var FUNCTION_TABLE_viiiiiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd
  ,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b11,b11,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b11,b11,b11,b11,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,b11,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx
  ,b11,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,b11,b11,b11,b11,b11,b11,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b11,b11,b11,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b11,b11,__ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b11,b11,b11,__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11];
  var FUNCTION_TABLE_viiiiiid = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,b12,b12,b12,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12];
  var FUNCTION_TABLE_viiiiiiiii = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13];
  var FUNCTION_TABLE_viiiiiiiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri,b14,b14,b14,b14,b14,b14,__ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri
  ,b14,b14,b14,b14,__ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,b14,__ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14];
  var FUNCTION_TABLE_iii = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi,b15,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,b15,__ZNSt3__111__stdoutbufIwE8overflowEj,b15,b15,b15,b15,b15,__ZNSt3__110__stdinbufIwE9pbackfailEj,b15,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,b15,b15,b15,b15,b15,b15
  ,b15,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,b15,__ZNSt3__111__stdoutbufIcE8overflowEi,b15,b15,b15,b15,__ZNSt3__110__stdinbufIcE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__15ctypeIcE10do_toupperEc,b15,__ZNKSt3__15ctypeIcE10do_tolowerEc
  ,b15,__ZNKSt3__15ctypeIcE8do_widenEc,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,__ZNKSt3__15ctypeIwE10do_toupperEw,b15,__ZNKSt3__15ctypeIwE10do_tolowerEw,b15,__ZNKSt3__15ctypeIwE8do_widenEc,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_,b15,b15,_strcmp,b15,b15,b15,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,b15,__ZNSt3__13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4lessIS6_EENS4_INS_4pairIKS6_S6_EEEEEixERSA_,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__16locale9use_facetERNS0_2idE,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__111char_traitsIcE2eqEcc,b15,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc,b15,b15,b15
  ,_strcpy__wrapper,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__16locale9has_facetERNS0_2idE,b15,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,_isxdigit_l,_isdigit_l,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15];
  var FUNCTION_TABLE_iiiiii = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,b16,b16,b16,b16,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,b16,b16,b16,b16,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b16,b16,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,b16,b16,b16,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b16,b16,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,b16,b16,b16,b16,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b16,b16,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,b16,b16
  ,b16,b16,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b16,b16,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7replaceEjjPKcj,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,_wcsnrtombs,b16,_mbsnrtowcs,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16];
  var FUNCTION_TABLE_diii = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17];
  var FUNCTION_TABLE_i = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,__ZNSt3__16__clocEv,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__16locale5__imp12make_classicEv,b18,__ZNSt3__16locale5__imp11make_globalEv,__ZNSt3__16locale8__globalEv,b18,b18,___ctype_b_loc__wrapper,___ctype_toupper_loc__wrapper,___ctype_tolower_loc__wrapper,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,___cxa_get_globals_fast,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18];
  var FUNCTION_TABLE_iiiii = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,b19,b19,b19,b19,b19,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,_shrLog,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z,b19,b19,b19,__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz,b19,b19,b19,b19,b19,b19,b19,b19,b19,_mbsrtowcs,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,_catgets__wrapper,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,_mbrtowc,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji,__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19];
  var FUNCTION_TABLE_viii = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,__ZNKSt3__114error_category23default_error_conditionEi,b20,b20,__ZNKSt3__119__iostream_category7messageEi,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,b20,b20,b20,b20,b20,b20,b20,b20,__ZN9ExceptionISt13runtime_errorE8throw_itEPKciS3_,b20,b20,b20,b20,b20,b20,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,b20
  ,b20,b20,b20,b20,b20,b20,___cxa_throw__wrapper,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__Z21check_callback_workerPciPv,b20,b20,b20,b20,__ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b20,b20,b20,b20,b20,b20,b20,__ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE,b20,b20,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,__ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b20,b20,b20,b20,b20
  ,b20,__ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20];
  var FUNCTION_TABLE_v = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZL25default_terminate_handlerv,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,___cxa_end_catch__wrapper,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,___cxa_rethrow__wrapper,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,__ZSt17__throw_bad_allocv,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21];
  var FUNCTION_TABLE_iiiiiiiii = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,b22,b22,b22,b22,b22,b22,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b22,b22,b22,b22,b22,b22
  ,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22];
  var FUNCTION_TABLE_viiii = [b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNKSt3__17collateIcE12do_transformEPKcS3_,b23,b23,b23,b23,__ZNKSt3__17collateIwE12do_transformEPKwS3_,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi
  ,b23,b23,b23,b23,b23,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b23,b23,b23,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSI_SI_,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4pairIPKSt9type_infoPvEEEENS_19__map_value_compareIS7_SE_NS_4lessIS7_EELb1EEENS5_ISE_EEE16__insert_node_atEPNS_16__tree_node_baseISC_EERSN_SN_,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23];

  return { ___cxa_can_catch: ___cxa_can_catch, _free: _free, _main: _main, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _strlen: _strlen, _bitshift64Lshr: _bitshift64Lshr, _strcpy: _strcpy, _bitshift64Shl: _bitshift64Shl, __GLOBAL__I_a: __GLOBAL__I_a, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, dynCall_viiiiid: dynCall_viiiiid, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiid: dynCall_viiiiiid, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_diii: dynCall_diii, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__main.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcpy.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real___GLOBAL__I_a = asm["__GLOBAL__I_a"]; asm["__GLOBAL__I_a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__I_a.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_runPostSets.apply(null, arguments);
};
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var __GLOBAL__I_a = Module["__GLOBAL__I_a"] = asm["__GLOBAL__I_a"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiid = Module["dynCall_viiiiiid"] = asm["dynCall_viiiiiid"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



