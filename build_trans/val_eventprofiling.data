
/* WebCL Validator JSON header
{
    "version" : "1.0",
    "kernels" :
        {
            "ker" :
                {
                    "A" :
                        {
                            "index" : 0,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_A_size"
                        },
                    "_wcl_A_size" :
                        {
                            "index" : 1,
                            "type" : "ulong"
                        },
                    "B" :
                        {
                            "index" : 2,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_B_size"
                        },
                    "_wcl_B_size" :
                        {
                            "index" : 3,
                            "type" : "ulong"
                        },
                    "C" :
                        {
                            "index" : 4,
                            "type" : "int *",
                            "address-space" : "global",
                            "size-parameter" : "_wcl_C_size"
                        },
                    "_wcl_C_size" :
                        {
                            "index" : 5,
                            "type" : "ulong"
                        },
                    "width" :
                        {
                            "index" : 6,
                            "type" : "int"
                        }
                }
        }
}
*/

// WebCL Validator: validation stage.
#define _WCL_ADDRESS_SPACE_private_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_private_ALIGNMENT (8/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_global_MIN (((32 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_global_ALIGNMENT (32/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_local_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_local_ALIGNMENT (8/CHAR_BIT)
#define _WCL_ADDRESS_SPACE_constant_MIN (((8 + (CHAR_BIT - 1)) / CHAR_BIT))
#define _WCL_ADDRESS_SPACE_constant_ALIGNMENT (8/CHAR_BIT)
typedef struct {
    __global int *ker__A_min;
    __global int *ker__A_max;
    __global int *ker__B_min;
    __global int *ker__B_max;
    __global int *ker__C_min;
    __global int *ker__C_max;
} _WclGlobalLimits;

typedef struct {
    _WclGlobalLimits gl;
    __global uint *gn;
} _WclProgramAllocations;

__constant uint _wcl_constant_null[_WCL_ADDRESS_SPACE_constant_MIN] = { 0 };

// => General code that doesn't depend on input.

#define _WCL_MEMCPY(dst, src) for(ulong i = 0; i < sizeof((src))/sizeof((src)[0]); i++) { (dst)[i] = (src)[i]; }

#define _WCL_LAST(type, ptr) (((type)(ptr)) - 1)
#define _WCL_FILLCHAR ((uchar)0xCC)

// POCL crashes at run time if the parameters are local character
// pointers.
typedef uint _WclInitType;

// NOTE: this expects that null pointer is type of uint*
#define _WCL_SET_NULL(type, req_bytes, min, max, null) ( ((((type)max)-((type)min))*sizeof(uint) >= req_bytes) ? ((type)min) : (null) )

#ifdef cl_khr_initialize_memory
#pragma OPENCL EXTENSION cl_khr_initialize_memory : enable
#define _WCL_LOCAL_RANGE_INIT(begin, end)
#else

#define _WCL_LOCAL_RANGE_INIT(begin, end) do {               \
    __local uchar *start = (__local uchar *)begin;           \
    __local uchar *stop = (__local uchar *)end;              \
    const size_t z_items = get_local_size(2);                \
    const size_t yz_items = get_local_size(1) * z_items;     \
    const size_t xyz_items = get_local_size(0) * yz_items;   \
    const size_t item_index =                                \
        (get_local_id(0) * yz_items) +                       \
        (get_local_id(1) * z_items) +                        \
        get_local_id(2);                                     \
    size_t item_count = stop - start;                        \
    size_t items_per_kernel = item_count / xyz_items;        \
    size_t items_offset = items_per_kernel * item_index;     \
    size_t reminders = item_count % xyz_items;               \
    if (item_index < reminders) {                            \
        start[xyz_items*items_per_kernel + item_index] = _WCL_FILLCHAR; \
    }                                                                   \
    for (size_t i = 0; i < items_per_kernel; i++) {                     \
        start[items_offset+i] = _WCL_FILLCHAR;                          \
    }                                                                   \
} while (0)                                                             \

#endif // cl_khr_initialize_memory

// <= General code that doesn't depend on input.

bool _wcl_addr_check_global_3__u_uglobal__int__Ptr(__global int *addr, unsigned size, __global int * min0, __global int * max0, __global int * min1, __global int * max1, __global int * min2, __global int * max2)
{
      return 0
        || ( ((addr) >= (min0)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max0)) )
        || ( ((addr) >= (min1)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max1)) )
        || ( ((addr) >= (min2)) && ((addr + size - 1) <= _WCL_LAST(__global int *, max2)) );
}
__global int *_wcl_addr_clamp_global_3__u_uglobal__int__Ptr(__global int *addr, unsigned size, __global int * min0, __global int * max0, __global int * min1, __global int * max1, __global int * min2, __global int * max2, __global int * asnull)
{
     return _wcl_addr_check_global_3__u_uglobal__int__Ptr(addr, size, min0, max0, min1, max1, min2, max2) ? addr : asnull;
}


// WebCL Validator: matching stage 2.
// WebCL Validator: matching stage 1.
__kernel void ker(__global int * A, ulong _wcl_A_size, __global int * B, ulong _wcl_B_size, __global int * C, ulong _wcl_C_size, int width)
{
    __local uint _wcl_local_null[_WCL_ADDRESS_SPACE_local_MIN];

    _WclProgramAllocations _wcl_allocations_allocation = {
        { &A[0], &A[_wcl_A_size],&B[0], &B[_wcl_B_size],&C[0], &C[_wcl_C_size] },
        0
    };
    _WclProgramAllocations *_wcl_allocs = &_wcl_allocations_allocation;
    _wcl_allocs->gn = _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ker__A_min, _wcl_allocs->gl.ker__A_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ker__B_min, _wcl_allocs->gl.ker__B_max, _WCL_SET_NULL(__global uint*, _WCL_ADDRESS_SPACE_global_MIN,_wcl_allocs->gl.ker__C_min, _wcl_allocs->gl.ker__C_max, (__global uint*)0)));
    if (_wcl_allocs->gn == (__global uint*)0) return; // not enough space to meet the minimum access. Would be great if we could give info about the problem for the user. 

 int row_no = 128*get_global_id(0) + get_global_id(1);

 int sum = 0;
 if(row_no < width){
  for(int i=0;i<width;i++){
   sum = 0;
   for(int j=0;j<width;j++){
    sum = sum + ((*(_wcl_addr_clamp_global_3__u_uglobal__int__Ptr((A)+(width*row_no+j), 1, (__global int *)_wcl_allocs->gl.ker__A_min, (__global int *)_wcl_allocs->gl.ker__A_max, (__global int *)_wcl_allocs->gl.ker__B_min, (__global int *)_wcl_allocs->gl.ker__B_max, (__global int *)_wcl_allocs->gl.ker__C_min, (__global int *)_wcl_allocs->gl.ker__C_max, (__global int *)_wcl_allocs->gn)))*(*(_wcl_addr_clamp_global_3__u_uglobal__int__Ptr((B)+(width*j+i), 1, (__global int *)_wcl_allocs->gl.ker__A_min, (__global int *)_wcl_allocs->gl.ker__A_max, (__global int *)_wcl_allocs->gl.ker__B_min, (__global int *)_wcl_allocs->gl.ker__B_max, (__global int *)_wcl_allocs->gl.ker__C_min, (__global int *)_wcl_allocs->gl.ker__C_max, (__global int *)_wcl_allocs->gn))));
   }
   (*(_wcl_addr_clamp_global_3__u_uglobal__int__Ptr((C)+(width*row_no+i), 1, (__global int *)_wcl_allocs->gl.ker__A_min, (__global int *)_wcl_allocs->gl.ker__A_max, (__global int *)_wcl_allocs->gl.ker__B_min, (__global int *)_wcl_allocs->gl.ker__B_max, (__global int *)_wcl_allocs->gl.ker__C_min, (__global int *)_wcl_allocs->gl.ker__C_max, (__global int *)_wcl_allocs->gn))) = sum;
  }
 }
}
