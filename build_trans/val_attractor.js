
var Module;
if (typeof Module === 'undefined') Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');
if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    }
    var PACKAGE_NAME = '../build/val_attractor.data';
    var REMOTE_PACKAGE_NAME = (Module['filePackagePrefixURL'] || '') + 'val_attractor.data';
    var REMOTE_PACKAGE_SIZE = 22271;
    var PACKAGE_UUID = '5384501b-c03d-46da-8b55-36927f830623';
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onload = function(event) {
        var packageData = xhr.response;
        callback(packageData);
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

function assert(check, msg) {
  if (!check) throw msg + new Error().stack;
}
Module['FS_createPath']('/', 'kernel', true, true);
Module['FS_createPath']('/', 'shader', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;
        Module['FS_createPreloadedFile'](this.name, null, byteArray, true, true, function() {
          Module['removeRunDependency']('fp ' + that.name);
        }, function() {
          if (that.audio) {
            Module['removeRunDependency']('fp ' + that.name); // workaround for chromium bug 124926 (still no audio with this, but at least we don't hang)
          } else {
            Module.printErr('Preloading file ' + that.name + ' failed');
          }
        }, false, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        this.requests[this.name] = null;
      },
    };
      new DataRequest(0, 16860, 0, 0).open('GET', '/kernel/lorenz.cl');
    new DataRequest(16860, 20763, 0, 0).open('GET', '/shader/lorenz.frag');
    new DataRequest(20763, 22271, 0, 0).open('GET', '/shader/lorenz.vert');

    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
      // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though.
      var ptr = Module['_malloc'](byteArray.length);
      Module['HEAPU8'].set(byteArray, ptr);
      DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
          DataRequest.prototype.requests["/kernel/lorenz.cl"].onload();
          DataRequest.prototype.requests["/shader/lorenz.frag"].onload();
          DataRequest.prototype.requests["/shader/lorenz.vert"].onload();
          Module['removeRunDependency']('datafile_../build/val_attractor.data');

    };
    Module['addRunDependency']('datafile_../build/val_attractor.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    this['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    code = Pointer_stringify(code);
    if (code[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (code.indexOf('"', 1) === code.length-1) {
        code = code.substr(1, code.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + code + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + code + ' })'); // new Function does not allow upvars in node
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    return rawList ? list : ret + flushList();
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 367001600;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module.printErr('Exiting runtime. Any attempt to access the compiled C code may fail from now. If you want to keep the runtime alive, set Module["noExitRuntime"] = true or build with -s NO_EXIT_RUNTIME=1');
  }
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===
var __ZTVN10__cxxabiv117__class_type_infoE = 17224;
var __ZTVN10__cxxabiv120__si_class_type_infoE = 17264;




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(18091);
/* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__I_a() } }, { func: function() { __GLOBAL__I_a121() } }, { func: function() { __GLOBAL__I_a149() } }, { func: function() { __GLOBAL__I_a263() } });


/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,72,2,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,117,110,97,98,108,101,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,71,76,70,87,0,0,0,0,0,0,0,115,114,99,47,65,112,112,108,105,99,97,116,105,111,110,46,99,112,112,0,0,0,0,0,119,105,110,100,111,119,84,105,116,108,101,0,0,0,0,0,117,110,97,98,108,101,32,116,111,32,99,114,101,97,116,101,32,71,76,70,87,32,119,105,110,100,111,119,0,0,0,0,117,110,97,98,108,101,32,116,111,32,105,110,105,116,105,97,108,105,122,101,32,71,76,69,87,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,91,37,115,93,32,80,97,114,116,105,99,108,101,115,58,32,37,100,32,32,68,105,115,112,108,97,121,58,32,37,100,32,102,112,115,32,40,37,115,37,115,41,10,0,0,0,0,0,103,112,117,68,101,118,105,99,101,0,0,0,0,0,0,0,71,80,85,0,0,0,0,0,67,80,85,0,0,0,0,0,110,80,97,114,116,105,99,108,101,115,0,0,0,0,0,0,67,76,95,71,76,95,105,110,116,101,114,111,112,0,0,0,97,116,116,97,99,104,101,100,0,0,0,0,0,0,0,0,99,111,112,121,105,110,103,0,102,105,108,116,101,114,105,110,103,0,0,0,0,0,0,0,38,102,105,108,116,101,114,0,0,0,0,0,0,0,0,0,118,101,114,116,101,120,83,104,97,100,101,114,70,105,108,101,110,97,109,101,0,0,0,0,115,104,97,100,101,114,47,108,111,114,101,110,122,46,118,101,114,116,0,0,0,0,0,0,102,114,97,103,109,101,110,116,83,104,97,100,101,114,70,105,108,101,110,97,109,101,0,0,115,104,97,100,101,114,47,108,111,114,101,110,122,46,102,114,97,103,0,0,0,0,0,0,107,101,114,110,101,108,70,105,108,101,110,97,109,101,0,0,107,101,114,110,101,108,47,108,111,114,101,110,122,46,99,108,0,0,0,0,0,0,0,0,109,101,109,111,114,121,32,97,108,108,111,99,97,116,105,111,110,32,102,97,105,108,101,100,0,0,0,0,0,0,0,0,112,111,115,0,0,0,0,0,99,111,108,111,114,0,0,0,108,105,102,101,116,105,109,101,0,0,0,0,0,0,0,0,49,49,65,112,112,108,105,99,97,116,105,111,110,0,0,0,80,67,0,0,56,2,0,0,0,0,0,0,0,0,0,0,117,110,97,98,108,101,32,116,111,32,99,114,101,97,116,101,32,100,101,109,111,0,0,0,115,114,99,47,68,101,109,111,46,99,112,112,0,0,0,0,32,105,110,32,0,0,0,0,44,32,108,105,110,101,32,0,64,0,0,0,0,0,0,0,64,3,0,0,3,0,0,0,4,0,0,0,56,0,0,0,248,255,255,255,64,3,0,0,5,0,0,0,6,0,0,0,192,255,255,255,192,255,255,255,64,3,0,0,7,0,0,0,8,0,0,0,0,0,0,0,156,2,0,0,92,3,0,0,156,3,0,0,176,3,0,0,196,3,0,0,216,3,0,0,132,3,0,0,112,3,0,0,196,2,0,0,176,2,0,0,78,83,116,51,95,95,49,49,56,98,97,115,105,99,95,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,0,120,67,0,0,248,2,0,0,240,28,0,0,0,0,0,0,64,0,0,0,0,0,0,0,240,28,0,0,9,0,0,0,10,0,0,0,56,0,0,0,248,255,255,255,240,28,0,0,11,0,0,0,12,0,0,0,192,255,255,255,192,255,255,255,240,28,0,0,13,0,0,0,14,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,208,27,0,0,15,0,0,0,16,0,0,0,192,255,255,255,192,255,255,255,208,27,0,0,17,0,0,0,18,0,0,0,56,0,0,0,0,0,0,0,96,28,0,0,19,0,0,0,20,0,0,0,200,255,255,255,200,255,255,255,96,28,0,0,21,0,0,0,22,0,0,0,0,0,0,0,104,4,0,0,23,0,0,0,24,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,105,110,103,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,0,0,0,0,120,67,0,0,32,4,0,0,88,27,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,117,110,97,98,108,101,32,116,111,32,111,112,101,110,32,115,104,97,100,101,114,32,102,105,108,101,32,0,0,0,0,0,115,114,99,47,103,108,116,111,111,108,115,46,99,112,112,0,117,110,97,98,108,101,32,116,111,32,99,114,101,97,116,101,32,115,104,97,100,101,114,32,111,98,106,101,99,116,0,0,83,104,97,100,101,114,32,99,111,109,112,105,108,101,32,108,111,103,58,32,0,0,0,0,102,97,105,108,101,100,32,116,111,32,99,111,109,112,105,108,101,32,115,104,97,100,101,114,32,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,208,5,0,0,25,0,0,0,26,0,0,0,148,255,255,255,148,255,255,255,208,5,0,0,27,0,0,0,28,0,0,0,116,5,0,0,236,5,0,0,0,6,0,0,136,5,0,0,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,105,102,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,120,67,0,0,160,5,0,0,208,27,0,0,0,0,0,0,108,0,0,0,0,0,0,0,208,27,0,0,15,0,0,0,16,0,0,0,148,255,255,255,148,255,255,255,208,27,0,0,17,0,0,0,18,0,0,0,0,0,0,0,120,6,0,0,29,0,0,0,30,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,5,0,0,0,2,0,0,0,2,0,0,0,6,0,0,0,4,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,102,105,108,101,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,120,67,0,0,72,6,0,0,88,27,0,0,0,0,0,0,119,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,114,0,0,0,0,0,0,0,114,43,0,0,0,0,0,0,119,43,0,0,0,0,0,0,97,43,0,0,0,0,0,0,119,98,0,0,0,0,0,0,97,98,0,0,0,0,0,0,114,98,0,0,0,0,0,0,114,43,98,0,0,0,0,0,119,43,98,0,0,0,0,0,97,43,98,0,0,0,0,0,0,0,0,0,224,8,0,0,31,0,0,0,32,0,0,0,1,0,0,0,33,0,0,0,34,0,0,0,1,0,0,0,118,101,114,116,101,120,83,104,97,100,101,114,70,105,108,101,110,97,109,101,0,0,0,0,102,114,97,103,109,101,110,116,83,104,97,100,101,114,70,105,108,101,110,97,109,101,0,0,103,101,111,109,101,116,114,121,83,104,97,100,101,114,70,105,108,101,110,97,109,101,0,0,117,110,97,98,108,101,32,116,111,32,99,114,101,97,116,101,32,71,76,83,76,32,112,114,111,103,114,97,109,0,0,0,115,114,99,47,76,111,114,101,110,122,65,116,116,114,97,99,116,111,114,68,101,109,111,46,99,112,112,0,0,0,0,0,118,101,114,116,101,120,80,111,115,0,0,0,0,0,0,0,118,101,114,116,101,120,67,111,108,111,114,0,0,0,0,0,118,101,114,116,101,120,84,101,120,67,111,111,114,100,0,0,71,76,83,76,32,112,114,111,103,114,97,109,32,98,117,105,108,100,32,102,97,105,108,101,100,0,0,0,0,0,0,0,110,80,97,114,116,105,99,108,101,115,0,0,0,0,0,0,112,111,115,0,0,0,0,0,99,111,108,111,114,0,0,0,67,76,95,71,76,95,105,110,116,101,114,111,112,0,0,0,118,98,111,80,111,115,0,0,118,98,111,67,111,108,111,114,0,0,0,0,0,0,0,0,102,105,108,116,101,114,105,110,103,0,0,0,0,0,0,0,0,0,128,191,0,0,128,191,0,0,0,0,0,0,128,63,0,0,128,191,0,0,0,0,0,0,128,63,0,0,128,63,0,0,0,0,0,0,128,191,0,0,128,191,0,0,0,0,0,0,128,63,0,0,128,63,0,0,0,0,0,0,128,191,0,0,128,63,0,0,0,0,116,105,109,101,0,0,0,0,77,86,80,0,0,0,0,0,116,97,115,107,0,0,0,0,119,105,110,100,111,119,87,105,100,116,104,0,0,0,0,0,119,105,110,100,111,119,72,101,105,103,104,116,0,0,0,0,49,57,76,111,114,101,110,122,65,116,116,114,97,99,116,111,114,68,101,109,111,0,0,0,52,68,101,109,111,0,0,0,80,67,0,0,208,8,0,0,120,67,0,0,184,8,0,0,216,8,0,0,0,0,0,0,105,32,60,32,116,104,105,115,45,62,108,101,110,103,116,104,40,41,0,0,0,0,0,0,46,47,103,108,109,47,99,111,114,101,47,116,121,112,101,95,118,101,99,52,46,105,110,108,0,0,0,0,0,0,0,0,111,112,101,114,97,116,111,114,91,93,0,0,0,0,0,0,46,47,103,108,109,47,99,111,114,101,47,116,121,112,101,95,109,97,116,52,120,52,46,105,110,108,0,0,0,0,0,0,0,0,0,0,216,8,0,0,35,0,0,0,36,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,11,0,0,37,0,0,0,38,0,0,0,39,0,0,0,1,0,0,0,78,50,99,108,53,69,114,114,111,114,69,0,0,0,0,0,120,67,0,0,168,9,0,0,0,0,0,0,0,0,0,0,79,112,101,110,67,76,32,101,114,114,111,114,44,32,0,0,32,0,0,0,0,0,0,0,115,114,99,47,76,111,114,101,110,122,65,116,116,114,97,99,116,111,114,79,112,101,110,67,76,83,111,108,118,101,114,46,99,112,112,0,0,0,0,0,110,111,32,79,112,101,110,67,76,32,112,108,97,116,102,111,114,109,115,32,102,111,117,110,100,0,0,0,0,0,0,0,103,112,117,68,101,118,105,99,101,0,0,0,0,0,0,0,110,111,32,79,112,101,110,67,76,32,100,101,118,105,99,101,115,32,102,111,117,110,100,0,107,101,114,110,101,108,70,105,108,101,110,97,109,101,0,0,117,110,97,98,108,101,32,116,111,32,111,112,101,110,32,107,101,114,110,101,108,32,102,105,108,101,0,0,0,0,0,0,79,112,101,110,67,76,32,98,117,105,108,100,32,102,97,105,108,101,100,58,0,0,0,0,107,101,114,110,101,108,83,116,101,112,0,0,0,0,0,0,110,80,97,114,116,105,99,108,101,115,0,0,0,0,0,0,67,76,95,71,76,95,105,110,116,101,114,111,112,0,0,0,118,98,111,80,111,115,0,0,118,98,111,67,111,108,111,114,0,0,0,0,0,0,0,0,112,111,115,0,0,0,0,0,99,111,108,111,114,0,0,0,108,105,102,101,116,105,109,101,0,0,0,0,0,0,0,0,50,55,76,111,114,101,110,122,65,116,116,114,97,99,116,111,114,79,112,101,110,67,76,83,111,108,118,101,114,0,0,0,54,83,111,108,118,101,114,0,80,67,0,0,32,11,0,0,120,67,0,0,0,11,0,0,40,11,0,0,0,0,0,0,99,108,83,101,116,75,101,114,110,101,108,65,114,103,0,0,0,0,0,0,184,9,0,0,40,0,0,0,41,0,0,0,7,0,0,0,0,0,0,0,101,109,112,116,121,0,0,0,99,108,71,101,116,80,114,111,103,114,97,109,66,117,105,108,100,73,110,102,111,0,0,0,56,0,0,0,0,0,0,0,8,12,0,0,42,0,0,0,43,0,0,0,200,255,255,255,200,255,255,255,8,12,0,0,44,0,0,0,45,0,0,0,148,11,0,0,36,12,0,0,56,12,0,0,168,11,0,0,78,83,116,51,95,95,49,49,57,98,97,115,105,99,95,111,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,120,67,0,0,192,11,0,0,96,28,0,0,0,0,0,0,56,0,0,0,0,0,0,0,96,28,0,0,19,0,0,0,20,0,0,0,200,255,255,255,200,255,255,255,96,28,0,0,21,0,0,0,22,0,0,0,99,108,71,101,116,67,111,110,116,101,120,116,73,110,102,111,0,0,0,0,0,0,0,0,99,108,69,110,113,117,101,117,101,82,101,97,100,66,117,102,102,101,114,0,0,0,0,0,99,108,70,105,110,105,115,104,0,0,0,0,0,0,0,0,99,108,69,110,113,117,101,117,101,82,101,108,101,97,115,101,71,76,79,98,106,101,99,116,115,0,0,0,0,0,0,0,99,108,69,110,113,117,101,117,101,78,68,82,97,110,103,101,75,101,114,110,101,108,0,0,99,108,69,110,113,117,101,117,101,65,99,113,117,105,114,101,71,76,79,98,106,101,99,116,115,0,0,0,0,0,0,0,99,108,67,114,101,97,116,101,66,117,102,102,101,114,0,0,99,108,67,114,101,97,116,101,70,114,111,109,71,76,66,117,102,102,101,114,0,0,0,0,99,108,67,114,101,97,116,101,67,111,109,109,97,110,100,81,117,101,117,101,0,0,0,0,99,108,67,114,101,97,116,101,75,101,114,110,101,108,0,0,99,108,66,117,105,108,100,80,114,111,103,114,97,109,0,0,99,108,67,114,101,97,116,101,80,114,111,103,114,97,109,87,105,116,104,83,111,117,114,99,101,0,0,0,0,0,0,0,99,108,67,114,101,97,116,101,67,111,110,116,101,120,116,70,114,111,109,84,121,112,101,0,99,108,71,101,116,80,108,97,116,102,111,114,109,73,68,115,0,0,0,0,0,0,0,0,0,0,0,0,40,11,0,0,46,0,0,0,47,0,0,0,1,0,0,0,1,0,0,0,119,105,110,100,111,119,84,105,116,108,101,0,0,0,0,0,68,101,109,111,32,65,84,0,99,112,117,0,0,0,0,0,103,112,117,0,0,0,0,0,105,110,116,101,114,111,112,0,102,105,108,116,101,114,0,0,80,97,114,97,109,101,116,101,114,32,100,101,116,101,99,116,32,37,115,32,100,101,118,105,99,101,10,0,0,0,0,0,71,80,85,0,0,0,0,0,67,80,85,0,0,0,0,0,103,112,117,68,101,118,105,99,101,0,0,0,0,0,0,0,67,76,95,71,76,95,105,110,116,101,114,111,112,0,0,0,102,105,108,116,101,114,105,110,103,0,0,0,0,0,0,0,69,82,82,79,82,58,32,102,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,97,112,112,108,105,99,97,116,105,111,110,0,0,0,0,0,69,82,82,79,82,58,32,117,110,107,110,111,119,110,32,101,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,0,69,82,82,79,82,58,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,101,109,111,32,109,117,115,116,32,98,101,32,99,114,101,97,116,101,32,98,101,102,111,114,101,32,115,111,108,118,101,114,0,0,0,0,0,0,0,115,114,99,47,83,111,108,118,101,114,46,99,112,112,0,0,117,110,97,98,108,101,32,116,111,32,99,114,101,97,116,101,32,115,111,108,118,101,114], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([128,19,0,0,48,0,0,0,49,0,0,0,3,0,0,0,5,0,0,0,3,0,0,0,3,0,0,0,8,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,11,0,0,0,5,0,0,0,7,0,0,0,6,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,120,67,0,0,96,19,0,0,152,27,0,0,0,0,0,0,0,0,0,0,232,19,0,0,50,0,0,0,51,0,0,0,4,0,0,0,5,0,0,0,3,0,0,0,3,0,0,0,12,0,0,0,9,0,0,0,6,0,0,0,13,0,0,0,14,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,120,67,0,0,208,19,0,0,152,27,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,0,0,0,0,128,20,0,0,52,0,0,0,53,0,0,0,5,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,15,0,0,0,2,0,0,0,2,0,0,0,16,0,0,0,4,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,120,67,0,0,96,20,0,0,88,27,0,0,0,0,0,0,0,0,0,0,232,20,0,0,54,0,0,0,55,0,0,0,6,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,17,0,0,0,18,0,0,0,11,0,0,0,3,0,0,0,12,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,120,67,0,0,208,20,0,0,88,27,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,80,67,0,0,248,20,0,0,0,0,0,0,96,21,0,0,56,0,0,0,57,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,200,21,0,0,58,0,0,0,59,0,0,0,20,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,120,67,0,0,80,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,21,0,0,56,0,0,0,60,0,0,0,19,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,120,67,0,0,136,21,0,0,96,21,0,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,120,67,0,0,176,21,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,22,0,0,58,0,0,0,61,0,0,0,20,0,0,0,0,0,0,0,83,116,49,52,111,118,101,114,102,108,111,119,95,101,114,114,111,114,0,0,0,0,0,0,120,67,0,0,240,21,0,0,200,21,0,0,0,0,0,0,58,32,0,0,0,0,0,0,0,0,0,0,80,22,0,0,62,0,0,0,63,0,0,0,20,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,120,67,0,0,56,22,0,0,200,21,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,80,67,0,0,96,22,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,120,67,0,0,136,22,0,0,128,22,0,0,0,0,0,0,0,0,0,0,2,0,0,0,3,0,0,0,5,0,0,0,7,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,29,0,0,0,31,0,0,0,37,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,53,0,0,0,59,0,0,0,61,0,0,0,67,0,0,0,71,0,0,0,73,0,0,0,79,0,0,0,83,0,0,0,89,0,0,0,97,0,0,0,101,0,0,0,103,0,0,0,107,0,0,0,109,0,0,0,113,0,0,0,127,0,0,0,131,0,0,0,137,0,0,0,139,0,0,0,149,0,0,0,151,0,0,0,157,0,0,0,163,0,0,0,167,0,0,0,173,0,0,0,179,0,0,0,181,0,0,0,191,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,211,0,0,0,1,0,0,0,11,0,0,0,13,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,29,0,0,0,31,0,0,0,37,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,53,0,0,0,59,0,0,0,61,0,0,0,67,0,0,0,71,0,0,0,73,0,0,0,79,0,0,0,83,0,0,0,89,0,0,0,97,0,0,0,101,0,0,0,103,0,0,0,107,0,0,0,109,0,0,0,113,0,0,0,121,0,0,0,127,0,0,0,131,0,0,0,137,0,0,0,139,0,0,0,143,0,0,0,149,0,0,0,151,0,0,0,157,0,0,0,163,0,0,0,167,0,0,0,169,0,0,0,173,0,0,0,179,0,0,0,181,0,0,0,187,0,0,0,191,0,0,0,193,0,0,0,197,0,0,0,199,0,0,0,209,0,0,0,95,95,110,101,120,116,95,112,114,105,109,101,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,0,0,0,0,208,26,0,0,64,0,0,0,65,0,0,0,0,0,0,0,88,27,0,0,66,0,0,0,67,0,0,0,1,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,16,0,0,0,4,0,0,0,9,0,0,0,3,0,0,0,12,0,0,0,0,0,0,0,152,27,0,0,68,0,0,0,69,0,0,0,7,0,0,0,5,0,0,0,3,0,0,0,3,0,0,0,12,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,11,0,0,0,5,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,208,27,0,0,15,0,0,0,16,0,0,0,248,255,255,255,248,255,255,255,208,27,0,0,17,0,0,0,18,0,0,0,8,0,0,0,0,0,0,0,24,28,0,0,70,0,0,0,71,0,0,0,248,255,255,255,248,255,255,255,24,28,0,0,72,0,0,0,73,0,0,0,4,0,0,0,0,0,0,0,96,28,0,0,19,0,0,0,20,0,0,0,252,255,255,255,252,255,255,255,96,28,0,0,21,0,0,0,22,0,0,0,4,0,0,0,0,0,0,0,168,28,0,0,74,0,0,0,75,0,0,0,252,255,255,255,252,255,255,255,168,28,0,0,76,0,0,0,77,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,26,0,0,78,0,0,0,79,0,0,0,20,0,0,0,0,0,0,0,0,0,0,0,152,26,0,0,80,0,0,0,81,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,120,67,0,0,80,26,0,0,80,22,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,80,67,0,0,128,26,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,120,67,0,0,160,26,0,0,152,26,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,120,67,0,0,224,26,0,0,152,26,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,80,67,0,0,32,27,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,80,67,0,0,96,27,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,216,67,0,0,160,27,0,0,0,0,0,0,1,0,0,0,208,26,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,216,67,0,0,232,27,0,0,0,0,0,0,1,0,0,0,16,27,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,216,67,0,0,48,28,0,0,0,0,0,0,1,0,0,0,208,26,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,216,67,0,0,120,28,0,0,0,0,0,0,1,0,0,0,16,27,0,0,3,244,255,255,78,83,116,51,95,95,49,49,52,98,97,115,105,99,95,105,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,216,67,0,0,192,28,0,0,3,0,0,0,2,0,0,0,208,27,0,0,2,0,0,0,96,28,0,0,2,8,0,0,0,0,0,0,88,29,0,0,82,0,0,0,83,0,0,0,21,0,0,0,2,0,0,0,10,0,0,0,11,0,0,0,3,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,120,67,0,0,56,29,0,0,160,22,0,0,0,0,0,0,0,0,0,0,128,43,0,0,84,0,0,0,85,0,0,0,86,0,0,0,1,0,0,0,5,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,43,0,0,87,0,0,0,88,0,0,0,86,0,0,0,2,0,0,0,6,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,48,0,0,89,0,0,0,90,0,0,0,86,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,240,48,0,0,91,0,0,0,92,0,0,0,86,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,49,0,0,93,0,0,0,94,0,0,0,86,0,0,0,5,0,0,0,6,0,0,0,23,0,0,0,7,0,0,0,24,0,0,0,1,0,0,0,2,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,50,0,0,95,0,0,0,96,0,0,0,86,0,0,0,9,0,0,0,10,0,0,0,25,0,0,0,11,0,0,0,26,0,0,0,3,0,0,0,4,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,112,45,0,0,97,0,0,0,98,0,0,0,86,0,0,0,22,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,1,0,0,0,248,255,255,255,112,45,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,72,58,37,77,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,16,46,0,0,99,0,0,0,100,0,0,0,86,0,0,0,30,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,2,0,0,0,248,255,255,255,16,46,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,160,46,0,0,101,0,0,0,102,0,0,0,86,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,47,0,0,103,0,0,0,104,0,0,0,86,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,43,0,0,105,0,0,0,106,0,0,0,86,0,0,0,38,0,0,0,39,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,40,0,0,0,12,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,44,0,0,107,0,0,0,108,0,0,0,86,0,0,0,41,0,0,0,42,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,43,0,0,0,18,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,44,0,0,109,0,0,0,110,0,0,0,86,0,0,0,44,0,0,0,45,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,46,0,0,0,24,0,0,0,25,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,44,0,0,111,0,0,0,112,0,0,0,86,0,0,0,47,0,0,0,48,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,49,0,0,0,30,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,50,0,0,113,0,0,0,114,0,0,0,86,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,76,102,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,0,0,0,0,104,51,0,0,115,0,0,0,116,0,0,0,86,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,248,51,0,0,117,0,0,0,118,0,0,0,86,0,0,0,1,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,0,0,0,0,136,52,0,0,119,0,0,0,120,0,0,0,86,0,0,0,2,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,47,0,0,121,0,0,0,122,0,0,0,86,0,0,0,14,0,0,0,13,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,47,0,0,123,0,0,0,124,0,0,0,86,0,0,0,15,0,0,0,14,0,0,0,33,0,0,0,0,0,0,0,0,0,0,0,118,101,99,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,88,43,0,0,125,0,0,0,126,0,0,0,86,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,40,0,0,127,0,0,0,128,0,0,0,86,0,0,0,13,0,0,0,16,0,0,0,14,0,0,0,17,0,0,0,15,0,0,0,1,0,0,0,18,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,41,0,0,129,0,0,0,130,0,0,0,86,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,50,0,0,0,51,0,0,0,5,0,0,0,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,43,0,0,131,0,0,0,132,0,0,0,86,0,0,0,53,0,0,0,54,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,0,0,0,0,48,43,0,0,133,0,0,0,134,0,0,0,86,0,0,0,55,0,0,0,56,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,116,114,117,101,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,0,104,39,0,0,135,0,0,0,136,0,0,0,86,0,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,120,67,0,0,80,39,0,0,24,21,0,0,0,0,0,0,0,0,0,0,248,39,0,0,135,0,0,0,137,0,0,0,86,0,0,0,19,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,16,0,0,0,20,0,0,0,17,0,0,0,21,0,0,0,18,0,0,0,5,0,0,0,22,0,0,0,6,0,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,80,67,0,0,216,39,0,0,216,67,0,0,192,39,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,240,39,0,0,2,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,216,67,0,0,24,40,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,240,39,0,0,2,0,0,0,0,0,0,0,200,40,0,0,135,0,0,0,138,0,0,0,86,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,57,0,0,0,58,0,0,0,8,0,0,0,59,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,80,67,0,0,168,40,0,0,216,67,0,0,128,40,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,192,40,0,0,2,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,216,67,0,0,232,40,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,192,40,0,0,2,0,0,0,0,0,0,0,136,41,0,0,135,0,0,0,139,0,0,0,86,0,0,0,5,0,0,0,6,0,0,0,9,0,0,0,60,0,0,0,61,0,0,0,10,0,0,0,62,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,216,67,0,0,96,41,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,192,40,0,0,2,0,0,0,0,0,0,0,0,42,0,0,135,0,0,0,140,0,0,0,86,0,0,0,7,0,0,0,8,0,0,0,11,0,0,0,63,0,0,0,64,0,0,0,12,0,0,0,65,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,216,67,0,0,216,41,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,192,40,0,0,2,0,0,0,0,0,0,0,120,42,0,0,135,0,0,0,141,0,0,0,86,0,0,0,7,0,0,0,8,0,0,0,11,0,0,0,63,0,0,0,64,0,0,0,12,0,0,0,65,0,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,120,67,0,0,80,42,0,0,0,42,0,0,0,0,0,0,0,0,0,0,224,42,0,0,135,0,0,0,142,0,0,0,86,0,0,0,7,0,0,0,8,0,0,0,11,0,0,0,63,0,0,0,64,0,0,0,12,0,0,0,65,0,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,120,67,0,0,184,42,0,0,0,42,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,120,67,0,0,240,42,0,0,104,39,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,120,67,0,0,24,43,0,0,104,39,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,120,67,0,0,64,43,0,0,104,39,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,120,67,0,0,104,43,0,0,104,39,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,120,67,0,0,144,43,0,0,104,39,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,80,67,0,0,216,43,0,0,216,67,0,0,184,43,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,240,43,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,216,67,0,0,24,44,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,240,43,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,216,67,0,0,88,44,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,240,43,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,216,67,0,0,152,44,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,240,43,0,0,2,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,80,67,0,0,32,45,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,80,67,0,0,64,45,0,0,216,67,0,0,216,44,0,0,0,0,0,0,3,0,0,0,104,39,0,0,2,0,0,0,56,45,0,0,2,0,0,0,104,45,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,80,67,0,0,224,45,0,0,216,67,0,0,152,45,0,0,0,0,0,0,3,0,0,0,104,39,0,0,2,0,0,0,56,45,0,0,2,0,0,0,8,46,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,80,67,0,0,128,46,0,0,216,67,0,0,56,46,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,152,46,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,216,67,0,0,192,46,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,152,46,0,0,0,8,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,80,67,0,0,64,47,0,0,216,67,0,0,40,47,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,88,47,0,0,2,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,216,67,0,0,128,47,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,88,47,0,0,2,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,80,67,0,0,24,48,0,0,216,67,0,0,0,48,0,0,0,0,0,0,1,0,0,0,56,48,0,0,0,0,0,0,216,67,0,0,184,47,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,64,48,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,216,67,0,0,192,48,0,0,0,0,0,0,1,0,0,0,56,48,0,0,0,0,0,0,216,67,0,0,120,48,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,216,48,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,80,67,0,0,112,49,0,0,216,67,0,0,88,49,0,0,0,0,0,0,1,0,0,0,144,49,0,0,0,0,0,0,216,67,0,0,16,49,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,152,49,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,216,67,0,0,24,50,0,0,0,0,0,0,1,0,0,0,144,49,0,0,0,0,0,0,216,67,0,0,208,49,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,48,50,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,80,67,0,0,176,50,0,0,216,67,0,0,104,50,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,208,50,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,80,67,0,0,64,51,0,0,216,67,0,0,248,50,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,96,51,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,80,67,0,0,208,51,0,0,216,67,0,0,136,51,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,240,51,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,80,67,0,0,96,52,0,0,216,67,0,0,24,52,0,0,0,0,0,0,2,0,0,0,104,39,0,0,2,0,0,0,128,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+4892);
/* memory initializer */ allocate([111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,65,112,114,105,108,0,0,0,77,97,121,0,0,0,0,0,74,117,110,101,0,0,0,0,74,117,108,121,0,0,0,0,65,117,103,117,115,116,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,74,97,110,0,0,0,0,0,70,101,98,0,0,0,0,0,77,97,114,0,0,0,0,0,65,112,114,0,0,0,0,0,74,117,110,0,0,0,0,0,74,117,108,0,0,0,0,0,65,117,103,0,0,0,0,0,83,101,112,0,0,0,0,0,79,99,116,0,0,0,0,0,78,111,118,0,0,0,0,0,68,101,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,117,110,100,97,121,0,0,77,111,110,100,97,121,0,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,83,117,110,0,0,0,0,0,77,111,110,0,0,0,0,0,84,117,101,0,0,0,0,0,87,101,100,0,0,0,0,0,84,104,117,0,0,0,0,0,70,114,105,0,0,0,0,0,83,97,116,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,66,0,0,143,0,0,0,144,0,0,0,66,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,80,67,0,0,160,66,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,120,67,0,0,184,66,0,0,0,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,120,67,0,0,216,66,0,0,176,66,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,120,67,0,0,16,67,0,0,0,67,0,0,0,0,0,0,0,0,0,0,56,67,0,0,145,0,0,0,146,0,0,0,147,0,0,0,148,0,0,0,23,0,0,0,15,0,0,0,1,0,0,0,7,0,0,0,0,0,0,0,192,67,0,0,145,0,0,0,149,0,0,0,147,0,0,0,148,0,0,0,23,0,0,0,16,0,0,0,2,0,0,0,8,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,120,67,0,0,152,67,0,0,56,67,0,0,0,0,0,0,0,0,0,0,32,68,0,0,145,0,0,0,150,0,0,0,147,0,0,0,148,0,0,0,23,0,0,0,17,0,0,0,3,0,0,0,9,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,120,67,0,0,248,67,0,0,56,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,70,0,0,151,0,0,0,152,0,0,0,67,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,120,67,0,0,80,70,0,0,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+15132);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  function _llvm_lifetime_end() {}

  
  
  
  var GL={counter:1,lastError:0,buffers:[],programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],clientBuffers:[],currArrayBuffer:0,currElementArrayBuffer:0,byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.createLog2ceilLookup(GL.MAX_TEMP_BUFFER_SIZE);
        Browser.moduleContextCreatedCallbacks.push(GL.initExtensions);
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],MAX_TEMP_BUFFER_SIZE:2097152,tempVertexBuffers1:[],tempVertexBufferCounters1:[],tempVertexBuffers2:[],tempVertexBufferCounters2:[],numTempVertexBuffersPerSize:64,tempIndexBuffers:[],tempQuadIndexBuffer:null,log2ceilLookup:null,createLog2ceilLookup:function (maxValue) {
        GL.log2ceilLookup = new Uint8Array(maxValue+1);
        var log2 = 0;
        var pow2 = 1;
        GL.log2ceilLookup[0] = 0;
        for(var i = 1; i <= maxValue; ++i) {
          if (i > pow2) {
            pow2 <<= 1;
            ++log2;
          }
          GL.log2ceilLookup[i] = log2;
        }
      },generateTempBuffers:function (quads) {
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        GL.tempVertexBufferCounters1.length = GL.tempVertexBufferCounters2.length = largestIndex+1;
        GL.tempVertexBuffers1.length = GL.tempVertexBuffers2.length = largestIndex+1;
        GL.tempIndexBuffers.length = largestIndex+1;
        for(var i = 0; i <= largestIndex; ++i) {
          GL.tempIndexBuffers[i] = null; // Created on-demand
          GL.tempVertexBufferCounters1[i] = GL.tempVertexBufferCounters2[i] = 0;
          var ringbufferLength = GL.numTempVertexBuffersPerSize;
          GL.tempVertexBuffers1[i] = [];
          GL.tempVertexBuffers2[i] = [];
          var ringbuffer1 = GL.tempVertexBuffers1[i];
          var ringbuffer2 = GL.tempVertexBuffers2[i];
          ringbuffer1.length = ringbuffer2.length = ringbufferLength;
          for(var j = 0; j < ringbufferLength; ++j) {
            ringbuffer1[j] = ringbuffer2[j] = null; // Created on-demand
          }
        }
  
        if (quads) {
          // GL_QUAD indexes can be precalculated
          GL.tempQuadIndexBuffer = GLctx.createBuffer();
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.tempQuadIndexBuffer);
          var numIndexes = GL.MAX_TEMP_BUFFER_SIZE >> 1;
          var quadIndexes = new Uint16Array(numIndexes);
          var i = 0, v = 0;
          while (1) {
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+1;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+2;
            if (i >= numIndexes) break;
            quadIndexes[i++] = v+3;
            if (i >= numIndexes) break;
            v += 4;
          }
          GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, quadIndexes, GLctx.STATIC_DRAW);
          GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, null);
        }
      },getTempVertexBuffer:function getTempVertexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ringbuffer = GL.tempVertexBuffers1[idx];
        var nextFreeBufferIndex = GL.tempVertexBufferCounters1[idx];
        GL.tempVertexBufferCounters1[idx] = (GL.tempVertexBufferCounters1[idx]+1) & (GL.numTempVertexBuffersPerSize-1);
        var vbo = ringbuffer[nextFreeBufferIndex];
        if (vbo) {
          return vbo;
        }
        var prevVBO = GLctx.getParameter(GLctx.ARRAY_BUFFER_BINDING);
        ringbuffer[nextFreeBufferIndex] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, ringbuffer[nextFreeBufferIndex]);
        GLctx.bufferData(GLctx.ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ARRAY_BUFFER, prevVBO);
        return ringbuffer[nextFreeBufferIndex];
      },getTempIndexBuffer:function getTempIndexBuffer(sizeBytes) {
        var idx = GL.log2ceilLookup[sizeBytes];
        var ibo = GL.tempIndexBuffers[idx];
        if (ibo) {
          return ibo;
        }
        var prevIBO = GLctx.getParameter(GLctx.ELEMENT_ARRAY_BUFFER_BINDING);
        GL.tempIndexBuffers[idx] = GLctx.createBuffer();
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, GL.tempIndexBuffers[idx]);
        GLctx.bufferData(GLctx.ELEMENT_ARRAY_BUFFER, 1 << idx, GLctx.DYNAMIC_DRAW);
        GLctx.bindBuffer(GLctx.ELEMENT_ARRAY_BUFFER, prevIBO);
        return GL.tempIndexBuffers[idx];
      },newRenderingFrameStarted:function newRenderingFrameStarted() {
        var vb = GL.tempVertexBuffers1;
        GL.tempVertexBuffers1 = GL.tempVertexBuffers2;
        GL.tempVertexBuffers2 = vb;
        vb = GL.tempVertexBufferCounters1;
        GL.tempVertexBufferCounters1 = GL.tempVertexBufferCounters2;
        GL.tempVertexBufferCounters2 = vb;
        var largestIndex = GL.log2ceilLookup[GL.MAX_TEMP_BUFFER_SIZE];
        for(var i = 0; i <= largestIndex; ++i) {
          GL.tempVertexBufferCounters1[i] = 0;
        }
      },getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },computeImageSize:function (width, height, sizePerPixel, alignment) {
        function roundedToNextMultipleOf(x, y) {
          return Math.floor((x + y - 1) / y) * y
        }
        var plainRowSize = width * sizePerPixel;
        var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
        return (height <= 0) ? 0 :
                 ((height - 1) * alignedRowSize + plainRowSize);
      },get:function (name_, p, type) {
        // Guard against user passing a null pointer.
        // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
        // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
        // better to report an error instead of doing anything random.
        if (!p) {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
          return;
        }
        var ret = undefined;
        switch(name_) { // Handle a few trivial GLES values
          case 0x8DFA: // GL_SHADER_COMPILER
            ret = 1;
            break;
          case 0x8DF8: // GL_SHADER_BINARY_FORMATS
            if (type !== 'Integer') {
              GL.recordError(0x0500); // GL_INVALID_ENUM
            }
            return; // Do not write anything to the out pointer, since no binary formats are supported.
          case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
            ret = 0;
            break;
          case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
            // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
            // so implement it ourselves to allow C++ GLES2 code get the length.
            var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
            ret = formats.length;
            break;
          case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
            ret = 0x1401; // GL_UNSIGNED_BYTE
            break;
          case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
            ret = 0x1908; // GL_RGBA
            break;
        }
  
        if (ret === undefined) {
          var result = GLctx.getParameter(name_);
          switch (typeof(result)) {
            case "number":
              ret = result;
              break;
            case "boolean":
              ret = result ? 1 : 0;
              break;
            case "string":
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            case "object":
              if (result === null) {
                // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
                // can mean an invalid name_, which we need to report as an error
                switch(name_) {
                  case 0x8894: // ARRAY_BUFFER_BINDING
                  case 0x8B8D: // CURRENT_PROGRAM
                  case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                  case 0x8CA6: // FRAMEBUFFER_BINDING
                  case 0x8CA7: // RENDERBUFFER_BINDING
                  case 0x8069: // TEXTURE_BINDING_2D
                  case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                    ret = 0;
                    break;
                  }
                  default: {
                    GL.recordError(0x0500); // GL_INVALID_ENUM
                    return;
                  }
                }
              } else if (result instanceof Float32Array ||
                         result instanceof Uint32Array ||
                         result instanceof Int32Array ||
                         result instanceof Array) {
                for (var i = 0; i < result.length; ++i) {
                  switch (type) {
                    case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                    case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                    case 'Boolean': HEAP8[(((p)+(i))|0)]=result[i] ? 1 : 0;    break;
                    default: throw 'internal glGet error, bad type: ' + type;
                  }
                }
                return;
              } else if (result instanceof WebGLBuffer ||
                         result instanceof WebGLProgram ||
                         result instanceof WebGLFramebuffer ||
                         result instanceof WebGLRenderbuffer ||
                         result instanceof WebGLTexture) {
                ret = result.name | 0;
              } else {
                GL.recordError(0x0500); // GL_INVALID_ENUM
                return;
              }
              break;
            default:
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
          }
        }
  
        switch (type) {
          case 'Integer': HEAP32[((p)>>2)]=ret;    break;
          case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
          case 'Boolean': HEAP8[(p)]=ret ? 1 : 0; break;
          default: throw 'internal glGet error, bad type: ' + type;
        }
      },getTexPixelData:function (type, format, width, height, pixels, internalFormat) {
        var sizePerPixel;
        switch (type) {
          case 0x1401 /* GL_UNSIGNED_BYTE */:
            switch (format) {
              case 0x1906 /* GL_ALPHA */:
              case 0x1909 /* GL_LUMINANCE */:
                sizePerPixel = 1;
                break;
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4;
                break;
              case 0x190A /* GL_LUMINANCE_ALPHA */:
                sizePerPixel = 2;
                break;
              default:
                throw 'Invalid format (' + format + ')';
            }
            break;
          case 0x1403 /* GL_UNSIGNED_SHORT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 2;
            } else {
              throw 'Invalid format (' + format + ')';
            }
            break;
          case 0x1405 /* GL_UNSIGNED_INT */:
            if (format == 0x1902 /* GL_DEPTH_COMPONENT */) {
              sizePerPixel = 4;
            } else {
              throw 'Invalid format (' + format + ')';
            }
            break;
          case 0x84FA /* UNSIGNED_INT_24_8_WEBGL */:
            sizePerPixel = 4;
            break;
          case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
          case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
          case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
            sizePerPixel = 2;
            break;
          case 0x1406 /* GL_FLOAT */:
            assert(GL.floatExt, 'Must have OES_texture_float to use float textures');
            switch (format) {
              case 0x1907 /* GL_RGB */:
                sizePerPixel = 3*4;
                break;
              case 0x1908 /* GL_RGBA */:
                sizePerPixel = 4*4;
                break;
              default:
                throw 'Invalid format (' + format + ')';
            }
            internalFormat = GLctx.RGBA;
            break;
          default:
            throw 'Invalid type (' + type + ')';
        }
        var bytes = GL.computeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
        if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
          pixels = HEAPU8.subarray((pixels),(pixels+bytes));
        } else if (type == 0x1406 /* GL_FLOAT */) {
          pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
          pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
        } else {
          pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
        }
        return {
          pixels: pixels,
          internalFormat: internalFormat
        }
      },calcBufLength:function calcBufLength(size, type, stride, count) {
        if (stride > 0) {
          return count * stride;  // XXXvlad this is not exactly correct I don't think
        }
        var typeSize = GL.byteSizeByType[type - GL.byteSizeByTypeRoot];
        return size * typeSize * count;
      },usedTempBuffers:[],preDrawHandleClientVertexAttribBindings:function preDrawHandleClientVertexAttribBindings(count) {
        GL.resetBufferBinding = false;
  
        // TODO: initial pass to detect ranges we need to upload, might not need an upload per attrib
        for (var i = 0; i < GL.maxVertexAttribs; ++i) {
          var cb = GL.clientBuffers[i];
          if (!cb.clientside || !cb.enabled) continue;
  
          GL.resetBufferBinding = true;
  
          var size = GL.calcBufLength(cb.size, cb.type, cb.stride, count);
          var buf = GL.getTempVertexBuffer(size);
          GLctx.bindBuffer(GLctx.ARRAY_BUFFER, buf);
          GLctx.bufferSubData(GLctx.ARRAY_BUFFER,
                                   0,
                                   HEAPU8.subarray(cb.ptr, cb.ptr + size));
          GLctx.vertexAttribPointer(i, cb.size, cb.type, cb.normalized, cb.stride, 0);
        }
      },postDrawHandleClientVertexAttribBindings:function postDrawHandleClientVertexAttribBindings() {
        if (GL.resetBufferBinding) {
          GLctx.bindBuffer(GLctx.ARRAY_BUFFER, GL.buffers[GL.currArrayBuffer]);
        }
      },initExtensions:function () {
        if (GL.initExtensions.done) return;
        GL.initExtensions.done = true;
  
        if (!Module.useWebGL) return; // an app might link both gl and 2d backends
  
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
  
        GL.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
        for (var i = 0; i < GL.maxVertexAttribs; i++) {
          GL.clientBuffers[i] = { enabled: false, clientside: false, size: 0, type: 0, normalized: 0, stride: 0, ptr: 0 };
        }
  
        GL.generateTempBuffers();
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
        GL.compressionExt = GLctx.getExtension('WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('MOZ_WEBGL_compressed_texture_s3tc') ||
                            GLctx.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc');
  
        GL.anisotropicExt = GLctx.getExtension('EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('MOZ_EXT_texture_filter_anisotropic') ||
                            GLctx.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
  
        GL.floatExt = GLctx.getExtension('OES_texture_float');
        
        // Extension available from Firefox 26 and Google Chrome 30
        GL.instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
        
        // Extension available from Firefox 25 and WebKit
        GL.vaoExt = Module.ctx.getExtension('OES_vertex_array_object');
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources" ];
  
        function shouldEnableAutomatically(extension) {
          for(var i in automaticallyEnabledExtensions) {
            var include = automaticallyEnabledExtensions[i];
            if (ext.indexOf(include) != -1) {
              return true;
            }
          }
          return false;
        }
  
        var extensions = GLctx.getSupportedExtensions();
        for(var e in extensions) {
          var ext = extensions[e].replace('MOZ_', '').replace('WEBKIT_', '');
          if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
            GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
          }
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          ret = allocate(intArrayFromString('OpenGL ES GLSL 1.00 (WebGL)'), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }var GLEW={isLinaroFork:1,extensions:null,error:{0:null,1:null,2:null,3:null,4:null,5:null,6:null,7:null,8:null},version:{1:null,2:null,3:null,4:null},errorStringConstantFromCode:function (error) {
        if (GLEW.isLinaroFork) {
          switch (error) {
            case 4:return "OpenGL ES lib expected, found OpenGL lib"; // GLEW_ERROR_NOT_GLES_VERSION
            case 5:return "OpenGL lib expected, found OpenGL ES lib"; // GLEW_ERROR_GLES_VERSION
            case 6:return "Missing EGL version"; // GLEW_ERROR_NO_EGL_VERSION
            case 7:return "EGL 1.1 and up are supported"; // GLEW_ERROR_EGL_VERSION_10_ONLY
            default:break;
          }
        }
  
        switch (error) {
          case 0:return "No error"; // GLEW_OK || GLEW_NO_ERROR
          case 1:return "Missing GL version"; // GLEW_ERROR_NO_GL_VERSION
          case 2:return "GL 1.1 and up are supported"; // GLEW_ERROR_GL_VERSION_10_ONLY
          case 3:return "GLX 1.2 and up are supported"; // GLEW_ERROR_GLX_VERSION_11_ONLY
          default:return null;
        }
      },errorString:function (error) {
        if (!GLEW.error[error]) {
          var string = GLEW.errorStringConstantFromCode(error);
          if (!string) {
            string = "Unknown error";
            error = 8; // prevent array from growing more than this
          }
          GLEW.error[error] = allocate(intArrayFromString(string), 'i8', ALLOC_NORMAL);
        }
        return GLEW.error[error];
      },versionStringConstantFromCode:function (name) {
        switch (name) {
          case 1:return "1.10.0"; // GLEW_VERSION
          case 2:return "1"; // GLEW_VERSION_MAJOR
          case 3:return "10"; // GLEW_VERSION_MINOR
          case 4:return "0"; // GLEW_VERSION_MICRO
          default:return null;
        }
      },versionString:function (name) {
        if (!GLEW.version[name]) {
          var string = GLEW.versionStringConstantFromCode(name);
          if (!string)
            return 0;
          GLEW.version[name] = allocate(intArrayFromString(string), 'i8', ALLOC_NORMAL);
        }
        return GLEW.version[name];
      },extensionIsSupported:function (name) {
        if (!GLEW.extensions) {
          GLEW.extensions = Pointer_stringify(_glGetString(0x1F03)).split(' ');
        }
  
        if (GLEW.extensions.indexOf(name) != -1)
          return 1;
  
        // extensions from GLEmulations do not come unprefixed
        // so, try with prefix
        return (GLEW.extensions.indexOf("GL_" + name) != -1);
      }};function _glewInit() { return 0; }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            assert(buffer.length);
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        if (stream.__proto__) {
          // reuse the object
          stream.__proto__ = FS.FSStream.prototype;
        } else {
          var newStream = new FS.FSStream();
          for (var p in stream) {
            newStream[p] = stream[p];
          }
          stream = newStream;
        }
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          function LazyUint8Array() {
            this.lengthKnown = false;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % this.chunkSize;
            var chunkNum = Math.floor(idx / this.chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
            this.getter = getter;
          }
          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
              // Find length
              var xhr = new XMLHttpRequest();
              xhr.open('HEAD', url, false);
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              var datalength = Number(xhr.getResponseHeader("Content-length"));
              var header;
              var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
              var chunkSize = 1024*1024; // Chunk size in bytes
  
              if (!hasByteServing) chunkSize = datalength;
  
              // Function to get a range from the remote URL.
              var doXHR = (function(from, to) {
                if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
                var xhr = new XMLHttpRequest();
                xhr.open('GET', url, false);
                if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
                // Some hints to the browser that we want binary data.
                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
                if (xhr.overrideMimeType) {
                  xhr.overrideMimeType('text/plain; charset=x-user-defined');
                }
  
                xhr.send(null);
                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                if (xhr.response !== undefined) {
                  return new Uint8Array(xhr.response || []);
                } else {
                  return intArrayFromString(xhr.responseText || '', true);
                }
              });
              var lazyArray = this;
              lazyArray.setDataGetter(function(chunkNum) {
                var start = chunkNum * chunkSize;
                var end = (chunkNum+1) * chunkSize - 1; // including this byte
                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                  lazyArray.chunks[chunkNum] = doXHR(start, end);
                }
                if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
                return lazyArray.chunks[chunkNum];
              });
  
              this._length = datalength;
              this._chunkSize = chunkSize;
              this.lengthKnown = true;
          }
  
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  var _emscripten_resume=true;

  function _pthread_mutex_lock() {}

  
  
  var ___cxa_exception_header_size=8;
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr - ___cxa_exception_header_size);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }
  
  var ___cxa_last_thrown_exception=0;
  
  var ___cxa_caught_exceptions=[];function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = ___cxa_caught_exceptions.pop();
      if (ptr) {
        header = ptr - ___cxa_exception_header_size;
        var destructor = HEAP32[(((header)+(4))>>2)];
        if (destructor) {
          Runtime.dynCall('vi', destructor, [ptr]);
          HEAP32[(((header)+(4))>>2)]=0;
        }
        ___cxa_free_exception(ptr);
        ___cxa_last_thrown_exception = 0;
      }
    }

  function _glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }


  
  var CL={cl_init:0,cl_extensions:["KHR_GL_SHARING","KHR_fp16","KHR_fp64"],cl_digits:[1,2,3,4,5,6,7,8,9,0],cl_kernels_sig:{},cl_structs_sig:{},cl_pn_type:[],cl_objects:{},cl_objects_map:{},cl_objects_retains:{},cl_objects_mem_callback:{},cl_validator:{},cl_validator_argsize:{},init:function () {
        if (CL.cl_init == 0) {
          console.log('%c WebCL-Translator + Validator V2.0 ! ', 'background: #222; color: #bada55');
          var nodejs = (typeof window === 'undefined');
          if(nodejs) {
            webcl = require('../webcl');
          }
  
          if (webcl == undefined) {
            alert("Unfortunately your system does not support WebCL. " +
            "Make sure that you have WebKit Samsung or Firefox Nokia plugin");
  
            console.error("Unfortunately your system does not support WebCL.\n");
            console.error("Make sure that you have WebKit Samsung or Firefox Nokia plugin\n");  
          } else {
  
            // Add webcl constant for parser
            // Object.defineProperty(webcl, "SAMPLER"      , { value : 0x1300,writable : false });
            // Object.defineProperty(webcl, "IMAGE2D"      , { value : 0x1301,writable : false });
            // Object.defineProperty(webcl, "IMAGE3D"      , { value : 0x1302,writable : false });          
            // Object.defineProperty(webcl, "UNSIGNED_LONG", { value : 0x1304,writable : false });
            // Object.defineProperty(webcl, "LONG"         , { value : 0x1303,writable : false });
            // Object.defineProperty(webcl, "MAP_READ"     , { value : 0x1   ,writable : false });
            // Object.defineProperty(webcl, "MAP_WRITE"    , { value : 0x2   ,writable : false });
  
            for (var i = 0; i < CL.cl_extensions.length; i ++) {
  
              if (webcl.enableExtension(CL.cl_extensions[i])) {
                console.info("WebCL Init : extension "+CL.cl_extensions[i]+" supported.");
              } else {
                console.info("WebCL Init : extension "+CL.cl_extensions[i]+" not supported !!!");
              }
            }
            CL.cl_init = 1;
          }
        }
  
        return CL.cl_init;
      },udid:function (obj) {    
        var _id;
  
        if (obj !== undefined) {
  
          if ( obj.hasOwnProperty('udid') ) {
           _id = obj.udid;
  
           if (_id !== undefined) {
             return _id;
           }
          }
        }
  
        var _uuid = [];
  
        _uuid[0] = CL.cl_digits[0 | Math.random()*CL.cl_digits.length-1]; // First digit of udid can't be 0
        for (var i = 1; i < 6; i++) _uuid[i] = CL.cl_digits[0 | Math.random()*CL.cl_digits.length];
  
        _id = _uuid.join('');
  
      
        // /!\ Call udid when you add inside cl_objects if you pass object in parameter
        if (obj !== undefined) {
          Object.defineProperty(obj, "udid", { value : _id,writable : false });
          CL.cl_objects[_id]=obj;
        }
  
        return _id;      
      },cast_long:function (arg_size) {
        var _sizelong = [];
        _sizelong.push(((arg_size & 0xFFFFFFFF00000000) >> 32));
        _sizelong.push((arg_size & 0xFFFFFFFF));
        // var _origin = x << 32 | y;
        return new Int32Array(_sizelong);
      },stringType:function (pn_type) {
        switch(pn_type) {
          case webcl.SIGNED_INT8:
            return 'INT8';
          case webcl.SIGNED_INT16:
            return 'INT16';
          case webcl.SIGNED_INT32:
            return 'INT32';
          case webcl.UNSIGNED_INT8:
            return 'UINT8';
          case webcl.UNSIGNED_INT16:
            return 'UINT16';
          case webcl.UNSIGNED_INT32:
            return 'UINT32';
          case 0x1304 /*webcl.UNSIGNED_LONG*/:
            return 'ULONG';
          case 0x1303 /*webcl.SIGNED_LONG*/:
            return 'LONG';       
          case webcl.FLOAT:
            return 'FLOAT';
          case webcl.LOCAL:
            return '__local';   
          case 0x1300 /*webcl.SAMPLER*/:
            return 'sampler_t';   
          case 0x1301 /*webcl.IMAGE2D*/:
            return 'image2d_t';        
          case 0x1302 /*webcl.IMAGE3D*/:
            return 'image3d_t';            
          default:
            if (typeof(pn_type) == "string") return 'struct';
            return 'UNKNOWN';
        }
      },parseType:function (string) {
        var _value = -1;
      
        // First ulong for the webcl validator
        if ( (string.indexOf("ulong") >= 0 ) || (string.indexOf("unsigned long") >= 0 ) ) {
          // \todo : long ???? 
          _value = 0x1304 /*webcl.UNSIGNED_LONG*/;  
        } else if ( string.indexOf("long") >= 0 ) {
          _value = 0x1303 /*webcl.SIGNED_LONG*/;
        } else if (string.indexOf("float") >= 0 ) {
          _value = webcl.FLOAT;
        } else if ( (string.indexOf("uchar") >= 0 ) || (string.indexOf("unsigned char") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT8;
        } else if ( string.indexOf("char") >= 0 ) {
          _value = webcl.SIGNED_INT8;
        } else if ( (string.indexOf("ushort") >= 0 ) || (string.indexOf("unsigned short") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT16;
        } else if ( string.indexOf("short") >= 0 ) {
          _value = webcl.SIGNED_INT16;                     
        } else if ( (string.indexOf("uint") >= 0 ) || (string.indexOf("unsigned int") >= 0 ) ) {
          _value = webcl.UNSIGNED_INT32;          
        } else if ( ( string.indexOf("int") >= 0 ) || ( string.indexOf("enum") >= 0 ) ) {
          _value = webcl.SIGNED_INT32;
        } else if ( string.indexOf("image3d_t") >= 0 ) {
          _value = 0x1302 /*webcl.IMAGE3D*/;        
        } else if ( string.indexOf("image2d_t") >= 0 ) {
          _value = 0x1301 /*webcl.IMAGE2D*/;
        } else if ( string.indexOf("sampler_t") >= 0 ) {
          _value = 0x1300 /*webcl.SAMPLER*/;
        }
  
        return _value;
      },parseStruct:function (kernel_string,struct_name) {
  
        // Experimental parse of Struct
        // Search kernel function like 'struct_name { }' or '{ } struct_name'
        // --------------------------------------------------------------------------------
        // Step 1 : Search pattern struct_name { }
        // Step 2 : if no result : Search pattern { } struct_name
        // Step 3 : if no result : return
        // Step 4 : split by ; // Num of variable of the structure  : int toto; float tata;
        // Step 5 : split by , // Num of variable for each type     : float toto,tata,titi;
        // Step 6 : Search pattern [num] // Array Variable          : float toto[4];
        // Step 7 : Search type of the line
        // Step 8 : if exist add type else search other struct
        // --------------------------------------------------------------------------------
  
        CL.cl_structs_sig[struct_name] = [];
  
        // First search if is #define
        var _re_define = new RegExp("#[\ ]*define[\ ]*"+struct_name+"[\ ]*[A-Za-z0-9_\s]*");
        var _define = kernel_string.match(_re_define);
  
        if (_define != null && _define.length == 1) {
  
          // Get type of the line
          var _str = _define[0];
          var _type = CL.parseType(_str);
          
          if (_type != -1) {
            CL.cl_structs_sig[struct_name].push(_type);
          } else {
            var _lastSpace = _str.lastIndexOf(" ");
            var _res = _str.substr(_lastSpace + 1,_str.length - _lastSpace);
  
            CL.parseStruct(kernel_string,_res);
          }
      
          return;
        }
  
        // Second search if is typedef type name;
        var _re_typedef = new RegExp("typedef[\ ]*[A-Za-z0-9_\s]*[\ ]*"+struct_name+"[\ ]*;");
        var _typedef = kernel_string.match(_re_typedef);
  
        if (_typedef != null && _typedef.length == 1) {
  
          // Get type of the line
          var _str = _typedef[0];
          var _type = CL.parseType(_str);
  
          if (_type != -1) {
            CL.cl_structs_sig[struct_name].push(_type);
          } else {
            _str = _str.replace(/^\s+|\s+$/g, ""); // trim
            var _firstSpace = _str.indexOf(" ");
            var _lastSpace = _str.lastIndexOf(" ");
            var _res = _str.substr(_firstSpace + 1,_lastSpace - _firstSpace - 1);
            
            CL.parseStruct(kernel_string,_res);
          }
          
          return;
        }
  
        // search pattern : struct_name { } ;
        var _re_before = new RegExp(struct_name+"[\ ]"+"\{([^}]+)\}");
  
        // search pattern : { } struct_name;
        var _re_after = new RegExp("\{([^}]+)\}"+"[\ ]"+struct_name);
  
        var _res = kernel_string.match(_re_before);
        var _contains_struct = "";
        
        if (_res != null && _res.length == 2) {
          _contains_struct = _res[1];
        } else {
          _res = kernel_string.match(_re_after);
          if (_res != null && _res.length == 2) {
              _contains_struct = _res[1];
          } else {
            return;
          }
        }
  
        var _var = _contains_struct.split(";");
        for (var i = 0; i < _var.length-1; i++ ) {
          // Need for unsigned int width, height;
          var _subvar = _var[i].split(","); 
          
          // Get type of the line
          var _type = CL.parseType(_var[i]);
        
          // Need for float mu[4];
          var _arrayNum = 0;
          _res = _var[i].match(/[0-9]+/); 
          if (_res != null) _arrayNum = _res;
        
          if ( _type != -1) {
            for (var j = 0; j < Math.max(_subvar.length,_arrayNum) ; j++ ) {
              CL.cl_structs_sig[struct_name].push(_type);
            }
          } else {
            // Search name of the parameter
            var _struct = _subvar[0].replace(/^\s+|\s+$/g, ""); // trim
            var _name = "";
            var _start = _struct.lastIndexOf(" "); 
            for (var j = _start - 1; j >= 0 ; j--) {
              var _chara = _struct.charAt(j);
              if (_chara == ' ' && _name.length > 0) {
                break;
              } else if (_chara != ' ') {
                _name = _chara + _name;
              }
            }
            
            // If struct is unknow search it
            if (!(_name in CL.cl_structs_sig && CL.cl_structs_sig[_name].length > 0)) {
              CL.parseStruct(kernel_string,_name);
            }
  
            for (var j = 0; j < Math.max(_subvar.length,_arrayNum) ; j++ ) {
              CL.cl_structs_sig[struct_name] = CL.cl_structs_sig[struct_name].concat(CL.cl_structs_sig[_name]);  
            }
          }
        }
      },parseKernel:function (kernel_string) {
  
  
        // Experimental parse of Kernel
        // ----------------------------
        //
        // /!\ The minify kernel could be use by the program but some trouble with line
        // /!\ containing macro #define, for the moment only use the minify kernel for 
        // /!\ parsing __kernel and struct
        //
        // Search kernel function like __kernel ... NAME ( p1 , p2 , p3)  
        // --------------------------------------------------------------------------------
        // Step 1 : Minimize kernel removing all the comment and \r \n \t and multispace
        // Step 2 : Search pattern __kernel ... ( ... )
        // Step 3 : For each kernel
        // Step 3 . 1 : Search Open Brace
        // Step 3 . 2 : Search Kernel Name
        // Step 3 . 3 : Search Kernel Parameter
        // Step 3 . 4 : Grab { name : [ param, ... ] }
        // --------------------------------------------------------------------------------
  
        // Remove all comments ...
        var _mini_kernel_string  = kernel_string.replace(/(?:((["'])(?:(?:\\\\)|\\\2|(?!\\\2)\\|(?!\2).|[\n\r])*\2)|(\/\*(?:(?!\*\/).|[\n\r])*\*\/)|(\/\/[^\n\r]*(?:[\n\r]+|$))|((?:=|:)\s*(?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/))|((?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/)[gimy]?\.(?:exec|test|match|search|replace|split)\()|(\.(?:exec|test|match|search|replace|split)\((?:\/(?:(?:(?!\\*\/).)|\\\\|\\\/|[^\\]\[(?:\\\\|\\\]|[^]])+\])+\/))|(<!--(?:(?!-->).)*-->))/g
  , "");
        
        // Remove all char \n \r \t ...
        _mini_kernel_string = _mini_kernel_string.replace(/\n/g, " ");
        _mini_kernel_string = _mini_kernel_string.replace(/\r/g, " ");
  
        // Remove all the multispace
        _mini_kernel_string = _mini_kernel_string.replace(/\s{2,}/g, " ");
  
        // Search pattern : __kernel ... ( ... )
        // var _matches = _mini_kernel_string.match(/__kernel[A-Za-z0-9_\s]+\(([^)]+)\)/g);
        // if (_matches == null) {
        //   console.error("/!\\ Not found kernel !!!");
        //   return;
        // }
  
        // Search kernel (Pattern doesn't work with extra __attribute__)
        var _matches = [];
        var _found = 1;
        var _stringKern = _mini_kernel_string;
        var _security = 10;
  
        // Search all the kernel
        while (_found && _security) {
          // Just in case no more than 10 loop
          _security --;
  
          var _pattern = "__kernel ";
          var _kern = _stringKern.indexOf(_pattern);
  
          if (_kern == -1) {
            _pattern = " kernel ";
            _kern = _stringKern.indexOf(" kernel ");
            if (_kern == -1) { 
              _pattern = "kernel ";
              _kern = _stringKern.indexOf("kernel ");
              if (_kern == -1) {
                _found = 0;
                continue;
              } else if (_kern != 0) {
                console.error("/!\\ Find word 'kernel' but is not a real kernel  .. ("+_kern+")");
                _stringKern = _stringKern.substr(_kern + _pattern.length,_stringKern.length - _kern);
                continue;
              }
            }
          }
  
          _stringKern = _stringKern.substr(_kern + _pattern.length,_stringKern.length - _kern);
   
          var _brace = _stringKern.indexOf("{");
          var _stringKern2 = _stringKern.substr(0,_brace);
          var _braceOpen = _stringKern2.lastIndexOf("(");
          var _braceClose = _stringKern2.lastIndexOf(")");
          var _stringKern3 = _stringKern2.substr(0,_braceOpen).replace(/^\s+|\s+$/g, ""); // trim
          var _space = _stringKern3.lastIndexOf(" ");
  
          _stringKern2 = _stringKern2.substr(_space + 1,_braceClose);
  
          // Add the kernel result like name_kernel(..., ... ,...)
          _matches.push(_stringKern2);
        }
  
        // For each kernel ....
        for (var i = 0; i < _matches.length; i ++) {
          // Search the open Brace
          var _brace = _matches[i].lastIndexOf("(");
  
          // Part before '('
          var _first_part = _matches[i].substr(0,_brace);
          _first_part = _first_part.replace(/^\s+|\s+$/g, ""); // trim
  
          // Part after ')'
          var _second_part = _matches[i].substr(_brace+1,_matches[i].length-_brace-2);
          _second_part = _second_part.replace(/^\s+|\s+$/g, ""); // trim
  
          // Search name part
          var _name = _first_part.substr(_first_part.lastIndexOf(" ") + 1);
  
          // If name already present reparse it may be is another test with not the same num of parameter ....
          if (_name in CL.cl_kernels_sig) {
            delete CL.cl_kernels_sig[_name]
          }
  
          // Search parameter part
          var _param = [];
  
          var _param_validator = [];
          var _param_argsize_validator = [];
          var _array = _second_part.split(","); 
          for (var j = 0; j < _array.length; j++) {
            var _type = CL.parseType(_array[j]);
  
            if (_array[j].indexOf("__local") >= 0 ) {
              _param.push(webcl.LOCAL);
  
              if (_array[j].indexOf("ulong _wcl") == -1 ) {
                _param_validator.push(_param.length - 1);
              } else {
                _param_argsize_validator.push(_param.length - 1);
              }
  
            } else if (_type == -1) {
                         
              _array[j] = _array[j].replace(/^\s+|\s+$/g, "");
              _array[j] = _array[j].replace("*", "");
  
              var _start = _array[j].lastIndexOf(" "); 
              if (_start != -1) {
                var _kernels_struct_name = "";
                // Search Parameter type Name
                for (var k = _start - 1; k >= 0 ; k--) {
  
                  var _chara = _array[j].charAt(k);
                  if (_chara == ' ' && _kernels_struct_name.length > 0) {
                    break;
                  } else if (_chara != ' ') {
                    _kernels_struct_name = _chara + _kernels_struct_name;
                  }
                }             
  
                // Parse struct only if is not already inside the map
                if (!(_kernels_struct_name in CL.cl_structs_sig))
                  CL.parseStruct(_mini_kernel_string, _kernels_struct_name);
              
                // Add the name of the struct inside the map of param kernel
                _param.push(_kernels_struct_name);         
  
              } else {
                _param.push(webcl.FLOAT);
              }
  
              if (_array[j].indexOf("ulong _wcl") == -1 ) {
                _param_validator.push(_param.length - 1);
              } else {
                _param_argsize_validator.push(_param.length - 1);
              }
  
            } else {
              _param.push(_type);
  
              if (_array[j].indexOf("ulong _wcl") == -1 ) {
                _param_validator.push(_param.length - 1);
              } else {
                _param_argsize_validator.push(_param.length - 1);
              }
            }
          }        
  
          CL.cl_kernels_sig[_name] = _param;
  
          CL.cl_validator[_name] = _param_validator;
          CL.cl_validator_argsize[_name] = _param_argsize_validator;
        }
  
        return _mini_kernel_string;
  
      },getImageSizeType:function (image) {
        var _sizeType = 0;
  
        
        var _info = CL.cl_objects[image].getInfo();
  
        switch (_info.channelType) {
          case webcl.SNORM_INT8:
          case webcl.SIGNED_INT8:
          case webcl.UNORM_INT8:        
          case webcl.UNSIGNED_INT8:
            _sizeType = 1;
            break;
          case webcl.SNORM_INT16:
          case webcl.SIGNED_INT16:
          case webcl.UNORM_INT16:        
          case webcl.UNSIGNED_INT16:
          case webcl.HALF_FLOAT:
            _sizeType = 2;      
            break;
          case webcl.SIGNED_INT32:
          case webcl.UNSIGNED_INT32:      
          case webcl.FLOAT:
            _sizeType = 4;
            break;
          default:
            console.error("getImageSizeType : This channel type is not yet implemented => "+_info.channelType);
        }
  
        return _sizeType;
      },getImageFormatType:function (image) {
        var _type = 0;
  
  
        var _info = CL.cl_objects[image].getInfo();
  
        switch (_info.channelType) {
          case webcl.SNORM_INT8:
          case webcl.SIGNED_INT8:
            _type = webcl.SIGNED_INT8;
            break;
          case webcl.UNORM_INT8:        
          case webcl.UNSIGNED_INT8:
            _type = webcl.UNSIGNED_INT8;
            break;
          case webcl.SNORM_INT16:
          case webcl.SIGNED_INT16:
            _type = webcl.SIGNED_INT16;
            break;
          case webcl.UNORM_INT16:        
          case webcl.UNSIGNED_INT16:
            _type = webcl.UNSIGNED_INT16;
            break;
          case webcl.SIGNED_INT32:
            _type = webcl.SIGNED_INT32;
          case webcl.UNSIGNED_INT32:
            _type = webcl.UNSIGNED_INT32;
            break;        
          case webcl.FLOAT:
            _type = webcl.FLOAT;
            break;
          default:
            console.error("getImageFormatType : This channel type is not yet implemented => "+_info.channelType);
        }
  
        return _type;
      },getImageSizeOrder:function (image) {
        var _sizeOrder = 0;
  
  
        var _info = CL.cl_objects[image].getInfo();
  
        switch (_info.channelOrder) {
          case webcl.R:
          case webcl.A:
          case webcl.INTENSITY:
          case webcl.LUMINANCE:
            _sizeOrder = 1;
            break;
          case webcl.RG:
          case webcl.RA:
            _sizeOrder = 2;
            break;
          case webcl.RGB:
            _sizeOrder = 3;
            break; 
          case webcl.RGBA:
          case webcl.BGRA:
          case webcl.ARGB:      
            _sizeOrder = 4;
            break;        
          default:
            console.error("getImageFormatType : This channel order is not yet implemented => "+_info.channelOrder);
        }
  
        return _sizeOrder;
      },getHostPtrArray:function (size,type) { 
  
        var _host_ptr = null;
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              _host_ptr = new Int8Array( size );
              break;
            case webcl.SIGNED_INT16:
              _host_ptr = new Int16Array( size >> 1 );
              break;
            case webcl.SIGNED_INT32:
              _host_ptr = new Int32Array( size >> 2 );
              break;
            case webcl.UNSIGNED_INT8:
              _host_ptr = new Uint8Array( size );
              break;
            case webcl.UNSIGNED_INT16:
              _host_ptr = new Uint16Array( size >> 1 );
              break;
            case webcl.UNSIGNED_INT32:
              _host_ptr = new Uint32Array( size >> 2 );
              break;         
            default:
              _host_ptr = new Float32Array( size >> 2 );
              break;
          }
        } else {
          _host_ptr = new Float32Array( size >> 2 );
        }
  
        return _host_ptr;
      },getCopyPointerToArray:function (ptr,size,type) { 
  
        var _host_ptr = null;
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              _host_ptr = new Int8Array( HEAP8.subarray((ptr),(ptr+size)) );
              break;
            case webcl.SIGNED_INT16:
              _host_ptr = new Int16Array( HEAP16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;
            case webcl.SIGNED_INT32:
              _host_ptr = new Int32Array( HEAP32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
            case webcl.UNSIGNED_INT8:
              _host_ptr = new Uint8Array( HEAPU8.subarray((ptr),(ptr+size)) );
              break;
            case webcl.UNSIGNED_INT16:
              _host_ptr = new Uint16Array( HEAPU16.subarray((ptr)>>1,(ptr+size)>>1) );
              break;
            case webcl.UNSIGNED_INT32:
              _host_ptr = new Uint32Array( HEAPU32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;         
            default:
              _host_ptr = new Float32Array( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
              break;
          }
        } else {
          _host_ptr = new Float32Array( HEAPF32.subarray((ptr)>>2,(ptr+size)>>2) );
          
          // console.info("------");
          // _host_ptr = new DataView(new ArrayBuffer(size));
  
          // var _offset = 0;
          // for (var i = 0; i < type.length; i++) {
          //   var _type = type[i][0];
          //   var _num = type[i][1];
          //   switch(_type) {
          //     case webcl.SIGNED_INT8:
          //       _host_ptr.setInt8(_offset,new Int8Array( HEAP8.subarray((ptr+_offset),(ptr+_offset+_num)) ));
          //       console.info("setInt8 : "+_offset+ " - "+(_offset+_num)+" / "+size );
          //       _offset += _num;
          //       break;
          //     case webcl.SIGNED_INT16:
          //       _host_ptr.setInt16(_offset,new Int16Array( HEAP16.subarray((ptr+_offset)>>1,(ptr+_offset+_num*2)>>1) ));
          //       console.info("setInt16 : "+_offset+ " - "+(_offset+_num*2)+" / "+size );
          //       _offset += 2*_num;
          //       break;
          //     case webcl.SIGNED_INT32:
          //       _host_ptr.setInt32(_offset,new Int32Array( HEAP32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) ));
          //       console.info("setInt32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;
          //     case webcl.UNSIGNED_INT8:
          //       _host_ptr.setUint8(_offset,new Uint8Array( HEAPU8.subarray((ptr+_offset),(ptr+_offset+_num)) ));
          //       console.info("setUint8 : "+_offset+ " - "+(_offset+_num)+" / "+size );
          //       _offset += _num;
          //       break;
          //     case webcl.UNSIGNED_INT16:
          //       host_ptr.setUint16(_offset,new Uint16Array( HEAPU16.subarray((ptr+_offset)>>1,(ptr+_offset+_num*2)>>1) ));
          //       console.info("setUint16 : "+_offset+ " - "+(_offset+_num*2)+" / "+size );
          //       _offset += 2*_num;
          //       break;
          //     case webcl.UNSIGNED_INT32:
          //       _host_ptr.setUint32(_offset,new Uint32Array( HEAPU32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) ));
          //       console.info("setUint32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;         
          //     default:
          //       _host_ptr.setFloat32(_offset,new Float32Array( HEAPF32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) ));
          //       console.info("setFloat32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;
          //   }
          // }
        }
  
        return _host_ptr;
      },getReferencePointerToArray:function (ptr,size,type) {  
        var _host_ptr = null;
  
        if (type.length == 0) {
        }
  
        if (type.length == 1) {
          switch(type[0][0]) {
            case webcl.SIGNED_INT8:
              _host_ptr = HEAP8.subarray((ptr),(ptr+size));
              break;
            case webcl.SIGNED_INT16:
              _host_ptr = HEAP16.subarray((ptr)>>1,(ptr+size)>>1);
              break;
            case webcl.SIGNED_INT32:
              _host_ptr = HEAP32.subarray((ptr)>>2,(ptr+size)>>2);
              break;
            case webcl.UNSIGNED_INT8:
              _host_ptr = HEAPU8.subarray((ptr),(ptr+size));
              break;
            case webcl.UNSIGNED_INT16:
              _host_ptr = HEAPU16.subarray((ptr)>>1,(ptr+size)>>1);
              break;
            case webcl.UNSIGNED_INT32:
              _host_ptr = HEAPU32.subarray((ptr)>>2,(ptr+size)>>2);
              break;         
            default:
              _host_ptr = HEAPF32.subarray((ptr)>>2,(ptr+size)>>2);
              break;
          }
        } else {
          _host_ptr = HEAPF32.subarray((ptr)>>2,(ptr+size)>>2);
          
          // console.info("------");
          // _host_ptr = new DataView(new ArrayBuffer(size));
  
          // var _offset = 0;
          // for (var i = 0; i < type.length; i++) {
          //   var _type = type[i][0];
          //   var _num = type[i][1];
          //   switch(_type) {
          //     case webcl.SIGNED_INT8:
          //       _host_ptr.setInt8(_offset,HEAP8.subarray((ptr+_offset),(ptr+_offset+_num)) );
          //       console.info("setInt8 : "+_offset+ " - "+(_offset+_num)+" / "+size );
          //       _offset += _num;
          //       break;
          //     case webcl.SIGNED_INT16:
          //       _host_ptr.setInt16(_offset,HEAP16.subarray((ptr+_offset)>>1,(ptr+_offset+_num*2)>>1) );
          //       console.info("setInt16 : "+_offset+ " - "+(_offset+_num*2)+" / "+size );
          //       _offset += 2*_num;
          //       break;
          //     case webcl.SIGNED_INT32:
          //       _host_ptr.setInt32(_offset,HEAP32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) );
          //       console.info("setInt32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;
          //     case webcl.UNSIGNED_INT8:
          //       _host_ptr.setUint8(_offset,HEAPU8.subarray((ptr+_offset),(ptr+_offset+_num)) );
          //       console.info("setUint8 : "+_offset+ " - "+(_offset+_num)+" / "+size );
          //       _offset += _num;
          //       break;
          //     case webcl.UNSIGNED_INT16:
          //       host_ptr.setUint16(_offset,HEAPU16.subarray((ptr+_offset)>>1,(ptr+_offset+_num*2)>>1) );
          //       console.info("setUint16 : "+_offset+ " - "+(_offset+_num*2)+" / "+size );
          //       _offset += 2*_num;
          //       break;
          //     case webcl.UNSIGNED_INT32:
          //       _host_ptr.setUint32(_offset,HEAPU32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) );
          //       console.info("setUint32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;         
          //     default:
          //       _host_ptr.setFloat32(_offset,HEAPF32.subarray((ptr+_offset)>>2,(ptr+_offset+_num*4)>>2) );
          //       console.info("setFloat32 : "+_offset+ " - "+(_offset+_num*4)+" / "+size );
          //       _offset += 4*_num;
          //       break;
          //   }
          // }
        }
  
        return _host_ptr;
      },catchError:function (e) {
        console.error(e);
        var _error = -1;
  
        if (e instanceof WebCLException) {
          var _str=e.message;
          var _n=_str.lastIndexOf(" ");
          _error = _str.substr(_n+1,_str.length-_n-1);
        }
        
        return _error;
      }};function _clGetPlatformIDs(num_entries,platforms,num_platforms) {
  
  
      // Init webcl variable if necessary
      if (CL.init() == 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( num_entries == 0 && platforms != 0) {
        return webcl.INVALID_VALUE;
      }
  
      if ( num_platforms == 0 && platforms == 0) {
        return webcl.INVALID_VALUE;
      }
  
      var _platforms = null;
  
      try { 
  
        _platforms = webcl.getPlatforms();
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        return _error;
      }
  
      if (num_platforms != 0) {
        HEAP32[((num_platforms)>>2)]=_platforms.length /* Num of platforms */;
      } 
  
      if (platforms != 0) {
        for (var i = 0; i < Math.min(num_entries,_platforms.length); i++) {
          var _id = CL.udid(_platforms[i]);
          HEAP32[(((platforms)+(i*4))>>2)]=_id;
        }
      }
  
      return webcl.SUCCESS;
    }

  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              var url = 'ws://' + addr + ':' + port;
              // the node ws library API is slightly different than the browser's
              var opts = ENVIRONMENT_IS_NODE ? {headers: {'websocket-protocol': ['binary']}} : ['binary'];
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }

  
  var GLFW={keyFunc:null,charFunc:null,mouseButtonFunc:null,mousePosFunc:null,mouseWheelFunc:null,resizeFunc:null,closeFunc:null,refreshFunc:null,params:null,initTime:null,wheelPos:0,buttons:0,keys:0,initWindowWidth:640,initWindowHeight:480,windowX:0,windowY:0,windowWidth:0,windowHeight:0,DOMToGLFWKeyCode:function (keycode) {
        switch (keycode) {
          case 0x09: return 295 ; //DOM_VK_TAB -> GLFW_KEY_TAB
          case 0x1B: return 255 ; //DOM_VK_ESCAPE -> GLFW_KEY_ESC
          case 0x6A: return 313 ; //DOM_VK_MULTIPLY -> GLFW_KEY_KP_MULTIPLY
          case 0x6B: return 315 ; //DOM_VK_ADD -> GLFW_KEY_KP_ADD
          case 0x6D: return 314 ; //DOM_VK_SUBTRACT -> GLFW_KEY_KP_SUBTRACT
          case 0x6E: return 316 ; //DOM_VK_DECIMAL -> GLFW_KEY_KP_DECIMAL
          case 0x6F: return 312 ; //DOM_VK_DIVIDE -> GLFW_KEY_KP_DIVIDE
          case 0x70: return 258 ; //DOM_VK_F1 -> GLFW_KEY_F1
          case 0x71: return 259 ; //DOM_VK_F2 -> GLFW_KEY_F2
          case 0x72: return 260 ; //DOM_VK_F3 -> GLFW_KEY_F3
          case 0x73: return 261 ; //DOM_VK_F4 -> GLFW_KEY_F4
          case 0x74: return 262 ; //DOM_VK_F5 -> GLFW_KEY_F5
          case 0x75: return 263 ; //DOM_VK_F6 -> GLFW_KEY_F6
          case 0x76: return 264 ; //DOM_VK_F7 -> GLFW_KEY_F7
          case 0x77: return 265 ; //DOM_VK_F8 -> GLFW_KEY_F8
          case 0x78: return 266 ; //DOM_VK_F9 -> GLFW_KEY_F9
          case 0x79: return 267 ; //DOM_VK_F10 -> GLFW_KEY_F10
          case 0x7a: return 268 ; //DOM_VK_F11 -> GLFW_KEY_F11
          case 0x7b: return 269 ; //DOM_VK_F12 -> GLFW_KEY_F12
          case 0x25: return 285 ; //DOM_VK_LEFT -> GLFW_KEY_LEFT
          case 0x26: return 283 ; //DOM_VK_UP -> GLFW_KEY_UP
          case 0x27: return 286 ; //DOM_VK_RIGHT -> GLFW_KEY_RIGHT
          case 0x28: return 284 ; //DOM_VK_DOWN -> GLFW_KEY_DOWN
          case 0x21: return 298 ; //DOM_VK_PAGE_UP -> GLFW_KEY_PAGEUP
          case 0x22: return 299 ; //DOM_VK_PAGE_DOWN -> GLFW_KEY_PAGEDOWN
          case 0x24: return 300 ; //DOM_VK_HOME -> GLFW_KEY_HOME
          case 0x23: return 301 ; //DOM_VK_END -> GLFW_KEY_END
          case 0x2d: return 296 ; //DOM_VK_INSERT -> GLFW_KEY_INSERT
          case 16  : return 287 ; //DOM_VK_SHIFT -> GLFW_KEY_LSHIFT
          case 0x05: return 287 ; //DOM_VK_LEFT_SHIFT -> GLFW_KEY_LSHIFT
          case 0x06: return 288 ; //DOM_VK_RIGHT_SHIFT -> GLFW_KEY_RSHIFT
          case 17  : return 289 ; //DOM_VK_CONTROL -> GLFW_KEY_LCTRL
          case 0x03: return 289 ; //DOM_VK_LEFT_CONTROL -> GLFW_KEY_LCTRL
          case 0x04: return 290 ; //DOM_VK_RIGHT_CONTROL -> GLFW_KEY_RCTRL
          case 18  : return 291 ; //DOM_VK_ALT -> GLFW_KEY_LALT
          case 0x02: return 291 ; //DOM_VK_LEFT_ALT -> GLFW_KEY_LALT
          case 0x01: return 292 ; //DOM_VK_RIGHT_ALT -> GLFW_KEY_RALT
          case 96  : return 302 ; //GLFW_KEY_KP_0
          case 97  : return 303 ; //GLFW_KEY_KP_1
          case 98  : return 304 ; //GLFW_KEY_KP_2
          case 99  : return 305 ; //GLFW_KEY_KP_3
          case 100 : return 306 ; //GLFW_KEY_KP_4
          case 101 : return 307 ; //GLFW_KEY_KP_5
          case 102 : return 308 ; //GLFW_KEY_KP_6
          case 103 : return 309 ; //GLFW_KEY_KP_7
          case 104 : return 310 ; //GLFW_KEY_KP_8
          case 105 : return 311 ; //GLFW_KEY_KP_9
          default  : return keycode;
        };
      },getUnicodeChar:function (value) {
        var output = '';
        if (value > 0xFFFF) {
          value -= 0x10000;
          output += String.fromCharCode(value >>> 10 & 0x3FF | 0xD800);
          value = 0xDC00 | value & 0x3FF;
        }
        output += String.fromCharCode(value);
        return output;
      },onKeyPress:function (event) {
        //charCode is only available whith onKeyPress event
        var char = GLFW.getUnicodeChar(event.charCode);
  
        if (event.charCode) {
          var char = GLFW.getUnicodeChar(event.charCode);
          if (char !== null && GLFW.charFunc) {
            Runtime.dynCall('vii', GLFW.charFunc, [event.charCode, 1]);
          }
        }
      },onKeyChanged:function (event, status) {
        var key = GLFW.DOMToGLFWKeyCode(event.keyCode);
        if (key && GLFW.keyFunc) {
          GLFW.keys[key] = status;
          Runtime.dynCall('vii', GLFW.keyFunc, [key, status]);
        }
      },onKeydown:function (event) {
        GLFW.onKeyChanged(event, 1);//GLFW_PRESS
        // This logic comes directly from the sdl implementation. We cannot
        // call preventDefault on all keydown events otherwise onKeyPress will
        // not get called
        if (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */) {
          event.preventDefault();
        }
      },onKeyup:function (event) {
        GLFW.onKeyChanged(event, 0);//GLFW_RELEASE
      },onMousemove:function (event) {
        /* Send motion event only if the motion changed, prevents
         * spamming our app with uncessary callback call. It does happen in
         * Chrome on Windows.
         */
        var lastX = Browser.mouseX;
        var lastY = Browser.mouseY;
        Browser.calculateMouseEvent(event);
        var newX = Browser.mouseX;
        var newY = Browser.mouseY;
  
        if (event.target == Module["canvas"] && GLFW.mousePosFunc) {
          event.preventDefault();
          Runtime.dynCall('vii', GLFW.mousePosFunc, [lastX, lastY]);
        }
      },onMouseButtonChanged:function (event, status) {
        if (GLFW.mouseButtonFunc == null) {
          return;
        }
  
        Browser.calculateMouseEvent(event);
  
        if (event.target != Module["canvas"]) {
          return;
        }
  
        if (status == 1) {//GLFW_PRESS
          try {
            event.target.setCapture();
          } catch (e) {}
        }
  
        event.preventDefault();
        //DOM and glfw have the same button codes
        Runtime.dynCall('vii', GLFW.mouseButtonFunc, [event['button'], status]);
      },onMouseButtonDown:function (event) {
        GLFW.buttons |= (1 << event['button']);
        GLFW.onMouseButtonChanged(event, 1);//GLFW_PRESS
      },onMouseButtonUp:function (event) {
        GLFW.buttons &= ~(1 << event['button']);
        GLFW.onMouseButtonChanged(event, 0);//GLFW_RELEASE
      },onMouseWheel:function (event) {
        GLFW.wheelPos += Browser.getMouseWheelDelta(event);
  
        if (GLFW.mouseWheelFunc && event.target == Module["canvas"]) {
          Runtime.dynCall('vi', GLFW.mouseWheelFunc, [GLFW.wheelPos]);
          event.preventDefault();
        }
      },onFullScreenEventChange:function (event) {
        var width;
        var height;
        if (document["fullScreen"] || document["mozFullScreen"] || document["webkitIsFullScreen"]) {
          width = screen["width"];
          height = screen["height"];
        }
        else {
          width = GLFW.windowWidth;
          height = GLFW.windowHeight;
          // TODO set position
          document.removeEventListener('fullscreenchange', GLFW.onFullScreenEventChange, true);
          document.removeEventListener('mozfullscreenchange', GLFW.onFullScreenEventChange, true);
          document.removeEventListener('webkitfullscreenchange', GLFW.onFullScreenEventChange, true);
        }
        Browser.setCanvasSize(width, height);
  
        if (GLFW.resizeFunc) {
          Runtime.dynCall('vii', GLFW.resizeFunc, [width, height]);
        }
      },requestFullScreen:function () {
        var RFS = Module["canvas"]['requestFullscreen'] ||
                  Module["canvas"]['requestFullScreen'] ||
                  Module["canvas"]['mozRequestFullScreen'] ||
                  Module["canvas"]['webkitRequestFullScreen'] ||
                  (function() {});
        RFS.apply(Module["canvas"], []);
      },cancelFullScreen:function () {
        var CFS = document['exitFullscreen'] ||
                  document['cancelFullScreen'] ||
                  document['mozCancelFullScreen'] ||
                  document['webkitCancelFullScreen'] ||
            (function() {});
        CFS.apply(document, []);
      }};function _glfwGetTime() {
      return (Date.now()/1000) - GLFW.initTime;
    }

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        
        // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
        // Module['forcedAspectRatio'] = 4 / 3;
        
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'] ||
                                    canvas['msRequestPointerLock'] ||
                                    function(){};
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 document['msExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        var canvasContainer = canvas.parentNode;
        function fullScreenChange() {
          Browser.isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            var canvasContainer = canvas.parentNode;
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        return Math.max(-1, Math.min(1, event.type === 'DOMMouseScroll' ? event.detail : -event.wheelDelta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var x, y;
          
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
          if (event.type == 'touchstart' ||
              event.type == 'touchend' ||
              event.type == 'touchmove') {
            var t = event.touches.item(0);
            if (t) {
              x = t.pageX - (scrollX + rect.left);
              y = t.pageY - (scrollY + rect.top);
            } else {
              return;
            }
          } else {
            x = event.pageX - (scrollX + rect.left);
            y = event.pageY - (scrollY + rect.top);
          }
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};

  function _glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _emscripten_cancel_main_loop() {
      Browser.mainLoop.scheduler = null;
      Browser.mainLoop.shouldPause = true;
    }

  function _clReleaseCommandQueue(command_queue) {
  
      // If is an object retain don't release it until retains > 0...
      if (command_queue in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[command_queue] - 1;
  
        CL.cl_objects_retains[command_queue] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
      try {
  
          CL.cl_objects[command_queue].release();
          delete CL.cl_objects[command_queue];  
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  function _glfwSetWindowSizeCallback(cbfun) {
      GLFW.resizeFunc = cbfun;
    }

  function _glfwSetWindowTitle(title) {
      document.title = Pointer_stringify(title);
    }

  function _clGetContextInfo(context,param_name,param_value_size,param_value,param_value_size_ret) {
  
  
      var _info = null;
  
      try { 
  
  
        if (param_name == 0x1080 /* CL_CONTEXT_REFERENCE_COUNT */) {
          _info = 0;
  
          if (context in CL.cl_objects) {
            _info++;
          }
  
          if (context in CL.cl_objects_retains) {
            _info+=CL.cl_objects_retains[context];
          }
  
        }  else if (param_name == 0x1082 /* CL_CONTEXT_PROPERTIES */) {
        
          _info = "WebCLContextProperties";
  
        } else {
  
          _info = CL.cl_objects[context].getInfo(param_name);
  
        }
        
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (param_value != 0) {
          HEAP32[((param_value)>>2)]=0;
        }
      
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=0;
        }
  
        return _error;
      }
      
       if (_info == "WebCLContextProperties") {
  
        var _size = 0;
  
        if (param_value != 0) {
  
          if ( CL.cl_objects[context].hasOwnProperty('properties') ) {
            var _properties = CL.cl_objects[context].properties;
  
            for (elt in _properties) {
              HEAP32[(((param_value)+(_size*4))>>2)]=_properties[elt];
              _size ++;
  
            }
          }
        }
  
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=_size*4;
  
      } else if(typeof(_info) == "number") {
  
        if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
      } else if(typeof(_info) == "boolean") {
  
        if (param_value != 0) (_info == true) ? HEAP32[((param_value)>>2)]=1 : HEAP32[((param_value)>>2)]=0;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
      } else if(typeof(_info) == "object") {
  
        if (_info instanceof WebCLPlatform) {
       
          var _id = CL.udid(_info);
          if (param_value != 0) HEAP32[((param_value)>>2)]=_id;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
        } else if (_info instanceof Array) {
  
          for (var i = 0; i < Math.min(param_value_size>>2,_info.length); i++) {
            var _id = CL.udid(_info[i]);
            if (param_value != 0) HEAP32[(((param_value)+(i*4))>>2)]=_id;
          }
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=_info.length*4;
  
        } else if (_info == null) {
  
          if (param_value != 0) HEAP32[((param_value)>>2)]=0;
          if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=0;
  
        } else {
          return webcl.INVALID_VALUE;
        }
      } else {
        return webcl.INVALID_VALUE;
      }
  
      return webcl.SUCCESS;
    }

  function _clRetainCommandQueue(command_queue) {
  
  
      if (!(command_queue in CL.cl_objects_retains)) {
        CL.cl_objects_retains[command_queue] = 1;
      } else {
        CL.cl_objects_retains[command_queue] = CL.cl_objects_retains[command_queue] + 1;
      }
  
  
      return webcl.SUCCESS;
    }

  
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }function _isxdigit_l(chr) {
      return _isxdigit(chr); // no locale support yet
    }

  function _glfwSetMousePosCallback(cbfun) {
      GLFW.mousePosFunc = cbfun;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _strstr(ptr1, ptr2) {
      var check = 0, start;
      do {
        if (!check) {
          start = ptr1;
          check = ptr2;
        }
        var curr1 = HEAP8[((ptr1++)|0)];
        var curr2 = HEAP8[((check++)|0)];
        if (curr2 == 0) return start;
        if (curr2 != curr1) {
          // rewind to one character after start, to find ez in eeez
          ptr1 = start + 1;
          check = 0;
        }
      } while (curr1);
      return 0;
    }

   
  Module["_memmove"] = _memmove;

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = GL.getNewId(GL.textures);
        var texture = GLctx.createTexture();
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function _newlocale(mask, locale, base) {
      return _malloc(4);
    }

  var _emscripten_preinvoke=true;

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  
  function ___resumeException(ptr) {
      if (!___cxa_last_thrown_exception) { ___cxa_last_thrown_exception = ptr; }
      throw ptr;
    }function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = ___cxa_last_thrown_exception;
      header = thrown - ___cxa_exception_header_size;
      if (throwntype == -1) throwntype = HEAP32[((header)>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
  
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function _pthread_cond_wait() {
      return 0;
    }

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = ___cxa_caught_exceptions.pop();
      throw ptr;
    }

  function _fmod(x, y) {
      return x % y;
    }

  function _glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function _glUniform1i(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1i(location, v0);
    }

  var _cosf=Math_cos;

  
  
  
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
                if (next === 0) return i > 0 ? fields : fields-1; // we failed to read the full length of this field
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
  
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
  
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
  
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
  
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
  
            // write out null-terminating character
            HEAP8[((argPtr++)|0)]=0;
            formatIndex += match[0].length;
            
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
  
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16);
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text);
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text);
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j];
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      function get() { return HEAP8[(((s)+(index++))|0)]; };
      function unget() { index--; };
      return __scanString(format, get, unget, varargs);
    }function _vsscanf(s, format, va_arg) {
      return _sscanf(s, format, HEAP32[((va_arg)>>2)]);
    }

  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }

  function _glfwCloseWindow() {
      if (GLFW.closeFunc) {
        Runtime.dynCall('v', GLFW.closeFunc, []);
      }
      Module.ctx = Browser.destroyContext(Module['canvas'], true, true);
    }

  function _glBlendFuncSeparate(x0, x1, x2, x3) { GLctx.blendFuncSeparate(x0, x1, x2, x3) }

  function _clReleaseMemObject(memobj) {
  
      // If is an object retain don't release it until retains > 0...
      if (memobj in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[memobj] - 1;
  
        CL.cl_objects_retains[memobj] = _retain;
  
        if (_retain >= 0) {
          
          // Call the callback 
          if (memobj in CL.cl_objects_mem_callback) {
            if (CL.cl_objects_mem_callback[memobj].length > 0)
              CL.cl_objects_mem_callback[memobj].pop()();
          }
  
          return webcl.SUCCESS;
        }
      }
  
      try {
  
        // Call the callback 
        if (memobj in CL.cl_objects_mem_callback) {
          if (CL.cl_objects_mem_callback[memobj].length > 0)
            CL.cl_objects_mem_callback[memobj].pop()();
        }
  
        CL.cl_objects[memobj].release();
        delete CL.cl_objects[memobj];  
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

   
  Module["_memset"] = _memset;

  function _clReleaseContext(context) {
  
  
      // If is an object retain don't release it until retains > 0...
      if (context in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[context] - 1;
  
        CL.cl_objects_retains[context] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
      try {
  
          CL.cl_objects[context].release();
          delete CL.cl_objects[context];     
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      return webcl.SUCCESS;
    }

  function _glGetProgramiv(program, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        HEAP32[((p)>>2)]=GLctx.getProgramInfoLog(GL.programs[program]).length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          HEAP32[((p)>>2)]=ptable.maxUniformLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          if (ptable.maxAttributeLength == -1) {
            var program = GL.programs[program];
            var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
            ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
            for(var i = 0; i < numAttribs; ++i) {
              var activeAttrib = GLctx.getActiveAttrib(program, i);
              ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
            }
          }
          HEAP32[((p)>>2)]=ptable.maxAttributeLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      var cb = GL.clientBuffers[index];
      assert(cb, index);
      if (!GL.currArrayBuffer) {
        cb.size = size;
        cb.type = type;
        cb.normalized = normalized;
        cb.stride = stride;
        cb.ptr = ptr;
        cb.clientside = true;
        return;
      }
      cb.clientside = false;
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }

  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }

  var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }


  function _glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _clEnqueueAcquireGLObjects(command_queue,num_objects,mem_objects,num_events_in_wait_list,event_wait_list,event) {
        
      var _event_wait_list = [];
      var _mem_objects = [];
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      }
  
      for (var i = 0; i < num_objects; i++) {
        var _id = HEAP32[(((mem_objects)+(i*4))>>2)];
  
        
        _mem_objects.push(CL.cl_objects[_id]);
      }
  
      try { 
  
        if (event != 0) {
          var _event = new WebCLEvent();
          CL.cl_objects[command_queue].enqueueAcquireGLObjects(_mem_objects,_event_wait_list,_event); 
          HEAP32[((event)>>2)]=CL.udid(_event);
        } else {
          CL.cl_objects[command_queue].enqueueAcquireGLObjects(_mem_objects,_event_wait_list);    
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      
      return webcl.SUCCESS;
    }

  function _glBindFramebuffer(target, framebuffer) {
      GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
    }

  
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }function _isdigit_l(chr) {
      return _isdigit(chr); // no locale support yet
    }

  function _glUniform1f(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1f(location, v0);
    }

  function ___cxa_guard_abort() {}

  function _glDrawArrays(mode, first, count) {
      // bind any client-side buffers
      GL.preDrawHandleClientVertexAttribBindings(first + count);
  
      GLctx.drawArrays(mode, first, count);
  
      GL.postDrawHandleClientVertexAttribBindings();
    }

  function _ftell(stream) {
      // long ftell(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ftell.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      if (FS.isChrdev(stream.node.mode)) {
        ___setErrNo(ERRNO_CODES.ESPIPE);
        return -1;
      } else {
        return stream.position;
      }
    }

  function _glDeleteProgram(program) {
      var program = GL.programs[program];
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[program] = null;
      GL.programInfos[program] = null;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function _clRetainProgram(program) {
  
  
      if (!(program in CL.cl_objects_retains)) {
        CL.cl_objects_retains[program] = 1;
      } else {
        CL.cl_objects_retains[program] = CL.cl_objects_retains[program] + 1;
      }
          
      return webcl.SUCCESS;
    }

  function _glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _freelocale(locale) {
      _free(locale);
    }

  function _glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _glfwPollEvents() {}

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC); 
  Module["_llvm_ctlz_i32"] = _llvm_ctlz_i32;

  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[(variable)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[(variable)]=1;
        return 1;
      }
      return 0;
    }

  function _glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }

  function _clRetainKernel(kernel) {
  
      if (!(kernel in CL.cl_objects_retains)) {
        CL.cl_objects_retains[kernel] = 1;
      } else {
        CL.cl_objects_retains[kernel] = CL.cl_objects_retains[kernel] + 1;
      }
  
      return webcl.SUCCESS;
    }

  function _glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      // Work around a bug in Chromium which causes getProgramInfoLog to return null
      if (!log) {
        log = "";
      }
      log = log.substr(0, maxLength - 1);
      writeStringToMemory(log, infoLog);
      if (length) {
        HEAP32[((length)>>2)]=log.length
      }
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      ___cxa_caught_exceptions.push(___cxa_last_thrown_exception);
      return ptr;
    }

  function _glfwTerminate() {}

  function _glGenVertexArrays(n, arrays) {
  
      for(var i = 0; i < n; i++) {
        var id = GL.getNewId(GL.vaos);
        var vao = GL.vaoExt.createVertexArrayOES();
        vao.name = id;
        GL.vaos[id] = vao;
        HEAP32[(((arrays)+(i*4))>>2)]=id;
      }
    }


  
  
  function _lseek(fildes, offset, whence) {
      // off_t lseek(int fildes, off_t offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/lseek.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        return FS.llseek(stream, offset, whence);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fseek(stream, offset, whence) {
      // int fseek(FILE *stream, long offset, int whence);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fseek.html
      var fd = _fileno(stream);
      var ret = _lseek(fd, offset, whence);
      if (ret == -1) {
        return -1;
      }
      stream = FS.getStreamFromPtr(stream);
      stream.eof = false;
      return 0;
    }var _fseeko=_fseek;

  function _glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }

  function _clFinish(command_queue) {
  
  
      try {
  
        CL.cl_objects[command_queue].finish();
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
    }

  function _glGetShaderiv(shader, pname, p) {
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        // Work around a bug in Chromium which causes getShaderInfoLog to return null
        if (!log) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  var ___cxa_atexit=_atexit;

  
   
  Module["_rand_r"] = _rand_r;
  
  var ___rand_seed=allocate([0x0273459b, 0, 0, 0], "i32", ALLOC_STATIC); 
  Module["_rand"] = _rand;

  var _llvm_memset_p0i8_i32=_memset;

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      var header = ptr - ___cxa_exception_header_size;
      HEAP32[((header)>>2)]=type;
      HEAP32[(((header)+(4))>>2)]=destructor;
      ___cxa_last_thrown_exception = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function _clReleaseKernel(kernel) {
  
      // If is an object retain don't release it until retains > 0...
      if (kernel in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[kernel] - 1;
  
        CL.cl_objects_retains[kernel] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
  
      try {
  
        CL.cl_objects[kernel].release();
          
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      delete CL.cl_objects[kernel];
  
  
      return webcl.SUCCESS;
    }

  var _emscripten_landingpad=true;

  var _sinf=Math_sin;

  
  function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }

  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }

  var _sqrtf=Math_sqrt;

  
  
  
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }
  function __parseInt64(str, endptr, base, min, max, unsign) {
      var isNegative = false;
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      if (HEAP8[(str)] == 45) {
        str++;
        isNegative = true;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
  
      // Find base.
      var ok = false;
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            ok = true; // we saw an initial zero, perhaps the entire thing is just "0"
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      var start = str;
  
      // Get digits.
      var chr;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          str++;
          ok = true;
        }
      }
  
      if (!ok) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return ((asm["setTempRet0"](0),0)|0);
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str;
      }
  
      try {
        var numberString = isNegative ? '-'+Pointer_stringify(start, str - start) : Pointer_stringify(start, str - start);
        i64Math.fromString(numberString, finalBase, min, max, unsign);
      } catch(e) {
        ___setErrNo(ERRNO_CODES.ERANGE); // not quite correct
      }
  
      return ((asm["setTempRet0"](((HEAP32[(((tempDoublePtr)+(4))>>2)])|0)),((HEAP32[((tempDoublePtr)>>2)])|0))|0);
    }function _strtoull(str, endptr, base) {
      return __parseInt64(str, endptr, base, 0, '18446744073709551615', true);  // ULONG_MAX.
    }function _strtoull_l(str, endptr, base) {
      return _strtoull(str, endptr, base); // no locale support yet
    }

  function _clEnqueueReleaseGLObjects(command_queue,num_objects,mem_objects,num_events_in_wait_list,event_wait_list,event) {
        
      var _event_wait_list = [];
      var _mem_objects = [];
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      }
  
      for (var i = 0; i < num_objects; i++) {
        var _id = HEAP32[(((mem_objects)+(i*4))>>2)];
  
        
        _mem_objects.push(CL.cl_objects[_id]);
      }
  
      try { 
  
          if (event != 0) {
            var _event = new WebCLEvent();
            CL.cl_objects[command_queue].enqueueReleaseGLObjects(_mem_objects,_event_wait_list,_event);    
            HEAP32[((event)>>2)]=CL.udid(_event);  
          } else {
            CL.cl_objects[command_queue].enqueueReleaseGLObjects(_mem_objects,_event_wait_list);      
          }
  
      } catch (e) {
  
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      
      return webcl.SUCCESS;
    }

  var _emscripten_postinvoke=true;

  var _copysignl=_copysign;

  
  function _strtoll(str, endptr, base) {
      return __parseInt64(str, endptr, base, '-9223372036854775808', '9223372036854775807');  // LLONG_MIN, LLONG_MAX.
    }function _strtoll_l(str, endptr, base) {
      return _strtoll(str, endptr, base); // no locale support yet
    }

  function _glClear(x0) { GLctx.clear(x0) }

  function _clEnqueueNDRangeKernel(command_queue,kernel,work_dim,global_work_offset,global_work_size,local_work_size,num_events_in_wait_list,event_wait_list,event) {
  
      var _event_wait_list;
      var _local_work_size;
  
      // \todo need to be remove when webkit will be support null
      /**** **** **** **** **** **** **** ****/
      if (navigator.userAgent.toLowerCase().indexOf('firefox') != -1) {
        _event_wait_list = num_events_in_wait_list > 0 ? [] : null;
        _local_work_size = (local_work_size != 0) ? [] : null;
      } else {
        _event_wait_list = [];
        _local_work_size = [];
      }
  
  
      var _global_work_offset = [];
      var _global_work_size = [];
      
  
      for (var i = 0; i < work_dim; i++) {
        _global_work_size.push(HEAP32[(((global_work_size)+(i*4))>>2)]);
  
        if (global_work_offset != 0)
          _global_work_offset.push(HEAP32[(((global_work_offset)+(i*4))>>2)]);
      
        if (local_work_size != 0)
          _local_work_size.push(HEAP32[(((local_work_size)+(i*4))>>2)]);
      }
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
         
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      }
             
      try { 
        
        if (event != 0) {
          var _event = new WebCLEvent();
          CL.cl_objects[command_queue].enqueueNDRangeKernel(CL.cl_objects[kernel],work_dim,_global_work_offset,_global_work_size,_local_work_size,_event_wait_list,_event);  
          HEAP32[((event)>>2)]=CL.udid(_event);
        } else {
          CL.cl_objects[command_queue].enqueueNDRangeKernel(CL.cl_objects[kernel],work_dim,_global_work_offset,_global_work_size,_local_work_size,_event_wait_list);  
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
      
      return webcl.SUCCESS;    
  
    }

  function _clReleaseProgram(program) {
  
  
      // If is an object retain don't release it until retains > 0...
      if (program in CL.cl_objects_retains) {
  
        var _retain = CL.cl_objects_retains[program] - 1;
  
        CL.cl_objects_retains[program] = _retain;
  
        if (_retain >= 0) {
          return webcl.SUCCESS;
        }
      }
  
      try {
  
          CL.cl_objects[program].release();
          delete CL.cl_objects[program]; 
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
  
    }

  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }

  function _clCreateFromGLBuffer(context,flags_i64_1,flags_i64_2,bufobj,cl_errcode_ret) {
      // Assume the flags is i32 
      assert(flags_i64_2 == 0, 'Invalid flags i64');
   
      var _id = null;
      var _buffer = null;
      var _flags;
  
      if (flags_i64_1 & webcl.MEM_READ_WRITE) {
        _flags = webcl.MEM_READ_WRITE;
      } else if (flags_i64_1 & webcl.MEM_WRITE_ONLY) {
        _flags = webcl.MEM_WRITE_ONLY;
      } else if (flags_i64_1 & webcl.MEM_READ_ONLY) {
        _flags = webcl.MEM_READ_ONLY;
      } else {
        if (cl_errcode_ret != 0) HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_VALUE;
        return 0; 
      }
  
  
      try {
  
        _buffer = CL.cl_objects[context].createFromGLBuffer(_flags,GL.buffers[bufobj]);
  
      } catch (e) {
        var _error = CL.catchError(e);
      
        if (cl_errcode_ret != 0) HEAP32[((cl_errcode_ret)>>2)]=_error;
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) HEAP32[((cl_errcode_ret)>>2)]=0;
  
      _id = CL.udid(_buffer);
  
  
      return _id;
    }

  function _glActiveTexture(x0) { GLctx.activeTexture(x0) }

  function _glEnableVertexAttribArray(index) {
      var cb = GL.clientBuffers[index];
      assert(cb, index);
      cb.enabled = true;
      GLctx.enableVertexAttribArray(index);
    }

  function _glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
      if (target == GLctx.ARRAY_BUFFER) {
        GL.currArrayBuffer = buffer;
      } else if (target == GLctx.ELEMENT_ARRAY_BUFFER) {
        GL.currElementArrayBuffer = buffer;
      }
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

  function _glfwOpenWindow(width, height, redbits, greenbits, bluebits, alphabits, depthbits, stencilbits, mode) {
      if (width == 0 && height > 0) {
        width = 4 * height / 3;
      }
      if (width > 0 && height == 0) {
        height = 3 * width / 4;
      }
      GLFW.params[0x00020005] = redbits; //GLFW_RED_BITS
      GLFW.params[0x00020006] = greenbits; //GLFW_GREEN_BITS
      GLFW.params[0x00020007] = bluebits; //GLFW_BLUE_BITS
      GLFW.params[0x00020008] = alphabits; //GLFW_ALPHA_BITS
      GLFW.params[0x00020009] = depthbits; //GLFW_DEPTH_BITS
      GLFW.params[0x0002000A] = stencilbits; //GLFW_STENCIL_BITS
  
      if (mode == 0x00010001) {//GLFW_WINDOW
        Browser.setCanvasSize(GLFW.initWindowWidth = width,
                              GLFW.initWindowHeight = height);
        GLFW.params[0x00030003] = true; //GLFW_STICKY_MOUSE_BUTTONS
      }
      else if (mode == 0x00010002) {//GLFW_FULLSCREEN
        GLFW.requestFullScreen();
        GLFW.params[0x00030003] = false; //GLFW_STICKY_MOUSE_BUTTONS
      }
      else{
        throw "Invalid glfwOpenWindow mode.";
      }
  
      var contextAttributes = {
        antialias: (GLFW.params[0x00020013] > 1), //GLFW_FSAA_SAMPLES
        depth: (GLFW.params[0x00020009] > 0), //GLFW_DEPTH_BITS
        stencil: (GLFW.params[0x0002000A] > 0) //GLFW_STENCIL_BITS
      }
      Module.ctx = Browser.createContext(Module['canvas'], true, true, contextAttributes);
      return 1; //GL_TRUE
    }


  function _glBufferData(target, size, data, usage) {
      switch (usage) { // fix usages, WebGL only has *_DRAW
        case 0x88E1: // GL_STREAM_READ
        case 0x88E2: // GL_STREAM_COPY
          usage = 0x88E0; // GL_STREAM_DRAW
          break;
        case 0x88E5: // GL_STATIC_READ
        case 0x88E6: // GL_STATIC_COPY
          usage = 0x88E4; // GL_STATIC_DRAW
          break;
        case 0x88E9: // GL_DYNAMIC_READ
        case 0x88EA: // GL_DYNAMIC_COPY
          usage = 0x88E8; // GL_DYNAMIC_DRAW
          break;
      }
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  function _pthread_cond_broadcast() {
      return 0;
    }

  function _clEnqueueReadBuffer(command_queue,buffer,blocking_read,offset,cb,ptr,num_events_in_wait_list,event_wait_list,event) {
   
      var _event_wait_list = [];
      var _host_ptr = CL.getReferencePointerToArray(ptr,cb,CL.cl_pn_type);
    
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      } 
  
      try {
  
        if (event != 0) {
          var _event = new WebCLEvent();
          CL.cl_objects[command_queue].enqueueReadBuffer(CL.cl_objects[buffer],blocking_read,offset,cb,_host_ptr,_event_wait_list,_event);
          HEAP32[((event)>>2)]=CL.udid(_event);
        } else {
          CL.cl_objects[command_queue].enqueueReadBuffer(CL.cl_objects[buffer],blocking_read,offset,cb,_host_ptr,_event_wait_list);
        } 
      } catch (e) {
        var _error = CL.catchError(e);
          
  
        return _error;
      }
  
      return webcl.SUCCESS;    
    }

  function __ZSt9terminatev() {
      _exit(-1234);
    }

  function _pthread_mutex_unlock() {}

  function _glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      // Work around a bug in Chromium which causes getShaderInfoLog to return null
      if (!log) log = '(unknown error)';
      log = log.substr(0, maxLength - 1);
      writeStringToMemory(log, infoLog);
      if (length) {
        HEAP32[((length)>>2)]=log.length
      }
    }

  function _glGenFramebuffers(n, ids) {
      for (var i = 0; i < n; ++i) {
        var id = GL.getNewId(GL.framebuffers);
        var framebuffer = GLctx.createFramebuffer();
        framebuffer.name = id;
        GL.framebuffers[id] = framebuffer;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }

  function __ZNSt9exceptionD2Ev() {}

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  var _tanf=Math_tan;

  function ___errno_location() {
      return ___errno_state;
    }

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _glfwInit() {
      GLFW.initTime = Date.now() / 1000;
  
      window.addEventListener("keydown", GLFW.onKeydown, true);
      window.addEventListener("keypress", GLFW.onKeyPress, true);
      window.addEventListener("keyup", GLFW.onKeyup, true);
      window.addEventListener("mousemove", GLFW.onMousemove, true);
      window.addEventListener("mousedown", GLFW.onMouseButtonDown, true);
      window.addEventListener("mouseup", GLFW.onMouseButtonUp, true);
      window.addEventListener('DOMMouseScroll', GLFW.onMouseWheel, true);
      window.addEventListener('mousewheel', GLFW.onMouseWheel, true);
  
      __ATEXIT__.push({ func: function() {
        window.removeEventListener("keydown", GLFW.onKeydown, true);
        window.removeEventListener("keypress", GLFW.onKeyPress, true);
        window.removeEventListener("keyup", GLFW.onKeyup, true);
        window.removeEventListener("mousemove", GLFW.onMousemove, true);
        window.removeEventListener("mousedown", GLFW.onMouseButtonDown, true);
        window.removeEventListener("mouseup", GLFW.onMouseButtonUp, true);
        window.removeEventListener('DOMMouseScroll', GLFW.onMouseWheel, true);
        window.removeEventListener('mousewheel', GLFW.onMouseWheel, true);
        Module["canvas"].width = Module["canvas"].height = 1;
      }});
  
      //TODO: Init with correct values
      GLFW.params = new Array();
      GLFW.params[0x00030001] = true; //GLFW_MOUSE_CURSOR
      GLFW.params[0x00030002] = false; //GLFW_STICKY_KEYS
      GLFW.params[0x00030003] = true; //GLFW_STICKY_MOUSE_BUTTONS
      GLFW.params[0x00030004] = false; //GLFW_SYSTEM_KEYS
      GLFW.params[0x00030005] = false; //GLFW_KEY_REPEAT
      GLFW.params[0x00030006] = true; //GLFW_AUTO_POLL_EVENTS
      GLFW.params[0x00020001] = true; //GLFW_OPENED
      GLFW.params[0x00020002] = true; //GLFW_ACTIVE
      GLFW.params[0x00020003] = false; //GLFW_ICONIFIED
      GLFW.params[0x00020004] = true; //GLFW_ACCELERATED
      GLFW.params[0x00020005] = 0; //GLFW_RED_BITS
      GLFW.params[0x00020006] = 0; //GLFW_GREEN_BITS
      GLFW.params[0x00020007] = 0; //GLFW_BLUE_BITS
      GLFW.params[0x00020008] = 0; //GLFW_ALPHA_BITS
      GLFW.params[0x00020009] = 0; //GLFW_DEPTH_BITS
      GLFW.params[0x0002000A] = 0; //GLFW_STENCIL_BITS
      GLFW.params[0x0002000B] = 0; //GLFW_REFRESH_RATE
      GLFW.params[0x0002000C] = 0; //GLFW_ACCUM_RED_BITS
      GLFW.params[0x0002000D] = 0; //GLFW_ACCUM_GREEN_BITS
      GLFW.params[0x0002000E] = 0; //GLFW_ACCUM_BLUE_BITS
      GLFW.params[0x0002000F] = 0; //GLFW_ACCUM_ALPHA_BITS
      GLFW.params[0x00020010] = 0; //GLFW_AUX_BUFFERS
      GLFW.params[0x00020011] = 0; //GLFW_STEREO
      GLFW.params[0x00020012] = 0; //GLFW_WINDOW_NO_RESIZE
      GLFW.params[0x00020013] = 0; //GLFW_FSAA_SAMPLES
      GLFW.params[0x00020014] = 0; //GLFW_OPENGL_VERSION_MAJOR
      GLFW.params[0x00020015] = 0; //GLFW_OPENGL_VERSION_MINOR
      GLFW.params[0x00020016] = 0; //GLFW_OPENGL_FORWARD_COMPAT
      GLFW.params[0x00020017] = 0; //GLFW_OPENGL_DEBUG_CONTEXT
      GLFW.params[0x00020018] = 0; //GLFW_OPENGL_PROFILE
  
      GLFW.keys = new Array();
  
      return 1; //GL_TRUE
    }


  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  function _llvm_lifetime_start() {}

  function _clGetProgramBuildInfo(program,device,param_name,param_value_size,param_value,param_value_size_ret) {
  
      var _info = null;
  
      try { 
  
  
        _info = CL.cl_objects[program].getBuildInfo(CL.cl_objects[device], param_name);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (param_value != 0) {
          HEAP32[((param_value)>>2)]=0;
        }
  
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=0;
        }
  
        return _error;
      }
  
      if(typeof(_info) == "number") {
  
        if (param_value != 0) HEAP32[((param_value)>>2)]=_info;
        if (param_value_size_ret != 0) HEAP32[((param_value_size_ret)>>2)]=4;
  
      } else if(typeof(_info) == "string") {
        if (param_value != 0) {
          writeStringToMemory(_info, param_value);
        }
      
        if (param_value_size_ret != 0) {
          HEAP32[((param_value_size_ret)>>2)]=_info.length + 1;
        }
      } else {
        return webcl.INVALID_VALUE;
      }
  
      return webcl.SUCCESS;
    }

  function _glfwSwapBuffers() {}

  function ___cxa_guard_release() {}

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  function _uselocale(locale) {
      return 0;
    }

  function _vsnprintf(s, n, format, va_arg) {
      return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
    }

  function _glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }


  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      if (pixels) {
        var data = GL.getTexPixelData(type, format, width, height, pixels, internalFormat);
        pixels = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixels = null;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixels);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _glfwGetWindowSize(width, height) {
      setValue(width, Module['canvas'].width, 'i32');
      setValue(height, Module['canvas'].height, 'i32');
    }

  var _llvm_memmove_p0i8_p0i8_i32=_memmove;

  var _ftello=_ftell;

  function _clSetKernelArg(kernel,arg_index,arg_size,arg_value) {
      if (CL.cl_objects[kernel].sig.length < arg_index) {
        return webcl.INVALID_KERNEL;          
      }
  
      var _kernel = CL.cl_objects[kernel];
  
      var _posarg = _kernel.val_param[arg_index];
  
      var _sig = _kernel.sig[_posarg];
      
      try {
  
        // LOCAL ARG
        if (_sig == webcl.LOCAL) {
  
          var _array = new Uint32Array([arg_size]);
  
          _kernel.setArg(_posarg,_array);
  
          var _sizearg = CL.cast_long(arg_size);
  
          if (_kernel.val_param_argsize.indexOf(_posarg+1) >= 0) {
            _kernel.setArg(_posarg+1,_sizearg);
          }
  
        } else {
  
          var _value = HEAP32[((arg_value)>>2)];
  
          // WEBCL OBJECT ARG
          if (_value in CL.cl_objects) {
  
            _kernel.setArg(_posarg,CL.cl_objects[_value]);
            
            if (! (CL.cl_objects[_value] instanceof WebCLSampler)) {
  
            
              var _size = CL.cl_objects[_value].getInfo(webcl.MEM_SIZE);
              var _sizearg = CL.cast_long(_size);
  
              if (_kernel.val_param_argsize.indexOf(_posarg+1) >= 0) {
                _kernel.setArg(_posarg+1,_sizearg);
              }
            }
            
          } else {
  
            var _array = CL.getReferencePointerToArray(arg_value,arg_size,[[_sig,1]]);
           
            _kernel.setArg(_posarg,_array);
  
            var _sizearg = CL.cast_long(arg_size);
  
            if (_kernel.val_param_argsize.indexOf(_posarg+1) >= 0) {
              _kernel.setArg(_posarg+1,_sizearg);
            }
          }
        }
      } catch (e) {
  
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;
    }

  function _glBindVertexArray(vao) {
  
      GL.vaoExt.bindVertexArrayOES(GL.vaos[vao]);
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)]
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls(Math.floor(year/100),2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }


  function _clCreateCommandQueue(context,device,properties_1,properties_2,cl_errcode_ret) {
      // Assume the properties is i32 
      assert(properties_2 == 0, 'Invalid properties i64');
  
  
      var _id = null;
      var _command = null;
  
      // Context must be created
  
      // Context must be created
  
      try { 
  
  
        _command = CL.cl_objects[context].createCommandQueue(CL.cl_objects[device],properties_1);
  
      } catch (e) {
        var _error = CL.catchError(e);
      
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_command);
  
  
      return _id;
    }

  
  function _clEnqueueWriteBuffer(command_queue,buffer,blocking_write,offset,cb,ptr,num_events_in_wait_list,event_wait_list,event) {
  
      var _event_wait_list = [];
      var _host_ptr = CL.getReferencePointerToArray(ptr,cb,CL.cl_pn_type);
  
      for (var i = 0; i < num_events_in_wait_list; i++) {
        var _event_wait = HEAP32[(((event_wait_list)+(i*4))>>2)];
  
        _event_wait_list.push(CL.cl_objects[_event_wait]);
      } 
  
      try {
            
        if (event != 0) {
          var _event = new WebCLEvent();
          CL.cl_objects[command_queue].enqueueWriteBuffer(CL.cl_objects[buffer],blocking_write,offset,cb,_host_ptr,_event_wait_list,_event);    
          HEAP32[((event)>>2)]=CL.udid(_event);
        } else {
          CL.cl_objects[command_queue].enqueueWriteBuffer(CL.cl_objects[buffer],blocking_write,offset,cb,_host_ptr,_event_wait_list);    
        }
  
      } catch (e) {
        var _error = CL.catchError(e);
   
  
        return _error;
      }
  
  
      return webcl.SUCCESS;  
    }function _clCreateBuffer(context,flags_i64_1,flags_i64_2,size,host_ptr,cl_errcode_ret) {
      // Assume the flags is i32 
      assert(flags_i64_2 == 0, 'Invalid flags i64');
      
  
      var _id = null;
      var _buffer = null;
  
      // Context must be created
      
      var _flags;
  
      if (flags_i64_1 & webcl.MEM_READ_WRITE) {
        _flags = webcl.MEM_READ_WRITE;
      } else if (flags_i64_1 & webcl.MEM_WRITE_ONLY) {
        _flags = webcl.MEM_WRITE_ONLY;
      } else if (flags_i64_1 & webcl.MEM_READ_ONLY) {
        _flags = webcl.MEM_READ_ONLY;
      } else {
        _flags |= webcl.MEM_READ_WRITE;
      }
  
      var _host_ptr = null;
  
      if ( host_ptr != 0 ) _host_ptr = CL.getCopyPointerToArray(host_ptr,size,CL.cl_pn_type); 
      else if (
        (flags_i64_1 & (1 << 4) /* CL_MEM_ALLOC_HOST_PTR  */) ||
        (flags_i64_1 & (1 << 5) /* CL_MEM_COPY_HOST_PTR   */) ||
        (flags_i64_1 & (1 << 3) /* CL_MEM_USE_HOST_PTR    */)
        ) {
        _host_ptr = CL.getHostPtrArray(size,CL.cl_pn_type);
      } 
  
      try {
  
      
        if (_host_ptr != null) {
          _buffer = CL.cl_objects[context].createBuffer(_flags,size,_host_ptr);
        } else
          _buffer = CL.cl_objects[context].createBuffer(_flags,size);
  
      } catch (e) {
        var _error = CL.catchError(e);
      
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
        
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      // Add flags property
      Object.defineProperty(_buffer, "flags", { value : flags_i64_1,writable : false });
      _id = CL.udid(_buffer);
    
      // \todo need to be remove when firefox will be support hot_ptr
      /**** **** **** **** **** **** **** ****/
      if (_host_ptr != null) {
        if (navigator.userAgent.toLowerCase().indexOf('firefox') != -1) {
          // Search command
          var commandqueue = null;
          for (var obj in CL.cl_objects) {
            if (CL.cl_objects[obj] instanceof WebCLCommandQueue) {
              commandqueue = CL.cl_objects[obj];
              break;
            }
          }
          
          if (commandqueue != null) {
            _clEnqueueWriteBuffer(obj,_id,true,0,size,host_ptr,0,0,0);
          } else {
            if (cl_errcode_ret != 0) {
              HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_VALUE;
            }
  
            return 0; 
          }
        }
      }
      /**** **** **** **** **** **** **** ****/
  
  
      return _id;
    }

  function _glEnable(x0) { GLctx.enable(x0) }

  var _fabs=Math_abs;

  function _clBuildProgram(program,num_devices,device_list,options,pfn_notify,user_data) {
  
      try {
  
        var _devices = [];
        var _option = (options == 0) ? "" : Pointer_stringify(options); 
  
        if (device_list != 0 && num_devices > 0 ) {
          for (var i = 0; i < num_devices ; i++) {
            var _device = HEAP32[(((device_list)+(i*4))>>2)]
              _devices.push(CL.cl_objects[_device]);
          }
        }
  
        // If device_list is NULL value, the program executable is built for all devices associated with program.
        if (_devices.length == 0) {
          _devices = CL.cl_objects[program].getInfo(webcl.PROGRAM_DEVICES); 
        }
  
        var _callback = null
        if (pfn_notify != 0) {
          /**
           * Description
           * @return 
           */
          _callback = function() { 
            console.info("\nCall ( clBuildProgram ) callback function : FUNCTION_TABLE["+pfn_notify+"]("+program+", "+user_data+")");
            FUNCTION_TABLE[pfn_notify](program, user_data) 
          };
        }
  
        
        CL.cl_objects[program].build(_devices,_option,_callback);
  
      } catch (e) {
        var _error = CL.catchError(e);
  
  
        return _error;
      }
  
  
      return webcl.SUCCESS;      
  
    }

  function _clRetainContext(context) {
  
  
      if (!(context in CL.cl_objects_retains)) {
        CL.cl_objects_retains[context] = 1;
      } else {
        CL.cl_objects_retains[context] = CL.cl_objects_retains[context] + 1;
      }
         
      return webcl.SUCCESS;
    }


  function _glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _clRetainMemObject(memobj) {
  
  
      if (!(memobj in CL.cl_objects_retains)) {
        CL.cl_objects_retains[memobj] = 1;
      } else {
        CL.cl_objects_retains[memobj] = CL.cl_objects_retains[memobj] + 1;
      }
  
  
      return webcl.SUCCESS;
    }

  function _glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = GL.getNewId(GL.buffers);
        var buffer = GLctx.createBuffer();
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _glFinish() { GLctx.finish() }

  function ___cxa_allocate_exception(size) {
      var ptr = _malloc(size + ___cxa_exception_header_size);
      return ptr + ___cxa_exception_header_size;
    }

  function _glDeleteShader(shader) {
      GLctx.deleteShader(GL.shaders[shader]);
      GL.shaders[shader] = null;
    }

  var _fmodl=_fmod;

  function _glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  var _ceilf=Math_ceil;

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function _clCreateKernel(program,kernel_name,cl_errcode_ret) {
      
  
      var _id = null;
      var _kernel = null;
      var _name = (kernel_name == 0) ? "" : Pointer_stringify(kernel_name);
  
      // program must be created
      try {
      
  
        _kernel = CL.cl_objects[program].createKernel(_name);
        
        Object.defineProperty(_kernel, "name", { value : _name,writable : false });
        Object.defineProperty(_kernel, "sig", { value : CL.cl_kernels_sig[_name],writable : false });
  
        Object.defineProperty(_kernel, "val_param", { value : CL.cl_validator[_name],writable : false });
        Object.defineProperty(_kernel, "val_param_argsize", { value : CL.cl_validator_argsize[_name],writable : false });
  
        
      } catch (e) {
        var _error = CL.catchError(e);
      
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_kernel);
  
  
      return _id;
    }

  
  
  function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }function _asprintf(s, format, varargs) {
      return _sprintf(-s, format, varargs);
    }function _vasprintf(s, format, va_arg) {
      return _asprintf(s, format, HEAP32[((va_arg)>>2)]);
    }

  function _clCreateProgramWithSource(context,count,strings,lengths,cl_errcode_ret) {
      
  
      var _id = null;
      var _program = null;
  
      // Context must be created
  
      try {
        
        var _string = "";
  
        for (var i = 0; i < count; i++) {
          if (lengths) {
            var _len = HEAP32[(((lengths)+(i*4))>>2)];
            if (_len < 0) {
              _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)]);   
            } else {
              _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)], _len);   
            }
          } else {
            _string += Pointer_stringify(HEAP32[(((strings)+(i*4))>>2)]); 
          }
        }
  
        CL.parseKernel(_string);
  
  
        _program = CL.cl_objects[context].createProgram(_string);
    
      } catch (e) {
        var _error = CL.catchError(e);
  
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_program);
  
  
      return _id;
    }

  function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
        if (Browser.mainLoop.shouldPause) {
          // catch pauses from non-main loop sources
          Browser.mainLoop.paused = true;
          Browser.mainLoop.shouldPause = false;
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
        GL.newRenderingFrameStarted();
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        if (Module['preMainLoop']) {
          Module['preMainLoop']();
        }
  
        try {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        } catch (e) {
          if (e instanceof ExitStatus) {
            return;
          } else {
            if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
            throw e;
          }
        }
  
        if (Module['postMainLoop']) {
          Module['postMainLoop']();
        }
  
        if (Browser.mainLoop.shouldPause) {
          // catch pauses from the main loop itself
          Browser.mainLoop.paused = true;
          Browser.mainLoop.shouldPause = false;
          return;
        }
        Browser.mainLoop.scheduler();
      }
      if (fps && fps > 0) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, 1000/fps); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _llvm_eh_typeid_for(type) {
      return type;
    }

  function _glUniformMatrix4fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count == 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[15];
        for (var i = 0; i < 16; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(location, transpose, view);
    }

  var _BItoD=true;

  function _glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }

  function _glfwSetKeyCallback(cbfun) {
      GLFW.keyFunc = cbfun;
    }

  function _clCreateContextFromType(properties,device_type_i64_1,device_type_i64_2,pfn_notify,user_data,cl_errcode_ret) {
      // Assume the device_type is i32 
      assert(device_type_i64_2 == 0, 'Invalid device_type i64');
      
  
      // Init webcl variable if necessary
      if (CL.init() == 0) {
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_VALUE;
        }
  
        return 0; // NULL Pointer      
      }
  
      var _id = null;
      var _context = null;
  
      try { 
  
        var _platform = null;
        var _deviceType = device_type_i64_1;
        var _glclSharedContext = false;
        var _properties = [];
  
        // Verify the property
        if (properties != 0) {
          var _propertiesCounter = 0;
          while(1) {
            var _readprop = HEAP32[(((properties)+(_propertiesCounter*4))>>2)];
            _properties.push(_readprop);
  
            if (_readprop == 0) break;
  
            switch (_readprop) {
              case webcl.CONTEXT_PLATFORM:
                _propertiesCounter ++;
                var _idxPlatform = HEAP32[(((properties)+(_propertiesCounter*4))>>2)];
                _properties.push(_idxPlatform);
  
                  _platform = CL.cl_objects[_idxPlatform];
                break;
  
              // /!\ This part, it's for the CL_GL_Interop
              case (0x200A) /*CL_GLX_DISPLAY_KHR*/:
              case (0x2008) /*CL_GL_CONTEXT_KHR*/:
              case (0x200C) /*CL_CGL_SHAREGROUP_KHR*/:            
                _propertiesCounter ++;
                _glclSharedContext = true;
                break;
  
              default:
                if (cl_errcode_ret != 0) {
                  HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_PROPERTY;
                }
  
                return 0; 
            };
  
            _propertiesCounter ++;
          }
        }
  
        if (_deviceType != 0 && _platform != null) {
  
          if (_glclSharedContext) {
            _context = webcl.createContext(Module.ctx, _platform,_deviceType);  
          } else {
            _context = webcl.createContext(_platform,_deviceType);  
          }
              
        } else if (_deviceType != 0) {
  
          if (_glclSharedContext) {
            _context = webcl.createContext(Module.ctx,_deviceType);  
          } else {
            _context = webcl.createContext(_deviceType);  
          }
  
        } else {
          if (cl_errcode_ret != 0) {
            HEAP32[((cl_errcode_ret)>>2)]=webcl.INVALID_CONTEXT;
          }
  
          return 0; // NULL Pointer   
        }
     
      } catch (e) {
        var _error = CL.catchError(e);
      
        if (cl_errcode_ret != 0) {
          HEAP32[((cl_errcode_ret)>>2)]=_error;
        }
  
        return 0; // NULL Pointer
      }
  
      if (cl_errcode_ret != 0) {
        HEAP32[((cl_errcode_ret)>>2)]=0;
      }
  
      _id = CL.udid(_context);
  
      // Add properties array for getInfo
      Object.defineProperty(_context, "properties", { value : _properties,writable : false });
  
  
      return _id;
    }

  var _getc=_fgetc;

  var __ZTISt9exception=allocate([allocate([1,0,0,0,0,0,0], "i8", ALLOC_STATIC)+8, 0], "i32", ALLOC_STATIC);

  function __ZTVSt9exception() {
  Module['printErr']('missing function: _ZTVSt9exception'); abort(-1);
  }

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);



var GLctx; GL.init()
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

var Math_min = Math.min;
function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vidd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an different type, which will fail?");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidd(index,a1,a2,a3) {
  try {
    Module["dynCall_vidd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiid"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    return Module["dynCall_iiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var ___rand_seed=env.___rand_seed|0;
  var __ZTISt9exception=env.__ZTISt9exception|0;
  var __ZTVSt9exception=env.__ZTVSt9exception|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_vidd=env.nullFunc_vidd;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var nullFunc_viiiiid=env.nullFunc_viiiiid;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiid=env.nullFunc_viiiiiid;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiiiiiiii=env.nullFunc_iiiiiiiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vid=env.invoke_vid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_vidd=env.invoke_vidd;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var invoke_viiiiid=env.invoke_viiiiid;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiid=env.invoke_viiiiiid;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_diii=env.invoke_diii;
  var invoke_i=env.invoke_i;
  var invoke_iiiiiiiiii=env.invoke_iiiiiiiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiii=env.invoke_viiii;
  var _glUseProgram=env._glUseProgram;
  var _fabs=env._fabs;
  var _clReleaseProgram=env._clReleaseProgram;
  var _vsscanf=env._vsscanf;
  var __ZSt9terminatev=env.__ZSt9terminatev;
  var _glUniformMatrix4fv=env._glUniformMatrix4fv;
  var _clEnqueueReleaseGLObjects=env._clEnqueueReleaseGLObjects;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var __reallyNegative=env.__reallyNegative;
  var _clEnqueueNDRangeKernel=env._clEnqueueNDRangeKernel;
  var ___assert_fail=env.___assert_fail;
  var _glDeleteProgram=env._glDeleteProgram;
  var _clCreateProgramWithSource=env._clCreateProgramWithSource;
  var _glfwSwapBuffers=env._glfwSwapBuffers;
  var _glBindBuffer=env._glBindBuffer;
  var _glGetShaderInfoLog=env._glGetShaderInfoLog;
  var __addDays=env.__addDays;
  var _fsync=env._fsync;
  var _catgets=env._catgets;
  var _sbrk=env._sbrk;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _sinf=env._sinf;
  var _sysconf=env._sysconf;
  var _clRetainKernel=env._clRetainKernel;
  var _close=env._close;
  var _tanf=env._tanf;
  var ___cxa_throw=env.___cxa_throw;
  var _fileno=env._fileno;
  var _glfwTerminate=env._glfwTerminate;
  var _clCreateCommandQueue=env._clCreateCommandQueue;
  var _clCreateContextFromType=env._clCreateContextFromType;
  var _glfwSetWindowSizeCallback=env._glfwSetWindowSizeCallback;
  var _glfwInit=env._glfwInit;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var _ftell=env._ftell;
  var _glGenBuffers=env._glGenBuffers;
  var _glShaderSource=env._glShaderSource;
  var __ZNSt9exceptionD2Ev=env.__ZNSt9exceptionD2Ev;
  var ___cxa_does_inherit=env.___cxa_does_inherit;
  var _strtoll_l=env._strtoll_l;
  var _strstr=env._strstr;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var _catclose=env._catclose;
  var _glTexParameteri=env._glTexParameteri;
  var _llvm_lifetime_end=env._llvm_lifetime_end;
  var _glEnableVertexAttribArray=env._glEnableVertexAttribArray;
  var _glVertexAttribPointer=env._glVertexAttribPointer;
  var _send=env._send;
  var _clReleaseKernel=env._clReleaseKernel;
  var _glGetProgramInfoLog=env._glGetProgramInfoLog;
  var ___cxa_is_number_type=env.___cxa_is_number_type;
  var _glfwOpenWindow=env._glfwOpenWindow;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _isxdigit_l=env._isxdigit_l;
  var _clGetProgramBuildInfo=env._clGetProgramBuildInfo;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var _glBufferSubData=env._glBufferSubData;
  var _strerror_r=env._strerror_r;
  var _glViewport=env._glViewport;
  var ___setErrNo=env.___setErrNo;
  var _newlocale=env._newlocale;
  var _isdigit_l=env._isdigit_l;
  var ___resumeException=env.___resumeException;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _freelocale=env._freelocale;
  var ___cxa_call_unexpected=env.___cxa_call_unexpected;
  var _glTexImage2D=env._glTexImage2D;
  var _glEnable=env._glEnable;
  var _printf=env._printf;
  var _glGenTextures=env._glGenTextures;
  var _clReleaseCommandQueue=env._clReleaseCommandQueue;
  var _glGetString=env._glGetString;
  var _fopen=env._fopen;
  var _vasprintf=env._vasprintf;
  var _glCreateShader=env._glCreateShader;
  var _glBindFramebuffer=env._glBindFramebuffer;
  var _glAttachShader=env._glAttachShader;
  var _vsnprintf=env._vsnprintf;
  var _glCreateProgram=env._glCreateProgram;
  var _strtoull_l=env._strtoull_l;
  var _clCreateKernel=env._clCreateKernel;
  var _clSetKernelArg=env._clSetKernelArg;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var _sprintf=env._sprintf;
  var _glGenFramebuffers=env._glGenFramebuffers;
  var _catopen=env._catopen;
  var _exit=env._exit;
  var ___cxa_guard_abort=env.___cxa_guard_abort;
  var _glfwPollEvents=env._glfwPollEvents;
  var ___ctype_b_loc=env.___ctype_b_loc;
  var _fmod=env._fmod;
  var _lseek=env._lseek;
  var _fread=env._fread;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _ceilf=env._ceilf;
  var _glBlendFuncSeparate=env._glBlendFuncSeparate;
  var _strtoll=env._strtoll;
  var _glfwSetMousePosCallback=env._glfwSetMousePosCallback;
  var _pwrite=env._pwrite;
  var _glFinish=env._glFinish;
  var _open=env._open;
  var _uselocale=env._uselocale;
  var _glBindTexture=env._glBindTexture;
  var _glUniform1f=env._glUniform1f;
  var _snprintf=env._snprintf;
  var _clReleaseMemObject=env._clReleaseMemObject;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var _clGetPlatformIDs=env._clGetPlatformIDs;
  var _glUniform1i=env._glUniform1i;
  var _strtoull=env._strtoull;
  var _strftime=env._strftime;
  var _glDrawArrays=env._glDrawArrays;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _clFinish=env._clFinish;
  var _fseek=env._fseek;
  var _clEnqueueAcquireGLObjects=env._clEnqueueAcquireGLObjects;
  var _fclose=env._fclose;
  var _sqrtf=env._sqrtf;
  var _glActiveTexture=env._glActiveTexture;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var _clCreateBuffer=env._clCreateBuffer;
  var _recv=env._recv;
  var _fgetc=env._fgetc;
  var _glCompileShader=env._glCompileShader;
  var __parseInt64=env.__parseInt64;
  var __getFloat=env.__getFloat;
  var _abort=env._abort;
  var _glBindVertexArray=env._glBindVertexArray;
  var _clBuildProgram=env._clBuildProgram;
  var _glBufferData=env._glBufferData;
  var _isspace=env._isspace;
  var _glewInit=env._glewInit;
  var _clGetContextInfo=env._clGetContextInfo;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _llvm_lifetime_start=env._llvm_lifetime_start;
  var _cosf=env._cosf;
  var _glGetProgramiv=env._glGetProgramiv;
  var _glfwSetKeyCallback=env._glfwSetKeyCallback;
  var _glfwGetTime=env._glfwGetTime;
  var _clReleaseContext=env._clReleaseContext;
  var _clCreateFromGLBuffer=env._clCreateFromGLBuffer;
  var _glGenVertexArrays=env._glGenVertexArrays;
  var _glDeleteShader=env._glDeleteShader;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _glfwGetWindowSize=env._glfwGetWindowSize;
  var _glfwCloseWindow=env._glfwCloseWindow;
  var _ungetc=env._ungetc;
  var _clEnqueueWriteBuffer=env._clEnqueueWriteBuffer;
  var _clRetainContext=env._clRetainContext;
  var _glLinkProgram=env._glLinkProgram;
  var _strftime_l=env._strftime_l;
  var _fprintf=env._fprintf;
  var _sscanf=env._sscanf;
  var _llvm_eh_typeid_for=env._llvm_eh_typeid_for;
  var _glGetUniformLocation=env._glGetUniformLocation;
  var _strerror=env._strerror;
  var _clRetainCommandQueue=env._clRetainCommandQueue;
  var _glClear=env._glClear;
  var _asprintf=env._asprintf;
  var _read=env._read;
  var __exit=env.__exit;
  var ___ctype_toupper_loc=env.___ctype_toupper_loc;
  var _glBindAttribLocation=env._glBindAttribLocation;
  var __arraySum=env.__arraySum;
  var _glGetShaderiv=env._glGetShaderiv;
  var ___ctype_tolower_loc=env.___ctype_tolower_loc;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pread=env._pread;
  var _mkport=env._mkport;
  var _glFramebufferTexture2D=env._glFramebufferTexture2D;
  var _clRetainProgram=env._clRetainProgram;
  var _fflush=env._fflush;
  var _clEnqueueReadBuffer=env._clEnqueueReadBuffer;
  var ___errno_location=env.___errno_location;
  var _copysign=env._copysign;
  var _isxdigit=env._isxdigit;
  var __scanString=env.__scanString;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _isdigit=env._isdigit;
  var _emscripten_cancel_main_loop=env._emscripten_cancel_main_loop;
  var __formatString=env.__formatString;
  var _atexit=env._atexit;
  var _glfwSetWindowTitle=env._glfwSetWindowTitle;
  var _clRetainMemObject=env._clRetainMemObject;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 7)&-8;
  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1|0] = HEAP8[ptr+1|0];
  HEAP8[tempDoublePtr+2|0] = HEAP8[ptr+2|0];
  HEAP8[tempDoublePtr+3|0] = HEAP8[ptr+3|0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr] = HEAP8[ptr];
  HEAP8[tempDoublePtr+1|0] = HEAP8[ptr+1|0];
  HEAP8[tempDoublePtr+2|0] = HEAP8[ptr+2|0];
  HEAP8[tempDoublePtr+3|0] = HEAP8[ptr+3|0];
  HEAP8[tempDoublePtr+4|0] = HEAP8[ptr+4|0];
  HEAP8[tempDoublePtr+5|0] = HEAP8[ptr+5|0];
  HEAP8[tempDoublePtr+6|0] = HEAP8[ptr+6|0];
  HEAP8[tempDoublePtr+7|0] = HEAP8[ptr+7|0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}

function setTempRet1(value) {
  value = value|0;
  tempRet1 = value;
}

function setTempRet2(value) {
  value = value|0;
  tempRet2 = value;
}

function setTempRet3(value) {
  value = value|0;
  tempRet3 = value;
}

function setTempRet4(value) {
  value = value|0;
  tempRet4 = value;
}

function setTempRet5(value) {
  value = value|0;
  tempRet5 = value;
}

function setTempRet6(value) {
  value = value|0;
  tempRet6 = value;
}

function setTempRet7(value) {
  value = value|0;
  tempRet7 = value;
}

function setTempRet8(value) {
  value = value|0;
  tempRet8 = value;
}

function setTempRet9(value) {
  value = value|0;
  tempRet9 = value;
}

function __ZN11Application3getEv() {
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $3 = HEAP32[(8)>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $12 = HEAP32[(8)>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $5 = (__Znwj(56)|0);
 $6 = $5;
 __THREW__ = 0;
 invoke_vi(153,($6|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $10 = ___cxa_find_matching_catch(-1,-1)|0;
  $11 = tempRet0;
  $1 = $10;
  $2 = $11;
  __ZdlPv($5);
  $13 = $1;
  $14 = $2;
  ___resumeException($13|0);
  // unreachable;
 } else {
  HEAP32[(8)>>2] = $6;
  $9 = HEAP32[(8)>>2]|0;
  __ZN11Application4initEv($9);
  $12 = HEAP32[(8)>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 return 0|0;
}
function __ZN11Application4initEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, $b_window = 0, $windowHeight = 0;
 var $windowTitle = 0, $windowWidth = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 376|0;
 $windowTitle = sp + 304|0;
 $35 = sp + 320|0;
 $36 = sp + 336|0;
 $34 = $this;
 $39 = (_glfwInit()|0);
 $40 = ($39|0)!=(0);
 if (!($40)) {
  __ZN5error8throw_exEPKcS1_i((40),(72),156);
 }
 $windowWidth = 512;
 $windowHeight = 512;
 $41 = (__ZN6global3parEv()|0);
 $32 = $35;
 $33 = (96);
 $42 = $32;
 $43 = $33;
 $30 = $42;
 $31 = $43;
 $44 = $30;
 $45 = ($44);
 $29 = $45;
 $46 = $29;
 $28 = $46;
 $47 = $28;
 $48 = $47;
 $27 = $48;
 $49 = $27;
 $50 = $49;
 $26 = $50;
 $51 = $31;
 $52 = $31;
 $25 = $52;
 $53 = $25;
 $54 = (_strlen(($53|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($44,$51,$54);
 $24 = $36;
 $55 = $24;
 $23 = $55;
 $56 = $23;
 $57 = ($56);
 $22 = $57;
 $58 = $22;
 $21 = $58;
 $59 = $21;
 $60 = $59;
 $20 = $60;
 $61 = $20;
 $62 = $61;
 $19 = $62;
 $18 = $56;
 $63 = $18;
 $64 = ($63);
 $17 = $64;
 $65 = $17;
 $66 = $65;
 $16 = $66;
 $67 = $16;
 $68 = ($67);
 $69 = ($68);
 $70 = $69;
 $71 = ($70);
 $__a$i$i$i = $71;
 $__i$i$i$i = 0;
 while(1) {
  $72 = $__i$i$i$i;
  $73 = ($72>>>0)<(3);
  if (!($73)) {
   break;
  }
  $74 = $__i$i$i$i;
  $75 = $__a$i$i$i;
  $76 = (($75) + ($74<<2)|0);
  HEAP32[$76>>2] = 0;
  $77 = $__i$i$i$i;
  $78 = (($77) + 1)|0;
  $__i$i$i$i = $78;
 }
 __THREW__ = 0;
 invoke_viiii(10,($windowTitle|0),($41|0),($35|0),($36|0));
 $79 = __THREW__; __THREW__ = 0;
 $80 = $79&1;
 if ($80) {
  $135 = ___cxa_find_matching_catch(-1,-1)|0;
  $136 = tempRet0;
  $37 = $135;
  $38 = $136;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($36);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($35);
  $155 = $37;
  $156 = $38;
  ___resumeException($155|0);
  // unreachable;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($36);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($35);
 $81 = $windowWidth;
 $82 = $windowHeight;
 __THREW__ = 0;
 $83 = (invoke_iiiiiiiiii(1,($81|0),($82|0),8,8,8,0,0,0,65537)|0);
 $84 = __THREW__; __THREW__ = 0;
 $85 = $84&1;
 do {
  if (!($85)) {
   $b_window = $83;
   $15 = $windowTitle;
   $86 = $15;
   $14 = $86;
   $87 = $14;
   $13 = $87;
   $88 = $13;
   $12 = $88;
   $89 = $12;
   $90 = ($89);
   $11 = $90;
   $91 = $11;
   $92 = $91;
   $10 = $92;
   $93 = $10;
   $94 = ($93);
   $95 = ($94);
   $96 = $95;
   $97 = ($96);
   $98 = $97;
   $99 = HEAP8[$98]|0;
   $100 = $99&255;
   $101 = $100 & 1;
   $102 = ($101|0)!=(0);
   if ($102) {
    $4 = $88;
    $103 = $4;
    $104 = ($103);
    $3 = $104;
    $105 = $3;
    $106 = $105;
    $2 = $106;
    $107 = $2;
    $108 = ($107);
    $109 = ($108);
    $110 = $109;
    $111 = (($110) + 8|0);
    $112 = HEAP32[$111>>2]|0;
    $125 = $112;
   } else {
    $9 = $88;
    $113 = $9;
    $114 = ($113);
    $8 = $114;
    $115 = $8;
    $116 = $115;
    $7 = $116;
    $117 = $7;
    $118 = ($117);
    $119 = ($118);
    $120 = $119;
    $121 = (($120) + 1|0);
    $122 = ($121);
    $6 = $122;
    $123 = $6;
    $5 = $123;
    $124 = $5;
    $125 = $124;
   }
   $1 = $125;
   $126 = $1;
   __THREW__ = 0;
   invoke_vi(154,($126|0));
   $127 = __THREW__; __THREW__ = 0;
   $128 = $127&1;
   if ($128) {
    break;
   }
   $129 = $b_window;
   $130 = ($129|0)!=(0);
   if (!($130)) {
    __THREW__ = 0;
    invoke_v(2);
    $131 = __THREW__; __THREW__ = 0;
    $132 = $131&1;
    if ($132) {
     break;
    }
    __THREW__ = 0;
    invoke_viii(4,((112)|0),((72)|0),172);
    $133 = __THREW__; __THREW__ = 0;
    $134 = $133&1;
    if ($134) {
     break;
    }
   }
   __THREW__ = 0;
   $139 = (invoke_i(1)|0);
   $140 = __THREW__; __THREW__ = 0;
   $141 = $140&1;
   if ($141) {
    break;
   }
   $142 = ($139|0)!=(0);
   if ($142) {
    __THREW__ = 0;
    invoke_viii(4,((144)|0),((72)|0),180);
    $143 = __THREW__; __THREW__ = 0;
    $144 = $143&1;
    if ($144) {
     break;
    }
   }
   __THREW__ = 0;
   invoke_vi(155,(40|0));
   $145 = __THREW__; __THREW__ = 0;
   $146 = $145&1;
   if ($146) {
    break;
   }
   __THREW__ = 0;
   invoke_vi(156,(41|0));
   $147 = __THREW__; __THREW__ = 0;
   $148 = $147&1;
   if ($148) {
    break;
   }
   __THREW__ = 0;
   invoke_vi(157,(42|0));
   $149 = __THREW__; __THREW__ = 0;
   $150 = $149&1;
   if ($150) {
    break;
   }
   $151 = $windowWidth;
   $152 = $windowHeight;
   __THREW__ = 0;
   invoke_viiii(11,0,0,($151|0),($152|0));
   $153 = __THREW__; __THREW__ = 0;
   $154 = $153&1;
   if ($154) {
    break;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($windowTitle);
   STACKTOP = sp;return;
  }
 } while(0);
 $137 = ___cxa_find_matching_catch(-1,-1)|0;
 $138 = tempRet0;
 $37 = $137;
 $38 = $138;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($windowTitle);
 $155 = $37;
 $156 = $38;
 ___resumeException($155|0);
 // unreachable;
}
function __ZN11ApplicationC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 $4 = ((16) + 8|0);
 HEAP32[$3>>2] = $4;
 $5 = (($2) + 4|0);
 HEAP32[$5>>2] = 0;
 $6 = (($2) + 48|0);
 HEAPF32[$6>>2] = 0.0;
 $7 = (($2) + 52|0);
 HEAPF32[$7>>2] = 0.0;
 $8 = (($2) + 8|0);
 HEAPF32[$8>>2] = 0.0;
 $9 = (($2) + 12|0);
 HEAPF32[$9>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZN11ApplicationD0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN11ApplicationD2Ev($2);
 $3 = $2;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZN11ApplicationD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 $4 = ((16) + 8|0);
 HEAP32[$3>>2] = $4;
 $5 = (($2) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_v(3);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $11 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($11);
  // unreachable;
 }
 $10 = (($2) + 4|0);
 HEAP32[$10>>2] = 0;
 STACKTOP = sp;return;
}
function ___clang_call_terminate($1) {
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($1|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __Z12key_callbackii($key,$action) {
 $key = $key|0;
 $action = $action|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $key;
 $2 = $action;
 $3 = $1;
 $4 = ($3|0)==(255);
 if ($4) {
  label = 3;
 } else {
  $5 = $1;
  $6 = ($5|0)==(81);
  if ($6) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = $2;
   $8 = ($7|0)==(1);
   if (!($8)) {
    break;
   }
   _glViewport(0,0,0,0);
   _glfwCloseWindow();
   _glfwTerminate();
   _emscripten_cancel_main_loop();
   _exit(0);
   // unreachable;
  }
 } while(0);
 $9 = $1;
 $10 = ($9|0)==(32);
 do {
  if ($10) {
   $11 = $2;
   $12 = ($11|0)==(1);
   if (!($12)) {
    label = 8;
    break;
   }
  } else {
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $13 = $1;
  $14 = ($13|0)==(70);
  do {
   if ($14) {
    $15 = $2;
    $16 = ($15|0)==(1);
    if (!($16)) {
     break;
    }
    $17 = HEAP8[(32)]|0;
    $18 = $17&1;
    $19 = $18 ^ 1;
    $20 = $19&1;
    HEAP8[(32)] = $20;
    $21 = HEAP8[(32)]|0;
    $22 = $21&1;
    if ($22) {
     (_glfwOpenWindow(512,512,8,8,8,0,0,0,65538)|0);
    } else {
     (_glfwOpenWindow(512,512,8,8,8,0,0,0,65537)|0);
    }
   }
  } while(0);
 }
 STACKTOP = sp;return;
}
function __Z19cursor_pos_callbackii($dx,$dy) {
 $dx = $dx|0;
 $dy = $dy|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $dx;
 $2 = $dy;
 $3 = (__ZN11Application3getEv()|0);
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = (__ZN11Application3getEv()|0);
 $6 = $1;
 $7 = (+($6|0));
 $8 = $2;
 $9 = (+($8|0));
 __ZN11Application12setCursorPosEff($5,$7,$9);
 STACKTOP = sp;return;
}
function __ZN11Application12setCursorPosEff($this,$x,$y) {
 $this = $this|0;
 $x = +$x;
 $y = +$y;
 var $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 $1 = $this;
 $2 = $x;
 $3 = $y;
 $4 = $1;
 $5 = $2;
 $6 = (($4) + 8|0);
 HEAPF32[$6>>2] = $5;
 $7 = $3;
 $8 = (($4) + 12|0);
 HEAPF32[$8>>2] = $7;
 STACKTOP = sp;return;
}
function __Z25framebuffer_size_callbackii($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $width;
 $2 = $height;
 $3 = (__ZN11Application3getEv()|0);
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = (__ZN11Application3getEv()|0);
 $6 = $1;
 $7 = $2;
 __ZN11Application12resizeWindowEii($5,$6,$7);
 STACKTOP = sp;return;
}
function __ZN11Application12resizeWindowEii($this,$width,$height) {
 $this = $this|0;
 $width = $width|0;
 $height = $height|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 $1 = $this;
 $2 = $width;
 $3 = $height;
 $4 = $2;
 $5 = $3;
 _glViewport(0,0,($4|0),($5|0));
 $6 = (__ZN4Demo3getEv()|0);
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = $3;
 FUNCTION_TABLE_viii[$10 & 31]($6,$11,$12);
 STACKTOP = sp;return;
}
function __ZNK10Parameters9getStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_($agg$result,$this,$key,$def) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $key = $key|0;
 $def = $def|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0;
 var $__i$i$i$i = 0, $__i1$i$i = 0, $__i1$i$i1 = 0, $it = 0, $tmp$i = 0, $tmp$i$i = 0, $tmp$i$i4 = 0, $tmp$i2 = 0, $tmp1$i = 0, $tmp1$i3 = 0, $tmp2$i$i = 0, $tmp2$i$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $__i1$i$i1 = sp + 184|0;
 $23 = sp + 200|0;
 $30 = sp + 256|0;
 $__i1$i$i = sp + 272|0;
 $33 = sp + 288|0;
 $36 = sp + 312|0;
 $it = sp + 336|0;
 $39 = sp + 344|0;
 $37 = $this;
 $38 = $key;
 $40 = $37;
 $41 = (($40) + 60|0);
 $42 = $38;
 $34 = $41;
 $35 = $42;
 $43 = $34;
 $44 = ($43);
 $45 = $35;
 __ZNKSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($36,$44,$45);
 $tmp$i = $33;
 $tmp1$i = $36;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;HEAP8[$tmp$i+1|0]=HEAP8[$tmp1$i+1|0]|0;HEAP8[$tmp$i+2|0]=HEAP8[$tmp1$i+2|0]|0;HEAP8[$tmp$i+3|0]=HEAP8[$tmp1$i+3|0]|0;
 $32 = $it;
 $46 = $32;
 $tmp$i$i = $__i1$i$i;
 $tmp2$i$i = $33;
 ;HEAP8[$tmp$i$i+0|0]=HEAP8[$tmp2$i$i+0|0]|0;HEAP8[$tmp$i$i+1|0]=HEAP8[$tmp2$i$i+1|0]|0;HEAP8[$tmp$i$i+2|0]=HEAP8[$tmp2$i$i+2|0]|0;HEAP8[$tmp$i$i+3|0]=HEAP8[$tmp2$i$i+3|0]|0;
 $31 = $46;
 $47 = $31;
 $48 = ($47);
 $49 = $48;
 $50 = $__i1$i$i;
 ;HEAP32[$49+0>>2]=HEAP32[$50+0>>2]|0;
 $51 = (($40) + 60|0);
 $29 = $51;
 $52 = $29;
 $53 = ($52);
 $28 = $53;
 $26 = $30;
 $27 = 0;
 $54 = $26;
 $55 = $27;
 $24 = $54;
 $25 = $55;
 $56 = $24;
 $57 = ($56);
 $58 = $25;
 HEAP32[$57>>2] = $58;
 $tmp$i2 = $23;
 $tmp1$i3 = $30;
 ;HEAP8[$tmp$i2+0|0]=HEAP8[$tmp1$i3+0|0]|0;HEAP8[$tmp$i2+1|0]=HEAP8[$tmp1$i3+1|0]|0;HEAP8[$tmp$i2+2|0]=HEAP8[$tmp1$i3+2|0]|0;HEAP8[$tmp$i2+3|0]=HEAP8[$tmp1$i3+3|0]|0;
 $22 = $39;
 $59 = $22;
 $tmp$i$i4 = $__i1$i$i1;
 $tmp2$i$i5 = $23;
 ;HEAP8[$tmp$i$i4+0|0]=HEAP8[$tmp2$i$i5+0|0]|0;HEAP8[$tmp$i$i4+1|0]=HEAP8[$tmp2$i$i5+1|0]|0;HEAP8[$tmp$i$i4+2|0]=HEAP8[$tmp2$i$i5+2|0]|0;HEAP8[$tmp$i$i4+3|0]=HEAP8[$tmp2$i$i5+3|0]|0;
 $21 = $59;
 $60 = $21;
 $61 = ($60);
 $62 = $61;
 $63 = $__i1$i$i1;
 ;HEAP32[$62+0>>2]=HEAP32[$63+0>>2]|0;
 $11 = $it;
 $12 = $39;
 $64 = $11;
 $65 = ($64);
 $66 = $12;
 $67 = ($66);
 $9 = $65;
 $10 = $67;
 $68 = $9;
 $69 = $10;
 $7 = $68;
 $8 = $69;
 $70 = $7;
 $71 = ($70);
 $72 = HEAP32[$71>>2]|0;
 $73 = $8;
 $74 = ($73);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($72|0)==($75|0);
 $77 = $76 ^ 1;
 if ($77) {
  $6 = $it;
  $78 = $6;
  $79 = ($78);
  $5 = $79;
  $80 = $5;
  $81 = ($80);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($82) + 8|0);
  $4 = $83;
  $84 = $4;
  $3 = $84;
  $85 = $3;
  $86 = $85;
  $87 = $86;
  $88 = $87;
  $2 = $88;
  $89 = $2;
  $1 = $89;
  $90 = $1;
  $91 = $90;
  $92 = $91;
  $93 = (($92) + 12|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$93);
  STACKTOP = sp;return;
 }
 $19 = $agg$result;
 $20 = $def;
 $94 = $19;
 $95 = $20;
 $17 = $94;
 $18 = $95;
 $96 = $17;
 $97 = ($96);
 $98 = $18;
 $99 = ($98);
 $16 = $99;
 $100 = $16;
 $101 = $97;
 $102 = $100;
 ;HEAP32[$101+0>>2]=HEAP32[$102+0>>2]|0;HEAP32[$101+4>>2]=HEAP32[$102+4>>2]|0;HEAP32[$101+8>>2]=HEAP32[$102+8>>2]|0;
 $103 = $18;
 $15 = $103;
 $104 = $15;
 $105 = ($104);
 $14 = $105;
 $106 = $14;
 $107 = $106;
 $13 = $107;
 $108 = $13;
 $109 = ($108);
 $110 = ($109);
 $111 = $110;
 $112 = ($111);
 $__a$i$i$i = $112;
 $__i$i$i$i = 0;
 while(1) {
  $113 = $__i$i$i$i;
  $114 = ($113>>>0)<(3);
  if (!($114)) {
   break;
  }
  $115 = $__i$i$i$i;
  $116 = $__a$i$i$i;
  $117 = (($116) + ($115<<2)|0);
  HEAP32[$117>>2] = 0;
  $118 = $__i$i$i$i;
  $119 = (($118) + 1)|0;
  $__i$i$i$i = $119;
 }
 STACKTOP = sp;return;
}
function __Z24emscripten_loop_callbackv() {
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZN11Application3getEv()|0);
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = (__ZN11Application3getEv()|0);
 __ZN11Application8mainLoopEv($3);
 STACKTOP = sp;return;
}
function __ZN11Application8mainLoopEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0;
 var $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $realTime = 0.0, $vararg_buffer = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 $vararg_buffer = sp;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $38 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $41 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $42 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $43 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $37 = $this;
 $44 = $37;
 $45 = (+__ZN11Application11getRealTimeEv());
 $realTime = $45;
 $46 = HEAP32[(176)>>2]|0;
 $47 = (($46) + 1)|0;
 HEAP32[(176)>>2] = $47;
 $48 = HEAP32[(184)>>2]|0;
 $49 = $realTime;
 $50 = (~~(($49)));
 $51 = ($48|0)!=($50|0);
 if (!($51)) {
  $156 = (__ZN4Demo3getEv()|0);
  $157 = $156;
  $158 = HEAP32[$157>>2]|0;
  $159 = (($158) + 8|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (($44) + 48|0);
  $162 = +HEAPF32[$161>>2];
  FUNCTION_TABLE_vid[$160 & 1]($156,$162);
  _glfwSwapBuffers();
  $163 = (__ZN6Solver3getEv()|0);
  $164 = $163;
  $165 = HEAP32[$164>>2]|0;
  $166 = (($165) + 12|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = (($44) + 48|0);
  $169 = +HEAPF32[$168>>2];
  $170 = (($44) + 52|0);
  $171 = +HEAPF32[$170>>2];
  FUNCTION_TABLE_vidd[$167 & 3]($163,$169,$171);
  $172 = (__ZN4Demo3getEv()|0);
  $173 = $172;
  $174 = HEAP32[$173>>2]|0;
  $175 = (($174) + 12|0);
  $176 = HEAP32[$175>>2]|0;
  FUNCTION_TABLE_vi[$176 & 255]($172);
  _glfwPollEvents();
  $177 = (($44) + 52|0);
  $178 = +HEAPF32[$177>>2];
  $179 = (($44) + 48|0);
  $180 = +HEAPF32[$179>>2];
  $181 = $180 + $178;
  HEAPF32[$179>>2] = $181;
  $182 = HEAP32[(192)>>2]|0;
  $183 = (($182) + 1)|0;
  HEAP32[(192)>>2] = $183;
  STACKTOP = sp;return;
 }
 $52 = $realTime;
 $53 = (~~(($52)));
 HEAP32[(184)>>2] = $53;
 $54 = (__ZN6global3parEv()|0);
 $35 = $38;
 $36 = (248);
 $55 = $35;
 $56 = $36;
 $33 = $55;
 $34 = $56;
 $57 = $33;
 $58 = ($57);
 $32 = $58;
 $59 = $32;
 $31 = $59;
 $60 = $31;
 $61 = $60;
 $30 = $61;
 $62 = $30;
 $63 = $62;
 $29 = $63;
 $64 = $34;
 $65 = $34;
 $28 = $65;
 $66 = $28;
 $67 = (_strlen(($66|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($57,$64,$67);
 __THREW__ = 0;
 $68 = (invoke_iiii(24,($54|0),($38|0),0)|0);
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 do {
  if ($70) {
   label = 23;
  } else {
   $71 = ($68|0)!=(0);
   if ($71) {
    $72 = 264;
   } else {
    $72 = 272;
   }
   $73 = ($72);
   __THREW__ = 0;
   $74 = (invoke_i(2)|0);
   $75 = __THREW__; __THREW__ = 0;
   $76 = $75&1;
   if ($76) {
    label = 23;
    break;
   }
   $26 = $41;
   $27 = (280);
   $77 = $26;
   $78 = $27;
   $24 = $77;
   $25 = $78;
   $79 = $24;
   $80 = ($79);
   $23 = $80;
   $81 = $23;
   $22 = $81;
   $82 = $22;
   $83 = $82;
   $21 = $83;
   $84 = $21;
   $85 = $84;
   $20 = $85;
   $86 = $25;
   $87 = $25;
   $19 = $87;
   $88 = $19;
   __THREW__ = 0;
   $89 = (invoke_ii(68,($88|0))|0);
   $90 = __THREW__; __THREW__ = 0;
   $91 = $90&1;
   if ($91) {
    label = 23;
    break;
   }
   __THREW__ = 0;
   invoke_viii(5,($79|0),($86|0),($89|0));
   $92 = __THREW__; __THREW__ = 0;
   $93 = $92&1;
   if ($93) {
    label = 23;
    break;
   }
   __THREW__ = 0;
   $94 = (invoke_iiii(24,($74|0),($41|0),0)|0);
   $95 = __THREW__; __THREW__ = 0;
   $96 = $95&1;
   do {
    if ($96) {
     label = 24;
    } else {
     $97 = HEAP32[(176)>>2]|0;
     __THREW__ = 0;
     $98 = (invoke_i(2)|0);
     $99 = __THREW__; __THREW__ = 0;
     $100 = $99&1;
     if ($100) {
      label = 24;
      break;
     }
     $17 = $42;
     $18 = (296);
     $101 = $17;
     $102 = $18;
     $15 = $101;
     $16 = $102;
     $103 = $15;
     $104 = ($103);
     $14 = $104;
     $105 = $14;
     $13 = $105;
     $106 = $13;
     $107 = $106;
     $12 = $107;
     $108 = $12;
     $109 = $108;
     $11 = $109;
     $110 = $16;
     $111 = $16;
     $10 = $111;
     $112 = $10;
     __THREW__ = 0;
     $113 = (invoke_ii(68,($112|0))|0);
     $114 = __THREW__; __THREW__ = 0;
     $115 = $114&1;
     if ($115) {
      label = 24;
      break;
     }
     __THREW__ = 0;
     invoke_viii(5,($103|0),($110|0),($113|0));
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if ($117) {
      label = 24;
      break;
     }
     __THREW__ = 0;
     $118 = (invoke_iii(19,($98|0),($42|0))|0);
     $119 = __THREW__; __THREW__ = 0;
     $120 = $119&1;
     do {
      if ($120) {
       label = 25;
      } else {
       $121 = $118 ? (312) : (328);
       __THREW__ = 0;
       $122 = (invoke_i(2)|0);
       $123 = __THREW__; __THREW__ = 0;
       $124 = $123&1;
       if ($124) {
        label = 25;
        break;
       }
       $8 = $43;
       $9 = (336);
       $125 = $8;
       $126 = $9;
       $6 = $125;
       $7 = $126;
       $127 = $6;
       $128 = ($127);
       $5 = $128;
       $129 = $5;
       $4 = $129;
       $130 = $4;
       $131 = $130;
       $3 = $131;
       $132 = $3;
       $133 = $132;
       $2 = $133;
       $134 = $7;
       $135 = $7;
       $1 = $135;
       $136 = $1;
       __THREW__ = 0;
       $137 = (invoke_ii(68,($136|0))|0);
       $138 = __THREW__; __THREW__ = 0;
       $139 = $138&1;
       if ($139) {
        label = 25;
        break;
       }
       __THREW__ = 0;
       invoke_viii(5,($127|0),($134|0),($137|0));
       $140 = __THREW__; __THREW__ = 0;
       $141 = $140&1;
       if ($141) {
        label = 25;
        break;
       }
       __THREW__ = 0;
       $142 = (invoke_iii(19,($122|0),($43|0))|0);
       $143 = __THREW__; __THREW__ = 0;
       $144 = $143&1;
       do {
        if (!($144)) {
         $145 = $142 ? (352) : (360);
         __THREW__ = 0;
         $vararg_ptr = ($vararg_buffer);
         HEAP32[$vararg_ptr>>2] = $73;
         $vararg_ptr1 = (($vararg_buffer) + 4|0);
         HEAP32[$vararg_ptr1>>2] = $94;
         $vararg_ptr2 = (($vararg_buffer) + 8|0);
         HEAP32[$vararg_ptr2>>2] = $97;
         $vararg_ptr3 = (($vararg_buffer) + 12|0);
         HEAP32[$vararg_ptr3>>2] = $121;
         $vararg_ptr4 = (($vararg_buffer) + 16|0);
         HEAP32[$vararg_ptr4>>2] = $145;
         (invoke_iii(20,((200)|0),($vararg_buffer|0))|0);
         $146 = __THREW__; __THREW__ = 0;
         $147 = $146&1;
         if ($147) {
          break;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($43);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($42);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($41);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($38);
         HEAP32[(176)>>2] = 0;
         $156 = (__ZN4Demo3getEv()|0);
         $157 = $156;
         $158 = HEAP32[$157>>2]|0;
         $159 = (($158) + 8|0);
         $160 = HEAP32[$159>>2]|0;
         $161 = (($44) + 48|0);
         $162 = +HEAPF32[$161>>2];
         FUNCTION_TABLE_vid[$160 & 1]($156,$162);
         _glfwSwapBuffers();
         $163 = (__ZN6Solver3getEv()|0);
         $164 = $163;
         $165 = HEAP32[$164>>2]|0;
         $166 = (($165) + 12|0);
         $167 = HEAP32[$166>>2]|0;
         $168 = (($44) + 48|0);
         $169 = +HEAPF32[$168>>2];
         $170 = (($44) + 52|0);
         $171 = +HEAPF32[$170>>2];
         FUNCTION_TABLE_vidd[$167 & 3]($163,$169,$171);
         $172 = (__ZN4Demo3getEv()|0);
         $173 = $172;
         $174 = HEAP32[$173>>2]|0;
         $175 = (($174) + 12|0);
         $176 = HEAP32[$175>>2]|0;
         FUNCTION_TABLE_vi[$176 & 255]($172);
         _glfwPollEvents();
         $177 = (($44) + 52|0);
         $178 = +HEAPF32[$177>>2];
         $179 = (($44) + 48|0);
         $180 = +HEAPF32[$179>>2];
         $181 = $180 + $178;
         HEAPF32[$179>>2] = $181;
         $182 = HEAP32[(192)>>2]|0;
         $183 = (($182) + 1)|0;
         HEAP32[(192)>>2] = $183;
         STACKTOP = sp;return;
        }
       } while(0);
       $154 = ___cxa_find_matching_catch(-1,-1)|0;
       $155 = tempRet0;
       $39 = $154;
       $40 = $155;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($43);
      }
     } while(0);
     if ((label|0) == 25) {
      $152 = ___cxa_find_matching_catch(-1,-1)|0;
      $153 = tempRet0;
      $39 = $152;
      $40 = $153;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($42);
    }
   } while(0);
   if ((label|0) == 24) {
    $150 = ___cxa_find_matching_catch(-1,-1)|0;
    $151 = tempRet0;
    $39 = $150;
    $40 = $151;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($41);
  }
 } while(0);
 if ((label|0) == 23) {
  $148 = ___cxa_find_matching_catch(-1,-1)|0;
  $149 = tempRet0;
  $39 = $148;
  $40 = $149;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($38);
 $184 = $39;
 $185 = $40;
 ___resumeException($184|0);
 // unreachable;
}
function __ZN11Application3runEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN11Application20setupLorenzAttractorEv($2);
 _emscripten_set_main_loop((4|0),-1,0);
 STACKTOP = sp;return;
}
function __ZN11Application20setupLorenzAttractorEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0.0, $314 = 0;
 var $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $color = 0, $i = 0, $idx = 0, $j = 0, $k = 0, $lifetime = 0, $nParticles = 0, $nX = 0, $nY = 0, $nZ = 0, $onePiece = 0, $pos = 0, $side = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0;
 $92 = sp + 760|0;
 $95 = sp + 792|0;
 $96 = sp + 808|0;
 $97 = sp + 824|0;
 $98 = sp + 840|0;
 $99 = sp + 856|0;
 $100 = sp + 872|0;
 $101 = sp + 960|0;
 $102 = sp + 976|0;
 $103 = sp + 992|0;
 $91 = $this;
 $104 = $91;
 $105 = (($104) + 48|0);
 HEAPF32[$105>>2] = 0.0;
 $106 = (($104) + 52|0);
 HEAPF32[$106>>2] = 0.0166666675359010696411;
 $nX = 128;
 $nY = 128;
 $nZ = 128;
 $107 = $nX;
 $108 = $nY;
 $109 = Math_imul($107, $108)|0;
 $110 = $nZ;
 $111 = Math_imul($109, $110)|0;
 $nParticles = $111;
 $112 = (__ZN6global3parEv()|0);
 $89 = $92;
 $90 = (280);
 $113 = $89;
 $114 = $90;
 $87 = $113;
 $88 = $114;
 $115 = $87;
 $116 = ($115);
 $86 = $116;
 $117 = $86;
 $85 = $117;
 $118 = $85;
 $119 = $118;
 $84 = $119;
 $120 = $84;
 $121 = $120;
 $83 = $121;
 $122 = $88;
 $123 = $88;
 $82 = $123;
 $124 = $82;
 $125 = (_strlen(($124|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($115,$122,$125);
 $126 = $nParticles;
 __THREW__ = 0;
 invoke_viii(6,($112|0),($92|0),($126|0));
 $127 = __THREW__; __THREW__ = 0;
 $128 = $127&1;
 if ($128) {
  $236 = ___cxa_find_matching_catch(-1,-1)|0;
  $237 = tempRet0;
  $93 = $236;
  $94 = $237;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($92);
  $405 = $93;
  $406 = $94;
  ___resumeException($405|0);
  // unreachable;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($92);
 $129 = (__ZN6global3parEv()|0);
 $80 = $95;
 $81 = (368);
 $130 = $80;
 $131 = $81;
 $78 = $130;
 $79 = $131;
 $132 = $78;
 $133 = ($132);
 $77 = $133;
 $134 = $77;
 $76 = $134;
 $135 = $76;
 $136 = $135;
 $75 = $136;
 $137 = $75;
 $138 = $137;
 $74 = $138;
 $139 = $79;
 $140 = $79;
 $73 = $140;
 $141 = $73;
 $142 = (_strlen(($141|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($132,$139,$142);
 $71 = $96;
 $72 = (392);
 $143 = $71;
 $144 = $72;
 $69 = $143;
 $70 = $144;
 $145 = $69;
 $146 = ($145);
 $68 = $146;
 $147 = $68;
 $67 = $147;
 $148 = $67;
 $149 = $148;
 $66 = $149;
 $150 = $66;
 $151 = $150;
 $65 = $151;
 $152 = $70;
 $153 = $70;
 $64 = $153;
 $154 = $64;
 __THREW__ = 0;
 $155 = (invoke_ii(68,($154|0))|0);
 $156 = __THREW__; __THREW__ = 0;
 $157 = $156&1;
 do {
  if ($157) {
   label = 17;
  } else {
   __THREW__ = 0;
   invoke_viii(5,($145|0),($152|0),($155|0));
   $158 = __THREW__; __THREW__ = 0;
   $159 = $158&1;
   if ($159) {
    label = 17;
    break;
   }
   __THREW__ = 0;
   invoke_viii(7,($129|0),($95|0),($96|0));
   $160 = __THREW__; __THREW__ = 0;
   $161 = $160&1;
   if ($161) {
    $240 = ___cxa_find_matching_catch(-1,-1)|0;
    $241 = tempRet0;
    $93 = $240;
    $94 = $241;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($96);
    break;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($96);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($95);
   $162 = (__ZN6global3parEv()|0);
   $62 = $97;
   $63 = (416);
   $163 = $62;
   $164 = $63;
   $60 = $163;
   $61 = $164;
   $165 = $60;
   $166 = ($165);
   $59 = $166;
   $167 = $59;
   $58 = $167;
   $168 = $58;
   $169 = $168;
   $57 = $169;
   $170 = $57;
   $171 = $170;
   $56 = $171;
   $172 = $61;
   $173 = $61;
   $55 = $173;
   $174 = $55;
   $175 = (_strlen(($174|0))|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($165,$172,$175);
   $53 = $98;
   $54 = (440);
   $176 = $53;
   $177 = $54;
   $51 = $176;
   $52 = $177;
   $178 = $51;
   $179 = ($178);
   $50 = $179;
   $180 = $50;
   $49 = $180;
   $181 = $49;
   $182 = $181;
   $48 = $182;
   $183 = $48;
   $184 = $183;
   $47 = $184;
   $185 = $52;
   $186 = $52;
   $46 = $186;
   $187 = $46;
   __THREW__ = 0;
   $188 = (invoke_ii(68,($187|0))|0);
   $189 = __THREW__; __THREW__ = 0;
   $190 = $189&1;
   do {
    if ($190) {
     label = 20;
    } else {
     __THREW__ = 0;
     invoke_viii(5,($178|0),($185|0),($188|0));
     $191 = __THREW__; __THREW__ = 0;
     $192 = $191&1;
     if ($192) {
      label = 20;
      break;
     }
     __THREW__ = 0;
     invoke_viii(7,($162|0),($97|0),($98|0));
     $193 = __THREW__; __THREW__ = 0;
     $194 = $193&1;
     if ($194) {
      $244 = ___cxa_find_matching_catch(-1,-1)|0;
      $245 = tempRet0;
      $93 = $244;
      $94 = $245;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($98);
      break;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($98);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($97);
     $195 = (__ZN6global3parEv()|0);
     $44 = $99;
     $45 = (464);
     $196 = $44;
     $197 = $45;
     $42 = $196;
     $43 = $197;
     $198 = $42;
     $199 = ($198);
     $41 = $199;
     $200 = $41;
     $40 = $200;
     $201 = $40;
     $202 = $201;
     $39 = $202;
     $203 = $39;
     $204 = $203;
     $38 = $204;
     $205 = $43;
     $206 = $43;
     $37 = $206;
     $207 = $37;
     $208 = (_strlen(($207|0))|0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($198,$205,$208);
     $35 = $100;
     $36 = (480);
     $209 = $35;
     $210 = $36;
     $33 = $209;
     $34 = $210;
     $211 = $33;
     $212 = ($211);
     $32 = $212;
     $213 = $32;
     $31 = $213;
     $214 = $31;
     $215 = $214;
     $30 = $215;
     $216 = $30;
     $217 = $216;
     $29 = $217;
     $218 = $34;
     $219 = $34;
     $28 = $219;
     $220 = $28;
     __THREW__ = 0;
     $221 = (invoke_ii(68,($220|0))|0);
     $222 = __THREW__; __THREW__ = 0;
     $223 = $222&1;
     do {
      if ($223) {
       label = 23;
      } else {
       __THREW__ = 0;
       invoke_viii(5,($211|0),($218|0),($221|0));
       $224 = __THREW__; __THREW__ = 0;
       $225 = $224&1;
       if ($225) {
        label = 23;
        break;
       }
       __THREW__ = 0;
       invoke_viii(7,($195|0),($99|0),($100|0));
       $226 = __THREW__; __THREW__ = 0;
       $227 = $226&1;
       if ($227) {
        $248 = ___cxa_find_matching_catch(-1,-1)|0;
        $249 = tempRet0;
        $93 = $248;
        $94 = $249;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($100);
        break;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($100);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($99);
       $onePiece = 0;
       $228 = $nParticles;
       $229 = ($228*9)|0;
       $230 = $229<<2;
       $231 = (_malloc($230)|0);
       $232 = $231;
       $233 = $232;
       $onePiece = $233;
       $234 = $onePiece;
       $235 = ($234|0)==(0|0);
       if ($235) {
        __ZN5error8throw_exEPKcS1_i((504),(72),406);
       }
       $250 = $onePiece;
       $251 = $250;
       $pos = $251;
       $252 = $pos;
       $253 = $nParticles;
       $254 = $253<<2;
       $255 = (($252) + ($254<<2)|0);
       $color = $255;
       $256 = $pos;
       $257 = $nParticles;
       $258 = $257<<3;
       $259 = (($256) + ($258<<2)|0);
       $lifetime = $259;
       $260 = $color;
       $261 = $260;
       $262 = $nParticles;
       $263 = $262<<2;
       $264 = $263<<2;
       _memset(($261|0),0,($264|0))|0;
       $side = 100.0;
       $i = 0;
       while(1) {
        $265 = $i;
        $266 = $nX;
        $267 = ($265|0)<($266|0);
        if (!($267)) {
         break;
        }
        $j = 0;
        while(1) {
         $268 = $j;
         $269 = $nY;
         $270 = ($268|0)<($269|0);
         if (!($270)) {
          break;
         }
         $k = 0;
         while(1) {
          $271 = $k;
          $272 = $nZ;
          $273 = ($271|0)<($272|0);
          if (!($273)) {
           break;
          }
          $274 = $i;
          $275 = $nY;
          $276 = Math_imul($274, $275)|0;
          $277 = $j;
          $278 = (($276) + ($277))|0;
          $279 = $nZ;
          $280 = Math_imul($278, $279)|0;
          $281 = $k;
          $282 = (($280) + ($281))|0;
          $idx = $282;
          $283 = (_rand()|0);
          $284 = (+($283|0));
          $285 = 30.0 * $284;
          $286 = $285 / 2147483648.0;
          $287 = 0.0 + $286;
          $288 = $idx;
          $289 = $lifetime;
          $290 = (($289) + ($288<<2)|0);
          HEAPF32[$290>>2] = $287;
          $291 = $idx;
          $292 = $291<<2;
          $idx = $292;
          $293 = $side;
          $294 = $i;
          $295 = $294<<1;
          $296 = $nX;
          $297 = (($295) - ($296))|0;
          $298 = (+($297|0));
          $299 = $293 * $298;
          $300 = $nX;
          $301 = (+($300|0));
          $302 = $299 / $301;
          $303 = $idx;
          $304 = (($303) + 0)|0;
          $305 = $pos;
          $306 = (($305) + ($304<<2)|0);
          HEAPF32[$306>>2] = $302;
          $307 = $side;
          $308 = $j;
          $309 = $308<<1;
          $310 = $nY;
          $311 = (($309) - ($310))|0;
          $312 = (+($311|0));
          $313 = $307 * $312;
          $314 = $nY;
          $315 = (+($314|0));
          $316 = $313 / $315;
          $317 = $idx;
          $318 = (($317) + 1)|0;
          $319 = $pos;
          $320 = (($319) + ($318<<2)|0);
          HEAPF32[$320>>2] = $316;
          $321 = $side;
          $322 = $k;
          $323 = $322<<1;
          $324 = $nZ;
          $325 = (($323) - ($324))|0;
          $326 = (+($325|0));
          $327 = $321 * $326;
          $328 = $nZ;
          $329 = (+($328|0));
          $330 = $327 / $329;
          $331 = $idx;
          $332 = (($331) + 2)|0;
          $333 = $pos;
          $334 = (($333) + ($332<<2)|0);
          HEAPF32[$334>>2] = $330;
          $335 = $idx;
          $336 = (($335) + 3)|0;
          $337 = $pos;
          $338 = (($337) + ($336<<2)|0);
          HEAPF32[$338>>2] = 1.0;
          $339 = $k;
          $340 = (($339) + 1)|0;
          $k = $340;
         }
         $341 = $j;
         $342 = (($341) + 1)|0;
         $j = $342;
        }
        $343 = $i;
        $344 = (($343) + 1)|0;
        $i = $344;
       }
       $345 = (__ZN6global3parEv()|0);
       $26 = $101;
       $27 = (536);
       $346 = $26;
       $347 = $27;
       $24 = $346;
       $25 = $347;
       $348 = $24;
       $349 = ($348);
       $23 = $349;
       $350 = $23;
       $22 = $350;
       $351 = $22;
       $352 = $351;
       $21 = $352;
       $353 = $21;
       $354 = $353;
       $20 = $354;
       $355 = $25;
       $356 = $25;
       $19 = $356;
       $357 = $19;
       $358 = (_strlen(($357|0))|0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($348,$355,$358);
       $359 = $pos;
       $360 = $359;
       __THREW__ = 0;
       invoke_viii(8,($345|0),($101|0),($360|0));
       $361 = __THREW__; __THREW__ = 0;
       $362 = $361&1;
       if ($362) {
        $399 = ___cxa_find_matching_catch(-1,-1)|0;
        $400 = tempRet0;
        $93 = $399;
        $94 = $400;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($101);
        $405 = $93;
        $406 = $94;
        ___resumeException($405|0);
        // unreachable;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($101);
       $363 = (__ZN6global3parEv()|0);
       $17 = $102;
       $18 = (544);
       $364 = $17;
       $365 = $18;
       $15 = $364;
       $16 = $365;
       $366 = $15;
       $367 = ($366);
       $14 = $367;
       $368 = $14;
       $13 = $368;
       $369 = $13;
       $370 = $369;
       $12 = $370;
       $371 = $12;
       $372 = $371;
       $11 = $372;
       $373 = $16;
       $374 = $16;
       $10 = $374;
       $375 = $10;
       $376 = (_strlen(($375|0))|0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($366,$373,$376);
       $377 = $color;
       $378 = $377;
       __THREW__ = 0;
       invoke_viii(8,($363|0),($102|0),($378|0));
       $379 = __THREW__; __THREW__ = 0;
       $380 = $379&1;
       if ($380) {
        $401 = ___cxa_find_matching_catch(-1,-1)|0;
        $402 = tempRet0;
        $93 = $401;
        $94 = $402;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($102);
        $405 = $93;
        $406 = $94;
        ___resumeException($405|0);
        // unreachable;
       }
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($102);
       $381 = (__ZN6global3parEv()|0);
       $8 = $103;
       $9 = (552);
       $382 = $8;
       $383 = $9;
       $6 = $382;
       $7 = $383;
       $384 = $6;
       $385 = ($384);
       $5 = $385;
       $386 = $5;
       $4 = $386;
       $387 = $4;
       $388 = $387;
       $3 = $388;
       $389 = $3;
       $390 = $389;
       $2 = $390;
       $391 = $7;
       $392 = $7;
       $1 = $392;
       $393 = $1;
       $394 = (_strlen(($393|0))|0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($384,$391,$394);
       $395 = $lifetime;
       $396 = $395;
       __THREW__ = 0;
       invoke_viii(8,($381|0),($103|0),($396|0));
       $397 = __THREW__; __THREW__ = 0;
       $398 = $397&1;
       if (!($398)) {
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($103);
        __ZN4Demo6createENS_4TypeE(0);
        __ZN6Solver6createENS_4TypeE(0);
        STACKTOP = sp;return;
       }
       $403 = ___cxa_find_matching_catch(-1,-1)|0;
       $404 = tempRet0;
       $93 = $403;
       $94 = $404;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($103);
       $405 = $93;
       $406 = $94;
       ___resumeException($405|0);
       // unreachable;
      }
     } while(0);
     if ((label|0) == 23) {
      $246 = ___cxa_find_matching_catch(-1,-1)|0;
      $247 = tempRet0;
      $93 = $246;
      $94 = $247;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($99);
     $405 = $93;
     $406 = $94;
     ___resumeException($405|0);
     // unreachable;
    }
   } while(0);
   if ((label|0) == 20) {
    $242 = ___cxa_find_matching_catch(-1,-1)|0;
    $243 = tempRet0;
    $93 = $242;
    $94 = $243;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($97);
   $405 = $93;
   $406 = $94;
   ___resumeException($405|0);
   // unreachable;
  }
 } while(0);
 if ((label|0) == 17) {
  $238 = ___cxa_find_matching_catch(-1,-1)|0;
  $239 = tempRet0;
  $93 = $238;
  $94 = $239;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($95);
 $405 = $93;
 $406 = $94;
 ___resumeException($405|0);
 // unreachable;
}
function __ZN11Application11getRealTimeEv() {
 var $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_glfwGetTime());
 $2 = $1;
 STACKTOP = sp;return (+$2);
}
function __ZNK10Parameters6getIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($this,$key,$def) {
 $this = $this|0;
 $key = $key|0;
 $def = $def|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $__i1$i$i = 0, $__i1$i$i1 = 0, $it = 0, $tmp$i = 0, $tmp$i$i = 0, $tmp$i$i4 = 0, $tmp$i2 = 0, $tmp1$i = 0, $tmp1$i3 = 0, $tmp2$i$i = 0;
 var $tmp2$i$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $__i1$i$i1 = sp + 104|0;
 $15 = sp + 120|0;
 $22 = sp + 176|0;
 $__i1$i$i = sp + 192|0;
 $25 = sp + 208|0;
 $28 = sp + 232|0;
 $it = sp + 272|0;
 $33 = sp + 280|0;
 $30 = $this;
 $31 = $key;
 $32 = $def;
 $34 = $30;
 $35 = ($34);
 $36 = $31;
 $26 = $35;
 $27 = $36;
 $37 = $26;
 $38 = ($37);
 $39 = $27;
 __ZNKSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($28,$38,$39);
 $tmp$i = $25;
 $tmp1$i = $28;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;HEAP8[$tmp$i+1|0]=HEAP8[$tmp1$i+1|0]|0;HEAP8[$tmp$i+2|0]=HEAP8[$tmp1$i+2|0]|0;HEAP8[$tmp$i+3|0]=HEAP8[$tmp1$i+3|0]|0;
 $24 = $it;
 $40 = $24;
 $tmp$i$i = $__i1$i$i;
 $tmp2$i$i = $25;
 ;HEAP8[$tmp$i$i+0|0]=HEAP8[$tmp2$i$i+0|0]|0;HEAP8[$tmp$i$i+1|0]=HEAP8[$tmp2$i$i+1|0]|0;HEAP8[$tmp$i$i+2|0]=HEAP8[$tmp2$i$i+2|0]|0;HEAP8[$tmp$i$i+3|0]=HEAP8[$tmp2$i$i+3|0]|0;
 $23 = $40;
 $41 = $23;
 $42 = ($41);
 $43 = $42;
 $44 = $__i1$i$i;
 ;HEAP32[$43+0>>2]=HEAP32[$44+0>>2]|0;
 $45 = ($34);
 $21 = $45;
 $46 = $21;
 $47 = ($46);
 $20 = $47;
 $18 = $22;
 $19 = 0;
 $48 = $18;
 $49 = $19;
 $16 = $48;
 $17 = $49;
 $50 = $16;
 $51 = ($50);
 $52 = $17;
 HEAP32[$51>>2] = $52;
 $tmp$i2 = $15;
 $tmp1$i3 = $22;
 ;HEAP8[$tmp$i2+0|0]=HEAP8[$tmp1$i3+0|0]|0;HEAP8[$tmp$i2+1|0]=HEAP8[$tmp1$i3+1|0]|0;HEAP8[$tmp$i2+2|0]=HEAP8[$tmp1$i3+2|0]|0;HEAP8[$tmp$i2+3|0]=HEAP8[$tmp1$i3+3|0]|0;
 $14 = $33;
 $53 = $14;
 $tmp$i$i4 = $__i1$i$i1;
 $tmp2$i$i5 = $15;
 ;HEAP8[$tmp$i$i4+0|0]=HEAP8[$tmp2$i$i5+0|0]|0;HEAP8[$tmp$i$i4+1|0]=HEAP8[$tmp2$i$i5+1|0]|0;HEAP8[$tmp$i$i4+2|0]=HEAP8[$tmp2$i$i5+2|0]|0;HEAP8[$tmp$i$i4+3|0]=HEAP8[$tmp2$i$i5+3|0]|0;
 $13 = $53;
 $54 = $13;
 $55 = ($54);
 $56 = $55;
 $57 = $__i1$i$i1;
 ;HEAP32[$56+0>>2]=HEAP32[$57+0>>2]|0;
 $5 = $it;
 $6 = $33;
 $58 = $5;
 $59 = ($58);
 $60 = $6;
 $61 = ($60);
 $3 = $59;
 $4 = $61;
 $62 = $3;
 $63 = $4;
 $1 = $62;
 $2 = $63;
 $64 = $1;
 $65 = ($64);
 $66 = HEAP32[$65>>2]|0;
 $67 = $2;
 $68 = ($67);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($66|0)==($69|0);
 $71 = $70 ^ 1;
 if ($71) {
  $12 = $it;
  $72 = $12;
  $73 = ($72);
  $11 = $73;
  $74 = $11;
  $75 = ($74);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + 8|0);
  $10 = $77;
  $78 = $10;
  $9 = $78;
  $79 = $9;
  $80 = $79;
  $81 = $80;
  $82 = $81;
  $8 = $82;
  $83 = $8;
  $7 = $83;
  $84 = $7;
  $85 = $84;
  $86 = $85;
  $87 = (($86) + 12|0);
  $88 = HEAP32[$87>>2]|0;
  $29 = $88;
  $90 = $29;
  STACKTOP = sp;return ($90|0);
 } else {
  $89 = $32;
  $29 = $89;
  $90 = $29;
  STACKTOP = sp;return ($90|0);
 }
 return 0|0;
}
function __ZN10Parameters9isEnabledERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$key) {
 $this = $this|0;
 $key = $key|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $key;
 $3 = $1;
 $4 = $2;
 $5 = (__ZNK10Parameters6getIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($3,$4,0)|0);
 $6 = ($5|0)!=(0);
 $7 = $6 ? 1 : 0;
 STACKTOP = sp;return ($7|0);
}
function __ZNK11Application13getWindowSizeERiS0_($this,$width,$height) {
 $this = $this|0;
 $width = $width|0;
 $height = $height|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 $1 = $this;
 $2 = $width;
 $3 = $height;
 $4 = $2;
 $5 = $3;
 _glfwGetWindowSize(($4|0),($5|0));
 STACKTOP = sp;return;
}
function __ZNK11Application14getCursorPos01ERfS0_($this,$x,$y) {
 $this = $this|0;
 $x = $x|0;
 $y = $y|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $height = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $width = sp + 24|0;
 $height = sp + 32|0;
 $1 = $this;
 $2 = $x;
 $3 = $y;
 $4 = $1;
 HEAP32[$width>>2] = -1;
 HEAP32[$height>>2] = -1;
 __ZNK11Application13getWindowSizeERiS0_($4,$width,$height);
 $5 = (($4) + 8|0);
 $6 = +HEAPF32[$5>>2];
 $7 = HEAP32[$width>>2]|0;
 $8 = (+($7|0));
 $9 = $6 / $8;
 $10 = $2;
 HEAPF32[$10>>2] = $9;
 $11 = (($4) + 12|0);
 $12 = +HEAPF32[$11>>2];
 $13 = HEAP32[$height>>2]|0;
 $14 = (+($13|0));
 $15 = $12 / $14;
 $16 = $3;
 HEAPF32[$16>>2] = $15;
 STACKTOP = sp;return;
}
function __ZN11Application12setCursorRayEPfS0_($this,$origin,$dir) {
 $this = $this|0;
 $origin = $origin|0;
 $dir = $dir|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 $1 = $this;
 $2 = $origin;
 $3 = $dir;
 $4 = $1;
 $5 = (($4) + 16|0);
 $6 = $5;
 $7 = $2;
 $8 = $7;
 ;HEAP32[$6+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$6+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$8+12>>2]|0;
 $9 = (($4) + 32|0);
 $10 = $9;
 $11 = $3;
 $12 = $11;
 ;HEAP32[$10+0>>2]=HEAP32[$12+0>>2]|0;HEAP32[$10+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$10+12>>2]=HEAP32[$12+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZNK11Application12getCursorRayEPfS0_($this,$origin,$dir) {
 $this = $this|0;
 $origin = $origin|0;
 $dir = $dir|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 $1 = $this;
 $2 = $origin;
 $3 = $dir;
 $4 = $1;
 $5 = $2;
 $6 = $5;
 $7 = (($4) + 16|0);
 $8 = $7;
 ;HEAP32[$6+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$6+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$8+12>>2]|0;
 $9 = $3;
 $10 = $9;
 $11 = (($4) + 32|0);
 $12 = $11;
 ;HEAP32[$10+0>>2]=HEAP32[$12+0>>2]|0;HEAP32[$10+4>>2]=HEAP32[$12+4>>2]|0;HEAP32[$10+8>>2]=HEAP32[$12+8>>2]|0;HEAP32[$10+12>>2]=HEAP32[$12+12>>2]|0;
 STACKTOP = sp;return;
}
function __ZN10Parameters6setIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($this,$key,$val) {
 $this = $this|0;
 $key = $key|0;
 $val = $val|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 $1 = $this;
 $2 = $key;
 $3 = $val;
 $4 = $1;
 $5 = $3;
 $6 = ($4);
 $7 = $2;
 $8 = (__ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEEixERSC_($6,$7)|0);
 HEAP32[$8>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN10Parameters9setStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_($this,$key,$val) {
 $this = $this|0;
 $key = $key|0;
 $val = $val|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 $1 = $this;
 $2 = $key;
 $3 = $val;
 $4 = $1;
 $5 = (($4) + 60|0);
 $6 = $2;
 $7 = (__ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S6_EEEEEixERSC_($5,$6)|0);
 $8 = $3;
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($7,$8)|0);
 STACKTOP = sp;return;
}
function __ZN10Parameters6setPtrERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPv($this,$key,$ptr) {
 $this = $this|0;
 $key = $key|0;
 $ptr = $ptr|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 $1 = $this;
 $2 = $key;
 $3 = $ptr;
 $4 = $1;
 $5 = $3;
 $6 = $5;
 $7 = (($4) + 80|0);
 $8 = $2;
 $9 = (__ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEEixERSC_($7,$8)|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEEixERSC_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__i = 0, $__i1$i$i = 0, $__i1$i$i$i = 0, $__i1$i$i1 = 0, $__r = 0, $__t$i = 0, $__tmp$i$i$i = 0, $__tmp$i$i$i6 = 0;
 var $tmp$i = 0, $tmp$i$i = 0, $tmp$i$i$i = 0, $tmp$i$i$i$i$i = 0, $tmp$i$i$i$i$i7 = 0, $tmp$i$i13 = 0, $tmp$i$i4 = 0, $tmp$i1$i$i$i$i = 0, $tmp$i1$i$i$i$i9 = 0, $tmp$i2 = 0, $tmp1$i = 0, $tmp1$i$i = 0, $tmp1$i$i$i$i$i = 0, $tmp1$i$i$i$i$i8 = 0, $tmp1$i2$i$i$i$i = 0, $tmp1$i2$i$i$i$i10 = 0, $tmp1$i3 = 0, $tmp2$i$i = 0, $tmp2$i$i$i = 0, $tmp2$i$i5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088|0;
 $__i1$i$i$i = sp + 104|0;
 $14 = sp + 120|0;
 $20 = sp + 168|0;
 $33 = sp + 272|0;
 $36 = sp + 296|0;
 $46 = sp + 376|0;
 $49 = sp + 400|0;
 $77 = sp + 632|0;
 $80 = sp + 656|0;
 $90 = sp + 736|0;
 $93 = sp + 760|0;
 $__i1$i$i1 = sp + 856|0;
 $105 = sp + 872|0;
 $112 = sp + 928|0;
 $__i1$i$i = sp + 944|0;
 $115 = sp + 960|0;
 $118 = sp + 984|0;
 $__i = sp + 1016|0;
 $122 = sp + 1024|0;
 $__h = sp + 1032|0;
 $__r = sp + 1048|0;
 $123 = sp + 1056|0;
 $120 = $this;
 $121 = $__k;
 $127 = $120;
 $128 = $121;
 $116 = $127;
 $117 = $128;
 $129 = $116;
 $130 = ($129);
 $131 = $117;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($118,$130,$131);
 $tmp$i = $115;
 $tmp1$i = $118;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;HEAP8[$tmp$i+1|0]=HEAP8[$tmp1$i+1|0]|0;HEAP8[$tmp$i+2|0]=HEAP8[$tmp1$i+2|0]|0;HEAP8[$tmp$i+3|0]=HEAP8[$tmp1$i+3|0]|0;
 $114 = $__i;
 $132 = $114;
 $tmp$i$i = $__i1$i$i;
 $tmp2$i$i = $115;
 ;HEAP8[$tmp$i$i+0|0]=HEAP8[$tmp2$i$i+0|0]|0;HEAP8[$tmp$i$i+1|0]=HEAP8[$tmp2$i$i+1|0]|0;HEAP8[$tmp$i$i+2|0]=HEAP8[$tmp2$i$i+2|0]|0;HEAP8[$tmp$i$i+3|0]=HEAP8[$tmp2$i$i+3|0]|0;
 $113 = $132;
 $133 = $113;
 $134 = ($133);
 $135 = $134;
 $136 = $__i1$i$i;
 ;HEAP32[$135+0>>2]=HEAP32[$136+0>>2]|0;
 $111 = $127;
 $137 = $111;
 $138 = ($137);
 $110 = $138;
 $108 = $112;
 $109 = 0;
 $139 = $108;
 $140 = $109;
 $106 = $139;
 $107 = $140;
 $141 = $106;
 $142 = ($141);
 $143 = $107;
 HEAP32[$142>>2] = $143;
 $tmp$i2 = $105;
 $tmp1$i3 = $112;
 ;HEAP8[$tmp$i2+0|0]=HEAP8[$tmp1$i3+0|0]|0;HEAP8[$tmp$i2+1|0]=HEAP8[$tmp1$i3+1|0]|0;HEAP8[$tmp$i2+2|0]=HEAP8[$tmp1$i3+2|0]|0;HEAP8[$tmp$i2+3|0]=HEAP8[$tmp1$i3+3|0]|0;
 $104 = $122;
 $144 = $104;
 $tmp$i$i4 = $__i1$i$i1;
 $tmp2$i$i5 = $105;
 ;HEAP8[$tmp$i$i4+0|0]=HEAP8[$tmp2$i$i5+0|0]|0;HEAP8[$tmp$i$i4+1|0]=HEAP8[$tmp2$i$i5+1|0]|0;HEAP8[$tmp$i$i4+2|0]=HEAP8[$tmp2$i$i5+2|0]|0;HEAP8[$tmp$i$i4+3|0]=HEAP8[$tmp2$i$i5+3|0]|0;
 $103 = $144;
 $145 = $103;
 $146 = ($145);
 $147 = $146;
 $148 = $__i1$i$i1;
 ;HEAP32[$147+0>>2]=HEAP32[$148+0>>2]|0;
 $69 = $__i;
 $70 = $122;
 $149 = $69;
 $150 = ($149);
 $151 = $70;
 $152 = ($151);
 $67 = $150;
 $68 = $152;
 $153 = $67;
 $154 = $68;
 $65 = $153;
 $66 = $154;
 $155 = $65;
 $156 = ($155);
 $157 = HEAP32[$156>>2]|0;
 $158 = $66;
 $159 = ($158);
 $160 = HEAP32[$159>>2]|0;
 $161 = ($157|0)==($160|0);
 $162 = $161 ^ 1;
 if ($162) {
  $64 = $__i;
  $163 = $64;
  $164 = ($163);
  $63 = $164;
  $165 = $63;
  $166 = ($165);
  $167 = HEAP32[$166>>2]|0;
  $168 = (($167) + 8|0);
  $62 = $168;
  $169 = $62;
  $61 = $169;
  $170 = $61;
  $171 = $170;
  $172 = $171;
  $173 = $172;
  $60 = $173;
  $174 = $60;
  $59 = $174;
  $175 = $59;
  $176 = $175;
  $177 = $176;
  $178 = (($177) + 12|0);
  $119 = $178;
  $369 = $119;
  STACKTOP = sp;return ($369|0);
 }
 $179 = $121;
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEE25__construct_node_with_keyERSC_($__h,$127,$179);
 $180 = ($127);
 $26 = $__h;
 $181 = $26;
 $182 = ($181);
 $25 = $182;
 $183 = $25;
 $184 = $183;
 $24 = $184;
 $185 = $24;
 $186 = ($185);
 $187 = HEAP32[$186>>2]|0;
 __THREW__ = 0;
 invoke_viii(9,($123|0),($180|0),($187|0));
 $188 = __THREW__; __THREW__ = 0;
 $189 = $188&1;
 if ($189) {
  $304 = ___cxa_find_matching_catch(-1,-1)|0;
  $305 = tempRet0;
  $124 = $304;
  $125 = $305;
  $102 = $__h;
  $306 = $102;
  $101 = $306;
  $307 = $101;
  $99 = $307;
  $100 = 0;
  $308 = $99;
  $309 = ($308);
  $98 = $309;
  $310 = $98;
  $311 = $310;
  $97 = $311;
  $312 = $97;
  $313 = ($312);
  $314 = HEAP32[$313>>2]|0;
  $__tmp$i$i$i = $314;
  $315 = $100;
  $316 = ($308);
  $74 = $316;
  $317 = $74;
  $318 = $317;
  $73 = $318;
  $319 = $73;
  $320 = ($319);
  HEAP32[$320>>2] = $315;
  $321 = $__tmp$i$i$i;
  $322 = ($321|0)!=(0|0);
  if ($322) {
   $323 = ($308);
   $72 = $323;
   $324 = $72;
   $325 = $324;
   $71 = $325;
   $326 = $71;
   $327 = (($326) + 4|0);
   $328 = $__tmp$i$i$i;
   $95 = $327;
   $96 = $328;
   $329 = $95;
   $330 = (($329) + 5|0);
   $331 = HEAP8[$330]|0;
   $332 = $331&1;
   if ($332) {
    $333 = ($329);
    $334 = HEAP32[$333>>2]|0;
    $335 = $96;
    $336 = (($335) + 8|0);
    $337 = $336;
    $338 = (($337) + 12|0);
    $94 = $338;
    $339 = $94;
    $340 = $339;
    $341 = $340;
    $91 = $334;
    $92 = $341;
    $342 = $91;
    $343 = $92;
    $tmp$i$i$i$i$i = $90;
    $tmp1$i$i$i$i$i = $93;
    ;HEAP8[$tmp$i$i$i$i$i+0|0]=HEAP8[$tmp1$i$i$i$i$i+0|0]|0;
    $88 = $342;
    $89 = $343;
   }
   $344 = (($329) + 4|0);
   $345 = HEAP8[$344]|0;
   $346 = $345&1;
   if ($346) {
    $347 = ($329);
    $348 = HEAP32[$347>>2]|0;
    $349 = $96;
    $350 = (($349) + 8|0);
    $351 = $350;
    $352 = ($351);
    $81 = $352;
    $353 = $81;
    $354 = $353;
    $355 = $354;
    $78 = $348;
    $79 = $355;
    $356 = $78;
    $357 = $79;
    $tmp$i1$i$i$i$i = $77;
    $tmp1$i2$i$i$i$i = $80;
    ;HEAP8[$tmp$i1$i$i$i$i+0|0]=HEAP8[$tmp1$i2$i$i$i$i+0|0]|0;
    $75 = $356;
    $76 = $357;
    $358 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($358);
   }
   $359 = $96;
   $360 = ($359|0)!=(0|0);
   if ($360) {
    $361 = ($329);
    $362 = HEAP32[$361>>2]|0;
    $363 = $96;
    $85 = $362;
    $86 = $363;
    $87 = 1;
    $364 = $85;
    $365 = $86;
    $366 = $87;
    $82 = $364;
    $83 = $365;
    $84 = $366;
    $367 = $83;
    $368 = $367;
    __ZdlPv($368);
   }
  }
  $370 = $124;
  $371 = $125;
  ___resumeException($370|0);
  // unreachable;
 }
 $21 = $__r;
 $22 = $123;
 $23 = 0;
 $190 = $21;
 $191 = $23;
 $192 = $22;
 $17 = $190;
 $18 = $192;
 $19 = $191;
 $193 = $17;
 $194 = ($193);
 $195 = $18;
 $196 = ($195);
 $16 = $196;
 $197 = $16;
 $198 = $20;
 $199 = $197;
 ;HEAP32[$198+0>>2]=HEAP32[$199+0>>2]|0;
 $tmp$i$i13 = $14;
 $tmp1$i$i = $20;
 ;HEAP8[$tmp$i$i13+0|0]=HEAP8[$tmp1$i$i+0|0]|0;HEAP8[$tmp$i$i13+1|0]=HEAP8[$tmp1$i$i+1|0]|0;HEAP8[$tmp$i$i13+2|0]=HEAP8[$tmp1$i$i+2|0]|0;HEAP8[$tmp$i$i13+3|0]=HEAP8[$tmp1$i$i+3|0]|0;
 $13 = $194;
 $200 = $13;
 $tmp$i$i$i = $__i1$i$i$i;
 $tmp2$i$i$i = $14;
 ;HEAP8[$tmp$i$i$i+0|0]=HEAP8[$tmp2$i$i$i+0|0]|0;HEAP8[$tmp$i$i$i+1|0]=HEAP8[$tmp2$i$i$i+1|0]|0;HEAP8[$tmp$i$i$i+2|0]=HEAP8[$tmp2$i$i$i+2|0]|0;HEAP8[$tmp$i$i$i+3|0]=HEAP8[$tmp2$i$i$i+3|0]|0;
 $12 = $200;
 $201 = $12;
 $202 = ($201);
 $203 = $202;
 $204 = $__i1$i$i$i;
 ;HEAP32[$203+0>>2]=HEAP32[$204+0>>2]|0;
 $205 = (($193) + 4|0);
 $206 = $18;
 $207 = (($206) + 4|0);
 $15 = $207;
 $208 = $15;
 $209 = HEAP8[$208]|0;
 $210 = $209&1;
 $211 = $210&1;
 HEAP8[$205] = $211;
 $5 = $__h;
 $212 = $5;
 $213 = ($212);
 $4 = $213;
 $214 = $4;
 $215 = $214;
 $3 = $215;
 $216 = $3;
 $217 = ($216);
 $218 = HEAP32[$217>>2]|0;
 $__t$i = $218;
 $219 = ($212);
 $2 = $219;
 $220 = $2;
 $221 = $220;
 $1 = $221;
 $222 = $1;
 $223 = ($222);
 HEAP32[$223>>2] = 0;
 $224 = ($__r);
 $11 = $224;
 $225 = $11;
 $226 = ($225);
 $10 = $226;
 $227 = $10;
 $228 = ($227);
 $229 = HEAP32[$228>>2]|0;
 $230 = (($229) + 8|0);
 $9 = $230;
 $231 = $9;
 $8 = $231;
 $232 = $8;
 $233 = $232;
 $234 = $233;
 $235 = $234;
 $7 = $235;
 $236 = $7;
 $6 = $236;
 $237 = $6;
 $238 = $237;
 $239 = $238;
 $240 = (($239) + 12|0);
 $119 = $240;
 $126 = 1;
 $58 = $__h;
 $241 = $58;
 $57 = $241;
 $242 = $57;
 $55 = $242;
 $56 = 0;
 $243 = $55;
 $244 = ($243);
 $54 = $244;
 $245 = $54;
 $246 = $245;
 $53 = $246;
 $247 = $53;
 $248 = ($247);
 $249 = HEAP32[$248>>2]|0;
 $__tmp$i$i$i6 = $249;
 $250 = $56;
 $251 = ($243);
 $30 = $251;
 $252 = $30;
 $253 = $252;
 $29 = $253;
 $254 = $29;
 $255 = ($254);
 HEAP32[$255>>2] = $250;
 $256 = $__tmp$i$i$i6;
 $257 = ($256|0)!=(0|0);
 if ($257) {
  $258 = ($243);
  $28 = $258;
  $259 = $28;
  $260 = $259;
  $27 = $260;
  $261 = $27;
  $262 = (($261) + 4|0);
  $263 = $__tmp$i$i$i6;
  $51 = $262;
  $52 = $263;
  $264 = $51;
  $265 = (($264) + 5|0);
  $266 = HEAP8[$265]|0;
  $267 = $266&1;
  if ($267) {
   $268 = ($264);
   $269 = HEAP32[$268>>2]|0;
   $270 = $52;
   $271 = (($270) + 8|0);
   $272 = $271;
   $273 = (($272) + 12|0);
   $50 = $273;
   $274 = $50;
   $275 = $274;
   $276 = $275;
   $47 = $269;
   $48 = $276;
   $277 = $47;
   $278 = $48;
   $tmp$i$i$i$i$i7 = $46;
   $tmp1$i$i$i$i$i8 = $49;
   ;HEAP8[$tmp$i$i$i$i$i7+0|0]=HEAP8[$tmp1$i$i$i$i$i8+0|0]|0;
   $44 = $277;
   $45 = $278;
  }
  $279 = (($264) + 4|0);
  $280 = HEAP8[$279]|0;
  $281 = $280&1;
  if ($281) {
   $282 = ($264);
   $283 = HEAP32[$282>>2]|0;
   $284 = $52;
   $285 = (($284) + 8|0);
   $286 = $285;
   $287 = ($286);
   $37 = $287;
   $288 = $37;
   $289 = $288;
   $290 = $289;
   $34 = $283;
   $35 = $290;
   $291 = $34;
   $292 = $35;
   $tmp$i1$i$i$i$i9 = $33;
   $tmp1$i2$i$i$i$i10 = $36;
   ;HEAP8[$tmp$i1$i$i$i$i9+0|0]=HEAP8[$tmp1$i2$i$i$i$i10+0|0]|0;
   $31 = $291;
   $32 = $292;
   $293 = $32;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($293);
  }
  $294 = $52;
  $295 = ($294|0)!=(0|0);
  if ($295) {
   $296 = ($264);
   $297 = HEAP32[$296>>2]|0;
   $298 = $52;
   $41 = $297;
   $42 = $298;
   $43 = 1;
   $299 = $41;
   $300 = $42;
   $301 = $43;
   $38 = $299;
   $39 = $300;
   $40 = $301;
   $302 = $39;
   $303 = $302;
   __ZdlPv($303);
  }
 }
 $369 = $119;
 STACKTOP = sp;return ($369|0);
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEE25__construct_node_with_keyERSC_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__h = 0, $__na = 0, $__t$i$i$i = 0, $__t21$i$i$i = 0, $__t21$i$i$i8 = 0, $__tmp$i$i$i = 0, $__tmp$i$i$i1 = 0, $tmp$i = 0, $tmp$i$i = 0, $tmp$i$i$i = 0, $tmp$i$i$i$i = 0, $tmp$i$i$i$i$i = 0, $tmp$i$i$i$i$i2 = 0, $tmp$i$i$i$i13 = 0, $tmp$i$i$i11 = 0, $tmp$i$i9 = 0, $tmp$i1$i$i$i$i = 0, $tmp$i1$i$i$i$i4 = 0, $tmp$i15 = 0, $tmp1$i = 0;
 var $tmp1$i$i = 0, $tmp1$i$i$i$i = 0, $tmp1$i$i$i$i$i = 0, $tmp1$i$i$i$i$i3 = 0, $tmp1$i$i$i$i14 = 0, $tmp1$i$i10 = 0, $tmp1$i16 = 0, $tmp1$i2$i$i$i$i = 0, $tmp1$i2$i$i$i$i5 = 0, $tmp2$i$i$i = 0, $tmp2$i$i$i12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1400|0;
 $9 = sp + 64|0;
 $14 = sp + 104|0;
 $26 = sp + 200|0;
 $29 = sp + 224|0;
 $39 = sp + 304|0;
 $40 = sp + 312|0;
 $43 = sp + 336|0;
 $44 = sp + 344|0;
 $__t21$i$i$i8 = sp + 352|0;
 $47 = sp + 376|0;
 $58 = sp + 472|0;
 $71 = sp + 576|0;
 $74 = sp + 600|0;
 $84 = sp + 680|0;
 $87 = sp + 704|0;
 $101 = sp + 824|0;
 $102 = sp + 832|0;
 $105 = sp + 856|0;
 $106 = sp + 864|0;
 $__t21$i$i$i = sp + 872|0;
 $109 = sp + 896|0;
 $114 = sp + 936|0;
 $133 = sp + 1088|0;
 $136 = sp + 1112|0;
 $146 = sp + 1192|0;
 $149 = sp + 1216|0;
 $__h = sp + 1352|0;
 $164 = sp + 1368|0;
 $162 = $this;
 $163 = $__k;
 $168 = $162;
 $169 = ($168);
 $161 = $169;
 $170 = $161;
 $171 = (($170) + 8|0);
 $160 = $171;
 $172 = $160;
 $173 = $172;
 $159 = $173;
 $174 = $159;
 $175 = $174;
 $__na = $175;
 $176 = $__na;
 $125 = $176;
 $126 = 1;
 $177 = $125;
 $178 = $126;
 $122 = $177;
 $123 = $178;
 $124 = 0;
 $179 = $123;
 $180 = ($179*24)|0;
 $181 = (__Znwj($180)|0);
 $182 = $181;
 $183 = $__na;
 $120 = $164;
 $121 = $183;
 $184 = $120;
 $185 = $121;
 $118 = $184;
 $119 = $185;
 $186 = $118;
 $187 = ($186);
 $188 = $119;
 HEAP32[$187>>2] = $188;
 $189 = (($186) + 4|0);
 HEAP8[$189] = 0;
 $190 = (($186) + 5|0);
 HEAP8[$190] = 0;
 $115 = $__h;
 $116 = $182;
 $117 = $164;
 $191 = $115;
 $192 = $116;
 $193 = $117;
 $111 = $191;
 $112 = $192;
 $113 = $193;
 $194 = $111;
 $195 = ($194);
 $196 = $112;
 $197 = $113;
 $110 = $197;
 $198 = $110;
 $199 = $114;
 $200 = $198;
 ;HEAP32[$199+0>>2]=HEAP32[$200+0>>2]|0;HEAP32[$199+4>>2]=HEAP32[$200+4>>2]|0;
 $tmp$i$i = $109;
 $tmp1$i$i = $114;
 ;HEAP8[$tmp$i$i+0|0]=HEAP8[$tmp1$i$i+0|0]|0;HEAP8[$tmp$i$i+1|0]=HEAP8[$tmp1$i$i+1|0]|0;HEAP8[$tmp$i$i+2|0]=HEAP8[$tmp1$i$i+2|0]|0;HEAP8[$tmp$i$i+3|0]=HEAP8[$tmp1$i$i+3|0]|0;HEAP8[$tmp$i$i+4|0]=HEAP8[$tmp1$i$i+4|0]|0;HEAP8[$tmp$i$i+5|0]=HEAP8[$tmp1$i$i+5|0]|0;HEAP8[$tmp$i$i+6|0]=HEAP8[$tmp1$i$i+6|0]|0;HEAP8[$tmp$i$i+7|0]=HEAP8[$tmp1$i$i+7|0]|0;
 $107 = $195;
 $108 = $196;
 $201 = $107;
 $202 = $108;
 $tmp$i$i$i = $__t21$i$i$i;
 $tmp2$i$i$i = $109;
 ;HEAP8[$tmp$i$i$i+0|0]=HEAP8[$tmp2$i$i$i+0|0]|0;HEAP8[$tmp$i$i$i+1|0]=HEAP8[$tmp2$i$i$i+1|0]|0;HEAP8[$tmp$i$i$i+2|0]=HEAP8[$tmp2$i$i$i+2|0]|0;HEAP8[$tmp$i$i$i+3|0]=HEAP8[$tmp2$i$i$i+3|0]|0;HEAP8[$tmp$i$i$i+4|0]=HEAP8[$tmp2$i$i$i+4|0]|0;HEAP8[$tmp$i$i$i+5|0]=HEAP8[$tmp2$i$i$i+5|0]|0;HEAP8[$tmp$i$i$i+6|0]=HEAP8[$tmp2$i$i$i+6|0]|0;HEAP8[$tmp$i$i$i+7|0]=HEAP8[$tmp2$i$i$i+7|0]|0;
 $104 = $201;
 HEAP32[$105>>2] = $202;
 $203 = $104;
 $204 = $203;
 $103 = $105;
 $205 = $103;
 $206 = HEAP32[$205>>2]|0;
 $97 = $__t21$i$i$i;
 $207 = $97;
 $208 = $106;
 $209 = $207;
 ;HEAP32[$208+0>>2]=HEAP32[$209+0>>2]|0;HEAP32[$208+4>>2]=HEAP32[$209+4>>2]|0;
 $tmp$i$i$i$i = $102;
 $tmp1$i$i$i$i = $106;
 ;HEAP8[$tmp$i$i$i$i+0|0]=HEAP8[$tmp1$i$i$i$i+0|0]|0;HEAP8[$tmp$i$i$i$i+1|0]=HEAP8[$tmp1$i$i$i$i+1|0]|0;HEAP8[$tmp$i$i$i$i+2|0]=HEAP8[$tmp1$i$i$i$i+2|0]|0;HEAP8[$tmp$i$i$i$i+3|0]=HEAP8[$tmp1$i$i$i$i+3|0]|0;HEAP8[$tmp$i$i$i$i+4|0]=HEAP8[$tmp1$i$i$i$i+4|0]|0;HEAP8[$tmp$i$i$i$i+5|0]=HEAP8[$tmp1$i$i$i$i+5|0]|0;HEAP8[$tmp$i$i$i$i+6|0]=HEAP8[$tmp1$i$i$i$i+6|0]|0;HEAP8[$tmp$i$i$i$i+7|0]=HEAP8[$tmp1$i$i$i$i+7|0]|0;
 $100 = $204;
 HEAP32[$101>>2] = $206;
 $210 = $100;
 $211 = ($210);
 $99 = $101;
 $212 = $99;
 $213 = HEAP32[$212>>2]|0;
 HEAP32[$211>>2] = $213;
 $214 = (($210) + 4|0);
 $98 = $102;
 $215 = $98;
 $216 = $214;
 $217 = $215;
 ;HEAP32[$216+0>>2]=HEAP32[$217+0>>2]|0;HEAP32[$216+4>>2]=HEAP32[$217+4>>2]|0;
 $218 = $__na;
 $64 = $__h;
 $219 = $64;
 $220 = ($219);
 $63 = $220;
 $221 = $63;
 $222 = $221;
 $62 = $222;
 $223 = $62;
 $224 = ($223);
 $225 = HEAP32[$224>>2]|0;
 $226 = (($225) + 8|0);
 $227 = $226;
 $228 = ($227);
 $61 = $228;
 $229 = $61;
 $230 = $229;
 $231 = $230;
 $232 = $163;
 $11 = $218;
 $12 = $231;
 $13 = $232;
 $233 = $11;
 $234 = $12;
 $235 = $13;
 $10 = $235;
 $236 = $10;
 $tmp$i15 = $9;
 $tmp1$i16 = $14;
 ;HEAP8[$tmp$i15+0|0]=HEAP8[$tmp1$i16+0|0]|0;
 $6 = $233;
 $7 = $234;
 $8 = $236;
 $237 = $6;
 $238 = $7;
 $239 = $8;
 $5 = $239;
 $240 = $5;
 $2 = $237;
 $3 = $238;
 $4 = $240;
 $241 = $3;
 $242 = $241;
 $243 = ($242|0)==(0|0);
 do {
  if (!($243)) {
   $244 = $242;
   $245 = $4;
   $1 = $245;
   $246 = $1;
   __THREW__ = 0;
   invoke_vii(43,($244|0),($246|0));
   $247 = __THREW__; __THREW__ = 0;
   $248 = $247&1;
   if (!($248)) {
    break;
   }
   $394 = ___cxa_find_matching_catch(-1,-1)|0;
   $395 = tempRet0;
   $165 = $394;
   $166 = $395;
   $158 = $__h;
   $396 = $158;
   $157 = $396;
   $397 = $157;
   $155 = $397;
   $156 = 0;
   $398 = $155;
   $399 = ($398);
   $154 = $399;
   $400 = $154;
   $401 = $400;
   $153 = $401;
   $402 = $153;
   $403 = ($402);
   $404 = HEAP32[$403>>2]|0;
   $__tmp$i$i$i = $404;
   $405 = $156;
   $406 = ($398);
   $130 = $406;
   $407 = $130;
   $408 = $407;
   $129 = $408;
   $409 = $129;
   $410 = ($409);
   HEAP32[$410>>2] = $405;
   $411 = $__tmp$i$i$i;
   $412 = ($411|0)!=(0|0);
   if ($412) {
    $413 = ($398);
    $128 = $413;
    $414 = $128;
    $415 = $414;
    $127 = $415;
    $416 = $127;
    $417 = (($416) + 4|0);
    $418 = $__tmp$i$i$i;
    $151 = $417;
    $152 = $418;
    $419 = $151;
    $420 = (($419) + 5|0);
    $421 = HEAP8[$420]|0;
    $422 = $421&1;
    if ($422) {
     $423 = ($419);
     $424 = HEAP32[$423>>2]|0;
     $425 = $152;
     $426 = (($425) + 8|0);
     $427 = $426;
     $428 = (($427) + 12|0);
     $150 = $428;
     $429 = $150;
     $430 = $429;
     $431 = $430;
     $147 = $424;
     $148 = $431;
     $432 = $147;
     $433 = $148;
     $tmp$i$i$i$i$i = $146;
     $tmp1$i$i$i$i$i = $149;
     ;HEAP8[$tmp$i$i$i$i$i+0|0]=HEAP8[$tmp1$i$i$i$i$i+0|0]|0;
     $144 = $432;
     $145 = $433;
    }
    $434 = (($419) + 4|0);
    $435 = HEAP8[$434]|0;
    $436 = $435&1;
    if ($436) {
     $437 = ($419);
     $438 = HEAP32[$437>>2]|0;
     $439 = $152;
     $440 = (($439) + 8|0);
     $441 = $440;
     $442 = ($441);
     $137 = $442;
     $443 = $137;
     $444 = $443;
     $445 = $444;
     $134 = $438;
     $135 = $445;
     $446 = $134;
     $447 = $135;
     $tmp$i1$i$i$i$i = $133;
     $tmp1$i2$i$i$i$i = $136;
     ;HEAP8[$tmp$i1$i$i$i$i+0|0]=HEAP8[$tmp1$i2$i$i$i$i+0|0]|0;
     $131 = $446;
     $132 = $447;
     $448 = $132;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($448);
    }
    $449 = $152;
    $450 = ($449|0)!=(0|0);
    if ($450) {
     $451 = ($419);
     $452 = HEAP32[$451>>2]|0;
     $453 = $152;
     $141 = $452;
     $142 = $453;
     $143 = 1;
     $454 = $141;
     $455 = $142;
     $456 = $143;
     $138 = $454;
     $139 = $455;
     $140 = $456;
     $457 = $139;
     $458 = $457;
     __ZdlPv($458);
    }
   }
   $459 = $165;
   $460 = $166;
   ___resumeException($459|0);
   // unreachable;
  }
 } while(0);
 $17 = $__h;
 $249 = $17;
 $250 = ($249);
 $16 = $250;
 $251 = $16;
 $252 = $251;
 $15 = $252;
 $253 = $15;
 $254 = (($253) + 4|0);
 $255 = (($254) + 4|0);
 HEAP8[$255] = 1;
 $256 = $__na;
 $20 = $__h;
 $257 = $20;
 $258 = ($257);
 $19 = $258;
 $259 = $19;
 $260 = $259;
 $18 = $260;
 $261 = $18;
 $262 = ($261);
 $263 = HEAP32[$262>>2]|0;
 $264 = (($263) + 8|0);
 $265 = $264;
 $266 = (($265) + 12|0);
 $21 = $266;
 $267 = $21;
 $268 = $267;
 $269 = $268;
 $27 = $256;
 $28 = $269;
 $270 = $27;
 $271 = $28;
 $tmp$i = $26;
 $tmp1$i = $29;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
 $24 = $270;
 $25 = $271;
 $272 = $24;
 $273 = $25;
 $22 = $272;
 $23 = $273;
 $274 = $23;
 $275 = $274;
 $276 = ($275|0)==(0|0);
 if (!($276)) {
  $277 = $275;
  HEAP32[$277>>2] = 0;
 }
 $32 = $__h;
 $278 = $32;
 $279 = ($278);
 $31 = $279;
 $280 = $31;
 $281 = $280;
 $30 = $281;
 $282 = $30;
 $283 = (($282) + 4|0);
 $284 = (($283) + 5|0);
 HEAP8[$284] = 1;
 $33 = $__h;
 $285 = $33;
 $59 = $agg$result;
 $60 = $285;
 $286 = $59;
 $287 = $60;
 $56 = $286;
 $57 = $287;
 $288 = $56;
 $289 = ($288);
 $290 = $57;
 $55 = $290;
 $291 = $55;
 $292 = ($291);
 $54 = $292;
 $293 = $54;
 $294 = $293;
 $53 = $294;
 $295 = $53;
 $296 = ($295);
 $297 = HEAP32[$296>>2]|0;
 $__t$i$i$i = $297;
 $298 = ($291);
 $52 = $298;
 $299 = $52;
 $300 = $299;
 $51 = $300;
 $301 = $51;
 $302 = ($301);
 HEAP32[$302>>2] = 0;
 $303 = $__t$i$i$i;
 $304 = $57;
 $50 = $304;
 $305 = $50;
 $306 = ($305);
 $49 = $306;
 $307 = $49;
 $308 = $307;
 $48 = $308;
 $309 = $48;
 $310 = (($309) + 4|0);
 $34 = $310;
 $311 = $34;
 $312 = $58;
 $313 = $311;
 ;HEAP32[$312+0>>2]=HEAP32[$313+0>>2]|0;HEAP32[$312+4>>2]=HEAP32[$313+4>>2]|0;
 $tmp$i$i9 = $47;
 $tmp1$i$i10 = $58;
 ;HEAP8[$tmp$i$i9+0|0]=HEAP8[$tmp1$i$i10+0|0]|0;HEAP8[$tmp$i$i9+1|0]=HEAP8[$tmp1$i$i10+1|0]|0;HEAP8[$tmp$i$i9+2|0]=HEAP8[$tmp1$i$i10+2|0]|0;HEAP8[$tmp$i$i9+3|0]=HEAP8[$tmp1$i$i10+3|0]|0;HEAP8[$tmp$i$i9+4|0]=HEAP8[$tmp1$i$i10+4|0]|0;HEAP8[$tmp$i$i9+5|0]=HEAP8[$tmp1$i$i10+5|0]|0;HEAP8[$tmp$i$i9+6|0]=HEAP8[$tmp1$i$i10+6|0]|0;HEAP8[$tmp$i$i9+7|0]=HEAP8[$tmp1$i$i10+7|0]|0;
 $45 = $289;
 $46 = $303;
 $314 = $45;
 $315 = $46;
 $tmp$i$i$i11 = $__t21$i$i$i8;
 $tmp2$i$i$i12 = $47;
 ;HEAP8[$tmp$i$i$i11+0|0]=HEAP8[$tmp2$i$i$i12+0|0]|0;HEAP8[$tmp$i$i$i11+1|0]=HEAP8[$tmp2$i$i$i12+1|0]|0;HEAP8[$tmp$i$i$i11+2|0]=HEAP8[$tmp2$i$i$i12+2|0]|0;HEAP8[$tmp$i$i$i11+3|0]=HEAP8[$tmp2$i$i$i12+3|0]|0;HEAP8[$tmp$i$i$i11+4|0]=HEAP8[$tmp2$i$i$i12+4|0]|0;HEAP8[$tmp$i$i$i11+5|0]=HEAP8[$tmp2$i$i$i12+5|0]|0;HEAP8[$tmp$i$i$i11+6|0]=HEAP8[$tmp2$i$i$i12+6|0]|0;HEAP8[$tmp$i$i$i11+7|0]=HEAP8[$tmp2$i$i$i12+7|0]|0;
 $42 = $314;
 HEAP32[$43>>2] = $315;
 $316 = $42;
 $317 = $316;
 $41 = $43;
 $318 = $41;
 $319 = HEAP32[$318>>2]|0;
 $35 = $__t21$i$i$i8;
 $320 = $35;
 $321 = $44;
 $322 = $320;
 ;HEAP32[$321+0>>2]=HEAP32[$322+0>>2]|0;HEAP32[$321+4>>2]=HEAP32[$322+4>>2]|0;
 $tmp$i$i$i$i13 = $40;
 $tmp1$i$i$i$i14 = $44;
 ;HEAP8[$tmp$i$i$i$i13+0|0]=HEAP8[$tmp1$i$i$i$i14+0|0]|0;HEAP8[$tmp$i$i$i$i13+1|0]=HEAP8[$tmp1$i$i$i$i14+1|0]|0;HEAP8[$tmp$i$i$i$i13+2|0]=HEAP8[$tmp1$i$i$i$i14+2|0]|0;HEAP8[$tmp$i$i$i$i13+3|0]=HEAP8[$tmp1$i$i$i$i14+3|0]|0;HEAP8[$tmp$i$i$i$i13+4|0]=HEAP8[$tmp1$i$i$i$i14+4|0]|0;HEAP8[$tmp$i$i$i$i13+5|0]=HEAP8[$tmp1$i$i$i$i14+5|0]|0;HEAP8[$tmp$i$i$i$i13+6|0]=HEAP8[$tmp1$i$i$i$i14+6|0]|0;HEAP8[$tmp$i$i$i$i13+7|0]=HEAP8[$tmp1$i$i$i$i14+7|0]|0;
 $38 = $317;
 HEAP32[$39>>2] = $319;
 $323 = $38;
 $324 = ($323);
 $37 = $39;
 $325 = $37;
 $326 = HEAP32[$325>>2]|0;
 HEAP32[$324>>2] = $326;
 $327 = (($323) + 4|0);
 $36 = $40;
 $328 = $36;
 $329 = $327;
 $330 = $328;
 ;HEAP32[$329+0>>2]=HEAP32[$330+0>>2]|0;HEAP32[$329+4>>2]=HEAP32[$330+4>>2]|0;
 $167 = 1;
 $96 = $__h;
 $331 = $96;
 $95 = $331;
 $332 = $95;
 $93 = $332;
 $94 = 0;
 $333 = $93;
 $334 = ($333);
 $92 = $334;
 $335 = $92;
 $336 = $335;
 $91 = $336;
 $337 = $91;
 $338 = ($337);
 $339 = HEAP32[$338>>2]|0;
 $__tmp$i$i$i1 = $339;
 $340 = $94;
 $341 = ($333);
 $68 = $341;
 $342 = $68;
 $343 = $342;
 $67 = $343;
 $344 = $67;
 $345 = ($344);
 HEAP32[$345>>2] = $340;
 $346 = $__tmp$i$i$i1;
 $347 = ($346|0)!=(0|0);
 if (!($347)) {
  STACKTOP = sp;return;
 }
 $348 = ($333);
 $66 = $348;
 $349 = $66;
 $350 = $349;
 $65 = $350;
 $351 = $65;
 $352 = (($351) + 4|0);
 $353 = $__tmp$i$i$i1;
 $89 = $352;
 $90 = $353;
 $354 = $89;
 $355 = (($354) + 5|0);
 $356 = HEAP8[$355]|0;
 $357 = $356&1;
 if ($357) {
  $358 = ($354);
  $359 = HEAP32[$358>>2]|0;
  $360 = $90;
  $361 = (($360) + 8|0);
  $362 = $361;
  $363 = (($362) + 12|0);
  $88 = $363;
  $364 = $88;
  $365 = $364;
  $366 = $365;
  $85 = $359;
  $86 = $366;
  $367 = $85;
  $368 = $86;
  $tmp$i$i$i$i$i2 = $84;
  $tmp1$i$i$i$i$i3 = $87;
  ;HEAP8[$tmp$i$i$i$i$i2+0|0]=HEAP8[$tmp1$i$i$i$i$i3+0|0]|0;
  $82 = $367;
  $83 = $368;
 }
 $369 = (($354) + 4|0);
 $370 = HEAP8[$369]|0;
 $371 = $370&1;
 if ($371) {
  $372 = ($354);
  $373 = HEAP32[$372>>2]|0;
  $374 = $90;
  $375 = (($374) + 8|0);
  $376 = $375;
  $377 = ($376);
  $75 = $377;
  $378 = $75;
  $379 = $378;
  $380 = $379;
  $72 = $373;
  $73 = $380;
  $381 = $72;
  $382 = $73;
  $tmp$i1$i$i$i$i4 = $71;
  $tmp1$i2$i$i$i$i5 = $74;
  ;HEAP8[$tmp$i1$i$i$i$i4+0|0]=HEAP8[$tmp1$i2$i$i$i$i5+0|0]|0;
  $69 = $381;
  $70 = $382;
  $383 = $70;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($383);
 }
 $384 = $90;
 $385 = ($384|0)!=(0|0);
 if ($385) {
  $386 = ($354);
  $387 = HEAP32[$386>>2]|0;
  $388 = $90;
  $79 = $387;
  $80 = $388;
  $81 = 1;
  $389 = $79;
  $390 = $80;
  $391 = $81;
  $76 = $389;
  $77 = $390;
  $78 = $391;
  $392 = $77;
  $393 = $392;
  __ZdlPv($393);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS8_PvEE($agg$result,$this,$__nd) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__nd = $__nd|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0.0, $487 = 0, $488 = 0.0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0.0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0.0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0.0, $531 = 0.0, $532 = 0.0, $533 = 0.0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__inserted = 0, $__lhs_sz$i$i$i = 0, $__lp$i$i$i = 0, $__ndptr = 0, $__pn = 0, $__rp$i$i$i = 0, $tmp$i = 0, $tmp1$i = 0, label = 0, sp = 0;
 var u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1312|0;
 $94 = sp + 768|0;
 $97 = sp + 792|0;
 $__inserted = sp + 1256|0;
 $154 = sp + 1280|0;
 $155 = sp + 1288|0;
 $156 = sp + 1304|0;
 $152 = $this;
 $153 = $__nd;
 $157 = $152;
 $151 = $157;
 $158 = $151;
 $159 = (($158) + 12|0);
 $150 = $159;
 $160 = $150;
 $161 = $160;
 $149 = $161;
 $162 = $149;
 $163 = $162;
 $164 = $153;
 $165 = (($164) + 8|0);
 $105 = $163;
 $106 = $165;
 $166 = $105;
 $167 = $166;
 $168 = $106;
 $169 = $168;
 $170 = ($169);
 $171 = (__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($167,$170)|0);
 $172 = $153;
 $173 = (($172) + 4|0);
 HEAP32[$173>>2] = $171;
 $104 = $157;
 $174 = $104;
 $175 = ($174);
 $103 = $175;
 $176 = $103;
 $177 = ($176);
 $102 = $177;
 $178 = $102;
 $179 = $178;
 $101 = $179;
 $180 = $101;
 $181 = (($180) + 4|0);
 $100 = $181;
 $182 = $100;
 $183 = ($182);
 $99 = $183;
 $184 = $99;
 $185 = $184;
 $98 = $185;
 $186 = $98;
 $187 = ($186);
 $188 = HEAP32[$187>>2]|0;
 $__bc = $188;
 HEAP8[$__inserted] = 0;
 $189 = $__bc;
 $190 = ($189|0)!=(0);
 if ($190) {
  $191 = $153;
  $192 = (($191) + 4|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = $__bc;
  $86 = $193;
  $87 = $194;
  $195 = $87;
  $196 = $87;
  $197 = (($196) - 1)|0;
  $198 = $195 & $197;
  $199 = ($198|0)!=(0);
  if ($199) {
   $204 = $86;
   $205 = $87;
   $206 = (($204>>>0) % ($205>>>0))&-1;
   $207 = $206;
  } else {
   $200 = $86;
   $201 = $87;
   $202 = (($201) - 1)|0;
   $203 = $200 & $202;
   $207 = $203;
  }
  $__chash = $207;
  $208 = ($157);
  $209 = $__chash;
  $8 = $208;
  $9 = $209;
  $210 = $8;
  $211 = $9;
  $212 = ($210);
  $7 = $212;
  $213 = $7;
  $214 = $213;
  $6 = $214;
  $215 = $6;
  $216 = ($215);
  $217 = HEAP32[$216>>2]|0;
  $218 = (($217) + ($211<<2)|0);
  $219 = HEAP32[$218>>2]|0;
  $__ndptr = $219;
  $220 = $__ndptr;
  $221 = ($220|0)!=(0|0);
  do {
   if ($221) {
    $222 = $__ndptr;
    $223 = $222;
    $224 = ($223);
    $225 = HEAP32[$224>>2]|0;
    $__ndptr = $225;
    L9: while(1) {
     $226 = $__ndptr;
     $227 = ($226|0)!=(0|0);
     if ($227) {
      $228 = $__ndptr;
      $229 = (($228) + 4|0);
      $230 = HEAP32[$229>>2]|0;
      $231 = $__bc;
      $4 = $230;
      $5 = $231;
      $232 = $5;
      $233 = $5;
      $234 = (($233) - 1)|0;
      $235 = $232 & $234;
      $236 = ($235|0)!=(0);
      if ($236) {
       $241 = $4;
       $242 = $5;
       $243 = (($241>>>0) % ($242>>>0))&-1;
       $244 = $243;
      } else {
       $237 = $4;
       $238 = $5;
       $239 = (($238) - 1)|0;
       $240 = $237 & $239;
       $244 = $240;
      }
      $245 = $__chash;
      $246 = ($244|0)==($245|0);
      $247 = $246;
     } else {
      $247 = 0;
     }
     if (!($247)) {
      label = 41;
      break;
     }
     $3 = $157;
     $248 = $3;
     $249 = (($248) + 16|0);
     $2 = $249;
     $250 = $2;
     $251 = $250;
     $1 = $251;
     $252 = $1;
     $253 = $252;
     $254 = $__ndptr;
     $255 = (($254) + 8|0);
     $256 = $153;
     $257 = (($256) + 8|0);
     $70 = $253;
     $71 = $255;
     $72 = $257;
     $258 = $70;
     $259 = $258;
     $260 = $71;
     $261 = $260;
     $262 = ($261);
     $263 = $72;
     $264 = $263;
     $265 = ($264);
     $67 = $259;
     $68 = $262;
     $69 = $265;
     $266 = $68;
     $267 = $69;
     $65 = $266;
     $66 = $267;
     $268 = $65;
     $63 = $268;
     $269 = $63;
     $62 = $269;
     $270 = $62;
     $271 = ($270);
     $61 = $271;
     $272 = $61;
     $273 = $272;
     $60 = $273;
     $274 = $60;
     $275 = ($274);
     $276 = ($275);
     $277 = $276;
     $278 = ($277);
     $279 = $278;
     $280 = HEAP8[$279]|0;
     $281 = $280&255;
     $282 = $281 & 1;
     $283 = ($282|0)!=(0);
     if ($283) {
      $56 = $269;
      $284 = $56;
      $285 = ($284);
      $55 = $285;
      $286 = $55;
      $287 = $286;
      $54 = $287;
      $288 = $54;
      $289 = ($288);
      $290 = ($289);
      $291 = $290;
      $292 = (($291) + 4|0);
      $293 = HEAP32[$292>>2]|0;
      $307 = $293;
     } else {
      $59 = $269;
      $294 = $59;
      $295 = ($294);
      $58 = $295;
      $296 = $58;
      $297 = $296;
      $57 = $297;
      $298 = $57;
      $299 = ($298);
      $300 = ($299);
      $301 = $300;
      $302 = ($301);
      $303 = $302;
      $304 = HEAP8[$303]|0;
      $305 = $304&255;
      $306 = $305 >> 1;
      $307 = $306;
     }
     $__lhs_sz$i$i$i = $307;
     $308 = $__lhs_sz$i$i$i;
     $309 = $66;
     $53 = $309;
     $310 = $53;
     $52 = $310;
     $311 = $52;
     $312 = ($311);
     $51 = $312;
     $313 = $51;
     $314 = $313;
     $50 = $314;
     $315 = $50;
     $316 = ($315);
     $317 = ($316);
     $318 = $317;
     $319 = ($318);
     $320 = $319;
     $321 = HEAP8[$320]|0;
     $322 = $321&255;
     $323 = $322 & 1;
     $324 = ($323|0)!=(0);
     if ($324) {
      $46 = $310;
      $325 = $46;
      $326 = ($325);
      $45 = $326;
      $327 = $45;
      $328 = $327;
      $44 = $328;
      $329 = $44;
      $330 = ($329);
      $331 = ($330);
      $332 = $331;
      $333 = (($332) + 4|0);
      $334 = HEAP32[$333>>2]|0;
      $348 = $334;
     } else {
      $49 = $310;
      $335 = $49;
      $336 = ($335);
      $48 = $336;
      $337 = $48;
      $338 = $337;
      $47 = $338;
      $339 = $47;
      $340 = ($339);
      $341 = ($340);
      $342 = $341;
      $343 = ($342);
      $344 = $343;
      $345 = HEAP8[$344]|0;
      $346 = $345&255;
      $347 = $346 >> 1;
      $348 = $347;
     }
     $349 = ($308|0)!=($348|0);
     do {
      if ($349) {
       $$expand_i1_val = 0;
       $64 = $$expand_i1_val;
      } else {
       $350 = $65;
       $40 = $350;
       $351 = $40;
       $39 = $351;
       $352 = $39;
       $38 = $352;
       $353 = $38;
       $354 = ($353);
       $37 = $354;
       $355 = $37;
       $356 = $355;
       $36 = $356;
       $357 = $36;
       $358 = ($357);
       $359 = ($358);
       $360 = $359;
       $361 = ($360);
       $362 = $361;
       $363 = HEAP8[$362]|0;
       $364 = $363&255;
       $365 = $364 & 1;
       $366 = ($365|0)!=(0);
       if ($366) {
        $30 = $352;
        $367 = $30;
        $368 = ($367);
        $29 = $368;
        $369 = $29;
        $370 = $369;
        $28 = $370;
        $371 = $28;
        $372 = ($371);
        $373 = ($372);
        $374 = $373;
        $375 = (($374) + 8|0);
        $376 = HEAP32[$375>>2]|0;
        $389 = $376;
       } else {
        $35 = $352;
        $377 = $35;
        $378 = ($377);
        $34 = $378;
        $379 = $34;
        $380 = $379;
        $33 = $380;
        $381 = $33;
        $382 = ($381);
        $383 = ($382);
        $384 = $383;
        $385 = (($384) + 1|0);
        $386 = ($385);
        $32 = $386;
        $387 = $32;
        $31 = $387;
        $388 = $31;
        $389 = $388;
       }
       $27 = $389;
       $390 = $27;
       $__lp$i$i$i = $390;
       $391 = $66;
       $23 = $391;
       $392 = $23;
       $22 = $392;
       $393 = $22;
       $21 = $393;
       $394 = $21;
       $395 = ($394);
       $20 = $395;
       $396 = $20;
       $397 = $396;
       $19 = $397;
       $398 = $19;
       $399 = ($398);
       $400 = ($399);
       $401 = $400;
       $402 = ($401);
       $403 = $402;
       $404 = HEAP8[$403]|0;
       $405 = $404&255;
       $406 = $405 & 1;
       $407 = ($406|0)!=(0);
       if ($407) {
        $13 = $393;
        $408 = $13;
        $409 = ($408);
        $12 = $409;
        $410 = $12;
        $411 = $410;
        $11 = $411;
        $412 = $11;
        $413 = ($412);
        $414 = ($413);
        $415 = $414;
        $416 = (($415) + 8|0);
        $417 = HEAP32[$416>>2]|0;
        $430 = $417;
       } else {
        $18 = $393;
        $418 = $18;
        $419 = ($418);
        $17 = $419;
        $420 = $17;
        $421 = $420;
        $16 = $421;
        $422 = $16;
        $423 = ($422);
        $424 = ($423);
        $425 = $424;
        $426 = (($425) + 1|0);
        $427 = ($426);
        $15 = $427;
        $428 = $15;
        $14 = $428;
        $429 = $14;
        $430 = $429;
       }
       $10 = $430;
       $431 = $10;
       $__rp$i$i$i = $431;
       $432 = $65;
       $26 = $432;
       $433 = $26;
       $434 = ($433);
       $25 = $434;
       $435 = $25;
       $436 = $435;
       $24 = $436;
       $437 = $24;
       $438 = ($437);
       $439 = ($438);
       $440 = $439;
       $441 = ($440);
       $442 = $441;
       $443 = HEAP8[$442]|0;
       $444 = $443&255;
       $445 = $444 & 1;
       $446 = ($445|0)!=(0);
       if ($446) {
        $447 = $__lp$i$i$i;
        $448 = $__rp$i$i$i;
        $449 = $__lhs_sz$i$i$i;
        $41 = $447;
        $42 = $448;
        $43 = $449;
        $450 = $41;
        $451 = $42;
        $452 = $43;
        __THREW__ = 0;
        $453 = (invoke_iiii(25,($450|0),($451|0),($452|0))|0);
        $454 = __THREW__; __THREW__ = 0;
        $455 = $454&1;
        if ($455) {
         label = 36;
         break L9;
        }
        $456 = ($453|0)==(0);
        $$expand_i1_val2 = $456&1;
        $64 = $$expand_i1_val2;
        break;
       }
       while(1) {
        $457 = $__lhs_sz$i$i$i;
        $458 = ($457|0)!=(0);
        if (!($458)) {
         label = 35;
         break;
        }
        $459 = $__lp$i$i$i;
        $460 = HEAP8[$459]|0;
        $461 = $460 << 24 >> 24;
        $462 = $__rp$i$i$i;
        $463 = HEAP8[$462]|0;
        $464 = $463 << 24 >> 24;
        $465 = ($461|0)!=($464|0);
        if ($465) {
         label = 33;
         break;
        }
        $466 = $__lhs_sz$i$i$i;
        $467 = (($466) + -1)|0;
        $__lhs_sz$i$i$i = $467;
        $468 = $__lp$i$i$i;
        $469 = (($468) + 1|0);
        $__lp$i$i$i = $469;
        $470 = $__rp$i$i$i;
        $471 = (($470) + 1|0);
        $__rp$i$i$i = $471;
       }
       if ((label|0) == 33) {
        label = 0;
        $$expand_i1_val4 = 0;
        $64 = $$expand_i1_val4;
        break;
       }
       else if ((label|0) == 35) {
        label = 0;
        $$expand_i1_val6 = 1;
        $64 = $$expand_i1_val6;
        break;
       }
      }
     } while(0);
     $$pre_trunc = $64;
     $473 = $$pre_trunc&1;
     if ($473) {
      label = 38;
      break;
     }
     $474 = $__ndptr;
     $475 = $474;
     $476 = ($475);
     $477 = HEAP32[$476>>2]|0;
     $__ndptr = $477;
    }
    if ((label|0) == 36) {
     $472 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$0 = tempRet0;
     ___clang_call_terminate($472);
     // unreachable;
    }
    else if ((label|0) == 38) {
     $683 = $__ndptr;
     $139 = $156;
     $140 = $683;
     $684 = $139;
     $685 = $140;
     $137 = $684;
     $138 = $685;
     $686 = $137;
     $687 = ($686);
     $688 = $138;
     HEAP32[$687>>2] = $688;
     $146 = $agg$result;
     $147 = $156;
     $148 = $__inserted;
     $689 = $146;
     $690 = $148;
     $691 = $147;
     $143 = $689;
     $144 = $691;
     $145 = $690;
     $692 = $143;
     $693 = ($692);
     $694 = $144;
     $142 = $694;
     $695 = $142;
     $696 = $693;
     $697 = $695;
     ;HEAP32[$696+0>>2]=HEAP32[$697+0>>2]|0;
     $698 = (($692) + 4|0);
     $699 = $145;
     $141 = $699;
     $700 = $141;
     $701 = HEAP8[$700]|0;
     $702 = $701&1;
     $703 = $702&1;
     HEAP8[$698] = $703;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 41) {
     break;
    }
   }
  } while(0);
 }
 $75 = $157;
 $478 = $75;
 $479 = (($478) + 12|0);
 $74 = $479;
 $480 = $74;
 $481 = $480;
 $73 = $481;
 $482 = $73;
 $483 = ($482);
 $484 = HEAP32[$483>>2]|0;
 $485 = (($484) + 1)|0;
 $486 = (+($485>>>0));
 $487 = $__bc;
 $488 = (+($487>>>0));
 $78 = $157;
 $489 = $78;
 $490 = (($489) + 16|0);
 $77 = $490;
 $491 = $77;
 $492 = $491;
 $76 = $492;
 $493 = $76;
 $494 = ($493);
 $495 = +HEAPF32[$494>>2];
 $496 = $488 * $495;
 $497 = $486 > $496;
 if ($497) {
  label = 45;
 } else {
  $498 = $__bc;
  $499 = ($498|0)==(0);
  if ($499) {
   label = 45;
  }
 }
 if ((label|0) == 45) {
  $500 = $__bc;
  $501 = $500<<1;
  $502 = $__bc;
  $79 = $502;
  $503 = $79;
  $504 = ($503>>>0)>(2);
  if ($504) {
   $505 = $79;
   $506 = $79;
   $507 = (($506) - 1)|0;
   $508 = $505 & $507;
   $509 = ($508|0)!=(0);
   $510 = $509 ^ 1;
   $511 = $510;
  } else {
   $511 = 0;
  }
  $512 = $511 ^ 1;
  $513 = $512&1;
  $514 = (($501) + ($513))|0;
  HEAP32[$154>>2] = $514;
  $82 = $157;
  $515 = $82;
  $516 = (($515) + 12|0);
  $81 = $516;
  $517 = $81;
  $518 = $517;
  $80 = $518;
  $519 = $80;
  $520 = ($519);
  $521 = HEAP32[$520>>2]|0;
  $522 = (($521) + 1)|0;
  $523 = (+($522>>>0));
  $85 = $157;
  $524 = $85;
  $525 = (($524) + 16|0);
  $84 = $525;
  $526 = $84;
  $527 = $526;
  $83 = $527;
  $528 = $83;
  $529 = ($528);
  $530 = +HEAPF32[$529>>2];
  $531 = $523 / $530;
  $88 = $531;
  $532 = $88;
  $533 = (+Math_ceil((+$532)));
  $534 = (~~(($533))>>>0);
  HEAP32[$155>>2] = $534;
  $95 = $154;
  $96 = $155;
  $535 = $95;
  $536 = $96;
  $tmp$i = $94;
  $tmp1$i = $97;
  ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
  $92 = $535;
  $93 = $536;
  $537 = $92;
  $538 = $93;
  $89 = $94;
  $90 = $537;
  $91 = $538;
  $539 = $90;
  $540 = HEAP32[$539>>2]|0;
  $541 = $91;
  $542 = HEAP32[$541>>2]|0;
  $543 = ($540>>>0)<($542>>>0);
  if ($543) {
   $544 = $93;
   $546 = $544;
  } else {
   $545 = $92;
   $546 = $545;
  }
  $547 = HEAP32[$546>>2]|0;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEj($157,$547);
  $113 = $157;
  $548 = $113;
  $549 = ($548);
  $112 = $549;
  $550 = $112;
  $551 = ($550);
  $111 = $551;
  $552 = $111;
  $553 = $552;
  $110 = $553;
  $554 = $110;
  $555 = (($554) + 4|0);
  $109 = $555;
  $556 = $109;
  $557 = ($556);
  $108 = $557;
  $558 = $108;
  $559 = $558;
  $107 = $559;
  $560 = $107;
  $561 = ($560);
  $562 = HEAP32[$561>>2]|0;
  $__bc = $562;
  $563 = $153;
  $564 = (($563) + 4|0);
  $565 = HEAP32[$564>>2]|0;
  $566 = $__bc;
  $114 = $565;
  $115 = $566;
  $567 = $115;
  $568 = $115;
  $569 = (($568) - 1)|0;
  $570 = $567 & $569;
  $571 = ($570|0)!=(0);
  if ($571) {
   $576 = $114;
   $577 = $115;
   $578 = (($576>>>0) % ($577>>>0))&-1;
   $579 = $578;
  } else {
   $572 = $114;
   $573 = $115;
   $574 = (($573) - 1)|0;
   $575 = $572 & $574;
   $579 = $575;
  }
  $__chash = $579;
 }
 $580 = ($157);
 $581 = $__chash;
 $118 = $580;
 $119 = $581;
 $582 = $118;
 $583 = $119;
 $584 = ($582);
 $117 = $584;
 $585 = $117;
 $586 = $585;
 $116 = $586;
 $587 = $116;
 $588 = ($587);
 $589 = HEAP32[$588>>2]|0;
 $590 = (($589) + ($583<<2)|0);
 $591 = HEAP32[$590>>2]|0;
 $__pn = $591;
 $592 = $__pn;
 $593 = ($592|0)==(0|0);
 if ($593) {
  $594 = (($157) + 8|0);
  $121 = $594;
  $595 = $121;
  $596 = $595;
  $120 = $596;
  $597 = $120;
  $598 = ($597);
  $123 = $598;
  $599 = $123;
  $122 = $599;
  $600 = $122;
  $601 = $600;
  $602 = $601;
  $603 = $602;
  $__pn = $603;
  $604 = $__pn;
  $605 = $604;
  $606 = ($605);
  $607 = HEAP32[$606>>2]|0;
  $608 = $153;
  $609 = $608;
  $610 = ($609);
  HEAP32[$610>>2] = $607;
  $611 = $153;
  $612 = $__pn;
  $613 = $612;
  $614 = ($613);
  HEAP32[$614>>2] = $611;
  $615 = $__pn;
  $616 = ($157);
  $617 = $__chash;
  $126 = $616;
  $127 = $617;
  $618 = $126;
  $619 = $127;
  $620 = ($618);
  $125 = $620;
  $621 = $125;
  $622 = $621;
  $124 = $622;
  $623 = $124;
  $624 = ($623);
  $625 = HEAP32[$624>>2]|0;
  $626 = (($625) + ($619<<2)|0);
  HEAP32[$626>>2] = $615;
  $627 = $153;
  $628 = $627;
  $629 = ($628);
  $630 = HEAP32[$629>>2]|0;
  $631 = ($630|0)!=(0|0);
  if ($631) {
   $632 = $153;
   $633 = ($157);
   $634 = $153;
   $635 = $634;
   $636 = ($635);
   $637 = HEAP32[$636>>2]|0;
   $638 = (($637) + 4|0);
   $639 = HEAP32[$638>>2]|0;
   $640 = $__bc;
   $128 = $639;
   $129 = $640;
   $641 = $129;
   $642 = $129;
   $643 = (($642) - 1)|0;
   $644 = $641 & $643;
   $645 = ($644|0)!=(0);
   if ($645) {
    $650 = $128;
    $651 = $129;
    $652 = (($650>>>0) % ($651>>>0))&-1;
    $653 = $652;
   } else {
    $646 = $128;
    $647 = $129;
    $648 = (($647) - 1)|0;
    $649 = $646 & $648;
    $653 = $649;
   }
   $132 = $633;
   $133 = $653;
   $654 = $132;
   $655 = $133;
   $656 = ($654);
   $131 = $656;
   $657 = $131;
   $658 = $657;
   $130 = $658;
   $659 = $130;
   $660 = ($659);
   $661 = HEAP32[$660>>2]|0;
   $662 = (($661) + ($655<<2)|0);
   HEAP32[$662>>2] = $632;
  }
 } else {
  $663 = $__pn;
  $664 = $663;
  $665 = ($664);
  $666 = HEAP32[$665>>2]|0;
  $667 = $153;
  $668 = $667;
  $669 = ($668);
  HEAP32[$669>>2] = $666;
  $670 = $153;
  $671 = $__pn;
  $672 = $671;
  $673 = ($672);
  HEAP32[$673>>2] = $670;
 }
 $674 = $153;
 $__ndptr = $674;
 $136 = $157;
 $675 = $136;
 $676 = (($675) + 12|0);
 $135 = $676;
 $677 = $135;
 $678 = $677;
 $134 = $678;
 $679 = $134;
 $680 = ($679);
 $681 = HEAP32[$680>>2]|0;
 $682 = (($681) + 1)|0;
 HEAP32[$680>>2] = $682;
 HEAP8[$__inserted] = 1;
 $683 = $__ndptr;
 $139 = $156;
 $140 = $683;
 $684 = $139;
 $685 = $140;
 $137 = $684;
 $138 = $685;
 $686 = $137;
 $687 = ($686);
 $688 = $138;
 HEAP32[$687>>2] = $688;
 $146 = $agg$result;
 $147 = $156;
 $148 = $__inserted;
 $689 = $146;
 $690 = $148;
 $691 = $147;
 $143 = $689;
 $144 = $691;
 $145 = $690;
 $692 = $143;
 $693 = ($692);
 $694 = $144;
 $142 = $694;
 $695 = $142;
 $696 = $693;
 $697 = $695;
 ;HEAP32[$696+0>>2]=HEAP32[$697+0>>2]|0;
 $698 = (($692) + 4|0);
 $699 = $145;
 $141 = $699;
 $700 = $141;
 $701 = HEAP8[$700]|0;
 $702 = $701&1;
 $703 = $702&1;
 HEAP8[$698] = $703;
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0;
 var $99 = 0, $__bc = 0, $tmp$i = 0, $tmp1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 296|0;
 $22 = sp + 168|0;
 $25 = sp + 192|0;
 $35 = sp + 272|0;
 $36 = sp + 288|0;
 $34 = $this;
 HEAP32[$35>>2] = $__n;
 $37 = $34;
 $38 = HEAP32[$35>>2]|0;
 $39 = ($38|0)==(1);
 if ($39) {
  HEAP32[$35>>2] = 2;
 } else {
  $40 = HEAP32[$35>>2]|0;
  $41 = HEAP32[$35>>2]|0;
  $42 = (($41) - 1)|0;
  $43 = $40 & $42;
  $44 = ($43|0)!=(0);
  if ($44) {
   $45 = HEAP32[$35>>2]|0;
   $46 = (__ZNSt3__112__next_primeEj($45)|0);
   HEAP32[$35>>2] = $46;
  }
 }
 $33 = $37;
 $47 = $33;
 $48 = ($47);
 $32 = $48;
 $49 = $32;
 $50 = ($49);
 $31 = $50;
 $51 = $31;
 $52 = $51;
 $30 = $52;
 $53 = $30;
 $54 = (($53) + 4|0);
 $29 = $54;
 $55 = $29;
 $56 = ($55);
 $28 = $56;
 $57 = $28;
 $58 = $57;
 $27 = $58;
 $59 = $27;
 $60 = ($59);
 $61 = HEAP32[$60>>2]|0;
 $__bc = $61;
 $62 = HEAP32[$35>>2]|0;
 $63 = $__bc;
 $64 = ($62>>>0)>($63>>>0);
 if ($64) {
  $65 = HEAP32[$35>>2]|0;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($37,$65);
  STACKTOP = sp;return;
 }
 $66 = HEAP32[$35>>2]|0;
 $67 = $__bc;
 $68 = ($66>>>0)<($67>>>0);
 if ($68) {
  $69 = $__bc;
  $26 = $69;
  $70 = $26;
  $71 = ($70>>>0)>(2);
  if ($71) {
   $72 = $26;
   $73 = $26;
   $74 = (($73) - 1)|0;
   $75 = $72 & $74;
   $76 = ($75|0)!=(0);
   $77 = $76 ^ 1;
   $78 = $77;
  } else {
   $78 = 0;
  }
  if ($78) {
   $15 = $37;
   $79 = $15;
   $80 = (($79) + 12|0);
   $14 = $80;
   $81 = $14;
   $82 = $81;
   $13 = $82;
   $83 = $13;
   $84 = ($83);
   $85 = HEAP32[$84>>2]|0;
   $86 = (+($85>>>0));
   $3 = $37;
   $87 = $3;
   $88 = (($87) + 16|0);
   $2 = $88;
   $89 = $2;
   $90 = $89;
   $1 = $90;
   $91 = $1;
   $92 = ($91);
   $93 = +HEAPF32[$92>>2];
   $94 = $86 / $93;
   $4 = $94;
   $95 = $4;
   $96 = (+Math_ceil((+$95)));
   $97 = (~~(($96))>>>0);
   $6 = $97;
   $98 = $6;
   $99 = (($98) - 1)|0;
   $5 = $99;
   $100 = $5;
   $101 = (_llvm_ctlz_i32(($100|0))|0);
   $102 = (32 - ($101))|0;
   $103 = 1 << $102;
   $124 = $103;
  } else {
   $9 = $37;
   $104 = $9;
   $105 = (($104) + 12|0);
   $8 = $105;
   $106 = $8;
   $107 = $106;
   $7 = $107;
   $108 = $7;
   $109 = ($108);
   $110 = HEAP32[$109>>2]|0;
   $111 = (+($110>>>0));
   $12 = $37;
   $112 = $12;
   $113 = (($112) + 16|0);
   $11 = $113;
   $114 = $11;
   $115 = $114;
   $10 = $115;
   $116 = $10;
   $117 = ($116);
   $118 = +HEAPF32[$117>>2];
   $119 = $111 / $118;
   $16 = $119;
   $120 = $16;
   $121 = (+Math_ceil((+$120)));
   $122 = (~~(($121))>>>0);
   $123 = (__ZNSt3__112__next_primeEj($122)|0);
   $124 = $123;
  }
  HEAP32[$36>>2] = $124;
  $23 = $35;
  $24 = $36;
  $125 = $23;
  $126 = $24;
  $tmp$i = $22;
  $tmp1$i = $25;
  ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
  $20 = $125;
  $21 = $126;
  $127 = $20;
  $128 = $21;
  $17 = $22;
  $18 = $127;
  $19 = $128;
  $129 = $18;
  $130 = HEAP32[$129>>2]|0;
  $131 = $19;
  $132 = HEAP32[$131>>2]|0;
  $133 = ($130>>>0)<($132>>>0);
  if ($133) {
   $134 = $21;
   $136 = $134;
  } else {
   $135 = $20;
   $136 = $135;
  }
  $137 = HEAP32[$136>>2]|0;
  HEAP32[$35>>2] = $137;
  $138 = HEAP32[$35>>2]|0;
  $139 = $__bc;
  $140 = ($138>>>0)<($139>>>0);
  if ($140) {
   $141 = HEAP32[$35>>2]|0;
   __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($37,$141);
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($this,$__nbc) {
 $this = $this|0;
 $__nbc = $__nbc|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__chash = 0, $__cp = 0, $__i = 0, $__lhs_sz$i$i$i = 0, $__lp$i$i$i = 0, $__np = 0, $__npa = 0, $__phash = 0, $__pp = 0, $__rp$i$i$i = 0, $__tmp$i = 0, label = 0;
 var sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1200|0;
 $138 = $this;
 $139 = $__nbc;
 $140 = $138;
 $141 = ($140);
 $137 = $141;
 $142 = $137;
 $143 = ($142);
 $136 = $143;
 $144 = $136;
 $145 = $144;
 $135 = $145;
 $146 = $135;
 $147 = (($146) + 4|0);
 $63 = $147;
 $148 = $63;
 $149 = ($148);
 $62 = $149;
 $150 = $62;
 $151 = $150;
 $61 = $151;
 $152 = $61;
 $153 = $152;
 $__npa = $153;
 $154 = ($140);
 $155 = $139;
 $156 = ($155>>>0)>(0);
 if ($156) {
  $157 = $__npa;
  $158 = $139;
  $59 = $157;
  $60 = $158;
  $159 = $59;
  $160 = $60;
  $56 = $159;
  $57 = $160;
  $58 = 0;
  $161 = $57;
  $162 = $161<<2;
  $163 = (__Znwj($162)|0);
  $164 = $163;
  $165 = $164;
 } else {
  $165 = 0;
 }
 $54 = $154;
 $55 = $165;
 $166 = $54;
 $167 = ($166);
 $53 = $167;
 $168 = $53;
 $169 = $168;
 $52 = $169;
 $170 = $52;
 $171 = ($170);
 $172 = HEAP32[$171>>2]|0;
 $__tmp$i = $172;
 $173 = $55;
 $174 = ($166);
 $37 = $174;
 $175 = $37;
 $176 = $175;
 $36 = $176;
 $177 = $36;
 $178 = ($177);
 HEAP32[$178>>2] = $173;
 $179 = $__tmp$i;
 $180 = ($179|0)!=(0|0);
 if ($180) {
  $181 = ($166);
  $35 = $181;
  $182 = $35;
  $183 = $182;
  $34 = $183;
  $184 = $34;
  $185 = (($184) + 4|0);
  $186 = $__tmp$i;
  $50 = $185;
  $51 = $186;
  $187 = $50;
  $49 = $187;
  $188 = $49;
  $189 = ($188);
  $48 = $189;
  $190 = $48;
  $191 = $190;
  $47 = $191;
  $192 = $47;
  $193 = $192;
  $194 = $51;
  $40 = $187;
  $195 = $40;
  $196 = ($195);
  $39 = $196;
  $197 = $39;
  $198 = $197;
  $38 = $198;
  $199 = $38;
  $200 = ($199);
  $201 = HEAP32[$200>>2]|0;
  $44 = $193;
  $45 = $194;
  $46 = $201;
  $202 = $44;
  $203 = $45;
  $204 = $46;
  $41 = $202;
  $42 = $203;
  $43 = $204;
  $205 = $42;
  $206 = $205;
  __ZdlPv($206);
 }
 $207 = $139;
 $208 = ($140);
 $33 = $208;
 $209 = $33;
 $210 = ($209);
 $32 = $210;
 $211 = $32;
 $212 = $211;
 $31 = $212;
 $213 = $31;
 $214 = (($213) + 4|0);
 $3 = $214;
 $215 = $3;
 $216 = ($215);
 $2 = $216;
 $217 = $2;
 $218 = $217;
 $1 = $218;
 $219 = $1;
 $220 = ($219);
 HEAP32[$220>>2] = $207;
 $221 = $139;
 $222 = ($221>>>0)>(0);
 if (!($222)) {
  STACKTOP = sp;return;
 }
 $__i = 0;
 while(1) {
  $223 = $__i;
  $224 = $139;
  $225 = ($223>>>0)<($224>>>0);
  if (!($225)) {
   break;
  }
  $226 = ($140);
  $227 = $__i;
  $6 = $226;
  $7 = $227;
  $228 = $6;
  $229 = $7;
  $230 = ($228);
  $5 = $230;
  $231 = $5;
  $232 = $231;
  $4 = $232;
  $233 = $4;
  $234 = ($233);
  $235 = HEAP32[$234>>2]|0;
  $236 = (($235) + ($229<<2)|0);
  HEAP32[$236>>2] = 0;
  $237 = $__i;
  $238 = (($237) + 1)|0;
  $__i = $238;
 }
 $239 = (($140) + 8|0);
 $9 = $239;
 $240 = $9;
 $241 = $240;
 $8 = $241;
 $242 = $8;
 $243 = ($242);
 $11 = $243;
 $244 = $11;
 $10 = $244;
 $245 = $10;
 $246 = $245;
 $247 = $246;
 $248 = $247;
 $__pp = $248;
 $249 = $__pp;
 $250 = $249;
 $251 = ($250);
 $252 = HEAP32[$251>>2]|0;
 $__cp = $252;
 $253 = $__cp;
 $254 = ($253|0)!=(0|0);
 do {
  if ($254) {
   $255 = $__cp;
   $256 = (($255) + 4|0);
   $257 = HEAP32[$256>>2]|0;
   $258 = $139;
   $12 = $257;
   $13 = $258;
   $259 = $13;
   $260 = $13;
   $261 = (($260) - 1)|0;
   $262 = $259 & $261;
   $263 = ($262|0)!=(0);
   if ($263) {
    $268 = $12;
    $269 = $13;
    $270 = (($268>>>0) % ($269>>>0))&-1;
    $271 = $270;
   } else {
    $264 = $12;
    $265 = $13;
    $266 = (($265) - 1)|0;
    $267 = $264 & $266;
    $271 = $267;
   }
   $__chash = $271;
   $272 = $__pp;
   $273 = ($140);
   $274 = $__chash;
   $16 = $273;
   $17 = $274;
   $275 = $16;
   $276 = $17;
   $277 = ($275);
   $15 = $277;
   $278 = $15;
   $279 = $278;
   $14 = $279;
   $280 = $14;
   $281 = ($280);
   $282 = HEAP32[$281>>2]|0;
   $283 = (($282) + ($276<<2)|0);
   HEAP32[$283>>2] = $272;
   $284 = $__chash;
   $__phash = $284;
   $285 = $__cp;
   $__pp = $285;
   $286 = $__cp;
   $287 = $286;
   $288 = ($287);
   $289 = HEAP32[$288>>2]|0;
   $__cp = $289;
   L22: while(1) {
    $290 = $__cp;
    $291 = ($290|0)!=(0|0);
    if (!($291)) {
     label = 58;
     break;
    }
    $292 = $__cp;
    $293 = (($292) + 4|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = $139;
    $18 = $294;
    $19 = $295;
    $296 = $19;
    $297 = $19;
    $298 = (($297) - 1)|0;
    $299 = $296 & $298;
    $300 = ($299|0)!=(0);
    if ($300) {
     $305 = $18;
     $306 = $19;
     $307 = (($305>>>0) % ($306>>>0))&-1;
     $308 = $307;
    } else {
     $301 = $18;
     $302 = $19;
     $303 = (($302) - 1)|0;
     $304 = $301 & $303;
     $308 = $304;
    }
    $__chash = $308;
    $309 = $__chash;
    $310 = $__phash;
    $311 = ($309|0)==($310|0);
    if ($311) {
     $312 = $__cp;
     $__pp = $312;
    } else {
     $313 = ($140);
     $314 = $__chash;
     $22 = $313;
     $23 = $314;
     $315 = $22;
     $316 = $23;
     $317 = ($315);
     $21 = $317;
     $318 = $21;
     $319 = $318;
     $20 = $319;
     $320 = $20;
     $321 = ($320);
     $322 = HEAP32[$321>>2]|0;
     $323 = (($322) + ($316<<2)|0);
     $324 = HEAP32[$323>>2]|0;
     $325 = ($324|0)==(0|0);
     if ($325) {
      $326 = $__pp;
      $327 = ($140);
      $328 = $__chash;
      $26 = $327;
      $27 = $328;
      $329 = $26;
      $330 = $27;
      $331 = ($329);
      $25 = $331;
      $332 = $25;
      $333 = $332;
      $24 = $333;
      $334 = $24;
      $335 = ($334);
      $336 = HEAP32[$335>>2]|0;
      $337 = (($336) + ($330<<2)|0);
      HEAP32[$337>>2] = $326;
      $338 = $__cp;
      $__pp = $338;
      $339 = $__chash;
      $__phash = $339;
     } else {
      $340 = $__cp;
      $__np = $340;
      while(1) {
       $341 = $__np;
       $342 = $341;
       $343 = ($342);
       $344 = HEAP32[$343>>2]|0;
       $345 = ($344|0)!=(0|0);
       if ($345) {
        $30 = $140;
        $346 = $30;
        $347 = (($346) + 16|0);
        $29 = $347;
        $348 = $29;
        $349 = $348;
        $28 = $349;
        $350 = $28;
        $351 = $350;
        $352 = $__cp;
        $353 = (($352) + 8|0);
        $354 = $__np;
        $355 = $354;
        $356 = ($355);
        $357 = HEAP32[$356>>2]|0;
        $358 = (($357) + 8|0);
        $124 = $351;
        $125 = $353;
        $126 = $358;
        $359 = $124;
        $360 = $359;
        $361 = $125;
        $362 = $361;
        $363 = ($362);
        $364 = $126;
        $365 = $364;
        $366 = ($365);
        $121 = $360;
        $122 = $363;
        $123 = $366;
        $367 = $122;
        $368 = $123;
        $119 = $367;
        $120 = $368;
        $369 = $119;
        $117 = $369;
        $370 = $117;
        $116 = $370;
        $371 = $116;
        $372 = ($371);
        $115 = $372;
        $373 = $115;
        $374 = $373;
        $114 = $374;
        $375 = $114;
        $376 = ($375);
        $377 = ($376);
        $378 = $377;
        $379 = ($378);
        $380 = $379;
        $381 = HEAP8[$380]|0;
        $382 = $381&255;
        $383 = $382 & 1;
        $384 = ($383|0)!=(0);
        if ($384) {
         $110 = $370;
         $385 = $110;
         $386 = ($385);
         $109 = $386;
         $387 = $109;
         $388 = $387;
         $108 = $388;
         $389 = $108;
         $390 = ($389);
         $391 = ($390);
         $392 = $391;
         $393 = (($392) + 4|0);
         $394 = HEAP32[$393>>2]|0;
         $408 = $394;
        } else {
         $113 = $370;
         $395 = $113;
         $396 = ($395);
         $112 = $396;
         $397 = $112;
         $398 = $397;
         $111 = $398;
         $399 = $111;
         $400 = ($399);
         $401 = ($400);
         $402 = $401;
         $403 = ($402);
         $404 = $403;
         $405 = HEAP8[$404]|0;
         $406 = $405&255;
         $407 = $406 >> 1;
         $408 = $407;
        }
        $__lhs_sz$i$i$i = $408;
        $409 = $__lhs_sz$i$i$i;
        $410 = $120;
        $107 = $410;
        $411 = $107;
        $106 = $411;
        $412 = $106;
        $413 = ($412);
        $105 = $413;
        $414 = $105;
        $415 = $414;
        $104 = $415;
        $416 = $104;
        $417 = ($416);
        $418 = ($417);
        $419 = $418;
        $420 = ($419);
        $421 = $420;
        $422 = HEAP8[$421]|0;
        $423 = $422&255;
        $424 = $423 & 1;
        $425 = ($424|0)!=(0);
        if ($425) {
         $100 = $411;
         $426 = $100;
         $427 = ($426);
         $99 = $427;
         $428 = $99;
         $429 = $428;
         $98 = $429;
         $430 = $98;
         $431 = ($430);
         $432 = ($431);
         $433 = $432;
         $434 = (($433) + 4|0);
         $435 = HEAP32[$434>>2]|0;
         $449 = $435;
        } else {
         $103 = $411;
         $436 = $103;
         $437 = ($436);
         $102 = $437;
         $438 = $102;
         $439 = $438;
         $101 = $439;
         $440 = $101;
         $441 = ($440);
         $442 = ($441);
         $443 = $442;
         $444 = ($443);
         $445 = $444;
         $446 = HEAP8[$445]|0;
         $447 = $446&255;
         $448 = $447 >> 1;
         $449 = $448;
        }
        $450 = ($409|0)!=($449|0);
        do {
         if ($450) {
          $$expand_i1_val = 0;
          $118 = $$expand_i1_val;
         } else {
          $451 = $119;
          $94 = $451;
          $452 = $94;
          $93 = $452;
          $453 = $93;
          $92 = $453;
          $454 = $92;
          $455 = ($454);
          $91 = $455;
          $456 = $91;
          $457 = $456;
          $90 = $457;
          $458 = $90;
          $459 = ($458);
          $460 = ($459);
          $461 = $460;
          $462 = ($461);
          $463 = $462;
          $464 = HEAP8[$463]|0;
          $465 = $464&255;
          $466 = $465 & 1;
          $467 = ($466|0)!=(0);
          if ($467) {
           $84 = $453;
           $468 = $84;
           $469 = ($468);
           $83 = $469;
           $470 = $83;
           $471 = $470;
           $82 = $471;
           $472 = $82;
           $473 = ($472);
           $474 = ($473);
           $475 = $474;
           $476 = (($475) + 8|0);
           $477 = HEAP32[$476>>2]|0;
           $490 = $477;
          } else {
           $89 = $453;
           $478 = $89;
           $479 = ($478);
           $88 = $479;
           $480 = $88;
           $481 = $480;
           $87 = $481;
           $482 = $87;
           $483 = ($482);
           $484 = ($483);
           $485 = $484;
           $486 = (($485) + 1|0);
           $487 = ($486);
           $86 = $487;
           $488 = $86;
           $85 = $488;
           $489 = $85;
           $490 = $489;
          }
          $81 = $490;
          $491 = $81;
          $__lp$i$i$i = $491;
          $492 = $120;
          $77 = $492;
          $493 = $77;
          $76 = $493;
          $494 = $76;
          $75 = $494;
          $495 = $75;
          $496 = ($495);
          $74 = $496;
          $497 = $74;
          $498 = $497;
          $73 = $498;
          $499 = $73;
          $500 = ($499);
          $501 = ($500);
          $502 = $501;
          $503 = ($502);
          $504 = $503;
          $505 = HEAP8[$504]|0;
          $506 = $505&255;
          $507 = $506 & 1;
          $508 = ($507|0)!=(0);
          if ($508) {
           $67 = $494;
           $509 = $67;
           $510 = ($509);
           $66 = $510;
           $511 = $66;
           $512 = $511;
           $65 = $512;
           $513 = $65;
           $514 = ($513);
           $515 = ($514);
           $516 = $515;
           $517 = (($516) + 8|0);
           $518 = HEAP32[$517>>2]|0;
           $531 = $518;
          } else {
           $72 = $494;
           $519 = $72;
           $520 = ($519);
           $71 = $520;
           $521 = $71;
           $522 = $521;
           $70 = $522;
           $523 = $70;
           $524 = ($523);
           $525 = ($524);
           $526 = $525;
           $527 = (($526) + 1|0);
           $528 = ($527);
           $69 = $528;
           $529 = $69;
           $68 = $529;
           $530 = $68;
           $531 = $530;
          }
          $64 = $531;
          $532 = $64;
          $__rp$i$i$i = $532;
          $533 = $119;
          $80 = $533;
          $534 = $80;
          $535 = ($534);
          $79 = $535;
          $536 = $79;
          $537 = $536;
          $78 = $537;
          $538 = $78;
          $539 = ($538);
          $540 = ($539);
          $541 = $540;
          $542 = ($541);
          $543 = $542;
          $544 = HEAP8[$543]|0;
          $545 = $544&255;
          $546 = $545 & 1;
          $547 = ($546|0)!=(0);
          if ($547) {
           $548 = $__lp$i$i$i;
           $549 = $__rp$i$i$i;
           $550 = $__lhs_sz$i$i$i;
           $95 = $548;
           $96 = $549;
           $97 = $550;
           $551 = $95;
           $552 = $96;
           $553 = $97;
           __THREW__ = 0;
           $554 = (invoke_iiii(25,($551|0),($552|0),($553|0))|0);
           $555 = __THREW__; __THREW__ = 0;
           $556 = $555&1;
           if ($556) {
            label = 49;
            break L22;
           }
           $557 = ($554|0)==(0);
           $$expand_i1_val2 = $557&1;
           $118 = $$expand_i1_val2;
           break;
          }
          while(1) {
           $558 = $__lhs_sz$i$i$i;
           $559 = ($558|0)!=(0);
           if (!($559)) {
            label = 48;
            break;
           }
           $560 = $__lp$i$i$i;
           $561 = HEAP8[$560]|0;
           $562 = $561 << 24 >> 24;
           $563 = $__rp$i$i$i;
           $564 = HEAP8[$563]|0;
           $565 = $564 << 24 >> 24;
           $566 = ($562|0)!=($565|0);
           if ($566) {
            label = 46;
            break;
           }
           $567 = $__lhs_sz$i$i$i;
           $568 = (($567) + -1)|0;
           $__lhs_sz$i$i$i = $568;
           $569 = $__lp$i$i$i;
           $570 = (($569) + 1|0);
           $__lp$i$i$i = $570;
           $571 = $__rp$i$i$i;
           $572 = (($571) + 1|0);
           $__rp$i$i$i = $572;
          }
          if ((label|0) == 46) {
           label = 0;
           $$expand_i1_val4 = 0;
           $118 = $$expand_i1_val4;
           break;
          }
          else if ((label|0) == 48) {
           label = 0;
           $$expand_i1_val6 = 1;
           $118 = $$expand_i1_val6;
           break;
          }
         }
        } while(0);
        $$pre_trunc = $118;
        $574 = $$pre_trunc&1;
        $575 = $574;
       } else {
        $575 = 0;
       }
       if (!($575)) {
        break;
       }
       $576 = $__np;
       $577 = $576;
       $578 = ($577);
       $579 = HEAP32[$578>>2]|0;
       $__np = $579;
      }
      $580 = $__np;
      $581 = $580;
      $582 = ($581);
      $583 = HEAP32[$582>>2]|0;
      $584 = $__pp;
      $585 = $584;
      $586 = ($585);
      HEAP32[$586>>2] = $583;
      $587 = ($140);
      $588 = $__chash;
      $129 = $587;
      $130 = $588;
      $589 = $129;
      $590 = $130;
      $591 = ($589);
      $128 = $591;
      $592 = $128;
      $593 = $592;
      $127 = $593;
      $594 = $127;
      $595 = ($594);
      $596 = HEAP32[$595>>2]|0;
      $597 = (($596) + ($590<<2)|0);
      $598 = HEAP32[$597>>2]|0;
      $599 = $598;
      $600 = ($599);
      $601 = HEAP32[$600>>2]|0;
      $602 = $__np;
      $603 = $602;
      $604 = ($603);
      HEAP32[$604>>2] = $601;
      $605 = $__cp;
      $606 = ($140);
      $607 = $__chash;
      $133 = $606;
      $134 = $607;
      $608 = $133;
      $609 = $134;
      $610 = ($608);
      $132 = $610;
      $611 = $132;
      $612 = $611;
      $131 = $612;
      $613 = $131;
      $614 = ($613);
      $615 = HEAP32[$614>>2]|0;
      $616 = (($615) + ($609<<2)|0);
      $617 = HEAP32[$616>>2]|0;
      $618 = $617;
      $619 = ($618);
      HEAP32[$619>>2] = $605;
     }
    }
    $620 = $__pp;
    $621 = $620;
    $622 = ($621);
    $623 = HEAP32[$622>>2]|0;
    $__cp = $623;
   }
   if ((label|0) == 49) {
    $573 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    u$0 = tempRet0;
    ___clang_call_terminate($573);
    // unreachable;
   }
   else if ((label|0) == 58) {
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($this,$__val) {
 $this = $this|0;
 $__val = $__val|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 344|0;
 $13 = sp + 96|0;
 $42 = $this;
 $43 = $__val;
 $44 = $43;
 $41 = $44;
 $45 = $41;
 $40 = $45;
 $46 = $40;
 $39 = $46;
 $47 = $39;
 $48 = ($47);
 $38 = $48;
 $49 = $38;
 $50 = $49;
 $37 = $50;
 $51 = $37;
 $52 = ($51);
 $53 = ($52);
 $54 = $53;
 $55 = ($54);
 $56 = $55;
 $57 = HEAP8[$56]|0;
 $58 = $57&255;
 $59 = $58 & 1;
 $60 = ($59|0)!=(0);
 if ($60) {
  $31 = $46;
  $61 = $31;
  $62 = ($61);
  $30 = $62;
  $63 = $30;
  $64 = $63;
  $29 = $64;
  $65 = $29;
  $66 = ($65);
  $67 = ($66);
  $68 = $67;
  $69 = (($68) + 8|0);
  $70 = HEAP32[$69>>2]|0;
  $83 = $70;
 } else {
  $36 = $46;
  $71 = $36;
  $72 = ($71);
  $35 = $72;
  $73 = $35;
  $74 = $73;
  $34 = $74;
  $75 = $34;
  $76 = ($75);
  $77 = ($76);
  $78 = $77;
  $79 = (($78) + 1|0);
  $80 = ($79);
  $33 = $80;
  $81 = $33;
  $32 = $81;
  $82 = $32;
  $83 = $82;
 }
 $28 = $83;
 $84 = $28;
 $85 = $43;
 $27 = $85;
 $86 = $27;
 $26 = $86;
 $87 = $26;
 $25 = $87;
 $88 = $25;
 $89 = ($88);
 $24 = $89;
 $90 = $24;
 $91 = $90;
 $23 = $91;
 $92 = $23;
 $93 = ($92);
 $94 = ($93);
 $95 = $94;
 $96 = ($95);
 $97 = $96;
 $98 = HEAP8[$97]|0;
 $99 = $98&255;
 $100 = $99 & 1;
 $101 = ($100|0)!=(0);
 if ($101) {
  $17 = $87;
  $102 = $17;
  $103 = ($102);
  $16 = $103;
  $104 = $16;
  $105 = $104;
  $15 = $105;
  $106 = $15;
  $107 = ($106);
  $108 = ($107);
  $109 = $108;
  $110 = (($109) + 8|0);
  $111 = HEAP32[$110>>2]|0;
  $124 = $111;
 } else {
  $22 = $87;
  $112 = $22;
  $113 = ($112);
  $21 = $113;
  $114 = $21;
  $115 = $114;
  $20 = $115;
  $116 = $20;
  $117 = ($116);
  $118 = ($117);
  $119 = $118;
  $120 = (($119) + 1|0);
  $121 = ($120);
  $19 = $121;
  $122 = $19;
  $18 = $122;
  $123 = $18;
  $124 = $123;
 }
 $14 = $124;
 $125 = $14;
 $126 = $43;
 $10 = $126;
 $127 = $10;
 $9 = $127;
 $128 = $9;
 $129 = ($128);
 $8 = $129;
 $130 = $8;
 $131 = $130;
 $7 = $131;
 $132 = $7;
 $133 = ($132);
 $134 = ($133);
 $135 = $134;
 $136 = ($135);
 $137 = $136;
 $138 = HEAP8[$137]|0;
 $139 = $138&255;
 $140 = $139 & 1;
 $141 = ($140|0)!=(0);
 if ($141) {
  $3 = $127;
  $142 = $3;
  $143 = ($142);
  $2 = $143;
  $144 = $2;
  $145 = $144;
  $1 = $145;
  $146 = $1;
  $147 = ($146);
  $148 = ($147);
  $149 = $148;
  $150 = (($149) + 4|0);
  $151 = HEAP32[$150>>2]|0;
  $165 = $151;
 } else {
  $6 = $127;
  $152 = $6;
  $153 = ($152);
  $5 = $153;
  $154 = $5;
  $155 = $154;
  $4 = $155;
  $156 = $4;
  $157 = ($156);
  $158 = ($157);
  $159 = $158;
  $160 = ($159);
  $161 = $160;
  $162 = HEAP8[$161]|0;
  $163 = $162&255;
  $164 = $163 >> 1;
  $165 = $164;
 }
 $166 = (($125) + ($165)|0);
 $11 = $84;
 $12 = $166;
 $167 = $11;
 $168 = $12;
 $169 = $11;
 $170 = $168;
 $171 = $169;
 $172 = (($170) - ($171))|0;
 __THREW__ = 0;
 $173 = (invoke_iiii(26,($13|0),($167|0),($172|0))|0);
 $174 = __THREW__; __THREW__ = 0;
 $175 = $174&1;
 if ($175) {
  $176 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($176);
  // unreachable;
 }
 STACKTOP = sp;return ($173|0);
}
function __ZNSt3__121__murmur2_or_cityhashIjLj32EEclEPKvj($this,$__key,$__len) {
 $this = $this|0;
 $__key = $__key|0;
 $__len = $__len|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__data = 0, $__h = 0, $__k = 0, $__m = 0, $__r = 0, $__r$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $__r$i = sp + 8|0;
 $2 = $this;
 $3 = $__key;
 $4 = $__len;
 $__m = 1540483477;
 $__r = 24;
 $5 = $4;
 $__h = $5;
 $6 = $3;
 $__data = $6;
 while(1) {
  $7 = $4;
  $8 = ($7>>>0)>=(4);
  if (!($8)) {
   break;
  }
  $9 = $__data;
  $1 = $9;
  $10 = $__r$i;
  $11 = $1;
  ;HEAP8[$10+0|0]=HEAP8[$11+0|0]|0;HEAP8[$10+1|0]=HEAP8[$11+1|0]|0;HEAP8[$10+2|0]=HEAP8[$11+2|0]|0;HEAP8[$10+3|0]=HEAP8[$11+3|0]|0;
  $12 = HEAP32[$__r$i>>2]|0;
  $__k = $12;
  $13 = $__k;
  $14 = Math_imul($13, 1540483477)|0;
  $__k = $14;
  $15 = $__k;
  $16 = $15 >>> 24;
  $17 = $__k;
  $18 = $17 ^ $16;
  $__k = $18;
  $19 = $__k;
  $20 = Math_imul($19, 1540483477)|0;
  $__k = $20;
  $21 = $__h;
  $22 = Math_imul($21, 1540483477)|0;
  $__h = $22;
  $23 = $__k;
  $24 = $__h;
  $25 = $24 ^ $23;
  $__h = $25;
  $26 = $__data;
  $27 = (($26) + 4|0);
  $__data = $27;
  $28 = $4;
  $29 = (($28) - 4)|0;
  $4 = $29;
 }
 $30 = $4;
 if ((($30|0) == 2)) {
  label = 7;
 } else if ((($30|0) == 3)) {
  $31 = $__data;
  $32 = (($31) + 2|0);
  $33 = HEAP8[$32]|0;
  $34 = $33&255;
  $35 = $34 << 16;
  $36 = $__h;
  $37 = $36 ^ $35;
  $__h = $37;
  label = 7;
 } else if (!((($30|0) == 1))) {
  $53 = $__h;
  $54 = $53 >>> 13;
  $55 = $__h;
  $56 = $55 ^ $54;
  $__h = $56;
  $57 = $__h;
  $58 = Math_imul($57, 1540483477)|0;
  $__h = $58;
  $59 = $__h;
  $60 = $59 >>> 15;
  $61 = $__h;
  $62 = $61 ^ $60;
  $__h = $62;
  $63 = $__h;
  STACKTOP = sp;return ($63|0);
 }
 if ((label|0) == 7) {
  $38 = $__data;
  $39 = (($38) + 1|0);
  $40 = HEAP8[$39]|0;
  $41 = $40&255;
  $42 = $41 << 8;
  $43 = $__h;
  $44 = $43 ^ $42;
  $__h = $44;
 }
 $45 = $__data;
 $46 = ($45);
 $47 = HEAP8[$46]|0;
 $48 = $47&255;
 $49 = $__h;
 $50 = $49 ^ $48;
 $__h = $50;
 $51 = $__h;
 $52 = Math_imul($51, 1540483477)|0;
 $__h = $52;
 $53 = $__h;
 $54 = $53 >>> 13;
 $55 = $__h;
 $56 = $55 ^ $54;
 $__h = $56;
 $57 = $__h;
 $58 = Math_imul($57, 1540483477)|0;
 $__h = $58;
 $59 = $__h;
 $60 = $59 >>> 15;
 $61 = $__h;
 $62 = $61 ^ $60;
 $__h = $62;
 $63 = $__h;
 STACKTOP = sp;return ($63|0);
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__hash = 0, $__lhs_sz$i$i$i = 0, $__lp$i$i$i = 0, $__nd = 0, $__rp$i$i$i = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 832|0;
 $96 = $this;
 $97 = $__k;
 $98 = $96;
 $95 = $98;
 $99 = $95;
 $100 = (($99) + 12|0);
 $94 = $100;
 $101 = $94;
 $102 = $101;
 $93 = $102;
 $103 = $93;
 $104 = $103;
 $105 = $97;
 $19 = $104;
 $20 = $105;
 $106 = $19;
 $107 = $106;
 $108 = $20;
 $109 = (__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($107,$108)|0);
 $__hash = $109;
 $18 = $98;
 $110 = $18;
 $111 = ($110);
 $17 = $111;
 $112 = $17;
 $113 = ($112);
 $16 = $113;
 $114 = $16;
 $115 = $114;
 $15 = $115;
 $116 = $15;
 $117 = (($116) + 4|0);
 $14 = $117;
 $118 = $14;
 $119 = ($118);
 $13 = $119;
 $120 = $13;
 $121 = $120;
 $12 = $121;
 $122 = $12;
 $123 = ($122);
 $124 = HEAP32[$123>>2]|0;
 $__bc = $124;
 $125 = $__bc;
 $126 = ($125|0)!=(0);
 if ($126) {
  $127 = $__hash;
  $128 = $__bc;
  $10 = $127;
  $11 = $128;
  $129 = $11;
  $130 = $11;
  $131 = (($130) - 1)|0;
  $132 = $129 & $131;
  $133 = ($132|0)!=(0);
  if ($133) {
   $138 = $10;
   $139 = $11;
   $140 = (($138>>>0) % ($139>>>0))&-1;
   $141 = $140;
  } else {
   $134 = $10;
   $135 = $11;
   $136 = (($135) - 1)|0;
   $137 = $134 & $136;
   $141 = $137;
  }
  $__chash = $141;
  $142 = ($98);
  $143 = $__chash;
  $3 = $142;
  $4 = $143;
  $144 = $3;
  $145 = $4;
  $146 = ($144);
  $2 = $146;
  $147 = $2;
  $148 = $147;
  $1 = $148;
  $149 = $1;
  $150 = ($149);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($151) + ($145<<2)|0);
  $153 = HEAP32[$152>>2]|0;
  $__nd = $153;
  $154 = $__nd;
  $155 = ($154|0)!=(0|0);
  do {
   if ($155) {
    $156 = $__nd;
    $157 = $156;
    $158 = ($157);
    $159 = HEAP32[$158>>2]|0;
    $__nd = $159;
    L9: while(1) {
     $160 = $__nd;
     $161 = ($160|0)!=(0|0);
     if ($161) {
      $162 = $__nd;
      $163 = (($162) + 4|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = $__bc;
      $5 = $164;
      $6 = $165;
      $166 = $6;
      $167 = $6;
      $168 = (($167) - 1)|0;
      $169 = $166 & $168;
      $170 = ($169|0)!=(0);
      if ($170) {
       $175 = $5;
       $176 = $6;
       $177 = (($175>>>0) % ($176>>>0))&-1;
       $178 = $177;
      } else {
       $171 = $5;
       $172 = $6;
       $173 = (($172) - 1)|0;
       $174 = $171 & $173;
       $178 = $174;
      }
      $179 = $__chash;
      $180 = ($178|0)==($179|0);
      $181 = $180;
     } else {
      $181 = 0;
     }
     if (!($181)) {
      label = 41;
      break;
     }
     $9 = $98;
     $182 = $9;
     $183 = (($182) + 16|0);
     $8 = $183;
     $184 = $8;
     $185 = $184;
     $7 = $185;
     $186 = $7;
     $187 = $186;
     $188 = $__nd;
     $189 = (($188) + 8|0);
     $190 = $97;
     $81 = $187;
     $82 = $189;
     $83 = $190;
     $191 = $81;
     $192 = $191;
     $193 = $82;
     $194 = $193;
     $195 = ($194);
     $196 = $83;
     $78 = $192;
     $79 = $195;
     $80 = $196;
     $197 = $79;
     $198 = $80;
     $76 = $197;
     $77 = $198;
     $199 = $76;
     $74 = $199;
     $200 = $74;
     $73 = $200;
     $201 = $73;
     $202 = ($201);
     $72 = $202;
     $203 = $72;
     $204 = $203;
     $71 = $204;
     $205 = $71;
     $206 = ($205);
     $207 = ($206);
     $208 = $207;
     $209 = ($208);
     $210 = $209;
     $211 = HEAP8[$210]|0;
     $212 = $211&255;
     $213 = $212 & 1;
     $214 = ($213|0)!=(0);
     if ($214) {
      $67 = $200;
      $215 = $67;
      $216 = ($215);
      $66 = $216;
      $217 = $66;
      $218 = $217;
      $65 = $218;
      $219 = $65;
      $220 = ($219);
      $221 = ($220);
      $222 = $221;
      $223 = (($222) + 4|0);
      $224 = HEAP32[$223>>2]|0;
      $238 = $224;
     } else {
      $70 = $200;
      $225 = $70;
      $226 = ($225);
      $69 = $226;
      $227 = $69;
      $228 = $227;
      $68 = $228;
      $229 = $68;
      $230 = ($229);
      $231 = ($230);
      $232 = $231;
      $233 = ($232);
      $234 = $233;
      $235 = HEAP8[$234]|0;
      $236 = $235&255;
      $237 = $236 >> 1;
      $238 = $237;
     }
     $__lhs_sz$i$i$i = $238;
     $239 = $__lhs_sz$i$i$i;
     $240 = $77;
     $64 = $240;
     $241 = $64;
     $63 = $241;
     $242 = $63;
     $243 = ($242);
     $62 = $243;
     $244 = $62;
     $245 = $244;
     $61 = $245;
     $246 = $61;
     $247 = ($246);
     $248 = ($247);
     $249 = $248;
     $250 = ($249);
     $251 = $250;
     $252 = HEAP8[$251]|0;
     $253 = $252&255;
     $254 = $253 & 1;
     $255 = ($254|0)!=(0);
     if ($255) {
      $57 = $241;
      $256 = $57;
      $257 = ($256);
      $56 = $257;
      $258 = $56;
      $259 = $258;
      $55 = $259;
      $260 = $55;
      $261 = ($260);
      $262 = ($261);
      $263 = $262;
      $264 = (($263) + 4|0);
      $265 = HEAP32[$264>>2]|0;
      $279 = $265;
     } else {
      $60 = $241;
      $266 = $60;
      $267 = ($266);
      $59 = $267;
      $268 = $59;
      $269 = $268;
      $58 = $269;
      $270 = $58;
      $271 = ($270);
      $272 = ($271);
      $273 = $272;
      $274 = ($273);
      $275 = $274;
      $276 = HEAP8[$275]|0;
      $277 = $276&255;
      $278 = $277 >> 1;
      $279 = $278;
     }
     $280 = ($239|0)!=($279|0);
     do {
      if ($280) {
       $$expand_i1_val = 0;
       $75 = $$expand_i1_val;
      } else {
       $281 = $76;
       $51 = $281;
       $282 = $51;
       $50 = $282;
       $283 = $50;
       $49 = $283;
       $284 = $49;
       $285 = ($284);
       $48 = $285;
       $286 = $48;
       $287 = $286;
       $47 = $287;
       $288 = $47;
       $289 = ($288);
       $290 = ($289);
       $291 = $290;
       $292 = ($291);
       $293 = $292;
       $294 = HEAP8[$293]|0;
       $295 = $294&255;
       $296 = $295 & 1;
       $297 = ($296|0)!=(0);
       if ($297) {
        $41 = $283;
        $298 = $41;
        $299 = ($298);
        $40 = $299;
        $300 = $40;
        $301 = $300;
        $39 = $301;
        $302 = $39;
        $303 = ($302);
        $304 = ($303);
        $305 = $304;
        $306 = (($305) + 8|0);
        $307 = HEAP32[$306>>2]|0;
        $320 = $307;
       } else {
        $46 = $283;
        $308 = $46;
        $309 = ($308);
        $45 = $309;
        $310 = $45;
        $311 = $310;
        $44 = $311;
        $312 = $44;
        $313 = ($312);
        $314 = ($313);
        $315 = $314;
        $316 = (($315) + 1|0);
        $317 = ($316);
        $43 = $317;
        $318 = $43;
        $42 = $318;
        $319 = $42;
        $320 = $319;
       }
       $38 = $320;
       $321 = $38;
       $__lp$i$i$i = $321;
       $322 = $77;
       $34 = $322;
       $323 = $34;
       $33 = $323;
       $324 = $33;
       $32 = $324;
       $325 = $32;
       $326 = ($325);
       $31 = $326;
       $327 = $31;
       $328 = $327;
       $30 = $328;
       $329 = $30;
       $330 = ($329);
       $331 = ($330);
       $332 = $331;
       $333 = ($332);
       $334 = $333;
       $335 = HEAP8[$334]|0;
       $336 = $335&255;
       $337 = $336 & 1;
       $338 = ($337|0)!=(0);
       if ($338) {
        $24 = $324;
        $339 = $24;
        $340 = ($339);
        $23 = $340;
        $341 = $23;
        $342 = $341;
        $22 = $342;
        $343 = $22;
        $344 = ($343);
        $345 = ($344);
        $346 = $345;
        $347 = (($346) + 8|0);
        $348 = HEAP32[$347>>2]|0;
        $361 = $348;
       } else {
        $29 = $324;
        $349 = $29;
        $350 = ($349);
        $28 = $350;
        $351 = $28;
        $352 = $351;
        $27 = $352;
        $353 = $27;
        $354 = ($353);
        $355 = ($354);
        $356 = $355;
        $357 = (($356) + 1|0);
        $358 = ($357);
        $26 = $358;
        $359 = $26;
        $25 = $359;
        $360 = $25;
        $361 = $360;
       }
       $21 = $361;
       $362 = $21;
       $__rp$i$i$i = $362;
       $363 = $76;
       $37 = $363;
       $364 = $37;
       $365 = ($364);
       $36 = $365;
       $366 = $36;
       $367 = $366;
       $35 = $367;
       $368 = $35;
       $369 = ($368);
       $370 = ($369);
       $371 = $370;
       $372 = ($371);
       $373 = $372;
       $374 = HEAP8[$373]|0;
       $375 = $374&255;
       $376 = $375 & 1;
       $377 = ($376|0)!=(0);
       if ($377) {
        $378 = $__lp$i$i$i;
        $379 = $__rp$i$i$i;
        $380 = $__lhs_sz$i$i$i;
        $52 = $378;
        $53 = $379;
        $54 = $380;
        $381 = $52;
        $382 = $53;
        $383 = $54;
        __THREW__ = 0;
        $384 = (invoke_iiii(25,($381|0),($382|0),($383|0))|0);
        $385 = __THREW__; __THREW__ = 0;
        $386 = $385&1;
        if ($386) {
         label = 36;
         break L9;
        }
        $387 = ($384|0)==(0);
        $$expand_i1_val2 = $387&1;
        $75 = $$expand_i1_val2;
        break;
       }
       while(1) {
        $388 = $__lhs_sz$i$i$i;
        $389 = ($388|0)!=(0);
        if (!($389)) {
         label = 35;
         break;
        }
        $390 = $__lp$i$i$i;
        $391 = HEAP8[$390]|0;
        $392 = $391 << 24 >> 24;
        $393 = $__rp$i$i$i;
        $394 = HEAP8[$393]|0;
        $395 = $394 << 24 >> 24;
        $396 = ($392|0)!=($395|0);
        if ($396) {
         label = 33;
         break;
        }
        $397 = $__lhs_sz$i$i$i;
        $398 = (($397) + -1)|0;
        $__lhs_sz$i$i$i = $398;
        $399 = $__lp$i$i$i;
        $400 = (($399) + 1|0);
        $__lp$i$i$i = $400;
        $401 = $__rp$i$i$i;
        $402 = (($401) + 1|0);
        $__rp$i$i$i = $402;
       }
       if ((label|0) == 33) {
        label = 0;
        $$expand_i1_val4 = 0;
        $75 = $$expand_i1_val4;
        break;
       }
       else if ((label|0) == 35) {
        label = 0;
        $$expand_i1_val6 = 1;
        $75 = $$expand_i1_val6;
        break;
       }
      }
     } while(0);
     $$pre_trunc = $75;
     $404 = $$pre_trunc&1;
     if ($404) {
      label = 38;
      break;
     }
     $411 = $__nd;
     $412 = $411;
     $413 = ($412);
     $414 = HEAP32[$413>>2]|0;
     $__nd = $414;
    }
    if ((label|0) == 36) {
     $403 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$0 = tempRet0;
     ___clang_call_terminate($403);
     // unreachable;
    }
    else if ((label|0) == 38) {
     $405 = $__nd;
     $86 = $agg$result;
     $87 = $405;
     $406 = $86;
     $407 = $87;
     $84 = $406;
     $85 = $407;
     $408 = $84;
     $409 = ($408);
     $410 = $85;
     HEAP32[$409>>2] = $410;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 41) {
     break;
    }
   }
  } while(0);
 }
 $92 = $98;
 $90 = $agg$result;
 $91 = 0;
 $415 = $90;
 $416 = $91;
 $88 = $415;
 $89 = $416;
 $417 = $88;
 $418 = ($417);
 $419 = $89;
 HEAP32[$418>>2] = $419;
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S6_EEEEEixERSC_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__i = 0, $__i1$i$i = 0, $__i1$i$i$i = 0, $__i1$i$i1 = 0, $__r = 0, $__t$i = 0;
 var $__tmp$i$i$i = 0, $__tmp$i$i$i6 = 0, $tmp$i = 0, $tmp$i$i = 0, $tmp$i$i$i = 0, $tmp$i$i$i$i$i = 0, $tmp$i$i$i$i$i7 = 0, $tmp$i$i13 = 0, $tmp$i$i4 = 0, $tmp$i1$i$i$i$i = 0, $tmp$i1$i$i$i$i9 = 0, $tmp$i2 = 0, $tmp1$i = 0, $tmp1$i$i = 0, $tmp1$i$i$i$i$i = 0, $tmp1$i$i$i$i$i8 = 0, $tmp1$i2$i$i$i$i = 0, $tmp1$i2$i$i$i$i10 = 0, $tmp1$i3 = 0, $tmp2$i$i = 0;
 var $tmp2$i$i$i = 0, $tmp2$i$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088|0;
 $__i1$i$i$i = sp + 104|0;
 $14 = sp + 120|0;
 $20 = sp + 168|0;
 $30 = sp + 248|0;
 $33 = sp + 272|0;
 $43 = sp + 352|0;
 $46 = sp + 376|0;
 $77 = sp + 632|0;
 $80 = sp + 656|0;
 $90 = sp + 736|0;
 $93 = sp + 760|0;
 $__i1$i$i1 = sp + 856|0;
 $105 = sp + 872|0;
 $112 = sp + 928|0;
 $__i1$i$i = sp + 944|0;
 $115 = sp + 960|0;
 $118 = sp + 984|0;
 $__i = sp + 1016|0;
 $122 = sp + 1024|0;
 $__h = sp + 1032|0;
 $__r = sp + 1048|0;
 $123 = sp + 1056|0;
 $120 = $this;
 $121 = $__k;
 $127 = $120;
 $128 = $121;
 $116 = $127;
 $117 = $128;
 $129 = $116;
 $130 = ($129);
 $131 = $117;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($118,$130,$131);
 $tmp$i = $115;
 $tmp1$i = $118;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;HEAP8[$tmp$i+1|0]=HEAP8[$tmp1$i+1|0]|0;HEAP8[$tmp$i+2|0]=HEAP8[$tmp1$i+2|0]|0;HEAP8[$tmp$i+3|0]=HEAP8[$tmp1$i+3|0]|0;
 $114 = $__i;
 $132 = $114;
 $tmp$i$i = $__i1$i$i;
 $tmp2$i$i = $115;
 ;HEAP8[$tmp$i$i+0|0]=HEAP8[$tmp2$i$i+0|0]|0;HEAP8[$tmp$i$i+1|0]=HEAP8[$tmp2$i$i+1|0]|0;HEAP8[$tmp$i$i+2|0]=HEAP8[$tmp2$i$i+2|0]|0;HEAP8[$tmp$i$i+3|0]=HEAP8[$tmp2$i$i+3|0]|0;
 $113 = $132;
 $133 = $113;
 $134 = ($133);
 $135 = $134;
 $136 = $__i1$i$i;
 ;HEAP32[$135+0>>2]=HEAP32[$136+0>>2]|0;
 $111 = $127;
 $137 = $111;
 $138 = ($137);
 $110 = $138;
 $108 = $112;
 $109 = 0;
 $139 = $108;
 $140 = $109;
 $106 = $139;
 $107 = $140;
 $141 = $106;
 $142 = ($141);
 $143 = $107;
 HEAP32[$142>>2] = $143;
 $tmp$i2 = $105;
 $tmp1$i3 = $112;
 ;HEAP8[$tmp$i2+0|0]=HEAP8[$tmp1$i3+0|0]|0;HEAP8[$tmp$i2+1|0]=HEAP8[$tmp1$i3+1|0]|0;HEAP8[$tmp$i2+2|0]=HEAP8[$tmp1$i3+2|0]|0;HEAP8[$tmp$i2+3|0]=HEAP8[$tmp1$i3+3|0]|0;
 $104 = $122;
 $144 = $104;
 $tmp$i$i4 = $__i1$i$i1;
 $tmp2$i$i5 = $105;
 ;HEAP8[$tmp$i$i4+0|0]=HEAP8[$tmp2$i$i5+0|0]|0;HEAP8[$tmp$i$i4+1|0]=HEAP8[$tmp2$i$i5+1|0]|0;HEAP8[$tmp$i$i4+2|0]=HEAP8[$tmp2$i$i5+2|0]|0;HEAP8[$tmp$i$i4+3|0]=HEAP8[$tmp2$i$i5+3|0]|0;
 $103 = $144;
 $145 = $103;
 $146 = ($145);
 $147 = $146;
 $148 = $__i1$i$i1;
 ;HEAP32[$147+0>>2]=HEAP32[$148+0>>2]|0;
 $69 = $__i;
 $70 = $122;
 $149 = $69;
 $150 = ($149);
 $151 = $70;
 $152 = ($151);
 $67 = $150;
 $68 = $152;
 $153 = $67;
 $154 = $68;
 $65 = $153;
 $66 = $154;
 $155 = $65;
 $156 = ($155);
 $157 = HEAP32[$156>>2]|0;
 $158 = $66;
 $159 = ($158);
 $160 = HEAP32[$159>>2]|0;
 $161 = ($157|0)==($160|0);
 $162 = $161 ^ 1;
 if ($162) {
  $64 = $__i;
  $163 = $64;
  $164 = ($163);
  $63 = $164;
  $165 = $63;
  $166 = ($165);
  $167 = HEAP32[$166>>2]|0;
  $168 = (($167) + 8|0);
  $62 = $168;
  $169 = $62;
  $61 = $169;
  $170 = $61;
  $171 = $170;
  $172 = $171;
  $173 = $172;
  $60 = $173;
  $174 = $60;
  $59 = $174;
  $175 = $59;
  $176 = $175;
  $177 = $176;
  $178 = (($177) + 12|0);
  $119 = $178;
  $371 = $119;
  STACKTOP = sp;return ($371|0);
 }
 $179 = $121;
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S6_EEEEE25__construct_node_with_keyERSC_($__h,$127,$179);
 $180 = ($127);
 $58 = $__h;
 $181 = $58;
 $182 = ($181);
 $57 = $182;
 $183 = $57;
 $184 = $183;
 $56 = $184;
 $185 = $56;
 $186 = ($185);
 $187 = HEAP32[$186>>2]|0;
 __THREW__ = 0;
 invoke_viii(10,($123|0),($180|0),($187|0));
 $188 = __THREW__; __THREW__ = 0;
 $189 = $188&1;
 if ($189) {
  $305 = ___cxa_find_matching_catch(-1,-1)|0;
  $306 = tempRet0;
  $124 = $305;
  $125 = $306;
  $102 = $__h;
  $307 = $102;
  $101 = $307;
  $308 = $101;
  $99 = $308;
  $100 = 0;
  $309 = $99;
  $310 = ($309);
  $98 = $310;
  $311 = $98;
  $312 = $311;
  $97 = $312;
  $313 = $97;
  $314 = ($313);
  $315 = HEAP32[$314>>2]|0;
  $__tmp$i$i$i = $315;
  $316 = $100;
  $317 = ($309);
  $74 = $317;
  $318 = $74;
  $319 = $318;
  $73 = $319;
  $320 = $73;
  $321 = ($320);
  HEAP32[$321>>2] = $316;
  $322 = $__tmp$i$i$i;
  $323 = ($322|0)!=(0|0);
  if ($323) {
   $324 = ($309);
   $72 = $324;
   $325 = $72;
   $326 = $325;
   $71 = $326;
   $327 = $71;
   $328 = (($327) + 4|0);
   $329 = $__tmp$i$i$i;
   $95 = $328;
   $96 = $329;
   $330 = $95;
   $331 = (($330) + 5|0);
   $332 = HEAP8[$331]|0;
   $333 = $332&1;
   if ($333) {
    $334 = ($330);
    $335 = HEAP32[$334>>2]|0;
    $336 = $96;
    $337 = (($336) + 8|0);
    $338 = $337;
    $339 = (($338) + 12|0);
    $94 = $339;
    $340 = $94;
    $341 = $340;
    $342 = $341;
    $91 = $335;
    $92 = $342;
    $343 = $91;
    $344 = $92;
    $tmp$i$i$i$i$i = $90;
    $tmp1$i$i$i$i$i = $93;
    ;HEAP8[$tmp$i$i$i$i$i+0|0]=HEAP8[$tmp1$i$i$i$i$i+0|0]|0;
    $88 = $343;
    $89 = $344;
    $345 = $89;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($345);
   }
   $346 = (($330) + 4|0);
   $347 = HEAP8[$346]|0;
   $348 = $347&1;
   if ($348) {
    $349 = ($330);
    $350 = HEAP32[$349>>2]|0;
    $351 = $96;
    $352 = (($351) + 8|0);
    $353 = $352;
    $354 = ($353);
    $87 = $354;
    $355 = $87;
    $356 = $355;
    $357 = $356;
    $78 = $350;
    $79 = $357;
    $358 = $78;
    $359 = $79;
    $tmp$i1$i$i$i$i = $77;
    $tmp1$i2$i$i$i$i = $80;
    ;HEAP8[$tmp$i1$i$i$i$i+0|0]=HEAP8[$tmp1$i2$i$i$i$i+0|0]|0;
    $75 = $358;
    $76 = $359;
    $360 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($360);
   }
   $361 = $96;
   $362 = ($361|0)!=(0|0);
   if ($362) {
    $363 = ($330);
    $364 = HEAP32[$363>>2]|0;
    $365 = $96;
    $84 = $364;
    $85 = $365;
    $86 = 1;
    $366 = $84;
    $367 = $85;
    $368 = $86;
    $81 = $366;
    $82 = $367;
    $83 = $368;
    $369 = $82;
    $370 = $369;
    __ZdlPv($370);
   }
  }
  $372 = $124;
  $373 = $125;
  ___resumeException($372|0);
  // unreachable;
 }
 $21 = $__r;
 $22 = $123;
 $23 = 0;
 $190 = $21;
 $191 = $23;
 $192 = $22;
 $17 = $190;
 $18 = $192;
 $19 = $191;
 $193 = $17;
 $194 = ($193);
 $195 = $18;
 $196 = ($195);
 $16 = $196;
 $197 = $16;
 $198 = $20;
 $199 = $197;
 ;HEAP32[$198+0>>2]=HEAP32[$199+0>>2]|0;
 $tmp$i$i13 = $14;
 $tmp1$i$i = $20;
 ;HEAP8[$tmp$i$i13+0|0]=HEAP8[$tmp1$i$i+0|0]|0;HEAP8[$tmp$i$i13+1|0]=HEAP8[$tmp1$i$i+1|0]|0;HEAP8[$tmp$i$i13+2|0]=HEAP8[$tmp1$i$i+2|0]|0;HEAP8[$tmp$i$i13+3|0]=HEAP8[$tmp1$i$i+3|0]|0;
 $13 = $194;
 $200 = $13;
 $tmp$i$i$i = $__i1$i$i$i;
 $tmp2$i$i$i = $14;
 ;HEAP8[$tmp$i$i$i+0|0]=HEAP8[$tmp2$i$i$i+0|0]|0;HEAP8[$tmp$i$i$i+1|0]=HEAP8[$tmp2$i$i$i+1|0]|0;HEAP8[$tmp$i$i$i+2|0]=HEAP8[$tmp2$i$i$i+2|0]|0;HEAP8[$tmp$i$i$i+3|0]=HEAP8[$tmp2$i$i$i+3|0]|0;
 $12 = $200;
 $201 = $12;
 $202 = ($201);
 $203 = $202;
 $204 = $__i1$i$i$i;
 ;HEAP32[$203+0>>2]=HEAP32[$204+0>>2]|0;
 $205 = (($193) + 4|0);
 $206 = $18;
 $207 = (($206) + 4|0);
 $15 = $207;
 $208 = $15;
 $209 = HEAP8[$208]|0;
 $210 = $209&1;
 $211 = $210&1;
 HEAP8[$205] = $211;
 $11 = $__h;
 $212 = $11;
 $213 = ($212);
 $10 = $213;
 $214 = $10;
 $215 = $214;
 $9 = $215;
 $216 = $9;
 $217 = ($216);
 $218 = HEAP32[$217>>2]|0;
 $__t$i = $218;
 $219 = ($212);
 $8 = $219;
 $220 = $8;
 $221 = $220;
 $7 = $221;
 $222 = $7;
 $223 = ($222);
 HEAP32[$223>>2] = 0;
 $224 = ($__r);
 $6 = $224;
 $225 = $6;
 $226 = ($225);
 $5 = $226;
 $227 = $5;
 $228 = ($227);
 $229 = HEAP32[$228>>2]|0;
 $230 = (($229) + 8|0);
 $4 = $230;
 $231 = $4;
 $3 = $231;
 $232 = $3;
 $233 = $232;
 $234 = $233;
 $235 = $234;
 $2 = $235;
 $236 = $2;
 $1 = $236;
 $237 = $1;
 $238 = $237;
 $239 = $238;
 $240 = (($239) + 12|0);
 $119 = $240;
 $126 = 1;
 $55 = $__h;
 $241 = $55;
 $54 = $241;
 $242 = $54;
 $52 = $242;
 $53 = 0;
 $243 = $52;
 $244 = ($243);
 $51 = $244;
 $245 = $51;
 $246 = $245;
 $50 = $246;
 $247 = $50;
 $248 = ($247);
 $249 = HEAP32[$248>>2]|0;
 $__tmp$i$i$i6 = $249;
 $250 = $53;
 $251 = ($243);
 $27 = $251;
 $252 = $27;
 $253 = $252;
 $26 = $253;
 $254 = $26;
 $255 = ($254);
 HEAP32[$255>>2] = $250;
 $256 = $__tmp$i$i$i6;
 $257 = ($256|0)!=(0|0);
 if ($257) {
  $258 = ($243);
  $25 = $258;
  $259 = $25;
  $260 = $259;
  $24 = $260;
  $261 = $24;
  $262 = (($261) + 4|0);
  $263 = $__tmp$i$i$i6;
  $48 = $262;
  $49 = $263;
  $264 = $48;
  $265 = (($264) + 5|0);
  $266 = HEAP8[$265]|0;
  $267 = $266&1;
  if ($267) {
   $268 = ($264);
   $269 = HEAP32[$268>>2]|0;
   $270 = $49;
   $271 = (($270) + 8|0);
   $272 = $271;
   $273 = (($272) + 12|0);
   $47 = $273;
   $274 = $47;
   $275 = $274;
   $276 = $275;
   $44 = $269;
   $45 = $276;
   $277 = $44;
   $278 = $45;
   $tmp$i$i$i$i$i7 = $43;
   $tmp1$i$i$i$i$i8 = $46;
   ;HEAP8[$tmp$i$i$i$i$i7+0|0]=HEAP8[$tmp1$i$i$i$i$i8+0|0]|0;
   $41 = $277;
   $42 = $278;
   $279 = $42;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($279);
  }
  $280 = (($264) + 4|0);
  $281 = HEAP8[$280]|0;
  $282 = $281&1;
  if ($282) {
   $283 = ($264);
   $284 = HEAP32[$283>>2]|0;
   $285 = $49;
   $286 = (($285) + 8|0);
   $287 = $286;
   $288 = ($287);
   $40 = $288;
   $289 = $40;
   $290 = $289;
   $291 = $290;
   $31 = $284;
   $32 = $291;
   $292 = $31;
   $293 = $32;
   $tmp$i1$i$i$i$i9 = $30;
   $tmp1$i2$i$i$i$i10 = $33;
   ;HEAP8[$tmp$i1$i$i$i$i9+0|0]=HEAP8[$tmp1$i2$i$i$i$i10+0|0]|0;
   $28 = $292;
   $29 = $293;
   $294 = $29;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($294);
  }
  $295 = $49;
  $296 = ($295|0)!=(0|0);
  if ($296) {
   $297 = ($264);
   $298 = HEAP32[$297>>2]|0;
   $299 = $49;
   $37 = $298;
   $38 = $299;
   $39 = 1;
   $300 = $37;
   $301 = $38;
   $302 = $39;
   $34 = $300;
   $35 = $301;
   $36 = $302;
   $303 = $35;
   $304 = $303;
   __ZdlPv($304);
  }
 }
 $371 = $119;
 STACKTOP = sp;return ($371|0);
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S6_EEEEE25__construct_node_with_keyERSC_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i$i$i = 0, $__h = 0, $__i$i$i$i$i$i$i = 0, $__na = 0, $__t$i$i$i = 0;
 var $__t21$i$i$i = 0, $__t21$i$i$i8 = 0, $__tmp$i$i$i = 0, $__tmp$i$i$i1 = 0, $tmp$i = 0, $tmp$i$i = 0, $tmp$i$i$i = 0, $tmp$i$i$i$i = 0, $tmp$i$i$i$i$i = 0, $tmp$i$i$i$i$i2 = 0, $tmp$i$i$i$i13 = 0, $tmp$i$i$i11 = 0, $tmp$i$i9 = 0, $tmp$i1$i$i$i$i = 0, $tmp$i1$i$i$i$i4 = 0, $tmp$i15 = 0, $tmp1$i = 0, $tmp1$i$i = 0, $tmp1$i$i$i$i = 0, $tmp1$i$i$i$i$i = 0;
 var $tmp1$i$i$i$i$i3 = 0, $tmp1$i$i$i$i14 = 0, $tmp1$i$i10 = 0, $tmp1$i16 = 0, $tmp1$i2$i$i$i$i = 0, $tmp1$i2$i$i$i$i5 = 0, $tmp2$i$i$i = 0, $tmp2$i$i$i12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1488|0;
 $15 = sp + 128|0;
 $18 = sp + 152|0;
 $28 = sp + 232|0;
 $29 = sp + 240|0;
 $32 = sp + 264|0;
 $33 = sp + 272|0;
 $__t21$i$i$i8 = sp + 280|0;
 $36 = sp + 304|0;
 $47 = sp + 400|0;
 $64 = sp + 536|0;
 $69 = sp + 576|0;
 $77 = sp + 640|0;
 $80 = sp + 664|0;
 $90 = sp + 744|0;
 $93 = sp + 768|0;
 $110 = sp + 912|0;
 $111 = sp + 920|0;
 $114 = sp + 944|0;
 $115 = sp + 952|0;
 $__t21$i$i$i = sp + 960|0;
 $118 = sp + 984|0;
 $123 = sp + 1024|0;
 $142 = sp + 1176|0;
 $145 = sp + 1200|0;
 $155 = sp + 1280|0;
 $158 = sp + 1304|0;
 $__h = sp + 1440|0;
 $173 = sp + 1456|0;
 $171 = $this;
 $172 = $__k;
 $177 = $171;
 $178 = ($177);
 $170 = $178;
 $179 = $170;
 $180 = (($179) + 8|0);
 $169 = $180;
 $181 = $169;
 $182 = $181;
 $168 = $182;
 $183 = $168;
 $184 = $183;
 $__na = $184;
 $185 = $__na;
 $134 = $185;
 $135 = 1;
 $186 = $134;
 $187 = $135;
 $131 = $186;
 $132 = $187;
 $133 = 0;
 $188 = $132;
 $189 = $188<<5;
 $190 = (__Znwj($189)|0);
 $191 = $190;
 $192 = $__na;
 $129 = $173;
 $130 = $192;
 $193 = $129;
 $194 = $130;
 $127 = $193;
 $128 = $194;
 $195 = $127;
 $196 = ($195);
 $197 = $128;
 HEAP32[$196>>2] = $197;
 $198 = (($195) + 4|0);
 HEAP8[$198] = 0;
 $199 = (($195) + 5|0);
 HEAP8[$199] = 0;
 $124 = $__h;
 $125 = $191;
 $126 = $173;
 $200 = $124;
 $201 = $125;
 $202 = $126;
 $120 = $200;
 $121 = $201;
 $122 = $202;
 $203 = $120;
 $204 = ($203);
 $205 = $121;
 $206 = $122;
 $119 = $206;
 $207 = $119;
 $208 = $123;
 $209 = $207;
 ;HEAP32[$208+0>>2]=HEAP32[$209+0>>2]|0;HEAP32[$208+4>>2]=HEAP32[$209+4>>2]|0;
 $tmp$i$i = $118;
 $tmp1$i$i = $123;
 ;HEAP8[$tmp$i$i+0|0]=HEAP8[$tmp1$i$i+0|0]|0;HEAP8[$tmp$i$i+1|0]=HEAP8[$tmp1$i$i+1|0]|0;HEAP8[$tmp$i$i+2|0]=HEAP8[$tmp1$i$i+2|0]|0;HEAP8[$tmp$i$i+3|0]=HEAP8[$tmp1$i$i+3|0]|0;HEAP8[$tmp$i$i+4|0]=HEAP8[$tmp1$i$i+4|0]|0;HEAP8[$tmp$i$i+5|0]=HEAP8[$tmp1$i$i+5|0]|0;HEAP8[$tmp$i$i+6|0]=HEAP8[$tmp1$i$i+6|0]|0;HEAP8[$tmp$i$i+7|0]=HEAP8[$tmp1$i$i+7|0]|0;
 $116 = $204;
 $117 = $205;
 $210 = $116;
 $211 = $117;
 $tmp$i$i$i = $__t21$i$i$i;
 $tmp2$i$i$i = $118;
 ;HEAP8[$tmp$i$i$i+0|0]=HEAP8[$tmp2$i$i$i+0|0]|0;HEAP8[$tmp$i$i$i+1|0]=HEAP8[$tmp2$i$i$i+1|0]|0;HEAP8[$tmp$i$i$i+2|0]=HEAP8[$tmp2$i$i$i+2|0]|0;HEAP8[$tmp$i$i$i+3|0]=HEAP8[$tmp2$i$i$i+3|0]|0;HEAP8[$tmp$i$i$i+4|0]=HEAP8[$tmp2$i$i$i+4|0]|0;HEAP8[$tmp$i$i$i+5|0]=HEAP8[$tmp2$i$i$i+5|0]|0;HEAP8[$tmp$i$i$i+6|0]=HEAP8[$tmp2$i$i$i+6|0]|0;HEAP8[$tmp$i$i$i+7|0]=HEAP8[$tmp2$i$i$i+7|0]|0;
 $113 = $210;
 HEAP32[$114>>2] = $211;
 $212 = $113;
 $213 = $212;
 $112 = $114;
 $214 = $112;
 $215 = HEAP32[$214>>2]|0;
 $106 = $__t21$i$i$i;
 $216 = $106;
 $217 = $115;
 $218 = $216;
 ;HEAP32[$217+0>>2]=HEAP32[$218+0>>2]|0;HEAP32[$217+4>>2]=HEAP32[$218+4>>2]|0;
 $tmp$i$i$i$i = $111;
 $tmp1$i$i$i$i = $115;
 ;HEAP8[$tmp$i$i$i$i+0|0]=HEAP8[$tmp1$i$i$i$i+0|0]|0;HEAP8[$tmp$i$i$i$i+1|0]=HEAP8[$tmp1$i$i$i$i+1|0]|0;HEAP8[$tmp$i$i$i$i+2|0]=HEAP8[$tmp1$i$i$i$i+2|0]|0;HEAP8[$tmp$i$i$i$i+3|0]=HEAP8[$tmp1$i$i$i$i+3|0]|0;HEAP8[$tmp$i$i$i$i+4|0]=HEAP8[$tmp1$i$i$i$i+4|0]|0;HEAP8[$tmp$i$i$i$i+5|0]=HEAP8[$tmp1$i$i$i$i+5|0]|0;HEAP8[$tmp$i$i$i$i+6|0]=HEAP8[$tmp1$i$i$i$i+6|0]|0;HEAP8[$tmp$i$i$i$i+7|0]=HEAP8[$tmp1$i$i$i$i+7|0]|0;
 $109 = $213;
 HEAP32[$110>>2] = $215;
 $219 = $109;
 $220 = ($219);
 $108 = $110;
 $221 = $108;
 $222 = HEAP32[$221>>2]|0;
 HEAP32[$220>>2] = $222;
 $223 = (($219) + 4|0);
 $107 = $111;
 $224 = $107;
 $225 = $223;
 $226 = $224;
 ;HEAP32[$225+0>>2]=HEAP32[$226+0>>2]|0;HEAP32[$225+4>>2]=HEAP32[$226+4>>2]|0;
 $227 = $__na;
 $105 = $__h;
 $228 = $105;
 $229 = ($228);
 $104 = $229;
 $230 = $104;
 $231 = $230;
 $103 = $231;
 $232 = $103;
 $233 = ($232);
 $234 = HEAP32[$233>>2]|0;
 $235 = (($234) + 8|0);
 $236 = $235;
 $237 = ($236);
 $70 = $237;
 $238 = $70;
 $239 = $238;
 $240 = $239;
 $241 = $172;
 $66 = $227;
 $67 = $240;
 $68 = $241;
 $242 = $66;
 $243 = $67;
 $244 = $68;
 $65 = $244;
 $245 = $65;
 $tmp$i = $64;
 $tmp1$i = $69;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
 $61 = $242;
 $62 = $243;
 $63 = $245;
 $246 = $61;
 $247 = $62;
 $248 = $63;
 $60 = $248;
 $249 = $60;
 $57 = $246;
 $58 = $247;
 $59 = $249;
 $250 = $58;
 $251 = $250;
 $252 = ($251|0)==(0|0);
 do {
  if (!($252)) {
   $253 = $251;
   $254 = $59;
   $56 = $254;
   $255 = $56;
   __THREW__ = 0;
   invoke_vii(43,($253|0),($255|0));
   $256 = __THREW__; __THREW__ = 0;
   $257 = $256&1;
   if (!($257)) {
    break;
   }
   $428 = ___cxa_find_matching_catch(-1,-1)|0;
   $429 = tempRet0;
   $174 = $428;
   $175 = $429;
   $167 = $__h;
   $430 = $167;
   $166 = $430;
   $431 = $166;
   $164 = $431;
   $165 = 0;
   $432 = $164;
   $433 = ($432);
   $163 = $433;
   $434 = $163;
   $435 = $434;
   $162 = $435;
   $436 = $162;
   $437 = ($436);
   $438 = HEAP32[$437>>2]|0;
   $__tmp$i$i$i = $438;
   $439 = $165;
   $440 = ($432);
   $139 = $440;
   $441 = $139;
   $442 = $441;
   $138 = $442;
   $443 = $138;
   $444 = ($443);
   HEAP32[$444>>2] = $439;
   $445 = $__tmp$i$i$i;
   $446 = ($445|0)!=(0|0);
   if ($446) {
    $447 = ($432);
    $137 = $447;
    $448 = $137;
    $449 = $448;
    $136 = $449;
    $450 = $136;
    $451 = (($450) + 4|0);
    $452 = $__tmp$i$i$i;
    $160 = $451;
    $161 = $452;
    $453 = $160;
    $454 = (($453) + 5|0);
    $455 = HEAP8[$454]|0;
    $456 = $455&1;
    if ($456) {
     $457 = ($453);
     $458 = HEAP32[$457>>2]|0;
     $459 = $161;
     $460 = (($459) + 8|0);
     $461 = $460;
     $462 = (($461) + 12|0);
     $159 = $462;
     $463 = $159;
     $464 = $463;
     $465 = $464;
     $156 = $458;
     $157 = $465;
     $466 = $156;
     $467 = $157;
     $tmp$i$i$i$i$i = $155;
     $tmp1$i$i$i$i$i = $158;
     ;HEAP8[$tmp$i$i$i$i$i+0|0]=HEAP8[$tmp1$i$i$i$i$i+0|0]|0;
     $153 = $466;
     $154 = $467;
     $468 = $154;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($468);
    }
    $469 = (($453) + 4|0);
    $470 = HEAP8[$469]|0;
    $471 = $470&1;
    if ($471) {
     $472 = ($453);
     $473 = HEAP32[$472>>2]|0;
     $474 = $161;
     $475 = (($474) + 8|0);
     $476 = $475;
     $477 = ($476);
     $152 = $477;
     $478 = $152;
     $479 = $478;
     $480 = $479;
     $143 = $473;
     $144 = $480;
     $481 = $143;
     $482 = $144;
     $tmp$i1$i$i$i$i = $142;
     $tmp1$i2$i$i$i$i = $145;
     ;HEAP8[$tmp$i1$i$i$i$i+0|0]=HEAP8[$tmp1$i2$i$i$i$i+0|0]|0;
     $140 = $481;
     $141 = $482;
     $483 = $141;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($483);
    }
    $484 = $161;
    $485 = ($484|0)!=(0|0);
    if ($485) {
     $486 = ($453);
     $487 = HEAP32[$486>>2]|0;
     $488 = $161;
     $149 = $487;
     $150 = $488;
     $151 = 1;
     $489 = $149;
     $490 = $150;
     $491 = $151;
     $146 = $489;
     $147 = $490;
     $148 = $491;
     $492 = $147;
     $493 = $492;
     __ZdlPv($493);
    }
   }
   $494 = $174;
   $495 = $175;
   ___resumeException($494|0);
   // unreachable;
  }
 } while(0);
 $55 = $__h;
 $258 = $55;
 $259 = ($258);
 $54 = $259;
 $260 = $54;
 $261 = $260;
 $53 = $261;
 $262 = $53;
 $263 = (($262) + 4|0);
 $264 = (($263) + 4|0);
 HEAP8[$264] = 1;
 $265 = $__na;
 $52 = $__h;
 $266 = $52;
 $267 = ($266);
 $51 = $267;
 $268 = $51;
 $269 = $268;
 $50 = $269;
 $270 = $50;
 $271 = ($270);
 $272 = HEAP32[$271>>2]|0;
 $273 = (($272) + 8|0);
 $274 = $273;
 $275 = (($274) + 12|0);
 $1 = $275;
 $276 = $1;
 $277 = $276;
 $278 = $277;
 $16 = $265;
 $17 = $278;
 $279 = $16;
 $280 = $17;
 $tmp$i15 = $15;
 $tmp1$i16 = $18;
 ;HEAP8[$tmp$i15+0|0]=HEAP8[$tmp1$i16+0|0]|0;
 $13 = $279;
 $14 = $280;
 $281 = $13;
 $282 = $14;
 $11 = $281;
 $12 = $282;
 $283 = $12;
 $284 = $283;
 $285 = ($284|0)==(0|0);
 if (!($285)) {
  $286 = $284;
  $10 = $286;
  $287 = $10;
  $9 = $287;
  $288 = $9;
  $289 = ($288);
  $8 = $289;
  $290 = $8;
  $7 = $290;
  $291 = $7;
  $292 = $291;
  $6 = $292;
  $293 = $6;
  $294 = $293;
  $5 = $294;
  $4 = $288;
  $295 = $4;
  $296 = ($295);
  $3 = $296;
  $297 = $3;
  $298 = $297;
  $2 = $298;
  $299 = $2;
  $300 = ($299);
  $301 = ($300);
  $302 = $301;
  $303 = ($302);
  $__a$i$i$i$i$i$i = $303;
  $__i$i$i$i$i$i$i = 0;
  while(1) {
   $304 = $__i$i$i$i$i$i$i;
   $305 = ($304>>>0)<(3);
   if (!($305)) {
    break;
   }
   $306 = $__i$i$i$i$i$i$i;
   $307 = $__a$i$i$i$i$i$i;
   $308 = (($307) + ($306<<2)|0);
   HEAP32[$308>>2] = 0;
   $309 = $__i$i$i$i$i$i$i;
   $310 = (($309) + 1)|0;
   $__i$i$i$i$i$i$i = $310;
  }
 }
 $21 = $__h;
 $311 = $21;
 $312 = ($311);
 $20 = $312;
 $313 = $20;
 $314 = $313;
 $19 = $314;
 $315 = $19;
 $316 = (($315) + 4|0);
 $317 = (($316) + 5|0);
 HEAP8[$317] = 1;
 $22 = $__h;
 $318 = $22;
 $48 = $agg$result;
 $49 = $318;
 $319 = $48;
 $320 = $49;
 $45 = $319;
 $46 = $320;
 $321 = $45;
 $322 = ($321);
 $323 = $46;
 $44 = $323;
 $324 = $44;
 $325 = ($324);
 $43 = $325;
 $326 = $43;
 $327 = $326;
 $42 = $327;
 $328 = $42;
 $329 = ($328);
 $330 = HEAP32[$329>>2]|0;
 $__t$i$i$i = $330;
 $331 = ($324);
 $41 = $331;
 $332 = $41;
 $333 = $332;
 $40 = $333;
 $334 = $40;
 $335 = ($334);
 HEAP32[$335>>2] = 0;
 $336 = $__t$i$i$i;
 $337 = $46;
 $39 = $337;
 $338 = $39;
 $339 = ($338);
 $38 = $339;
 $340 = $38;
 $341 = $340;
 $37 = $341;
 $342 = $37;
 $343 = (($342) + 4|0);
 $23 = $343;
 $344 = $23;
 $345 = $47;
 $346 = $344;
 ;HEAP32[$345+0>>2]=HEAP32[$346+0>>2]|0;HEAP32[$345+4>>2]=HEAP32[$346+4>>2]|0;
 $tmp$i$i9 = $36;
 $tmp1$i$i10 = $47;
 ;HEAP8[$tmp$i$i9+0|0]=HEAP8[$tmp1$i$i10+0|0]|0;HEAP8[$tmp$i$i9+1|0]=HEAP8[$tmp1$i$i10+1|0]|0;HEAP8[$tmp$i$i9+2|0]=HEAP8[$tmp1$i$i10+2|0]|0;HEAP8[$tmp$i$i9+3|0]=HEAP8[$tmp1$i$i10+3|0]|0;HEAP8[$tmp$i$i9+4|0]=HEAP8[$tmp1$i$i10+4|0]|0;HEAP8[$tmp$i$i9+5|0]=HEAP8[$tmp1$i$i10+5|0]|0;HEAP8[$tmp$i$i9+6|0]=HEAP8[$tmp1$i$i10+6|0]|0;HEAP8[$tmp$i$i9+7|0]=HEAP8[$tmp1$i$i10+7|0]|0;
 $34 = $322;
 $35 = $336;
 $347 = $34;
 $348 = $35;
 $tmp$i$i$i11 = $__t21$i$i$i8;
 $tmp2$i$i$i12 = $36;
 ;HEAP8[$tmp$i$i$i11+0|0]=HEAP8[$tmp2$i$i$i12+0|0]|0;HEAP8[$tmp$i$i$i11+1|0]=HEAP8[$tmp2$i$i$i12+1|0]|0;HEAP8[$tmp$i$i$i11+2|0]=HEAP8[$tmp2$i$i$i12+2|0]|0;HEAP8[$tmp$i$i$i11+3|0]=HEAP8[$tmp2$i$i$i12+3|0]|0;HEAP8[$tmp$i$i$i11+4|0]=HEAP8[$tmp2$i$i$i12+4|0]|0;HEAP8[$tmp$i$i$i11+5|0]=HEAP8[$tmp2$i$i$i12+5|0]|0;HEAP8[$tmp$i$i$i11+6|0]=HEAP8[$tmp2$i$i$i12+6|0]|0;HEAP8[$tmp$i$i$i11+7|0]=HEAP8[$tmp2$i$i$i12+7|0]|0;
 $31 = $347;
 HEAP32[$32>>2] = $348;
 $349 = $31;
 $350 = $349;
 $30 = $32;
 $351 = $30;
 $352 = HEAP32[$351>>2]|0;
 $24 = $__t21$i$i$i8;
 $353 = $24;
 $354 = $33;
 $355 = $353;
 ;HEAP32[$354+0>>2]=HEAP32[$355+0>>2]|0;HEAP32[$354+4>>2]=HEAP32[$355+4>>2]|0;
 $tmp$i$i$i$i13 = $29;
 $tmp1$i$i$i$i14 = $33;
 ;HEAP8[$tmp$i$i$i$i13+0|0]=HEAP8[$tmp1$i$i$i$i14+0|0]|0;HEAP8[$tmp$i$i$i$i13+1|0]=HEAP8[$tmp1$i$i$i$i14+1|0]|0;HEAP8[$tmp$i$i$i$i13+2|0]=HEAP8[$tmp1$i$i$i$i14+2|0]|0;HEAP8[$tmp$i$i$i$i13+3|0]=HEAP8[$tmp1$i$i$i$i14+3|0]|0;HEAP8[$tmp$i$i$i$i13+4|0]=HEAP8[$tmp1$i$i$i$i14+4|0]|0;HEAP8[$tmp$i$i$i$i13+5|0]=HEAP8[$tmp1$i$i$i$i14+5|0]|0;HEAP8[$tmp$i$i$i$i13+6|0]=HEAP8[$tmp1$i$i$i$i14+6|0]|0;HEAP8[$tmp$i$i$i$i13+7|0]=HEAP8[$tmp1$i$i$i$i14+7|0]|0;
 $27 = $350;
 HEAP32[$28>>2] = $352;
 $356 = $27;
 $357 = ($356);
 $26 = $28;
 $358 = $26;
 $359 = HEAP32[$358>>2]|0;
 HEAP32[$357>>2] = $359;
 $360 = (($356) + 4|0);
 $25 = $29;
 $361 = $25;
 $362 = $360;
 $363 = $361;
 ;HEAP32[$362+0>>2]=HEAP32[$363+0>>2]|0;HEAP32[$362+4>>2]=HEAP32[$363+4>>2]|0;
 $176 = 1;
 $102 = $__h;
 $364 = $102;
 $101 = $364;
 $365 = $101;
 $99 = $365;
 $100 = 0;
 $366 = $99;
 $367 = ($366);
 $98 = $367;
 $368 = $98;
 $369 = $368;
 $97 = $369;
 $370 = $97;
 $371 = ($370);
 $372 = HEAP32[$371>>2]|0;
 $__tmp$i$i$i1 = $372;
 $373 = $100;
 $374 = ($366);
 $74 = $374;
 $375 = $74;
 $376 = $375;
 $73 = $376;
 $377 = $73;
 $378 = ($377);
 HEAP32[$378>>2] = $373;
 $379 = $__tmp$i$i$i1;
 $380 = ($379|0)!=(0|0);
 if (!($380)) {
  STACKTOP = sp;return;
 }
 $381 = ($366);
 $72 = $381;
 $382 = $72;
 $383 = $382;
 $71 = $383;
 $384 = $71;
 $385 = (($384) + 4|0);
 $386 = $__tmp$i$i$i1;
 $95 = $385;
 $96 = $386;
 $387 = $95;
 $388 = (($387) + 5|0);
 $389 = HEAP8[$388]|0;
 $390 = $389&1;
 if ($390) {
  $391 = ($387);
  $392 = HEAP32[$391>>2]|0;
  $393 = $96;
  $394 = (($393) + 8|0);
  $395 = $394;
  $396 = (($395) + 12|0);
  $94 = $396;
  $397 = $94;
  $398 = $397;
  $399 = $398;
  $91 = $392;
  $92 = $399;
  $400 = $91;
  $401 = $92;
  $tmp$i$i$i$i$i2 = $90;
  $tmp1$i$i$i$i$i3 = $93;
  ;HEAP8[$tmp$i$i$i$i$i2+0|0]=HEAP8[$tmp1$i$i$i$i$i3+0|0]|0;
  $88 = $400;
  $89 = $401;
  $402 = $89;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($402);
 }
 $403 = (($387) + 4|0);
 $404 = HEAP8[$403]|0;
 $405 = $404&1;
 if ($405) {
  $406 = ($387);
  $407 = HEAP32[$406>>2]|0;
  $408 = $96;
  $409 = (($408) + 8|0);
  $410 = $409;
  $411 = ($410);
  $87 = $411;
  $412 = $87;
  $413 = $412;
  $414 = $413;
  $78 = $407;
  $79 = $414;
  $415 = $78;
  $416 = $79;
  $tmp$i1$i$i$i$i4 = $77;
  $tmp1$i2$i$i$i$i5 = $80;
  ;HEAP8[$tmp$i1$i$i$i$i4+0|0]=HEAP8[$tmp1$i2$i$i$i$i5+0|0]|0;
  $75 = $415;
  $76 = $416;
  $417 = $76;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($417);
 }
 $418 = $96;
 $419 = ($418|0)!=(0|0);
 if ($419) {
  $420 = ($387);
  $421 = HEAP32[$420>>2]|0;
  $422 = $96;
  $84 = $421;
  $85 = $422;
  $86 = 1;
  $423 = $84;
  $424 = $85;
  $425 = $86;
  $81 = $423;
  $82 = $424;
  $83 = $425;
  $426 = $82;
  $427 = $426;
  __ZdlPv($427);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS8_PvEE($agg$result,$this,$__nd) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__nd = $__nd|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0.0, $487 = 0, $488 = 0.0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0.0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0.0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0.0, $531 = 0.0, $532 = 0.0, $533 = 0.0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__inserted = 0, $__lhs_sz$i$i$i = 0, $__lp$i$i$i = 0, $__ndptr = 0, $__pn = 0, $__rp$i$i$i = 0, $tmp$i = 0, $tmp1$i = 0, label = 0, sp = 0;
 var u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1312|0;
 $94 = sp + 768|0;
 $97 = sp + 792|0;
 $__inserted = sp + 1256|0;
 $154 = sp + 1280|0;
 $155 = sp + 1288|0;
 $156 = sp + 1304|0;
 $152 = $this;
 $153 = $__nd;
 $157 = $152;
 $151 = $157;
 $158 = $151;
 $159 = (($158) + 12|0);
 $150 = $159;
 $160 = $150;
 $161 = $160;
 $149 = $161;
 $162 = $149;
 $163 = $162;
 $164 = $153;
 $165 = (($164) + 8|0);
 $105 = $163;
 $106 = $165;
 $166 = $105;
 $167 = $166;
 $168 = $106;
 $169 = $168;
 $170 = ($169);
 $171 = (__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($167,$170)|0);
 $172 = $153;
 $173 = (($172) + 4|0);
 HEAP32[$173>>2] = $171;
 $104 = $157;
 $174 = $104;
 $175 = ($174);
 $103 = $175;
 $176 = $103;
 $177 = ($176);
 $102 = $177;
 $178 = $102;
 $179 = $178;
 $101 = $179;
 $180 = $101;
 $181 = (($180) + 4|0);
 $100 = $181;
 $182 = $100;
 $183 = ($182);
 $99 = $183;
 $184 = $99;
 $185 = $184;
 $98 = $185;
 $186 = $98;
 $187 = ($186);
 $188 = HEAP32[$187>>2]|0;
 $__bc = $188;
 HEAP8[$__inserted] = 0;
 $189 = $__bc;
 $190 = ($189|0)!=(0);
 if ($190) {
  $191 = $153;
  $192 = (($191) + 4|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = $__bc;
  $86 = $193;
  $87 = $194;
  $195 = $87;
  $196 = $87;
  $197 = (($196) - 1)|0;
  $198 = $195 & $197;
  $199 = ($198|0)!=(0);
  if ($199) {
   $204 = $86;
   $205 = $87;
   $206 = (($204>>>0) % ($205>>>0))&-1;
   $207 = $206;
  } else {
   $200 = $86;
   $201 = $87;
   $202 = (($201) - 1)|0;
   $203 = $200 & $202;
   $207 = $203;
  }
  $__chash = $207;
  $208 = ($157);
  $209 = $__chash;
  $8 = $208;
  $9 = $209;
  $210 = $8;
  $211 = $9;
  $212 = ($210);
  $7 = $212;
  $213 = $7;
  $214 = $213;
  $6 = $214;
  $215 = $6;
  $216 = ($215);
  $217 = HEAP32[$216>>2]|0;
  $218 = (($217) + ($211<<2)|0);
  $219 = HEAP32[$218>>2]|0;
  $__ndptr = $219;
  $220 = $__ndptr;
  $221 = ($220|0)!=(0|0);
  do {
   if ($221) {
    $222 = $__ndptr;
    $223 = $222;
    $224 = ($223);
    $225 = HEAP32[$224>>2]|0;
    $__ndptr = $225;
    L9: while(1) {
     $226 = $__ndptr;
     $227 = ($226|0)!=(0|0);
     if ($227) {
      $228 = $__ndptr;
      $229 = (($228) + 4|0);
      $230 = HEAP32[$229>>2]|0;
      $231 = $__bc;
      $4 = $230;
      $5 = $231;
      $232 = $5;
      $233 = $5;
      $234 = (($233) - 1)|0;
      $235 = $232 & $234;
      $236 = ($235|0)!=(0);
      if ($236) {
       $241 = $4;
       $242 = $5;
       $243 = (($241>>>0) % ($242>>>0))&-1;
       $244 = $243;
      } else {
       $237 = $4;
       $238 = $5;
       $239 = (($238) - 1)|0;
       $240 = $237 & $239;
       $244 = $240;
      }
      $245 = $__chash;
      $246 = ($244|0)==($245|0);
      $247 = $246;
     } else {
      $247 = 0;
     }
     if (!($247)) {
      label = 41;
      break;
     }
     $3 = $157;
     $248 = $3;
     $249 = (($248) + 16|0);
     $2 = $249;
     $250 = $2;
     $251 = $250;
     $1 = $251;
     $252 = $1;
     $253 = $252;
     $254 = $__ndptr;
     $255 = (($254) + 8|0);
     $256 = $153;
     $257 = (($256) + 8|0);
     $70 = $253;
     $71 = $255;
     $72 = $257;
     $258 = $70;
     $259 = $258;
     $260 = $71;
     $261 = $260;
     $262 = ($261);
     $263 = $72;
     $264 = $263;
     $265 = ($264);
     $67 = $259;
     $68 = $262;
     $69 = $265;
     $266 = $68;
     $267 = $69;
     $65 = $266;
     $66 = $267;
     $268 = $65;
     $63 = $268;
     $269 = $63;
     $62 = $269;
     $270 = $62;
     $271 = ($270);
     $61 = $271;
     $272 = $61;
     $273 = $272;
     $60 = $273;
     $274 = $60;
     $275 = ($274);
     $276 = ($275);
     $277 = $276;
     $278 = ($277);
     $279 = $278;
     $280 = HEAP8[$279]|0;
     $281 = $280&255;
     $282 = $281 & 1;
     $283 = ($282|0)!=(0);
     if ($283) {
      $56 = $269;
      $284 = $56;
      $285 = ($284);
      $55 = $285;
      $286 = $55;
      $287 = $286;
      $54 = $287;
      $288 = $54;
      $289 = ($288);
      $290 = ($289);
      $291 = $290;
      $292 = (($291) + 4|0);
      $293 = HEAP32[$292>>2]|0;
      $307 = $293;
     } else {
      $59 = $269;
      $294 = $59;
      $295 = ($294);
      $58 = $295;
      $296 = $58;
      $297 = $296;
      $57 = $297;
      $298 = $57;
      $299 = ($298);
      $300 = ($299);
      $301 = $300;
      $302 = ($301);
      $303 = $302;
      $304 = HEAP8[$303]|0;
      $305 = $304&255;
      $306 = $305 >> 1;
      $307 = $306;
     }
     $__lhs_sz$i$i$i = $307;
     $308 = $__lhs_sz$i$i$i;
     $309 = $66;
     $53 = $309;
     $310 = $53;
     $52 = $310;
     $311 = $52;
     $312 = ($311);
     $51 = $312;
     $313 = $51;
     $314 = $313;
     $50 = $314;
     $315 = $50;
     $316 = ($315);
     $317 = ($316);
     $318 = $317;
     $319 = ($318);
     $320 = $319;
     $321 = HEAP8[$320]|0;
     $322 = $321&255;
     $323 = $322 & 1;
     $324 = ($323|0)!=(0);
     if ($324) {
      $46 = $310;
      $325 = $46;
      $326 = ($325);
      $45 = $326;
      $327 = $45;
      $328 = $327;
      $44 = $328;
      $329 = $44;
      $330 = ($329);
      $331 = ($330);
      $332 = $331;
      $333 = (($332) + 4|0);
      $334 = HEAP32[$333>>2]|0;
      $348 = $334;
     } else {
      $49 = $310;
      $335 = $49;
      $336 = ($335);
      $48 = $336;
      $337 = $48;
      $338 = $337;
      $47 = $338;
      $339 = $47;
      $340 = ($339);
      $341 = ($340);
      $342 = $341;
      $343 = ($342);
      $344 = $343;
      $345 = HEAP8[$344]|0;
      $346 = $345&255;
      $347 = $346 >> 1;
      $348 = $347;
     }
     $349 = ($308|0)!=($348|0);
     do {
      if ($349) {
       $$expand_i1_val = 0;
       $64 = $$expand_i1_val;
      } else {
       $350 = $65;
       $40 = $350;
       $351 = $40;
       $39 = $351;
       $352 = $39;
       $38 = $352;
       $353 = $38;
       $354 = ($353);
       $37 = $354;
       $355 = $37;
       $356 = $355;
       $36 = $356;
       $357 = $36;
       $358 = ($357);
       $359 = ($358);
       $360 = $359;
       $361 = ($360);
       $362 = $361;
       $363 = HEAP8[$362]|0;
       $364 = $363&255;
       $365 = $364 & 1;
       $366 = ($365|0)!=(0);
       if ($366) {
        $30 = $352;
        $367 = $30;
        $368 = ($367);
        $29 = $368;
        $369 = $29;
        $370 = $369;
        $28 = $370;
        $371 = $28;
        $372 = ($371);
        $373 = ($372);
        $374 = $373;
        $375 = (($374) + 8|0);
        $376 = HEAP32[$375>>2]|0;
        $389 = $376;
       } else {
        $35 = $352;
        $377 = $35;
        $378 = ($377);
        $34 = $378;
        $379 = $34;
        $380 = $379;
        $33 = $380;
        $381 = $33;
        $382 = ($381);
        $383 = ($382);
        $384 = $383;
        $385 = (($384) + 1|0);
        $386 = ($385);
        $32 = $386;
        $387 = $32;
        $31 = $387;
        $388 = $31;
        $389 = $388;
       }
       $27 = $389;
       $390 = $27;
       $__lp$i$i$i = $390;
       $391 = $66;
       $23 = $391;
       $392 = $23;
       $22 = $392;
       $393 = $22;
       $21 = $393;
       $394 = $21;
       $395 = ($394);
       $20 = $395;
       $396 = $20;
       $397 = $396;
       $19 = $397;
       $398 = $19;
       $399 = ($398);
       $400 = ($399);
       $401 = $400;
       $402 = ($401);
       $403 = $402;
       $404 = HEAP8[$403]|0;
       $405 = $404&255;
       $406 = $405 & 1;
       $407 = ($406|0)!=(0);
       if ($407) {
        $13 = $393;
        $408 = $13;
        $409 = ($408);
        $12 = $409;
        $410 = $12;
        $411 = $410;
        $11 = $411;
        $412 = $11;
        $413 = ($412);
        $414 = ($413);
        $415 = $414;
        $416 = (($415) + 8|0);
        $417 = HEAP32[$416>>2]|0;
        $430 = $417;
       } else {
        $18 = $393;
        $418 = $18;
        $419 = ($418);
        $17 = $419;
        $420 = $17;
        $421 = $420;
        $16 = $421;
        $422 = $16;
        $423 = ($422);
        $424 = ($423);
        $425 = $424;
        $426 = (($425) + 1|0);
        $427 = ($426);
        $15 = $427;
        $428 = $15;
        $14 = $428;
        $429 = $14;
        $430 = $429;
       }
       $10 = $430;
       $431 = $10;
       $__rp$i$i$i = $431;
       $432 = $65;
       $26 = $432;
       $433 = $26;
       $434 = ($433);
       $25 = $434;
       $435 = $25;
       $436 = $435;
       $24 = $436;
       $437 = $24;
       $438 = ($437);
       $439 = ($438);
       $440 = $439;
       $441 = ($440);
       $442 = $441;
       $443 = HEAP8[$442]|0;
       $444 = $443&255;
       $445 = $444 & 1;
       $446 = ($445|0)!=(0);
       if ($446) {
        $447 = $__lp$i$i$i;
        $448 = $__rp$i$i$i;
        $449 = $__lhs_sz$i$i$i;
        $41 = $447;
        $42 = $448;
        $43 = $449;
        $450 = $41;
        $451 = $42;
        $452 = $43;
        __THREW__ = 0;
        $453 = (invoke_iiii(25,($450|0),($451|0),($452|0))|0);
        $454 = __THREW__; __THREW__ = 0;
        $455 = $454&1;
        if ($455) {
         label = 36;
         break L9;
        }
        $456 = ($453|0)==(0);
        $$expand_i1_val2 = $456&1;
        $64 = $$expand_i1_val2;
        break;
       }
       while(1) {
        $457 = $__lhs_sz$i$i$i;
        $458 = ($457|0)!=(0);
        if (!($458)) {
         label = 35;
         break;
        }
        $459 = $__lp$i$i$i;
        $460 = HEAP8[$459]|0;
        $461 = $460 << 24 >> 24;
        $462 = $__rp$i$i$i;
        $463 = HEAP8[$462]|0;
        $464 = $463 << 24 >> 24;
        $465 = ($461|0)!=($464|0);
        if ($465) {
         label = 33;
         break;
        }
        $466 = $__lhs_sz$i$i$i;
        $467 = (($466) + -1)|0;
        $__lhs_sz$i$i$i = $467;
        $468 = $__lp$i$i$i;
        $469 = (($468) + 1|0);
        $__lp$i$i$i = $469;
        $470 = $__rp$i$i$i;
        $471 = (($470) + 1|0);
        $__rp$i$i$i = $471;
       }
       if ((label|0) == 33) {
        label = 0;
        $$expand_i1_val4 = 0;
        $64 = $$expand_i1_val4;
        break;
       }
       else if ((label|0) == 35) {
        label = 0;
        $$expand_i1_val6 = 1;
        $64 = $$expand_i1_val6;
        break;
       }
      }
     } while(0);
     $$pre_trunc = $64;
     $473 = $$pre_trunc&1;
     if ($473) {
      label = 38;
      break;
     }
     $474 = $__ndptr;
     $475 = $474;
     $476 = ($475);
     $477 = HEAP32[$476>>2]|0;
     $__ndptr = $477;
    }
    if ((label|0) == 36) {
     $472 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$0 = tempRet0;
     ___clang_call_terminate($472);
     // unreachable;
    }
    else if ((label|0) == 38) {
     $683 = $__ndptr;
     $139 = $156;
     $140 = $683;
     $684 = $139;
     $685 = $140;
     $137 = $684;
     $138 = $685;
     $686 = $137;
     $687 = ($686);
     $688 = $138;
     HEAP32[$687>>2] = $688;
     $146 = $agg$result;
     $147 = $156;
     $148 = $__inserted;
     $689 = $146;
     $690 = $148;
     $691 = $147;
     $143 = $689;
     $144 = $691;
     $145 = $690;
     $692 = $143;
     $693 = ($692);
     $694 = $144;
     $142 = $694;
     $695 = $142;
     $696 = $693;
     $697 = $695;
     ;HEAP32[$696+0>>2]=HEAP32[$697+0>>2]|0;
     $698 = (($692) + 4|0);
     $699 = $145;
     $141 = $699;
     $700 = $141;
     $701 = HEAP8[$700]|0;
     $702 = $701&1;
     $703 = $702&1;
     HEAP8[$698] = $703;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 41) {
     break;
    }
   }
  } while(0);
 }
 $75 = $157;
 $478 = $75;
 $479 = (($478) + 12|0);
 $74 = $479;
 $480 = $74;
 $481 = $480;
 $73 = $481;
 $482 = $73;
 $483 = ($482);
 $484 = HEAP32[$483>>2]|0;
 $485 = (($484) + 1)|0;
 $486 = (+($485>>>0));
 $487 = $__bc;
 $488 = (+($487>>>0));
 $78 = $157;
 $489 = $78;
 $490 = (($489) + 16|0);
 $77 = $490;
 $491 = $77;
 $492 = $491;
 $76 = $492;
 $493 = $76;
 $494 = ($493);
 $495 = +HEAPF32[$494>>2];
 $496 = $488 * $495;
 $497 = $486 > $496;
 if ($497) {
  label = 45;
 } else {
  $498 = $__bc;
  $499 = ($498|0)==(0);
  if ($499) {
   label = 45;
  }
 }
 if ((label|0) == 45) {
  $500 = $__bc;
  $501 = $500<<1;
  $502 = $__bc;
  $79 = $502;
  $503 = $79;
  $504 = ($503>>>0)>(2);
  if ($504) {
   $505 = $79;
   $506 = $79;
   $507 = (($506) - 1)|0;
   $508 = $505 & $507;
   $509 = ($508|0)!=(0);
   $510 = $509 ^ 1;
   $511 = $510;
  } else {
   $511 = 0;
  }
  $512 = $511 ^ 1;
  $513 = $512&1;
  $514 = (($501) + ($513))|0;
  HEAP32[$154>>2] = $514;
  $82 = $157;
  $515 = $82;
  $516 = (($515) + 12|0);
  $81 = $516;
  $517 = $81;
  $518 = $517;
  $80 = $518;
  $519 = $80;
  $520 = ($519);
  $521 = HEAP32[$520>>2]|0;
  $522 = (($521) + 1)|0;
  $523 = (+($522>>>0));
  $85 = $157;
  $524 = $85;
  $525 = (($524) + 16|0);
  $84 = $525;
  $526 = $84;
  $527 = $526;
  $83 = $527;
  $528 = $83;
  $529 = ($528);
  $530 = +HEAPF32[$529>>2];
  $531 = $523 / $530;
  $88 = $531;
  $532 = $88;
  $533 = (+Math_ceil((+$532)));
  $534 = (~~(($533))>>>0);
  HEAP32[$155>>2] = $534;
  $95 = $154;
  $96 = $155;
  $535 = $95;
  $536 = $96;
  $tmp$i = $94;
  $tmp1$i = $97;
  ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
  $92 = $535;
  $93 = $536;
  $537 = $92;
  $538 = $93;
  $89 = $94;
  $90 = $537;
  $91 = $538;
  $539 = $90;
  $540 = HEAP32[$539>>2]|0;
  $541 = $91;
  $542 = HEAP32[$541>>2]|0;
  $543 = ($540>>>0)<($542>>>0);
  if ($543) {
   $544 = $93;
   $546 = $544;
  } else {
   $545 = $92;
   $546 = $545;
  }
  $547 = HEAP32[$546>>2]|0;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEj($157,$547);
  $113 = $157;
  $548 = $113;
  $549 = ($548);
  $112 = $549;
  $550 = $112;
  $551 = ($550);
  $111 = $551;
  $552 = $111;
  $553 = $552;
  $110 = $553;
  $554 = $110;
  $555 = (($554) + 4|0);
  $109 = $555;
  $556 = $109;
  $557 = ($556);
  $108 = $557;
  $558 = $108;
  $559 = $558;
  $107 = $559;
  $560 = $107;
  $561 = ($560);
  $562 = HEAP32[$561>>2]|0;
  $__bc = $562;
  $563 = $153;
  $564 = (($563) + 4|0);
  $565 = HEAP32[$564>>2]|0;
  $566 = $__bc;
  $114 = $565;
  $115 = $566;
  $567 = $115;
  $568 = $115;
  $569 = (($568) - 1)|0;
  $570 = $567 & $569;
  $571 = ($570|0)!=(0);
  if ($571) {
   $576 = $114;
   $577 = $115;
   $578 = (($576>>>0) % ($577>>>0))&-1;
   $579 = $578;
  } else {
   $572 = $114;
   $573 = $115;
   $574 = (($573) - 1)|0;
   $575 = $572 & $574;
   $579 = $575;
  }
  $__chash = $579;
 }
 $580 = ($157);
 $581 = $__chash;
 $118 = $580;
 $119 = $581;
 $582 = $118;
 $583 = $119;
 $584 = ($582);
 $117 = $584;
 $585 = $117;
 $586 = $585;
 $116 = $586;
 $587 = $116;
 $588 = ($587);
 $589 = HEAP32[$588>>2]|0;
 $590 = (($589) + ($583<<2)|0);
 $591 = HEAP32[$590>>2]|0;
 $__pn = $591;
 $592 = $__pn;
 $593 = ($592|0)==(0|0);
 if ($593) {
  $594 = (($157) + 8|0);
  $121 = $594;
  $595 = $121;
  $596 = $595;
  $120 = $596;
  $597 = $120;
  $598 = ($597);
  $123 = $598;
  $599 = $123;
  $122 = $599;
  $600 = $122;
  $601 = $600;
  $602 = $601;
  $603 = $602;
  $__pn = $603;
  $604 = $__pn;
  $605 = $604;
  $606 = ($605);
  $607 = HEAP32[$606>>2]|0;
  $608 = $153;
  $609 = $608;
  $610 = ($609);
  HEAP32[$610>>2] = $607;
  $611 = $153;
  $612 = $__pn;
  $613 = $612;
  $614 = ($613);
  HEAP32[$614>>2] = $611;
  $615 = $__pn;
  $616 = ($157);
  $617 = $__chash;
  $126 = $616;
  $127 = $617;
  $618 = $126;
  $619 = $127;
  $620 = ($618);
  $125 = $620;
  $621 = $125;
  $622 = $621;
  $124 = $622;
  $623 = $124;
  $624 = ($623);
  $625 = HEAP32[$624>>2]|0;
  $626 = (($625) + ($619<<2)|0);
  HEAP32[$626>>2] = $615;
  $627 = $153;
  $628 = $627;
  $629 = ($628);
  $630 = HEAP32[$629>>2]|0;
  $631 = ($630|0)!=(0|0);
  if ($631) {
   $632 = $153;
   $633 = ($157);
   $634 = $153;
   $635 = $634;
   $636 = ($635);
   $637 = HEAP32[$636>>2]|0;
   $638 = (($637) + 4|0);
   $639 = HEAP32[$638>>2]|0;
   $640 = $__bc;
   $128 = $639;
   $129 = $640;
   $641 = $129;
   $642 = $129;
   $643 = (($642) - 1)|0;
   $644 = $641 & $643;
   $645 = ($644|0)!=(0);
   if ($645) {
    $650 = $128;
    $651 = $129;
    $652 = (($650>>>0) % ($651>>>0))&-1;
    $653 = $652;
   } else {
    $646 = $128;
    $647 = $129;
    $648 = (($647) - 1)|0;
    $649 = $646 & $648;
    $653 = $649;
   }
   $132 = $633;
   $133 = $653;
   $654 = $132;
   $655 = $133;
   $656 = ($654);
   $131 = $656;
   $657 = $131;
   $658 = $657;
   $130 = $658;
   $659 = $130;
   $660 = ($659);
   $661 = HEAP32[$660>>2]|0;
   $662 = (($661) + ($655<<2)|0);
   HEAP32[$662>>2] = $632;
  }
 } else {
  $663 = $__pn;
  $664 = $663;
  $665 = ($664);
  $666 = HEAP32[$665>>2]|0;
  $667 = $153;
  $668 = $667;
  $669 = ($668);
  HEAP32[$669>>2] = $666;
  $670 = $153;
  $671 = $__pn;
  $672 = $671;
  $673 = ($672);
  HEAP32[$673>>2] = $670;
 }
 $674 = $153;
 $__ndptr = $674;
 $136 = $157;
 $675 = $136;
 $676 = (($675) + 12|0);
 $135 = $676;
 $677 = $135;
 $678 = $677;
 $134 = $678;
 $679 = $134;
 $680 = ($679);
 $681 = HEAP32[$680>>2]|0;
 $682 = (($681) + 1)|0;
 HEAP32[$680>>2] = $682;
 HEAP8[$__inserted] = 1;
 $683 = $__ndptr;
 $139 = $156;
 $140 = $683;
 $684 = $139;
 $685 = $140;
 $137 = $684;
 $138 = $685;
 $686 = $137;
 $687 = ($686);
 $688 = $138;
 HEAP32[$687>>2] = $688;
 $146 = $agg$result;
 $147 = $156;
 $148 = $__inserted;
 $689 = $146;
 $690 = $148;
 $691 = $147;
 $143 = $689;
 $144 = $691;
 $145 = $690;
 $692 = $143;
 $693 = ($692);
 $694 = $144;
 $142 = $694;
 $695 = $142;
 $696 = $693;
 $697 = $695;
 ;HEAP32[$696+0>>2]=HEAP32[$697+0>>2]|0;
 $698 = (($692) + 4|0);
 $699 = $145;
 $141 = $699;
 $700 = $141;
 $701 = HEAP8[$700]|0;
 $702 = $701&1;
 $703 = $702&1;
 HEAP8[$698] = $703;
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0;
 var $99 = 0, $__bc = 0, $tmp$i = 0, $tmp1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 296|0;
 $22 = sp + 168|0;
 $25 = sp + 192|0;
 $35 = sp + 272|0;
 $36 = sp + 288|0;
 $34 = $this;
 HEAP32[$35>>2] = $__n;
 $37 = $34;
 $38 = HEAP32[$35>>2]|0;
 $39 = ($38|0)==(1);
 if ($39) {
  HEAP32[$35>>2] = 2;
 } else {
  $40 = HEAP32[$35>>2]|0;
  $41 = HEAP32[$35>>2]|0;
  $42 = (($41) - 1)|0;
  $43 = $40 & $42;
  $44 = ($43|0)!=(0);
  if ($44) {
   $45 = HEAP32[$35>>2]|0;
   $46 = (__ZNSt3__112__next_primeEj($45)|0);
   HEAP32[$35>>2] = $46;
  }
 }
 $33 = $37;
 $47 = $33;
 $48 = ($47);
 $32 = $48;
 $49 = $32;
 $50 = ($49);
 $31 = $50;
 $51 = $31;
 $52 = $51;
 $30 = $52;
 $53 = $30;
 $54 = (($53) + 4|0);
 $29 = $54;
 $55 = $29;
 $56 = ($55);
 $28 = $56;
 $57 = $28;
 $58 = $57;
 $27 = $58;
 $59 = $27;
 $60 = ($59);
 $61 = HEAP32[$60>>2]|0;
 $__bc = $61;
 $62 = HEAP32[$35>>2]|0;
 $63 = $__bc;
 $64 = ($62>>>0)>($63>>>0);
 if ($64) {
  $65 = HEAP32[$35>>2]|0;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($37,$65);
  STACKTOP = sp;return;
 }
 $66 = HEAP32[$35>>2]|0;
 $67 = $__bc;
 $68 = ($66>>>0)<($67>>>0);
 if ($68) {
  $69 = $__bc;
  $26 = $69;
  $70 = $26;
  $71 = ($70>>>0)>(2);
  if ($71) {
   $72 = $26;
   $73 = $26;
   $74 = (($73) - 1)|0;
   $75 = $72 & $74;
   $76 = ($75|0)!=(0);
   $77 = $76 ^ 1;
   $78 = $77;
  } else {
   $78 = 0;
  }
  if ($78) {
   $15 = $37;
   $79 = $15;
   $80 = (($79) + 12|0);
   $14 = $80;
   $81 = $14;
   $82 = $81;
   $13 = $82;
   $83 = $13;
   $84 = ($83);
   $85 = HEAP32[$84>>2]|0;
   $86 = (+($85>>>0));
   $3 = $37;
   $87 = $3;
   $88 = (($87) + 16|0);
   $2 = $88;
   $89 = $2;
   $90 = $89;
   $1 = $90;
   $91 = $1;
   $92 = ($91);
   $93 = +HEAPF32[$92>>2];
   $94 = $86 / $93;
   $4 = $94;
   $95 = $4;
   $96 = (+Math_ceil((+$95)));
   $97 = (~~(($96))>>>0);
   $6 = $97;
   $98 = $6;
   $99 = (($98) - 1)|0;
   $5 = $99;
   $100 = $5;
   $101 = (_llvm_ctlz_i32(($100|0))|0);
   $102 = (32 - ($101))|0;
   $103 = 1 << $102;
   $124 = $103;
  } else {
   $9 = $37;
   $104 = $9;
   $105 = (($104) + 12|0);
   $8 = $105;
   $106 = $8;
   $107 = $106;
   $7 = $107;
   $108 = $7;
   $109 = ($108);
   $110 = HEAP32[$109>>2]|0;
   $111 = (+($110>>>0));
   $12 = $37;
   $112 = $12;
   $113 = (($112) + 16|0);
   $11 = $113;
   $114 = $11;
   $115 = $114;
   $10 = $115;
   $116 = $10;
   $117 = ($116);
   $118 = +HEAPF32[$117>>2];
   $119 = $111 / $118;
   $16 = $119;
   $120 = $16;
   $121 = (+Math_ceil((+$120)));
   $122 = (~~(($121))>>>0);
   $123 = (__ZNSt3__112__next_primeEj($122)|0);
   $124 = $123;
  }
  HEAP32[$36>>2] = $124;
  $23 = $35;
  $24 = $36;
  $125 = $23;
  $126 = $24;
  $tmp$i = $22;
  $tmp1$i = $25;
  ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
  $20 = $125;
  $21 = $126;
  $127 = $20;
  $128 = $21;
  $17 = $22;
  $18 = $127;
  $19 = $128;
  $129 = $18;
  $130 = HEAP32[$129>>2]|0;
  $131 = $19;
  $132 = HEAP32[$131>>2]|0;
  $133 = ($130>>>0)<($132>>>0);
  if ($133) {
   $134 = $21;
   $136 = $134;
  } else {
   $135 = $20;
   $136 = $135;
  }
  $137 = HEAP32[$136>>2]|0;
  HEAP32[$35>>2] = $137;
  $138 = HEAP32[$35>>2]|0;
  $139 = $__bc;
  $140 = ($138>>>0)<($139>>>0);
  if ($140) {
   $141 = HEAP32[$35>>2]|0;
   __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($37,$141);
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($this,$__nbc) {
 $this = $this|0;
 $__nbc = $__nbc|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__chash = 0, $__cp = 0, $__i = 0, $__lhs_sz$i$i$i = 0, $__lp$i$i$i = 0, $__np = 0, $__npa = 0, $__phash = 0, $__pp = 0, $__rp$i$i$i = 0, $__tmp$i = 0, label = 0;
 var sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1200|0;
 $138 = $this;
 $139 = $__nbc;
 $140 = $138;
 $141 = ($140);
 $137 = $141;
 $142 = $137;
 $143 = ($142);
 $136 = $143;
 $144 = $136;
 $145 = $144;
 $135 = $145;
 $146 = $135;
 $147 = (($146) + 4|0);
 $63 = $147;
 $148 = $63;
 $149 = ($148);
 $62 = $149;
 $150 = $62;
 $151 = $150;
 $61 = $151;
 $152 = $61;
 $153 = $152;
 $__npa = $153;
 $154 = ($140);
 $155 = $139;
 $156 = ($155>>>0)>(0);
 if ($156) {
  $157 = $__npa;
  $158 = $139;
  $59 = $157;
  $60 = $158;
  $159 = $59;
  $160 = $60;
  $56 = $159;
  $57 = $160;
  $58 = 0;
  $161 = $57;
  $162 = $161<<2;
  $163 = (__Znwj($162)|0);
  $164 = $163;
  $165 = $164;
 } else {
  $165 = 0;
 }
 $54 = $154;
 $55 = $165;
 $166 = $54;
 $167 = ($166);
 $53 = $167;
 $168 = $53;
 $169 = $168;
 $52 = $169;
 $170 = $52;
 $171 = ($170);
 $172 = HEAP32[$171>>2]|0;
 $__tmp$i = $172;
 $173 = $55;
 $174 = ($166);
 $37 = $174;
 $175 = $37;
 $176 = $175;
 $36 = $176;
 $177 = $36;
 $178 = ($177);
 HEAP32[$178>>2] = $173;
 $179 = $__tmp$i;
 $180 = ($179|0)!=(0|0);
 if ($180) {
  $181 = ($166);
  $35 = $181;
  $182 = $35;
  $183 = $182;
  $34 = $183;
  $184 = $34;
  $185 = (($184) + 4|0);
  $186 = $__tmp$i;
  $50 = $185;
  $51 = $186;
  $187 = $50;
  $49 = $187;
  $188 = $49;
  $189 = ($188);
  $48 = $189;
  $190 = $48;
  $191 = $190;
  $47 = $191;
  $192 = $47;
  $193 = $192;
  $194 = $51;
  $40 = $187;
  $195 = $40;
  $196 = ($195);
  $39 = $196;
  $197 = $39;
  $198 = $197;
  $38 = $198;
  $199 = $38;
  $200 = ($199);
  $201 = HEAP32[$200>>2]|0;
  $44 = $193;
  $45 = $194;
  $46 = $201;
  $202 = $44;
  $203 = $45;
  $204 = $46;
  $41 = $202;
  $42 = $203;
  $43 = $204;
  $205 = $42;
  $206 = $205;
  __ZdlPv($206);
 }
 $207 = $139;
 $208 = ($140);
 $33 = $208;
 $209 = $33;
 $210 = ($209);
 $32 = $210;
 $211 = $32;
 $212 = $211;
 $31 = $212;
 $213 = $31;
 $214 = (($213) + 4|0);
 $3 = $214;
 $215 = $3;
 $216 = ($215);
 $2 = $216;
 $217 = $2;
 $218 = $217;
 $1 = $218;
 $219 = $1;
 $220 = ($219);
 HEAP32[$220>>2] = $207;
 $221 = $139;
 $222 = ($221>>>0)>(0);
 if (!($222)) {
  STACKTOP = sp;return;
 }
 $__i = 0;
 while(1) {
  $223 = $__i;
  $224 = $139;
  $225 = ($223>>>0)<($224>>>0);
  if (!($225)) {
   break;
  }
  $226 = ($140);
  $227 = $__i;
  $6 = $226;
  $7 = $227;
  $228 = $6;
  $229 = $7;
  $230 = ($228);
  $5 = $230;
  $231 = $5;
  $232 = $231;
  $4 = $232;
  $233 = $4;
  $234 = ($233);
  $235 = HEAP32[$234>>2]|0;
  $236 = (($235) + ($229<<2)|0);
  HEAP32[$236>>2] = 0;
  $237 = $__i;
  $238 = (($237) + 1)|0;
  $__i = $238;
 }
 $239 = (($140) + 8|0);
 $9 = $239;
 $240 = $9;
 $241 = $240;
 $8 = $241;
 $242 = $8;
 $243 = ($242);
 $11 = $243;
 $244 = $11;
 $10 = $244;
 $245 = $10;
 $246 = $245;
 $247 = $246;
 $248 = $247;
 $__pp = $248;
 $249 = $__pp;
 $250 = $249;
 $251 = ($250);
 $252 = HEAP32[$251>>2]|0;
 $__cp = $252;
 $253 = $__cp;
 $254 = ($253|0)!=(0|0);
 do {
  if ($254) {
   $255 = $__cp;
   $256 = (($255) + 4|0);
   $257 = HEAP32[$256>>2]|0;
   $258 = $139;
   $12 = $257;
   $13 = $258;
   $259 = $13;
   $260 = $13;
   $261 = (($260) - 1)|0;
   $262 = $259 & $261;
   $263 = ($262|0)!=(0);
   if ($263) {
    $268 = $12;
    $269 = $13;
    $270 = (($268>>>0) % ($269>>>0))&-1;
    $271 = $270;
   } else {
    $264 = $12;
    $265 = $13;
    $266 = (($265) - 1)|0;
    $267 = $264 & $266;
    $271 = $267;
   }
   $__chash = $271;
   $272 = $__pp;
   $273 = ($140);
   $274 = $__chash;
   $16 = $273;
   $17 = $274;
   $275 = $16;
   $276 = $17;
   $277 = ($275);
   $15 = $277;
   $278 = $15;
   $279 = $278;
   $14 = $279;
   $280 = $14;
   $281 = ($280);
   $282 = HEAP32[$281>>2]|0;
   $283 = (($282) + ($276<<2)|0);
   HEAP32[$283>>2] = $272;
   $284 = $__chash;
   $__phash = $284;
   $285 = $__cp;
   $__pp = $285;
   $286 = $__cp;
   $287 = $286;
   $288 = ($287);
   $289 = HEAP32[$288>>2]|0;
   $__cp = $289;
   L22: while(1) {
    $290 = $__cp;
    $291 = ($290|0)!=(0|0);
    if (!($291)) {
     label = 58;
     break;
    }
    $292 = $__cp;
    $293 = (($292) + 4|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = $139;
    $18 = $294;
    $19 = $295;
    $296 = $19;
    $297 = $19;
    $298 = (($297) - 1)|0;
    $299 = $296 & $298;
    $300 = ($299|0)!=(0);
    if ($300) {
     $305 = $18;
     $306 = $19;
     $307 = (($305>>>0) % ($306>>>0))&-1;
     $308 = $307;
    } else {
     $301 = $18;
     $302 = $19;
     $303 = (($302) - 1)|0;
     $304 = $301 & $303;
     $308 = $304;
    }
    $__chash = $308;
    $309 = $__chash;
    $310 = $__phash;
    $311 = ($309|0)==($310|0);
    if ($311) {
     $312 = $__cp;
     $__pp = $312;
    } else {
     $313 = ($140);
     $314 = $__chash;
     $22 = $313;
     $23 = $314;
     $315 = $22;
     $316 = $23;
     $317 = ($315);
     $21 = $317;
     $318 = $21;
     $319 = $318;
     $20 = $319;
     $320 = $20;
     $321 = ($320);
     $322 = HEAP32[$321>>2]|0;
     $323 = (($322) + ($316<<2)|0);
     $324 = HEAP32[$323>>2]|0;
     $325 = ($324|0)==(0|0);
     if ($325) {
      $326 = $__pp;
      $327 = ($140);
      $328 = $__chash;
      $26 = $327;
      $27 = $328;
      $329 = $26;
      $330 = $27;
      $331 = ($329);
      $25 = $331;
      $332 = $25;
      $333 = $332;
      $24 = $333;
      $334 = $24;
      $335 = ($334);
      $336 = HEAP32[$335>>2]|0;
      $337 = (($336) + ($330<<2)|0);
      HEAP32[$337>>2] = $326;
      $338 = $__cp;
      $__pp = $338;
      $339 = $__chash;
      $__phash = $339;
     } else {
      $340 = $__cp;
      $__np = $340;
      while(1) {
       $341 = $__np;
       $342 = $341;
       $343 = ($342);
       $344 = HEAP32[$343>>2]|0;
       $345 = ($344|0)!=(0|0);
       if ($345) {
        $30 = $140;
        $346 = $30;
        $347 = (($346) + 16|0);
        $29 = $347;
        $348 = $29;
        $349 = $348;
        $28 = $349;
        $350 = $28;
        $351 = $350;
        $352 = $__cp;
        $353 = (($352) + 8|0);
        $354 = $__np;
        $355 = $354;
        $356 = ($355);
        $357 = HEAP32[$356>>2]|0;
        $358 = (($357) + 8|0);
        $124 = $351;
        $125 = $353;
        $126 = $358;
        $359 = $124;
        $360 = $359;
        $361 = $125;
        $362 = $361;
        $363 = ($362);
        $364 = $126;
        $365 = $364;
        $366 = ($365);
        $121 = $360;
        $122 = $363;
        $123 = $366;
        $367 = $122;
        $368 = $123;
        $119 = $367;
        $120 = $368;
        $369 = $119;
        $117 = $369;
        $370 = $117;
        $116 = $370;
        $371 = $116;
        $372 = ($371);
        $115 = $372;
        $373 = $115;
        $374 = $373;
        $114 = $374;
        $375 = $114;
        $376 = ($375);
        $377 = ($376);
        $378 = $377;
        $379 = ($378);
        $380 = $379;
        $381 = HEAP8[$380]|0;
        $382 = $381&255;
        $383 = $382 & 1;
        $384 = ($383|0)!=(0);
        if ($384) {
         $110 = $370;
         $385 = $110;
         $386 = ($385);
         $109 = $386;
         $387 = $109;
         $388 = $387;
         $108 = $388;
         $389 = $108;
         $390 = ($389);
         $391 = ($390);
         $392 = $391;
         $393 = (($392) + 4|0);
         $394 = HEAP32[$393>>2]|0;
         $408 = $394;
        } else {
         $113 = $370;
         $395 = $113;
         $396 = ($395);
         $112 = $396;
         $397 = $112;
         $398 = $397;
         $111 = $398;
         $399 = $111;
         $400 = ($399);
         $401 = ($400);
         $402 = $401;
         $403 = ($402);
         $404 = $403;
         $405 = HEAP8[$404]|0;
         $406 = $405&255;
         $407 = $406 >> 1;
         $408 = $407;
        }
        $__lhs_sz$i$i$i = $408;
        $409 = $__lhs_sz$i$i$i;
        $410 = $120;
        $107 = $410;
        $411 = $107;
        $106 = $411;
        $412 = $106;
        $413 = ($412);
        $105 = $413;
        $414 = $105;
        $415 = $414;
        $104 = $415;
        $416 = $104;
        $417 = ($416);
        $418 = ($417);
        $419 = $418;
        $420 = ($419);
        $421 = $420;
        $422 = HEAP8[$421]|0;
        $423 = $422&255;
        $424 = $423 & 1;
        $425 = ($424|0)!=(0);
        if ($425) {
         $100 = $411;
         $426 = $100;
         $427 = ($426);
         $99 = $427;
         $428 = $99;
         $429 = $428;
         $98 = $429;
         $430 = $98;
         $431 = ($430);
         $432 = ($431);
         $433 = $432;
         $434 = (($433) + 4|0);
         $435 = HEAP32[$434>>2]|0;
         $449 = $435;
        } else {
         $103 = $411;
         $436 = $103;
         $437 = ($436);
         $102 = $437;
         $438 = $102;
         $439 = $438;
         $101 = $439;
         $440 = $101;
         $441 = ($440);
         $442 = ($441);
         $443 = $442;
         $444 = ($443);
         $445 = $444;
         $446 = HEAP8[$445]|0;
         $447 = $446&255;
         $448 = $447 >> 1;
         $449 = $448;
        }
        $450 = ($409|0)!=($449|0);
        do {
         if ($450) {
          $$expand_i1_val = 0;
          $118 = $$expand_i1_val;
         } else {
          $451 = $119;
          $94 = $451;
          $452 = $94;
          $93 = $452;
          $453 = $93;
          $92 = $453;
          $454 = $92;
          $455 = ($454);
          $91 = $455;
          $456 = $91;
          $457 = $456;
          $90 = $457;
          $458 = $90;
          $459 = ($458);
          $460 = ($459);
          $461 = $460;
          $462 = ($461);
          $463 = $462;
          $464 = HEAP8[$463]|0;
          $465 = $464&255;
          $466 = $465 & 1;
          $467 = ($466|0)!=(0);
          if ($467) {
           $84 = $453;
           $468 = $84;
           $469 = ($468);
           $83 = $469;
           $470 = $83;
           $471 = $470;
           $82 = $471;
           $472 = $82;
           $473 = ($472);
           $474 = ($473);
           $475 = $474;
           $476 = (($475) + 8|0);
           $477 = HEAP32[$476>>2]|0;
           $490 = $477;
          } else {
           $89 = $453;
           $478 = $89;
           $479 = ($478);
           $88 = $479;
           $480 = $88;
           $481 = $480;
           $87 = $481;
           $482 = $87;
           $483 = ($482);
           $484 = ($483);
           $485 = $484;
           $486 = (($485) + 1|0);
           $487 = ($486);
           $86 = $487;
           $488 = $86;
           $85 = $488;
           $489 = $85;
           $490 = $489;
          }
          $81 = $490;
          $491 = $81;
          $__lp$i$i$i = $491;
          $492 = $120;
          $77 = $492;
          $493 = $77;
          $76 = $493;
          $494 = $76;
          $75 = $494;
          $495 = $75;
          $496 = ($495);
          $74 = $496;
          $497 = $74;
          $498 = $497;
          $73 = $498;
          $499 = $73;
          $500 = ($499);
          $501 = ($500);
          $502 = $501;
          $503 = ($502);
          $504 = $503;
          $505 = HEAP8[$504]|0;
          $506 = $505&255;
          $507 = $506 & 1;
          $508 = ($507|0)!=(0);
          if ($508) {
           $67 = $494;
           $509 = $67;
           $510 = ($509);
           $66 = $510;
           $511 = $66;
           $512 = $511;
           $65 = $512;
           $513 = $65;
           $514 = ($513);
           $515 = ($514);
           $516 = $515;
           $517 = (($516) + 8|0);
           $518 = HEAP32[$517>>2]|0;
           $531 = $518;
          } else {
           $72 = $494;
           $519 = $72;
           $520 = ($519);
           $71 = $520;
           $521 = $71;
           $522 = $521;
           $70 = $522;
           $523 = $70;
           $524 = ($523);
           $525 = ($524);
           $526 = $525;
           $527 = (($526) + 1|0);
           $528 = ($527);
           $69 = $528;
           $529 = $69;
           $68 = $529;
           $530 = $68;
           $531 = $530;
          }
          $64 = $531;
          $532 = $64;
          $__rp$i$i$i = $532;
          $533 = $119;
          $80 = $533;
          $534 = $80;
          $535 = ($534);
          $79 = $535;
          $536 = $79;
          $537 = $536;
          $78 = $537;
          $538 = $78;
          $539 = ($538);
          $540 = ($539);
          $541 = $540;
          $542 = ($541);
          $543 = $542;
          $544 = HEAP8[$543]|0;
          $545 = $544&255;
          $546 = $545 & 1;
          $547 = ($546|0)!=(0);
          if ($547) {
           $548 = $__lp$i$i$i;
           $549 = $__rp$i$i$i;
           $550 = $__lhs_sz$i$i$i;
           $95 = $548;
           $96 = $549;
           $97 = $550;
           $551 = $95;
           $552 = $96;
           $553 = $97;
           __THREW__ = 0;
           $554 = (invoke_iiii(25,($551|0),($552|0),($553|0))|0);
           $555 = __THREW__; __THREW__ = 0;
           $556 = $555&1;
           if ($556) {
            label = 49;
            break L22;
           }
           $557 = ($554|0)==(0);
           $$expand_i1_val2 = $557&1;
           $118 = $$expand_i1_val2;
           break;
          }
          while(1) {
           $558 = $__lhs_sz$i$i$i;
           $559 = ($558|0)!=(0);
           if (!($559)) {
            label = 48;
            break;
           }
           $560 = $__lp$i$i$i;
           $561 = HEAP8[$560]|0;
           $562 = $561 << 24 >> 24;
           $563 = $__rp$i$i$i;
           $564 = HEAP8[$563]|0;
           $565 = $564 << 24 >> 24;
           $566 = ($562|0)!=($565|0);
           if ($566) {
            label = 46;
            break;
           }
           $567 = $__lhs_sz$i$i$i;
           $568 = (($567) + -1)|0;
           $__lhs_sz$i$i$i = $568;
           $569 = $__lp$i$i$i;
           $570 = (($569) + 1|0);
           $__lp$i$i$i = $570;
           $571 = $__rp$i$i$i;
           $572 = (($571) + 1|0);
           $__rp$i$i$i = $572;
          }
          if ((label|0) == 46) {
           label = 0;
           $$expand_i1_val4 = 0;
           $118 = $$expand_i1_val4;
           break;
          }
          else if ((label|0) == 48) {
           label = 0;
           $$expand_i1_val6 = 1;
           $118 = $$expand_i1_val6;
           break;
          }
         }
        } while(0);
        $$pre_trunc = $118;
        $574 = $$pre_trunc&1;
        $575 = $574;
       } else {
        $575 = 0;
       }
       if (!($575)) {
        break;
       }
       $576 = $__np;
       $577 = $576;
       $578 = ($577);
       $579 = HEAP32[$578>>2]|0;
       $__np = $579;
      }
      $580 = $__np;
      $581 = $580;
      $582 = ($581);
      $583 = HEAP32[$582>>2]|0;
      $584 = $__pp;
      $585 = $584;
      $586 = ($585);
      HEAP32[$586>>2] = $583;
      $587 = ($140);
      $588 = $__chash;
      $129 = $587;
      $130 = $588;
      $589 = $129;
      $590 = $130;
      $591 = ($589);
      $128 = $591;
      $592 = $128;
      $593 = $592;
      $127 = $593;
      $594 = $127;
      $595 = ($594);
      $596 = HEAP32[$595>>2]|0;
      $597 = (($596) + ($590<<2)|0);
      $598 = HEAP32[$597>>2]|0;
      $599 = $598;
      $600 = ($599);
      $601 = HEAP32[$600>>2]|0;
      $602 = $__np;
      $603 = $602;
      $604 = ($603);
      HEAP32[$604>>2] = $601;
      $605 = $__cp;
      $606 = ($140);
      $607 = $__chash;
      $133 = $606;
      $134 = $607;
      $608 = $133;
      $609 = $134;
      $610 = ($608);
      $132 = $610;
      $611 = $132;
      $612 = $611;
      $131 = $612;
      $613 = $131;
      $614 = ($613);
      $615 = HEAP32[$614>>2]|0;
      $616 = (($615) + ($609<<2)|0);
      $617 = HEAP32[$616>>2]|0;
      $618 = $617;
      $619 = ($618);
      HEAP32[$619>>2] = $605;
     }
    }
    $620 = $__pp;
    $621 = $620;
    $622 = ($621);
    $623 = HEAP32[$622>>2]|0;
    $__cp = $623;
   }
   if ((label|0) == 49) {
    $573 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    u$0 = tempRet0;
    ___clang_call_terminate($573);
    // unreachable;
   }
   else if ((label|0) == 58) {
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__hash = 0, $__lhs_sz$i$i$i = 0, $__lp$i$i$i = 0, $__nd = 0, $__rp$i$i$i = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 832|0;
 $96 = $this;
 $97 = $__k;
 $98 = $96;
 $95 = $98;
 $99 = $95;
 $100 = (($99) + 12|0);
 $94 = $100;
 $101 = $94;
 $102 = $101;
 $93 = $102;
 $103 = $93;
 $104 = $103;
 $105 = $97;
 $19 = $104;
 $20 = $105;
 $106 = $19;
 $107 = $106;
 $108 = $20;
 $109 = (__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($107,$108)|0);
 $__hash = $109;
 $18 = $98;
 $110 = $18;
 $111 = ($110);
 $17 = $111;
 $112 = $17;
 $113 = ($112);
 $16 = $113;
 $114 = $16;
 $115 = $114;
 $15 = $115;
 $116 = $15;
 $117 = (($116) + 4|0);
 $14 = $117;
 $118 = $14;
 $119 = ($118);
 $13 = $119;
 $120 = $13;
 $121 = $120;
 $12 = $121;
 $122 = $12;
 $123 = ($122);
 $124 = HEAP32[$123>>2]|0;
 $__bc = $124;
 $125 = $__bc;
 $126 = ($125|0)!=(0);
 if ($126) {
  $127 = $__hash;
  $128 = $__bc;
  $10 = $127;
  $11 = $128;
  $129 = $11;
  $130 = $11;
  $131 = (($130) - 1)|0;
  $132 = $129 & $131;
  $133 = ($132|0)!=(0);
  if ($133) {
   $138 = $10;
   $139 = $11;
   $140 = (($138>>>0) % ($139>>>0))&-1;
   $141 = $140;
  } else {
   $134 = $10;
   $135 = $11;
   $136 = (($135) - 1)|0;
   $137 = $134 & $136;
   $141 = $137;
  }
  $__chash = $141;
  $142 = ($98);
  $143 = $__chash;
  $3 = $142;
  $4 = $143;
  $144 = $3;
  $145 = $4;
  $146 = ($144);
  $2 = $146;
  $147 = $2;
  $148 = $147;
  $1 = $148;
  $149 = $1;
  $150 = ($149);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($151) + ($145<<2)|0);
  $153 = HEAP32[$152>>2]|0;
  $__nd = $153;
  $154 = $__nd;
  $155 = ($154|0)!=(0|0);
  do {
   if ($155) {
    $156 = $__nd;
    $157 = $156;
    $158 = ($157);
    $159 = HEAP32[$158>>2]|0;
    $__nd = $159;
    L9: while(1) {
     $160 = $__nd;
     $161 = ($160|0)!=(0|0);
     if ($161) {
      $162 = $__nd;
      $163 = (($162) + 4|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = $__bc;
      $5 = $164;
      $6 = $165;
      $166 = $6;
      $167 = $6;
      $168 = (($167) - 1)|0;
      $169 = $166 & $168;
      $170 = ($169|0)!=(0);
      if ($170) {
       $175 = $5;
       $176 = $6;
       $177 = (($175>>>0) % ($176>>>0))&-1;
       $178 = $177;
      } else {
       $171 = $5;
       $172 = $6;
       $173 = (($172) - 1)|0;
       $174 = $171 & $173;
       $178 = $174;
      }
      $179 = $__chash;
      $180 = ($178|0)==($179|0);
      $181 = $180;
     } else {
      $181 = 0;
     }
     if (!($181)) {
      label = 41;
      break;
     }
     $9 = $98;
     $182 = $9;
     $183 = (($182) + 16|0);
     $8 = $183;
     $184 = $8;
     $185 = $184;
     $7 = $185;
     $186 = $7;
     $187 = $186;
     $188 = $__nd;
     $189 = (($188) + 8|0);
     $190 = $97;
     $81 = $187;
     $82 = $189;
     $83 = $190;
     $191 = $81;
     $192 = $191;
     $193 = $82;
     $194 = $193;
     $195 = ($194);
     $196 = $83;
     $78 = $192;
     $79 = $195;
     $80 = $196;
     $197 = $79;
     $198 = $80;
     $76 = $197;
     $77 = $198;
     $199 = $76;
     $74 = $199;
     $200 = $74;
     $73 = $200;
     $201 = $73;
     $202 = ($201);
     $72 = $202;
     $203 = $72;
     $204 = $203;
     $71 = $204;
     $205 = $71;
     $206 = ($205);
     $207 = ($206);
     $208 = $207;
     $209 = ($208);
     $210 = $209;
     $211 = HEAP8[$210]|0;
     $212 = $211&255;
     $213 = $212 & 1;
     $214 = ($213|0)!=(0);
     if ($214) {
      $67 = $200;
      $215 = $67;
      $216 = ($215);
      $66 = $216;
      $217 = $66;
      $218 = $217;
      $65 = $218;
      $219 = $65;
      $220 = ($219);
      $221 = ($220);
      $222 = $221;
      $223 = (($222) + 4|0);
      $224 = HEAP32[$223>>2]|0;
      $238 = $224;
     } else {
      $70 = $200;
      $225 = $70;
      $226 = ($225);
      $69 = $226;
      $227 = $69;
      $228 = $227;
      $68 = $228;
      $229 = $68;
      $230 = ($229);
      $231 = ($230);
      $232 = $231;
      $233 = ($232);
      $234 = $233;
      $235 = HEAP8[$234]|0;
      $236 = $235&255;
      $237 = $236 >> 1;
      $238 = $237;
     }
     $__lhs_sz$i$i$i = $238;
     $239 = $__lhs_sz$i$i$i;
     $240 = $77;
     $64 = $240;
     $241 = $64;
     $63 = $241;
     $242 = $63;
     $243 = ($242);
     $62 = $243;
     $244 = $62;
     $245 = $244;
     $61 = $245;
     $246 = $61;
     $247 = ($246);
     $248 = ($247);
     $249 = $248;
     $250 = ($249);
     $251 = $250;
     $252 = HEAP8[$251]|0;
     $253 = $252&255;
     $254 = $253 & 1;
     $255 = ($254|0)!=(0);
     if ($255) {
      $57 = $241;
      $256 = $57;
      $257 = ($256);
      $56 = $257;
      $258 = $56;
      $259 = $258;
      $55 = $259;
      $260 = $55;
      $261 = ($260);
      $262 = ($261);
      $263 = $262;
      $264 = (($263) + 4|0);
      $265 = HEAP32[$264>>2]|0;
      $279 = $265;
     } else {
      $60 = $241;
      $266 = $60;
      $267 = ($266);
      $59 = $267;
      $268 = $59;
      $269 = $268;
      $58 = $269;
      $270 = $58;
      $271 = ($270);
      $272 = ($271);
      $273 = $272;
      $274 = ($273);
      $275 = $274;
      $276 = HEAP8[$275]|0;
      $277 = $276&255;
      $278 = $277 >> 1;
      $279 = $278;
     }
     $280 = ($239|0)!=($279|0);
     do {
      if ($280) {
       $$expand_i1_val = 0;
       $75 = $$expand_i1_val;
      } else {
       $281 = $76;
       $51 = $281;
       $282 = $51;
       $50 = $282;
       $283 = $50;
       $49 = $283;
       $284 = $49;
       $285 = ($284);
       $48 = $285;
       $286 = $48;
       $287 = $286;
       $47 = $287;
       $288 = $47;
       $289 = ($288);
       $290 = ($289);
       $291 = $290;
       $292 = ($291);
       $293 = $292;
       $294 = HEAP8[$293]|0;
       $295 = $294&255;
       $296 = $295 & 1;
       $297 = ($296|0)!=(0);
       if ($297) {
        $41 = $283;
        $298 = $41;
        $299 = ($298);
        $40 = $299;
        $300 = $40;
        $301 = $300;
        $39 = $301;
        $302 = $39;
        $303 = ($302);
        $304 = ($303);
        $305 = $304;
        $306 = (($305) + 8|0);
        $307 = HEAP32[$306>>2]|0;
        $320 = $307;
       } else {
        $46 = $283;
        $308 = $46;
        $309 = ($308);
        $45 = $309;
        $310 = $45;
        $311 = $310;
        $44 = $311;
        $312 = $44;
        $313 = ($312);
        $314 = ($313);
        $315 = $314;
        $316 = (($315) + 1|0);
        $317 = ($316);
        $43 = $317;
        $318 = $43;
        $42 = $318;
        $319 = $42;
        $320 = $319;
       }
       $38 = $320;
       $321 = $38;
       $__lp$i$i$i = $321;
       $322 = $77;
       $34 = $322;
       $323 = $34;
       $33 = $323;
       $324 = $33;
       $32 = $324;
       $325 = $32;
       $326 = ($325);
       $31 = $326;
       $327 = $31;
       $328 = $327;
       $30 = $328;
       $329 = $30;
       $330 = ($329);
       $331 = ($330);
       $332 = $331;
       $333 = ($332);
       $334 = $333;
       $335 = HEAP8[$334]|0;
       $336 = $335&255;
       $337 = $336 & 1;
       $338 = ($337|0)!=(0);
       if ($338) {
        $24 = $324;
        $339 = $24;
        $340 = ($339);
        $23 = $340;
        $341 = $23;
        $342 = $341;
        $22 = $342;
        $343 = $22;
        $344 = ($343);
        $345 = ($344);
        $346 = $345;
        $347 = (($346) + 8|0);
        $348 = HEAP32[$347>>2]|0;
        $361 = $348;
       } else {
        $29 = $324;
        $349 = $29;
        $350 = ($349);
        $28 = $350;
        $351 = $28;
        $352 = $351;
        $27 = $352;
        $353 = $27;
        $354 = ($353);
        $355 = ($354);
        $356 = $355;
        $357 = (($356) + 1|0);
        $358 = ($357);
        $26 = $358;
        $359 = $26;
        $25 = $359;
        $360 = $25;
        $361 = $360;
       }
       $21 = $361;
       $362 = $21;
       $__rp$i$i$i = $362;
       $363 = $76;
       $37 = $363;
       $364 = $37;
       $365 = ($364);
       $36 = $365;
       $366 = $36;
       $367 = $366;
       $35 = $367;
       $368 = $35;
       $369 = ($368);
       $370 = ($369);
       $371 = $370;
       $372 = ($371);
       $373 = $372;
       $374 = HEAP8[$373]|0;
       $375 = $374&255;
       $376 = $375 & 1;
       $377 = ($376|0)!=(0);
       if ($377) {
        $378 = $__lp$i$i$i;
        $379 = $__rp$i$i$i;
        $380 = $__lhs_sz$i$i$i;
        $52 = $378;
        $53 = $379;
        $54 = $380;
        $381 = $52;
        $382 = $53;
        $383 = $54;
        __THREW__ = 0;
        $384 = (invoke_iiii(25,($381|0),($382|0),($383|0))|0);
        $385 = __THREW__; __THREW__ = 0;
        $386 = $385&1;
        if ($386) {
         label = 36;
         break L9;
        }
        $387 = ($384|0)==(0);
        $$expand_i1_val2 = $387&1;
        $75 = $$expand_i1_val2;
        break;
       }
       while(1) {
        $388 = $__lhs_sz$i$i$i;
        $389 = ($388|0)!=(0);
        if (!($389)) {
         label = 35;
         break;
        }
        $390 = $__lp$i$i$i;
        $391 = HEAP8[$390]|0;
        $392 = $391 << 24 >> 24;
        $393 = $__rp$i$i$i;
        $394 = HEAP8[$393]|0;
        $395 = $394 << 24 >> 24;
        $396 = ($392|0)!=($395|0);
        if ($396) {
         label = 33;
         break;
        }
        $397 = $__lhs_sz$i$i$i;
        $398 = (($397) + -1)|0;
        $__lhs_sz$i$i$i = $398;
        $399 = $__lp$i$i$i;
        $400 = (($399) + 1|0);
        $__lp$i$i$i = $400;
        $401 = $__rp$i$i$i;
        $402 = (($401) + 1|0);
        $__rp$i$i$i = $402;
       }
       if ((label|0) == 33) {
        label = 0;
        $$expand_i1_val4 = 0;
        $75 = $$expand_i1_val4;
        break;
       }
       else if ((label|0) == 35) {
        label = 0;
        $$expand_i1_val6 = 1;
        $75 = $$expand_i1_val6;
        break;
       }
      }
     } while(0);
     $$pre_trunc = $75;
     $404 = $$pre_trunc&1;
     if ($404) {
      label = 38;
      break;
     }
     $411 = $__nd;
     $412 = $411;
     $413 = ($412);
     $414 = HEAP32[$413>>2]|0;
     $__nd = $414;
    }
    if ((label|0) == 36) {
     $403 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$0 = tempRet0;
     ___clang_call_terminate($403);
     // unreachable;
    }
    else if ((label|0) == 38) {
     $405 = $__nd;
     $86 = $agg$result;
     $87 = $405;
     $406 = $86;
     $407 = $87;
     $84 = $406;
     $85 = $407;
     $408 = $84;
     $409 = ($408);
     $410 = $85;
     HEAP32[$409>>2] = $410;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 41) {
     break;
    }
   }
  } while(0);
 }
 $92 = $98;
 $90 = $agg$result;
 $91 = 0;
 $415 = $90;
 $416 = $91;
 $88 = $415;
 $89 = $416;
 $417 = $88;
 $418 = ($417);
 $419 = $89;
 HEAP32[$418>>2] = $419;
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEEixERSC_($this,$__k) {
 $this = $this|0;
 $__k = $__k|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__i = 0, $__i1$i$i = 0, $__i1$i$i$i = 0, $__i1$i$i1 = 0, $__r = 0, $__t$i = 0, $__tmp$i$i$i = 0, $__tmp$i$i$i6 = 0;
 var $tmp$i = 0, $tmp$i$i = 0, $tmp$i$i$i = 0, $tmp$i$i$i$i$i = 0, $tmp$i$i$i$i$i7 = 0, $tmp$i$i13 = 0, $tmp$i$i4 = 0, $tmp$i1$i$i$i$i = 0, $tmp$i1$i$i$i$i9 = 0, $tmp$i2 = 0, $tmp1$i = 0, $tmp1$i$i = 0, $tmp1$i$i$i$i$i = 0, $tmp1$i$i$i$i$i8 = 0, $tmp1$i2$i$i$i$i = 0, $tmp1$i2$i$i$i$i10 = 0, $tmp1$i3 = 0, $tmp2$i$i = 0, $tmp2$i$i$i = 0, $tmp2$i$i5 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1088|0;
 $__i1$i$i$i = sp + 104|0;
 $14 = sp + 120|0;
 $20 = sp + 168|0;
 $33 = sp + 272|0;
 $36 = sp + 296|0;
 $46 = sp + 376|0;
 $49 = sp + 400|0;
 $77 = sp + 632|0;
 $80 = sp + 656|0;
 $90 = sp + 736|0;
 $93 = sp + 760|0;
 $__i1$i$i1 = sp + 856|0;
 $105 = sp + 872|0;
 $112 = sp + 928|0;
 $__i1$i$i = sp + 944|0;
 $115 = sp + 960|0;
 $118 = sp + 984|0;
 $__i = sp + 1016|0;
 $122 = sp + 1024|0;
 $__h = sp + 1032|0;
 $__r = sp + 1048|0;
 $123 = sp + 1056|0;
 $120 = $this;
 $121 = $__k;
 $127 = $120;
 $128 = $121;
 $116 = $127;
 $117 = $128;
 $129 = $116;
 $130 = ($129);
 $131 = $117;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($118,$130,$131);
 $tmp$i = $115;
 $tmp1$i = $118;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;HEAP8[$tmp$i+1|0]=HEAP8[$tmp1$i+1|0]|0;HEAP8[$tmp$i+2|0]=HEAP8[$tmp1$i+2|0]|0;HEAP8[$tmp$i+3|0]=HEAP8[$tmp1$i+3|0]|0;
 $114 = $__i;
 $132 = $114;
 $tmp$i$i = $__i1$i$i;
 $tmp2$i$i = $115;
 ;HEAP8[$tmp$i$i+0|0]=HEAP8[$tmp2$i$i+0|0]|0;HEAP8[$tmp$i$i+1|0]=HEAP8[$tmp2$i$i+1|0]|0;HEAP8[$tmp$i$i+2|0]=HEAP8[$tmp2$i$i+2|0]|0;HEAP8[$tmp$i$i+3|0]=HEAP8[$tmp2$i$i+3|0]|0;
 $113 = $132;
 $133 = $113;
 $134 = ($133);
 $135 = $134;
 $136 = $__i1$i$i;
 ;HEAP32[$135+0>>2]=HEAP32[$136+0>>2]|0;
 $111 = $127;
 $137 = $111;
 $138 = ($137);
 $110 = $138;
 $108 = $112;
 $109 = 0;
 $139 = $108;
 $140 = $109;
 $106 = $139;
 $107 = $140;
 $141 = $106;
 $142 = ($141);
 $143 = $107;
 HEAP32[$142>>2] = $143;
 $tmp$i2 = $105;
 $tmp1$i3 = $112;
 ;HEAP8[$tmp$i2+0|0]=HEAP8[$tmp1$i3+0|0]|0;HEAP8[$tmp$i2+1|0]=HEAP8[$tmp1$i3+1|0]|0;HEAP8[$tmp$i2+2|0]=HEAP8[$tmp1$i3+2|0]|0;HEAP8[$tmp$i2+3|0]=HEAP8[$tmp1$i3+3|0]|0;
 $104 = $122;
 $144 = $104;
 $tmp$i$i4 = $__i1$i$i1;
 $tmp2$i$i5 = $105;
 ;HEAP8[$tmp$i$i4+0|0]=HEAP8[$tmp2$i$i5+0|0]|0;HEAP8[$tmp$i$i4+1|0]=HEAP8[$tmp2$i$i5+1|0]|0;HEAP8[$tmp$i$i4+2|0]=HEAP8[$tmp2$i$i5+2|0]|0;HEAP8[$tmp$i$i4+3|0]=HEAP8[$tmp2$i$i5+3|0]|0;
 $103 = $144;
 $145 = $103;
 $146 = ($145);
 $147 = $146;
 $148 = $__i1$i$i1;
 ;HEAP32[$147+0>>2]=HEAP32[$148+0>>2]|0;
 $69 = $__i;
 $70 = $122;
 $149 = $69;
 $150 = ($149);
 $151 = $70;
 $152 = ($151);
 $67 = $150;
 $68 = $152;
 $153 = $67;
 $154 = $68;
 $65 = $153;
 $66 = $154;
 $155 = $65;
 $156 = ($155);
 $157 = HEAP32[$156>>2]|0;
 $158 = $66;
 $159 = ($158);
 $160 = HEAP32[$159>>2]|0;
 $161 = ($157|0)==($160|0);
 $162 = $161 ^ 1;
 if ($162) {
  $64 = $__i;
  $163 = $64;
  $164 = ($163);
  $63 = $164;
  $165 = $63;
  $166 = ($165);
  $167 = HEAP32[$166>>2]|0;
  $168 = (($167) + 8|0);
  $62 = $168;
  $169 = $62;
  $61 = $169;
  $170 = $61;
  $171 = $170;
  $172 = $171;
  $173 = $172;
  $60 = $173;
  $174 = $60;
  $59 = $174;
  $175 = $59;
  $176 = $175;
  $177 = $176;
  $178 = (($177) + 12|0);
  $119 = $178;
  $369 = $119;
  STACKTOP = sp;return ($369|0);
 }
 $179 = $121;
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEE25__construct_node_with_keyERSC_($__h,$127,$179);
 $180 = ($127);
 $26 = $__h;
 $181 = $26;
 $182 = ($181);
 $25 = $182;
 $183 = $25;
 $184 = $183;
 $24 = $184;
 $185 = $24;
 $186 = ($185);
 $187 = HEAP32[$186>>2]|0;
 __THREW__ = 0;
 invoke_viii(11,($123|0),($180|0),($187|0));
 $188 = __THREW__; __THREW__ = 0;
 $189 = $188&1;
 if ($189) {
  $304 = ___cxa_find_matching_catch(-1,-1)|0;
  $305 = tempRet0;
  $124 = $304;
  $125 = $305;
  $102 = $__h;
  $306 = $102;
  $101 = $306;
  $307 = $101;
  $99 = $307;
  $100 = 0;
  $308 = $99;
  $309 = ($308);
  $98 = $309;
  $310 = $98;
  $311 = $310;
  $97 = $311;
  $312 = $97;
  $313 = ($312);
  $314 = HEAP32[$313>>2]|0;
  $__tmp$i$i$i = $314;
  $315 = $100;
  $316 = ($308);
  $74 = $316;
  $317 = $74;
  $318 = $317;
  $73 = $318;
  $319 = $73;
  $320 = ($319);
  HEAP32[$320>>2] = $315;
  $321 = $__tmp$i$i$i;
  $322 = ($321|0)!=(0|0);
  if ($322) {
   $323 = ($308);
   $72 = $323;
   $324 = $72;
   $325 = $324;
   $71 = $325;
   $326 = $71;
   $327 = (($326) + 4|0);
   $328 = $__tmp$i$i$i;
   $95 = $327;
   $96 = $328;
   $329 = $95;
   $330 = (($329) + 5|0);
   $331 = HEAP8[$330]|0;
   $332 = $331&1;
   if ($332) {
    $333 = ($329);
    $334 = HEAP32[$333>>2]|0;
    $335 = $96;
    $336 = (($335) + 8|0);
    $337 = $336;
    $338 = (($337) + 12|0);
    $94 = $338;
    $339 = $94;
    $340 = $339;
    $341 = $340;
    $91 = $334;
    $92 = $341;
    $342 = $91;
    $343 = $92;
    $tmp$i$i$i$i$i = $90;
    $tmp1$i$i$i$i$i = $93;
    ;HEAP8[$tmp$i$i$i$i$i+0|0]=HEAP8[$tmp1$i$i$i$i$i+0|0]|0;
    $88 = $342;
    $89 = $343;
   }
   $344 = (($329) + 4|0);
   $345 = HEAP8[$344]|0;
   $346 = $345&1;
   if ($346) {
    $347 = ($329);
    $348 = HEAP32[$347>>2]|0;
    $349 = $96;
    $350 = (($349) + 8|0);
    $351 = $350;
    $352 = ($351);
    $81 = $352;
    $353 = $81;
    $354 = $353;
    $355 = $354;
    $78 = $348;
    $79 = $355;
    $356 = $78;
    $357 = $79;
    $tmp$i1$i$i$i$i = $77;
    $tmp1$i2$i$i$i$i = $80;
    ;HEAP8[$tmp$i1$i$i$i$i+0|0]=HEAP8[$tmp1$i2$i$i$i$i+0|0]|0;
    $75 = $356;
    $76 = $357;
    $358 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($358);
   }
   $359 = $96;
   $360 = ($359|0)!=(0|0);
   if ($360) {
    $361 = ($329);
    $362 = HEAP32[$361>>2]|0;
    $363 = $96;
    $85 = $362;
    $86 = $363;
    $87 = 1;
    $364 = $85;
    $365 = $86;
    $366 = $87;
    $82 = $364;
    $83 = $365;
    $84 = $366;
    $367 = $83;
    $368 = $367;
    __ZdlPv($368);
   }
  }
  $370 = $124;
  $371 = $125;
  ___resumeException($370|0);
  // unreachable;
 }
 $21 = $__r;
 $22 = $123;
 $23 = 0;
 $190 = $21;
 $191 = $23;
 $192 = $22;
 $17 = $190;
 $18 = $192;
 $19 = $191;
 $193 = $17;
 $194 = ($193);
 $195 = $18;
 $196 = ($195);
 $16 = $196;
 $197 = $16;
 $198 = $20;
 $199 = $197;
 ;HEAP32[$198+0>>2]=HEAP32[$199+0>>2]|0;
 $tmp$i$i13 = $14;
 $tmp1$i$i = $20;
 ;HEAP8[$tmp$i$i13+0|0]=HEAP8[$tmp1$i$i+0|0]|0;HEAP8[$tmp$i$i13+1|0]=HEAP8[$tmp1$i$i+1|0]|0;HEAP8[$tmp$i$i13+2|0]=HEAP8[$tmp1$i$i+2|0]|0;HEAP8[$tmp$i$i13+3|0]=HEAP8[$tmp1$i$i+3|0]|0;
 $13 = $194;
 $200 = $13;
 $tmp$i$i$i = $__i1$i$i$i;
 $tmp2$i$i$i = $14;
 ;HEAP8[$tmp$i$i$i+0|0]=HEAP8[$tmp2$i$i$i+0|0]|0;HEAP8[$tmp$i$i$i+1|0]=HEAP8[$tmp2$i$i$i+1|0]|0;HEAP8[$tmp$i$i$i+2|0]=HEAP8[$tmp2$i$i$i+2|0]|0;HEAP8[$tmp$i$i$i+3|0]=HEAP8[$tmp2$i$i$i+3|0]|0;
 $12 = $200;
 $201 = $12;
 $202 = ($201);
 $203 = $202;
 $204 = $__i1$i$i$i;
 ;HEAP32[$203+0>>2]=HEAP32[$204+0>>2]|0;
 $205 = (($193) + 4|0);
 $206 = $18;
 $207 = (($206) + 4|0);
 $15 = $207;
 $208 = $15;
 $209 = HEAP8[$208]|0;
 $210 = $209&1;
 $211 = $210&1;
 HEAP8[$205] = $211;
 $5 = $__h;
 $212 = $5;
 $213 = ($212);
 $4 = $213;
 $214 = $4;
 $215 = $214;
 $3 = $215;
 $216 = $3;
 $217 = ($216);
 $218 = HEAP32[$217>>2]|0;
 $__t$i = $218;
 $219 = ($212);
 $2 = $219;
 $220 = $2;
 $221 = $220;
 $1 = $221;
 $222 = $1;
 $223 = ($222);
 HEAP32[$223>>2] = 0;
 $224 = ($__r);
 $11 = $224;
 $225 = $11;
 $226 = ($225);
 $10 = $226;
 $227 = $10;
 $228 = ($227);
 $229 = HEAP32[$228>>2]|0;
 $230 = (($229) + 8|0);
 $9 = $230;
 $231 = $9;
 $8 = $231;
 $232 = $8;
 $233 = $232;
 $234 = $233;
 $235 = $234;
 $7 = $235;
 $236 = $7;
 $6 = $236;
 $237 = $6;
 $238 = $237;
 $239 = $238;
 $240 = (($239) + 12|0);
 $119 = $240;
 $126 = 1;
 $58 = $__h;
 $241 = $58;
 $57 = $241;
 $242 = $57;
 $55 = $242;
 $56 = 0;
 $243 = $55;
 $244 = ($243);
 $54 = $244;
 $245 = $54;
 $246 = $245;
 $53 = $246;
 $247 = $53;
 $248 = ($247);
 $249 = HEAP32[$248>>2]|0;
 $__tmp$i$i$i6 = $249;
 $250 = $56;
 $251 = ($243);
 $30 = $251;
 $252 = $30;
 $253 = $252;
 $29 = $253;
 $254 = $29;
 $255 = ($254);
 HEAP32[$255>>2] = $250;
 $256 = $__tmp$i$i$i6;
 $257 = ($256|0)!=(0|0);
 if ($257) {
  $258 = ($243);
  $28 = $258;
  $259 = $28;
  $260 = $259;
  $27 = $260;
  $261 = $27;
  $262 = (($261) + 4|0);
  $263 = $__tmp$i$i$i6;
  $51 = $262;
  $52 = $263;
  $264 = $51;
  $265 = (($264) + 5|0);
  $266 = HEAP8[$265]|0;
  $267 = $266&1;
  if ($267) {
   $268 = ($264);
   $269 = HEAP32[$268>>2]|0;
   $270 = $52;
   $271 = (($270) + 8|0);
   $272 = $271;
   $273 = (($272) + 12|0);
   $50 = $273;
   $274 = $50;
   $275 = $274;
   $276 = $275;
   $47 = $269;
   $48 = $276;
   $277 = $47;
   $278 = $48;
   $tmp$i$i$i$i$i7 = $46;
   $tmp1$i$i$i$i$i8 = $49;
   ;HEAP8[$tmp$i$i$i$i$i7+0|0]=HEAP8[$tmp1$i$i$i$i$i8+0|0]|0;
   $44 = $277;
   $45 = $278;
  }
  $279 = (($264) + 4|0);
  $280 = HEAP8[$279]|0;
  $281 = $280&1;
  if ($281) {
   $282 = ($264);
   $283 = HEAP32[$282>>2]|0;
   $284 = $52;
   $285 = (($284) + 8|0);
   $286 = $285;
   $287 = ($286);
   $37 = $287;
   $288 = $37;
   $289 = $288;
   $290 = $289;
   $34 = $283;
   $35 = $290;
   $291 = $34;
   $292 = $35;
   $tmp$i1$i$i$i$i9 = $33;
   $tmp1$i2$i$i$i$i10 = $36;
   ;HEAP8[$tmp$i1$i$i$i$i9+0|0]=HEAP8[$tmp1$i2$i$i$i$i10+0|0]|0;
   $31 = $291;
   $32 = $292;
   $293 = $32;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($293);
  }
  $294 = $52;
  $295 = ($294|0)!=(0|0);
  if ($295) {
   $296 = ($264);
   $297 = HEAP32[$296>>2]|0;
   $298 = $52;
   $41 = $297;
   $42 = $298;
   $43 = 1;
   $299 = $41;
   $300 = $42;
   $301 = $43;
   $38 = $299;
   $39 = $300;
   $40 = $301;
   $302 = $39;
   $303 = $302;
   __ZdlPv($303);
  }
 }
 $369 = $119;
 STACKTOP = sp;return ($369|0);
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEE25__construct_node_with_keyERSC_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__h = 0, $__na = 0, $__t$i$i$i = 0, $__t21$i$i$i = 0, $__t21$i$i$i8 = 0, $__tmp$i$i$i = 0, $__tmp$i$i$i1 = 0, $tmp$i = 0, $tmp$i$i = 0, $tmp$i$i$i = 0, $tmp$i$i$i$i = 0, $tmp$i$i$i$i$i = 0, $tmp$i$i$i$i$i2 = 0, $tmp$i$i$i$i13 = 0, $tmp$i$i$i11 = 0, $tmp$i$i9 = 0, $tmp$i1$i$i$i$i = 0, $tmp$i1$i$i$i$i4 = 0, $tmp$i15 = 0, $tmp1$i = 0;
 var $tmp1$i$i = 0, $tmp1$i$i$i$i = 0, $tmp1$i$i$i$i$i = 0, $tmp1$i$i$i$i$i3 = 0, $tmp1$i$i$i$i14 = 0, $tmp1$i$i10 = 0, $tmp1$i16 = 0, $tmp1$i2$i$i$i$i = 0, $tmp1$i2$i$i$i$i5 = 0, $tmp2$i$i$i = 0, $tmp2$i$i$i12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1400|0;
 $9 = sp + 64|0;
 $14 = sp + 104|0;
 $26 = sp + 200|0;
 $29 = sp + 224|0;
 $39 = sp + 304|0;
 $40 = sp + 312|0;
 $43 = sp + 336|0;
 $44 = sp + 344|0;
 $__t21$i$i$i8 = sp + 352|0;
 $47 = sp + 376|0;
 $58 = sp + 472|0;
 $71 = sp + 576|0;
 $74 = sp + 600|0;
 $84 = sp + 680|0;
 $87 = sp + 704|0;
 $101 = sp + 824|0;
 $102 = sp + 832|0;
 $105 = sp + 856|0;
 $106 = sp + 864|0;
 $__t21$i$i$i = sp + 872|0;
 $109 = sp + 896|0;
 $114 = sp + 936|0;
 $133 = sp + 1088|0;
 $136 = sp + 1112|0;
 $146 = sp + 1192|0;
 $149 = sp + 1216|0;
 $__h = sp + 1352|0;
 $164 = sp + 1368|0;
 $162 = $this;
 $163 = $__k;
 $168 = $162;
 $169 = ($168);
 $161 = $169;
 $170 = $161;
 $171 = (($170) + 8|0);
 $160 = $171;
 $172 = $160;
 $173 = $172;
 $159 = $173;
 $174 = $159;
 $175 = $174;
 $__na = $175;
 $176 = $__na;
 $125 = $176;
 $126 = 1;
 $177 = $125;
 $178 = $126;
 $122 = $177;
 $123 = $178;
 $124 = 0;
 $179 = $123;
 $180 = ($179*24)|0;
 $181 = (__Znwj($180)|0);
 $182 = $181;
 $183 = $__na;
 $120 = $164;
 $121 = $183;
 $184 = $120;
 $185 = $121;
 $118 = $184;
 $119 = $185;
 $186 = $118;
 $187 = ($186);
 $188 = $119;
 HEAP32[$187>>2] = $188;
 $189 = (($186) + 4|0);
 HEAP8[$189] = 0;
 $190 = (($186) + 5|0);
 HEAP8[$190] = 0;
 $115 = $__h;
 $116 = $182;
 $117 = $164;
 $191 = $115;
 $192 = $116;
 $193 = $117;
 $111 = $191;
 $112 = $192;
 $113 = $193;
 $194 = $111;
 $195 = ($194);
 $196 = $112;
 $197 = $113;
 $110 = $197;
 $198 = $110;
 $199 = $114;
 $200 = $198;
 ;HEAP32[$199+0>>2]=HEAP32[$200+0>>2]|0;HEAP32[$199+4>>2]=HEAP32[$200+4>>2]|0;
 $tmp$i$i = $109;
 $tmp1$i$i = $114;
 ;HEAP8[$tmp$i$i+0|0]=HEAP8[$tmp1$i$i+0|0]|0;HEAP8[$tmp$i$i+1|0]=HEAP8[$tmp1$i$i+1|0]|0;HEAP8[$tmp$i$i+2|0]=HEAP8[$tmp1$i$i+2|0]|0;HEAP8[$tmp$i$i+3|0]=HEAP8[$tmp1$i$i+3|0]|0;HEAP8[$tmp$i$i+4|0]=HEAP8[$tmp1$i$i+4|0]|0;HEAP8[$tmp$i$i+5|0]=HEAP8[$tmp1$i$i+5|0]|0;HEAP8[$tmp$i$i+6|0]=HEAP8[$tmp1$i$i+6|0]|0;HEAP8[$tmp$i$i+7|0]=HEAP8[$tmp1$i$i+7|0]|0;
 $107 = $195;
 $108 = $196;
 $201 = $107;
 $202 = $108;
 $tmp$i$i$i = $__t21$i$i$i;
 $tmp2$i$i$i = $109;
 ;HEAP8[$tmp$i$i$i+0|0]=HEAP8[$tmp2$i$i$i+0|0]|0;HEAP8[$tmp$i$i$i+1|0]=HEAP8[$tmp2$i$i$i+1|0]|0;HEAP8[$tmp$i$i$i+2|0]=HEAP8[$tmp2$i$i$i+2|0]|0;HEAP8[$tmp$i$i$i+3|0]=HEAP8[$tmp2$i$i$i+3|0]|0;HEAP8[$tmp$i$i$i+4|0]=HEAP8[$tmp2$i$i$i+4|0]|0;HEAP8[$tmp$i$i$i+5|0]=HEAP8[$tmp2$i$i$i+5|0]|0;HEAP8[$tmp$i$i$i+6|0]=HEAP8[$tmp2$i$i$i+6|0]|0;HEAP8[$tmp$i$i$i+7|0]=HEAP8[$tmp2$i$i$i+7|0]|0;
 $104 = $201;
 HEAP32[$105>>2] = $202;
 $203 = $104;
 $204 = $203;
 $103 = $105;
 $205 = $103;
 $206 = HEAP32[$205>>2]|0;
 $97 = $__t21$i$i$i;
 $207 = $97;
 $208 = $106;
 $209 = $207;
 ;HEAP32[$208+0>>2]=HEAP32[$209+0>>2]|0;HEAP32[$208+4>>2]=HEAP32[$209+4>>2]|0;
 $tmp$i$i$i$i = $102;
 $tmp1$i$i$i$i = $106;
 ;HEAP8[$tmp$i$i$i$i+0|0]=HEAP8[$tmp1$i$i$i$i+0|0]|0;HEAP8[$tmp$i$i$i$i+1|0]=HEAP8[$tmp1$i$i$i$i+1|0]|0;HEAP8[$tmp$i$i$i$i+2|0]=HEAP8[$tmp1$i$i$i$i+2|0]|0;HEAP8[$tmp$i$i$i$i+3|0]=HEAP8[$tmp1$i$i$i$i+3|0]|0;HEAP8[$tmp$i$i$i$i+4|0]=HEAP8[$tmp1$i$i$i$i+4|0]|0;HEAP8[$tmp$i$i$i$i+5|0]=HEAP8[$tmp1$i$i$i$i+5|0]|0;HEAP8[$tmp$i$i$i$i+6|0]=HEAP8[$tmp1$i$i$i$i+6|0]|0;HEAP8[$tmp$i$i$i$i+7|0]=HEAP8[$tmp1$i$i$i$i+7|0]|0;
 $100 = $204;
 HEAP32[$101>>2] = $206;
 $210 = $100;
 $211 = ($210);
 $99 = $101;
 $212 = $99;
 $213 = HEAP32[$212>>2]|0;
 HEAP32[$211>>2] = $213;
 $214 = (($210) + 4|0);
 $98 = $102;
 $215 = $98;
 $216 = $214;
 $217 = $215;
 ;HEAP32[$216+0>>2]=HEAP32[$217+0>>2]|0;HEAP32[$216+4>>2]=HEAP32[$217+4>>2]|0;
 $218 = $__na;
 $64 = $__h;
 $219 = $64;
 $220 = ($219);
 $63 = $220;
 $221 = $63;
 $222 = $221;
 $62 = $222;
 $223 = $62;
 $224 = ($223);
 $225 = HEAP32[$224>>2]|0;
 $226 = (($225) + 8|0);
 $227 = $226;
 $228 = ($227);
 $61 = $228;
 $229 = $61;
 $230 = $229;
 $231 = $230;
 $232 = $163;
 $11 = $218;
 $12 = $231;
 $13 = $232;
 $233 = $11;
 $234 = $12;
 $235 = $13;
 $10 = $235;
 $236 = $10;
 $tmp$i15 = $9;
 $tmp1$i16 = $14;
 ;HEAP8[$tmp$i15+0|0]=HEAP8[$tmp1$i16+0|0]|0;
 $6 = $233;
 $7 = $234;
 $8 = $236;
 $237 = $6;
 $238 = $7;
 $239 = $8;
 $5 = $239;
 $240 = $5;
 $2 = $237;
 $3 = $238;
 $4 = $240;
 $241 = $3;
 $242 = $241;
 $243 = ($242|0)==(0|0);
 do {
  if (!($243)) {
   $244 = $242;
   $245 = $4;
   $1 = $245;
   $246 = $1;
   __THREW__ = 0;
   invoke_vii(43,($244|0),($246|0));
   $247 = __THREW__; __THREW__ = 0;
   $248 = $247&1;
   if (!($248)) {
    break;
   }
   $394 = ___cxa_find_matching_catch(-1,-1)|0;
   $395 = tempRet0;
   $165 = $394;
   $166 = $395;
   $158 = $__h;
   $396 = $158;
   $157 = $396;
   $397 = $157;
   $155 = $397;
   $156 = 0;
   $398 = $155;
   $399 = ($398);
   $154 = $399;
   $400 = $154;
   $401 = $400;
   $153 = $401;
   $402 = $153;
   $403 = ($402);
   $404 = HEAP32[$403>>2]|0;
   $__tmp$i$i$i = $404;
   $405 = $156;
   $406 = ($398);
   $130 = $406;
   $407 = $130;
   $408 = $407;
   $129 = $408;
   $409 = $129;
   $410 = ($409);
   HEAP32[$410>>2] = $405;
   $411 = $__tmp$i$i$i;
   $412 = ($411|0)!=(0|0);
   if ($412) {
    $413 = ($398);
    $128 = $413;
    $414 = $128;
    $415 = $414;
    $127 = $415;
    $416 = $127;
    $417 = (($416) + 4|0);
    $418 = $__tmp$i$i$i;
    $151 = $417;
    $152 = $418;
    $419 = $151;
    $420 = (($419) + 5|0);
    $421 = HEAP8[$420]|0;
    $422 = $421&1;
    if ($422) {
     $423 = ($419);
     $424 = HEAP32[$423>>2]|0;
     $425 = $152;
     $426 = (($425) + 8|0);
     $427 = $426;
     $428 = (($427) + 12|0);
     $150 = $428;
     $429 = $150;
     $430 = $429;
     $431 = $430;
     $147 = $424;
     $148 = $431;
     $432 = $147;
     $433 = $148;
     $tmp$i$i$i$i$i = $146;
     $tmp1$i$i$i$i$i = $149;
     ;HEAP8[$tmp$i$i$i$i$i+0|0]=HEAP8[$tmp1$i$i$i$i$i+0|0]|0;
     $144 = $432;
     $145 = $433;
    }
    $434 = (($419) + 4|0);
    $435 = HEAP8[$434]|0;
    $436 = $435&1;
    if ($436) {
     $437 = ($419);
     $438 = HEAP32[$437>>2]|0;
     $439 = $152;
     $440 = (($439) + 8|0);
     $441 = $440;
     $442 = ($441);
     $137 = $442;
     $443 = $137;
     $444 = $443;
     $445 = $444;
     $134 = $438;
     $135 = $445;
     $446 = $134;
     $447 = $135;
     $tmp$i1$i$i$i$i = $133;
     $tmp1$i2$i$i$i$i = $136;
     ;HEAP8[$tmp$i1$i$i$i$i+0|0]=HEAP8[$tmp1$i2$i$i$i$i+0|0]|0;
     $131 = $446;
     $132 = $447;
     $448 = $132;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($448);
    }
    $449 = $152;
    $450 = ($449|0)!=(0|0);
    if ($450) {
     $451 = ($419);
     $452 = HEAP32[$451>>2]|0;
     $453 = $152;
     $141 = $452;
     $142 = $453;
     $143 = 1;
     $454 = $141;
     $455 = $142;
     $456 = $143;
     $138 = $454;
     $139 = $455;
     $140 = $456;
     $457 = $139;
     $458 = $457;
     __ZdlPv($458);
    }
   }
   $459 = $165;
   $460 = $166;
   ___resumeException($459|0);
   // unreachable;
  }
 } while(0);
 $17 = $__h;
 $249 = $17;
 $250 = ($249);
 $16 = $250;
 $251 = $16;
 $252 = $251;
 $15 = $252;
 $253 = $15;
 $254 = (($253) + 4|0);
 $255 = (($254) + 4|0);
 HEAP8[$255] = 1;
 $256 = $__na;
 $20 = $__h;
 $257 = $20;
 $258 = ($257);
 $19 = $258;
 $259 = $19;
 $260 = $259;
 $18 = $260;
 $261 = $18;
 $262 = ($261);
 $263 = HEAP32[$262>>2]|0;
 $264 = (($263) + 8|0);
 $265 = $264;
 $266 = (($265) + 12|0);
 $21 = $266;
 $267 = $21;
 $268 = $267;
 $269 = $268;
 $27 = $256;
 $28 = $269;
 $270 = $27;
 $271 = $28;
 $tmp$i = $26;
 $tmp1$i = $29;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
 $24 = $270;
 $25 = $271;
 $272 = $24;
 $273 = $25;
 $22 = $272;
 $23 = $273;
 $274 = $23;
 $275 = $274;
 $276 = ($275|0)==(0|0);
 if (!($276)) {
  $277 = $275;
  HEAP32[$277>>2] = 0;
 }
 $32 = $__h;
 $278 = $32;
 $279 = ($278);
 $31 = $279;
 $280 = $31;
 $281 = $280;
 $30 = $281;
 $282 = $30;
 $283 = (($282) + 4|0);
 $284 = (($283) + 5|0);
 HEAP8[$284] = 1;
 $33 = $__h;
 $285 = $33;
 $59 = $agg$result;
 $60 = $285;
 $286 = $59;
 $287 = $60;
 $56 = $286;
 $57 = $287;
 $288 = $56;
 $289 = ($288);
 $290 = $57;
 $55 = $290;
 $291 = $55;
 $292 = ($291);
 $54 = $292;
 $293 = $54;
 $294 = $293;
 $53 = $294;
 $295 = $53;
 $296 = ($295);
 $297 = HEAP32[$296>>2]|0;
 $__t$i$i$i = $297;
 $298 = ($291);
 $52 = $298;
 $299 = $52;
 $300 = $299;
 $51 = $300;
 $301 = $51;
 $302 = ($301);
 HEAP32[$302>>2] = 0;
 $303 = $__t$i$i$i;
 $304 = $57;
 $50 = $304;
 $305 = $50;
 $306 = ($305);
 $49 = $306;
 $307 = $49;
 $308 = $307;
 $48 = $308;
 $309 = $48;
 $310 = (($309) + 4|0);
 $34 = $310;
 $311 = $34;
 $312 = $58;
 $313 = $311;
 ;HEAP32[$312+0>>2]=HEAP32[$313+0>>2]|0;HEAP32[$312+4>>2]=HEAP32[$313+4>>2]|0;
 $tmp$i$i9 = $47;
 $tmp1$i$i10 = $58;
 ;HEAP8[$tmp$i$i9+0|0]=HEAP8[$tmp1$i$i10+0|0]|0;HEAP8[$tmp$i$i9+1|0]=HEAP8[$tmp1$i$i10+1|0]|0;HEAP8[$tmp$i$i9+2|0]=HEAP8[$tmp1$i$i10+2|0]|0;HEAP8[$tmp$i$i9+3|0]=HEAP8[$tmp1$i$i10+3|0]|0;HEAP8[$tmp$i$i9+4|0]=HEAP8[$tmp1$i$i10+4|0]|0;HEAP8[$tmp$i$i9+5|0]=HEAP8[$tmp1$i$i10+5|0]|0;HEAP8[$tmp$i$i9+6|0]=HEAP8[$tmp1$i$i10+6|0]|0;HEAP8[$tmp$i$i9+7|0]=HEAP8[$tmp1$i$i10+7|0]|0;
 $45 = $289;
 $46 = $303;
 $314 = $45;
 $315 = $46;
 $tmp$i$i$i11 = $__t21$i$i$i8;
 $tmp2$i$i$i12 = $47;
 ;HEAP8[$tmp$i$i$i11+0|0]=HEAP8[$tmp2$i$i$i12+0|0]|0;HEAP8[$tmp$i$i$i11+1|0]=HEAP8[$tmp2$i$i$i12+1|0]|0;HEAP8[$tmp$i$i$i11+2|0]=HEAP8[$tmp2$i$i$i12+2|0]|0;HEAP8[$tmp$i$i$i11+3|0]=HEAP8[$tmp2$i$i$i12+3|0]|0;HEAP8[$tmp$i$i$i11+4|0]=HEAP8[$tmp2$i$i$i12+4|0]|0;HEAP8[$tmp$i$i$i11+5|0]=HEAP8[$tmp2$i$i$i12+5|0]|0;HEAP8[$tmp$i$i$i11+6|0]=HEAP8[$tmp2$i$i$i12+6|0]|0;HEAP8[$tmp$i$i$i11+7|0]=HEAP8[$tmp2$i$i$i12+7|0]|0;
 $42 = $314;
 HEAP32[$43>>2] = $315;
 $316 = $42;
 $317 = $316;
 $41 = $43;
 $318 = $41;
 $319 = HEAP32[$318>>2]|0;
 $35 = $__t21$i$i$i8;
 $320 = $35;
 $321 = $44;
 $322 = $320;
 ;HEAP32[$321+0>>2]=HEAP32[$322+0>>2]|0;HEAP32[$321+4>>2]=HEAP32[$322+4>>2]|0;
 $tmp$i$i$i$i13 = $40;
 $tmp1$i$i$i$i14 = $44;
 ;HEAP8[$tmp$i$i$i$i13+0|0]=HEAP8[$tmp1$i$i$i$i14+0|0]|0;HEAP8[$tmp$i$i$i$i13+1|0]=HEAP8[$tmp1$i$i$i$i14+1|0]|0;HEAP8[$tmp$i$i$i$i13+2|0]=HEAP8[$tmp1$i$i$i$i14+2|0]|0;HEAP8[$tmp$i$i$i$i13+3|0]=HEAP8[$tmp1$i$i$i$i14+3|0]|0;HEAP8[$tmp$i$i$i$i13+4|0]=HEAP8[$tmp1$i$i$i$i14+4|0]|0;HEAP8[$tmp$i$i$i$i13+5|0]=HEAP8[$tmp1$i$i$i$i14+5|0]|0;HEAP8[$tmp$i$i$i$i13+6|0]=HEAP8[$tmp1$i$i$i$i14+6|0]|0;HEAP8[$tmp$i$i$i$i13+7|0]=HEAP8[$tmp1$i$i$i$i14+7|0]|0;
 $38 = $317;
 HEAP32[$39>>2] = $319;
 $323 = $38;
 $324 = ($323);
 $37 = $39;
 $325 = $37;
 $326 = HEAP32[$325>>2]|0;
 HEAP32[$324>>2] = $326;
 $327 = (($323) + 4|0);
 $36 = $40;
 $328 = $36;
 $329 = $327;
 $330 = $328;
 ;HEAP32[$329+0>>2]=HEAP32[$330+0>>2]|0;HEAP32[$329+4>>2]=HEAP32[$330+4>>2]|0;
 $167 = 1;
 $96 = $__h;
 $331 = $96;
 $95 = $331;
 $332 = $95;
 $93 = $332;
 $94 = 0;
 $333 = $93;
 $334 = ($333);
 $92 = $334;
 $335 = $92;
 $336 = $335;
 $91 = $336;
 $337 = $91;
 $338 = ($337);
 $339 = HEAP32[$338>>2]|0;
 $__tmp$i$i$i1 = $339;
 $340 = $94;
 $341 = ($333);
 $68 = $341;
 $342 = $68;
 $343 = $342;
 $67 = $343;
 $344 = $67;
 $345 = ($344);
 HEAP32[$345>>2] = $340;
 $346 = $__tmp$i$i$i1;
 $347 = ($346|0)!=(0|0);
 if (!($347)) {
  STACKTOP = sp;return;
 }
 $348 = ($333);
 $66 = $348;
 $349 = $66;
 $350 = $349;
 $65 = $350;
 $351 = $65;
 $352 = (($351) + 4|0);
 $353 = $__tmp$i$i$i1;
 $89 = $352;
 $90 = $353;
 $354 = $89;
 $355 = (($354) + 5|0);
 $356 = HEAP8[$355]|0;
 $357 = $356&1;
 if ($357) {
  $358 = ($354);
  $359 = HEAP32[$358>>2]|0;
  $360 = $90;
  $361 = (($360) + 8|0);
  $362 = $361;
  $363 = (($362) + 12|0);
  $88 = $363;
  $364 = $88;
  $365 = $364;
  $366 = $365;
  $85 = $359;
  $86 = $366;
  $367 = $85;
  $368 = $86;
  $tmp$i$i$i$i$i2 = $84;
  $tmp1$i$i$i$i$i3 = $87;
  ;HEAP8[$tmp$i$i$i$i$i2+0|0]=HEAP8[$tmp1$i$i$i$i$i3+0|0]|0;
  $82 = $367;
  $83 = $368;
 }
 $369 = (($354) + 4|0);
 $370 = HEAP8[$369]|0;
 $371 = $370&1;
 if ($371) {
  $372 = ($354);
  $373 = HEAP32[$372>>2]|0;
  $374 = $90;
  $375 = (($374) + 8|0);
  $376 = $375;
  $377 = ($376);
  $75 = $377;
  $378 = $75;
  $379 = $378;
  $380 = $379;
  $72 = $373;
  $73 = $380;
  $381 = $72;
  $382 = $73;
  $tmp$i1$i$i$i$i4 = $71;
  $tmp1$i2$i$i$i$i5 = $74;
  ;HEAP8[$tmp$i1$i$i$i$i4+0|0]=HEAP8[$tmp1$i2$i$i$i$i5+0|0]|0;
  $69 = $381;
  $70 = $382;
  $383 = $70;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($383);
 }
 $384 = $90;
 $385 = ($384|0)!=(0|0);
 if ($385) {
  $386 = ($354);
  $387 = HEAP32[$386>>2]|0;
  $388 = $90;
  $79 = $387;
  $80 = $388;
  $81 = 1;
  $389 = $79;
  $390 = $80;
  $391 = $81;
  $76 = $389;
  $77 = $390;
  $78 = $391;
  $392 = $77;
  $393 = $392;
  __ZdlPv($393);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS8_PvEE($agg$result,$this,$__nd) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__nd = $__nd|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0.0, $487 = 0, $488 = 0.0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0.0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0.0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0.0, $531 = 0.0, $532 = 0.0, $533 = 0.0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__inserted = 0, $__lhs_sz$i$i$i = 0, $__lp$i$i$i = 0, $__ndptr = 0, $__pn = 0, $__rp$i$i$i = 0, $tmp$i = 0, $tmp1$i = 0, label = 0, sp = 0;
 var u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1312|0;
 $94 = sp + 768|0;
 $97 = sp + 792|0;
 $__inserted = sp + 1256|0;
 $154 = sp + 1280|0;
 $155 = sp + 1288|0;
 $156 = sp + 1304|0;
 $152 = $this;
 $153 = $__nd;
 $157 = $152;
 $151 = $157;
 $158 = $151;
 $159 = (($158) + 12|0);
 $150 = $159;
 $160 = $150;
 $161 = $160;
 $149 = $161;
 $162 = $149;
 $163 = $162;
 $164 = $153;
 $165 = (($164) + 8|0);
 $105 = $163;
 $106 = $165;
 $166 = $105;
 $167 = $166;
 $168 = $106;
 $169 = $168;
 $170 = ($169);
 $171 = (__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($167,$170)|0);
 $172 = $153;
 $173 = (($172) + 4|0);
 HEAP32[$173>>2] = $171;
 $104 = $157;
 $174 = $104;
 $175 = ($174);
 $103 = $175;
 $176 = $103;
 $177 = ($176);
 $102 = $177;
 $178 = $102;
 $179 = $178;
 $101 = $179;
 $180 = $101;
 $181 = (($180) + 4|0);
 $100 = $181;
 $182 = $100;
 $183 = ($182);
 $99 = $183;
 $184 = $99;
 $185 = $184;
 $98 = $185;
 $186 = $98;
 $187 = ($186);
 $188 = HEAP32[$187>>2]|0;
 $__bc = $188;
 HEAP8[$__inserted] = 0;
 $189 = $__bc;
 $190 = ($189|0)!=(0);
 if ($190) {
  $191 = $153;
  $192 = (($191) + 4|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = $__bc;
  $86 = $193;
  $87 = $194;
  $195 = $87;
  $196 = $87;
  $197 = (($196) - 1)|0;
  $198 = $195 & $197;
  $199 = ($198|0)!=(0);
  if ($199) {
   $204 = $86;
   $205 = $87;
   $206 = (($204>>>0) % ($205>>>0))&-1;
   $207 = $206;
  } else {
   $200 = $86;
   $201 = $87;
   $202 = (($201) - 1)|0;
   $203 = $200 & $202;
   $207 = $203;
  }
  $__chash = $207;
  $208 = ($157);
  $209 = $__chash;
  $8 = $208;
  $9 = $209;
  $210 = $8;
  $211 = $9;
  $212 = ($210);
  $7 = $212;
  $213 = $7;
  $214 = $213;
  $6 = $214;
  $215 = $6;
  $216 = ($215);
  $217 = HEAP32[$216>>2]|0;
  $218 = (($217) + ($211<<2)|0);
  $219 = HEAP32[$218>>2]|0;
  $__ndptr = $219;
  $220 = $__ndptr;
  $221 = ($220|0)!=(0|0);
  do {
   if ($221) {
    $222 = $__ndptr;
    $223 = $222;
    $224 = ($223);
    $225 = HEAP32[$224>>2]|0;
    $__ndptr = $225;
    L9: while(1) {
     $226 = $__ndptr;
     $227 = ($226|0)!=(0|0);
     if ($227) {
      $228 = $__ndptr;
      $229 = (($228) + 4|0);
      $230 = HEAP32[$229>>2]|0;
      $231 = $__bc;
      $4 = $230;
      $5 = $231;
      $232 = $5;
      $233 = $5;
      $234 = (($233) - 1)|0;
      $235 = $232 & $234;
      $236 = ($235|0)!=(0);
      if ($236) {
       $241 = $4;
       $242 = $5;
       $243 = (($241>>>0) % ($242>>>0))&-1;
       $244 = $243;
      } else {
       $237 = $4;
       $238 = $5;
       $239 = (($238) - 1)|0;
       $240 = $237 & $239;
       $244 = $240;
      }
      $245 = $__chash;
      $246 = ($244|0)==($245|0);
      $247 = $246;
     } else {
      $247 = 0;
     }
     if (!($247)) {
      label = 41;
      break;
     }
     $3 = $157;
     $248 = $3;
     $249 = (($248) + 16|0);
     $2 = $249;
     $250 = $2;
     $251 = $250;
     $1 = $251;
     $252 = $1;
     $253 = $252;
     $254 = $__ndptr;
     $255 = (($254) + 8|0);
     $256 = $153;
     $257 = (($256) + 8|0);
     $70 = $253;
     $71 = $255;
     $72 = $257;
     $258 = $70;
     $259 = $258;
     $260 = $71;
     $261 = $260;
     $262 = ($261);
     $263 = $72;
     $264 = $263;
     $265 = ($264);
     $67 = $259;
     $68 = $262;
     $69 = $265;
     $266 = $68;
     $267 = $69;
     $65 = $266;
     $66 = $267;
     $268 = $65;
     $63 = $268;
     $269 = $63;
     $62 = $269;
     $270 = $62;
     $271 = ($270);
     $61 = $271;
     $272 = $61;
     $273 = $272;
     $60 = $273;
     $274 = $60;
     $275 = ($274);
     $276 = ($275);
     $277 = $276;
     $278 = ($277);
     $279 = $278;
     $280 = HEAP8[$279]|0;
     $281 = $280&255;
     $282 = $281 & 1;
     $283 = ($282|0)!=(0);
     if ($283) {
      $56 = $269;
      $284 = $56;
      $285 = ($284);
      $55 = $285;
      $286 = $55;
      $287 = $286;
      $54 = $287;
      $288 = $54;
      $289 = ($288);
      $290 = ($289);
      $291 = $290;
      $292 = (($291) + 4|0);
      $293 = HEAP32[$292>>2]|0;
      $307 = $293;
     } else {
      $59 = $269;
      $294 = $59;
      $295 = ($294);
      $58 = $295;
      $296 = $58;
      $297 = $296;
      $57 = $297;
      $298 = $57;
      $299 = ($298);
      $300 = ($299);
      $301 = $300;
      $302 = ($301);
      $303 = $302;
      $304 = HEAP8[$303]|0;
      $305 = $304&255;
      $306 = $305 >> 1;
      $307 = $306;
     }
     $__lhs_sz$i$i$i = $307;
     $308 = $__lhs_sz$i$i$i;
     $309 = $66;
     $53 = $309;
     $310 = $53;
     $52 = $310;
     $311 = $52;
     $312 = ($311);
     $51 = $312;
     $313 = $51;
     $314 = $313;
     $50 = $314;
     $315 = $50;
     $316 = ($315);
     $317 = ($316);
     $318 = $317;
     $319 = ($318);
     $320 = $319;
     $321 = HEAP8[$320]|0;
     $322 = $321&255;
     $323 = $322 & 1;
     $324 = ($323|0)!=(0);
     if ($324) {
      $46 = $310;
      $325 = $46;
      $326 = ($325);
      $45 = $326;
      $327 = $45;
      $328 = $327;
      $44 = $328;
      $329 = $44;
      $330 = ($329);
      $331 = ($330);
      $332 = $331;
      $333 = (($332) + 4|0);
      $334 = HEAP32[$333>>2]|0;
      $348 = $334;
     } else {
      $49 = $310;
      $335 = $49;
      $336 = ($335);
      $48 = $336;
      $337 = $48;
      $338 = $337;
      $47 = $338;
      $339 = $47;
      $340 = ($339);
      $341 = ($340);
      $342 = $341;
      $343 = ($342);
      $344 = $343;
      $345 = HEAP8[$344]|0;
      $346 = $345&255;
      $347 = $346 >> 1;
      $348 = $347;
     }
     $349 = ($308|0)!=($348|0);
     do {
      if ($349) {
       $$expand_i1_val = 0;
       $64 = $$expand_i1_val;
      } else {
       $350 = $65;
       $40 = $350;
       $351 = $40;
       $39 = $351;
       $352 = $39;
       $38 = $352;
       $353 = $38;
       $354 = ($353);
       $37 = $354;
       $355 = $37;
       $356 = $355;
       $36 = $356;
       $357 = $36;
       $358 = ($357);
       $359 = ($358);
       $360 = $359;
       $361 = ($360);
       $362 = $361;
       $363 = HEAP8[$362]|0;
       $364 = $363&255;
       $365 = $364 & 1;
       $366 = ($365|0)!=(0);
       if ($366) {
        $30 = $352;
        $367 = $30;
        $368 = ($367);
        $29 = $368;
        $369 = $29;
        $370 = $369;
        $28 = $370;
        $371 = $28;
        $372 = ($371);
        $373 = ($372);
        $374 = $373;
        $375 = (($374) + 8|0);
        $376 = HEAP32[$375>>2]|0;
        $389 = $376;
       } else {
        $35 = $352;
        $377 = $35;
        $378 = ($377);
        $34 = $378;
        $379 = $34;
        $380 = $379;
        $33 = $380;
        $381 = $33;
        $382 = ($381);
        $383 = ($382);
        $384 = $383;
        $385 = (($384) + 1|0);
        $386 = ($385);
        $32 = $386;
        $387 = $32;
        $31 = $387;
        $388 = $31;
        $389 = $388;
       }
       $27 = $389;
       $390 = $27;
       $__lp$i$i$i = $390;
       $391 = $66;
       $23 = $391;
       $392 = $23;
       $22 = $392;
       $393 = $22;
       $21 = $393;
       $394 = $21;
       $395 = ($394);
       $20 = $395;
       $396 = $20;
       $397 = $396;
       $19 = $397;
       $398 = $19;
       $399 = ($398);
       $400 = ($399);
       $401 = $400;
       $402 = ($401);
       $403 = $402;
       $404 = HEAP8[$403]|0;
       $405 = $404&255;
       $406 = $405 & 1;
       $407 = ($406|0)!=(0);
       if ($407) {
        $13 = $393;
        $408 = $13;
        $409 = ($408);
        $12 = $409;
        $410 = $12;
        $411 = $410;
        $11 = $411;
        $412 = $11;
        $413 = ($412);
        $414 = ($413);
        $415 = $414;
        $416 = (($415) + 8|0);
        $417 = HEAP32[$416>>2]|0;
        $430 = $417;
       } else {
        $18 = $393;
        $418 = $18;
        $419 = ($418);
        $17 = $419;
        $420 = $17;
        $421 = $420;
        $16 = $421;
        $422 = $16;
        $423 = ($422);
        $424 = ($423);
        $425 = $424;
        $426 = (($425) + 1|0);
        $427 = ($426);
        $15 = $427;
        $428 = $15;
        $14 = $428;
        $429 = $14;
        $430 = $429;
       }
       $10 = $430;
       $431 = $10;
       $__rp$i$i$i = $431;
       $432 = $65;
       $26 = $432;
       $433 = $26;
       $434 = ($433);
       $25 = $434;
       $435 = $25;
       $436 = $435;
       $24 = $436;
       $437 = $24;
       $438 = ($437);
       $439 = ($438);
       $440 = $439;
       $441 = ($440);
       $442 = $441;
       $443 = HEAP8[$442]|0;
       $444 = $443&255;
       $445 = $444 & 1;
       $446 = ($445|0)!=(0);
       if ($446) {
        $447 = $__lp$i$i$i;
        $448 = $__rp$i$i$i;
        $449 = $__lhs_sz$i$i$i;
        $41 = $447;
        $42 = $448;
        $43 = $449;
        $450 = $41;
        $451 = $42;
        $452 = $43;
        __THREW__ = 0;
        $453 = (invoke_iiii(25,($450|0),($451|0),($452|0))|0);
        $454 = __THREW__; __THREW__ = 0;
        $455 = $454&1;
        if ($455) {
         label = 36;
         break L9;
        }
        $456 = ($453|0)==(0);
        $$expand_i1_val2 = $456&1;
        $64 = $$expand_i1_val2;
        break;
       }
       while(1) {
        $457 = $__lhs_sz$i$i$i;
        $458 = ($457|0)!=(0);
        if (!($458)) {
         label = 35;
         break;
        }
        $459 = $__lp$i$i$i;
        $460 = HEAP8[$459]|0;
        $461 = $460 << 24 >> 24;
        $462 = $__rp$i$i$i;
        $463 = HEAP8[$462]|0;
        $464 = $463 << 24 >> 24;
        $465 = ($461|0)!=($464|0);
        if ($465) {
         label = 33;
         break;
        }
        $466 = $__lhs_sz$i$i$i;
        $467 = (($466) + -1)|0;
        $__lhs_sz$i$i$i = $467;
        $468 = $__lp$i$i$i;
        $469 = (($468) + 1|0);
        $__lp$i$i$i = $469;
        $470 = $__rp$i$i$i;
        $471 = (($470) + 1|0);
        $__rp$i$i$i = $471;
       }
       if ((label|0) == 33) {
        label = 0;
        $$expand_i1_val4 = 0;
        $64 = $$expand_i1_val4;
        break;
       }
       else if ((label|0) == 35) {
        label = 0;
        $$expand_i1_val6 = 1;
        $64 = $$expand_i1_val6;
        break;
       }
      }
     } while(0);
     $$pre_trunc = $64;
     $473 = $$pre_trunc&1;
     if ($473) {
      label = 38;
      break;
     }
     $474 = $__ndptr;
     $475 = $474;
     $476 = ($475);
     $477 = HEAP32[$476>>2]|0;
     $__ndptr = $477;
    }
    if ((label|0) == 36) {
     $472 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$0 = tempRet0;
     ___clang_call_terminate($472);
     // unreachable;
    }
    else if ((label|0) == 38) {
     $683 = $__ndptr;
     $139 = $156;
     $140 = $683;
     $684 = $139;
     $685 = $140;
     $137 = $684;
     $138 = $685;
     $686 = $137;
     $687 = ($686);
     $688 = $138;
     HEAP32[$687>>2] = $688;
     $146 = $agg$result;
     $147 = $156;
     $148 = $__inserted;
     $689 = $146;
     $690 = $148;
     $691 = $147;
     $143 = $689;
     $144 = $691;
     $145 = $690;
     $692 = $143;
     $693 = ($692);
     $694 = $144;
     $142 = $694;
     $695 = $142;
     $696 = $693;
     $697 = $695;
     ;HEAP32[$696+0>>2]=HEAP32[$697+0>>2]|0;
     $698 = (($692) + 4|0);
     $699 = $145;
     $141 = $699;
     $700 = $141;
     $701 = HEAP8[$700]|0;
     $702 = $701&1;
     $703 = $702&1;
     HEAP8[$698] = $703;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 41) {
     break;
    }
   }
  } while(0);
 }
 $75 = $157;
 $478 = $75;
 $479 = (($478) + 12|0);
 $74 = $479;
 $480 = $74;
 $481 = $480;
 $73 = $481;
 $482 = $73;
 $483 = ($482);
 $484 = HEAP32[$483>>2]|0;
 $485 = (($484) + 1)|0;
 $486 = (+($485>>>0));
 $487 = $__bc;
 $488 = (+($487>>>0));
 $78 = $157;
 $489 = $78;
 $490 = (($489) + 16|0);
 $77 = $490;
 $491 = $77;
 $492 = $491;
 $76 = $492;
 $493 = $76;
 $494 = ($493);
 $495 = +HEAPF32[$494>>2];
 $496 = $488 * $495;
 $497 = $486 > $496;
 if ($497) {
  label = 45;
 } else {
  $498 = $__bc;
  $499 = ($498|0)==(0);
  if ($499) {
   label = 45;
  }
 }
 if ((label|0) == 45) {
  $500 = $__bc;
  $501 = $500<<1;
  $502 = $__bc;
  $79 = $502;
  $503 = $79;
  $504 = ($503>>>0)>(2);
  if ($504) {
   $505 = $79;
   $506 = $79;
   $507 = (($506) - 1)|0;
   $508 = $505 & $507;
   $509 = ($508|0)!=(0);
   $510 = $509 ^ 1;
   $511 = $510;
  } else {
   $511 = 0;
  }
  $512 = $511 ^ 1;
  $513 = $512&1;
  $514 = (($501) + ($513))|0;
  HEAP32[$154>>2] = $514;
  $82 = $157;
  $515 = $82;
  $516 = (($515) + 12|0);
  $81 = $516;
  $517 = $81;
  $518 = $517;
  $80 = $518;
  $519 = $80;
  $520 = ($519);
  $521 = HEAP32[$520>>2]|0;
  $522 = (($521) + 1)|0;
  $523 = (+($522>>>0));
  $85 = $157;
  $524 = $85;
  $525 = (($524) + 16|0);
  $84 = $525;
  $526 = $84;
  $527 = $526;
  $83 = $527;
  $528 = $83;
  $529 = ($528);
  $530 = +HEAPF32[$529>>2];
  $531 = $523 / $530;
  $88 = $531;
  $532 = $88;
  $533 = (+Math_ceil((+$532)));
  $534 = (~~(($533))>>>0);
  HEAP32[$155>>2] = $534;
  $95 = $154;
  $96 = $155;
  $535 = $95;
  $536 = $96;
  $tmp$i = $94;
  $tmp1$i = $97;
  ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
  $92 = $535;
  $93 = $536;
  $537 = $92;
  $538 = $93;
  $89 = $94;
  $90 = $537;
  $91 = $538;
  $539 = $90;
  $540 = HEAP32[$539>>2]|0;
  $541 = $91;
  $542 = HEAP32[$541>>2]|0;
  $543 = ($540>>>0)<($542>>>0);
  if ($543) {
   $544 = $93;
   $546 = $544;
  } else {
   $545 = $92;
   $546 = $545;
  }
  $547 = HEAP32[$546>>2]|0;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEj($157,$547);
  $113 = $157;
  $548 = $113;
  $549 = ($548);
  $112 = $549;
  $550 = $112;
  $551 = ($550);
  $111 = $551;
  $552 = $111;
  $553 = $552;
  $110 = $553;
  $554 = $110;
  $555 = (($554) + 4|0);
  $109 = $555;
  $556 = $109;
  $557 = ($556);
  $108 = $557;
  $558 = $108;
  $559 = $558;
  $107 = $559;
  $560 = $107;
  $561 = ($560);
  $562 = HEAP32[$561>>2]|0;
  $__bc = $562;
  $563 = $153;
  $564 = (($563) + 4|0);
  $565 = HEAP32[$564>>2]|0;
  $566 = $__bc;
  $114 = $565;
  $115 = $566;
  $567 = $115;
  $568 = $115;
  $569 = (($568) - 1)|0;
  $570 = $567 & $569;
  $571 = ($570|0)!=(0);
  if ($571) {
   $576 = $114;
   $577 = $115;
   $578 = (($576>>>0) % ($577>>>0))&-1;
   $579 = $578;
  } else {
   $572 = $114;
   $573 = $115;
   $574 = (($573) - 1)|0;
   $575 = $572 & $574;
   $579 = $575;
  }
  $__chash = $579;
 }
 $580 = ($157);
 $581 = $__chash;
 $118 = $580;
 $119 = $581;
 $582 = $118;
 $583 = $119;
 $584 = ($582);
 $117 = $584;
 $585 = $117;
 $586 = $585;
 $116 = $586;
 $587 = $116;
 $588 = ($587);
 $589 = HEAP32[$588>>2]|0;
 $590 = (($589) + ($583<<2)|0);
 $591 = HEAP32[$590>>2]|0;
 $__pn = $591;
 $592 = $__pn;
 $593 = ($592|0)==(0|0);
 if ($593) {
  $594 = (($157) + 8|0);
  $121 = $594;
  $595 = $121;
  $596 = $595;
  $120 = $596;
  $597 = $120;
  $598 = ($597);
  $123 = $598;
  $599 = $123;
  $122 = $599;
  $600 = $122;
  $601 = $600;
  $602 = $601;
  $603 = $602;
  $__pn = $603;
  $604 = $__pn;
  $605 = $604;
  $606 = ($605);
  $607 = HEAP32[$606>>2]|0;
  $608 = $153;
  $609 = $608;
  $610 = ($609);
  HEAP32[$610>>2] = $607;
  $611 = $153;
  $612 = $__pn;
  $613 = $612;
  $614 = ($613);
  HEAP32[$614>>2] = $611;
  $615 = $__pn;
  $616 = ($157);
  $617 = $__chash;
  $126 = $616;
  $127 = $617;
  $618 = $126;
  $619 = $127;
  $620 = ($618);
  $125 = $620;
  $621 = $125;
  $622 = $621;
  $124 = $622;
  $623 = $124;
  $624 = ($623);
  $625 = HEAP32[$624>>2]|0;
  $626 = (($625) + ($619<<2)|0);
  HEAP32[$626>>2] = $615;
  $627 = $153;
  $628 = $627;
  $629 = ($628);
  $630 = HEAP32[$629>>2]|0;
  $631 = ($630|0)!=(0|0);
  if ($631) {
   $632 = $153;
   $633 = ($157);
   $634 = $153;
   $635 = $634;
   $636 = ($635);
   $637 = HEAP32[$636>>2]|0;
   $638 = (($637) + 4|0);
   $639 = HEAP32[$638>>2]|0;
   $640 = $__bc;
   $128 = $639;
   $129 = $640;
   $641 = $129;
   $642 = $129;
   $643 = (($642) - 1)|0;
   $644 = $641 & $643;
   $645 = ($644|0)!=(0);
   if ($645) {
    $650 = $128;
    $651 = $129;
    $652 = (($650>>>0) % ($651>>>0))&-1;
    $653 = $652;
   } else {
    $646 = $128;
    $647 = $129;
    $648 = (($647) - 1)|0;
    $649 = $646 & $648;
    $653 = $649;
   }
   $132 = $633;
   $133 = $653;
   $654 = $132;
   $655 = $133;
   $656 = ($654);
   $131 = $656;
   $657 = $131;
   $658 = $657;
   $130 = $658;
   $659 = $130;
   $660 = ($659);
   $661 = HEAP32[$660>>2]|0;
   $662 = (($661) + ($655<<2)|0);
   HEAP32[$662>>2] = $632;
  }
 } else {
  $663 = $__pn;
  $664 = $663;
  $665 = ($664);
  $666 = HEAP32[$665>>2]|0;
  $667 = $153;
  $668 = $667;
  $669 = ($668);
  HEAP32[$669>>2] = $666;
  $670 = $153;
  $671 = $__pn;
  $672 = $671;
  $673 = ($672);
  HEAP32[$673>>2] = $670;
 }
 $674 = $153;
 $__ndptr = $674;
 $136 = $157;
 $675 = $136;
 $676 = (($675) + 12|0);
 $135 = $676;
 $677 = $135;
 $678 = $677;
 $134 = $678;
 $679 = $134;
 $680 = ($679);
 $681 = HEAP32[$680>>2]|0;
 $682 = (($681) + 1)|0;
 HEAP32[$680>>2] = $682;
 HEAP8[$__inserted] = 1;
 $683 = $__ndptr;
 $139 = $156;
 $140 = $683;
 $684 = $139;
 $685 = $140;
 $137 = $684;
 $138 = $685;
 $686 = $137;
 $687 = ($686);
 $688 = $138;
 HEAP32[$687>>2] = $688;
 $146 = $agg$result;
 $147 = $156;
 $148 = $__inserted;
 $689 = $146;
 $690 = $148;
 $691 = $147;
 $143 = $689;
 $144 = $691;
 $145 = $690;
 $692 = $143;
 $693 = ($692);
 $694 = $144;
 $142 = $694;
 $695 = $142;
 $696 = $693;
 $697 = $695;
 ;HEAP32[$696+0>>2]=HEAP32[$697+0>>2]|0;
 $698 = (($692) + 4|0);
 $699 = $145;
 $141 = $699;
 $700 = $141;
 $701 = HEAP8[$700]|0;
 $702 = $701&1;
 $703 = $702&1;
 HEAP8[$698] = $703;
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE6rehashEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0, $98 = 0;
 var $99 = 0, $__bc = 0, $tmp$i = 0, $tmp1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 296|0;
 $22 = sp + 168|0;
 $25 = sp + 192|0;
 $35 = sp + 272|0;
 $36 = sp + 288|0;
 $34 = $this;
 HEAP32[$35>>2] = $__n;
 $37 = $34;
 $38 = HEAP32[$35>>2]|0;
 $39 = ($38|0)==(1);
 if ($39) {
  HEAP32[$35>>2] = 2;
 } else {
  $40 = HEAP32[$35>>2]|0;
  $41 = HEAP32[$35>>2]|0;
  $42 = (($41) - 1)|0;
  $43 = $40 & $42;
  $44 = ($43|0)!=(0);
  if ($44) {
   $45 = HEAP32[$35>>2]|0;
   $46 = (__ZNSt3__112__next_primeEj($45)|0);
   HEAP32[$35>>2] = $46;
  }
 }
 $33 = $37;
 $47 = $33;
 $48 = ($47);
 $32 = $48;
 $49 = $32;
 $50 = ($49);
 $31 = $50;
 $51 = $31;
 $52 = $51;
 $30 = $52;
 $53 = $30;
 $54 = (($53) + 4|0);
 $29 = $54;
 $55 = $29;
 $56 = ($55);
 $28 = $56;
 $57 = $28;
 $58 = $57;
 $27 = $58;
 $59 = $27;
 $60 = ($59);
 $61 = HEAP32[$60>>2]|0;
 $__bc = $61;
 $62 = HEAP32[$35>>2]|0;
 $63 = $__bc;
 $64 = ($62>>>0)>($63>>>0);
 if ($64) {
  $65 = HEAP32[$35>>2]|0;
  __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($37,$65);
  STACKTOP = sp;return;
 }
 $66 = HEAP32[$35>>2]|0;
 $67 = $__bc;
 $68 = ($66>>>0)<($67>>>0);
 if ($68) {
  $69 = $__bc;
  $26 = $69;
  $70 = $26;
  $71 = ($70>>>0)>(2);
  if ($71) {
   $72 = $26;
   $73 = $26;
   $74 = (($73) - 1)|0;
   $75 = $72 & $74;
   $76 = ($75|0)!=(0);
   $77 = $76 ^ 1;
   $78 = $77;
  } else {
   $78 = 0;
  }
  if ($78) {
   $15 = $37;
   $79 = $15;
   $80 = (($79) + 12|0);
   $14 = $80;
   $81 = $14;
   $82 = $81;
   $13 = $82;
   $83 = $13;
   $84 = ($83);
   $85 = HEAP32[$84>>2]|0;
   $86 = (+($85>>>0));
   $3 = $37;
   $87 = $3;
   $88 = (($87) + 16|0);
   $2 = $88;
   $89 = $2;
   $90 = $89;
   $1 = $90;
   $91 = $1;
   $92 = ($91);
   $93 = +HEAPF32[$92>>2];
   $94 = $86 / $93;
   $4 = $94;
   $95 = $4;
   $96 = (+Math_ceil((+$95)));
   $97 = (~~(($96))>>>0);
   $6 = $97;
   $98 = $6;
   $99 = (($98) - 1)|0;
   $5 = $99;
   $100 = $5;
   $101 = (_llvm_ctlz_i32(($100|0))|0);
   $102 = (32 - ($101))|0;
   $103 = 1 << $102;
   $124 = $103;
  } else {
   $9 = $37;
   $104 = $9;
   $105 = (($104) + 12|0);
   $8 = $105;
   $106 = $8;
   $107 = $106;
   $7 = $107;
   $108 = $7;
   $109 = ($108);
   $110 = HEAP32[$109>>2]|0;
   $111 = (+($110>>>0));
   $12 = $37;
   $112 = $12;
   $113 = (($112) + 16|0);
   $11 = $113;
   $114 = $11;
   $115 = $114;
   $10 = $115;
   $116 = $10;
   $117 = ($116);
   $118 = +HEAPF32[$117>>2];
   $119 = $111 / $118;
   $16 = $119;
   $120 = $16;
   $121 = (+Math_ceil((+$120)));
   $122 = (~~(($121))>>>0);
   $123 = (__ZNSt3__112__next_primeEj($122)|0);
   $124 = $123;
  }
  HEAP32[$36>>2] = $124;
  $23 = $35;
  $24 = $36;
  $125 = $23;
  $126 = $24;
  $tmp$i = $22;
  $tmp1$i = $25;
  ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
  $20 = $125;
  $21 = $126;
  $127 = $20;
  $128 = $21;
  $17 = $22;
  $18 = $127;
  $19 = $128;
  $129 = $18;
  $130 = HEAP32[$129>>2]|0;
  $131 = $19;
  $132 = HEAP32[$131>>2]|0;
  $133 = ($130>>>0)<($132>>>0);
  if ($133) {
   $134 = $21;
   $136 = $134;
  } else {
   $135 = $20;
   $136 = $135;
  }
  $137 = HEAP32[$136>>2]|0;
  HEAP32[$35>>2] = $137;
  $138 = HEAP32[$35>>2]|0;
  $139 = $__bc;
  $140 = ($138>>>0)<($139>>>0);
  if ($140) {
   $141 = HEAP32[$35>>2]|0;
   __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($37,$141);
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE8__rehashEj($this,$__nbc) {
 $this = $this|0;
 $__nbc = $__nbc|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__chash = 0, $__cp = 0, $__i = 0, $__lhs_sz$i$i$i = 0, $__lp$i$i$i = 0, $__np = 0, $__npa = 0, $__phash = 0, $__pp = 0, $__rp$i$i$i = 0, $__tmp$i = 0, label = 0;
 var sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1200|0;
 $138 = $this;
 $139 = $__nbc;
 $140 = $138;
 $141 = ($140);
 $137 = $141;
 $142 = $137;
 $143 = ($142);
 $136 = $143;
 $144 = $136;
 $145 = $144;
 $135 = $145;
 $146 = $135;
 $147 = (($146) + 4|0);
 $63 = $147;
 $148 = $63;
 $149 = ($148);
 $62 = $149;
 $150 = $62;
 $151 = $150;
 $61 = $151;
 $152 = $61;
 $153 = $152;
 $__npa = $153;
 $154 = ($140);
 $155 = $139;
 $156 = ($155>>>0)>(0);
 if ($156) {
  $157 = $__npa;
  $158 = $139;
  $59 = $157;
  $60 = $158;
  $159 = $59;
  $160 = $60;
  $56 = $159;
  $57 = $160;
  $58 = 0;
  $161 = $57;
  $162 = $161<<2;
  $163 = (__Znwj($162)|0);
  $164 = $163;
  $165 = $164;
 } else {
  $165 = 0;
 }
 $54 = $154;
 $55 = $165;
 $166 = $54;
 $167 = ($166);
 $53 = $167;
 $168 = $53;
 $169 = $168;
 $52 = $169;
 $170 = $52;
 $171 = ($170);
 $172 = HEAP32[$171>>2]|0;
 $__tmp$i = $172;
 $173 = $55;
 $174 = ($166);
 $37 = $174;
 $175 = $37;
 $176 = $175;
 $36 = $176;
 $177 = $36;
 $178 = ($177);
 HEAP32[$178>>2] = $173;
 $179 = $__tmp$i;
 $180 = ($179|0)!=(0|0);
 if ($180) {
  $181 = ($166);
  $35 = $181;
  $182 = $35;
  $183 = $182;
  $34 = $183;
  $184 = $34;
  $185 = (($184) + 4|0);
  $186 = $__tmp$i;
  $50 = $185;
  $51 = $186;
  $187 = $50;
  $49 = $187;
  $188 = $49;
  $189 = ($188);
  $48 = $189;
  $190 = $48;
  $191 = $190;
  $47 = $191;
  $192 = $47;
  $193 = $192;
  $194 = $51;
  $40 = $187;
  $195 = $40;
  $196 = ($195);
  $39 = $196;
  $197 = $39;
  $198 = $197;
  $38 = $198;
  $199 = $38;
  $200 = ($199);
  $201 = HEAP32[$200>>2]|0;
  $44 = $193;
  $45 = $194;
  $46 = $201;
  $202 = $44;
  $203 = $45;
  $204 = $46;
  $41 = $202;
  $42 = $203;
  $43 = $204;
  $205 = $42;
  $206 = $205;
  __ZdlPv($206);
 }
 $207 = $139;
 $208 = ($140);
 $33 = $208;
 $209 = $33;
 $210 = ($209);
 $32 = $210;
 $211 = $32;
 $212 = $211;
 $31 = $212;
 $213 = $31;
 $214 = (($213) + 4|0);
 $3 = $214;
 $215 = $3;
 $216 = ($215);
 $2 = $216;
 $217 = $2;
 $218 = $217;
 $1 = $218;
 $219 = $1;
 $220 = ($219);
 HEAP32[$220>>2] = $207;
 $221 = $139;
 $222 = ($221>>>0)>(0);
 if (!($222)) {
  STACKTOP = sp;return;
 }
 $__i = 0;
 while(1) {
  $223 = $__i;
  $224 = $139;
  $225 = ($223>>>0)<($224>>>0);
  if (!($225)) {
   break;
  }
  $226 = ($140);
  $227 = $__i;
  $6 = $226;
  $7 = $227;
  $228 = $6;
  $229 = $7;
  $230 = ($228);
  $5 = $230;
  $231 = $5;
  $232 = $231;
  $4 = $232;
  $233 = $4;
  $234 = ($233);
  $235 = HEAP32[$234>>2]|0;
  $236 = (($235) + ($229<<2)|0);
  HEAP32[$236>>2] = 0;
  $237 = $__i;
  $238 = (($237) + 1)|0;
  $__i = $238;
 }
 $239 = (($140) + 8|0);
 $9 = $239;
 $240 = $9;
 $241 = $240;
 $8 = $241;
 $242 = $8;
 $243 = ($242);
 $11 = $243;
 $244 = $11;
 $10 = $244;
 $245 = $10;
 $246 = $245;
 $247 = $246;
 $248 = $247;
 $__pp = $248;
 $249 = $__pp;
 $250 = $249;
 $251 = ($250);
 $252 = HEAP32[$251>>2]|0;
 $__cp = $252;
 $253 = $__cp;
 $254 = ($253|0)!=(0|0);
 do {
  if ($254) {
   $255 = $__cp;
   $256 = (($255) + 4|0);
   $257 = HEAP32[$256>>2]|0;
   $258 = $139;
   $12 = $257;
   $13 = $258;
   $259 = $13;
   $260 = $13;
   $261 = (($260) - 1)|0;
   $262 = $259 & $261;
   $263 = ($262|0)!=(0);
   if ($263) {
    $268 = $12;
    $269 = $13;
    $270 = (($268>>>0) % ($269>>>0))&-1;
    $271 = $270;
   } else {
    $264 = $12;
    $265 = $13;
    $266 = (($265) - 1)|0;
    $267 = $264 & $266;
    $271 = $267;
   }
   $__chash = $271;
   $272 = $__pp;
   $273 = ($140);
   $274 = $__chash;
   $16 = $273;
   $17 = $274;
   $275 = $16;
   $276 = $17;
   $277 = ($275);
   $15 = $277;
   $278 = $15;
   $279 = $278;
   $14 = $279;
   $280 = $14;
   $281 = ($280);
   $282 = HEAP32[$281>>2]|0;
   $283 = (($282) + ($276<<2)|0);
   HEAP32[$283>>2] = $272;
   $284 = $__chash;
   $__phash = $284;
   $285 = $__cp;
   $__pp = $285;
   $286 = $__cp;
   $287 = $286;
   $288 = ($287);
   $289 = HEAP32[$288>>2]|0;
   $__cp = $289;
   L22: while(1) {
    $290 = $__cp;
    $291 = ($290|0)!=(0|0);
    if (!($291)) {
     label = 58;
     break;
    }
    $292 = $__cp;
    $293 = (($292) + 4|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = $139;
    $18 = $294;
    $19 = $295;
    $296 = $19;
    $297 = $19;
    $298 = (($297) - 1)|0;
    $299 = $296 & $298;
    $300 = ($299|0)!=(0);
    if ($300) {
     $305 = $18;
     $306 = $19;
     $307 = (($305>>>0) % ($306>>>0))&-1;
     $308 = $307;
    } else {
     $301 = $18;
     $302 = $19;
     $303 = (($302) - 1)|0;
     $304 = $301 & $303;
     $308 = $304;
    }
    $__chash = $308;
    $309 = $__chash;
    $310 = $__phash;
    $311 = ($309|0)==($310|0);
    if ($311) {
     $312 = $__cp;
     $__pp = $312;
    } else {
     $313 = ($140);
     $314 = $__chash;
     $22 = $313;
     $23 = $314;
     $315 = $22;
     $316 = $23;
     $317 = ($315);
     $21 = $317;
     $318 = $21;
     $319 = $318;
     $20 = $319;
     $320 = $20;
     $321 = ($320);
     $322 = HEAP32[$321>>2]|0;
     $323 = (($322) + ($316<<2)|0);
     $324 = HEAP32[$323>>2]|0;
     $325 = ($324|0)==(0|0);
     if ($325) {
      $326 = $__pp;
      $327 = ($140);
      $328 = $__chash;
      $26 = $327;
      $27 = $328;
      $329 = $26;
      $330 = $27;
      $331 = ($329);
      $25 = $331;
      $332 = $25;
      $333 = $332;
      $24 = $333;
      $334 = $24;
      $335 = ($334);
      $336 = HEAP32[$335>>2]|0;
      $337 = (($336) + ($330<<2)|0);
      HEAP32[$337>>2] = $326;
      $338 = $__cp;
      $__pp = $338;
      $339 = $__chash;
      $__phash = $339;
     } else {
      $340 = $__cp;
      $__np = $340;
      while(1) {
       $341 = $__np;
       $342 = $341;
       $343 = ($342);
       $344 = HEAP32[$343>>2]|0;
       $345 = ($344|0)!=(0|0);
       if ($345) {
        $30 = $140;
        $346 = $30;
        $347 = (($346) + 16|0);
        $29 = $347;
        $348 = $29;
        $349 = $348;
        $28 = $349;
        $350 = $28;
        $351 = $350;
        $352 = $__cp;
        $353 = (($352) + 8|0);
        $354 = $__np;
        $355 = $354;
        $356 = ($355);
        $357 = HEAP32[$356>>2]|0;
        $358 = (($357) + 8|0);
        $124 = $351;
        $125 = $353;
        $126 = $358;
        $359 = $124;
        $360 = $359;
        $361 = $125;
        $362 = $361;
        $363 = ($362);
        $364 = $126;
        $365 = $364;
        $366 = ($365);
        $121 = $360;
        $122 = $363;
        $123 = $366;
        $367 = $122;
        $368 = $123;
        $119 = $367;
        $120 = $368;
        $369 = $119;
        $117 = $369;
        $370 = $117;
        $116 = $370;
        $371 = $116;
        $372 = ($371);
        $115 = $372;
        $373 = $115;
        $374 = $373;
        $114 = $374;
        $375 = $114;
        $376 = ($375);
        $377 = ($376);
        $378 = $377;
        $379 = ($378);
        $380 = $379;
        $381 = HEAP8[$380]|0;
        $382 = $381&255;
        $383 = $382 & 1;
        $384 = ($383|0)!=(0);
        if ($384) {
         $110 = $370;
         $385 = $110;
         $386 = ($385);
         $109 = $386;
         $387 = $109;
         $388 = $387;
         $108 = $388;
         $389 = $108;
         $390 = ($389);
         $391 = ($390);
         $392 = $391;
         $393 = (($392) + 4|0);
         $394 = HEAP32[$393>>2]|0;
         $408 = $394;
        } else {
         $113 = $370;
         $395 = $113;
         $396 = ($395);
         $112 = $396;
         $397 = $112;
         $398 = $397;
         $111 = $398;
         $399 = $111;
         $400 = ($399);
         $401 = ($400);
         $402 = $401;
         $403 = ($402);
         $404 = $403;
         $405 = HEAP8[$404]|0;
         $406 = $405&255;
         $407 = $406 >> 1;
         $408 = $407;
        }
        $__lhs_sz$i$i$i = $408;
        $409 = $__lhs_sz$i$i$i;
        $410 = $120;
        $107 = $410;
        $411 = $107;
        $106 = $411;
        $412 = $106;
        $413 = ($412);
        $105 = $413;
        $414 = $105;
        $415 = $414;
        $104 = $415;
        $416 = $104;
        $417 = ($416);
        $418 = ($417);
        $419 = $418;
        $420 = ($419);
        $421 = $420;
        $422 = HEAP8[$421]|0;
        $423 = $422&255;
        $424 = $423 & 1;
        $425 = ($424|0)!=(0);
        if ($425) {
         $100 = $411;
         $426 = $100;
         $427 = ($426);
         $99 = $427;
         $428 = $99;
         $429 = $428;
         $98 = $429;
         $430 = $98;
         $431 = ($430);
         $432 = ($431);
         $433 = $432;
         $434 = (($433) + 4|0);
         $435 = HEAP32[$434>>2]|0;
         $449 = $435;
        } else {
         $103 = $411;
         $436 = $103;
         $437 = ($436);
         $102 = $437;
         $438 = $102;
         $439 = $438;
         $101 = $439;
         $440 = $101;
         $441 = ($440);
         $442 = ($441);
         $443 = $442;
         $444 = ($443);
         $445 = $444;
         $446 = HEAP8[$445]|0;
         $447 = $446&255;
         $448 = $447 >> 1;
         $449 = $448;
        }
        $450 = ($409|0)!=($449|0);
        do {
         if ($450) {
          $$expand_i1_val = 0;
          $118 = $$expand_i1_val;
         } else {
          $451 = $119;
          $94 = $451;
          $452 = $94;
          $93 = $452;
          $453 = $93;
          $92 = $453;
          $454 = $92;
          $455 = ($454);
          $91 = $455;
          $456 = $91;
          $457 = $456;
          $90 = $457;
          $458 = $90;
          $459 = ($458);
          $460 = ($459);
          $461 = $460;
          $462 = ($461);
          $463 = $462;
          $464 = HEAP8[$463]|0;
          $465 = $464&255;
          $466 = $465 & 1;
          $467 = ($466|0)!=(0);
          if ($467) {
           $84 = $453;
           $468 = $84;
           $469 = ($468);
           $83 = $469;
           $470 = $83;
           $471 = $470;
           $82 = $471;
           $472 = $82;
           $473 = ($472);
           $474 = ($473);
           $475 = $474;
           $476 = (($475) + 8|0);
           $477 = HEAP32[$476>>2]|0;
           $490 = $477;
          } else {
           $89 = $453;
           $478 = $89;
           $479 = ($478);
           $88 = $479;
           $480 = $88;
           $481 = $480;
           $87 = $481;
           $482 = $87;
           $483 = ($482);
           $484 = ($483);
           $485 = $484;
           $486 = (($485) + 1|0);
           $487 = ($486);
           $86 = $487;
           $488 = $86;
           $85 = $488;
           $489 = $85;
           $490 = $489;
          }
          $81 = $490;
          $491 = $81;
          $__lp$i$i$i = $491;
          $492 = $120;
          $77 = $492;
          $493 = $77;
          $76 = $493;
          $494 = $76;
          $75 = $494;
          $495 = $75;
          $496 = ($495);
          $74 = $496;
          $497 = $74;
          $498 = $497;
          $73 = $498;
          $499 = $73;
          $500 = ($499);
          $501 = ($500);
          $502 = $501;
          $503 = ($502);
          $504 = $503;
          $505 = HEAP8[$504]|0;
          $506 = $505&255;
          $507 = $506 & 1;
          $508 = ($507|0)!=(0);
          if ($508) {
           $67 = $494;
           $509 = $67;
           $510 = ($509);
           $66 = $510;
           $511 = $66;
           $512 = $511;
           $65 = $512;
           $513 = $65;
           $514 = ($513);
           $515 = ($514);
           $516 = $515;
           $517 = (($516) + 8|0);
           $518 = HEAP32[$517>>2]|0;
           $531 = $518;
          } else {
           $72 = $494;
           $519 = $72;
           $520 = ($519);
           $71 = $520;
           $521 = $71;
           $522 = $521;
           $70 = $522;
           $523 = $70;
           $524 = ($523);
           $525 = ($524);
           $526 = $525;
           $527 = (($526) + 1|0);
           $528 = ($527);
           $69 = $528;
           $529 = $69;
           $68 = $529;
           $530 = $68;
           $531 = $530;
          }
          $64 = $531;
          $532 = $64;
          $__rp$i$i$i = $532;
          $533 = $119;
          $80 = $533;
          $534 = $80;
          $535 = ($534);
          $79 = $535;
          $536 = $79;
          $537 = $536;
          $78 = $537;
          $538 = $78;
          $539 = ($538);
          $540 = ($539);
          $541 = $540;
          $542 = ($541);
          $543 = $542;
          $544 = HEAP8[$543]|0;
          $545 = $544&255;
          $546 = $545 & 1;
          $547 = ($546|0)!=(0);
          if ($547) {
           $548 = $__lp$i$i$i;
           $549 = $__rp$i$i$i;
           $550 = $__lhs_sz$i$i$i;
           $95 = $548;
           $96 = $549;
           $97 = $550;
           $551 = $95;
           $552 = $96;
           $553 = $97;
           __THREW__ = 0;
           $554 = (invoke_iiii(25,($551|0),($552|0),($553|0))|0);
           $555 = __THREW__; __THREW__ = 0;
           $556 = $555&1;
           if ($556) {
            label = 49;
            break L22;
           }
           $557 = ($554|0)==(0);
           $$expand_i1_val2 = $557&1;
           $118 = $$expand_i1_val2;
           break;
          }
          while(1) {
           $558 = $__lhs_sz$i$i$i;
           $559 = ($558|0)!=(0);
           if (!($559)) {
            label = 48;
            break;
           }
           $560 = $__lp$i$i$i;
           $561 = HEAP8[$560]|0;
           $562 = $561 << 24 >> 24;
           $563 = $__rp$i$i$i;
           $564 = HEAP8[$563]|0;
           $565 = $564 << 24 >> 24;
           $566 = ($562|0)!=($565|0);
           if ($566) {
            label = 46;
            break;
           }
           $567 = $__lhs_sz$i$i$i;
           $568 = (($567) + -1)|0;
           $__lhs_sz$i$i$i = $568;
           $569 = $__lp$i$i$i;
           $570 = (($569) + 1|0);
           $__lp$i$i$i = $570;
           $571 = $__rp$i$i$i;
           $572 = (($571) + 1|0);
           $__rp$i$i$i = $572;
          }
          if ((label|0) == 46) {
           label = 0;
           $$expand_i1_val4 = 0;
           $118 = $$expand_i1_val4;
           break;
          }
          else if ((label|0) == 48) {
           label = 0;
           $$expand_i1_val6 = 1;
           $118 = $$expand_i1_val6;
           break;
          }
         }
        } while(0);
        $$pre_trunc = $118;
        $574 = $$pre_trunc&1;
        $575 = $574;
       } else {
        $575 = 0;
       }
       if (!($575)) {
        break;
       }
       $576 = $__np;
       $577 = $576;
       $578 = ($577);
       $579 = HEAP32[$578>>2]|0;
       $__np = $579;
      }
      $580 = $__np;
      $581 = $580;
      $582 = ($581);
      $583 = HEAP32[$582>>2]|0;
      $584 = $__pp;
      $585 = $584;
      $586 = ($585);
      HEAP32[$586>>2] = $583;
      $587 = ($140);
      $588 = $__chash;
      $129 = $587;
      $130 = $588;
      $589 = $129;
      $590 = $130;
      $591 = ($589);
      $128 = $591;
      $592 = $128;
      $593 = $592;
      $127 = $593;
      $594 = $127;
      $595 = ($594);
      $596 = HEAP32[$595>>2]|0;
      $597 = (($596) + ($590<<2)|0);
      $598 = HEAP32[$597>>2]|0;
      $599 = $598;
      $600 = ($599);
      $601 = HEAP32[$600>>2]|0;
      $602 = $__np;
      $603 = $602;
      $604 = ($603);
      HEAP32[$604>>2] = $601;
      $605 = $__cp;
      $606 = ($140);
      $607 = $__chash;
      $133 = $606;
      $134 = $607;
      $608 = $133;
      $609 = $134;
      $610 = ($608);
      $132 = $610;
      $611 = $132;
      $612 = $611;
      $131 = $612;
      $613 = $131;
      $614 = ($613);
      $615 = HEAP32[$614>>2]|0;
      $616 = (($615) + ($609<<2)|0);
      $617 = HEAP32[$616>>2]|0;
      $618 = $617;
      $619 = ($618);
      HEAP32[$619>>2] = $605;
     }
    }
    $620 = $__pp;
    $621 = $620;
    $622 = ($621);
    $623 = HEAP32[$622>>2]|0;
    $__cp = $623;
   }
   if ((label|0) == 49) {
    $573 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    u$0 = tempRet0;
    ___clang_call_terminate($573);
    // unreachable;
   }
   else if ((label|0) == 58) {
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__hash = 0, $__lhs_sz$i$i$i = 0, $__lp$i$i$i = 0, $__nd = 0, $__rp$i$i$i = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 832|0;
 $96 = $this;
 $97 = $__k;
 $98 = $96;
 $95 = $98;
 $99 = $95;
 $100 = (($99) + 12|0);
 $94 = $100;
 $101 = $94;
 $102 = $101;
 $93 = $102;
 $103 = $93;
 $104 = $103;
 $105 = $97;
 $19 = $104;
 $20 = $105;
 $106 = $19;
 $107 = $106;
 $108 = $20;
 $109 = (__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($107,$108)|0);
 $__hash = $109;
 $18 = $98;
 $110 = $18;
 $111 = ($110);
 $17 = $111;
 $112 = $17;
 $113 = ($112);
 $16 = $113;
 $114 = $16;
 $115 = $114;
 $15 = $115;
 $116 = $15;
 $117 = (($116) + 4|0);
 $14 = $117;
 $118 = $14;
 $119 = ($118);
 $13 = $119;
 $120 = $13;
 $121 = $120;
 $12 = $121;
 $122 = $12;
 $123 = ($122);
 $124 = HEAP32[$123>>2]|0;
 $__bc = $124;
 $125 = $__bc;
 $126 = ($125|0)!=(0);
 if ($126) {
  $127 = $__hash;
  $128 = $__bc;
  $10 = $127;
  $11 = $128;
  $129 = $11;
  $130 = $11;
  $131 = (($130) - 1)|0;
  $132 = $129 & $131;
  $133 = ($132|0)!=(0);
  if ($133) {
   $138 = $10;
   $139 = $11;
   $140 = (($138>>>0) % ($139>>>0))&-1;
   $141 = $140;
  } else {
   $134 = $10;
   $135 = $11;
   $136 = (($135) - 1)|0;
   $137 = $134 & $136;
   $141 = $137;
  }
  $__chash = $141;
  $142 = ($98);
  $143 = $__chash;
  $3 = $142;
  $4 = $143;
  $144 = $3;
  $145 = $4;
  $146 = ($144);
  $2 = $146;
  $147 = $2;
  $148 = $147;
  $1 = $148;
  $149 = $1;
  $150 = ($149);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($151) + ($145<<2)|0);
  $153 = HEAP32[$152>>2]|0;
  $__nd = $153;
  $154 = $__nd;
  $155 = ($154|0)!=(0|0);
  do {
   if ($155) {
    $156 = $__nd;
    $157 = $156;
    $158 = ($157);
    $159 = HEAP32[$158>>2]|0;
    $__nd = $159;
    L9: while(1) {
     $160 = $__nd;
     $161 = ($160|0)!=(0|0);
     if ($161) {
      $162 = $__nd;
      $163 = (($162) + 4|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = $__bc;
      $5 = $164;
      $6 = $165;
      $166 = $6;
      $167 = $6;
      $168 = (($167) - 1)|0;
      $169 = $166 & $168;
      $170 = ($169|0)!=(0);
      if ($170) {
       $175 = $5;
       $176 = $6;
       $177 = (($175>>>0) % ($176>>>0))&-1;
       $178 = $177;
      } else {
       $171 = $5;
       $172 = $6;
       $173 = (($172) - 1)|0;
       $174 = $171 & $173;
       $178 = $174;
      }
      $179 = $__chash;
      $180 = ($178|0)==($179|0);
      $181 = $180;
     } else {
      $181 = 0;
     }
     if (!($181)) {
      label = 41;
      break;
     }
     $9 = $98;
     $182 = $9;
     $183 = (($182) + 16|0);
     $8 = $183;
     $184 = $8;
     $185 = $184;
     $7 = $185;
     $186 = $7;
     $187 = $186;
     $188 = $__nd;
     $189 = (($188) + 8|0);
     $190 = $97;
     $81 = $187;
     $82 = $189;
     $83 = $190;
     $191 = $81;
     $192 = $191;
     $193 = $82;
     $194 = $193;
     $195 = ($194);
     $196 = $83;
     $78 = $192;
     $79 = $195;
     $80 = $196;
     $197 = $79;
     $198 = $80;
     $76 = $197;
     $77 = $198;
     $199 = $76;
     $74 = $199;
     $200 = $74;
     $73 = $200;
     $201 = $73;
     $202 = ($201);
     $72 = $202;
     $203 = $72;
     $204 = $203;
     $71 = $204;
     $205 = $71;
     $206 = ($205);
     $207 = ($206);
     $208 = $207;
     $209 = ($208);
     $210 = $209;
     $211 = HEAP8[$210]|0;
     $212 = $211&255;
     $213 = $212 & 1;
     $214 = ($213|0)!=(0);
     if ($214) {
      $67 = $200;
      $215 = $67;
      $216 = ($215);
      $66 = $216;
      $217 = $66;
      $218 = $217;
      $65 = $218;
      $219 = $65;
      $220 = ($219);
      $221 = ($220);
      $222 = $221;
      $223 = (($222) + 4|0);
      $224 = HEAP32[$223>>2]|0;
      $238 = $224;
     } else {
      $70 = $200;
      $225 = $70;
      $226 = ($225);
      $69 = $226;
      $227 = $69;
      $228 = $227;
      $68 = $228;
      $229 = $68;
      $230 = ($229);
      $231 = ($230);
      $232 = $231;
      $233 = ($232);
      $234 = $233;
      $235 = HEAP8[$234]|0;
      $236 = $235&255;
      $237 = $236 >> 1;
      $238 = $237;
     }
     $__lhs_sz$i$i$i = $238;
     $239 = $__lhs_sz$i$i$i;
     $240 = $77;
     $64 = $240;
     $241 = $64;
     $63 = $241;
     $242 = $63;
     $243 = ($242);
     $62 = $243;
     $244 = $62;
     $245 = $244;
     $61 = $245;
     $246 = $61;
     $247 = ($246);
     $248 = ($247);
     $249 = $248;
     $250 = ($249);
     $251 = $250;
     $252 = HEAP8[$251]|0;
     $253 = $252&255;
     $254 = $253 & 1;
     $255 = ($254|0)!=(0);
     if ($255) {
      $57 = $241;
      $256 = $57;
      $257 = ($256);
      $56 = $257;
      $258 = $56;
      $259 = $258;
      $55 = $259;
      $260 = $55;
      $261 = ($260);
      $262 = ($261);
      $263 = $262;
      $264 = (($263) + 4|0);
      $265 = HEAP32[$264>>2]|0;
      $279 = $265;
     } else {
      $60 = $241;
      $266 = $60;
      $267 = ($266);
      $59 = $267;
      $268 = $59;
      $269 = $268;
      $58 = $269;
      $270 = $58;
      $271 = ($270);
      $272 = ($271);
      $273 = $272;
      $274 = ($273);
      $275 = $274;
      $276 = HEAP8[$275]|0;
      $277 = $276&255;
      $278 = $277 >> 1;
      $279 = $278;
     }
     $280 = ($239|0)!=($279|0);
     do {
      if ($280) {
       $$expand_i1_val = 0;
       $75 = $$expand_i1_val;
      } else {
       $281 = $76;
       $51 = $281;
       $282 = $51;
       $50 = $282;
       $283 = $50;
       $49 = $283;
       $284 = $49;
       $285 = ($284);
       $48 = $285;
       $286 = $48;
       $287 = $286;
       $47 = $287;
       $288 = $47;
       $289 = ($288);
       $290 = ($289);
       $291 = $290;
       $292 = ($291);
       $293 = $292;
       $294 = HEAP8[$293]|0;
       $295 = $294&255;
       $296 = $295 & 1;
       $297 = ($296|0)!=(0);
       if ($297) {
        $41 = $283;
        $298 = $41;
        $299 = ($298);
        $40 = $299;
        $300 = $40;
        $301 = $300;
        $39 = $301;
        $302 = $39;
        $303 = ($302);
        $304 = ($303);
        $305 = $304;
        $306 = (($305) + 8|0);
        $307 = HEAP32[$306>>2]|0;
        $320 = $307;
       } else {
        $46 = $283;
        $308 = $46;
        $309 = ($308);
        $45 = $309;
        $310 = $45;
        $311 = $310;
        $44 = $311;
        $312 = $44;
        $313 = ($312);
        $314 = ($313);
        $315 = $314;
        $316 = (($315) + 1|0);
        $317 = ($316);
        $43 = $317;
        $318 = $43;
        $42 = $318;
        $319 = $42;
        $320 = $319;
       }
       $38 = $320;
       $321 = $38;
       $__lp$i$i$i = $321;
       $322 = $77;
       $34 = $322;
       $323 = $34;
       $33 = $323;
       $324 = $33;
       $32 = $324;
       $325 = $32;
       $326 = ($325);
       $31 = $326;
       $327 = $31;
       $328 = $327;
       $30 = $328;
       $329 = $30;
       $330 = ($329);
       $331 = ($330);
       $332 = $331;
       $333 = ($332);
       $334 = $333;
       $335 = HEAP8[$334]|0;
       $336 = $335&255;
       $337 = $336 & 1;
       $338 = ($337|0)!=(0);
       if ($338) {
        $24 = $324;
        $339 = $24;
        $340 = ($339);
        $23 = $340;
        $341 = $23;
        $342 = $341;
        $22 = $342;
        $343 = $22;
        $344 = ($343);
        $345 = ($344);
        $346 = $345;
        $347 = (($346) + 8|0);
        $348 = HEAP32[$347>>2]|0;
        $361 = $348;
       } else {
        $29 = $324;
        $349 = $29;
        $350 = ($349);
        $28 = $350;
        $351 = $28;
        $352 = $351;
        $27 = $352;
        $353 = $27;
        $354 = ($353);
        $355 = ($354);
        $356 = $355;
        $357 = (($356) + 1|0);
        $358 = ($357);
        $26 = $358;
        $359 = $26;
        $25 = $359;
        $360 = $25;
        $361 = $360;
       }
       $21 = $361;
       $362 = $21;
       $__rp$i$i$i = $362;
       $363 = $76;
       $37 = $363;
       $364 = $37;
       $365 = ($364);
       $36 = $365;
       $366 = $36;
       $367 = $366;
       $35 = $367;
       $368 = $35;
       $369 = ($368);
       $370 = ($369);
       $371 = $370;
       $372 = ($371);
       $373 = $372;
       $374 = HEAP8[$373]|0;
       $375 = $374&255;
       $376 = $375 & 1;
       $377 = ($376|0)!=(0);
       if ($377) {
        $378 = $__lp$i$i$i;
        $379 = $__rp$i$i$i;
        $380 = $__lhs_sz$i$i$i;
        $52 = $378;
        $53 = $379;
        $54 = $380;
        $381 = $52;
        $382 = $53;
        $383 = $54;
        __THREW__ = 0;
        $384 = (invoke_iiii(25,($381|0),($382|0),($383|0))|0);
        $385 = __THREW__; __THREW__ = 0;
        $386 = $385&1;
        if ($386) {
         label = 36;
         break L9;
        }
        $387 = ($384|0)==(0);
        $$expand_i1_val2 = $387&1;
        $75 = $$expand_i1_val2;
        break;
       }
       while(1) {
        $388 = $__lhs_sz$i$i$i;
        $389 = ($388|0)!=(0);
        if (!($389)) {
         label = 35;
         break;
        }
        $390 = $__lp$i$i$i;
        $391 = HEAP8[$390]|0;
        $392 = $391 << 24 >> 24;
        $393 = $__rp$i$i$i;
        $394 = HEAP8[$393]|0;
        $395 = $394 << 24 >> 24;
        $396 = ($392|0)!=($395|0);
        if ($396) {
         label = 33;
         break;
        }
        $397 = $__lhs_sz$i$i$i;
        $398 = (($397) + -1)|0;
        $__lhs_sz$i$i$i = $398;
        $399 = $__lp$i$i$i;
        $400 = (($399) + 1|0);
        $__lp$i$i$i = $400;
        $401 = $__rp$i$i$i;
        $402 = (($401) + 1|0);
        $__rp$i$i$i = $402;
       }
       if ((label|0) == 33) {
        label = 0;
        $$expand_i1_val4 = 0;
        $75 = $$expand_i1_val4;
        break;
       }
       else if ((label|0) == 35) {
        label = 0;
        $$expand_i1_val6 = 1;
        $75 = $$expand_i1_val6;
        break;
       }
      }
     } while(0);
     $$pre_trunc = $75;
     $404 = $$pre_trunc&1;
     if ($404) {
      label = 38;
      break;
     }
     $411 = $__nd;
     $412 = $411;
     $413 = ($412);
     $414 = HEAP32[$413>>2]|0;
     $__nd = $414;
    }
    if ((label|0) == 36) {
     $403 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$0 = tempRet0;
     ___clang_call_terminate($403);
     // unreachable;
    }
    else if ((label|0) == 38) {
     $405 = $__nd;
     $86 = $agg$result;
     $87 = $405;
     $406 = $86;
     $407 = $87;
     $84 = $406;
     $85 = $407;
     $408 = $84;
     $409 = ($408);
     $410 = $85;
     HEAP32[$409>>2] = $410;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 41) {
     break;
    }
   }
  } while(0);
 }
 $92 = $98;
 $90 = $agg$result;
 $91 = 0;
 $415 = $90;
 $416 = $91;
 $88 = $415;
 $89 = $416;
 $417 = $88;
 $418 = ($417);
 $419 = $89;
 HEAP32[$418>>2] = $419;
 STACKTOP = sp;return;
}
function __ZNKSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__hash = 0, $__lhs_sz$i$i$i = 0, $__lp$i$i$i = 0, $__nd = 0, $__rp$i$i$i = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 832|0;
 $96 = $this;
 $97 = $__k;
 $98 = $96;
 $95 = $98;
 $99 = $95;
 $100 = (($99) + 12|0);
 $94 = $100;
 $101 = $94;
 $102 = $101;
 $93 = $102;
 $103 = $93;
 $104 = $103;
 $105 = $97;
 $19 = $104;
 $20 = $105;
 $106 = $19;
 $107 = $106;
 $108 = $20;
 $109 = (__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($107,$108)|0);
 $__hash = $109;
 $18 = $98;
 $110 = $18;
 $111 = ($110);
 $17 = $111;
 $112 = $17;
 $113 = ($112);
 $16 = $113;
 $114 = $16;
 $115 = $114;
 $15 = $115;
 $116 = $15;
 $117 = (($116) + 4|0);
 $14 = $117;
 $118 = $14;
 $119 = ($118);
 $13 = $119;
 $120 = $13;
 $121 = $120;
 $12 = $121;
 $122 = $12;
 $123 = ($122);
 $124 = HEAP32[$123>>2]|0;
 $__bc = $124;
 $125 = $__bc;
 $126 = ($125|0)!=(0);
 if ($126) {
  $127 = $__hash;
  $128 = $__bc;
  $10 = $127;
  $11 = $128;
  $129 = $11;
  $130 = $11;
  $131 = (($130) - 1)|0;
  $132 = $129 & $131;
  $133 = ($132|0)!=(0);
  if ($133) {
   $138 = $10;
   $139 = $11;
   $140 = (($138>>>0) % ($139>>>0))&-1;
   $141 = $140;
  } else {
   $134 = $10;
   $135 = $11;
   $136 = (($135) - 1)|0;
   $137 = $134 & $136;
   $141 = $137;
  }
  $__chash = $141;
  $142 = ($98);
  $143 = $__chash;
  $3 = $142;
  $4 = $143;
  $144 = $3;
  $145 = $4;
  $146 = ($144);
  $2 = $146;
  $147 = $2;
  $148 = $147;
  $1 = $148;
  $149 = $1;
  $150 = ($149);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($151) + ($145<<2)|0);
  $153 = HEAP32[$152>>2]|0;
  $__nd = $153;
  $154 = $__nd;
  $155 = ($154|0)!=(0|0);
  do {
   if ($155) {
    $156 = $__nd;
    $157 = $156;
    $158 = ($157);
    $159 = HEAP32[$158>>2]|0;
    $__nd = $159;
    L9: while(1) {
     $160 = $__nd;
     $161 = ($160|0)!=(0|0);
     if ($161) {
      $162 = $__nd;
      $163 = (($162) + 4|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = $__bc;
      $5 = $164;
      $6 = $165;
      $166 = $6;
      $167 = $6;
      $168 = (($167) - 1)|0;
      $169 = $166 & $168;
      $170 = ($169|0)!=(0);
      if ($170) {
       $175 = $5;
       $176 = $6;
       $177 = (($175>>>0) % ($176>>>0))&-1;
       $178 = $177;
      } else {
       $171 = $5;
       $172 = $6;
       $173 = (($172) - 1)|0;
       $174 = $171 & $173;
       $178 = $174;
      }
      $179 = $__chash;
      $180 = ($178|0)==($179|0);
      $181 = $180;
     } else {
      $181 = 0;
     }
     if (!($181)) {
      label = 41;
      break;
     }
     $9 = $98;
     $182 = $9;
     $183 = (($182) + 16|0);
     $8 = $183;
     $184 = $8;
     $185 = $184;
     $7 = $185;
     $186 = $7;
     $187 = $186;
     $188 = $__nd;
     $189 = (($188) + 8|0);
     $190 = $97;
     $81 = $187;
     $82 = $189;
     $83 = $190;
     $191 = $81;
     $192 = $191;
     $193 = $82;
     $194 = $193;
     $195 = ($194);
     $196 = $83;
     $78 = $192;
     $79 = $195;
     $80 = $196;
     $197 = $79;
     $198 = $80;
     $76 = $197;
     $77 = $198;
     $199 = $76;
     $74 = $199;
     $200 = $74;
     $73 = $200;
     $201 = $73;
     $202 = ($201);
     $72 = $202;
     $203 = $72;
     $204 = $203;
     $71 = $204;
     $205 = $71;
     $206 = ($205);
     $207 = ($206);
     $208 = $207;
     $209 = ($208);
     $210 = $209;
     $211 = HEAP8[$210]|0;
     $212 = $211&255;
     $213 = $212 & 1;
     $214 = ($213|0)!=(0);
     if ($214) {
      $67 = $200;
      $215 = $67;
      $216 = ($215);
      $66 = $216;
      $217 = $66;
      $218 = $217;
      $65 = $218;
      $219 = $65;
      $220 = ($219);
      $221 = ($220);
      $222 = $221;
      $223 = (($222) + 4|0);
      $224 = HEAP32[$223>>2]|0;
      $238 = $224;
     } else {
      $70 = $200;
      $225 = $70;
      $226 = ($225);
      $69 = $226;
      $227 = $69;
      $228 = $227;
      $68 = $228;
      $229 = $68;
      $230 = ($229);
      $231 = ($230);
      $232 = $231;
      $233 = ($232);
      $234 = $233;
      $235 = HEAP8[$234]|0;
      $236 = $235&255;
      $237 = $236 >> 1;
      $238 = $237;
     }
     $__lhs_sz$i$i$i = $238;
     $239 = $__lhs_sz$i$i$i;
     $240 = $77;
     $64 = $240;
     $241 = $64;
     $63 = $241;
     $242 = $63;
     $243 = ($242);
     $62 = $243;
     $244 = $62;
     $245 = $244;
     $61 = $245;
     $246 = $61;
     $247 = ($246);
     $248 = ($247);
     $249 = $248;
     $250 = ($249);
     $251 = $250;
     $252 = HEAP8[$251]|0;
     $253 = $252&255;
     $254 = $253 & 1;
     $255 = ($254|0)!=(0);
     if ($255) {
      $57 = $241;
      $256 = $57;
      $257 = ($256);
      $56 = $257;
      $258 = $56;
      $259 = $258;
      $55 = $259;
      $260 = $55;
      $261 = ($260);
      $262 = ($261);
      $263 = $262;
      $264 = (($263) + 4|0);
      $265 = HEAP32[$264>>2]|0;
      $279 = $265;
     } else {
      $60 = $241;
      $266 = $60;
      $267 = ($266);
      $59 = $267;
      $268 = $59;
      $269 = $268;
      $58 = $269;
      $270 = $58;
      $271 = ($270);
      $272 = ($271);
      $273 = $272;
      $274 = ($273);
      $275 = $274;
      $276 = HEAP8[$275]|0;
      $277 = $276&255;
      $278 = $277 >> 1;
      $279 = $278;
     }
     $280 = ($239|0)!=($279|0);
     do {
      if ($280) {
       $$expand_i1_val = 0;
       $75 = $$expand_i1_val;
      } else {
       $281 = $76;
       $51 = $281;
       $282 = $51;
       $50 = $282;
       $283 = $50;
       $49 = $283;
       $284 = $49;
       $285 = ($284);
       $48 = $285;
       $286 = $48;
       $287 = $286;
       $47 = $287;
       $288 = $47;
       $289 = ($288);
       $290 = ($289);
       $291 = $290;
       $292 = ($291);
       $293 = $292;
       $294 = HEAP8[$293]|0;
       $295 = $294&255;
       $296 = $295 & 1;
       $297 = ($296|0)!=(0);
       if ($297) {
        $41 = $283;
        $298 = $41;
        $299 = ($298);
        $40 = $299;
        $300 = $40;
        $301 = $300;
        $39 = $301;
        $302 = $39;
        $303 = ($302);
        $304 = ($303);
        $305 = $304;
        $306 = (($305) + 8|0);
        $307 = HEAP32[$306>>2]|0;
        $320 = $307;
       } else {
        $46 = $283;
        $308 = $46;
        $309 = ($308);
        $45 = $309;
        $310 = $45;
        $311 = $310;
        $44 = $311;
        $312 = $44;
        $313 = ($312);
        $314 = ($313);
        $315 = $314;
        $316 = (($315) + 1|0);
        $317 = ($316);
        $43 = $317;
        $318 = $43;
        $42 = $318;
        $319 = $42;
        $320 = $319;
       }
       $38 = $320;
       $321 = $38;
       $__lp$i$i$i = $321;
       $322 = $77;
       $34 = $322;
       $323 = $34;
       $33 = $323;
       $324 = $33;
       $32 = $324;
       $325 = $32;
       $326 = ($325);
       $31 = $326;
       $327 = $31;
       $328 = $327;
       $30 = $328;
       $329 = $30;
       $330 = ($329);
       $331 = ($330);
       $332 = $331;
       $333 = ($332);
       $334 = $333;
       $335 = HEAP8[$334]|0;
       $336 = $335&255;
       $337 = $336 & 1;
       $338 = ($337|0)!=(0);
       if ($338) {
        $24 = $324;
        $339 = $24;
        $340 = ($339);
        $23 = $340;
        $341 = $23;
        $342 = $341;
        $22 = $342;
        $343 = $22;
        $344 = ($343);
        $345 = ($344);
        $346 = $345;
        $347 = (($346) + 8|0);
        $348 = HEAP32[$347>>2]|0;
        $361 = $348;
       } else {
        $29 = $324;
        $349 = $29;
        $350 = ($349);
        $28 = $350;
        $351 = $28;
        $352 = $351;
        $27 = $352;
        $353 = $27;
        $354 = ($353);
        $355 = ($354);
        $356 = $355;
        $357 = (($356) + 1|0);
        $358 = ($357);
        $26 = $358;
        $359 = $26;
        $25 = $359;
        $360 = $25;
        $361 = $360;
       }
       $21 = $361;
       $362 = $21;
       $__rp$i$i$i = $362;
       $363 = $76;
       $37 = $363;
       $364 = $37;
       $365 = ($364);
       $36 = $365;
       $366 = $36;
       $367 = $366;
       $35 = $367;
       $368 = $35;
       $369 = ($368);
       $370 = ($369);
       $371 = $370;
       $372 = ($371);
       $373 = $372;
       $374 = HEAP8[$373]|0;
       $375 = $374&255;
       $376 = $375 & 1;
       $377 = ($376|0)!=(0);
       if ($377) {
        $378 = $__lp$i$i$i;
        $379 = $__rp$i$i$i;
        $380 = $__lhs_sz$i$i$i;
        $52 = $378;
        $53 = $379;
        $54 = $380;
        $381 = $52;
        $382 = $53;
        $383 = $54;
        __THREW__ = 0;
        $384 = (invoke_iiii(25,($381|0),($382|0),($383|0))|0);
        $385 = __THREW__; __THREW__ = 0;
        $386 = $385&1;
        if ($386) {
         label = 36;
         break L9;
        }
        $387 = ($384|0)==(0);
        $$expand_i1_val2 = $387&1;
        $75 = $$expand_i1_val2;
        break;
       }
       while(1) {
        $388 = $__lhs_sz$i$i$i;
        $389 = ($388|0)!=(0);
        if (!($389)) {
         label = 35;
         break;
        }
        $390 = $__lp$i$i$i;
        $391 = HEAP8[$390]|0;
        $392 = $391 << 24 >> 24;
        $393 = $__rp$i$i$i;
        $394 = HEAP8[$393]|0;
        $395 = $394 << 24 >> 24;
        $396 = ($392|0)!=($395|0);
        if ($396) {
         label = 33;
         break;
        }
        $397 = $__lhs_sz$i$i$i;
        $398 = (($397) + -1)|0;
        $__lhs_sz$i$i$i = $398;
        $399 = $__lp$i$i$i;
        $400 = (($399) + 1|0);
        $__lp$i$i$i = $400;
        $401 = $__rp$i$i$i;
        $402 = (($401) + 1|0);
        $__rp$i$i$i = $402;
       }
       if ((label|0) == 33) {
        label = 0;
        $$expand_i1_val4 = 0;
        $75 = $$expand_i1_val4;
        break;
       }
       else if ((label|0) == 35) {
        label = 0;
        $$expand_i1_val6 = 1;
        $75 = $$expand_i1_val6;
        break;
       }
      }
     } while(0);
     $$pre_trunc = $75;
     $404 = $$pre_trunc&1;
     if ($404) {
      label = 38;
      break;
     }
     $411 = $__nd;
     $412 = $411;
     $413 = ($412);
     $414 = HEAP32[$413>>2]|0;
     $__nd = $414;
    }
    if ((label|0) == 36) {
     $403 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$0 = tempRet0;
     ___clang_call_terminate($403);
     // unreachable;
    }
    else if ((label|0) == 38) {
     $405 = $__nd;
     $86 = $agg$result;
     $87 = $405;
     $406 = $86;
     $407 = $87;
     $84 = $406;
     $85 = $407;
     $408 = $84;
     $409 = ($408);
     $410 = $85;
     HEAP32[$409>>2] = $410;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 41) {
     break;
    }
   }
  } while(0);
 }
 $92 = $98;
 $90 = $agg$result;
 $91 = 0;
 $415 = $90;
 $416 = $91;
 $88 = $415;
 $89 = $416;
 $417 = $88;
 $418 = ($417);
 $419 = $89;
 HEAP32[$418>>2] = $419;
 STACKTOP = sp;return;
}
function __ZNKSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__hash = 0, $__lhs_sz$i$i$i = 0, $__lp$i$i$i = 0, $__nd = 0, $__rp$i$i$i = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 832|0;
 $96 = $this;
 $97 = $__k;
 $98 = $96;
 $95 = $98;
 $99 = $95;
 $100 = (($99) + 12|0);
 $94 = $100;
 $101 = $94;
 $102 = $101;
 $93 = $102;
 $103 = $93;
 $104 = $103;
 $105 = $97;
 $19 = $104;
 $20 = $105;
 $106 = $19;
 $107 = $106;
 $108 = $20;
 $109 = (__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($107,$108)|0);
 $__hash = $109;
 $18 = $98;
 $110 = $18;
 $111 = ($110);
 $17 = $111;
 $112 = $17;
 $113 = ($112);
 $16 = $113;
 $114 = $16;
 $115 = $114;
 $15 = $115;
 $116 = $15;
 $117 = (($116) + 4|0);
 $14 = $117;
 $118 = $14;
 $119 = ($118);
 $13 = $119;
 $120 = $13;
 $121 = $120;
 $12 = $121;
 $122 = $12;
 $123 = ($122);
 $124 = HEAP32[$123>>2]|0;
 $__bc = $124;
 $125 = $__bc;
 $126 = ($125|0)!=(0);
 if ($126) {
  $127 = $__hash;
  $128 = $__bc;
  $10 = $127;
  $11 = $128;
  $129 = $11;
  $130 = $11;
  $131 = (($130) - 1)|0;
  $132 = $129 & $131;
  $133 = ($132|0)!=(0);
  if ($133) {
   $138 = $10;
   $139 = $11;
   $140 = (($138>>>0) % ($139>>>0))&-1;
   $141 = $140;
  } else {
   $134 = $10;
   $135 = $11;
   $136 = (($135) - 1)|0;
   $137 = $134 & $136;
   $141 = $137;
  }
  $__chash = $141;
  $142 = ($98);
  $143 = $__chash;
  $3 = $142;
  $4 = $143;
  $144 = $3;
  $145 = $4;
  $146 = ($144);
  $2 = $146;
  $147 = $2;
  $148 = $147;
  $1 = $148;
  $149 = $1;
  $150 = ($149);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($151) + ($145<<2)|0);
  $153 = HEAP32[$152>>2]|0;
  $__nd = $153;
  $154 = $__nd;
  $155 = ($154|0)!=(0|0);
  do {
   if ($155) {
    $156 = $__nd;
    $157 = $156;
    $158 = ($157);
    $159 = HEAP32[$158>>2]|0;
    $__nd = $159;
    L9: while(1) {
     $160 = $__nd;
     $161 = ($160|0)!=(0|0);
     if ($161) {
      $162 = $__nd;
      $163 = (($162) + 4|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = $__bc;
      $5 = $164;
      $6 = $165;
      $166 = $6;
      $167 = $6;
      $168 = (($167) - 1)|0;
      $169 = $166 & $168;
      $170 = ($169|0)!=(0);
      if ($170) {
       $175 = $5;
       $176 = $6;
       $177 = (($175>>>0) % ($176>>>0))&-1;
       $178 = $177;
      } else {
       $171 = $5;
       $172 = $6;
       $173 = (($172) - 1)|0;
       $174 = $171 & $173;
       $178 = $174;
      }
      $179 = $__chash;
      $180 = ($178|0)==($179|0);
      $181 = $180;
     } else {
      $181 = 0;
     }
     if (!($181)) {
      label = 41;
      break;
     }
     $9 = $98;
     $182 = $9;
     $183 = (($182) + 16|0);
     $8 = $183;
     $184 = $8;
     $185 = $184;
     $7 = $185;
     $186 = $7;
     $187 = $186;
     $188 = $__nd;
     $189 = (($188) + 8|0);
     $190 = $97;
     $81 = $187;
     $82 = $189;
     $83 = $190;
     $191 = $81;
     $192 = $191;
     $193 = $82;
     $194 = $193;
     $195 = ($194);
     $196 = $83;
     $78 = $192;
     $79 = $195;
     $80 = $196;
     $197 = $79;
     $198 = $80;
     $76 = $197;
     $77 = $198;
     $199 = $76;
     $74 = $199;
     $200 = $74;
     $73 = $200;
     $201 = $73;
     $202 = ($201);
     $72 = $202;
     $203 = $72;
     $204 = $203;
     $71 = $204;
     $205 = $71;
     $206 = ($205);
     $207 = ($206);
     $208 = $207;
     $209 = ($208);
     $210 = $209;
     $211 = HEAP8[$210]|0;
     $212 = $211&255;
     $213 = $212 & 1;
     $214 = ($213|0)!=(0);
     if ($214) {
      $67 = $200;
      $215 = $67;
      $216 = ($215);
      $66 = $216;
      $217 = $66;
      $218 = $217;
      $65 = $218;
      $219 = $65;
      $220 = ($219);
      $221 = ($220);
      $222 = $221;
      $223 = (($222) + 4|0);
      $224 = HEAP32[$223>>2]|0;
      $238 = $224;
     } else {
      $70 = $200;
      $225 = $70;
      $226 = ($225);
      $69 = $226;
      $227 = $69;
      $228 = $227;
      $68 = $228;
      $229 = $68;
      $230 = ($229);
      $231 = ($230);
      $232 = $231;
      $233 = ($232);
      $234 = $233;
      $235 = HEAP8[$234]|0;
      $236 = $235&255;
      $237 = $236 >> 1;
      $238 = $237;
     }
     $__lhs_sz$i$i$i = $238;
     $239 = $__lhs_sz$i$i$i;
     $240 = $77;
     $64 = $240;
     $241 = $64;
     $63 = $241;
     $242 = $63;
     $243 = ($242);
     $62 = $243;
     $244 = $62;
     $245 = $244;
     $61 = $245;
     $246 = $61;
     $247 = ($246);
     $248 = ($247);
     $249 = $248;
     $250 = ($249);
     $251 = $250;
     $252 = HEAP8[$251]|0;
     $253 = $252&255;
     $254 = $253 & 1;
     $255 = ($254|0)!=(0);
     if ($255) {
      $57 = $241;
      $256 = $57;
      $257 = ($256);
      $56 = $257;
      $258 = $56;
      $259 = $258;
      $55 = $259;
      $260 = $55;
      $261 = ($260);
      $262 = ($261);
      $263 = $262;
      $264 = (($263) + 4|0);
      $265 = HEAP32[$264>>2]|0;
      $279 = $265;
     } else {
      $60 = $241;
      $266 = $60;
      $267 = ($266);
      $59 = $267;
      $268 = $59;
      $269 = $268;
      $58 = $269;
      $270 = $58;
      $271 = ($270);
      $272 = ($271);
      $273 = $272;
      $274 = ($273);
      $275 = $274;
      $276 = HEAP8[$275]|0;
      $277 = $276&255;
      $278 = $277 >> 1;
      $279 = $278;
     }
     $280 = ($239|0)!=($279|0);
     do {
      if ($280) {
       $$expand_i1_val = 0;
       $75 = $$expand_i1_val;
      } else {
       $281 = $76;
       $51 = $281;
       $282 = $51;
       $50 = $282;
       $283 = $50;
       $49 = $283;
       $284 = $49;
       $285 = ($284);
       $48 = $285;
       $286 = $48;
       $287 = $286;
       $47 = $287;
       $288 = $47;
       $289 = ($288);
       $290 = ($289);
       $291 = $290;
       $292 = ($291);
       $293 = $292;
       $294 = HEAP8[$293]|0;
       $295 = $294&255;
       $296 = $295 & 1;
       $297 = ($296|0)!=(0);
       if ($297) {
        $41 = $283;
        $298 = $41;
        $299 = ($298);
        $40 = $299;
        $300 = $40;
        $301 = $300;
        $39 = $301;
        $302 = $39;
        $303 = ($302);
        $304 = ($303);
        $305 = $304;
        $306 = (($305) + 8|0);
        $307 = HEAP32[$306>>2]|0;
        $320 = $307;
       } else {
        $46 = $283;
        $308 = $46;
        $309 = ($308);
        $45 = $309;
        $310 = $45;
        $311 = $310;
        $44 = $311;
        $312 = $44;
        $313 = ($312);
        $314 = ($313);
        $315 = $314;
        $316 = (($315) + 1|0);
        $317 = ($316);
        $43 = $317;
        $318 = $43;
        $42 = $318;
        $319 = $42;
        $320 = $319;
       }
       $38 = $320;
       $321 = $38;
       $__lp$i$i$i = $321;
       $322 = $77;
       $34 = $322;
       $323 = $34;
       $33 = $323;
       $324 = $33;
       $32 = $324;
       $325 = $32;
       $326 = ($325);
       $31 = $326;
       $327 = $31;
       $328 = $327;
       $30 = $328;
       $329 = $30;
       $330 = ($329);
       $331 = ($330);
       $332 = $331;
       $333 = ($332);
       $334 = $333;
       $335 = HEAP8[$334]|0;
       $336 = $335&255;
       $337 = $336 & 1;
       $338 = ($337|0)!=(0);
       if ($338) {
        $24 = $324;
        $339 = $24;
        $340 = ($339);
        $23 = $340;
        $341 = $23;
        $342 = $341;
        $22 = $342;
        $343 = $22;
        $344 = ($343);
        $345 = ($344);
        $346 = $345;
        $347 = (($346) + 8|0);
        $348 = HEAP32[$347>>2]|0;
        $361 = $348;
       } else {
        $29 = $324;
        $349 = $29;
        $350 = ($349);
        $28 = $350;
        $351 = $28;
        $352 = $351;
        $27 = $352;
        $353 = $27;
        $354 = ($353);
        $355 = ($354);
        $356 = $355;
        $357 = (($356) + 1|0);
        $358 = ($357);
        $26 = $358;
        $359 = $26;
        $25 = $359;
        $360 = $25;
        $361 = $360;
       }
       $21 = $361;
       $362 = $21;
       $__rp$i$i$i = $362;
       $363 = $76;
       $37 = $363;
       $364 = $37;
       $365 = ($364);
       $36 = $365;
       $366 = $36;
       $367 = $366;
       $35 = $367;
       $368 = $35;
       $369 = ($368);
       $370 = ($369);
       $371 = $370;
       $372 = ($371);
       $373 = $372;
       $374 = HEAP8[$373]|0;
       $375 = $374&255;
       $376 = $375 & 1;
       $377 = ($376|0)!=(0);
       if ($377) {
        $378 = $__lp$i$i$i;
        $379 = $__rp$i$i$i;
        $380 = $__lhs_sz$i$i$i;
        $52 = $378;
        $53 = $379;
        $54 = $380;
        $381 = $52;
        $382 = $53;
        $383 = $54;
        __THREW__ = 0;
        $384 = (invoke_iiii(25,($381|0),($382|0),($383|0))|0);
        $385 = __THREW__; __THREW__ = 0;
        $386 = $385&1;
        if ($386) {
         label = 36;
         break L9;
        }
        $387 = ($384|0)==(0);
        $$expand_i1_val2 = $387&1;
        $75 = $$expand_i1_val2;
        break;
       }
       while(1) {
        $388 = $__lhs_sz$i$i$i;
        $389 = ($388|0)!=(0);
        if (!($389)) {
         label = 35;
         break;
        }
        $390 = $__lp$i$i$i;
        $391 = HEAP8[$390]|0;
        $392 = $391 << 24 >> 24;
        $393 = $__rp$i$i$i;
        $394 = HEAP8[$393]|0;
        $395 = $394 << 24 >> 24;
        $396 = ($392|0)!=($395|0);
        if ($396) {
         label = 33;
         break;
        }
        $397 = $__lhs_sz$i$i$i;
        $398 = (($397) + -1)|0;
        $__lhs_sz$i$i$i = $398;
        $399 = $__lp$i$i$i;
        $400 = (($399) + 1|0);
        $__lp$i$i$i = $400;
        $401 = $__rp$i$i$i;
        $402 = (($401) + 1|0);
        $__rp$i$i$i = $402;
       }
       if ((label|0) == 33) {
        label = 0;
        $$expand_i1_val4 = 0;
        $75 = $$expand_i1_val4;
        break;
       }
       else if ((label|0) == 35) {
        label = 0;
        $$expand_i1_val6 = 1;
        $75 = $$expand_i1_val6;
        break;
       }
      }
     } while(0);
     $$pre_trunc = $75;
     $404 = $$pre_trunc&1;
     if ($404) {
      label = 38;
      break;
     }
     $411 = $__nd;
     $412 = $411;
     $413 = ($412);
     $414 = HEAP32[$413>>2]|0;
     $__nd = $414;
    }
    if ((label|0) == 36) {
     $403 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$0 = tempRet0;
     ___clang_call_terminate($403);
     // unreachable;
    }
    else if ((label|0) == 38) {
     $405 = $__nd;
     $86 = $agg$result;
     $87 = $405;
     $406 = $86;
     $407 = $87;
     $84 = $406;
     $85 = $407;
     $408 = $84;
     $409 = ($408);
     $410 = $85;
     HEAP32[$409>>2] = $410;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 41) {
     break;
    }
   }
  } while(0);
 }
 $92 = $98;
 $90 = $agg$result;
 $91 = 0;
 $415 = $90;
 $416 = $91;
 $88 = $415;
 $89 = $416;
 $417 = $88;
 $418 = ($417);
 $419 = $89;
 HEAP32[$418>>2] = $419;
 STACKTOP = sp;return;
}
function __ZN4Demo3getEv() {
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[(592)>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN4Demo6createENS_4TypeE($type) {
 $type = $type|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 $1 = $type;
 $4 = $1;
 do {
  if ((($4|0) == 0)) {
   $5 = (__Znwj(60)|0);
   $6 = $5;
   __THREW__ = 0;
   invoke_vi(158,($6|0));
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if (!($8)) {
    $9 = $6;
    HEAP32[(592)>>2] = $9;
    break;
   }
   $10 = ___cxa_find_matching_catch(-1,-1)|0;
   $11 = tempRet0;
   $2 = $10;
   $3 = $11;
   __ZdlPv($5);
   $19 = $2;
   $20 = $3;
   ___resumeException($19|0);
   // unreachable;
  } else {
  }
 } while(0);
 $12 = HEAP32[(592)>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  __ZN5error8throw_exEPKcS1_i((600),(624),45);
 }
 $14 = HEAP32[(592)>>2]|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 FUNCTION_TABLE_vi[$18 & 255]($14);
 STACKTOP = sp;return;
}
function __ZN5error8throw_exEPKcS1_i($msg,$file,$line) {
 $msg = $msg|0;
 $file = $file|0;
 $line = $line|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i$i$i = 0;
 var $__a$i$i$i1$i$i$i = 0, $__i$i$i$i$i$i$i = 0, $__i$i$i$i2$i$i$i = 0, $ss = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 600|0;
 $24 = sp + 216|0;
 $ss = sp + 416|0;
 $50 = sp + 576|0;
 $45 = $msg;
 $46 = $file;
 $47 = $line;
 $41 = $ss;
 $42 = 24;
 $52 = $41;
 $53 = $52;
 $54 = (($53) + 64|0);
 $55 = $54;
 $40 = $55;
 $56 = $40;
 $57 = $56;
 $39 = $57;
 $58 = $39;
 $59 = $58;
 $60 = ((6704) + 8|0);
 HEAP32[$59>>2] = $60;
 $61 = $56;
 $62 = ((6304) + 8|0);
 HEAP32[$61>>2] = $62;
 $63 = $52;
 $64 = ((656) + 12|0);
 HEAP32[$63>>2] = $64;
 $65 = $52;
 $66 = (($65) + 64|0);
 $67 = $66;
 $68 = ((656) + 52|0);
 HEAP32[$67>>2] = $68;
 $69 = $52;
 $70 = (($69) + 8|0);
 $71 = $70;
 $72 = ((656) + 32|0);
 HEAP32[$71>>2] = $72;
 $73 = $52;
 $74 = (($52) + 12|0);
 $75 = $74;
 $36 = $73;
 $76 = ((720) + 4|0);
 $37 = $76;
 $38 = $75;
 $77 = $36;
 $78 = $37;
 $79 = $77;
 $80 = (($78) + 4|0);
 $81 = $38;
 $33 = $79;
 $34 = $80;
 $35 = $81;
 $82 = $33;
 $83 = $34;
 $84 = HEAP32[$83>>2]|0;
 $85 = $82;
 HEAP32[$85>>2] = $84;
 $86 = (($83) + 4|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $82;
 $89 = HEAP32[$88>>2]|0;
 $90 = (($89) + -12|0);
 $91 = $90;
 $92 = HEAP32[$91>>2]|0;
 $93 = $82;
 $94 = (($93) + ($92)|0);
 $95 = $94;
 HEAP32[$95>>2] = $87;
 $96 = (($82) + 4|0);
 HEAP32[$96>>2] = 0;
 $97 = $82;
 $98 = HEAP32[$97>>2]|0;
 $99 = (($98) + -12|0);
 $100 = $99;
 $101 = HEAP32[$100>>2]|0;
 $102 = $82;
 $103 = (($102) + ($101)|0);
 $104 = $103;
 $105 = $35;
 $31 = $104;
 $32 = $105;
 $106 = $31;
 $107 = $106;
 $108 = $32;
 $109 = $108;
 __THREW__ = 0;
 invoke_vii(44,($107|0),($109|0));
 $110 = __THREW__; __THREW__ = 0;
 $111 = $110&1;
 if ($111) {
  $226 = ___cxa_find_matching_catch(-1,-1)|0;
  $227 = tempRet0;
  $43 = $226;
  $44 = $227;
  $228 = $52;
  $229 = (($228) + 64|0);
  $230 = $229;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($230);
  $231 = $43;
  $232 = $44;
  ___resumeException($231|0);
  // unreachable;
 }
 $112 = (($106) + 72|0);
 HEAP32[$112>>2] = 0;
 $113 = (($106) + 76|0);
 HEAP32[$113>>2] = -1;
 $114 = $77;
 $115 = (($114) + 8|0);
 $116 = $115;
 $117 = (($78) + 12|0);
 $29 = $116;
 $30 = $117;
 $118 = $29;
 $119 = $30;
 $120 = HEAP32[$119>>2]|0;
 $121 = $118;
 HEAP32[$121>>2] = $120;
 $122 = (($119) + 4|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = $118;
 $125 = HEAP32[$124>>2]|0;
 $126 = (($125) + -12|0);
 $127 = $126;
 $128 = HEAP32[$127>>2]|0;
 $129 = $118;
 $130 = (($129) + ($128)|0);
 $131 = $130;
 HEAP32[$131>>2] = $123;
 $132 = HEAP32[$78>>2]|0;
 $133 = $77;
 HEAP32[$133>>2] = $132;
 $134 = (($78) + 20|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = $77;
 $137 = HEAP32[$136>>2]|0;
 $138 = (($137) + -12|0);
 $139 = $138;
 $140 = HEAP32[$139>>2]|0;
 $141 = $77;
 $142 = (($141) + ($140)|0);
 $143 = $142;
 HEAP32[$143>>2] = $135;
 $144 = (($78) + 24|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = $77;
 $147 = (($146) + 8|0);
 $148 = $147;
 HEAP32[$148>>2] = $145;
 $149 = $52;
 $150 = ((656) + 12|0);
 HEAP32[$149>>2] = $150;
 $151 = $52;
 $152 = (($151) + 64|0);
 $153 = $152;
 $154 = ((656) + 52|0);
 HEAP32[$153>>2] = $154;
 $155 = $52;
 $156 = (($155) + 8|0);
 $157 = $156;
 $158 = ((656) + 32|0);
 HEAP32[$157>>2] = $158;
 $159 = (($52) + 12|0);
 $160 = $42;
 $27 = $159;
 $28 = $160;
 $161 = $27;
 $162 = $28;
 $22 = $161;
 $23 = $162;
 $163 = $22;
 $164 = $163;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($164);
 $165 = $163;
 $166 = ((992) + 8|0);
 HEAP32[$165>>2] = $166;
 $167 = (($163) + 32|0);
 $21 = $167;
 $168 = $21;
 $20 = $168;
 $169 = $20;
 $170 = ($169);
 $19 = $170;
 $171 = $19;
 $18 = $171;
 $172 = $18;
 $173 = $172;
 $17 = $173;
 $174 = $17;
 $175 = $174;
 $16 = $175;
 $15 = $169;
 $176 = $15;
 $177 = ($176);
 $14 = $177;
 $178 = $14;
 $179 = $178;
 $13 = $179;
 $180 = $13;
 $181 = ($180);
 $182 = ($181);
 $183 = $182;
 $184 = ($183);
 $__a$i$i$i$i$i$i = $184;
 $__i$i$i$i$i$i$i = 0;
 while(1) {
  $185 = $__i$i$i$i$i$i$i;
  $186 = ($185>>>0)<(3);
  if (!($186)) {
   break;
  }
  $187 = $__i$i$i$i$i$i$i;
  $188 = $__a$i$i$i$i$i$i;
  $189 = (($188) + ($187<<2)|0);
  HEAP32[$189>>2] = 0;
  $190 = $__i$i$i$i$i$i$i;
  $191 = (($190) + 1)|0;
  $__i$i$i$i$i$i$i = $191;
 }
 $192 = (($163) + 44|0);
 HEAP32[$192>>2] = 0;
 $193 = (($163) + 48|0);
 $194 = $23;
 HEAP32[$193>>2] = $194;
 $12 = $24;
 $195 = $12;
 $11 = $195;
 $196 = $11;
 $197 = ($196);
 $10 = $197;
 $198 = $10;
 $9 = $198;
 $199 = $9;
 $200 = $199;
 $8 = $200;
 $201 = $8;
 $202 = $201;
 $7 = $202;
 $6 = $196;
 $203 = $6;
 $204 = ($203);
 $5 = $204;
 $205 = $5;
 $206 = $205;
 $4 = $206;
 $207 = $4;
 $208 = ($207);
 $209 = ($208);
 $210 = $209;
 $211 = ($210);
 $__a$i$i$i1$i$i$i = $211;
 $__i$i$i$i2$i$i$i = 0;
 while(1) {
  $212 = $__i$i$i$i2$i$i$i;
  $213 = ($212>>>0)<(3);
  if (!($213)) {
   break;
  }
  $214 = $__i$i$i$i2$i$i$i;
  $215 = $__a$i$i$i1$i$i$i;
  $216 = (($215) + ($214<<2)|0);
  HEAP32[$216>>2] = 0;
  $217 = $__i$i$i$i2$i$i$i;
  $218 = (($217) + 1)|0;
  $__i$i$i$i2$i$i$i = $218;
 }
 __THREW__ = 0;
 invoke_vii(45,($163|0),($24|0));
 $219 = __THREW__; __THREW__ = 0;
 $220 = $219&1;
 if ($220) {
  $221 = ___cxa_find_matching_catch(-1,-1)|0;
  $222 = tempRet0;
  $25 = $221;
  $26 = $222;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($24);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($167);
  $223 = $163;
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($223);
  $224 = $25;
  $225 = $26;
  $43 = $224;
  $44 = $225;
  $228 = $52;
  $229 = (($228) + 64|0);
  $230 = $229;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($230);
  $231 = $43;
  $232 = $44;
  ___resumeException($231|0);
  // unreachable;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($24);
 $233 = $ss;
 $234 = (($233) + 8|0);
 $235 = $234;
 $236 = $45;
 __THREW__ = 0;
 $237 = (invoke_iii(21,($235|0),($236|0))|0);
 $238 = __THREW__; __THREW__ = 0;
 $239 = $238&1;
 do {
  if ($239) {
   label = 23;
  } else {
   __THREW__ = 0;
   $240 = (invoke_iii(21,($237|0),((640)|0))|0);
   $241 = __THREW__; __THREW__ = 0;
   $242 = $241&1;
   if ($242) {
    label = 23;
    break;
   }
   $243 = $46;
   __THREW__ = 0;
   $244 = (invoke_iii(21,($240|0),($243|0))|0);
   $245 = __THREW__; __THREW__ = 0;
   $246 = $245&1;
   if ($246) {
    label = 23;
    break;
   }
   __THREW__ = 0;
   $247 = (invoke_iii(21,($244|0),((648)|0))|0);
   $248 = __THREW__; __THREW__ = 0;
   $249 = $248&1;
   if ($249) {
    label = 23;
    break;
   }
   $250 = $47;
   __THREW__ = 0;
   $251 = (invoke_iii(22,($247|0),($250|0))|0);
   $252 = __THREW__; __THREW__ = 0;
   $253 = $252&1;
   if ($253) {
    label = 23;
    break;
   }
   $2 = $251;
   $3 = 69;
   $254 = $2;
   $255 = $3;
   __THREW__ = 0;
   (invoke_ii($255|0,($254|0))|0);
   $256 = __THREW__; __THREW__ = 0;
   $257 = $256&1;
   if ($257) {
    label = 23;
    break;
   }
   $258 = (___cxa_allocate_exception(8)|0);
   $$expand_i1_val = 1;
   $51 = $$expand_i1_val;
   $259 = $258;
   $1 = $ss;
   $260 = $1;
   $261 = (($260) + 12|0);
   __THREW__ = 0;
   invoke_vii(46,($50|0),($261|0));
   $262 = __THREW__; __THREW__ = 0;
   $263 = $262&1;
   if ($263) {
    $270 = ___cxa_find_matching_catch(-1,-1)|0;
    $271 = tempRet0;
    $48 = $270;
    $49 = $271;
   } else {
    __THREW__ = 0;
    invoke_vii(47,($259|0),($50|0));
    $264 = __THREW__; __THREW__ = 0;
    $265 = $264&1;
    do {
     if (!($265)) {
      $$expand_i1_val2 = 0;
      $51 = $$expand_i1_val2;
      __THREW__ = 0;
      invoke_viii(12,($258|0),((5576)|0),((58)|0));
      $266 = __THREW__; __THREW__ = 0;
      $267 = $266&1;
      if ($267) {
       break;
      }
      // unreachable;
     }
    } while(0);
    $272 = ___cxa_find_matching_catch(-1,-1)|0;
    $273 = tempRet0;
    $48 = $272;
    $49 = $273;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($50);
   }
   $$pre_trunc = $51;
   $274 = $$pre_trunc&1;
   if ($274) {
    ___cxa_free_exception(($258|0));
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $268 = ___cxa_find_matching_catch(-1,-1)|0;
  $269 = tempRet0;
  $48 = $268;
  $49 = $269;
 }
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ss);
 $275 = $48;
 $276 = $49;
 ___resumeException($275|0);
 // unreachable;
}
function __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($__os,$__str) {
 $__os = $__os|0;
 $__str = $__str|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__len = 0, $__s = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $$byval_copy = sp;
 $13 = sp + 104|0;
 $__s = sp + 224|0;
 $30 = sp + 256|0;
 $31 = sp + 264|0;
 $26 = $__os;
 $27 = $__str;
 $32 = $26;
 __THREW__ = 0;
 invoke_vii(48,($__s|0),($32|0));
 $33 = __THREW__; __THREW__ = 0;
 $34 = $33&1;
 L1: do {
  if ($34) {
   $168 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $169 = tempRet0;
   $28 = $168;
   $29 = $169;
  } else {
   $25 = $__s;
   $35 = $25;
   $36 = ($35);
   $37 = HEAP8[$36]|0;
   $38 = $37&1;
   L4: do {
    if ($38) {
     $39 = $27;
     $24 = $39;
     $40 = $24;
     __THREW__ = 0;
     $41 = (invoke_ii(68,($40|0))|0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     L6: do {
      if ($43) {
       label = 23;
      } else {
       $__len = $41;
       $44 = $26;
       $22 = $30;
       $23 = $44;
       $45 = $22;
       $46 = $23;
       $20 = $45;
       $21 = $46;
       $47 = $20;
       $48 = ($47);
       $49 = $21;
       $50 = $49;
       $51 = HEAP32[$50>>2]|0;
       $52 = (($51) + -12|0);
       $53 = $52;
       $54 = HEAP32[$53>>2]|0;
       $55 = $49;
       $56 = (($55) + ($54)|0);
       $57 = $56;
       $19 = $57;
       $58 = $19;
       $59 = $58;
       $18 = $59;
       $60 = $18;
       $61 = (($60) + 24|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = $62;
       HEAP32[$48>>2] = $63;
       $64 = $27;
       $65 = $26;
       $66 = $65;
       $67 = HEAP32[$66>>2]|0;
       $68 = (($67) + -12|0);
       $69 = $68;
       $70 = HEAP32[$69>>2]|0;
       $71 = $65;
       $72 = (($71) + ($70)|0);
       $73 = $72;
       $17 = $73;
       $74 = $17;
       $75 = (($74) + 4|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = $76 & 176;
       $78 = ($77|0)==(32);
       if ($78) {
        $79 = $27;
        $80 = $__len;
        $81 = (($79) + ($80)|0);
        $83 = $81;
       } else {
        $82 = $27;
        $83 = $82;
       }
       $84 = $27;
       $85 = $__len;
       $86 = (($84) + ($85)|0);
       $87 = $26;
       $88 = $87;
       $89 = HEAP32[$88>>2]|0;
       $90 = (($89) + -12|0);
       $91 = $90;
       $92 = HEAP32[$91>>2]|0;
       $93 = $87;
       $94 = (($93) + ($92)|0);
       $95 = $94;
       $96 = $26;
       $97 = $96;
       $98 = HEAP32[$97>>2]|0;
       $99 = (($98) + -12|0);
       $100 = $99;
       $101 = HEAP32[$100>>2]|0;
       $102 = $96;
       $103 = (($102) + ($101)|0);
       $104 = $103;
       $16 = $104;
       $105 = $16;
       $106 = (($105) + 76|0);
       $107 = HEAP32[$106>>2]|0;
       $6 = -1;
       $7 = $107;
       $108 = $6;
       $109 = $7;
       $110 = ($108|0)==($109|0);
       L14: do {
        if ($110) {
         $11 = $105;
         $12 = 32;
         $111 = $11;
         $112 = $111;
         __THREW__ = 0;
         invoke_vii(49,($13|0),($112|0));
         $113 = __THREW__; __THREW__ = 0;
         $114 = $113&1;
         if ($114) {
          label = 23;
          break L6;
         }
         $10 = $13;
         $115 = $10;
         __THREW__ = 0;
         $116 = (invoke_iii(23,($115|0),((9136)|0))|0);
         $117 = __THREW__; __THREW__ = 0;
         $118 = $117&1;
         do {
          if (!($118)) {
           $119 = $116;
           $120 = $12;
           $8 = $119;
           $9 = $120;
           $121 = $8;
           $122 = $121;
           $123 = HEAP32[$122>>2]|0;
           $124 = (($123) + 28|0);
           $125 = HEAP32[$124>>2]|0;
           $126 = $9;
           __THREW__ = 0;
           $127 = (invoke_iii($125|0,($121|0),($126|0))|0);
           $128 = __THREW__; __THREW__ = 0;
           $129 = $128&1;
           if ($129) {
            break;
           }
           __ZNSt3__16localeD2Ev($13);
           $134 = $127 << 24 >> 24;
           $135 = (($105) + 76|0);
           HEAP32[$135>>2] = $134;
           break L14;
          }
         } while(0);
         $130 = ___cxa_find_matching_catch(-1,-1,0|0,0|0)|0;
         $131 = tempRet0;
         $14 = $130;
         $15 = $131;
         __ZNSt3__16localeD2Ev($13);
         $132 = $14;
         $133 = $15;
         $eh$lpad$body$index2Z2D = $133;$eh$lpad$body$indexZ2D = $132;
         break L6;
        }
       } while(0);
       $136 = (($105) + 76|0);
       $137 = HEAP32[$136>>2]|0;
       $138 = $137&255;
       __THREW__ = 0;
       $139 = $$byval_copy;
       $140 = $$byval_copy;
       $141 = $30;
       ;HEAP32[$140+0>>2]=HEAP32[$141+0>>2]|0;
       invoke_viiiiiii(39,($31|0),($$byval_copy|0),($64|0),($83|0),($86|0),($95|0),($138|0));
       $142 = $$byval_copy;
       $143 = __THREW__; __THREW__ = 0;
       $144 = $143&1;
       if ($144) {
        label = 23;
        break;
       }
       $5 = $31;
       $145 = $5;
       $146 = ($145);
       $147 = HEAP32[$146>>2]|0;
       $148 = ($147|0)==(0|0);
       if ($148) {
        $149 = $26;
        $150 = $149;
        $151 = HEAP32[$150>>2]|0;
        $152 = (($151) + -12|0);
        $153 = $152;
        $154 = HEAP32[$153>>2]|0;
        $155 = $149;
        $156 = (($155) + ($154)|0);
        $157 = $156;
        $3 = $157;
        $4 = 5;
        $158 = $3;
        $159 = $158;
        $160 = $4;
        $1 = $159;
        $2 = $160;
        $161 = $1;
        $162 = (($161) + 16|0);
        $163 = HEAP32[$162>>2]|0;
        $164 = $2;
        $165 = $163 | $164;
        __THREW__ = 0;
        invoke_vii(50,($161|0),($165|0));
        $166 = __THREW__; __THREW__ = 0;
        $167 = $166&1;
        if ($167) {
         label = 23;
         break;
        }
       }
       break L4;
      }
     } while(0);
     if ((label|0) == 23) {
      $170 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $171 = tempRet0;
      $eh$lpad$body$index2Z2D = $171;$eh$lpad$body$indexZ2D = $170;
     }
     $28 = $eh$lpad$body$indexZ2D;
     $29 = $eh$lpad$body$index2Z2D;
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s);
     break L1;
    }
   } while(0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s);
   $184 = $26;
   STACKTOP = sp;return ($184|0);
  }
 } while(0);
 $172 = $28;
 (___cxa_begin_catch(($172|0))|0);
 $173 = $26;
 $174 = $173;
 $175 = HEAP32[$174>>2]|0;
 $176 = (($175) + -12|0);
 $177 = $176;
 $178 = HEAP32[$177>>2]|0;
 $179 = $173;
 $180 = (($179) + ($178)|0);
 $181 = $180;
 __THREW__ = 0;
 invoke_vi(159,($181|0));
 $182 = __THREW__; __THREW__ = 0;
 $183 = $182&1;
 if (!($183)) {
  ___cxa_end_catch();
  $184 = $26;
  STACKTOP = sp;return ($184|0);
 }
 $185 = ___cxa_find_matching_catch(-1,-1)|0;
 $186 = tempRet0;
 $28 = $185;
 $29 = $186;
 __THREW__ = 0;
 invoke_v(5);
 $187 = __THREW__; __THREW__ = 0;
 $188 = $187&1;
 if ($188) {
  $191 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($191);
  // unreachable;
 }
 $189 = $28;
 $190 = $29;
 ___resumeException($189|0);
 // unreachable;
 return 0|0;
}
function __ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_($__os) {
 $__os = $__os|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 72|0;
 $6 = sp + 40|0;
 $9 = $__os;
 $10 = $9;
 $11 = $9;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + -12|0);
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = $11;
 $18 = (($17) + ($16)|0);
 $19 = $18;
 $4 = $19;
 $5 = 10;
 $20 = $4;
 $21 = $20;
 __ZNKSt3__18ios_base6getlocEv($6,$21);
 $3 = $6;
 $22 = $3;
 __THREW__ = 0;
 $23 = (invoke_iii(23,($22|0),((9136)|0))|0);
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $37 = ___cxa_find_matching_catch(-1,-1)|0;
  $38 = tempRet0;
  $7 = $37;
  $8 = $38;
  __ZNSt3__16localeD2Ev($6);
  $39 = $7;
  $40 = $8;
  ___resumeException($39|0);
  // unreachable;
 }
 $26 = $23;
 $27 = $5;
 $1 = $26;
 $2 = $27;
 $28 = $1;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 28|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $2;
 __THREW__ = 0;
 $34 = (invoke_iii($32|0,($28|0),($33|0))|0);
 $35 = __THREW__; __THREW__ = 0;
 $36 = $35&1;
 if ($36) {
  $37 = ___cxa_find_matching_catch(-1,-1)|0;
  $38 = tempRet0;
  $7 = $37;
  $8 = $38;
  __ZNSt3__16localeD2Ev($6);
  $39 = $7;
  $40 = $8;
  ___resumeException($39|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($6);
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($10,$34)|0);
  $41 = $9;
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($41)|0);
  $42 = $9;
  STACKTOP = sp;return ($42|0);
 }
 return 0|0;
}
function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = (720);
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2,$3);
 $4 = $2;
 $5 = (($4) + 64|0);
 $6 = $5;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($6);
 STACKTOP = sp;return;
}
function __ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, $__t21$i$i$i = 0, $__t21$i$i$i1 = 0, $__t21$i$i$i8 = 0, $tmp$i$i = 0, $tmp$i$i$i = 0, $tmp$i$i$i$i = 0, $tmp$i$i$i$i13 = 0, $tmp$i$i$i$i6 = 0, $tmp$i$i$i11 = 0;
 var $tmp$i$i$i4 = 0, $tmp$i$i2 = 0, $tmp$i$i9 = 0, $tmp1$i$i = 0, $tmp1$i$i$i$i = 0, $tmp1$i$i$i$i14 = 0, $tmp1$i$i$i$i7 = 0, $tmp1$i$i10 = 0, $tmp1$i$i3 = 0, $tmp2$i$i$i = 0, $tmp2$i$i$i12 = 0, $tmp2$i$i$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0;
 $8 = sp + 56|0;
 $11 = sp + 80|0;
 $__t21$i$i$i8 = sp + 88|0;
 $13 = sp + 104|0;
 $18 = sp + 144|0;
 $32 = sp + 256|0;
 $35 = sp + 280|0;
 $__t21$i$i$i1 = sp + 288|0;
 $37 = sp + 304|0;
 $42 = sp + 344|0;
 $56 = sp + 472|0;
 $59 = sp + 496|0;
 $__t21$i$i$i = sp + 504|0;
 $61 = sp + 520|0;
 $64 = sp + 544|0;
 $69 = sp + 584|0;
 $70 = sp + 592|0;
 $71 = sp + 600|0;
 $68 = $this;
 $72 = $68;
 $73 = (($72) + 48|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $74 & 16;
 $76 = ($75|0)!=(0);
 if ($76) {
  $77 = (($72) + 44|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $72;
  $67 = $79;
  $80 = $67;
  $81 = (($80) + 24|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($78>>>0)<($82>>>0);
  if ($83) {
   $84 = $72;
   $29 = $84;
   $85 = $29;
   $86 = (($85) + 24|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (($72) + 44|0);
   HEAP32[$88>>2] = $87;
  }
  $89 = $72;
  $5 = $89;
  $90 = $5;
  $91 = (($90) + 20|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (($72) + 44|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (($72) + 32|0);
  $4 = $95;
  $96 = $4;
  $3 = $96;
  $97 = $3;
  $98 = ($97);
  $2 = $98;
  $99 = $2;
  $100 = $99;
  $1 = $100;
  $19 = $agg$result;
  $20 = $92;
  $21 = $94;
  $22 = $69;
  $101 = $19;
  $102 = $20;
  $103 = $21;
  $104 = $22;
  $14 = $101;
  $15 = $102;
  $16 = $103;
  $17 = $104;
  $105 = $14;
  $106 = ($105);
  $tmp$i$i9 = $13;
  $tmp1$i$i10 = $18;
  ;HEAP8[$tmp$i$i9+0|0]=HEAP8[$tmp1$i$i10+0|0]|0;
  $12 = $106;
  $107 = $12;
  $tmp$i$i$i11 = $__t21$i$i$i8;
  $tmp2$i$i$i12 = $13;
  ;HEAP8[$tmp$i$i$i11+0|0]=HEAP8[$tmp2$i$i$i12+0|0]|0;
  $10 = $107;
  $108 = $10;
  $109 = $108;
  $9 = $__t21$i$i$i8;
  $tmp$i$i$i$i13 = $8;
  $tmp1$i$i$i$i14 = $11;
  ;HEAP8[$tmp$i$i$i$i13+0|0]=HEAP8[$tmp1$i$i$i$i14+0|0]|0;
  $7 = $109;
  $6 = $8;
  $110 = $15;
  $111 = $16;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($105,$110,$111);
  STACKTOP = sp;return;
 }
 $112 = (($72) + 48|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = $113 & 8;
 $115 = ($114|0)!=(0);
 if ($115) {
  $116 = $72;
  $23 = $116;
  $117 = $23;
  $118 = (($117) + 8|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = $72;
  $24 = $120;
  $121 = $24;
  $122 = (($121) + 16|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($72) + 32|0);
  $28 = $124;
  $125 = $28;
  $27 = $125;
  $126 = $27;
  $127 = ($126);
  $26 = $127;
  $128 = $26;
  $129 = $128;
  $25 = $129;
  $43 = $agg$result;
  $44 = $119;
  $45 = $123;
  $46 = $70;
  $130 = $43;
  $131 = $44;
  $132 = $45;
  $133 = $46;
  $38 = $130;
  $39 = $131;
  $40 = $132;
  $41 = $133;
  $134 = $38;
  $135 = ($134);
  $tmp$i$i2 = $37;
  $tmp1$i$i3 = $42;
  ;HEAP8[$tmp$i$i2+0|0]=HEAP8[$tmp1$i$i3+0|0]|0;
  $36 = $135;
  $136 = $36;
  $tmp$i$i$i4 = $__t21$i$i$i1;
  $tmp2$i$i$i5 = $37;
  ;HEAP8[$tmp$i$i$i4+0|0]=HEAP8[$tmp2$i$i$i5+0|0]|0;
  $34 = $136;
  $137 = $34;
  $138 = $137;
  $33 = $__t21$i$i$i1;
  $tmp$i$i$i$i6 = $32;
  $tmp1$i$i$i$i7 = $35;
  ;HEAP8[$tmp$i$i$i$i6+0|0]=HEAP8[$tmp1$i$i$i$i7+0|0]|0;
  $31 = $138;
  $30 = $32;
  $139 = $39;
  $140 = $40;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($134,$139,$140);
  STACKTOP = sp;return;
 }
 $141 = (($72) + 32|0);
 $50 = $141;
 $142 = $50;
 $49 = $142;
 $143 = $49;
 $144 = ($143);
 $48 = $144;
 $145 = $48;
 $146 = $145;
 $47 = $146;
 $65 = $agg$result;
 $66 = $71;
 $147 = $65;
 $148 = $66;
 $62 = $147;
 $63 = $148;
 $149 = $62;
 $150 = ($149);
 $tmp$i$i = $61;
 $tmp1$i$i = $64;
 ;HEAP8[$tmp$i$i+0|0]=HEAP8[$tmp1$i$i+0|0]|0;
 $60 = $150;
 $151 = $60;
 $tmp$i$i$i = $__t21$i$i$i;
 $tmp2$i$i$i = $61;
 ;HEAP8[$tmp$i$i$i+0|0]=HEAP8[$tmp2$i$i$i+0|0]|0;
 $58 = $151;
 $152 = $58;
 $153 = $152;
 $57 = $__t21$i$i$i;
 $tmp$i$i$i$i = $56;
 $tmp1$i$i$i$i = $59;
 ;HEAP8[$tmp$i$i$i$i+0|0]=HEAP8[$tmp1$i$i$i$i+0|0]|0;
 $55 = $153;
 $54 = $56;
 $53 = $149;
 $154 = $53;
 $155 = ($154);
 $52 = $155;
 $156 = $52;
 $157 = $156;
 $51 = $157;
 $158 = $51;
 $159 = ($158);
 $160 = ($159);
 $161 = $160;
 $162 = ($161);
 $__a$i$i$i = $162;
 $__i$i$i$i = 0;
 while(1) {
  $163 = $__i$i$i$i;
  $164 = ($163>>>0)<(3);
  if (!($164)) {
   break;
  }
  $165 = $__i$i$i$i;
  $166 = $__a$i$i$i;
  $167 = (($166) + ($165<<2)|0);
  HEAP32[$167>>2] = 0;
  $168 = $__i$i$i$i;
  $169 = (($168) + 1)|0;
  $__i$i$i$i = $169;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cap = 0;
 var $__m$i = 0, $__p = 0, $__sz = 0, $tmp$i = 0, $tmp$i$i = 0, $tmp1$i = 0, $tmp1$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0;
 $17 = sp + 128|0;
 $19 = sp + 144|0;
 $47 = sp + 376|0;
 $50 = sp + 400|0;
 $54 = sp + 456|0;
 $51 = $this;
 $52 = $__first;
 $53 = $__last;
 $55 = $51;
 $56 = $52;
 $57 = $53;
 $48 = $56;
 $49 = $57;
 $58 = $48;
 $59 = $49;
 $tmp$i = $47;
 $tmp1$i = $50;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
 $45 = $58;
 $46 = $59;
 $60 = $46;
 $61 = $45;
 $62 = $60;
 $63 = $61;
 $64 = (($62) - ($63))|0;
 $__sz = $64;
 $65 = $__sz;
 $23 = $55;
 $66 = $23;
 $22 = $66;
 $67 = $22;
 $68 = ($67);
 $21 = $68;
 $69 = $21;
 $70 = $69;
 $20 = $70;
 $71 = $20;
 $72 = $71;
 $18 = $72;
 $73 = $18;
 $tmp$i$i = $17;
 $tmp1$i$i = $19;
 ;HEAP8[$tmp$i$i+0|0]=HEAP8[$tmp1$i$i+0|0]|0;
 $16 = $73;
 $74 = $16;
 $15 = $74;
 $__m$i = -1;
 $75 = $__m$i;
 $76 = (($75) - 16)|0;
 $77 = ($65>>>0)>($76>>>0);
 if ($77) {
  $78 = $55;
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($78);
 }
 $79 = $__sz;
 $80 = ($79>>>0)<(11);
 if ($80) {
  $81 = $__sz;
  $3 = $55;
  $4 = $81;
  $82 = $3;
  $83 = $4;
  $84 = $83 << 1;
  $85 = $84&255;
  $86 = ($82);
  $2 = $86;
  $87 = $2;
  $88 = $87;
  $1 = $88;
  $89 = $1;
  $90 = ($89);
  $91 = ($90);
  $92 = $91;
  $93 = ($92);
  $94 = $93;
  HEAP8[$94] = $85;
  $9 = $55;
  $95 = $9;
  $96 = ($95);
  $8 = $96;
  $97 = $8;
  $98 = $97;
  $7 = $98;
  $99 = $7;
  $100 = ($99);
  $101 = ($100);
  $102 = $101;
  $103 = (($102) + 1|0);
  $104 = ($103);
  $6 = $104;
  $105 = $6;
  $5 = $105;
  $106 = $5;
  $__p = $106;
 } else {
  $107 = $__sz;
  $11 = $107;
  $108 = $11;
  $109 = ($108>>>0)<(11);
  if ($109) {
   $115 = 11;
  } else {
   $110 = $11;
   $111 = (($110) + 1)|0;
   $10 = $111;
   $112 = $10;
   $113 = (($112) + 15)|0;
   $114 = $113 & -16;
   $115 = $114;
  }
  $116 = (($115) - 1)|0;
  $__cap = $116;
  $14 = $55;
  $117 = $14;
  $118 = ($117);
  $13 = $118;
  $119 = $13;
  $120 = $119;
  $12 = $120;
  $121 = $12;
  $122 = $121;
  $123 = $__cap;
  $124 = (($123) + 1)|0;
  $27 = $122;
  $28 = $124;
  $125 = $27;
  $126 = $28;
  $24 = $125;
  $25 = $126;
  $26 = 0;
  $127 = $25;
  $128 = (__Znwj($127)|0);
  $__p = $128;
  $129 = $__p;
  $31 = $55;
  $32 = $129;
  $130 = $31;
  $131 = $32;
  $132 = ($130);
  $30 = $132;
  $133 = $30;
  $134 = $133;
  $29 = $134;
  $135 = $29;
  $136 = ($135);
  $137 = ($136);
  $138 = $137;
  $139 = (($138) + 8|0);
  HEAP32[$139>>2] = $131;
  $140 = $__cap;
  $141 = (($140) + 1)|0;
  $35 = $55;
  $36 = $141;
  $142 = $35;
  $143 = $36;
  $144 = 1 | $143;
  $145 = ($142);
  $34 = $145;
  $146 = $34;
  $147 = $146;
  $33 = $147;
  $148 = $33;
  $149 = ($148);
  $150 = ($149);
  $151 = $150;
  $152 = ($151);
  HEAP32[$152>>2] = $144;
  $153 = $__sz;
  $39 = $55;
  $40 = $153;
  $154 = $39;
  $155 = $40;
  $156 = ($154);
  $38 = $156;
  $157 = $38;
  $158 = $157;
  $37 = $158;
  $159 = $37;
  $160 = ($159);
  $161 = ($160);
  $162 = $161;
  $163 = (($162) + 4|0);
  HEAP32[$163>>2] = $155;
 }
 while(1) {
  $164 = $52;
  $165 = $53;
  $166 = ($164|0)!=($165|0);
  if (!($166)) {
   break;
  }
  $167 = $__p;
  $168 = $52;
  $41 = $167;
  $42 = $168;
  $169 = $42;
  $170 = HEAP8[$169]|0;
  $171 = $41;
  HEAP8[$171] = $170;
  $172 = $52;
  $173 = (($172) + 1|0);
  $52 = $173;
  $174 = $__p;
  $175 = (($174) + 1|0);
  $__p = $175;
 }
 $176 = $__p;
 HEAP8[$54] = 0;
 $43 = $176;
 $44 = $54;
 $177 = $44;
 $178 = HEAP8[$177]|0;
 $179 = $43;
 HEAP8[$179] = $178;
 STACKTOP = sp;return;
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__np = 0, $__ns = 0;
 var $__r$i = 0, $__sp = 0, $__sz = 0, $cleanup$dest = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0;
 $__sp = sp + 360|0;
 $37 = $__ob;
 $38 = $__op;
 $39 = $__oe;
 $40 = $__iob;
 $41 = $__fl;
 $45 = ($__s);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)==(0|0);
 if ($47) {
  $48 = $agg$result;
  $49 = $__s;
  ;HEAP32[$48+0>>2]=HEAP32[$49+0>>2]|0;
  STACKTOP = sp;return;
 }
 $50 = $39;
 $51 = $37;
 $52 = $50;
 $53 = $51;
 $54 = (($52) - ($53))|0;
 $__sz = $54;
 $55 = $40;
 $36 = $55;
 $56 = $36;
 $57 = (($56) + 12|0);
 $58 = HEAP32[$57>>2]|0;
 $__ns = $58;
 $59 = $__ns;
 $60 = $__sz;
 $61 = ($59|0)>($60|0);
 if ($61) {
  $62 = $__sz;
  $63 = $__ns;
  $64 = (($63) - ($62))|0;
  $__ns = $64;
 } else {
  $__ns = 0;
 }
 $65 = $38;
 $66 = $37;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $__np = $69;
 $70 = $__np;
 $71 = ($70|0)>(0);
 do {
  if ($71) {
   $72 = ($__s);
   $73 = HEAP32[$72>>2]|0;
   $74 = $37;
   $75 = $__np;
   $28 = $73;
   $29 = $74;
   $30 = $75;
   $76 = $28;
   $77 = $76;
   $78 = HEAP32[$77>>2]|0;
   $79 = (($78) + 48|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $29;
   $82 = $30;
   $83 = (FUNCTION_TABLE_iiii[$80 & 63]($76,$81,$82)|0);
   $84 = $__np;
   $85 = ($83|0)!=($84|0);
   if (!($85)) {
    break;
   }
   $86 = ($__s);
   HEAP32[$86>>2] = 0;
   $87 = $agg$result;
   $88 = $__s;
   ;HEAP32[$87+0>>2]=HEAP32[$88+0>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 $89 = $__ns;
 $90 = ($89|0)>(0);
 do {
  if ($90) {
   $91 = $__ns;
   $92 = $41;
   $25 = $__sp;
   $26 = $91;
   $27 = $92;
   $93 = $25;
   $94 = $26;
   $95 = $27;
   $22 = $93;
   $23 = $94;
   $24 = $95;
   $96 = $22;
   $97 = ($96);
   $21 = $97;
   $98 = $21;
   $20 = $98;
   $99 = $20;
   $100 = $99;
   $19 = $100;
   $101 = $19;
   $102 = $101;
   $18 = $102;
   $103 = $23;
   $104 = $24;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($96,$103,$104);
   $105 = ($__s);
   $106 = HEAP32[$105>>2]|0;
   $17 = $__sp;
   $107 = $17;
   $16 = $107;
   $108 = $16;
   $15 = $108;
   $109 = $15;
   $110 = ($109);
   $14 = $110;
   $111 = $14;
   $112 = $111;
   $13 = $112;
   $113 = $13;
   $114 = ($113);
   $115 = ($114);
   $116 = $115;
   $117 = ($116);
   $118 = $117;
   $119 = HEAP8[$118]|0;
   $120 = $119&255;
   $121 = $120 & 1;
   $122 = ($121|0)!=(0);
   if ($122) {
    $7 = $108;
    $123 = $7;
    $124 = ($123);
    $6 = $124;
    $125 = $6;
    $126 = $125;
    $5 = $126;
    $127 = $5;
    $128 = ($127);
    $129 = ($128);
    $130 = $129;
    $131 = (($130) + 8|0);
    $132 = HEAP32[$131>>2]|0;
    $145 = $132;
   } else {
    $12 = $108;
    $133 = $12;
    $134 = ($133);
    $11 = $134;
    $135 = $11;
    $136 = $135;
    $10 = $136;
    $137 = $10;
    $138 = ($137);
    $139 = ($138);
    $140 = $139;
    $141 = (($140) + 1|0);
    $142 = ($141);
    $9 = $142;
    $143 = $9;
    $8 = $143;
    $144 = $8;
    $145 = $144;
   }
   $4 = $145;
   $146 = $4;
   $147 = $__ns;
   $1 = $106;
   $2 = $146;
   $3 = $147;
   $148 = $1;
   $149 = $148;
   $150 = HEAP32[$149>>2]|0;
   $151 = (($150) + 48|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = $2;
   $154 = $3;
   __THREW__ = 0;
   $155 = (invoke_iiii($152|0,($148|0),($153|0),($154|0))|0);
   $156 = __THREW__; __THREW__ = 0;
   $157 = $156&1;
   if ($157) {
    $163 = ___cxa_find_matching_catch(-1,-1)|0;
    $164 = tempRet0;
    $42 = $163;
    $43 = $164;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
    $197 = $42;
    $198 = $43;
    ___resumeException($197|0);
    // unreachable;
   }
   $158 = $__ns;
   $159 = ($155|0)!=($158|0);
   if ($159) {
    $160 = ($__s);
    HEAP32[$160>>2] = 0;
    $161 = $agg$result;
    $162 = $__s;
    ;HEAP32[$161+0>>2]=HEAP32[$162+0>>2]|0;
    $44 = 1;
   } else {
    $44 = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
   $cleanup$dest = $44;
   if ((($cleanup$dest|0) == 0)) {
    break;
   } else if ((($cleanup$dest|0) == 1)) {
    STACKTOP = sp;return;
   } else {
    // unreachable;
   }
  }
 } while(0);
 $165 = $39;
 $166 = $38;
 $167 = $165;
 $168 = $166;
 $169 = (($167) - ($168))|0;
 $__np = $169;
 $170 = $__np;
 $171 = ($170|0)>(0);
 do {
  if ($171) {
   $172 = ($__s);
   $173 = HEAP32[$172>>2]|0;
   $174 = $38;
   $175 = $__np;
   $31 = $173;
   $32 = $174;
   $33 = $175;
   $176 = $31;
   $177 = $176;
   $178 = HEAP32[$177>>2]|0;
   $179 = (($178) + 48|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = $32;
   $182 = $33;
   $183 = (FUNCTION_TABLE_iiii[$180 & 63]($176,$181,$182)|0);
   $184 = $__np;
   $185 = ($183|0)!=($184|0);
   if (!($185)) {
    break;
   }
   $186 = ($__s);
   HEAP32[$186>>2] = 0;
   $187 = $agg$result;
   $188 = $__s;
   ;HEAP32[$187+0>>2]=HEAP32[$188+0>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 $189 = $40;
 $34 = $189;
 $35 = 0;
 $190 = $34;
 $191 = (($190) + 12|0);
 $192 = HEAP32[$191>>2]|0;
 $__r$i = $192;
 $193 = $35;
 $194 = (($190) + 12|0);
 HEAP32[$194>>2] = $193;
 $195 = $agg$result;
 $196 = $__s;
 ;HEAP32[$195+0>>2]=HEAP32[$196+0>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 $3 = $2;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 $4 = (($3) + -8|0);
 $5 = $4;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 STACKTOP = sp;return;
}
function __ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 $4 = (($3) + -8|0);
 $5 = $4;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($5);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -12|0);
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($3) + ($8)|0);
 $10 = $9;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -12|0);
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($3) + ($8)|0);
 $10 = $9;
 __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($10);
 STACKTOP = sp;return;
}
function __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $vtt;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$6>>2] = $5;
 $7 = (($4) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -12|0);
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = $3;
 $15 = (($14) + ($13)|0);
 $16 = $15;
 HEAP32[$16>>2] = $8;
 $17 = (($4) + 36|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $3;
 $20 = (($19) + 8|0);
 $21 = $20;
 HEAP32[$21>>2] = $18;
 $22 = (($3) + 12|0);
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($22);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 $4 = ((992) + 8|0);
 HEAP32[$3>>2] = $4;
 $5 = (($2) + 32|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 $6 = $2;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($6);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 $3 = $2;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$1,$2,$__way,$__wch) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $1 = $1|0;
 $2 = $2|0;
 $__way = $__way|0;
 $__wch = $__wch|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__noff = 0, label = 0;
 var sp = 0, u$0 = 0, u$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 656|0;
 $5 = sp + 16|0;
 $7 = sp + 32|0;
 $9 = sp + 48|0;
 $11 = sp + 64|0;
 $31 = sp + 224|0;
 $33 = sp + 240|0;
 $49 = sp + 368|0;
 $51 = sp + 384|0;
 $54 = sp + 408|0;
 $56 = sp + 424|0;
 $59 = sp + 448|0;
 $61 = sp + 464|0;
 $76 = sp + 584|0;
 $78 = sp + 600|0;
 $81 = sp + 624|0;
 $__noff = sp + 648|0;
 $80 = $this;
 $84 = $81;
 $85 = $84;
 HEAP32[$85>>2] = $1;
 $86 = (($84) + 4)|0;
 $87 = $86;
 HEAP32[$87>>2] = $2;
 $82 = $__way;
 $83 = $__wch;
 $88 = $80;
 $89 = (($88) + 44|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $88;
 $79 = $91;
 $92 = $79;
 $93 = (($92) + 24|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ($90>>>0)<($94>>>0);
 if ($95) {
  $96 = $88;
  $3 = $96;
  $97 = $3;
  $98 = (($97) + 24|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($88) + 44|0);
  HEAP32[$100>>2] = $99;
 }
 $101 = $83;
 $102 = $101 & 24;
 $103 = ($102|0)==(0);
 if ($103) {
  $6 = $agg$result;
  $104 = $7;
  $105 = $104;
  HEAP32[$105>>2] = -1;
  $106 = (($104) + 4)|0;
  $107 = $106;
  HEAP32[$107>>2] = -1;
  $108 = $6;
  $109 = $7;
  $110 = $109;
  $111 = HEAP32[$110>>2]|0;
  $112 = (($109) + 4)|0;
  $113 = $112;
  $114 = HEAP32[$113>>2]|0;
  $4 = $108;
  $115 = $5;
  $116 = $115;
  HEAP32[$116>>2] = $111;
  $117 = (($115) + 4)|0;
  $118 = $117;
  HEAP32[$118>>2] = $114;
  $119 = $4;
  $120 = ($119);
  $121 = $120;
  ;HEAP32[$121+0>>2]=0|0;HEAP32[$121+4>>2]=0|0;
  $122 = (($119) + 8|0);
  $123 = $5;
  $124 = $123;
  $125 = HEAP32[$124>>2]|0;
  $126 = (($123) + 4)|0;
  $127 = $126;
  $128 = HEAP32[$127>>2]|0;
  $129 = $122;
  $130 = $129;
  HEAP32[$130>>2] = $125;
  $131 = (($129) + 4)|0;
  $132 = $131;
  HEAP32[$132>>2] = $128;
  STACKTOP = sp;return;
 }
 $133 = $83;
 $134 = $133 & 24;
 $135 = ($134|0)==(24);
 do {
  if ($135) {
   $136 = $82;
   $137 = ($136|0)==(1);
   if (!($137)) {
    break;
   }
   $10 = $agg$result;
   $138 = $11;
   $139 = $138;
   HEAP32[$139>>2] = -1;
   $140 = (($138) + 4)|0;
   $141 = $140;
   HEAP32[$141>>2] = -1;
   $142 = $10;
   $143 = $11;
   $144 = $143;
   $145 = HEAP32[$144>>2]|0;
   $146 = (($143) + 4)|0;
   $147 = $146;
   $148 = HEAP32[$147>>2]|0;
   $8 = $142;
   $149 = $9;
   $150 = $149;
   HEAP32[$150>>2] = $145;
   $151 = (($149) + 4)|0;
   $152 = $151;
   HEAP32[$152>>2] = $148;
   $153 = $8;
   $154 = ($153);
   $155 = $154;
   ;HEAP32[$155+0>>2]=0|0;HEAP32[$155+4>>2]=0|0;
   $156 = (($153) + 8|0);
   $157 = $9;
   $158 = $157;
   $159 = HEAP32[$158>>2]|0;
   $160 = (($157) + 4)|0;
   $161 = $160;
   $162 = HEAP32[$161>>2]|0;
   $163 = $156;
   $164 = $163;
   HEAP32[$164>>2] = $159;
   $165 = (($163) + 4)|0;
   $166 = $165;
   HEAP32[$166>>2] = $162;
   STACKTOP = sp;return;
  }
 } while(0);
 $167 = $82;
 if ((($167|0) == 2)) {
  $209 = (($88) + 44|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = (($88) + 32|0);
  $29 = $211;
  $212 = $29;
  $28 = $212;
  $213 = $28;
  $27 = $213;
  $214 = $27;
  $215 = ($214);
  $26 = $215;
  $216 = $26;
  $217 = $216;
  $25 = $217;
  $218 = $25;
  $219 = ($218);
  $220 = ($219);
  $221 = $220;
  $222 = ($221);
  $223 = $222;
  $224 = HEAP8[$223]|0;
  $225 = $224&255;
  $226 = $225 & 1;
  $227 = ($226|0)!=(0);
  if ($227) {
   $19 = $213;
   $228 = $19;
   $229 = ($228);
   $18 = $229;
   $230 = $18;
   $231 = $230;
   $17 = $231;
   $232 = $17;
   $233 = ($232);
   $234 = ($233);
   $235 = $234;
   $236 = (($235) + 8|0);
   $237 = HEAP32[$236>>2]|0;
   $250 = $237;
  } else {
   $24 = $213;
   $238 = $24;
   $239 = ($238);
   $23 = $239;
   $240 = $23;
   $241 = $240;
   $22 = $241;
   $242 = $22;
   $243 = ($242);
   $244 = ($243);
   $245 = $244;
   $246 = (($245) + 1|0);
   $247 = ($246);
   $21 = $247;
   $248 = $21;
   $20 = $248;
   $249 = $20;
   $250 = $249;
  }
  $16 = $250;
  $251 = $16;
  $252 = $210;
  $253 = $251;
  $254 = (($252) - ($253))|0;
  $255 = ($254|0)<(0);
  $256 = $255 << 31 >> 31;
  $257 = $__noff;
  $258 = $257;
  HEAP32[$258>>2] = $254;
  $259 = (($257) + 4)|0;
  $260 = $259;
  HEAP32[$260>>2] = $256;
 } else if ((($167|0) == 0)) {
  $168 = $__noff;
  $169 = $168;
  HEAP32[$169>>2] = 0;
  $170 = (($168) + 4)|0;
  $171 = $170;
  HEAP32[$171>>2] = 0;
 } else if ((($167|0) == 1)) {
  $172 = $83;
  $173 = $172 & 8;
  $174 = ($173|0)!=(0);
  if ($174) {
   $175 = $88;
   $12 = $175;
   $176 = $12;
   $177 = (($176) + 12|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = $88;
   $13 = $179;
   $180 = $13;
   $181 = (($180) + 8|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = $178;
   $184 = $182;
   $185 = (($183) - ($184))|0;
   $186 = ($185|0)<(0);
   $187 = $186 << 31 >> 31;
   $188 = $__noff;
   $189 = $188;
   HEAP32[$189>>2] = $185;
   $190 = (($188) + 4)|0;
   $191 = $190;
   HEAP32[$191>>2] = $187;
  } else {
   $192 = $88;
   $14 = $192;
   $193 = $14;
   $194 = (($193) + 24|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = $88;
   $15 = $196;
   $197 = $15;
   $198 = (($197) + 20|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = $195;
   $201 = $199;
   $202 = (($200) - ($201))|0;
   $203 = ($202|0)<(0);
   $204 = $203 << 31 >> 31;
   $205 = $__noff;
   $206 = $205;
   HEAP32[$206>>2] = $202;
   $207 = (($205) + 4)|0;
   $208 = $207;
   HEAP32[$208>>2] = $204;
  }
 } else {
  $32 = $agg$result;
  $261 = $33;
  $262 = $261;
  HEAP32[$262>>2] = -1;
  $263 = (($261) + 4)|0;
  $264 = $263;
  HEAP32[$264>>2] = -1;
  $265 = $32;
  $266 = $33;
  $267 = $266;
  $268 = HEAP32[$267>>2]|0;
  $269 = (($266) + 4)|0;
  $270 = $269;
  $271 = HEAP32[$270>>2]|0;
  $30 = $265;
  $272 = $31;
  $273 = $272;
  HEAP32[$273>>2] = $268;
  $274 = (($272) + 4)|0;
  $275 = $274;
  HEAP32[$275>>2] = $271;
  $276 = $30;
  $277 = ($276);
  $278 = $277;
  ;HEAP32[$278+0>>2]=0|0;HEAP32[$278+4>>2]=0|0;
  $279 = (($276) + 8|0);
  $280 = $31;
  $281 = $280;
  $282 = HEAP32[$281>>2]|0;
  $283 = (($280) + 4)|0;
  $284 = $283;
  $285 = HEAP32[$284>>2]|0;
  $286 = $279;
  $287 = $286;
  HEAP32[$287>>2] = $282;
  $288 = (($286) + 4)|0;
  $289 = $288;
  HEAP32[$289>>2] = $285;
  STACKTOP = sp;return;
 }
 $290 = $81;
 $291 = $290;
 $292 = HEAP32[$291>>2]|0;
 $293 = (($290) + 4)|0;
 $294 = $293;
 $295 = HEAP32[$294>>2]|0;
 $296 = $__noff;
 $297 = $296;
 $298 = HEAP32[$297>>2]|0;
 $299 = (($296) + 4)|0;
 $300 = $299;
 $301 = HEAP32[$300>>2]|0;
 $302 = (_i64Add(($298|0),($301|0),($292|0),($295|0))|0);
 $303 = tempRet0;
 $304 = $__noff;
 $305 = $304;
 HEAP32[$305>>2] = $302;
 $306 = (($304) + 4)|0;
 $307 = $306;
 HEAP32[$307>>2] = $303;
 $308 = $__noff;
 $309 = $308;
 $310 = HEAP32[$309>>2]|0;
 $311 = (($308) + 4)|0;
 $312 = $311;
 $313 = HEAP32[$312>>2]|0;
 $314 = ($313|0)<(0);
 $315 = ($313|0)==(0);
 $316 = ($310>>>0)<(0);
 $317 = $315 & $316;
 $318 = $314 | $317;
 do {
  if (!($318)) {
   $319 = (($88) + 44|0);
   $320 = HEAP32[$319>>2]|0;
   $321 = (($88) + 32|0);
   $47 = $321;
   $322 = $47;
   $46 = $322;
   $323 = $46;
   $45 = $323;
   $324 = $45;
   $325 = ($324);
   $44 = $325;
   $326 = $44;
   $327 = $326;
   $43 = $327;
   $328 = $43;
   $329 = ($328);
   $330 = ($329);
   $331 = $330;
   $332 = ($331);
   $333 = $332;
   $334 = HEAP8[$333]|0;
   $335 = $334&255;
   $336 = $335 & 1;
   $337 = ($336|0)!=(0);
   if ($337) {
    $37 = $323;
    $338 = $37;
    $339 = ($338);
    $36 = $339;
    $340 = $36;
    $341 = $340;
    $35 = $341;
    $342 = $35;
    $343 = ($342);
    $344 = ($343);
    $345 = $344;
    $346 = (($345) + 8|0);
    $347 = HEAP32[$346>>2]|0;
    $360 = $347;
   } else {
    $42 = $323;
    $348 = $42;
    $349 = ($348);
    $41 = $349;
    $350 = $41;
    $351 = $350;
    $40 = $351;
    $352 = $40;
    $353 = ($352);
    $354 = ($353);
    $355 = $354;
    $356 = (($355) + 1|0);
    $357 = ($356);
    $39 = $357;
    $358 = $39;
    $38 = $358;
    $359 = $38;
    $360 = $359;
   }
   $34 = $360;
   $361 = $34;
   $362 = $320;
   $363 = $361;
   $364 = (($362) - ($363))|0;
   $365 = ($364|0)<(0);
   $366 = $365 << 31 >> 31;
   $367 = $__noff;
   $368 = $367;
   $369 = HEAP32[$368>>2]|0;
   $370 = (($367) + 4)|0;
   $371 = $370;
   $372 = HEAP32[$371>>2]|0;
   $373 = ($366|0)<($372|0);
   $374 = ($366|0)==($372|0);
   $375 = ($364>>>0)<($369>>>0);
   $376 = $374 & $375;
   $377 = $373 | $376;
   if ($377) {
    break;
   }
   $407 = $__noff;
   $408 = $407;
   $409 = HEAP32[$408>>2]|0;
   $410 = (($407) + 4)|0;
   $411 = $410;
   $412 = HEAP32[$411>>2]|0;
   $413 = ($409|0)!=(0);
   $414 = ($412|0)!=(0);
   $415 = $413 | $414;
   if ($415) {
    $416 = $83;
    $417 = $416 & 8;
    $418 = ($417|0)!=(0);
    do {
     if ($418) {
      $419 = $88;
      $52 = $419;
      $420 = $52;
      $421 = (($420) + 12|0);
      $422 = HEAP32[$421>>2]|0;
      $423 = ($422|0)==(0|0);
      if (!($423)) {
       break;
      }
      $55 = $agg$result;
      $424 = $56;
      $425 = $424;
      HEAP32[$425>>2] = -1;
      $426 = (($424) + 4)|0;
      $427 = $426;
      HEAP32[$427>>2] = -1;
      $428 = $55;
      $429 = $56;
      $430 = $429;
      $431 = HEAP32[$430>>2]|0;
      $432 = (($429) + 4)|0;
      $433 = $432;
      $434 = HEAP32[$433>>2]|0;
      $53 = $428;
      $435 = $54;
      $436 = $435;
      HEAP32[$436>>2] = $431;
      $437 = (($435) + 4)|0;
      $438 = $437;
      HEAP32[$438>>2] = $434;
      $439 = $53;
      $440 = ($439);
      $441 = $440;
      ;HEAP32[$441+0>>2]=0|0;HEAP32[$441+4>>2]=0|0;
      $442 = (($439) + 8|0);
      $443 = $54;
      $444 = $443;
      $445 = HEAP32[$444>>2]|0;
      $446 = (($443) + 4)|0;
      $447 = $446;
      $448 = HEAP32[$447>>2]|0;
      $449 = $442;
      $450 = $449;
      HEAP32[$450>>2] = $445;
      $451 = (($449) + 4)|0;
      $452 = $451;
      HEAP32[$452>>2] = $448;
      STACKTOP = sp;return;
     }
    } while(0);
    $453 = $83;
    $454 = $453 & 16;
    $455 = ($454|0)!=(0);
    do {
     if ($455) {
      $456 = $88;
      $57 = $456;
      $457 = $57;
      $458 = (($457) + 24|0);
      $459 = HEAP32[$458>>2]|0;
      $460 = ($459|0)==(0|0);
      if (!($460)) {
       break;
      }
      $60 = $agg$result;
      $461 = $61;
      $462 = $461;
      HEAP32[$462>>2] = -1;
      $463 = (($461) + 4)|0;
      $464 = $463;
      HEAP32[$464>>2] = -1;
      $465 = $60;
      $466 = $61;
      $467 = $466;
      $468 = HEAP32[$467>>2]|0;
      $469 = (($466) + 4)|0;
      $470 = $469;
      $471 = HEAP32[$470>>2]|0;
      $58 = $465;
      $472 = $59;
      $473 = $472;
      HEAP32[$473>>2] = $468;
      $474 = (($472) + 4)|0;
      $475 = $474;
      HEAP32[$475>>2] = $471;
      $476 = $58;
      $477 = ($476);
      $478 = $477;
      ;HEAP32[$478+0>>2]=0|0;HEAP32[$478+4>>2]=0|0;
      $479 = (($476) + 8|0);
      $480 = $59;
      $481 = $480;
      $482 = HEAP32[$481>>2]|0;
      $483 = (($480) + 4)|0;
      $484 = $483;
      $485 = HEAP32[$484>>2]|0;
      $486 = $479;
      $487 = $486;
      HEAP32[$487>>2] = $482;
      $488 = (($486) + 4)|0;
      $489 = $488;
      HEAP32[$489>>2] = $485;
      STACKTOP = sp;return;
     }
    } while(0);
   }
   $490 = $83;
   $491 = $490 & 8;
   $492 = ($491|0)!=(0);
   if ($492) {
    $493 = $88;
    $494 = $88;
    $62 = $494;
    $495 = $62;
    $496 = (($495) + 8|0);
    $497 = HEAP32[$496>>2]|0;
    $498 = $88;
    $63 = $498;
    $499 = $63;
    $500 = (($499) + 8|0);
    $501 = HEAP32[$500>>2]|0;
    $502 = $__noff;
    $503 = $502;
    $504 = HEAP32[$503>>2]|0;
    $505 = (($502) + 4)|0;
    $506 = $505;
    u$0 = HEAP32[$506>>2]|0;
    $507 = (($501) + ($504)|0);
    $508 = (($88) + 44|0);
    $509 = HEAP32[$508>>2]|0;
    $64 = $493;
    $65 = $497;
    $66 = $507;
    $67 = $509;
    $510 = $64;
    $511 = $65;
    $512 = (($510) + 8|0);
    HEAP32[$512>>2] = $511;
    $513 = $66;
    $514 = (($510) + 12|0);
    HEAP32[$514>>2] = $513;
    $515 = $67;
    $516 = (($510) + 16|0);
    HEAP32[$516>>2] = $515;
   }
   $517 = $83;
   $518 = $517 & 16;
   $519 = ($518|0)!=(0);
   if ($519) {
    $520 = $88;
    $521 = $88;
    $68 = $521;
    $522 = $68;
    $523 = (($522) + 20|0);
    $524 = HEAP32[$523>>2]|0;
    $525 = $88;
    $69 = $525;
    $526 = $69;
    $527 = (($526) + 28|0);
    $528 = HEAP32[$527>>2]|0;
    $70 = $520;
    $71 = $524;
    $72 = $528;
    $529 = $70;
    $530 = $71;
    $531 = (($529) + 24|0);
    HEAP32[$531>>2] = $530;
    $532 = (($529) + 20|0);
    HEAP32[$532>>2] = $530;
    $533 = $72;
    $534 = (($529) + 28|0);
    HEAP32[$534>>2] = $533;
    $535 = $88;
    $536 = $__noff;
    $537 = $536;
    $538 = HEAP32[$537>>2]|0;
    $539 = (($536) + 4)|0;
    $540 = $539;
    u$1 = HEAP32[$540>>2]|0;
    $73 = $535;
    $74 = $538;
    $541 = $73;
    $542 = $74;
    $543 = (($541) + 24|0);
    $544 = HEAP32[$543>>2]|0;
    $545 = (($544) + ($542)|0);
    HEAP32[$543>>2] = $545;
   }
   $546 = $__noff;
   $547 = $546;
   $548 = HEAP32[$547>>2]|0;
   $549 = (($546) + 4)|0;
   $550 = $549;
   $551 = HEAP32[$550>>2]|0;
   $77 = $agg$result;
   $552 = $78;
   $553 = $552;
   HEAP32[$553>>2] = $548;
   $554 = (($552) + 4)|0;
   $555 = $554;
   HEAP32[$555>>2] = $551;
   $556 = $77;
   $557 = $78;
   $558 = $557;
   $559 = HEAP32[$558>>2]|0;
   $560 = (($557) + 4)|0;
   $561 = $560;
   $562 = HEAP32[$561>>2]|0;
   $75 = $556;
   $563 = $76;
   $564 = $563;
   HEAP32[$564>>2] = $559;
   $565 = (($563) + 4)|0;
   $566 = $565;
   HEAP32[$566>>2] = $562;
   $567 = $75;
   $568 = ($567);
   $569 = $568;
   ;HEAP32[$569+0>>2]=0|0;HEAP32[$569+4>>2]=0|0;
   $570 = (($567) + 8|0);
   $571 = $76;
   $572 = $571;
   $573 = HEAP32[$572>>2]|0;
   $574 = (($571) + 4)|0;
   $575 = $574;
   $576 = HEAP32[$575>>2]|0;
   $577 = $570;
   $578 = $577;
   HEAP32[$578>>2] = $573;
   $579 = (($577) + 4)|0;
   $580 = $579;
   HEAP32[$580>>2] = $576;
   STACKTOP = sp;return;
  }
 } while(0);
 $50 = $agg$result;
 $378 = $51;
 $379 = $378;
 HEAP32[$379>>2] = -1;
 $380 = (($378) + 4)|0;
 $381 = $380;
 HEAP32[$381>>2] = -1;
 $382 = $50;
 $383 = $51;
 $384 = $383;
 $385 = HEAP32[$384>>2]|0;
 $386 = (($383) + 4)|0;
 $387 = $386;
 $388 = HEAP32[$387>>2]|0;
 $48 = $382;
 $389 = $49;
 $390 = $389;
 HEAP32[$390>>2] = $385;
 $391 = (($389) + 4)|0;
 $392 = $391;
 HEAP32[$392>>2] = $388;
 $393 = $48;
 $394 = ($393);
 $395 = $394;
 ;HEAP32[$395+0>>2]=0|0;HEAP32[$395+4>>2]=0|0;
 $396 = (($393) + 8|0);
 $397 = $49;
 $398 = $397;
 $399 = HEAP32[$398>>2]|0;
 $400 = (($397) + 4)|0;
 $401 = $400;
 $402 = HEAP32[$401>>2]|0;
 $403 = $396;
 $404 = $403;
 HEAP32[$404>>2] = $399;
 $405 = (($403) + 4)|0;
 $406 = $405;
 HEAP32[$406>>2] = $402;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$__sp,$__wch) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__sp = $__sp|0;
 $__wch = $__wch|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 $2 = $this;
 $3 = $__wch;
 $4 = $2;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $1 = $__sp;
 $9 = $1;
 $10 = (($9) + 8|0);
 $11 = $10;
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + 4)|0;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = $3;
 $18 = $8;
 FUNCTION_TABLE_viiiiii[$18 & 31]($agg$result,$4,$13,$16,0,$17);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 120|0;
 $15 = $this;
 $16 = $15;
 $17 = (($16) + 44|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $16;
 $13 = $19;
 $20 = $13;
 $21 = (($20) + 24|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($18>>>0)<($22>>>0);
 if ($23) {
  $24 = $16;
  $1 = $24;
  $25 = $1;
  $26 = (($25) + 24|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($16) + 44|0);
  HEAP32[$28>>2] = $27;
 }
 $29 = (($16) + 48|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $30 & 8;
 $32 = ($31|0)!=(0);
 do {
  if ($32) {
   $33 = $16;
   $2 = $33;
   $34 = $2;
   $35 = (($34) + 16|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($16) + 44|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($36>>>0)<($38>>>0);
   if ($39) {
    $40 = $16;
    $41 = $16;
    $3 = $41;
    $42 = $3;
    $43 = (($42) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $16;
    $4 = $45;
    $46 = $4;
    $47 = (($46) + 12|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (($16) + 44|0);
    $50 = HEAP32[$49>>2]|0;
    $5 = $40;
    $6 = $44;
    $7 = $48;
    $8 = $50;
    $51 = $5;
    $52 = $6;
    $53 = (($51) + 8|0);
    HEAP32[$53>>2] = $52;
    $54 = $7;
    $55 = (($51) + 12|0);
    HEAP32[$55>>2] = $54;
    $56 = $8;
    $57 = (($51) + 16|0);
    HEAP32[$57>>2] = $56;
   }
   $58 = $16;
   $9 = $58;
   $59 = $9;
   $60 = (($59) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $16;
   $10 = $62;
   $63 = $10;
   $64 = (($63) + 16|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($61>>>0)<($65>>>0);
   if (!($66)) {
    break;
   }
   $67 = $16;
   $11 = $67;
   $68 = $11;
   $69 = (($68) + 12|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = HEAP8[$70]|0;
   $12 = $71;
   $72 = $12;
   $73 = $72&255;
   $14 = $73;
   $74 = $14;
   STACKTOP = sp;return ($74|0);
  }
 } while(0);
 $14 = -1;
 $74 = $14;
 STACKTOP = sp;return ($74|0);
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $29 = $this;
 $30 = $__c;
 $31 = $29;
 $32 = (($31) + 44|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $31;
 $27 = $34;
 $35 = $27;
 $36 = (($35) + 24|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($33>>>0)<($37>>>0);
 if ($38) {
  $39 = $31;
  $1 = $39;
  $40 = $1;
  $41 = (($40) + 24|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($31) + 44|0);
  HEAP32[$43>>2] = $42;
 }
 $44 = $31;
 $2 = $44;
 $45 = $2;
 $46 = (($45) + 8|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $31;
 $3 = $48;
 $49 = $3;
 $50 = (($49) + 12|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($47>>>0)<($51>>>0);
 L4: do {
  if ($52) {
   $53 = $30;
   $4 = $53;
   $5 = -1;
   $54 = $4;
   $55 = $5;
   $56 = ($54|0)==($55|0);
   if ($56) {
    $57 = $31;
    $58 = $31;
    $6 = $58;
    $59 = $6;
    $60 = (($59) + 8|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = $31;
    $7 = $62;
    $63 = $7;
    $64 = (($63) + 12|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($65) + -1|0);
    $67 = (($31) + 44|0);
    $68 = HEAP32[$67>>2]|0;
    $8 = $57;
    $9 = $61;
    $10 = $66;
    $11 = $68;
    $69 = $8;
    $70 = $9;
    $71 = (($69) + 8|0);
    HEAP32[$71>>2] = $70;
    $72 = $10;
    $73 = (($69) + 12|0);
    HEAP32[$73>>2] = $72;
    $74 = $11;
    $75 = (($69) + 16|0);
    HEAP32[$75>>2] = $74;
    $76 = $30;
    $14 = $76;
    $77 = $14;
    $12 = $77;
    $13 = -1;
    $78 = $12;
    $79 = $13;
    $80 = ($78|0)==($79|0);
    if ($80) {
     $82 = 0;
    } else {
     $81 = $14;
     $82 = $81;
    }
    $28 = $82;
    $128 = $28;
    STACKTOP = sp;return ($128|0);
   } else {
    $83 = (($31) + 48|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = $84 & 16;
    $86 = ($85|0)!=(0);
    do {
     if (!($86)) {
      $87 = $30;
      $15 = $87;
      $88 = $15;
      $89 = $88&255;
      $90 = $31;
      $16 = $90;
      $91 = $16;
      $92 = (($91) + 12|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = (($93) + -1|0);
      $95 = HEAP8[$94]|0;
      $17 = $89;
      $18 = $95;
      $96 = $17;
      $97 = $96 << 24 >> 24;
      $98 = $18;
      $99 = $98 << 24 >> 24;
      $100 = ($97|0)==($99|0);
      if ($100) {
       break;
      }
      break L4;
     }
    } while(0);
    $101 = $31;
    $102 = $31;
    $19 = $102;
    $103 = $19;
    $104 = (($103) + 8|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $31;
    $20 = $106;
    $107 = $20;
    $108 = (($107) + 12|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = (($109) + -1|0);
    $111 = (($31) + 44|0);
    $112 = HEAP32[$111>>2]|0;
    $21 = $101;
    $22 = $105;
    $23 = $110;
    $24 = $112;
    $113 = $21;
    $114 = $22;
    $115 = (($113) + 8|0);
    HEAP32[$115>>2] = $114;
    $116 = $23;
    $117 = (($113) + 12|0);
    HEAP32[$117>>2] = $116;
    $118 = $24;
    $119 = (($113) + 16|0);
    HEAP32[$119>>2] = $118;
    $120 = $30;
    $25 = $120;
    $121 = $25;
    $122 = $121&255;
    $123 = $31;
    $26 = $123;
    $124 = $26;
    $125 = (($124) + 12|0);
    $126 = HEAP32[$125>>2]|0;
    HEAP8[$126] = $122;
    $127 = $30;
    $28 = $127;
    $128 = $28;
    STACKTOP = sp;return ($128|0);
   }
  }
 } while(0);
 $28 = -1;
 $128 = $28;
 STACKTOP = sp;return ($128|0);
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__hm = 0, $__ninp = 0, $__nout = 0;
 var $__p = 0, $__p1 = 0, $tmp$i = 0, $tmp1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 768|0;
 $53 = sp + 416|0;
 $56 = sp + 440|0;
 $91 = sp + 752|0;
 $86 = $this;
 $87 = $__c;
 $92 = $86;
 $93 = $87;
 $75 = $93;
 $76 = -1;
 $94 = $75;
 $95 = $76;
 $96 = ($94|0)==($95|0);
 if ($96) {
  $390 = $87;
  $84 = $390;
  $391 = $84;
  $82 = $391;
  $83 = -1;
  $392 = $82;
  $393 = $83;
  $394 = ($392|0)==($393|0);
  if ($394) {
   $396 = 0;
  } else {
   $395 = $84;
   $396 = $395;
  }
  $85 = $396;
  $397 = $85;
  STACKTOP = sp;return ($397|0);
 }
 $97 = $92;
 $14 = $97;
 $98 = $14;
 $99 = (($98) + 12|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = $92;
 $6 = $101;
 $102 = $6;
 $103 = (($102) + 8|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $100;
 $106 = $104;
 $107 = (($105) - ($106))|0;
 $__ninp = $107;
 $108 = $92;
 $1 = $108;
 $109 = $1;
 $110 = (($109) + 24|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $92;
 $2 = $112;
 $113 = $2;
 $114 = (($113) + 28|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = ($111|0)==($115|0);
 L9: do {
  if ($116) {
   $117 = (($92) + 48|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = $118 & 16;
   $120 = ($119|0)!=(0);
   if (!($120)) {
    $85 = -1;
    $397 = $85;
    STACKTOP = sp;return ($397|0);
   }
   $121 = $92;
   $3 = $121;
   $122 = $3;
   $123 = (($122) + 24|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $92;
   $4 = $125;
   $126 = $4;
   $127 = (($126) + 20|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = $124;
   $130 = $128;
   $131 = (($129) - ($130))|0;
   $__nout = $131;
   $132 = (($92) + 44|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $92;
   $5 = $134;
   $135 = $5;
   $136 = (($135) + 20|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = $133;
   $139 = $137;
   $140 = (($138) - ($139))|0;
   $__hm = $140;
   $141 = (($92) + 32|0);
   __THREW__ = 0;
   invoke_vii(51,($141|0),0);
   $142 = __THREW__; __THREW__ = 0;
   $143 = $142&1;
   do {
    if (!($143)) {
     $144 = (($92) + 32|0);
     $145 = (($92) + 32|0);
     $13 = $145;
     $146 = $13;
     $12 = $146;
     $147 = $12;
     $148 = ($147);
     $11 = $148;
     $149 = $11;
     $150 = $149;
     $10 = $150;
     $151 = $10;
     $152 = ($151);
     $153 = ($152);
     $154 = $153;
     $155 = ($154);
     $156 = $155;
     $157 = HEAP8[$156]|0;
     $158 = $157&255;
     $159 = $158 & 1;
     $160 = ($159|0)!=(0);
     if ($160) {
      $9 = $146;
      $161 = $9;
      $162 = ($161);
      $8 = $162;
      $163 = $8;
      $164 = $163;
      $7 = $164;
      $165 = $7;
      $166 = ($165);
      $167 = ($166);
      $168 = $167;
      $169 = ($168);
      $170 = HEAP32[$169>>2]|0;
      $171 = $170 & -2;
      $172 = $171;
     } else {
      $172 = 11;
     }
     $173 = (($172) - 1)|0;
     $15 = $144;
     $16 = $173;
     $174 = $15;
     $175 = $16;
     __THREW__ = 0;
     invoke_viii(13,($174|0),($175|0),0);
     $176 = __THREW__; __THREW__ = 0;
     $177 = $176&1;
     if ($177) {
      break;
     }
     $178 = (($92) + 32|0);
     $30 = $178;
     $179 = $30;
     $29 = $179;
     $180 = $29;
     $28 = $180;
     $181 = $28;
     $182 = ($181);
     $27 = $182;
     $183 = $27;
     $184 = $183;
     $26 = $184;
     $185 = $26;
     $186 = ($185);
     $187 = ($186);
     $188 = $187;
     $189 = ($188);
     $190 = $189;
     $191 = HEAP8[$190]|0;
     $192 = $191&255;
     $193 = $192 & 1;
     $194 = ($193|0)!=(0);
     if ($194) {
      $20 = $180;
      $195 = $20;
      $196 = ($195);
      $19 = $196;
      $197 = $19;
      $198 = $197;
      $18 = $198;
      $199 = $18;
      $200 = ($199);
      $201 = ($200);
      $202 = $201;
      $203 = (($202) + 8|0);
      $204 = HEAP32[$203>>2]|0;
      $217 = $204;
     } else {
      $25 = $180;
      $205 = $25;
      $206 = ($205);
      $24 = $206;
      $207 = $24;
      $208 = $207;
      $23 = $208;
      $209 = $23;
      $210 = ($209);
      $211 = ($210);
      $212 = $211;
      $213 = (($212) + 1|0);
      $214 = ($213);
      $22 = $214;
      $215 = $22;
      $21 = $215;
      $216 = $21;
      $217 = $216;
     }
     $17 = $217;
     $218 = $17;
     $__p = $218;
     $219 = $92;
     $220 = $__p;
     $221 = $__p;
     $222 = (($92) + 32|0);
     $40 = $222;
     $223 = $40;
     $39 = $223;
     $224 = $39;
     $225 = ($224);
     $38 = $225;
     $226 = $38;
     $227 = $226;
     $37 = $227;
     $228 = $37;
     $229 = ($228);
     $230 = ($229);
     $231 = $230;
     $232 = ($231);
     $233 = $232;
     $234 = HEAP8[$233]|0;
     $235 = $234&255;
     $236 = $235 & 1;
     $237 = ($236|0)!=(0);
     if ($237) {
      $33 = $223;
      $238 = $33;
      $239 = ($238);
      $32 = $239;
      $240 = $32;
      $241 = $240;
      $31 = $241;
      $242 = $31;
      $243 = ($242);
      $244 = ($243);
      $245 = $244;
      $246 = (($245) + 4|0);
      $247 = HEAP32[$246>>2]|0;
      $261 = $247;
     } else {
      $36 = $223;
      $248 = $36;
      $249 = ($248);
      $35 = $249;
      $250 = $35;
      $251 = $250;
      $34 = $251;
      $252 = $34;
      $253 = ($252);
      $254 = ($253);
      $255 = $254;
      $256 = ($255);
      $257 = $256;
      $258 = HEAP8[$257]|0;
      $259 = $258&255;
      $260 = $259 >> 1;
      $261 = $260;
     }
     $262 = (($221) + ($261)|0);
     $41 = $219;
     $42 = $220;
     $43 = $262;
     $263 = $41;
     $264 = $42;
     $265 = (($263) + 24|0);
     HEAP32[$265>>2] = $264;
     $266 = (($263) + 20|0);
     HEAP32[$266>>2] = $264;
     $267 = $43;
     $268 = (($263) + 28|0);
     HEAP32[$268>>2] = $267;
     $269 = $92;
     $270 = $__nout;
     $44 = $269;
     $45 = $270;
     $271 = $44;
     $272 = $45;
     $273 = (($271) + 24|0);
     $274 = HEAP32[$273>>2]|0;
     $275 = (($274) + ($272)|0);
     HEAP32[$273>>2] = $275;
     $276 = $92;
     $46 = $276;
     $277 = $46;
     $278 = (($277) + 20|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = $__hm;
     $281 = (($279) + ($280)|0);
     $282 = (($92) + 44|0);
     HEAP32[$282>>2] = $281;
     break L9;
    }
   } while(0);
   $283 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $284 = tempRet0;
   $88 = $283;
   $89 = $284;
   $285 = $88;
   (___cxa_begin_catch(($285|0))|0);
   $85 = -1;
   $90 = 1;
   ___cxa_end_catch();
   $397 = $85;
   STACKTOP = sp;return ($397|0);
  }
 } while(0);
 $286 = $92;
 $47 = $286;
 $287 = $47;
 $288 = (($287) + 24|0);
 $289 = HEAP32[$288>>2]|0;
 $290 = (($289) + 1|0);
 HEAP32[$91>>2] = $290;
 $291 = (($92) + 44|0);
 $54 = $91;
 $55 = $291;
 $292 = $54;
 $293 = $55;
 $tmp$i = $53;
 $tmp1$i = $56;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
 $51 = $292;
 $52 = $293;
 $294 = $51;
 $295 = $52;
 $48 = $53;
 $49 = $294;
 $50 = $295;
 $296 = $49;
 $297 = HEAP32[$296>>2]|0;
 $298 = $50;
 $299 = HEAP32[$298>>2]|0;
 $300 = ($297>>>0)<($299>>>0);
 if ($300) {
  $301 = $52;
  $303 = $301;
 } else {
  $302 = $51;
  $303 = $302;
 }
 $304 = HEAP32[$303>>2]|0;
 $305 = (($92) + 44|0);
 HEAP32[$305>>2] = $304;
 $306 = (($92) + 48|0);
 $307 = HEAP32[$306>>2]|0;
 $308 = $307 & 8;
 $309 = ($308|0)!=(0);
 if ($309) {
  $310 = (($92) + 32|0);
  $70 = $310;
  $311 = $70;
  $69 = $311;
  $312 = $69;
  $68 = $312;
  $313 = $68;
  $314 = ($313);
  $67 = $314;
  $315 = $67;
  $316 = $315;
  $66 = $316;
  $317 = $66;
  $318 = ($317);
  $319 = ($318);
  $320 = $319;
  $321 = ($320);
  $322 = $321;
  $323 = HEAP8[$322]|0;
  $324 = $323&255;
  $325 = $324 & 1;
  $326 = ($325|0)!=(0);
  if ($326) {
   $60 = $312;
   $327 = $60;
   $328 = ($327);
   $59 = $328;
   $329 = $59;
   $330 = $329;
   $58 = $330;
   $331 = $58;
   $332 = ($331);
   $333 = ($332);
   $334 = $333;
   $335 = (($334) + 8|0);
   $336 = HEAP32[$335>>2]|0;
   $349 = $336;
  } else {
   $65 = $312;
   $337 = $65;
   $338 = ($337);
   $64 = $338;
   $339 = $64;
   $340 = $339;
   $63 = $340;
   $341 = $63;
   $342 = ($341);
   $343 = ($342);
   $344 = $343;
   $345 = (($344) + 1|0);
   $346 = ($345);
   $62 = $346;
   $347 = $62;
   $61 = $347;
   $348 = $61;
   $349 = $348;
  }
  $57 = $349;
  $350 = $57;
  $__p1 = $350;
  $351 = $92;
  $352 = $__p1;
  $353 = $__p1;
  $354 = $__ninp;
  $355 = (($353) + ($354)|0);
  $356 = (($92) + 44|0);
  $357 = HEAP32[$356>>2]|0;
  $71 = $351;
  $72 = $352;
  $73 = $355;
  $74 = $357;
  $358 = $71;
  $359 = $72;
  $360 = (($358) + 8|0);
  HEAP32[$360>>2] = $359;
  $361 = $73;
  $362 = (($358) + 12|0);
  HEAP32[$362>>2] = $361;
  $363 = $74;
  $364 = (($358) + 16|0);
  HEAP32[$364>>2] = $363;
 }
 $365 = $92;
 $366 = $87;
 $367 = $366&255;
 $80 = $365;
 $81 = $367;
 $368 = $80;
 $369 = (($368) + 24|0);
 $370 = HEAP32[$369>>2]|0;
 $371 = (($368) + 28|0);
 $372 = HEAP32[$371>>2]|0;
 $373 = ($370|0)==($372|0);
 if ($373) {
  $374 = $368;
  $375 = HEAP32[$374>>2]|0;
  $376 = (($375) + 52|0);
  $377 = HEAP32[$376>>2]|0;
  $378 = $81;
  $78 = $378;
  $379 = $78;
  $380 = $379&255;
  $381 = (FUNCTION_TABLE_iii[$377 & 63]($368,$380)|0);
  $79 = $381;
 } else {
  $382 = $81;
  $383 = (($368) + 24|0);
  $384 = HEAP32[$383>>2]|0;
  $385 = (($384) + 1|0);
  HEAP32[$383>>2] = $385;
  HEAP8[$384] = $382;
  $386 = $81;
  $77 = $386;
  $387 = $77;
  $388 = $387&255;
  $79 = $388;
 }
 $389 = $79;
 $85 = $389;
 $397 = $85;
 STACKTOP = sp;return ($397|0);
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__sz = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1080|0;
 $133 = $this;
 $134 = $__s;
 $135 = $133;
 $136 = (($135) + 32|0);
 $137 = $134;
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($136,$137)|0);
 $138 = (($135) + 44|0);
 HEAP32[$138>>2] = 0;
 $139 = (($135) + 48|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = $140 & 8;
 $142 = ($141|0)!=(0);
 if ($142) {
  $143 = (($135) + 32|0);
  $132 = $143;
  $144 = $132;
  $131 = $144;
  $145 = $131;
  $130 = $145;
  $146 = $130;
  $147 = ($146);
  $129 = $147;
  $148 = $129;
  $149 = $148;
  $128 = $149;
  $150 = $128;
  $151 = ($150);
  $152 = ($151);
  $153 = $152;
  $154 = ($153);
  $155 = $154;
  $156 = HEAP8[$155]|0;
  $157 = $156&255;
  $158 = $157 & 1;
  $159 = ($158|0)!=(0);
  if ($159) {
   $122 = $145;
   $160 = $122;
   $161 = ($160);
   $121 = $161;
   $162 = $121;
   $163 = $162;
   $120 = $163;
   $164 = $120;
   $165 = ($164);
   $166 = ($165);
   $167 = $166;
   $168 = (($167) + 8|0);
   $169 = HEAP32[$168>>2]|0;
   $182 = $169;
  } else {
   $127 = $145;
   $170 = $127;
   $171 = ($170);
   $126 = $171;
   $172 = $126;
   $173 = $172;
   $125 = $173;
   $174 = $125;
   $175 = ($174);
   $176 = ($175);
   $177 = $176;
   $178 = (($177) + 1|0);
   $179 = ($178);
   $124 = $179;
   $180 = $124;
   $123 = $180;
   $181 = $123;
   $182 = $181;
  }
  $119 = $182;
  $183 = $119;
  $184 = (($135) + 32|0);
  $73 = $184;
  $185 = $73;
  $72 = $185;
  $186 = $72;
  $187 = ($186);
  $71 = $187;
  $188 = $71;
  $189 = $188;
  $70 = $189;
  $190 = $70;
  $191 = ($190);
  $192 = ($191);
  $193 = $192;
  $194 = ($193);
  $195 = $194;
  $196 = HEAP8[$195]|0;
  $197 = $196&255;
  $198 = $197 & 1;
  $199 = ($198|0)!=(0);
  if ($199) {
   $66 = $185;
   $200 = $66;
   $201 = ($200);
   $65 = $201;
   $202 = $65;
   $203 = $202;
   $64 = $203;
   $204 = $64;
   $205 = ($204);
   $206 = ($205);
   $207 = $206;
   $208 = (($207) + 4|0);
   $209 = HEAP32[$208>>2]|0;
   $223 = $209;
  } else {
   $69 = $185;
   $210 = $69;
   $211 = ($210);
   $68 = $211;
   $212 = $68;
   $213 = $212;
   $67 = $213;
   $214 = $67;
   $215 = ($214);
   $216 = ($215);
   $217 = $216;
   $218 = ($217);
   $219 = $218;
   $220 = HEAP8[$219]|0;
   $221 = $220&255;
   $222 = $221 >> 1;
   $223 = $222;
  }
  $224 = (($183) + ($223)|0);
  $225 = (($135) + 44|0);
  HEAP32[$225>>2] = $224;
  $226 = $135;
  $227 = (($135) + 32|0);
  $14 = $227;
  $228 = $14;
  $13 = $228;
  $229 = $13;
  $12 = $229;
  $230 = $12;
  $231 = ($230);
  $11 = $231;
  $232 = $11;
  $233 = $232;
  $10 = $233;
  $234 = $10;
  $235 = ($234);
  $236 = ($235);
  $237 = $236;
  $238 = ($237);
  $239 = $238;
  $240 = HEAP8[$239]|0;
  $241 = $240&255;
  $242 = $241 & 1;
  $243 = ($242|0)!=(0);
  if ($243) {
   $4 = $229;
   $244 = $4;
   $245 = ($244);
   $3 = $245;
   $246 = $3;
   $247 = $246;
   $2 = $247;
   $248 = $2;
   $249 = ($248);
   $250 = ($249);
   $251 = $250;
   $252 = (($251) + 8|0);
   $253 = HEAP32[$252>>2]|0;
   $266 = $253;
  } else {
   $9 = $229;
   $254 = $9;
   $255 = ($254);
   $8 = $255;
   $256 = $8;
   $257 = $256;
   $7 = $257;
   $258 = $7;
   $259 = ($258);
   $260 = ($259);
   $261 = $260;
   $262 = (($261) + 1|0);
   $263 = ($262);
   $6 = $263;
   $264 = $6;
   $5 = $264;
   $265 = $5;
   $266 = $265;
  }
  $1 = $266;
  $267 = $1;
  $268 = (($135) + 32|0);
  $28 = $268;
  $269 = $28;
  $27 = $269;
  $270 = $27;
  $26 = $270;
  $271 = $26;
  $272 = ($271);
  $25 = $272;
  $273 = $25;
  $274 = $273;
  $24 = $274;
  $275 = $24;
  $276 = ($275);
  $277 = ($276);
  $278 = $277;
  $279 = ($278);
  $280 = $279;
  $281 = HEAP8[$280]|0;
  $282 = $281&255;
  $283 = $282 & 1;
  $284 = ($283|0)!=(0);
  if ($284) {
   $18 = $270;
   $285 = $18;
   $286 = ($285);
   $17 = $286;
   $287 = $17;
   $288 = $287;
   $16 = $288;
   $289 = $16;
   $290 = ($289);
   $291 = ($290);
   $292 = $291;
   $293 = (($292) + 8|0);
   $294 = HEAP32[$293>>2]|0;
   $307 = $294;
  } else {
   $23 = $270;
   $295 = $23;
   $296 = ($295);
   $22 = $296;
   $297 = $22;
   $298 = $297;
   $21 = $298;
   $299 = $21;
   $300 = ($299);
   $301 = ($300);
   $302 = $301;
   $303 = (($302) + 1|0);
   $304 = ($303);
   $20 = $304;
   $305 = $20;
   $19 = $305;
   $306 = $19;
   $307 = $306;
  }
  $15 = $307;
  $308 = $15;
  $309 = (($135) + 44|0);
  $310 = HEAP32[$309>>2]|0;
  $29 = $226;
  $30 = $267;
  $31 = $308;
  $32 = $310;
  $311 = $29;
  $312 = $30;
  $313 = (($311) + 8|0);
  HEAP32[$313>>2] = $312;
  $314 = $31;
  $315 = (($311) + 12|0);
  HEAP32[$315>>2] = $314;
  $316 = $32;
  $317 = (($311) + 16|0);
  HEAP32[$317>>2] = $316;
 }
 $318 = (($135) + 48|0);
 $319 = HEAP32[$318>>2]|0;
 $320 = $319 & 16;
 $321 = ($320|0)!=(0);
 if (!($321)) {
  STACKTOP = sp;return;
 }
 $322 = (($135) + 32|0);
 $42 = $322;
 $323 = $42;
 $41 = $323;
 $324 = $41;
 $325 = ($324);
 $40 = $325;
 $326 = $40;
 $327 = $326;
 $39 = $327;
 $328 = $39;
 $329 = ($328);
 $330 = ($329);
 $331 = $330;
 $332 = ($331);
 $333 = $332;
 $334 = HEAP8[$333]|0;
 $335 = $334&255;
 $336 = $335 & 1;
 $337 = ($336|0)!=(0);
 if ($337) {
  $35 = $323;
  $338 = $35;
  $339 = ($338);
  $34 = $339;
  $340 = $34;
  $341 = $340;
  $33 = $341;
  $342 = $33;
  $343 = ($342);
  $344 = ($343);
  $345 = $344;
  $346 = (($345) + 4|0);
  $347 = HEAP32[$346>>2]|0;
  $361 = $347;
 } else {
  $38 = $323;
  $348 = $38;
  $349 = ($348);
  $37 = $349;
  $350 = $37;
  $351 = $350;
  $36 = $351;
  $352 = $36;
  $353 = ($352);
  $354 = ($353);
  $355 = $354;
  $356 = ($355);
  $357 = $356;
  $358 = HEAP8[$357]|0;
  $359 = $358&255;
  $360 = $359 >> 1;
  $361 = $360;
 }
 $__sz = $361;
 $362 = (($135) + 32|0);
 $56 = $362;
 $363 = $56;
 $55 = $363;
 $364 = $55;
 $54 = $364;
 $365 = $54;
 $366 = ($365);
 $53 = $366;
 $367 = $53;
 $368 = $367;
 $52 = $368;
 $369 = $52;
 $370 = ($369);
 $371 = ($370);
 $372 = $371;
 $373 = ($372);
 $374 = $373;
 $375 = HEAP8[$374]|0;
 $376 = $375&255;
 $377 = $376 & 1;
 $378 = ($377|0)!=(0);
 if ($378) {
  $46 = $364;
  $379 = $46;
  $380 = ($379);
  $45 = $380;
  $381 = $45;
  $382 = $381;
  $44 = $382;
  $383 = $44;
  $384 = ($383);
  $385 = ($384);
  $386 = $385;
  $387 = (($386) + 8|0);
  $388 = HEAP32[$387>>2]|0;
  $401 = $388;
 } else {
  $51 = $364;
  $389 = $51;
  $390 = ($389);
  $50 = $390;
  $391 = $50;
  $392 = $391;
  $49 = $392;
  $393 = $49;
  $394 = ($393);
  $395 = ($394);
  $396 = $395;
  $397 = (($396) + 1|0);
  $398 = ($397);
  $48 = $398;
  $399 = $48;
  $47 = $399;
  $400 = $47;
  $401 = $400;
 }
 $43 = $401;
 $402 = $43;
 $403 = $__sz;
 $404 = (($402) + ($403)|0);
 $405 = (($135) + 44|0);
 HEAP32[$405>>2] = $404;
 $406 = (($135) + 32|0);
 $407 = (($135) + 32|0);
 $63 = $407;
 $408 = $63;
 $62 = $408;
 $409 = $62;
 $410 = ($409);
 $61 = $410;
 $411 = $61;
 $412 = $411;
 $60 = $412;
 $413 = $60;
 $414 = ($413);
 $415 = ($414);
 $416 = $415;
 $417 = ($416);
 $418 = $417;
 $419 = HEAP8[$418]|0;
 $420 = $419&255;
 $421 = $420 & 1;
 $422 = ($421|0)!=(0);
 if ($422) {
  $59 = $408;
  $423 = $59;
  $424 = ($423);
  $58 = $424;
  $425 = $58;
  $426 = $425;
  $57 = $426;
  $427 = $57;
  $428 = ($427);
  $429 = ($428);
  $430 = $429;
  $431 = ($430);
  $432 = HEAP32[$431>>2]|0;
  $433 = $432 & -2;
  $434 = $433;
 } else {
  $434 = 11;
 }
 $435 = (($434) - 1)|0;
 $74 = $406;
 $75 = $435;
 $436 = $74;
 $437 = $75;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($436,$437,0);
 $438 = $135;
 $439 = (($135) + 32|0);
 $89 = $439;
 $440 = $89;
 $88 = $440;
 $441 = $88;
 $87 = $441;
 $442 = $87;
 $443 = ($442);
 $86 = $443;
 $444 = $86;
 $445 = $444;
 $85 = $445;
 $446 = $85;
 $447 = ($446);
 $448 = ($447);
 $449 = $448;
 $450 = ($449);
 $451 = $450;
 $452 = HEAP8[$451]|0;
 $453 = $452&255;
 $454 = $453 & 1;
 $455 = ($454|0)!=(0);
 if ($455) {
  $79 = $441;
  $456 = $79;
  $457 = ($456);
  $78 = $457;
  $458 = $78;
  $459 = $458;
  $77 = $459;
  $460 = $77;
  $461 = ($460);
  $462 = ($461);
  $463 = $462;
  $464 = (($463) + 8|0);
  $465 = HEAP32[$464>>2]|0;
  $478 = $465;
 } else {
  $84 = $441;
  $466 = $84;
  $467 = ($466);
  $83 = $467;
  $468 = $83;
  $469 = $468;
  $82 = $469;
  $470 = $82;
  $471 = ($470);
  $472 = ($471);
  $473 = $472;
  $474 = (($473) + 1|0);
  $475 = ($474);
  $81 = $475;
  $476 = $81;
  $80 = $476;
  $477 = $80;
  $478 = $477;
 }
 $76 = $478;
 $479 = $76;
 $480 = (($135) + 32|0);
 $103 = $480;
 $481 = $103;
 $102 = $481;
 $482 = $102;
 $101 = $482;
 $483 = $101;
 $484 = ($483);
 $100 = $484;
 $485 = $100;
 $486 = $485;
 $99 = $486;
 $487 = $99;
 $488 = ($487);
 $489 = ($488);
 $490 = $489;
 $491 = ($490);
 $492 = $491;
 $493 = HEAP8[$492]|0;
 $494 = $493&255;
 $495 = $494 & 1;
 $496 = ($495|0)!=(0);
 if ($496) {
  $93 = $482;
  $497 = $93;
  $498 = ($497);
  $92 = $498;
  $499 = $92;
  $500 = $499;
  $91 = $500;
  $501 = $91;
  $502 = ($501);
  $503 = ($502);
  $504 = $503;
  $505 = (($504) + 8|0);
  $506 = HEAP32[$505>>2]|0;
  $519 = $506;
 } else {
  $98 = $482;
  $507 = $98;
  $508 = ($507);
  $97 = $508;
  $509 = $97;
  $510 = $509;
  $96 = $510;
  $511 = $96;
  $512 = ($511);
  $513 = ($512);
  $514 = $513;
  $515 = (($514) + 1|0);
  $516 = ($515);
  $95 = $516;
  $517 = $95;
  $94 = $517;
  $518 = $94;
  $519 = $518;
 }
 $90 = $519;
 $520 = $90;
 $521 = (($135) + 32|0);
 $113 = $521;
 $522 = $113;
 $112 = $522;
 $523 = $112;
 $524 = ($523);
 $111 = $524;
 $525 = $111;
 $526 = $525;
 $110 = $526;
 $527 = $110;
 $528 = ($527);
 $529 = ($528);
 $530 = $529;
 $531 = ($530);
 $532 = $531;
 $533 = HEAP8[$532]|0;
 $534 = $533&255;
 $535 = $534 & 1;
 $536 = ($535|0)!=(0);
 if ($536) {
  $106 = $522;
  $537 = $106;
  $538 = ($537);
  $105 = $538;
  $539 = $105;
  $540 = $539;
  $104 = $540;
  $541 = $104;
  $542 = ($541);
  $543 = ($542);
  $544 = $543;
  $545 = (($544) + 4|0);
  $546 = HEAP32[$545>>2]|0;
  $560 = $546;
 } else {
  $109 = $522;
  $547 = $109;
  $548 = ($547);
  $108 = $548;
  $549 = $108;
  $550 = $549;
  $107 = $550;
  $551 = $107;
  $552 = ($551);
  $553 = ($552);
  $554 = $553;
  $555 = ($554);
  $556 = $555;
  $557 = HEAP8[$556]|0;
  $558 = $557&255;
  $559 = $558 >> 1;
  $560 = $559;
 }
 $561 = (($520) + ($560)|0);
 $114 = $438;
 $115 = $479;
 $116 = $561;
 $562 = $114;
 $563 = $115;
 $564 = (($562) + 24|0);
 HEAP32[$564>>2] = $563;
 $565 = (($562) + 20|0);
 HEAP32[$565>>2] = $563;
 $566 = $116;
 $567 = (($562) + 28|0);
 HEAP32[$567>>2] = $566;
 $568 = (($135) + 48|0);
 $569 = HEAP32[$568>>2]|0;
 $570 = $569 & 3;
 $571 = ($570|0)!=(0);
 if ($571) {
  $572 = $135;
  $573 = $__sz;
  $117 = $572;
  $118 = $573;
  $574 = $117;
  $575 = $118;
  $576 = (($574) + 24|0);
  $577 = HEAP32[$576>>2]|0;
  $578 = (($577) + ($575)|0);
  HEAP32[$576>>2] = $578;
 }
 STACKTOP = sp;return;
}
function ___cxx_global_var_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN10ParametersC1Ev((1144));
 (_atexit(((160)|0),((1144)|0),((___dso_handle)|0))|0);
 STACKTOP = sp;return;
}
function __ZN10ParametersC1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN10ParametersC2Ev($2);
 STACKTOP = sp;return;
}
function __ZN10ParametersD1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN10ParametersD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN6global3parEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ((1144)|0);
}
function __ZN10ParametersD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = (($2) + 80|0);
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEED1Ev($3);
 $4 = (($2) + 60|0);
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S6_EEEEED1Ev($4);
 $5 = (($2) + 40|0);
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_fEEEEED1Ev($5);
 $6 = (($2) + 20|0);
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEED1Ev($6);
 $7 = ($2);
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEED1Ev($7);
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S6_EEEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S6_EEEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_fEEEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_fEEEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_iEEEEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED1Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $__tmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 216|0;
 $26 = $this;
 $27 = $26;
 $28 = (($27) + 8|0);
 $25 = $28;
 $29 = $25;
 $30 = $29;
 $24 = $30;
 $31 = $24;
 $32 = ($31);
 $33 = ($32);
 $34 = HEAP32[$33>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE12__deallocateEPNS_11__hash_nodeIS8_PvEE($27,$34);
 $35 = ($27);
 $23 = $35;
 $36 = $23;
 $22 = $36;
 $37 = $22;
 $21 = $37;
 $38 = $21;
 $39 = ($38);
 $20 = $39;
 $40 = $20;
 $41 = $40;
 $19 = $41;
 $42 = $19;
 $43 = ($42);
 $44 = HEAP32[$43>>2]|0;
 $__tmp$i$i$i = $44;
 $45 = ($38);
 $4 = $45;
 $46 = $4;
 $47 = $46;
 $3 = $47;
 $48 = $3;
 $49 = ($48);
 HEAP32[$49>>2] = 0;
 $50 = $__tmp$i$i$i;
 $51 = ($50|0)!=(0|0);
 if (!($51)) {
  STACKTOP = sp;return;
 }
 $52 = ($38);
 $2 = $52;
 $53 = $2;
 $54 = $53;
 $1 = $54;
 $55 = $1;
 $56 = (($55) + 4|0);
 $57 = $__tmp$i$i$i;
 $17 = $56;
 $18 = $57;
 $58 = $17;
 $16 = $58;
 $59 = $16;
 $60 = ($59);
 $15 = $60;
 $61 = $15;
 $62 = $61;
 $14 = $62;
 $63 = $14;
 $64 = $63;
 $65 = $18;
 $7 = $58;
 $66 = $7;
 $67 = ($66);
 $6 = $67;
 $68 = $6;
 $69 = $68;
 $5 = $69;
 $70 = $5;
 $71 = ($70);
 $72 = HEAP32[$71>>2]|0;
 $11 = $64;
 $12 = $65;
 $13 = $72;
 $73 = $11;
 $74 = $12;
 $75 = $13;
 $8 = $73;
 $9 = $74;
 $10 = $75;
 $76 = $9;
 $77 = $76;
 __ZdlPv($77);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE12__deallocateEPNS_11__hash_nodeIS8_PvEE($this,$__np) {
 $this = $this|0;
 $__np = $__np|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, $__next = 0, $tmp$i = 0, $tmp1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $5 = sp + 32|0;
 $8 = sp + 56|0;
 $19 = $this;
 $20 = $__np;
 $21 = $19;
 $18 = $21;
 $22 = $18;
 $23 = (($22) + 8|0);
 $17 = $23;
 $24 = $17;
 $25 = $24;
 $16 = $25;
 $26 = $16;
 $27 = $26;
 $__na = $27;
 while(1) {
  $28 = $20;
  $29 = ($28|0)!=(0|0);
  if (!($29)) {
   break;
  }
  $30 = $20;
  $31 = $30;
  $32 = ($31);
  $33 = HEAP32[$32>>2]|0;
  $__next = $33;
  $34 = $__na;
  $35 = $20;
  $36 = (($35) + 8|0);
  $15 = $36;
  $37 = $15;
  $38 = $37;
  $39 = $38;
  $6 = $34;
  $7 = $39;
  $40 = $6;
  $41 = $7;
  $tmp$i = $5;
  $tmp1$i = $8;
  ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
  $3 = $40;
  $4 = $41;
  $42 = $4;
  $2 = $42;
  $43 = $2;
  $1 = $43;
  $44 = $1;
  $45 = $44;
  __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiED1Ev($45);
  $46 = $__na;
  $47 = $20;
  $12 = $46;
  $13 = $47;
  $14 = 1;
  $48 = $12;
  $49 = $13;
  $50 = $14;
  $9 = $48;
  $10 = $49;
  $11 = $50;
  $51 = $10;
  $52 = $51;
  __ZdlPv($52);
  $53 = $__next;
  $20 = $53;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_fEEEEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED1Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $__tmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 216|0;
 $26 = $this;
 $27 = $26;
 $28 = (($27) + 8|0);
 $25 = $28;
 $29 = $25;
 $30 = $29;
 $24 = $30;
 $31 = $24;
 $32 = ($31);
 $33 = ($32);
 $34 = HEAP32[$33>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE12__deallocateEPNS_11__hash_nodeIS8_PvEE($27,$34);
 $35 = ($27);
 $23 = $35;
 $36 = $23;
 $22 = $36;
 $37 = $22;
 $21 = $37;
 $38 = $21;
 $39 = ($38);
 $20 = $39;
 $40 = $20;
 $41 = $40;
 $19 = $41;
 $42 = $19;
 $43 = ($42);
 $44 = HEAP32[$43>>2]|0;
 $__tmp$i$i$i = $44;
 $45 = ($38);
 $4 = $45;
 $46 = $4;
 $47 = $46;
 $3 = $47;
 $48 = $3;
 $49 = ($48);
 HEAP32[$49>>2] = 0;
 $50 = $__tmp$i$i$i;
 $51 = ($50|0)!=(0|0);
 if (!($51)) {
  STACKTOP = sp;return;
 }
 $52 = ($38);
 $2 = $52;
 $53 = $2;
 $54 = $53;
 $1 = $54;
 $55 = $1;
 $56 = (($55) + 4|0);
 $57 = $__tmp$i$i$i;
 $17 = $56;
 $18 = $57;
 $58 = $17;
 $16 = $58;
 $59 = $16;
 $60 = ($59);
 $15 = $60;
 $61 = $15;
 $62 = $61;
 $14 = $62;
 $63 = $14;
 $64 = $63;
 $65 = $18;
 $7 = $58;
 $66 = $7;
 $67 = ($66);
 $6 = $67;
 $68 = $6;
 $69 = $68;
 $5 = $69;
 $70 = $5;
 $71 = ($70);
 $72 = HEAP32[$71>>2]|0;
 $11 = $64;
 $12 = $65;
 $13 = $72;
 $73 = $11;
 $74 = $12;
 $75 = $13;
 $8 = $73;
 $9 = $74;
 $10 = $75;
 $76 = $9;
 $77 = $76;
 __ZdlPv($77);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE12__deallocateEPNS_11__hash_nodeIS8_PvEE($this,$__np) {
 $this = $this|0;
 $__np = $__np|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, $__next = 0, $tmp$i = 0, $tmp1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $5 = sp + 32|0;
 $8 = sp + 56|0;
 $19 = $this;
 $20 = $__np;
 $21 = $19;
 $18 = $21;
 $22 = $18;
 $23 = (($22) + 8|0);
 $17 = $23;
 $24 = $17;
 $25 = $24;
 $16 = $25;
 $26 = $16;
 $27 = $26;
 $__na = $27;
 while(1) {
  $28 = $20;
  $29 = ($28|0)!=(0|0);
  if (!($29)) {
   break;
  }
  $30 = $20;
  $31 = $30;
  $32 = ($31);
  $33 = HEAP32[$32>>2]|0;
  $__next = $33;
  $34 = $__na;
  $35 = $20;
  $36 = (($35) + 8|0);
  $15 = $36;
  $37 = $15;
  $38 = $37;
  $39 = $38;
  $6 = $34;
  $7 = $39;
  $40 = $6;
  $41 = $7;
  $tmp$i = $5;
  $tmp1$i = $8;
  ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
  $3 = $40;
  $4 = $41;
  $42 = $4;
  $2 = $42;
  $43 = $2;
  $1 = $43;
  $44 = $1;
  $45 = $44;
  __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfED1Ev($45);
  $46 = $__na;
  $47 = $20;
  $12 = $46;
  $13 = $47;
  $14 = 1;
  $48 = $12;
  $49 = $13;
  $50 = $14;
  $9 = $48;
  $10 = $49;
  $11 = $50;
  $51 = $10;
  $52 = $51;
  __ZdlPv($52);
  $53 = $__next;
  $20 = $53;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEfED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_NS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S6_EEEEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED1Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $__tmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 216|0;
 $26 = $this;
 $27 = $26;
 $28 = (($27) + 8|0);
 $25 = $28;
 $29 = $25;
 $30 = $29;
 $24 = $30;
 $31 = $24;
 $32 = ($31);
 $33 = ($32);
 $34 = HEAP32[$33>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE12__deallocateEPNS_11__hash_nodeIS8_PvEE($27,$34);
 $35 = ($27);
 $23 = $35;
 $36 = $23;
 $22 = $36;
 $37 = $22;
 $21 = $37;
 $38 = $21;
 $39 = ($38);
 $20 = $39;
 $40 = $20;
 $41 = $40;
 $19 = $41;
 $42 = $19;
 $43 = ($42);
 $44 = HEAP32[$43>>2]|0;
 $__tmp$i$i$i = $44;
 $45 = ($38);
 $4 = $45;
 $46 = $4;
 $47 = $46;
 $3 = $47;
 $48 = $3;
 $49 = ($48);
 HEAP32[$49>>2] = 0;
 $50 = $__tmp$i$i$i;
 $51 = ($50|0)!=(0|0);
 if (!($51)) {
  STACKTOP = sp;return;
 }
 $52 = ($38);
 $2 = $52;
 $53 = $2;
 $54 = $53;
 $1 = $54;
 $55 = $1;
 $56 = (($55) + 4|0);
 $57 = $__tmp$i$i$i;
 $17 = $56;
 $18 = $57;
 $58 = $17;
 $16 = $58;
 $59 = $16;
 $60 = ($59);
 $15 = $60;
 $61 = $15;
 $62 = $61;
 $14 = $62;
 $63 = $14;
 $64 = $63;
 $65 = $18;
 $7 = $58;
 $66 = $7;
 $67 = ($66);
 $6 = $67;
 $68 = $6;
 $69 = $68;
 $5 = $69;
 $70 = $5;
 $71 = ($70);
 $72 = HEAP32[$71>>2]|0;
 $11 = $64;
 $12 = $65;
 $13 = $72;
 $73 = $11;
 $74 = $12;
 $75 = $13;
 $8 = $73;
 $9 = $74;
 $10 = $75;
 $76 = $9;
 $77 = $76;
 __ZdlPv($77);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE12__deallocateEPNS_11__hash_nodeIS8_PvEE($this,$__np) {
 $this = $this|0;
 $__np = $__np|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, $__next = 0, $tmp$i = 0, $tmp1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $5 = sp + 32|0;
 $8 = sp + 56|0;
 $19 = $this;
 $20 = $__np;
 $21 = $19;
 $18 = $21;
 $22 = $18;
 $23 = (($22) + 8|0);
 $17 = $23;
 $24 = $17;
 $25 = $24;
 $16 = $25;
 $26 = $16;
 $27 = $26;
 $__na = $27;
 while(1) {
  $28 = $20;
  $29 = ($28|0)!=(0|0);
  if (!($29)) {
   break;
  }
  $30 = $20;
  $31 = $30;
  $32 = ($31);
  $33 = HEAP32[$32>>2]|0;
  $__next = $33;
  $34 = $__na;
  $35 = $20;
  $36 = (($35) + 8|0);
  $15 = $36;
  $37 = $15;
  $38 = $37;
  $39 = $38;
  $6 = $34;
  $7 = $39;
  $40 = $6;
  $41 = $7;
  $tmp$i = $5;
  $tmp1$i = $8;
  ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
  $3 = $40;
  $4 = $41;
  $42 = $4;
  $2 = $42;
  $43 = $2;
  $1 = $43;
  $44 = $1;
  $45 = $44;
  __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED1Ev($45);
  $46 = $__na;
  $47 = $20;
  $12 = $46;
  $13 = $47;
  $14 = 1;
  $48 = $12;
  $49 = $13;
  $50 = $14;
  $9 = $48;
  $10 = $49;
  $11 = $50;
  $51 = $10;
  $52 = $51;
  __ZdlPv($52);
  $53 = $__next;
  $20 = $53;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES6_ED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = (($2) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 $4 = ($2);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
 STACKTOP = sp;return;
}
function __ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED1Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $__tmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 216|0;
 $26 = $this;
 $27 = $26;
 $28 = (($27) + 8|0);
 $25 = $28;
 $29 = $25;
 $30 = $29;
 $24 = $30;
 $31 = $24;
 $32 = ($31);
 $33 = ($32);
 $34 = HEAP32[$33>>2]|0;
 __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE12__deallocateEPNS_11__hash_nodeIS8_PvEE($27,$34);
 $35 = ($27);
 $23 = $35;
 $36 = $23;
 $22 = $36;
 $37 = $22;
 $21 = $37;
 $38 = $21;
 $39 = ($38);
 $20 = $39;
 $40 = $20;
 $41 = $40;
 $19 = $41;
 $42 = $19;
 $43 = ($42);
 $44 = HEAP32[$43>>2]|0;
 $__tmp$i$i$i = $44;
 $45 = ($38);
 $4 = $45;
 $46 = $4;
 $47 = $46;
 $3 = $47;
 $48 = $3;
 $49 = ($48);
 HEAP32[$49>>2] = 0;
 $50 = $__tmp$i$i$i;
 $51 = ($50|0)!=(0|0);
 if (!($51)) {
  STACKTOP = sp;return;
 }
 $52 = ($38);
 $2 = $52;
 $53 = $2;
 $54 = $53;
 $1 = $54;
 $55 = $1;
 $56 = (($55) + 4|0);
 $57 = $__tmp$i$i$i;
 $17 = $56;
 $18 = $57;
 $58 = $17;
 $16 = $58;
 $59 = $16;
 $60 = ($59);
 $15 = $60;
 $61 = $15;
 $62 = $61;
 $14 = $62;
 $63 = $14;
 $64 = $63;
 $65 = $18;
 $7 = $58;
 $66 = $7;
 $67 = ($66);
 $6 = $67;
 $68 = $6;
 $69 = $68;
 $5 = $69;
 $70 = $5;
 $71 = ($70);
 $72 = HEAP32[$71>>2]|0;
 $11 = $64;
 $12 = $65;
 $13 = $72;
 $73 = $11;
 $74 = $12;
 $75 = $13;
 $8 = $73;
 $9 = $74;
 $10 = $75;
 $76 = $9;
 $77 = $76;
 __ZdlPv($77);
 STACKTOP = sp;return;
}
function __ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE12__deallocateEPNS_11__hash_nodeIS8_PvEE($this,$__np) {
 $this = $this|0;
 $__np = $__np|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, $__next = 0, $tmp$i = 0, $tmp1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $5 = sp + 32|0;
 $8 = sp + 56|0;
 $19 = $this;
 $20 = $__np;
 $21 = $19;
 $18 = $21;
 $22 = $18;
 $23 = (($22) + 8|0);
 $17 = $23;
 $24 = $17;
 $25 = $24;
 $16 = $25;
 $26 = $16;
 $27 = $26;
 $__na = $27;
 while(1) {
  $28 = $20;
  $29 = ($28|0)!=(0|0);
  if (!($29)) {
   break;
  }
  $30 = $20;
  $31 = $30;
  $32 = ($31);
  $33 = HEAP32[$32>>2]|0;
  $__next = $33;
  $34 = $__na;
  $35 = $20;
  $36 = (($35) + 8|0);
  $15 = $36;
  $37 = $15;
  $38 = $37;
  $39 = $38;
  $6 = $34;
  $7 = $39;
  $40 = $6;
  $41 = $7;
  $tmp$i = $5;
  $tmp1$i = $8;
  ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
  $3 = $40;
  $4 = $41;
  $42 = $4;
  $2 = $42;
  $43 = $2;
  $1 = $43;
  $44 = $1;
  $45 = $44;
  __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjED1Ev($45);
  $46 = $__na;
  $47 = $20;
  $12 = $46;
  $13 = $47;
  $14 = 1;
  $48 = $12;
  $49 = $13;
  $50 = $14;
  $9 = $48;
  $10 = $49;
  $11 = $50;
  $51 = $10;
  $52 = $51;
  __ZdlPv($52);
  $53 = $__next;
  $20 = $53;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__14pairIKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
 STACKTOP = sp;return;
}
function __ZN10ParametersC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0.0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0.0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0.0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0.0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0.0, $446 = 0, $447 = 0, $448 = 0, $449 = 0.0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0.0, $515 = 0, $516 = 0, $517 = 0, $518 = 0.0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0.0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0.0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0.0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1968|0;
 $4 = sp + 24|0;
 $7 = sp + 48|0;
 $13 = sp + 96|0;
 $16 = sp + 120|0;
 $28 = sp + 216|0;
 $31 = sp + 240|0;
 $38 = sp + 296|0;
 $41 = sp + 320|0;
 $53 = sp + 416|0;
 $56 = sp + 440|0;
 $62 = sp + 488|0;
 $65 = sp + 512|0;
 $77 = sp + 608|0;
 $80 = sp + 632|0;
 $87 = sp + 688|0;
 $90 = sp + 712|0;
 $102 = sp + 808|0;
 $105 = sp + 832|0;
 $111 = sp + 880|0;
 $114 = sp + 904|0;
 $126 = sp + 1000|0;
 $129 = sp + 1024|0;
 $136 = sp + 1080|0;
 $139 = sp + 1104|0;
 $151 = sp + 1200|0;
 $154 = sp + 1224|0;
 $160 = sp + 1272|0;
 $163 = sp + 1296|0;
 $175 = sp + 1392|0;
 $178 = sp + 1416|0;
 $185 = sp + 1472|0;
 $188 = sp + 1496|0;
 $200 = sp + 1592|0;
 $203 = sp + 1616|0;
 $209 = sp + 1664|0;
 $212 = sp + 1688|0;
 $224 = sp + 1784|0;
 $227 = sp + 1808|0;
 $234 = sp + 1864|0;
 $237 = sp + 1888|0;
 $246 = $this;
 $247 = $246;
 $248 = ($247);
 $245 = $248;
 $249 = $245;
 $244 = $249;
 $250 = $244;
 $251 = ($250);
 $243 = $251;
 $252 = $243;
 $242 = $252;
 $253 = $242;
 $254 = ($253);
 $241 = $254;
 $255 = $241;
 $240 = $255;
 $256 = $240;
 $257 = ($256);
 $238 = $257;
 $239 = 0;
 $258 = $238;
 $259 = $239;
 $236 = $258;
 HEAP32[$237>>2] = $259;
 $260 = $236;
 $261 = $260;
 $235 = $237;
 $262 = $235;
 $263 = HEAP32[$262>>2]|0;
 $233 = $261;
 HEAP32[$234>>2] = $263;
 $264 = $233;
 $265 = ($264);
 $232 = $234;
 $266 = $232;
 $267 = HEAP32[$266>>2]|0;
 HEAP32[$265>>2] = $267;
 $268 = (($264) + 4|0);
 $231 = $268;
 $269 = $231;
 $230 = $269;
 $270 = $230;
 $271 = ($270);
 $228 = $271;
 $229 = 0;
 $272 = $228;
 $273 = $229;
 $226 = $272;
 HEAP32[$227>>2] = $273;
 $274 = $226;
 $275 = $274;
 $225 = $227;
 $276 = $225;
 $277 = HEAP32[$276>>2]|0;
 $223 = $275;
 HEAP32[$224>>2] = $277;
 $278 = $223;
 $279 = $278;
 $222 = $279;
 $280 = ($278);
 $221 = $224;
 $281 = $221;
 $282 = HEAP32[$281>>2]|0;
 HEAP32[$280>>2] = $282;
 $283 = (($253) + 8|0);
 $220 = $283;
 $284 = $220;
 $219 = $284;
 $285 = $219;
 $286 = $285;
 $218 = $286;
 $287 = $218;
 $288 = $287;
 $217 = $288;
 $289 = ($287);
 $216 = $289;
 $290 = $216;
 $215 = $290;
 $291 = $215;
 $292 = ($291);
 HEAP32[$292>>2] = 0;
 $293 = (($253) + 12|0);
 $204 = $293;
 $205 = 0;
 $294 = $204;
 $295 = $205;
 $202 = $294;
 HEAP32[$203>>2] = $295;
 $296 = $202;
 $297 = $296;
 $201 = $203;
 $298 = $201;
 $299 = HEAP32[$298>>2]|0;
 $199 = $297;
 HEAP32[$200>>2] = $299;
 $300 = $199;
 $301 = $300;
 $198 = $301;
 $302 = ($300);
 $197 = $200;
 $303 = $197;
 $304 = HEAP32[$303>>2]|0;
 HEAP32[$302>>2] = $304;
 $305 = (($253) + 16|0);
 $213 = $305;
 $214 = 1.0;
 $306 = $213;
 $307 = $214;
 $211 = $306;
 HEAPF32[$212>>2] = $307;
 $308 = $211;
 $309 = $308;
 $210 = $212;
 $310 = $210;
 $311 = +HEAPF32[$310>>2];
 $208 = $309;
 HEAPF32[$209>>2] = $311;
 $312 = $208;
 $313 = $312;
 $207 = $313;
 $314 = ($312);
 $206 = $209;
 $315 = $206;
 $316 = +HEAPF32[$315>>2];
 HEAPF32[$314>>2] = $316;
 $317 = (($247) + 20|0);
 $49 = $317;
 $318 = $49;
 $48 = $318;
 $319 = $48;
 $320 = ($319);
 $47 = $320;
 $321 = $47;
 $46 = $321;
 $322 = $46;
 $323 = ($322);
 $45 = $323;
 $324 = $45;
 $44 = $324;
 $325 = $44;
 $326 = ($325);
 $42 = $326;
 $43 = 0;
 $327 = $42;
 $328 = $43;
 $40 = $327;
 HEAP32[$41>>2] = $328;
 $329 = $40;
 $330 = $329;
 $39 = $41;
 $331 = $39;
 $332 = HEAP32[$331>>2]|0;
 $37 = $330;
 HEAP32[$38>>2] = $332;
 $333 = $37;
 $334 = ($333);
 $36 = $38;
 $335 = $36;
 $336 = HEAP32[$335>>2]|0;
 HEAP32[$334>>2] = $336;
 $337 = (($333) + 4|0);
 $35 = $337;
 $338 = $35;
 $34 = $338;
 $339 = $34;
 $340 = ($339);
 $32 = $340;
 $33 = 0;
 $341 = $32;
 $342 = $33;
 $30 = $341;
 HEAP32[$31>>2] = $342;
 $343 = $30;
 $344 = $343;
 $29 = $31;
 $345 = $29;
 $346 = HEAP32[$345>>2]|0;
 $27 = $344;
 HEAP32[$28>>2] = $346;
 $347 = $27;
 $348 = $347;
 $26 = $348;
 $349 = ($347);
 $25 = $28;
 $350 = $25;
 $351 = HEAP32[$350>>2]|0;
 HEAP32[$349>>2] = $351;
 $352 = (($322) + 8|0);
 $24 = $352;
 $353 = $24;
 $23 = $353;
 $354 = $23;
 $355 = $354;
 $22 = $355;
 $356 = $22;
 $357 = $356;
 $21 = $357;
 $358 = ($356);
 $20 = $358;
 $359 = $20;
 $19 = $359;
 $360 = $19;
 $361 = ($360);
 HEAP32[$361>>2] = 0;
 $362 = (($322) + 12|0);
 $8 = $362;
 $9 = 0;
 $363 = $8;
 $364 = $9;
 $6 = $363;
 HEAP32[$7>>2] = $364;
 $365 = $6;
 $366 = $365;
 $5 = $7;
 $367 = $5;
 $368 = HEAP32[$367>>2]|0;
 $3 = $366;
 HEAP32[$4>>2] = $368;
 $369 = $3;
 $370 = $369;
 $2 = $370;
 $371 = ($369);
 $1 = $4;
 $372 = $1;
 $373 = HEAP32[$372>>2]|0;
 HEAP32[$371>>2] = $373;
 $374 = (($322) + 16|0);
 $17 = $374;
 $18 = 1.0;
 $375 = $17;
 $376 = $18;
 $15 = $375;
 HEAPF32[$16>>2] = $376;
 $377 = $15;
 $378 = $377;
 $14 = $16;
 $379 = $14;
 $380 = +HEAPF32[$379>>2];
 $12 = $378;
 HEAPF32[$13>>2] = $380;
 $381 = $12;
 $382 = $381;
 $11 = $382;
 $383 = ($381);
 $10 = $13;
 $384 = $10;
 $385 = +HEAPF32[$384>>2];
 HEAPF32[$383>>2] = $385;
 $386 = (($247) + 40|0);
 $98 = $386;
 $387 = $98;
 $97 = $387;
 $388 = $97;
 $389 = ($388);
 $96 = $389;
 $390 = $96;
 $95 = $390;
 $391 = $95;
 $392 = ($391);
 $94 = $392;
 $393 = $94;
 $93 = $393;
 $394 = $93;
 $395 = ($394);
 $91 = $395;
 $92 = 0;
 $396 = $91;
 $397 = $92;
 $89 = $396;
 HEAP32[$90>>2] = $397;
 $398 = $89;
 $399 = $398;
 $88 = $90;
 $400 = $88;
 $401 = HEAP32[$400>>2]|0;
 $86 = $399;
 HEAP32[$87>>2] = $401;
 $402 = $86;
 $403 = ($402);
 $85 = $87;
 $404 = $85;
 $405 = HEAP32[$404>>2]|0;
 HEAP32[$403>>2] = $405;
 $406 = (($402) + 4|0);
 $84 = $406;
 $407 = $84;
 $83 = $407;
 $408 = $83;
 $409 = ($408);
 $81 = $409;
 $82 = 0;
 $410 = $81;
 $411 = $82;
 $79 = $410;
 HEAP32[$80>>2] = $411;
 $412 = $79;
 $413 = $412;
 $78 = $80;
 $414 = $78;
 $415 = HEAP32[$414>>2]|0;
 $76 = $413;
 HEAP32[$77>>2] = $415;
 $416 = $76;
 $417 = $416;
 $75 = $417;
 $418 = ($416);
 $74 = $77;
 $419 = $74;
 $420 = HEAP32[$419>>2]|0;
 HEAP32[$418>>2] = $420;
 $421 = (($391) + 8|0);
 $73 = $421;
 $422 = $73;
 $72 = $422;
 $423 = $72;
 $424 = $423;
 $71 = $424;
 $425 = $71;
 $426 = $425;
 $70 = $426;
 $427 = ($425);
 $69 = $427;
 $428 = $69;
 $68 = $428;
 $429 = $68;
 $430 = ($429);
 HEAP32[$430>>2] = 0;
 $431 = (($391) + 12|0);
 $57 = $431;
 $58 = 0;
 $432 = $57;
 $433 = $58;
 $55 = $432;
 HEAP32[$56>>2] = $433;
 $434 = $55;
 $435 = $434;
 $54 = $56;
 $436 = $54;
 $437 = HEAP32[$436>>2]|0;
 $52 = $435;
 HEAP32[$53>>2] = $437;
 $438 = $52;
 $439 = $438;
 $51 = $439;
 $440 = ($438);
 $50 = $53;
 $441 = $50;
 $442 = HEAP32[$441>>2]|0;
 HEAP32[$440>>2] = $442;
 $443 = (($391) + 16|0);
 $66 = $443;
 $67 = 1.0;
 $444 = $66;
 $445 = $67;
 $64 = $444;
 HEAPF32[$65>>2] = $445;
 $446 = $64;
 $447 = $446;
 $63 = $65;
 $448 = $63;
 $449 = +HEAPF32[$448>>2];
 $61 = $447;
 HEAPF32[$62>>2] = $449;
 $450 = $61;
 $451 = $450;
 $60 = $451;
 $452 = ($450);
 $59 = $62;
 $453 = $59;
 $454 = +HEAPF32[$453>>2];
 HEAPF32[$452>>2] = $454;
 $455 = (($247) + 60|0);
 $147 = $455;
 $456 = $147;
 $146 = $456;
 $457 = $146;
 $458 = ($457);
 $145 = $458;
 $459 = $145;
 $144 = $459;
 $460 = $144;
 $461 = ($460);
 $143 = $461;
 $462 = $143;
 $142 = $462;
 $463 = $142;
 $464 = ($463);
 $140 = $464;
 $141 = 0;
 $465 = $140;
 $466 = $141;
 $138 = $465;
 HEAP32[$139>>2] = $466;
 $467 = $138;
 $468 = $467;
 $137 = $139;
 $469 = $137;
 $470 = HEAP32[$469>>2]|0;
 $135 = $468;
 HEAP32[$136>>2] = $470;
 $471 = $135;
 $472 = ($471);
 $134 = $136;
 $473 = $134;
 $474 = HEAP32[$473>>2]|0;
 HEAP32[$472>>2] = $474;
 $475 = (($471) + 4|0);
 $133 = $475;
 $476 = $133;
 $132 = $476;
 $477 = $132;
 $478 = ($477);
 $130 = $478;
 $131 = 0;
 $479 = $130;
 $480 = $131;
 $128 = $479;
 HEAP32[$129>>2] = $480;
 $481 = $128;
 $482 = $481;
 $127 = $129;
 $483 = $127;
 $484 = HEAP32[$483>>2]|0;
 $125 = $482;
 HEAP32[$126>>2] = $484;
 $485 = $125;
 $486 = $485;
 $124 = $486;
 $487 = ($485);
 $123 = $126;
 $488 = $123;
 $489 = HEAP32[$488>>2]|0;
 HEAP32[$487>>2] = $489;
 $490 = (($460) + 8|0);
 $122 = $490;
 $491 = $122;
 $121 = $491;
 $492 = $121;
 $493 = $492;
 $120 = $493;
 $494 = $120;
 $495 = $494;
 $119 = $495;
 $496 = ($494);
 $118 = $496;
 $497 = $118;
 $117 = $497;
 $498 = $117;
 $499 = ($498);
 HEAP32[$499>>2] = 0;
 $500 = (($460) + 12|0);
 $106 = $500;
 $107 = 0;
 $501 = $106;
 $502 = $107;
 $104 = $501;
 HEAP32[$105>>2] = $502;
 $503 = $104;
 $504 = $503;
 $103 = $105;
 $505 = $103;
 $506 = HEAP32[$505>>2]|0;
 $101 = $504;
 HEAP32[$102>>2] = $506;
 $507 = $101;
 $508 = $507;
 $100 = $508;
 $509 = ($507);
 $99 = $102;
 $510 = $99;
 $511 = HEAP32[$510>>2]|0;
 HEAP32[$509>>2] = $511;
 $512 = (($460) + 16|0);
 $115 = $512;
 $116 = 1.0;
 $513 = $115;
 $514 = $116;
 $113 = $513;
 HEAPF32[$114>>2] = $514;
 $515 = $113;
 $516 = $515;
 $112 = $114;
 $517 = $112;
 $518 = +HEAPF32[$517>>2];
 $110 = $516;
 HEAPF32[$111>>2] = $518;
 $519 = $110;
 $520 = $519;
 $109 = $520;
 $521 = ($519);
 $108 = $111;
 $522 = $108;
 $523 = +HEAPF32[$522>>2];
 HEAPF32[$521>>2] = $523;
 $524 = (($247) + 80|0);
 $196 = $524;
 $525 = $196;
 $195 = $525;
 $526 = $195;
 $527 = ($526);
 $194 = $527;
 $528 = $194;
 $193 = $528;
 $529 = $193;
 $530 = ($529);
 $192 = $530;
 $531 = $192;
 $191 = $531;
 $532 = $191;
 $533 = ($532);
 $189 = $533;
 $190 = 0;
 $534 = $189;
 $535 = $190;
 $187 = $534;
 HEAP32[$188>>2] = $535;
 $536 = $187;
 $537 = $536;
 $186 = $188;
 $538 = $186;
 $539 = HEAP32[$538>>2]|0;
 $184 = $537;
 HEAP32[$185>>2] = $539;
 $540 = $184;
 $541 = ($540);
 $183 = $185;
 $542 = $183;
 $543 = HEAP32[$542>>2]|0;
 HEAP32[$541>>2] = $543;
 $544 = (($540) + 4|0);
 $182 = $544;
 $545 = $182;
 $181 = $545;
 $546 = $181;
 $547 = ($546);
 $179 = $547;
 $180 = 0;
 $548 = $179;
 $549 = $180;
 $177 = $548;
 HEAP32[$178>>2] = $549;
 $550 = $177;
 $551 = $550;
 $176 = $178;
 $552 = $176;
 $553 = HEAP32[$552>>2]|0;
 $174 = $551;
 HEAP32[$175>>2] = $553;
 $554 = $174;
 $555 = $554;
 $173 = $555;
 $556 = ($554);
 $172 = $175;
 $557 = $172;
 $558 = HEAP32[$557>>2]|0;
 HEAP32[$556>>2] = $558;
 $559 = (($529) + 8|0);
 $171 = $559;
 $560 = $171;
 $170 = $560;
 $561 = $170;
 $562 = $561;
 $169 = $562;
 $563 = $169;
 $564 = $563;
 $168 = $564;
 $565 = ($563);
 $167 = $565;
 $566 = $167;
 $166 = $566;
 $567 = $166;
 $568 = ($567);
 HEAP32[$568>>2] = 0;
 $569 = (($529) + 12|0);
 $155 = $569;
 $156 = 0;
 $570 = $155;
 $571 = $156;
 $153 = $570;
 HEAP32[$154>>2] = $571;
 $572 = $153;
 $573 = $572;
 $152 = $154;
 $574 = $152;
 $575 = HEAP32[$574>>2]|0;
 $150 = $573;
 HEAP32[$151>>2] = $575;
 $576 = $150;
 $577 = $576;
 $149 = $577;
 $578 = ($576);
 $148 = $151;
 $579 = $148;
 $580 = HEAP32[$579>>2]|0;
 HEAP32[$578>>2] = $580;
 $581 = (($529) + 16|0);
 $164 = $581;
 $165 = 1.0;
 $582 = $164;
 $583 = $165;
 $162 = $582;
 HEAPF32[$163>>2] = $583;
 $584 = $162;
 $585 = $584;
 $161 = $163;
 $586 = $161;
 $587 = +HEAPF32[$586>>2];
 $159 = $585;
 HEAPF32[$160>>2] = $587;
 $588 = $159;
 $589 = $588;
 $158 = $589;
 $590 = ($588);
 $157 = $160;
 $591 = $157;
 $592 = +HEAPF32[$591>>2];
 HEAPF32[$590>>2] = $592;
 STACKTOP = sp;return;
}
function __GLOBAL__I_a() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 STACKTOP = sp;return;
}
function __ZN7gltools13compileShaderERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj($filename,$type) {
 $filename = $filename|0;
 $type = $type|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0;
 var $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0;
 var $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0;
 var $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0;
 var $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0;
 var $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $__a$i$i$i$i$i$i = 0, $__a$i$i$i1$i$i$i = 0, $__i$i$i$i$i$i$i = 0, $__i$i$i$i2$i$i$i = 0, $charSrc = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $file = 0, $logSize = 0;
 var $res = 0, $shader = 0, $shaderLog = 0, $ss = 0, $str = 0, $str1 = 0, $strSrc = 0, $written = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2184|0;
 $103 = sp + 848|0;
 $file = sp + 1720|0;
 $str = sp + 1928|0;
 $ss = sp + 1952|0;
 $strSrc = sp + 2096|0;
 $charSrc = sp + 2112|0;
 $res = sp + 2120|0;
 $logSize = sp + 2128|0;
 $shaderLog = sp + 2136|0;
 $written = sp + 2152|0;
 $str1 = sp + 2160|0;
 $209 = $filename;
 $210 = $type;
 $214 = $209;
 $208 = $214;
 $215 = $208;
 $207 = $215;
 $216 = $207;
 $206 = $216;
 $217 = $206;
 $205 = $217;
 $218 = $205;
 $219 = ($218);
 $204 = $219;
 $220 = $204;
 $221 = $220;
 $203 = $221;
 $222 = $203;
 $223 = ($222);
 $224 = ($223);
 $225 = $224;
 $226 = ($225);
 $227 = $226;
 $228 = HEAP8[$227]|0;
 $229 = $228&255;
 $230 = $229 & 1;
 $231 = ($230|0)!=(0);
 if ($231) {
  $197 = $217;
  $232 = $197;
  $233 = ($232);
  $196 = $233;
  $234 = $196;
  $235 = $234;
  $195 = $235;
  $236 = $195;
  $237 = ($236);
  $238 = ($237);
  $239 = $238;
  $240 = (($239) + 8|0);
  $241 = HEAP32[$240>>2]|0;
  $254 = $241;
 } else {
  $202 = $217;
  $242 = $202;
  $243 = ($242);
  $201 = $243;
  $244 = $201;
  $245 = $244;
  $200 = $245;
  $246 = $200;
  $247 = ($246);
  $248 = ($247);
  $249 = $248;
  $250 = (($249) + 1|0);
  $251 = ($250);
  $199 = $251;
  $252 = $199;
  $198 = $252;
  $253 = $198;
  $254 = $253;
 }
 $194 = $254;
 $255 = $194;
 $189 = $file;
 $190 = $255;
 $191 = 8;
 $256 = $189;
 $257 = $256;
 $258 = (($257) + 108|0);
 $259 = $258;
 $188 = $259;
 $260 = $188;
 $261 = $260;
 $187 = $261;
 $262 = $187;
 $263 = $262;
 $264 = ((6704) + 8|0);
 HEAP32[$263>>2] = $264;
 $265 = $260;
 $266 = ((6304) + 8|0);
 HEAP32[$265>>2] = $266;
 $267 = $256;
 $268 = ((1384) + 12|0);
 HEAP32[$267>>2] = $268;
 $269 = $256;
 $270 = (($269) + 108|0);
 $271 = $270;
 $272 = ((1384) + 32|0);
 HEAP32[$271>>2] = $272;
 $273 = $256;
 $274 = (($256) + 8|0);
 $275 = $274;
 $184 = $273;
 $276 = ((1424) + 4|0);
 $185 = $276;
 $186 = $275;
 $277 = $184;
 $278 = $185;
 $279 = HEAP32[$278>>2]|0;
 $280 = $277;
 HEAP32[$280>>2] = $279;
 $281 = (($278) + 4|0);
 $282 = HEAP32[$281>>2]|0;
 $283 = $277;
 $284 = HEAP32[$283>>2]|0;
 $285 = (($284) + -12|0);
 $286 = $285;
 $287 = HEAP32[$286>>2]|0;
 $288 = $277;
 $289 = (($288) + ($287)|0);
 $290 = $289;
 HEAP32[$290>>2] = $282;
 $291 = (($277) + 4|0);
 HEAP32[$291>>2] = 0;
 $292 = $277;
 $293 = HEAP32[$292>>2]|0;
 $294 = (($293) + -12|0);
 $295 = $294;
 $296 = HEAP32[$295>>2]|0;
 $297 = $277;
 $298 = (($297) + ($296)|0);
 $299 = $298;
 $300 = $186;
 $182 = $299;
 $183 = $300;
 $301 = $182;
 $302 = $301;
 $303 = $183;
 $304 = $303;
 __THREW__ = 0;
 invoke_vii(44,($302|0),($304|0));
 $305 = __THREW__; __THREW__ = 0;
 $306 = $305&1;
 if ($306) {
  $344 = ___cxa_find_matching_catch(-1,-1)|0;
  $345 = tempRet0;
  $192 = $344;
  $193 = $345;
  $350 = $256;
  $351 = (($350) + 108|0);
  $352 = $351;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($352);
  $353 = $192;
  $354 = $193;
  ___resumeException($353|0);
  // unreachable;
 }
 $307 = (($301) + 72|0);
 HEAP32[$307>>2] = 0;
 $308 = (($301) + 76|0);
 HEAP32[$308>>2] = -1;
 $309 = $256;
 $310 = ((1384) + 12|0);
 HEAP32[$309>>2] = $310;
 $311 = $256;
 $312 = (($311) + 108|0);
 $313 = $312;
 $314 = ((1384) + 32|0);
 HEAP32[$313>>2] = $314;
 $315 = (($256) + 8|0);
 __THREW__ = 0;
 invoke_vi(161,($315|0));
 $316 = __THREW__; __THREW__ = 0;
 $317 = $316&1;
 if ($317) {
  $346 = ___cxa_find_matching_catch(-1,-1)|0;
  $347 = tempRet0;
  $192 = $346;
  $193 = $347;
 } else {
  $318 = (($256) + 8|0);
  $319 = $190;
  $320 = $191;
  $321 = $320 | 8;
  __THREW__ = 0;
  $322 = (invoke_iiii(27,($318|0),($319|0),($321|0))|0);
  $323 = __THREW__; __THREW__ = 0;
  $324 = $323&1;
  do {
   if (!($324)) {
    $325 = ($322|0)==(0|0);
    if ($325) {
     $326 = $256;
     $327 = HEAP32[$326>>2]|0;
     $328 = (($327) + -12|0);
     $329 = $328;
     $330 = HEAP32[$329>>2]|0;
     $331 = $256;
     $332 = (($331) + ($330)|0);
     $333 = $332;
     $180 = $333;
     $181 = 4;
     $334 = $180;
     $335 = $334;
     $336 = $181;
     $178 = $335;
     $179 = $336;
     $337 = $178;
     $338 = (($337) + 16|0);
     $339 = HEAP32[$338>>2]|0;
     $340 = $179;
     $341 = $339 | $340;
     __THREW__ = 0;
     invoke_vii(50,($337|0),($341|0));
     $342 = __THREW__; __THREW__ = 0;
     $343 = $342&1;
     if ($343) {
      break;
     }
    }
    $177 = $file;
    $355 = $177;
    $356 = (($355) + 8|0);
    $176 = $356;
    $357 = $176;
    $358 = (($357) + 64|0);
    $359 = HEAP32[$358>>2]|0;
    $360 = ($359|0)!=(0|0);
    L18: do {
     if ($360) {
      label = 36;
     } else {
      $174 = $str;
      $175 = (1248);
      $361 = $174;
      $362 = $175;
      $172 = $361;
      $173 = $362;
      $363 = $172;
      $364 = ($363);
      $171 = $364;
      $365 = $171;
      $170 = $365;
      $366 = $170;
      $367 = $366;
      $169 = $367;
      $368 = $169;
      $369 = $368;
      $168 = $369;
      $370 = $173;
      $371 = $173;
      $167 = $371;
      $372 = $167;
      __THREW__ = 0;
      $373 = (invoke_ii(68,($372|0))|0);
      $374 = __THREW__; __THREW__ = 0;
      $375 = $374&1;
      if ($375) {
       label = 33;
       break;
      }
      __THREW__ = 0;
      invoke_viii(5,($363|0),($370|0),($373|0));
      $376 = __THREW__; __THREW__ = 0;
      $377 = $376&1;
      if ($377) {
       label = 33;
       break;
      }
      $378 = $209;
      $165 = $str;
      $166 = $378;
      $379 = $165;
      $380 = $166;
      $163 = $379;
      $164 = $380;
      $381 = $163;
      $382 = $164;
      $162 = $382;
      $383 = $162;
      $161 = $383;
      $384 = $161;
      $160 = $384;
      $385 = $160;
      $386 = ($385);
      $159 = $386;
      $387 = $159;
      $388 = $387;
      $158 = $388;
      $389 = $158;
      $390 = ($389);
      $391 = ($390);
      $392 = $391;
      $393 = ($392);
      $394 = $393;
      $395 = HEAP8[$394]|0;
      $396 = $395&255;
      $397 = $396 & 1;
      $398 = ($397|0)!=(0);
      if ($398) {
       $152 = $384;
       $399 = $152;
       $400 = ($399);
       $151 = $400;
       $401 = $151;
       $402 = $401;
       $150 = $402;
       $403 = $150;
       $404 = ($403);
       $405 = ($404);
       $406 = $405;
       $407 = (($406) + 8|0);
       $408 = HEAP32[$407>>2]|0;
       $421 = $408;
      } else {
       $157 = $384;
       $409 = $157;
       $410 = ($409);
       $156 = $410;
       $411 = $156;
       $412 = $411;
       $155 = $412;
       $413 = $155;
       $414 = ($413);
       $415 = ($414);
       $416 = $415;
       $417 = (($416) + 1|0);
       $418 = ($417);
       $154 = $418;
       $419 = $154;
       $153 = $419;
       $420 = $153;
       $421 = $420;
      }
      $149 = $421;
      $422 = $149;
      $423 = $164;
      $148 = $423;
      $424 = $148;
      $147 = $424;
      $425 = $147;
      $426 = ($425);
      $146 = $426;
      $427 = $146;
      $428 = $427;
      $145 = $428;
      $429 = $145;
      $430 = ($429);
      $431 = ($430);
      $432 = $431;
      $433 = ($432);
      $434 = $433;
      $435 = HEAP8[$434]|0;
      $436 = $435&255;
      $437 = $436 & 1;
      $438 = ($437|0)!=(0);
      if ($438) {
       $141 = $424;
       $439 = $141;
       $440 = ($439);
       $140 = $440;
       $441 = $140;
       $442 = $441;
       $139 = $442;
       $443 = $139;
       $444 = ($443);
       $445 = ($444);
       $446 = $445;
       $447 = (($446) + 4|0);
       $448 = HEAP32[$447>>2]|0;
       $462 = $448;
      } else {
       $144 = $424;
       $449 = $144;
       $450 = ($449);
       $143 = $450;
       $451 = $143;
       $452 = $451;
       $142 = $452;
       $453 = $142;
       $454 = ($453);
       $455 = ($454);
       $456 = $455;
       $457 = ($456);
       $458 = $457;
       $459 = HEAP8[$458]|0;
       $460 = $459&255;
       $461 = $460 >> 1;
       $462 = $461;
      }
      __THREW__ = 0;
      (invoke_iiii(28,($381|0),($422|0),($462|0))|0);
      $463 = __THREW__; __THREW__ = 0;
      $464 = $463&1;
      do {
       if (!($464)) {
        $138 = $str;
        $465 = $138;
        $137 = $465;
        $466 = $137;
        $136 = $466;
        $467 = $136;
        $135 = $467;
        $468 = $135;
        $469 = ($468);
        $134 = $469;
        $470 = $134;
        $471 = $470;
        $133 = $471;
        $472 = $133;
        $473 = ($472);
        $474 = ($473);
        $475 = $474;
        $476 = ($475);
        $477 = $476;
        $478 = HEAP8[$477]|0;
        $479 = $478&255;
        $480 = $479 & 1;
        $481 = ($480|0)!=(0);
        if ($481) {
         $127 = $467;
         $482 = $127;
         $483 = ($482);
         $126 = $483;
         $484 = $126;
         $485 = $484;
         $125 = $485;
         $486 = $125;
         $487 = ($486);
         $488 = ($487);
         $489 = $488;
         $490 = (($489) + 8|0);
         $491 = HEAP32[$490>>2]|0;
         $504 = $491;
        } else {
         $132 = $467;
         $492 = $132;
         $493 = ($492);
         $131 = $493;
         $494 = $131;
         $495 = $494;
         $130 = $495;
         $496 = $130;
         $497 = ($496);
         $498 = ($497);
         $499 = $498;
         $500 = (($499) + 1|0);
         $501 = ($500);
         $129 = $501;
         $502 = $129;
         $128 = $502;
         $503 = $128;
         $504 = $503;
        }
        $124 = $504;
        $505 = $124;
        __THREW__ = 0;
        invoke_viii(4,($505|0),((1280)|0),49);
        $506 = __THREW__; __THREW__ = 0;
        $507 = $506&1;
        if ($507) {
         break;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($str);
        label = 36;
        break L18;
       }
      } while(0);
      $510 = ___cxa_find_matching_catch(-1,-1)|0;
      $511 = tempRet0;
      $211 = $510;
      $212 = $511;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($str);
     }
    } while(0);
    L40: do {
     if ((label|0) == 36) {
      $512 = $210;
      __THREW__ = 0;
      $513 = (invoke_ii(70,($512|0))|0);
      $514 = __THREW__; __THREW__ = 0;
      $515 = $514&1;
      if ($515) {
       label = 33;
       break;
      }
      $shader = $513;
      $516 = $shader;
      $517 = ($516|0)!=(0);
      if (!($517)) {
       __THREW__ = 0;
       invoke_viii(4,((1296)|0),((1280)|0),54);
       $518 = __THREW__; __THREW__ = 0;
       $519 = $518&1;
       if ($519) {
        label = 33;
        break;
       }
      }
      $120 = $ss;
      $121 = 24;
      $520 = $120;
      $521 = $520;
      $522 = (($521) + 64|0);
      $523 = $522;
      $119 = $523;
      $524 = $119;
      $525 = $524;
      $118 = $525;
      $526 = $118;
      $527 = $526;
      $528 = ((6704) + 8|0);
      HEAP32[$527>>2] = $528;
      $529 = $524;
      $530 = ((6304) + 8|0);
      HEAP32[$529>>2] = $530;
      $531 = $520;
      $532 = ((656) + 12|0);
      HEAP32[$531>>2] = $532;
      $533 = $520;
      $534 = (($533) + 64|0);
      $535 = $534;
      $536 = ((656) + 52|0);
      HEAP32[$535>>2] = $536;
      $537 = $520;
      $538 = (($537) + 8|0);
      $539 = $538;
      $540 = ((656) + 32|0);
      HEAP32[$539>>2] = $540;
      $541 = $520;
      $542 = (($520) + 12|0);
      $543 = $542;
      $115 = $541;
      $544 = ((720) + 4|0);
      $116 = $544;
      $117 = $543;
      $545 = $115;
      $546 = $116;
      $547 = $545;
      $548 = (($546) + 4|0);
      $549 = $117;
      $112 = $547;
      $113 = $548;
      $114 = $549;
      $550 = $112;
      $551 = $113;
      $552 = HEAP32[$551>>2]|0;
      $553 = $550;
      HEAP32[$553>>2] = $552;
      $554 = (($551) + 4|0);
      $555 = HEAP32[$554>>2]|0;
      $556 = $550;
      $557 = HEAP32[$556>>2]|0;
      $558 = (($557) + -12|0);
      $559 = $558;
      $560 = HEAP32[$559>>2]|0;
      $561 = $550;
      $562 = (($561) + ($560)|0);
      $563 = $562;
      HEAP32[$563>>2] = $555;
      $564 = (($550) + 4|0);
      HEAP32[$564>>2] = 0;
      $565 = $550;
      $566 = HEAP32[$565>>2]|0;
      $567 = (($566) + -12|0);
      $568 = $567;
      $569 = HEAP32[$568>>2]|0;
      $570 = $550;
      $571 = (($570) + ($569)|0);
      $572 = $571;
      $573 = $114;
      $110 = $572;
      $111 = $573;
      $574 = $110;
      $575 = $574;
      $576 = $111;
      $577 = $576;
      __THREW__ = 0;
      invoke_vii(44,($575|0),($577|0));
      $578 = __THREW__; __THREW__ = 0;
      $579 = $578&1;
      do {
       if ($579) {
        $694 = ___cxa_find_matching_catch(-1,-1)|0;
        $695 = tempRet0;
        $122 = $694;
        $123 = $695;
       } else {
        $580 = (($574) + 72|0);
        HEAP32[$580>>2] = 0;
        $581 = (($574) + 76|0);
        HEAP32[$581>>2] = -1;
        $582 = $545;
        $583 = (($582) + 8|0);
        $584 = $583;
        $585 = (($546) + 12|0);
        $108 = $584;
        $109 = $585;
        $586 = $108;
        $587 = $109;
        $588 = HEAP32[$587>>2]|0;
        $589 = $586;
        HEAP32[$589>>2] = $588;
        $590 = (($587) + 4|0);
        $591 = HEAP32[$590>>2]|0;
        $592 = $586;
        $593 = HEAP32[$592>>2]|0;
        $594 = (($593) + -12|0);
        $595 = $594;
        $596 = HEAP32[$595>>2]|0;
        $597 = $586;
        $598 = (($597) + ($596)|0);
        $599 = $598;
        HEAP32[$599>>2] = $591;
        $600 = HEAP32[$546>>2]|0;
        $601 = $545;
        HEAP32[$601>>2] = $600;
        $602 = (($546) + 20|0);
        $603 = HEAP32[$602>>2]|0;
        $604 = $545;
        $605 = HEAP32[$604>>2]|0;
        $606 = (($605) + -12|0);
        $607 = $606;
        $608 = HEAP32[$607>>2]|0;
        $609 = $545;
        $610 = (($609) + ($608)|0);
        $611 = $610;
        HEAP32[$611>>2] = $603;
        $612 = (($546) + 24|0);
        $613 = HEAP32[$612>>2]|0;
        $614 = $545;
        $615 = (($614) + 8|0);
        $616 = $615;
        HEAP32[$616>>2] = $613;
        $617 = $520;
        $618 = ((656) + 12|0);
        HEAP32[$617>>2] = $618;
        $619 = $520;
        $620 = (($619) + 64|0);
        $621 = $620;
        $622 = ((656) + 52|0);
        HEAP32[$621>>2] = $622;
        $623 = $520;
        $624 = (($623) + 8|0);
        $625 = $624;
        $626 = ((656) + 32|0);
        HEAP32[$625>>2] = $626;
        $627 = (($520) + 12|0);
        $628 = $121;
        $106 = $627;
        $107 = $628;
        $629 = $106;
        $630 = $107;
        $101 = $629;
        $102 = $630;
        $631 = $101;
        $632 = $631;
        __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($632);
        $633 = $631;
        $634 = ((992) + 8|0);
        HEAP32[$633>>2] = $634;
        $635 = (($631) + 32|0);
        $100 = $635;
        $636 = $100;
        $99 = $636;
        $637 = $99;
        $638 = ($637);
        $98 = $638;
        $639 = $98;
        $97 = $639;
        $640 = $97;
        $641 = $640;
        $96 = $641;
        $642 = $96;
        $643 = $642;
        $95 = $643;
        $94 = $637;
        $644 = $94;
        $645 = ($644);
        $93 = $645;
        $646 = $93;
        $647 = $646;
        $92 = $647;
        $648 = $92;
        $649 = ($648);
        $650 = ($649);
        $651 = $650;
        $652 = ($651);
        $__a$i$i$i$i$i$i = $652;
        $__i$i$i$i$i$i$i = 0;
        while(1) {
         $653 = $__i$i$i$i$i$i$i;
         $654 = ($653>>>0)<(3);
         if (!($654)) {
          break;
         }
         $655 = $__i$i$i$i$i$i$i;
         $656 = $__a$i$i$i$i$i$i;
         $657 = (($656) + ($655<<2)|0);
         HEAP32[$657>>2] = 0;
         $658 = $__i$i$i$i$i$i$i;
         $659 = (($658) + 1)|0;
         $__i$i$i$i$i$i$i = $659;
        }
        $660 = (($631) + 44|0);
        HEAP32[$660>>2] = 0;
        $661 = (($631) + 48|0);
        $662 = $102;
        HEAP32[$661>>2] = $662;
        $91 = $103;
        $663 = $91;
        $90 = $663;
        $664 = $90;
        $665 = ($664);
        $89 = $665;
        $666 = $89;
        $88 = $666;
        $667 = $88;
        $668 = $667;
        $87 = $668;
        $669 = $87;
        $670 = $669;
        $86 = $670;
        $85 = $664;
        $671 = $85;
        $672 = ($671);
        $84 = $672;
        $673 = $84;
        $674 = $673;
        $83 = $674;
        $675 = $83;
        $676 = ($675);
        $677 = ($676);
        $678 = $677;
        $679 = ($678);
        $__a$i$i$i1$i$i$i = $679;
        $__i$i$i$i2$i$i$i = 0;
        while(1) {
         $680 = $__i$i$i$i2$i$i$i;
         $681 = ($680>>>0)<(3);
         if (!($681)) {
          break;
         }
         $682 = $__i$i$i$i2$i$i$i;
         $683 = $__a$i$i$i1$i$i$i;
         $684 = (($683) + ($682<<2)|0);
         HEAP32[$684>>2] = 0;
         $685 = $__i$i$i$i2$i$i$i;
         $686 = (($685) + 1)|0;
         $__i$i$i$i2$i$i$i = $686;
        }
        __THREW__ = 0;
        invoke_vii(45,($631|0),($103|0));
        $687 = __THREW__; __THREW__ = 0;
        $688 = $687&1;
        if ($688) {
         $689 = ___cxa_find_matching_catch(-1,-1)|0;
         $690 = tempRet0;
         $104 = $689;
         $105 = $690;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($103);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($635);
         $691 = $631;
         __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($691);
         $692 = $104;
         $693 = $105;
         $122 = $692;
         $123 = $693;
         break;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($103);
        $701 = $ss;
        $702 = (($701) + 8|0);
        $703 = $702;
        $82 = $file;
        $704 = $82;
        $705 = (($704) + 8|0);
        $706 = $705;
        __THREW__ = 0;
        (invoke_iii(24,($703|0),($706|0))|0);
        $707 = __THREW__; __THREW__ = 0;
        $708 = $707&1;
        do {
         if ($708) {
          label = 80;
         } else {
          $81 = $file;
          $709 = $81;
          $710 = (($709) + 8|0);
          __THREW__ = 0;
          $711 = (invoke_ii(71,($710|0))|0);
          $712 = __THREW__; __THREW__ = 0;
          $713 = $712&1;
          if ($713) {
           label = 80;
           break;
          }
          $714 = ($711|0)==(0|0);
          if ($714) {
           $715 = $709;
           $716 = HEAP32[$715>>2]|0;
           $717 = (($716) + -12|0);
           $718 = $717;
           $719 = HEAP32[$718>>2]|0;
           $720 = $709;
           $721 = (($720) + ($719)|0);
           $722 = $721;
           $79 = $722;
           $80 = 4;
           $723 = $79;
           $724 = $723;
           $725 = $80;
           $77 = $724;
           $78 = $725;
           $726 = $77;
           $727 = (($726) + 16|0);
           $728 = HEAP32[$727>>2]|0;
           $729 = $78;
           $730 = $728 | $729;
           __THREW__ = 0;
           invoke_vii(50,($726|0),($730|0));
           $731 = __THREW__; __THREW__ = 0;
           $732 = $731&1;
           if ($732) {
            label = 80;
            break;
           }
          }
          $76 = $ss;
          $733 = $76;
          $734 = (($733) + 12|0);
          __THREW__ = 0;
          invoke_vii(46,($strSrc|0),($734|0));
          $735 = __THREW__; __THREW__ = 0;
          $736 = $735&1;
          if ($736) {
           label = 80;
           break;
          }
          $737 = ($charSrc);
          $75 = $strSrc;
          $738 = $75;
          $74 = $738;
          $739 = $74;
          $73 = $739;
          $740 = $73;
          $72 = $740;
          $741 = $72;
          $742 = ($741);
          $71 = $742;
          $743 = $71;
          $744 = $743;
          $70 = $744;
          $745 = $70;
          $746 = ($745);
          $747 = ($746);
          $748 = $747;
          $749 = ($748);
          $750 = $749;
          $751 = HEAP8[$750]|0;
          $752 = $751&255;
          $753 = $752 & 1;
          $754 = ($753|0)!=(0);
          if ($754) {
           $64 = $740;
           $755 = $64;
           $756 = ($755);
           $63 = $756;
           $757 = $63;
           $758 = $757;
           $62 = $758;
           $759 = $62;
           $760 = ($759);
           $761 = ($760);
           $762 = $761;
           $763 = (($762) + 8|0);
           $764 = HEAP32[$763>>2]|0;
           $777 = $764;
          } else {
           $69 = $740;
           $765 = $69;
           $766 = ($765);
           $68 = $766;
           $767 = $68;
           $768 = $767;
           $67 = $768;
           $769 = $67;
           $770 = ($769);
           $771 = ($770);
           $772 = $771;
           $773 = (($772) + 1|0);
           $774 = ($773);
           $66 = $774;
           $775 = $66;
           $65 = $775;
           $776 = $65;
           $777 = $776;
          }
          $61 = $777;
          $778 = $61;
          HEAP32[$737>>2] = $778;
          $779 = $shader;
          $780 = ($charSrc);
          __THREW__ = 0;
          invoke_viiii(12,($779|0),1,($780|0),(0|0));
          $781 = __THREW__; __THREW__ = 0;
          $782 = $781&1;
          L76: do {
           if ($782) {
            label = 81;
           } else {
            $783 = $shader;
            __THREW__ = 0;
            invoke_vi(162,($783|0));
            $784 = __THREW__; __THREW__ = 0;
            $785 = $784&1;
            if ($785) {
             label = 81;
             break;
            }
            $786 = $shader;
            __THREW__ = 0;
            invoke_viii(14,($786|0),35713,($res|0));
            $787 = __THREW__; __THREW__ = 0;
            $788 = $787&1;
            if ($788) {
             label = 81;
             break;
            }
            $789 = HEAP32[$res>>2]|0;
            $790 = ($789|0)==(0);
            if (!($790)) {
             $989 = $shader;
             $213 = 1;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($strSrc);
             __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ss);
             __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
             STACKTOP = sp;return ($989|0);
            }
            __THREW__ = 0;
            $791 = (invoke_iii(21,((4008)|0),((1328)|0))|0);
            $792 = __THREW__; __THREW__ = 0;
            $793 = $792&1;
            if ($793) {
             label = 81;
             break;
            }
            $794 = $209;
            __THREW__ = 0;
            $795 = (invoke_iii(25,($791|0),($794|0))|0);
            $796 = __THREW__; __THREW__ = 0;
            $797 = $796&1;
            if ($797) {
             label = 81;
             break;
            }
            $59 = $795;
            $60 = 69;
            $798 = $59;
            $799 = $60;
            __THREW__ = 0;
            (invoke_ii($799|0,($798|0))|0);
            $800 = __THREW__; __THREW__ = 0;
            $801 = $800&1;
            if ($801) {
             label = 81;
             break;
            }
            $802 = $shader;
            __THREW__ = 0;
            invoke_viii(14,($802|0),35716,($logSize|0));
            $803 = __THREW__; __THREW__ = 0;
            $804 = $803&1;
            if ($804) {
             label = 81;
             break;
            }
            $805 = HEAP32[$logSize>>2]|0;
            $806 = ($805|0)>(0);
            L88: do {
             if ($806) {
              $807 = HEAP32[$logSize>>2]|0;
              __THREW__ = 0;
              invoke_vii(52,($shaderLog|0),($807|0));
              $808 = __THREW__; __THREW__ = 0;
              $809 = $808&1;
              if ($809) {
               label = 81;
               break L76;
              }
              $810 = $shader;
              $811 = HEAP32[$logSize>>2]|0;
              $58 = $shaderLog;
              $812 = $58;
              $813 = $812;
              $814 = ($813);
              $815 = HEAP32[$814>>2]|0;
              $57 = $815;
              $816 = $57;
              __THREW__ = 0;
              invoke_viiii(13,($810|0),($811|0),($written|0),($816|0));
              $817 = __THREW__; __THREW__ = 0;
              $818 = $817&1;
              do {
               if (!($818)) {
                $56 = $shaderLog;
                $819 = $56;
                $820 = $819;
                $821 = ($820);
                $822 = HEAP32[$821>>2]|0;
                $55 = $822;
                $823 = $55;
                __THREW__ = 0;
                $824 = (invoke_iii(21,((4008)|0),($823|0))|0);
                $825 = __THREW__; __THREW__ = 0;
                $826 = $825&1;
                if ($826) {
                 break;
                }
                $53 = $824;
                $54 = 69;
                $827 = $53;
                $828 = $54;
                __THREW__ = 0;
                (invoke_ii($828|0,($827|0))|0);
                $829 = __THREW__; __THREW__ = 0;
                $830 = $829&1;
                if ($830) {
                 break;
                }
                __ZNSt3__16vectorIcNS_9allocatorIcEEED1Ev($shaderLog);
                break L88;
               }
              } while(0);
              $835 = ___cxa_find_matching_catch(-1,-1)|0;
              $836 = tempRet0;
              $211 = $835;
              $212 = $836;
              __ZNSt3__16vectorIcNS_9allocatorIcEEED1Ev($shaderLog);
              break L76;
             }
            } while(0);
            $837 = $shader;
            __THREW__ = 0;
            invoke_vi(163,($837|0));
            $838 = __THREW__; __THREW__ = 0;
            $839 = $838&1;
            if ($839) {
             label = 81;
             break;
            }
            $51 = $str1;
            $52 = (1352);
            $840 = $51;
            $841 = $52;
            $49 = $840;
            $50 = $841;
            $842 = $49;
            $843 = ($842);
            $48 = $843;
            $844 = $48;
            $47 = $844;
            $845 = $47;
            $846 = $845;
            $46 = $846;
            $847 = $46;
            $848 = $847;
            $45 = $848;
            $849 = $50;
            $850 = $50;
            $44 = $850;
            $851 = $44;
            __THREW__ = 0;
            $852 = (invoke_ii(68,($851|0))|0);
            $853 = __THREW__; __THREW__ = 0;
            $854 = $853&1;
            if ($854) {
             label = 81;
             break;
            }
            __THREW__ = 0;
            invoke_viii(5,($842|0),($849|0),($852|0));
            $855 = __THREW__; __THREW__ = 0;
            $856 = $855&1;
            if ($856) {
             label = 81;
             break;
            }
            $857 = $209;
            $42 = $str1;
            $43 = $857;
            $858 = $42;
            $859 = $43;
            $40 = $858;
            $41 = $859;
            $860 = $40;
            $861 = $41;
            $39 = $861;
            $862 = $39;
            $38 = $862;
            $863 = $38;
            $37 = $863;
            $864 = $37;
            $865 = ($864);
            $36 = $865;
            $866 = $36;
            $867 = $866;
            $35 = $867;
            $868 = $35;
            $869 = ($868);
            $870 = ($869);
            $871 = $870;
            $872 = ($871);
            $873 = $872;
            $874 = HEAP8[$873]|0;
            $875 = $874&255;
            $876 = $875 & 1;
            $877 = ($876|0)!=(0);
            if ($877) {
             $29 = $863;
             $878 = $29;
             $879 = ($878);
             $28 = $879;
             $880 = $28;
             $881 = $880;
             $27 = $881;
             $882 = $27;
             $883 = ($882);
             $884 = ($883);
             $885 = $884;
             $886 = (($885) + 8|0);
             $887 = HEAP32[$886>>2]|0;
             $900 = $887;
            } else {
             $34 = $863;
             $888 = $34;
             $889 = ($888);
             $33 = $889;
             $890 = $33;
             $891 = $890;
             $32 = $891;
             $892 = $32;
             $893 = ($892);
             $894 = ($893);
             $895 = $894;
             $896 = (($895) + 1|0);
             $897 = ($896);
             $31 = $897;
             $898 = $31;
             $30 = $898;
             $899 = $30;
             $900 = $899;
            }
            $26 = $900;
            $901 = $26;
            $902 = $41;
            $25 = $902;
            $903 = $25;
            $24 = $903;
            $904 = $24;
            $905 = ($904);
            $23 = $905;
            $906 = $23;
            $907 = $906;
            $22 = $907;
            $908 = $22;
            $909 = ($908);
            $910 = ($909);
            $911 = $910;
            $912 = ($911);
            $913 = $912;
            $914 = HEAP8[$913]|0;
            $915 = $914&255;
            $916 = $915 & 1;
            $917 = ($916|0)!=(0);
            if ($917) {
             $18 = $903;
             $918 = $18;
             $919 = ($918);
             $17 = $919;
             $920 = $17;
             $921 = $920;
             $16 = $921;
             $922 = $16;
             $923 = ($922);
             $924 = ($923);
             $925 = $924;
             $926 = (($925) + 4|0);
             $927 = HEAP32[$926>>2]|0;
             $941 = $927;
            } else {
             $21 = $903;
             $928 = $21;
             $929 = ($928);
             $20 = $929;
             $930 = $20;
             $931 = $930;
             $19 = $931;
             $932 = $19;
             $933 = ($932);
             $934 = ($933);
             $935 = $934;
             $936 = ($935);
             $937 = $936;
             $938 = HEAP8[$937]|0;
             $939 = $938&255;
             $940 = $939 >> 1;
             $941 = $940;
            }
            __THREW__ = 0;
            (invoke_iiii(28,($860|0),($901|0),($941|0))|0);
            $942 = __THREW__; __THREW__ = 0;
            $943 = $942&1;
            do {
             if (!($943)) {
              $15 = $str1;
              $944 = $15;
              $14 = $944;
              $945 = $14;
              $13 = $945;
              $946 = $13;
              $12 = $946;
              $947 = $12;
              $948 = ($947);
              $11 = $948;
              $949 = $11;
              $950 = $949;
              $10 = $950;
              $951 = $10;
              $952 = ($951);
              $953 = ($952);
              $954 = $953;
              $955 = ($954);
              $956 = $955;
              $957 = HEAP8[$956]|0;
              $958 = $957&255;
              $959 = $958 & 1;
              $960 = ($959|0)!=(0);
              if ($960) {
               $4 = $946;
               $961 = $4;
               $962 = ($961);
               $3 = $962;
               $963 = $3;
               $964 = $963;
               $2 = $964;
               $965 = $2;
               $966 = ($965);
               $967 = ($966);
               $968 = $967;
               $969 = (($968) + 8|0);
               $970 = HEAP32[$969>>2]|0;
               $983 = $970;
              } else {
               $9 = $946;
               $971 = $9;
               $972 = ($971);
               $8 = $972;
               $973 = $8;
               $974 = $973;
               $7 = $974;
               $975 = $7;
               $976 = ($975);
               $977 = ($976);
               $978 = $977;
               $979 = (($978) + 1|0);
               $980 = ($979);
               $6 = $980;
               $981 = $6;
               $5 = $981;
               $982 = $5;
               $983 = $982;
              }
              $1 = $983;
              $984 = $1;
              __THREW__ = 0;
              invoke_viii(4,($984|0),((1280)|0),89);
              $985 = __THREW__; __THREW__ = 0;
              $986 = $985&1;
              if ($986) {
               break;
              }
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($str1);
              $989 = $shader;
              $213 = 1;
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($strSrc);
              __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ss);
              __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
              STACKTOP = sp;return ($989|0);
             }
            } while(0);
            $987 = ___cxa_find_matching_catch(-1,-1)|0;
            $988 = tempRet0;
            $211 = $987;
            $212 = $988;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($str1);
           }
          } while(0);
          if ((label|0) == 81) {
           $833 = ___cxa_find_matching_catch(-1,-1)|0;
           $834 = tempRet0;
           $211 = $833;
           $212 = $834;
          }
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($strSrc);
         }
        } while(0);
        if ((label|0) == 80) {
         $831 = ___cxa_find_matching_catch(-1,-1)|0;
         $832 = tempRet0;
         $211 = $831;
         $212 = $832;
        }
        __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ss);
        break L40;
       }
      } while(0);
      $696 = $520;
      $697 = (($696) + 64|0);
      $698 = $697;
      __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($698);
      $699 = $122;
      $700 = $123;
      $eh$lpad$body$index2Z2D = $700;$eh$lpad$body$indexZ2D = $699;
      label = 34;
     }
    } while(0);
    if ((label|0) == 33) {
     $508 = ___cxa_find_matching_catch(-1,-1)|0;
     $509 = tempRet0;
     $eh$lpad$body$index2Z2D = $509;$eh$lpad$body$indexZ2D = $508;
     label = 34;
    }
    if ((label|0) == 34) {
     $211 = $eh$lpad$body$indexZ2D;
     $212 = $eh$lpad$body$index2Z2D;
    }
    __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
    $990 = $211;
    $991 = $212;
    ___resumeException($990|0);
    // unreachable;
   }
  } while(0);
  $348 = ___cxa_find_matching_catch(-1,-1)|0;
  $349 = tempRet0;
  $192 = $348;
  $193 = $349;
  __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev($315);
 }
 $350 = $256;
 $351 = (($350) + 108|0);
 $352 = $351;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($352);
 $353 = $192;
 $354 = $193;
 ___resumeException($353|0);
 // unreachable;
 return 0|0;
}
function __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($__os,$__str) {
 $__os = $__os|0;
 $__str = $__str|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__len = 0, $__s = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 792|0;
 $$byval_copy = sp;
 $36 = sp + 288|0;
 $__s = sp + 744|0;
 $95 = sp + 776|0;
 $96 = sp + 784|0;
 $91 = $__os;
 $92 = $__str;
 $97 = $91;
 __THREW__ = 0;
 invoke_vii(48,($__s|0),($97|0));
 $98 = __THREW__; __THREW__ = 0;
 $99 = $98&1;
 L1: do {
  if ($99) {
   $428 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $429 = tempRet0;
   $93 = $428;
   $94 = $429;
  } else {
   $90 = $__s;
   $100 = $90;
   $101 = ($100);
   $102 = HEAP8[$101]|0;
   $103 = $102&1;
   L4: do {
    if ($103) {
     $104 = $92;
     $89 = $104;
     $105 = $89;
     $88 = $105;
     $106 = $88;
     $107 = ($106);
     $87 = $107;
     $108 = $87;
     $109 = $108;
     $86 = $109;
     $110 = $86;
     $111 = ($110);
     $112 = ($111);
     $113 = $112;
     $114 = ($113);
     $115 = $114;
     $116 = HEAP8[$115]|0;
     $117 = $116&255;
     $118 = $117 & 1;
     $119 = ($118|0)!=(0);
     if ($119) {
      $82 = $105;
      $120 = $82;
      $121 = ($120);
      $81 = $121;
      $122 = $81;
      $123 = $122;
      $80 = $123;
      $124 = $80;
      $125 = ($124);
      $126 = ($125);
      $127 = $126;
      $128 = (($127) + 4|0);
      $129 = HEAP32[$128>>2]|0;
      $143 = $129;
     } else {
      $85 = $105;
      $130 = $85;
      $131 = ($130);
      $84 = $131;
      $132 = $84;
      $133 = $132;
      $83 = $133;
      $134 = $83;
      $135 = ($134);
      $136 = ($135);
      $137 = $136;
      $138 = ($137);
      $139 = $138;
      $140 = HEAP8[$139]|0;
      $141 = $140&255;
      $142 = $141 >> 1;
      $143 = $142;
     }
     $__len = $143;
     $144 = $91;
     $78 = $95;
     $79 = $144;
     $145 = $78;
     $146 = $79;
     $76 = $145;
     $77 = $146;
     $147 = $76;
     $148 = ($147);
     $149 = $77;
     $150 = $149;
     $151 = HEAP32[$150>>2]|0;
     $152 = (($151) + -12|0);
     $153 = $152;
     $154 = HEAP32[$153>>2]|0;
     $155 = $149;
     $156 = (($155) + ($154)|0);
     $157 = $156;
     $75 = $157;
     $158 = $75;
     $159 = $158;
     $74 = $159;
     $160 = $74;
     $161 = (($160) + 24|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = $162;
     HEAP32[$148>>2] = $163;
     $164 = $92;
     $73 = $164;
     $165 = $73;
     $72 = $165;
     $166 = $72;
     $71 = $166;
     $167 = $71;
     $168 = ($167);
     $70 = $168;
     $169 = $70;
     $170 = $169;
     $69 = $170;
     $171 = $69;
     $172 = ($171);
     $173 = ($172);
     $174 = $173;
     $175 = ($174);
     $176 = $175;
     $177 = HEAP8[$176]|0;
     $178 = $177&255;
     $179 = $178 & 1;
     $180 = ($179|0)!=(0);
     if ($180) {
      $63 = $166;
      $181 = $63;
      $182 = ($181);
      $62 = $182;
      $183 = $62;
      $184 = $183;
      $61 = $184;
      $185 = $61;
      $186 = ($185);
      $187 = ($186);
      $188 = $187;
      $189 = (($188) + 8|0);
      $190 = HEAP32[$189>>2]|0;
      $203 = $190;
     } else {
      $68 = $166;
      $191 = $68;
      $192 = ($191);
      $67 = $192;
      $193 = $67;
      $194 = $193;
      $66 = $194;
      $195 = $66;
      $196 = ($195);
      $197 = ($196);
      $198 = $197;
      $199 = (($198) + 1|0);
      $200 = ($199);
      $65 = $200;
      $201 = $65;
      $64 = $201;
      $202 = $64;
      $203 = $202;
     }
     $60 = $203;
     $204 = $60;
     $205 = $91;
     $206 = $205;
     $207 = HEAP32[$206>>2]|0;
     $208 = (($207) + -12|0);
     $209 = $208;
     $210 = HEAP32[$209>>2]|0;
     $211 = $205;
     $212 = (($211) + ($210)|0);
     $213 = $212;
     $55 = $213;
     $214 = $55;
     $215 = (($214) + 4|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = $216 & 176;
     $218 = ($217|0)==(32);
     if ($218) {
      $219 = $92;
      $53 = $219;
      $220 = $53;
      $52 = $220;
      $221 = $52;
      $51 = $221;
      $222 = $51;
      $223 = ($222);
      $50 = $223;
      $224 = $50;
      $225 = $224;
      $49 = $225;
      $226 = $49;
      $227 = ($226);
      $228 = ($227);
      $229 = $228;
      $230 = ($229);
      $231 = $230;
      $232 = HEAP8[$231]|0;
      $233 = $232&255;
      $234 = $233 & 1;
      $235 = ($234|0)!=(0);
      if ($235) {
       $43 = $221;
       $236 = $43;
       $237 = ($236);
       $42 = $237;
       $238 = $42;
       $239 = $238;
       $41 = $239;
       $240 = $41;
       $241 = ($240);
       $242 = ($241);
       $243 = $242;
       $244 = (($243) + 8|0);
       $245 = HEAP32[$244>>2]|0;
       $258 = $245;
      } else {
       $48 = $221;
       $246 = $48;
       $247 = ($246);
       $47 = $247;
       $248 = $47;
       $249 = $248;
       $46 = $249;
       $250 = $46;
       $251 = ($250);
       $252 = ($251);
       $253 = $252;
       $254 = (($253) + 1|0);
       $255 = ($254);
       $45 = $255;
       $256 = $45;
       $44 = $256;
       $257 = $44;
       $258 = $257;
      }
      $40 = $258;
      $259 = $40;
      $260 = $__len;
      $261 = (($259) + ($260)|0);
      $303 = $261;
     } else {
      $262 = $92;
      $28 = $262;
      $263 = $28;
      $27 = $263;
      $264 = $27;
      $26 = $264;
      $265 = $26;
      $266 = ($265);
      $25 = $266;
      $267 = $25;
      $268 = $267;
      $24 = $268;
      $269 = $24;
      $270 = ($269);
      $271 = ($270);
      $272 = $271;
      $273 = ($272);
      $274 = $273;
      $275 = HEAP8[$274]|0;
      $276 = $275&255;
      $277 = $276 & 1;
      $278 = ($277|0)!=(0);
      if ($278) {
       $18 = $264;
       $279 = $18;
       $280 = ($279);
       $17 = $280;
       $281 = $17;
       $282 = $281;
       $16 = $282;
       $283 = $16;
       $284 = ($283);
       $285 = ($284);
       $286 = $285;
       $287 = (($286) + 8|0);
       $288 = HEAP32[$287>>2]|0;
       $301 = $288;
      } else {
       $23 = $264;
       $289 = $23;
       $290 = ($289);
       $22 = $290;
       $291 = $22;
       $292 = $291;
       $21 = $292;
       $293 = $21;
       $294 = ($293);
       $295 = ($294);
       $296 = $295;
       $297 = (($296) + 1|0);
       $298 = ($297);
       $20 = $298;
       $299 = $20;
       $19 = $299;
       $300 = $19;
       $301 = $300;
      }
      $15 = $301;
      $302 = $15;
      $303 = $302;
     }
     $304 = $92;
     $14 = $304;
     $305 = $14;
     $13 = $305;
     $306 = $13;
     $12 = $306;
     $307 = $12;
     $308 = ($307);
     $11 = $308;
     $309 = $11;
     $310 = $309;
     $10 = $310;
     $311 = $10;
     $312 = ($311);
     $313 = ($312);
     $314 = $313;
     $315 = ($314);
     $316 = $315;
     $317 = HEAP8[$316]|0;
     $318 = $317&255;
     $319 = $318 & 1;
     $320 = ($319|0)!=(0);
     if ($320) {
      $4 = $306;
      $321 = $4;
      $322 = ($321);
      $3 = $322;
      $323 = $3;
      $324 = $323;
      $2 = $324;
      $325 = $2;
      $326 = ($325);
      $327 = ($326);
      $328 = $327;
      $329 = (($328) + 8|0);
      $330 = HEAP32[$329>>2]|0;
      $343 = $330;
     } else {
      $9 = $306;
      $331 = $9;
      $332 = ($331);
      $8 = $332;
      $333 = $8;
      $334 = $333;
      $7 = $334;
      $335 = $7;
      $336 = ($335);
      $337 = ($336);
      $338 = $337;
      $339 = (($338) + 1|0);
      $340 = ($339);
      $6 = $340;
      $341 = $6;
      $5 = $341;
      $342 = $5;
      $343 = $342;
     }
     $1 = $343;
     $344 = $1;
     $345 = $__len;
     $346 = (($344) + ($345)|0);
     $347 = $91;
     $348 = $347;
     $349 = HEAP32[$348>>2]|0;
     $350 = (($349) + -12|0);
     $351 = $350;
     $352 = HEAP32[$351>>2]|0;
     $353 = $347;
     $354 = (($353) + ($352)|0);
     $355 = $354;
     $356 = $91;
     $357 = $356;
     $358 = HEAP32[$357>>2]|0;
     $359 = (($358) + -12|0);
     $360 = $359;
     $361 = HEAP32[$360>>2]|0;
     $362 = $356;
     $363 = (($362) + ($361)|0);
     $364 = $363;
     $39 = $364;
     $365 = $39;
     $366 = (($365) + 76|0);
     $367 = HEAP32[$366>>2]|0;
     $29 = -1;
     $30 = $367;
     $368 = $29;
     $369 = $30;
     $370 = ($368|0)==($369|0);
     L31: do {
      if ($370) {
       $34 = $365;
       $35 = 32;
       $371 = $34;
       $372 = $371;
       __THREW__ = 0;
       invoke_vii(49,($36|0),($372|0));
       $373 = __THREW__; __THREW__ = 0;
       $374 = $373&1;
       if ($374) {
        label = 36;
        break;
       }
       $33 = $36;
       $375 = $33;
       __THREW__ = 0;
       $376 = (invoke_iii(23,($375|0),((9136)|0))|0);
       $377 = __THREW__; __THREW__ = 0;
       $378 = $377&1;
       do {
        if (!($378)) {
         $379 = $376;
         $380 = $35;
         $31 = $379;
         $32 = $380;
         $381 = $31;
         $382 = $381;
         $383 = HEAP32[$382>>2]|0;
         $384 = (($383) + 28|0);
         $385 = HEAP32[$384>>2]|0;
         $386 = $32;
         __THREW__ = 0;
         $387 = (invoke_iii($385|0,($381|0),($386|0))|0);
         $388 = __THREW__; __THREW__ = 0;
         $389 = $388&1;
         if ($389) {
          break;
         }
         __ZNSt3__16localeD2Ev($36);
         $394 = $387 << 24 >> 24;
         $395 = (($365) + 76|0);
         HEAP32[$395>>2] = $394;
         label = 29;
         break L31;
        }
       } while(0);
       $390 = ___cxa_find_matching_catch(-1,-1,0|0,0|0)|0;
       $391 = tempRet0;
       $37 = $390;
       $38 = $391;
       __ZNSt3__16localeD2Ev($36);
       $392 = $37;
       $393 = $38;
       $eh$lpad$body$index2Z2D = $393;$eh$lpad$body$indexZ2D = $392;
      } else {
       label = 29;
      }
     } while(0);
     do {
      if ((label|0) == 29) {
       $396 = (($365) + 76|0);
       $397 = HEAP32[$396>>2]|0;
       $398 = $397&255;
       __THREW__ = 0;
       $399 = $$byval_copy;
       $400 = $$byval_copy;
       $401 = $95;
       ;HEAP32[$400+0>>2]=HEAP32[$401+0>>2]|0;
       invoke_viiiiiii(39,($96|0),($$byval_copy|0),($204|0),($303|0),($346|0),($355|0),($398|0));
       $402 = $$byval_copy;
       $403 = __THREW__; __THREW__ = 0;
       $404 = $403&1;
       if ($404) {
        label = 36;
        break;
       }
       $54 = $96;
       $405 = $54;
       $406 = ($405);
       $407 = HEAP32[$406>>2]|0;
       $408 = ($407|0)==(0|0);
       if ($408) {
        $409 = $91;
        $410 = $409;
        $411 = HEAP32[$410>>2]|0;
        $412 = (($411) + -12|0);
        $413 = $412;
        $414 = HEAP32[$413>>2]|0;
        $415 = $409;
        $416 = (($415) + ($414)|0);
        $417 = $416;
        $58 = $417;
        $59 = 5;
        $418 = $58;
        $419 = $418;
        $420 = $59;
        $56 = $419;
        $57 = $420;
        $421 = $56;
        $422 = (($421) + 16|0);
        $423 = HEAP32[$422>>2]|0;
        $424 = $57;
        $425 = $423 | $424;
        __THREW__ = 0;
        invoke_vii(50,($421|0),($425|0));
        $426 = __THREW__; __THREW__ = 0;
        $427 = $426&1;
        if ($427) {
         label = 36;
         break;
        }
       }
       break L4;
      }
     } while(0);
     if ((label|0) == 36) {
      $430 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      $431 = tempRet0;
      $eh$lpad$body$index2Z2D = $431;$eh$lpad$body$indexZ2D = $430;
     }
     $93 = $eh$lpad$body$indexZ2D;
     $94 = $eh$lpad$body$index2Z2D;
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s);
     break L1;
    }
   } while(0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($__s);
   $444 = $91;
   STACKTOP = sp;return ($444|0);
  }
 } while(0);
 $432 = $93;
 (___cxa_begin_catch(($432|0))|0);
 $433 = $91;
 $434 = $433;
 $435 = HEAP32[$434>>2]|0;
 $436 = (($435) + -12|0);
 $437 = $436;
 $438 = HEAP32[$437>>2]|0;
 $439 = $433;
 $440 = (($439) + ($438)|0);
 $441 = $440;
 __THREW__ = 0;
 invoke_vi(159,($441|0));
 $442 = __THREW__; __THREW__ = 0;
 $443 = $442&1;
 if (!($443)) {
  ___cxa_end_catch();
  $444 = $91;
  STACKTOP = sp;return ($444|0);
 }
 $445 = ___cxa_find_matching_catch(-1,-1)|0;
 $446 = tempRet0;
 $93 = $445;
 $94 = $446;
 __THREW__ = 0;
 invoke_v(5);
 $447 = __THREW__; __THREW__ = 0;
 $448 = $447&1;
 if ($448) {
  $451 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($451);
  // unreachable;
 }
 $449 = $93;
 $450 = $94;
 ___resumeException($449|0);
 // unreachable;
 return 0|0;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEEC1Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $__n;
 $3 = $1;
 $4 = $2;
 __ZNSt3__16vectorIcNS_9allocatorIcEEEC2Ej($3,$4);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__16vectorIcNS_9allocatorIcEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = (1424);
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED2Ev($2,$3);
 $4 = $2;
 $5 = (($4) + 108|0);
 $6 = $5;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($6);
 STACKTOP = sp;return;
}
function __ZN7gltools15ShaderContainerD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $tmp = 0, $tmp1 = 0, $tmp2 = 0, $tmp3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 232|0;
 $8 = sp + 56|0;
 $9 = sp + 64|0;
 $10 = sp + 72|0;
 $26 = sp + 200|0;
 $27 = sp + 208|0;
 $25 = $this;
 $30 = $25;
 $31 = $30;
 $24 = $31;
 $32 = $24;
 $33 = $32;
 $23 = $33;
 $34 = $23;
 $35 = ($34);
 $36 = (($35) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $21 = $26;
 $22 = $37;
 $38 = $21;
 $39 = $22;
 $19 = $38;
 $20 = $39;
 $40 = $19;
 $41 = ($40);
 $42 = $20;
 HEAP32[$41>>2] = $42;
 $43 = $30;
 $18 = $43;
 $44 = $18;
 $45 = $44;
 $17 = $45;
 $46 = $17;
 $47 = ($46);
 $16 = $47;
 $48 = $16;
 $15 = $48;
 $49 = $15;
 $50 = $49;
 $51 = $50;
 $52 = $51;
 $13 = $27;
 $14 = $52;
 $53 = $13;
 $54 = $14;
 $11 = $53;
 $12 = $54;
 $55 = $11;
 $56 = ($55);
 $57 = $12;
 HEAP32[$56>>2] = $57;
 $tmp = $10;
 $tmp1 = $26;
 ;HEAP8[$tmp+0|0]=HEAP8[$tmp1+0|0]|0;HEAP8[$tmp+1|0]=HEAP8[$tmp1+1|0]|0;HEAP8[$tmp+2|0]=HEAP8[$tmp1+2|0]|0;HEAP8[$tmp+3|0]=HEAP8[$tmp1+3|0]|0;
 $tmp2 = $9;
 $tmp3 = $27;
 ;HEAP8[$tmp2+0|0]=HEAP8[$tmp3+0|0]|0;HEAP8[$tmp2+1|0]=HEAP8[$tmp3+1|0]|0;HEAP8[$tmp2+2|0]=HEAP8[$tmp3+2|0]|0;HEAP8[$tmp2+3|0]=HEAP8[$tmp3+3|0]|0;
 HEAP32[$8>>2] = 163;
 while(1) {
  $6 = $10;
  $7 = $9;
  $58 = $6;
  $59 = $7;
  $4 = $58;
  $5 = $59;
  $60 = $4;
  $61 = ($60);
  $62 = HEAP32[$61>>2]|0;
  $63 = $5;
  $64 = ($63);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($62|0)==($65|0);
  $67 = $66 ^ 1;
  if (!($67)) {
   label = 5;
   break;
  }
  $68 = HEAP32[$8>>2]|0;
  $1 = $10;
  $69 = $1;
  $70 = ($69);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + 8|0);
  $73 = HEAP32[$72>>2]|0;
  __THREW__ = 0;
  invoke_vi($68|0,($73|0));
  $74 = __THREW__; __THREW__ = 0;
  $75 = $74&1;
  if ($75) {
   label = 7;
   break;
  }
  $2 = $10;
  $76 = $2;
  $77 = ($76);
  $78 = HEAP32[$77>>2]|0;
  $79 = $78;
  $80 = (($79) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($76);
  HEAP32[$82>>2] = $81;
 }
 if ((label|0) == 5) {
  $3 = $8;
  $83 = $30;
  __ZNSt3__14listIjNS_9allocatorIjEEED2Ev($83);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 7) {
  $84 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  $85 = tempRet0;
  $28 = $84;
  $29 = $85;
  $86 = $30;
  __ZNSt3__14listIjNS_9allocatorIjEEED2Ev($86);
  __ZSt9terminatev();
  // unreachable;
 }
}
function __ZNSt3__14listIjNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZNSt3__110__list_impIjNS_9allocatorIjEEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 120|0;
 $4 = sp + 24|0;
 $7 = sp + 48|0;
 $12 = $this;
 $13 = $__n;
 $16 = $12;
 $17 = $16;
 $11 = $17;
 $18 = $11;
 $19 = $18;
 $10 = $19;
 $20 = ($18);
 HEAP32[$20>>2] = 0;
 $21 = (($18) + 4|0);
 HEAP32[$21>>2] = 0;
 $22 = (($18) + 8|0);
 $8 = $22;
 $9 = 0;
 $23 = $8;
 $24 = $9;
 $6 = $23;
 HEAP32[$7>>2] = $24;
 $25 = $6;
 $26 = $25;
 $5 = $7;
 $27 = $5;
 $28 = HEAP32[$27>>2]|0;
 $3 = $26;
 HEAP32[$4>>2] = $28;
 $29 = $3;
 $30 = $29;
 $2 = $30;
 $31 = ($29);
 $1 = $4;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 HEAP32[$31>>2] = $33;
 $34 = $13;
 $35 = ($34>>>0)>(0);
 if (!($35)) {
  STACKTOP = sp;return;
 }
 $36 = $13;
 __THREW__ = 0;
 invoke_vii(53,($16|0),($36|0));
 $37 = __THREW__; __THREW__ = 0;
 $38 = $37&1;
 do {
  if (!($38)) {
   $39 = $13;
   __THREW__ = 0;
   invoke_vii(54,($16|0),($39|0));
   $40 = __THREW__; __THREW__ = 0;
   $41 = $40&1;
   if ($41) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $42 = ___cxa_find_matching_catch(-1,-1)|0;
 $43 = tempRet0;
 $14 = $42;
 $15 = $43;
 $44 = $16;
 __ZNSt3__113__vector_baseIcNS_9allocatorIcEEED2Ev($44);
 $45 = $14;
 $46 = $15;
 ___resumeException($45|0);
 // unreachable;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 104|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIcNS_9allocatorIcEEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  $18 = $14;
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($18);
 }
 $19 = $14;
 $11 = $19;
 $20 = $11;
 $21 = (($20) + 8|0);
 $10 = $21;
 $22 = $10;
 $23 = $22;
 $9 = $23;
 $24 = $9;
 $25 = $24;
 $26 = $13;
 $4 = $25;
 $5 = $26;
 $27 = $4;
 $28 = $5;
 $1 = $27;
 $2 = $28;
 $3 = 0;
 $29 = $2;
 $30 = (__Znwj($29)|0);
 $31 = $14;
 $32 = (($31) + 4|0);
 HEAP32[$32>>2] = $30;
 $33 = $14;
 $34 = ($33);
 HEAP32[$34>>2] = $30;
 $35 = $14;
 $36 = ($35);
 $37 = HEAP32[$36>>2]|0;
 $38 = $13;
 $39 = (($37) + ($38)|0);
 $40 = $14;
 $8 = $40;
 $41 = $8;
 $42 = (($41) + 8|0);
 $7 = $42;
 $43 = $7;
 $44 = $43;
 $6 = $44;
 $45 = $6;
 $46 = ($45);
 HEAP32[$46>>2] = $39;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__a = 0, $tmp$i = 0, $tmp1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 120|0;
 $6 = sp + 40|0;
 $9 = sp + 64|0;
 $13 = $this;
 $14 = $__n;
 $15 = $13;
 $16 = $15;
 $12 = $16;
 $17 = $12;
 $18 = (($17) + 8|0);
 $11 = $18;
 $19 = $11;
 $20 = $19;
 $10 = $20;
 $21 = $10;
 $22 = $21;
 $__a = $22;
 while(1) {
  $23 = $__a;
  $24 = $15;
  $25 = (($24) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $1 = $26;
  $27 = $1;
  $7 = $23;
  $8 = $27;
  $28 = $7;
  $29 = $8;
  $tmp$i = $6;
  $tmp1$i = $9;
  ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
  $4 = $28;
  $5 = $29;
  $30 = $4;
  $31 = $5;
  $2 = $30;
  $3 = $31;
  $32 = $3;
  $33 = ($32|0)==(0|0);
  if (!($33)) {
   HEAP8[$32] = 0;
  }
  $34 = $15;
  $35 = (($34) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + 1|0);
  HEAP32[$35>>2] = $37;
  $38 = $14;
  $39 = (($38) + -1)|0;
  $14 = $39;
  $40 = $14;
  $41 = ($40>>>0)>(0);
  if (!($41)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIcNS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0;
 var $tmp$i$i$i = 0, $tmp1$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 232|0;
 $18 = sp + 136|0;
 $21 = sp + 160|0;
 $29 = $this;
 $30 = $29;
 $31 = ($30);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $34 = $28;
 $35 = ($34);
 $36 = HEAP32[$35>>2]|0;
 $26 = $34;
 $27 = $36;
 $37 = $26;
 while(1) {
  $38 = $27;
  $39 = (($37) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($38|0)!=($40|0);
  if (!($41)) {
   break;
  }
  $25 = $37;
  $42 = $25;
  $43 = (($42) + 8|0);
  $24 = $43;
  $44 = $24;
  $45 = $44;
  $23 = $45;
  $46 = $23;
  $47 = $46;
  $48 = (($37) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + -1|0);
  HEAP32[$48>>2] = $50;
  $22 = $50;
  $51 = $22;
  $19 = $47;
  $20 = $51;
  $52 = $19;
  $53 = $20;
  $tmp$i$i$i = $18;
  $tmp1$i$i$i = $21;
  ;HEAP8[$tmp$i$i$i+0|0]=HEAP8[$tmp1$i$i$i+0|0]|0;
  $16 = $52;
  $17 = $53;
  $54 = $16;
  $55 = $17;
  $14 = $54;
  $15 = $55;
 }
 $7 = $30;
 $56 = $7;
 $57 = (($56) + 8|0);
 $6 = $57;
 $58 = $6;
 $59 = $58;
 $5 = $59;
 $60 = $5;
 $61 = $60;
 $62 = ($30);
 $63 = HEAP32[$62>>2]|0;
 $4 = $30;
 $64 = $4;
 $3 = $64;
 $65 = $3;
 $66 = (($65) + 8|0);
 $2 = $66;
 $67 = $2;
 $68 = $67;
 $1 = $68;
 $69 = $1;
 $70 = ($69);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($64);
 $73 = HEAP32[$72>>2]|0;
 $74 = $71;
 $75 = $73;
 $76 = (($74) - ($75))|0;
 $11 = $61;
 $12 = $63;
 $13 = $76;
 $77 = $11;
 $78 = $12;
 $79 = $13;
 $8 = $77;
 $9 = $78;
 $10 = $79;
 $80 = $9;
 __ZdlPv($80);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIcNS_9allocatorIcEEE8max_sizeEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp$i = 0, $tmp$i1 = 0, $tmp1$i = 0, $tmp1$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $6 = sp + 40|0;
 $9 = sp + 64|0;
 $12 = sp + 88|0;
 $14 = sp + 104|0;
 $19 = sp + 144|0;
 $20 = sp + 152|0;
 $18 = $this;
 $21 = $18;
 $22 = $21;
 $17 = $22;
 $23 = $17;
 $24 = (($23) + 8|0);
 $16 = $24;
 $25 = $16;
 $26 = $25;
 $15 = $26;
 $27 = $15;
 $28 = $27;
 $13 = $28;
 $29 = $13;
 $tmp$i = $12;
 $tmp1$i = $14;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
 $11 = $29;
 $30 = $11;
 $10 = $30;
 HEAP32[$19>>2] = -1;
 $31 = (4294967295 / 2)&-1;
 HEAP32[$20>>2] = $31;
 $7 = $19;
 $8 = $20;
 $32 = $7;
 $33 = $8;
 $tmp$i1 = $6;
 $tmp1$i2 = $9;
 ;HEAP8[$tmp$i1+0|0]=HEAP8[$tmp1$i2+0|0]|0;
 $4 = $32;
 $5 = $33;
 $34 = $5;
 $35 = $4;
 $1 = $6;
 $2 = $34;
 $3 = $35;
 $36 = $2;
 $37 = HEAP32[$36>>2]|0;
 $38 = $3;
 $39 = HEAP32[$38>>2]|0;
 $40 = ($37>>>0)<($39>>>0);
 if ($40) {
  $41 = $5;
  $43 = $41;
 } else {
  $42 = $4;
  $43 = $42;
 }
 $44 = HEAP32[$43>>2]|0;
 STACKTOP = sp;return ($44|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__rt = 0, $__t$i = 0, $__tmp$i$i$i = 0, $__tmp$i$i$i1 = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0;
 $30 = sp + 256|0;
 $31 = sp + 264|0;
 $34 = sp + 288|0;
 $35 = sp + 296|0;
 $__h = sp + 400|0;
 $47 = sp + 408|0;
 $46 = $this;
 $50 = $46;
 $__rt = 0;
 $51 = (($50) + 64|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)!=(0|0);
 if (!($53)) {
  $163 = $__rt;
  STACKTOP = sp;return ($163|0);
 }
 $__rt = $50;
 $54 = (($50) + 64|0);
 $55 = HEAP32[$54>>2]|0;
 HEAP32[$47>>2] = 72;
 $43 = $__h;
 $44 = $55;
 $45 = $47;
 $56 = $43;
 $57 = $44;
 $58 = $45;
 $40 = $56;
 $41 = $57;
 $42 = $58;
 $59 = $40;
 $60 = ($59);
 $61 = $41;
 $62 = $42;
 $39 = $62;
 $63 = $39;
 $64 = HEAP32[$63>>2]|0;
 $36 = $60;
 $37 = $61;
 $38 = $64;
 $65 = $36;
 $66 = $37;
 $67 = $38;
 $33 = $65;
 HEAP32[$34>>2] = $66;
 HEAP32[$35>>2] = $67;
 $68 = $33;
 $69 = $68;
 $32 = $34;
 $70 = $32;
 $71 = HEAP32[$70>>2]|0;
 $26 = $35;
 $72 = $26;
 $73 = HEAP32[$72>>2]|0;
 $29 = $69;
 HEAP32[$30>>2] = $71;
 HEAP32[$31>>2] = $73;
 $74 = $29;
 $75 = ($74);
 $28 = $30;
 $76 = $28;
 $77 = HEAP32[$76>>2]|0;
 HEAP32[$75>>2] = $77;
 $78 = (($74) + 4|0);
 $27 = $31;
 $79 = $27;
 $80 = HEAP32[$79>>2]|0;
 HEAP32[$78>>2] = $80;
 $81 = $50;
 $82 = HEAP32[$81>>2]|0;
 $83 = (($82) + 24|0);
 $84 = HEAP32[$83>>2]|0;
 __THREW__ = 0;
 $85 = (invoke_ii($84|0,($50|0))|0);
 $86 = __THREW__; __THREW__ = 0;
 $87 = $86&1;
 do {
  if (!($87)) {
   $88 = ($85|0)!=(0);
   if ($88) {
    $__rt = 0;
   }
   $5 = $__h;
   $118 = $5;
   $119 = ($118);
   $4 = $119;
   $120 = $4;
   $121 = $120;
   $3 = $121;
   $122 = $3;
   $123 = ($122);
   $124 = HEAP32[$123>>2]|0;
   $__t$i = $124;
   $125 = ($118);
   $2 = $125;
   $126 = $2;
   $127 = $126;
   $1 = $127;
   $128 = $1;
   $129 = ($128);
   HEAP32[$129>>2] = 0;
   $130 = $__t$i;
   __THREW__ = 0;
   $131 = (invoke_ii(72,($130|0))|0);
   $132 = __THREW__; __THREW__ = 0;
   $133 = $132&1;
   if ($133) {
    break;
   }
   $134 = ($131|0)==(0);
   if ($134) {
    $135 = (($50) + 64|0);
    HEAP32[$135>>2] = 0;
   } else {
    $__rt = 0;
   }
   $25 = $__h;
   $136 = $25;
   $24 = $136;
   $137 = $24;
   $22 = $137;
   $23 = 0;
   $138 = $22;
   $139 = ($138);
   $21 = $139;
   $140 = $21;
   $141 = $140;
   $20 = $141;
   $142 = $20;
   $143 = ($142);
   $144 = HEAP32[$143>>2]|0;
   $__tmp$i$i$i = $144;
   $145 = $23;
   $146 = ($138);
   $19 = $146;
   $147 = $19;
   $148 = $147;
   $18 = $148;
   $149 = $18;
   $150 = ($149);
   HEAP32[$150>>2] = $145;
   $151 = $__tmp$i$i$i;
   $152 = ($151|0)!=(0|0);
   do {
    if ($152) {
     $153 = ($138);
     $17 = $153;
     $154 = $17;
     $155 = $154;
     $16 = $155;
     $156 = $16;
     $157 = (($156) + 4|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = $__tmp$i$i$i;
     __THREW__ = 0;
     (invoke_ii($158|0,($159|0))|0);
     $160 = __THREW__; __THREW__ = 0;
     $161 = $160&1;
     if ($161) {
      $162 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      u$1 = tempRet0;
      ___clang_call_terminate($162);
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   $163 = $__rt;
   STACKTOP = sp;return ($163|0);
  }
 } while(0);
 $89 = ___cxa_find_matching_catch(-1,-1)|0;
 $90 = tempRet0;
 $48 = $89;
 $49 = $90;
 $15 = $__h;
 $91 = $15;
 $14 = $91;
 $92 = $14;
 $12 = $92;
 $13 = 0;
 $93 = $12;
 $94 = ($93);
 $11 = $94;
 $95 = $11;
 $96 = $95;
 $10 = $96;
 $97 = $10;
 $98 = ($97);
 $99 = HEAP32[$98>>2]|0;
 $__tmp$i$i$i1 = $99;
 $100 = $13;
 $101 = ($93);
 $9 = $101;
 $102 = $9;
 $103 = $102;
 $8 = $103;
 $104 = $8;
 $105 = ($104);
 HEAP32[$105>>2] = $100;
 $106 = $__tmp$i$i$i1;
 $107 = ($106|0)!=(0|0);
 do {
  if ($107) {
   $108 = ($93);
   $7 = $108;
   $109 = $7;
   $110 = $109;
   $6 = $110;
   $111 = $6;
   $112 = (($111) + 4|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $__tmp$i$i$i1;
   __THREW__ = 0;
   (invoke_ii($113|0,($114|0))|0);
   $115 = __THREW__; __THREW__ = 0;
   $116 = $115&1;
   if ($116) {
    $117 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    u$0 = tempRet0;
    ___clang_call_terminate($117);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $164 = $48;
 $165 = $49;
 ___resumeException($164|0);
 // unreachable;
 return 0|0;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj($this,$__s,$__mode) {
 $this = $this|0;
 $__s = $__s|0;
 $__mode = $__mode|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__mdstr = 0, $__rt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $1 = $this;
 $2 = $__s;
 $3 = $__mode;
 $4 = $1;
 $__rt = 0;
 $5 = (($4) + 64|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $31 = $__rt;
  STACKTOP = sp;return ($31|0);
 }
 $__rt = $4;
 $8 = $3;
 $9 = $8 & -3;
 switch ($9|0) {
 case 9: case 25:  {
  $__mdstr = (1712);
  break;
 }
 case 56:  {
  $__mdstr = (1704);
  break;
 }
 case 12:  {
  $__mdstr = (1736);
  break;
 }
 case 13: case 29:  {
  $__mdstr = (1760);
  break;
 }
 case 52: case 20:  {
  $__mdstr = (1720);
  break;
 }
 case 48: case 16:  {
  $__mdstr = (1672);
  break;
 }
 case 60:  {
  $__mdstr = (1752);
  break;
 }
 case 8:  {
  $__mdstr = (1688);
  break;
 }
 case 5: case 21:  {
  $__mdstr = (1728);
  break;
 }
 case 28:  {
  $__mdstr = (1744);
  break;
 }
 case 24:  {
  $__mdstr = (1696);
  break;
 }
 case 1: case 17:  {
  $__mdstr = (1680);
  break;
 }
 default: {
  $__rt = 0;
 }
 }
 $10 = $__rt;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $2;
  $13 = $__mdstr;
  $14 = (_fopen(($12|0),($13|0))|0);
  $15 = (($4) + 64|0);
  HEAP32[$15>>2] = $14;
  $16 = (($4) + 64|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = $3;
   $20 = (($4) + 88|0);
   HEAP32[$20>>2] = $19;
   $21 = $3;
   $22 = $21 & 2;
   $23 = ($22|0)!=(0);
   if ($23) {
    $24 = (($4) + 64|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (_fseek(($25|0),0,2)|0);
    $27 = ($26|0)!=(0);
    if ($27) {
     $28 = (($4) + 64|0);
     $29 = HEAP32[$28>>2]|0;
     (_fclose(($29|0))|0);
     $30 = (($4) + 64|0);
     HEAP32[$30>>2] = 0;
     $__rt = 0;
    }
   }
  } else {
   $__rt = 0;
  }
 }
 $31 = $__rt;
 STACKTOP = sp;return ($31|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($2);
 $3 = $2;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -12|0);
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($3) + ($8)|0);
 $10 = $9;
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($10);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -12|0);
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($3) + ($8)|0);
 $10 = $9;
 __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev($10);
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $vtt;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$6>>2] = $5;
 $7 = (($4) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -12|0);
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = $3;
 $15 = (($14) + ($13)|0);
 $16 = $15;
 HEAP32[$16>>2] = $8;
 $17 = (($3) + 8|0);
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev($17);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 $1 = $this;
 $4 = $1;
 $5 = $4;
 $6 = ((1544) + 8|0);
 HEAP32[$5>>2] = $6;
 __THREW__ = 0;
 (invoke_ii(71,($4|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 do {
  if ($8) {
   $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $10 = tempRet0;
   $2 = $9;
   $3 = $10;
   $11 = $2;
   (___cxa_begin_catch(($11|0))|0);
   __THREW__ = 0;
   invoke_v(5);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    break;
   }
   $20 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   $21 = tempRet0;
   $2 = $20;
   $3 = $21;
   $22 = $4;
   __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($22);
   __ZSt9terminatev();
   // unreachable;
  } else {
  }
 } while(0);
 $14 = (($4) + 96|0);
 $15 = HEAP8[$14]|0;
 $16 = $15&1;
 if ($16) {
  $17 = (($4) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if (!($19)) {
   __ZdaPv($18);
  }
 }
 $23 = (($4) + 97|0);
 $24 = HEAP8[$23]|0;
 $25 = $24&1;
 if (!($25)) {
  $29 = $4;
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($29);
  STACKTOP = sp;return;
 }
 $26 = (($4) + 56|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  __ZdaPv($27);
 }
 $29 = $4;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($29);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev($2);
 $3 = $2;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__old_anc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $10 = $this;
 $11 = $__loc;
 $12 = $10;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 (FUNCTION_TABLE_ii[$16 & 127]($12)|0);
 $17 = $11;
 $9 = $17;
 $18 = $9;
 $19 = (__ZNKSt3__16locale9use_facetERNS0_2idE($18,(9200))|0);
 $20 = $19;
 $21 = (($12) + 68|0);
 HEAP32[$21>>2] = $20;
 $22 = (($12) + 98|0);
 $23 = HEAP8[$22]|0;
 $24 = $23&1;
 $25 = $24&1;
 $__old_anc = $25;
 $26 = (($12) + 68|0);
 $27 = HEAP32[$26>>2]|0;
 $8 = $27;
 $28 = $8;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 28|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (FUNCTION_TABLE_ii[$32 & 127]($28)|0);
 $34 = (($12) + 98|0);
 $35 = $33&1;
 HEAP8[$34] = $35;
 $36 = $__old_anc;
 $37 = $36&1;
 $38 = $37&1;
 $39 = (($12) + 98|0);
 $40 = HEAP8[$39]|0;
 $41 = $40&1;
 $42 = $41&1;
 $43 = ($38|0)!=($42|0);
 if (!($43)) {
  STACKTOP = sp;return;
 }
 $44 = $12;
 $4 = $44;
 $5 = 0;
 $6 = 0;
 $7 = 0;
 $45 = $4;
 $46 = $5;
 $47 = (($45) + 8|0);
 HEAP32[$47>>2] = $46;
 $48 = $6;
 $49 = (($45) + 12|0);
 HEAP32[$49>>2] = $48;
 $50 = $7;
 $51 = (($45) + 16|0);
 HEAP32[$51>>2] = $50;
 $52 = $12;
 $1 = $52;
 $2 = 0;
 $3 = 0;
 $53 = $1;
 $54 = $2;
 $55 = (($53) + 24|0);
 HEAP32[$55>>2] = $54;
 $56 = (($53) + 20|0);
 HEAP32[$56>>2] = $54;
 $57 = $3;
 $58 = (($53) + 28|0);
 HEAP32[$58>>2] = $57;
 $59 = (($12) + 98|0);
 $60 = HEAP8[$59]|0;
 $61 = $60&1;
 if ($61) {
  $62 = (($12) + 96|0);
  $63 = HEAP8[$62]|0;
  $64 = $63&1;
  if ($64) {
   $65 = (($12) + 32|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)==(0|0);
   if (!($67)) {
    __ZdaPv($66);
   }
  }
  $68 = (($12) + 97|0);
  $69 = HEAP8[$68]|0;
  $70 = $69&1;
  $71 = (($12) + 96|0);
  $72 = $70&1;
  HEAP8[$71] = $72;
  $73 = (($12) + 60|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($12) + 52|0);
  HEAP32[$75>>2] = $74;
  $76 = (($12) + 56|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($12) + 32|0);
  HEAP32[$78>>2] = $77;
  $79 = (($12) + 60|0);
  HEAP32[$79>>2] = 0;
  $80 = (($12) + 56|0);
  HEAP32[$80>>2] = 0;
  $81 = (($12) + 97|0);
  HEAP8[$81] = 0;
 } else {
  $82 = (($12) + 96|0);
  $83 = HEAP8[$82]|0;
  $84 = $83&1;
  do {
   if ($84) {
    label = 11;
   } else {
    $85 = (($12) + 32|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (($12) + 44|0);
    $88 = ($87);
    $89 = ($86|0)!=($88|0);
    if (!($89)) {
     label = 11;
     break;
    }
    $90 = (($12) + 52|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = (($12) + 60|0);
    HEAP32[$92>>2] = $91;
    $93 = (($12) + 32|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (($12) + 56|0);
    HEAP32[$95>>2] = $94;
    $96 = (($12) + 97|0);
    HEAP8[$96] = 0;
    $97 = (($12) + 52|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (__Znaj($98)|0);
    $100 = (($12) + 32|0);
    HEAP32[$100>>2] = $99;
    $101 = (($12) + 96|0);
    HEAP8[$101] = 1;
   }
  } while(0);
  if ((label|0) == 11) {
   $102 = (($12) + 52|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (($12) + 60|0);
   HEAP32[$104>>2] = $103;
   $105 = (($12) + 60|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (__Znaj($106)|0);
   $108 = (($12) + 56|0);
   HEAP32[$108>>2] = $107;
   $109 = (($12) + 97|0);
   HEAP8[$109] = 1;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $tmp$i = 0, $tmp1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $9 = sp + 64|0;
 $12 = sp + 88|0;
 $19 = sp + 144|0;
 $20 = sp + 152|0;
 $17 = $this;
 $18 = $__s;
 HEAP32[$19>>2] = $__n;
 $21 = $17;
 $22 = $21;
 $13 = $22;
 $14 = 0;
 $15 = 0;
 $16 = 0;
 $23 = $13;
 $24 = $14;
 $25 = (($23) + 8|0);
 HEAP32[$25>>2] = $24;
 $26 = $15;
 $27 = (($23) + 12|0);
 HEAP32[$27>>2] = $26;
 $28 = $16;
 $29 = (($23) + 16|0);
 HEAP32[$29>>2] = $28;
 $30 = $21;
 $1 = $30;
 $2 = 0;
 $3 = 0;
 $31 = $1;
 $32 = $2;
 $33 = (($31) + 24|0);
 HEAP32[$33>>2] = $32;
 $34 = (($31) + 20|0);
 HEAP32[$34>>2] = $32;
 $35 = $3;
 $36 = (($31) + 28|0);
 HEAP32[$36>>2] = $35;
 $37 = (($21) + 96|0);
 $38 = HEAP8[$37]|0;
 $39 = $38&1;
 if ($39) {
  $40 = (($21) + 32|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   __ZdaPv($41);
  }
 }
 $43 = (($21) + 97|0);
 $44 = HEAP8[$43]|0;
 $45 = $44&1;
 if ($45) {
  $46 = (($21) + 56|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($47|0)==(0|0);
  if (!($48)) {
   __ZdaPv($47);
  }
 }
 $49 = HEAP32[$19>>2]|0;
 $50 = (($21) + 52|0);
 HEAP32[$50>>2] = $49;
 $51 = (($21) + 52|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52>>>0)>(8);
 if ($53) {
  $54 = (($21) + 98|0);
  $55 = HEAP8[$54]|0;
  $56 = $55&1;
  do {
   if ($56) {
    $57 = $18;
    $58 = ($57|0)!=(0|0);
    if (!($58)) {
     label = 13;
     break;
    }
    $59 = $18;
    $60 = (($21) + 32|0);
    HEAP32[$60>>2] = $59;
    $61 = (($21) + 96|0);
    HEAP8[$61] = 0;
   } else {
    label = 13;
   }
  } while(0);
  if ((label|0) == 13) {
   $62 = (($21) + 52|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (__Znaj($63)|0);
   $65 = (($21) + 32|0);
   HEAP32[$65>>2] = $64;
   $66 = (($21) + 96|0);
   HEAP8[$66] = 1;
  }
 } else {
  $67 = (($21) + 44|0);
  $68 = ($67);
  $69 = (($21) + 32|0);
  HEAP32[$69>>2] = $68;
  $70 = (($21) + 52|0);
  HEAP32[$70>>2] = 8;
  $71 = (($21) + 96|0);
  HEAP8[$71] = 0;
 }
 $72 = (($21) + 98|0);
 $73 = HEAP8[$72]|0;
 $74 = $73&1;
 if ($74) {
  $102 = (($21) + 60|0);
  HEAP32[$102>>2] = 0;
  $103 = (($21) + 56|0);
  HEAP32[$103>>2] = 0;
  $104 = (($21) + 97|0);
  HEAP8[$104] = 0;
  $105 = $21;
  STACKTOP = sp;return ($105|0);
 }
 HEAP32[$20>>2] = 8;
 $10 = $19;
 $11 = $20;
 $75 = $10;
 $76 = $11;
 $tmp$i = $9;
 $tmp1$i = $12;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
 $7 = $75;
 $8 = $76;
 $77 = $7;
 $78 = $8;
 $4 = $9;
 $5 = $77;
 $6 = $78;
 $79 = $5;
 $80 = HEAP32[$79>>2]|0;
 $81 = $6;
 $82 = HEAP32[$81>>2]|0;
 $83 = ($80|0)<($82|0);
 if ($83) {
  $84 = $8;
  $86 = $84;
 } else {
  $85 = $7;
  $86 = $85;
 }
 $87 = HEAP32[$86>>2]|0;
 $88 = (($21) + 60|0);
 HEAP32[$88>>2] = $87;
 $89 = $18;
 $90 = ($89|0)!=(0|0);
 do {
  if ($90) {
   $91 = (($21) + 60|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ($92>>>0)>=(8);
   if (!($93)) {
    label = 23;
    break;
   }
   $94 = $18;
   $95 = (($21) + 56|0);
   HEAP32[$95>>2] = $94;
   $96 = (($21) + 97|0);
   HEAP8[$96] = 0;
  } else {
   label = 23;
  }
 } while(0);
 if ((label|0) == 23) {
  $97 = (($21) + 60|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (__Znaj($98)|0);
  $100 = (($21) + 56|0);
  HEAP32[$100>>2] = $99;
  $101 = (($21) + 97|0);
  HEAP8[$101] = 1;
 }
 $105 = $21;
 STACKTOP = sp;return ($105|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$1,$2,$__way,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $1 = $1|0;
 $2 = $2|0;
 $__way = $__way|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r = 0, $__whence = 0, $__width = 0, $tmp = 0, $tmp1 = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $5 = sp + 8|0;
 $7 = sp + 24|0;
 $9 = sp + 40|0;
 $11 = sp + 56|0;
 $13 = sp + 72|0;
 $15 = sp + 88|0;
 $17 = sp + 104|0;
 $19 = sp + 120|0;
 $21 = sp + 136|0;
 $24 = sp + 160|0;
 $__r = sp + 200|0;
 $27 = sp + 216|0;
 $23 = $this;
 $28 = $24;
 $29 = $28;
 HEAP32[$29>>2] = $1;
 $30 = (($28) + 4)|0;
 $31 = $30;
 HEAP32[$31>>2] = $2;
 $25 = $__way;
 $26 = $3;
 $32 = $23;
 $33 = (($32) + 68|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)!=(0|0);
 if (!($35)) {
  $36 = (___cxa_allocate_exception(4)|0);
  $37 = $36;
  __ZNSt8bad_castC2Ev($37);
  ___cxa_throw(($36|0),((17096)|0),((143)|0));
  // unreachable;
 }
 $38 = (($32) + 68|0);
 $39 = HEAP32[$38>>2]|0;
 $22 = $39;
 $40 = $22;
 $41 = $40;
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + 24|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (FUNCTION_TABLE_ii[$44 & 127]($40)|0);
 $__width = $45;
 $46 = (($32) + 64|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)==(0|0);
 do {
  if (!($48)) {
   $49 = $__width;
   $50 = ($49|0)<=(0);
   if ($50) {
    $51 = $24;
    $52 = $51;
    $53 = HEAP32[$52>>2]|0;
    $54 = (($51) + 4)|0;
    $55 = $54;
    $56 = HEAP32[$55>>2]|0;
    $57 = ($53|0)!=(0);
    $58 = ($56|0)!=(0);
    $59 = $57 | $58;
    if ($59) {
     break;
    }
   }
   $60 = $32;
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + 24|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (FUNCTION_TABLE_ii[$63 & 127]($32)|0);
   $65 = ($64|0)!=(0);
   if ($65) {
    break;
   }
   $95 = $25;
   if ((($95|0) == 0)) {
    $__whence = 0;
   } else if ((($95|0) == 1)) {
    $__whence = 1;
   } else if ((($95|0) == 2)) {
    $__whence = 2;
   } else {
    $6 = $agg$result;
    $96 = $7;
    $97 = $96;
    HEAP32[$97>>2] = -1;
    $98 = (($96) + 4)|0;
    $99 = $98;
    HEAP32[$99>>2] = -1;
    $100 = $6;
    $101 = $7;
    $102 = $101;
    $103 = HEAP32[$102>>2]|0;
    $104 = (($101) + 4)|0;
    $105 = $104;
    $106 = HEAP32[$105>>2]|0;
    $4 = $100;
    $107 = $5;
    $108 = $107;
    HEAP32[$108>>2] = $103;
    $109 = (($107) + 4)|0;
    $110 = $109;
    HEAP32[$110>>2] = $106;
    $111 = $4;
    $112 = ($111);
    $113 = $112;
    ;HEAP32[$113+0>>2]=0|0;HEAP32[$113+4>>2]=0|0;
    $114 = (($111) + 8|0);
    $115 = $5;
    $116 = $115;
    $117 = HEAP32[$116>>2]|0;
    $118 = (($115) + 4)|0;
    $119 = $118;
    $120 = HEAP32[$119>>2]|0;
    $121 = $114;
    $122 = $121;
    HEAP32[$122>>2] = $117;
    $123 = (($121) + 4)|0;
    $124 = $123;
    HEAP32[$124>>2] = $120;
    STACKTOP = sp;return;
   }
   $125 = (($32) + 64|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = $__width;
   $128 = ($127|0)>(0);
   if ($128) {
    $129 = $__width;
    $130 = ($129|0)<(0);
    $131 = $130 << 31 >> 31;
    $132 = $24;
    $133 = $132;
    $134 = HEAP32[$133>>2]|0;
    $135 = (($132) + 4)|0;
    $136 = $135;
    $137 = HEAP32[$136>>2]|0;
    $138 = (___muldi3(($129|0),($131|0),($134|0),($137|0))|0);
    $139 = tempRet0;
    $140 = $138;u$0 = $139;
   } else {
    $140 = 0;u$0 = 0;
   }
   $141 = $__whence;
   $142 = (_fseek(($126|0),($140|0),($141|0))|0);
   $143 = ($142|0)!=(0);
   if ($143) {
    $10 = $agg$result;
    $144 = $11;
    $145 = $144;
    HEAP32[$145>>2] = -1;
    $146 = (($144) + 4)|0;
    $147 = $146;
    HEAP32[$147>>2] = -1;
    $148 = $10;
    $149 = $11;
    $150 = $149;
    $151 = HEAP32[$150>>2]|0;
    $152 = (($149) + 4)|0;
    $153 = $152;
    $154 = HEAP32[$153>>2]|0;
    $8 = $148;
    $155 = $9;
    $156 = $155;
    HEAP32[$156>>2] = $151;
    $157 = (($155) + 4)|0;
    $158 = $157;
    HEAP32[$158>>2] = $154;
    $159 = $8;
    $160 = ($159);
    $161 = $160;
    ;HEAP32[$161+0>>2]=0|0;HEAP32[$161+4>>2]=0|0;
    $162 = (($159) + 8|0);
    $163 = $9;
    $164 = $163;
    $165 = HEAP32[$164>>2]|0;
    $166 = (($163) + 4)|0;
    $167 = $166;
    $168 = HEAP32[$167>>2]|0;
    $169 = $162;
    $170 = $169;
    HEAP32[$170>>2] = $165;
    $171 = (($169) + 4)|0;
    $172 = $171;
    HEAP32[$172>>2] = $168;
    STACKTOP = sp;return;
   } else {
    $173 = (($32) + 64|0);
    $174 = HEAP32[$173>>2]|0;
    $175 = (_ftell(($174|0))|0);
    $176 = ($175|0)<(0);
    $177 = $176 << 31 >> 31;
    $14 = $__r;
    $178 = $15;
    $179 = $178;
    HEAP32[$179>>2] = $175;
    $180 = (($178) + 4)|0;
    $181 = $180;
    HEAP32[$181>>2] = $177;
    $182 = $14;
    $183 = $15;
    $184 = $183;
    $185 = HEAP32[$184>>2]|0;
    $186 = (($183) + 4)|0;
    $187 = $186;
    $188 = HEAP32[$187>>2]|0;
    $12 = $182;
    $189 = $13;
    $190 = $189;
    HEAP32[$190>>2] = $185;
    $191 = (($189) + 4)|0;
    $192 = $191;
    HEAP32[$192>>2] = $188;
    $193 = $12;
    $194 = ($193);
    $195 = $194;
    ;HEAP32[$195+0>>2]=0|0;HEAP32[$195+4>>2]=0|0;
    $196 = (($193) + 8|0);
    $197 = $13;
    $198 = $197;
    $199 = HEAP32[$198>>2]|0;
    $200 = (($197) + 4)|0;
    $201 = $200;
    $202 = HEAP32[$201>>2]|0;
    $203 = $196;
    $204 = $203;
    HEAP32[$204>>2] = $199;
    $205 = (($203) + 4)|0;
    $206 = $205;
    HEAP32[$206>>2] = $202;
    $207 = (($32) + 72|0);
    $208 = $27;
    $209 = $207;
    ;HEAP32[$208+0>>2]=HEAP32[$209+0>>2]|0;HEAP32[$208+4>>2]=HEAP32[$209+4>>2]|0;
    $tmp = $17;
    $tmp1 = $27;
    ;HEAP8[$tmp+0|0]=HEAP8[$tmp1+0|0]|0;HEAP8[$tmp+1|0]=HEAP8[$tmp1+1|0]|0;HEAP8[$tmp+2|0]=HEAP8[$tmp1+2|0]|0;HEAP8[$tmp+3|0]=HEAP8[$tmp1+3|0]|0;HEAP8[$tmp+4|0]=HEAP8[$tmp1+4|0]|0;HEAP8[$tmp+5|0]=HEAP8[$tmp1+5|0]|0;HEAP8[$tmp+6|0]=HEAP8[$tmp1+6|0]|0;HEAP8[$tmp+7|0]=HEAP8[$tmp1+7|0]|0;
    $16 = $__r;
    $210 = $16;
    $211 = ($210);
    $212 = $211;
    $213 = $17;
    ;HEAP32[$212+0>>2]=HEAP32[$213+0>>2]|0;HEAP32[$212+4>>2]=HEAP32[$213+4>>2]|0;
    $214 = $agg$result;
    $215 = $__r;
    ;HEAP32[$214+0>>2]=HEAP32[$215+0>>2]|0;HEAP32[$214+4>>2]=HEAP32[$215+4>>2]|0;HEAP32[$214+8>>2]=HEAP32[$215+8>>2]|0;HEAP32[$214+12>>2]=HEAP32[$215+12>>2]|0;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $20 = $agg$result;
 $66 = $21;
 $67 = $66;
 HEAP32[$67>>2] = -1;
 $68 = (($66) + 4)|0;
 $69 = $68;
 HEAP32[$69>>2] = -1;
 $70 = $20;
 $71 = $21;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = (($71) + 4)|0;
 $75 = $74;
 $76 = HEAP32[$75>>2]|0;
 $18 = $70;
 $77 = $19;
 $78 = $77;
 HEAP32[$78>>2] = $73;
 $79 = (($77) + 4)|0;
 $80 = $79;
 HEAP32[$80>>2] = $76;
 $81 = $18;
 $82 = ($81);
 $83 = $82;
 ;HEAP32[$83+0>>2]=0|0;HEAP32[$83+4>>2]=0|0;
 $84 = (($81) + 8|0);
 $85 = $19;
 $86 = $85;
 $87 = HEAP32[$86>>2]|0;
 $88 = (($85) + 4)|0;
 $89 = $88;
 $90 = HEAP32[$89>>2]|0;
 $91 = $84;
 $92 = $91;
 HEAP32[$92>>2] = $87;
 $93 = (($91) + 4)|0;
 $94 = $93;
 HEAP32[$94>>2] = $90;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$__sp,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__sp = $__sp|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 104|0;
 $4 = sp + 16|0;
 $6 = sp + 32|0;
 $9 = sp + 56|0;
 $11 = sp + 72|0;
 $14 = sp + 96|0;
 $12 = $this;
 $13 = $1;
 $15 = $12;
 $16 = (($15) + 64|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 do {
  if (!($18)) {
   $19 = $15;
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + 24|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (FUNCTION_TABLE_ii[$22 & 127]($15)|0);
   $24 = ($23|0)!=(0);
   if ($24) {
    break;
   }
   $54 = (($15) + 64|0);
   $55 = HEAP32[$54>>2]|0;
   $2 = $__sp;
   $56 = $2;
   $57 = (($56) + 8|0);
   $58 = $57;
   $59 = $58;
   $60 = HEAP32[$59>>2]|0;
   $61 = (($58) + 4)|0;
   $62 = $61;
   u$0 = HEAP32[$62>>2]|0;
   $63 = (_fseek(($55|0),($60|0),0)|0);
   $64 = ($63|0)!=(0);
   if ($64) {
    $5 = $agg$result;
    $65 = $6;
    $66 = $65;
    HEAP32[$66>>2] = -1;
    $67 = (($65) + 4)|0;
    $68 = $67;
    HEAP32[$68>>2] = -1;
    $69 = $5;
    $70 = $6;
    $71 = $70;
    $72 = HEAP32[$71>>2]|0;
    $73 = (($70) + 4)|0;
    $74 = $73;
    $75 = HEAP32[$74>>2]|0;
    $3 = $69;
    $76 = $4;
    $77 = $76;
    HEAP32[$77>>2] = $72;
    $78 = (($76) + 4)|0;
    $79 = $78;
    HEAP32[$79>>2] = $75;
    $80 = $3;
    $81 = ($80);
    $82 = $81;
    ;HEAP32[$82+0>>2]=0|0;HEAP32[$82+4>>2]=0|0;
    $83 = (($80) + 8|0);
    $84 = $4;
    $85 = $84;
    $86 = HEAP32[$85>>2]|0;
    $87 = (($84) + 4)|0;
    $88 = $87;
    $89 = HEAP32[$88>>2]|0;
    $90 = $83;
    $91 = $90;
    HEAP32[$91>>2] = $86;
    $92 = (($90) + 4)|0;
    $93 = $92;
    HEAP32[$93>>2] = $89;
    STACKTOP = sp;return;
   } else {
    $94 = (($15) + 72|0);
    $7 = $__sp;
    $95 = $7;
    $96 = ($95);
    $97 = $14;
    $98 = $96;
    ;HEAP32[$97+0>>2]=HEAP32[$98+0>>2]|0;HEAP32[$97+4>>2]=HEAP32[$98+4>>2]|0;
    $99 = $94;
    $100 = $14;
    ;HEAP32[$99+0>>2]=HEAP32[$100+0>>2]|0;HEAP32[$99+4>>2]=HEAP32[$100+4>>2]|0;
    $101 = $agg$result;
    $102 = $__sp;
    ;HEAP32[$101+0>>2]=HEAP32[$102+0>>2]|0;HEAP32[$101+4>>2]=HEAP32[$102+4>>2]|0;HEAP32[$101+8>>2]=HEAP32[$102+8>>2]|0;HEAP32[$101+12>>2]=HEAP32[$102+12>>2]|0;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $10 = $agg$result;
 $25 = $11;
 $26 = $25;
 HEAP32[$26>>2] = -1;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = -1;
 $29 = $10;
 $30 = $11;
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($30) + 4)|0;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $8 = $29;
 $36 = $9;
 $37 = $36;
 HEAP32[$37>>2] = $32;
 $38 = (($36) + 4)|0;
 $39 = $38;
 HEAP32[$39>>2] = $35;
 $40 = $8;
 $41 = ($40);
 $42 = $41;
 ;HEAP32[$42+0>>2]=0|0;HEAP32[$42+4>>2]=0|0;
 $43 = (($40) + 8|0);
 $44 = $9;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = (($44) + 4)|0;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = $43;
 $51 = $50;
 HEAP32[$51>>2] = $46;
 $52 = (($50) + 4)|0;
 $53 = $52;
 HEAP32[$53>>2] = $49;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__c = 0, $__extbe = 0, $__nmemb = 0, $__off = 0, $__r = 0, $__state = 0, $__update_st = 0, $__width = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 280|0;
 $__extbe = sp + 224|0;
 $__c = sp + 240|0;
 $__state = sp + 248|0;
 $27 = $this;
 $28 = $27;
 $29 = (($28) + 64|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)==(0|0);
 if ($31) {
  $26 = 0;
  $263 = $26;
  STACKTOP = sp;return ($263|0);
 }
 $32 = (($28) + 68|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if (!($34)) {
  $35 = (___cxa_allocate_exception(4)|0);
  $36 = $35;
  __ZNSt8bad_castC2Ev($36);
  ___cxa_throw(($35|0),((17096)|0),((143)|0));
  // unreachable;
 }
 $37 = (($28) + 92|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $38 & 16;
 $40 = ($39|0)!=(0);
 do {
  if ($40) {
   $41 = $28;
   $25 = $41;
   $42 = $25;
   $43 = (($42) + 24|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $28;
   $15 = $45;
   $46 = $15;
   $47 = (($46) + 20|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($44|0)!=($48|0);
   do {
    if ($49) {
     $50 = $28;
     $51 = HEAP32[$50>>2]|0;
     $52 = (($51) + 52|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = (FUNCTION_TABLE_iii[$53 & 63]($28,-1)|0);
     $55 = ($54|0)==(-1);
     if (!($55)) {
      break;
     }
     $26 = -1;
     $263 = $26;
     STACKTOP = sp;return ($263|0);
    }
   } while(0);
   while(1) {
    $56 = (($28) + 68|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = (($28) + 72|0);
    $59 = (($28) + 32|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (($28) + 32|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = (($28) + 52|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = (($62) + ($64)|0);
    $1 = $57;
    $2 = $58;
    $3 = $60;
    $4 = $65;
    $5 = $__extbe;
    $66 = $1;
    $67 = $66;
    $68 = HEAP32[$67>>2]|0;
    $69 = (($68) + 20|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = $2;
    $72 = $3;
    $73 = $4;
    $74 = $5;
    $75 = (FUNCTION_TABLE_iiiiii[$70 & 31]($66,$71,$72,$73,$74)|0);
    $__r = $75;
    $76 = HEAP32[$__extbe>>2]|0;
    $77 = (($28) + 32|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = $76;
    $80 = $78;
    $81 = (($79) - ($80))|0;
    $__nmemb = $81;
    $82 = (($28) + 32|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = $__nmemb;
    $85 = (($28) + 64|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = (_fwrite(($83|0),1,($84|0),($86|0))|0);
    $88 = $__nmemb;
    $89 = ($87|0)!=($88|0);
    if ($89) {
     label = 12;
     break;
    }
    $90 = $__r;
    $91 = ($90|0)==(1);
    if (!($91)) {
     break;
    }
   }
   if ((label|0) == 12) {
    $26 = -1;
    $263 = $26;
    STACKTOP = sp;return ($263|0);
   }
   $92 = $__r;
   $93 = ($92|0)==(2);
   if ($93) {
    $26 = -1;
    $263 = $26;
    STACKTOP = sp;return ($263|0);
   }
   $94 = (($28) + 64|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (_fflush(($95|0))|0);
   $97 = ($96|0)!=(0);
   if (!($97)) {
    break;
   }
   $26 = -1;
   $263 = $26;
   STACKTOP = sp;return ($263|0);
  } else {
   $98 = (($28) + 92|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = $99 & 8;
   $101 = ($100|0)!=(0);
   if ($101) {
    $102 = (($28) + 80|0);
    $103 = $__state;
    $104 = $102;
    ;HEAP32[$103+0>>2]=HEAP32[$104+0>>2]|0;HEAP32[$103+4>>2]=HEAP32[$104+4>>2]|0;
    $__update_st = 0;
    $105 = (($28) + 98|0);
    $106 = HEAP8[$105]|0;
    $107 = $106&1;
    if ($107) {
     $108 = $28;
     $6 = $108;
     $109 = $6;
     $110 = (($109) + 16|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = $28;
     $7 = $112;
     $113 = $7;
     $114 = (($113) + 12|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = $111;
     $117 = $115;
     $118 = (($116) - ($117))|0;
     $119 = ($118|0)<(0);
     $120 = $119 << 31 >> 31;
     $121 = $__c;
     $122 = $121;
     HEAP32[$122>>2] = $118;
     $123 = (($121) + 4)|0;
     $124 = $123;
     HEAP32[$124>>2] = $120;
    } else {
     $125 = (($28) + 68|0);
     $126 = HEAP32[$125>>2]|0;
     $8 = $126;
     $127 = $8;
     $128 = $127;
     $129 = HEAP32[$128>>2]|0;
     $130 = (($129) + 24|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (FUNCTION_TABLE_ii[$131 & 127]($127)|0);
     $__width = $132;
     $133 = (($28) + 40|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = (($28) + 36|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $134;
     $138 = $136;
     $139 = (($137) - ($138))|0;
     $140 = ($139|0)<(0);
     $141 = $140 << 31 >> 31;
     $142 = $__c;
     $143 = $142;
     HEAP32[$143>>2] = $139;
     $144 = (($142) + 4)|0;
     $145 = $144;
     HEAP32[$145>>2] = $141;
     $146 = $__width;
     $147 = ($146|0)>(0);
     if ($147) {
      $148 = $__width;
      $149 = $28;
      $9 = $149;
      $150 = $9;
      $151 = (($150) + 16|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = $28;
      $10 = $153;
      $154 = $10;
      $155 = (($154) + 12|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = $152;
      $158 = $156;
      $159 = (($157) - ($158))|0;
      $160 = Math_imul($148, $159)|0;
      $161 = ($160|0)<(0);
      $162 = $161 << 31 >> 31;
      $163 = $__c;
      $164 = $163;
      $165 = HEAP32[$164>>2]|0;
      $166 = (($163) + 4)|0;
      $167 = $166;
      $168 = HEAP32[$167>>2]|0;
      $169 = (_i64Add(($165|0),($168|0),($160|0),($162|0))|0);
      $170 = tempRet0;
      $171 = $__c;
      $172 = $171;
      HEAP32[$172>>2] = $169;
      $173 = (($171) + 4)|0;
      $174 = $173;
      HEAP32[$174>>2] = $170;
     } else {
      $175 = $28;
      $11 = $175;
      $176 = $11;
      $177 = (($176) + 12|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = $28;
      $12 = $179;
      $180 = $12;
      $181 = (($180) + 16|0);
      $182 = HEAP32[$181>>2]|0;
      $183 = ($178|0)!=($182|0);
      if ($183) {
       $184 = (($28) + 68|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = (($28) + 32|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = (($28) + 36|0);
       $189 = HEAP32[$188>>2]|0;
       $190 = $28;
       $13 = $190;
       $191 = $13;
       $192 = (($191) + 12|0);
       $193 = HEAP32[$192>>2]|0;
       $194 = $28;
       $14 = $194;
       $195 = $14;
       $196 = (($195) + 8|0);
       $197 = HEAP32[$196>>2]|0;
       $198 = $193;
       $199 = $197;
       $200 = (($198) - ($199))|0;
       $16 = $185;
       $17 = $__state;
       $18 = $187;
       $19 = $189;
       $20 = $200;
       $201 = $16;
       $202 = $201;
       $203 = HEAP32[$202>>2]|0;
       $204 = (($203) + 32|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = $17;
       $207 = $18;
       $208 = $19;
       $209 = $20;
       $210 = (FUNCTION_TABLE_iiiiii[$205 & 31]($201,$206,$207,$208,$209)|0);
       $__off = $210;
       $211 = (($28) + 36|0);
       $212 = HEAP32[$211>>2]|0;
       $213 = (($28) + 32|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = $212;
       $216 = $214;
       $217 = (($215) - ($216))|0;
       $218 = $__off;
       $219 = (($217) - ($218))|0;
       $220 = ($219|0)<(0);
       $221 = $220 << 31 >> 31;
       $222 = $__c;
       $223 = $222;
       $224 = HEAP32[$223>>2]|0;
       $225 = (($222) + 4)|0;
       $226 = $225;
       $227 = HEAP32[$226>>2]|0;
       $228 = (_i64Add(($224|0),($227|0),($219|0),($221|0))|0);
       $229 = tempRet0;
       $230 = $__c;
       $231 = $230;
       HEAP32[$231>>2] = $228;
       $232 = (($230) + 4)|0;
       $233 = $232;
       HEAP32[$233>>2] = $229;
       $__update_st = 1;
      }
     }
    }
    $234 = (($28) + 64|0);
    $235 = HEAP32[$234>>2]|0;
    $236 = $__c;
    $237 = $236;
    $238 = HEAP32[$237>>2]|0;
    $239 = (($236) + 4)|0;
    $240 = $239;
    $241 = HEAP32[$240>>2]|0;
    $242 = (_i64Subtract(0,0,($238|0),($241|0))|0);
    u$0 = tempRet0;
    $243 = (_fseek(($235|0),($242|0),1)|0);
    $244 = ($243|0)!=(0);
    if ($244) {
     $26 = -1;
     $263 = $26;
     STACKTOP = sp;return ($263|0);
    }
    $245 = $__update_st;
    $246 = $245&1;
    if ($246) {
     $247 = (($28) + 72|0);
     $248 = $247;
     $249 = $__state;
     ;HEAP32[$248+0>>2]=HEAP32[$249+0>>2]|0;HEAP32[$248+4>>2]=HEAP32[$249+4>>2]|0;
    }
    $250 = (($28) + 32|0);
    $251 = HEAP32[$250>>2]|0;
    $252 = (($28) + 40|0);
    HEAP32[$252>>2] = $251;
    $253 = (($28) + 36|0);
    HEAP32[$253>>2] = $251;
    $254 = $28;
    $21 = $254;
    $22 = 0;
    $23 = 0;
    $24 = 0;
    $255 = $21;
    $256 = $22;
    $257 = (($255) + 8|0);
    HEAP32[$257>>2] = $256;
    $258 = $23;
    $259 = (($255) + 12|0);
    HEAP32[$259>>2] = $258;
    $260 = $24;
    $261 = (($255) + 16|0);
    HEAP32[$261>>2] = $260;
    $262 = (($28) + 92|0);
    HEAP32[$262>>2] = 0;
   }
  }
 } while(0);
 $26 = 0;
 $263 = $26;
 STACKTOP = sp;return ($263|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__1buf = 0, $__c = 0, $__inext = 0, $__initial = 0, $__nmemb = 0, $__nmemb1 = 0, $__nr = 0, $__r = 0, $__unget_sz = 0, $tmp$i = 0, $tmp$i2 = 0, $tmp1$i = 0, $tmp1$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0;
 $12 = sp + 88|0;
 $15 = sp + 112|0;
 $37 = sp + 288|0;
 $40 = sp + 312|0;
 $__1buf = sp + 608|0;
 $76 = sp + 624|0;
 $77 = sp + 632|0;
 $78 = sp + 664|0;
 $79 = sp + 672|0;
 $__inext = sp + 696|0;
 $75 = $this;
 $80 = $75;
 $81 = (($80) + 64|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ($82|0)==(0|0);
 if ($83) {
  $74 = -1;
  $404 = $74;
  STACKTOP = sp;return ($404|0);
 }
 $84 = (__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($80)|0);
 $85 = $84&1;
 $__initial = $85;
 $86 = $80;
 $43 = $86;
 $87 = $43;
 $88 = (($87) + 12|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)==(0|0);
 if ($90) {
  $91 = $80;
  $92 = (($__1buf) + 1|0);
  $93 = (($__1buf) + 1|0);
  $1 = $91;
  $2 = $__1buf;
  $3 = $92;
  $4 = $93;
  $94 = $1;
  $95 = $2;
  $96 = (($94) + 8|0);
  HEAP32[$96>>2] = $95;
  $97 = $3;
  $98 = (($94) + 12|0);
  HEAP32[$98>>2] = $97;
  $99 = $4;
  $100 = (($94) + 16|0);
  HEAP32[$100>>2] = $99;
 }
 $101 = $__initial;
 $102 = $101&1;
 if ($102) {
  $128 = 0;
 } else {
  $103 = $80;
  $5 = $103;
  $104 = $5;
  $105 = (($104) + 16|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = $80;
  $6 = $107;
  $108 = $6;
  $109 = (($108) + 8|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = $106;
  $112 = $110;
  $113 = (($111) - ($112))|0;
  $114 = (($113|0) / 2)&-1;
  HEAP32[$76>>2] = $114;
  HEAP32[$77>>2] = 4;
  $13 = $76;
  $14 = $77;
  $115 = $13;
  $116 = $14;
  $tmp$i2 = $12;
  $tmp1$i3 = $15;
  ;HEAP8[$tmp$i2+0|0]=HEAP8[$tmp1$i3+0|0]|0;
  $10 = $115;
  $11 = $116;
  $117 = $11;
  $118 = $10;
  $7 = $12;
  $8 = $117;
  $9 = $118;
  $119 = $8;
  $120 = HEAP32[$119>>2]|0;
  $121 = $9;
  $122 = HEAP32[$121>>2]|0;
  $123 = ($120>>>0)<($122>>>0);
  if ($123) {
   $124 = $11;
   $126 = $124;
  } else {
   $125 = $10;
   $126 = $125;
  }
  $127 = HEAP32[$126>>2]|0;
  $128 = $127;
 }
 $__unget_sz = $128;
 $__c = -1;
 $129 = $80;
 $16 = $129;
 $130 = $16;
 $131 = (($130) + 12|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = $80;
 $17 = $133;
 $134 = $17;
 $135 = (($134) + 16|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = ($132|0)==($136|0);
 if ($137) {
  $138 = $80;
  $18 = $138;
  $139 = $18;
  $140 = (($139) + 8|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = $80;
  $19 = $142;
  $143 = $19;
  $144 = (($143) + 16|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = $__unget_sz;
  $147 = (0 - ($146))|0;
  $148 = (($145) + ($147)|0);
  $149 = $__unget_sz;
  $150 = $149;
  _memmove(($141|0),($148|0),($150|0))|0;
  $151 = (($80) + 98|0);
  $152 = HEAP8[$151]|0;
  $153 = $152&1;
  if ($153) {
   $154 = $80;
   $20 = $154;
   $155 = $20;
   $156 = (($155) + 16|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = $80;
   $21 = $158;
   $159 = $21;
   $160 = (($159) + 8|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = $157;
   $163 = $161;
   $164 = (($162) - ($163))|0;
   $165 = $__unget_sz;
   $166 = (($164) - ($165))|0;
   $__nmemb = $166;
   $167 = $80;
   $22 = $167;
   $168 = $22;
   $169 = (($168) + 8|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = $__unget_sz;
   $172 = (($170) + ($171)|0);
   $173 = $__nmemb;
   $174 = (($80) + 64|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = (_fread(($172|0),1,($173|0),($175|0))|0);
   $__nmemb = $176;
   $177 = $__nmemb;
   $178 = ($177|0)!=(0);
   if ($178) {
    $179 = $80;
    $180 = $80;
    $23 = $180;
    $181 = $23;
    $182 = (($181) + 8|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = $80;
    $24 = $184;
    $185 = $24;
    $186 = (($185) + 8|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = $__unget_sz;
    $189 = (($187) + ($188)|0);
    $190 = $80;
    $25 = $190;
    $191 = $25;
    $192 = (($191) + 8|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = $__unget_sz;
    $195 = (($193) + ($194)|0);
    $196 = $__nmemb;
    $197 = (($195) + ($196)|0);
    $26 = $179;
    $27 = $183;
    $28 = $189;
    $29 = $197;
    $198 = $26;
    $199 = $27;
    $200 = (($198) + 8|0);
    HEAP32[$200>>2] = $199;
    $201 = $28;
    $202 = (($198) + 12|0);
    HEAP32[$202>>2] = $201;
    $203 = $29;
    $204 = (($198) + 16|0);
    HEAP32[$204>>2] = $203;
    $205 = $80;
    $30 = $205;
    $206 = $30;
    $207 = (($206) + 12|0);
    $208 = HEAP32[$207>>2]|0;
    $209 = HEAP8[$208]|0;
    $31 = $209;
    $210 = $31;
    $211 = $210&255;
    $__c = $211;
   }
  } else {
   $212 = (($80) + 32|0);
   $213 = HEAP32[$212>>2]|0;
   $214 = (($80) + 36|0);
   $215 = HEAP32[$214>>2]|0;
   $216 = (($80) + 40|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = (($80) + 36|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = $217;
   $221 = $219;
   $222 = (($220) - ($221))|0;
   _memmove(($213|0),($215|0),($222|0))|0;
   $223 = (($80) + 32|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = (($80) + 40|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = (($80) + 36|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = $226;
   $230 = $228;
   $231 = (($229) - ($230))|0;
   $232 = (($224) + ($231)|0);
   $233 = (($80) + 36|0);
   HEAP32[$233>>2] = $232;
   $234 = (($80) + 32|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = (($80) + 32|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = (($80) + 44|0);
   $239 = ($238);
   $240 = ($237|0)==($239|0);
   if ($240) {
    $243 = 8;
   } else {
    $241 = (($80) + 52|0);
    $242 = HEAP32[$241>>2]|0;
    $243 = $242;
   }
   $244 = (($235) + ($243)|0);
   $245 = (($80) + 40|0);
   HEAP32[$245>>2] = $244;
   $246 = (($80) + 60|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = $__unget_sz;
   $249 = (($247) - ($248))|0;
   HEAP32[$78>>2] = $249;
   $250 = (($80) + 40|0);
   $251 = HEAP32[$250>>2]|0;
   $252 = (($80) + 36|0);
   $253 = HEAP32[$252>>2]|0;
   $254 = $251;
   $255 = $253;
   $256 = (($254) - ($255))|0;
   HEAP32[$79>>2] = $256;
   $38 = $78;
   $39 = $79;
   $257 = $38;
   $258 = $39;
   $tmp$i = $37;
   $tmp1$i = $40;
   ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
   $35 = $257;
   $36 = $258;
   $259 = $36;
   $260 = $35;
   $32 = $37;
   $33 = $259;
   $34 = $260;
   $261 = $33;
   $262 = HEAP32[$261>>2]|0;
   $263 = $34;
   $264 = HEAP32[$263>>2]|0;
   $265 = ($262>>>0)<($264>>>0);
   if ($265) {
    $266 = $36;
    $268 = $266;
   } else {
    $267 = $35;
    $268 = $267;
   }
   $269 = HEAP32[$268>>2]|0;
   $__nmemb1 = $269;
   $270 = (($80) + 80|0);
   $271 = (($80) + 72|0);
   $272 = $270;
   $273 = $271;
   ;HEAP32[$272+0>>2]=HEAP32[$273+0>>2]|0;HEAP32[$272+4>>2]=HEAP32[$273+4>>2]|0;
   $274 = (($80) + 36|0);
   $275 = HEAP32[$274>>2]|0;
   $276 = $__nmemb1;
   $277 = (($80) + 64|0);
   $278 = HEAP32[$277>>2]|0;
   $279 = (_fread(($275|0),1,($276|0),($278|0))|0);
   $__nr = $279;
   $280 = $__nr;
   $281 = ($280|0)!=(0);
   if ($281) {
    $282 = (($80) + 68|0);
    $283 = HEAP32[$282>>2]|0;
    $284 = ($283|0)!=(0|0);
    if (!($284)) {
     $285 = (___cxa_allocate_exception(4)|0);
     $286 = $285;
     __ZNSt8bad_castC2Ev($286);
     ___cxa_throw(($285|0),((17096)|0),((143)|0));
     // unreachable;
    }
    $287 = (($80) + 36|0);
    $288 = HEAP32[$287>>2]|0;
    $289 = $__nr;
    $290 = (($288) + ($289)|0);
    $291 = (($80) + 40|0);
    HEAP32[$291>>2] = $290;
    $292 = (($80) + 68|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = (($80) + 72|0);
    $295 = (($80) + 32|0);
    $296 = HEAP32[$295>>2]|0;
    $297 = (($80) + 40|0);
    $298 = HEAP32[$297>>2]|0;
    $299 = (($80) + 36|0);
    $300 = $80;
    $41 = $300;
    $301 = $41;
    $302 = (($301) + 8|0);
    $303 = HEAP32[$302>>2]|0;
    $304 = $__unget_sz;
    $305 = (($303) + ($304)|0);
    $306 = $80;
    $42 = $306;
    $307 = $42;
    $308 = (($307) + 8|0);
    $309 = HEAP32[$308>>2]|0;
    $310 = (($80) + 60|0);
    $311 = HEAP32[$310>>2]|0;
    $312 = (($309) + ($311)|0);
    $44 = $293;
    $45 = $294;
    $46 = $296;
    $47 = $298;
    $48 = $299;
    $49 = $305;
    $50 = $312;
    $51 = $__inext;
    $313 = $44;
    $314 = $313;
    $315 = HEAP32[$314>>2]|0;
    $316 = (($315) + 16|0);
    $317 = HEAP32[$316>>2]|0;
    $318 = $45;
    $319 = $46;
    $320 = $47;
    $321 = $48;
    $322 = $49;
    $323 = $50;
    $324 = $51;
    $325 = (FUNCTION_TABLE_iiiiiiiii[$317 & 15]($313,$318,$319,$320,$321,$322,$323,$324)|0);
    $__r = $325;
    $326 = $__r;
    $327 = ($326|0)==(3);
    if ($327) {
     $328 = $80;
     $329 = (($80) + 32|0);
     $330 = HEAP32[$329>>2]|0;
     $331 = (($80) + 32|0);
     $332 = HEAP32[$331>>2]|0;
     $333 = (($80) + 40|0);
     $334 = HEAP32[$333>>2]|0;
     $52 = $328;
     $53 = $330;
     $54 = $332;
     $55 = $334;
     $335 = $52;
     $336 = $53;
     $337 = (($335) + 8|0);
     HEAP32[$337>>2] = $336;
     $338 = $54;
     $339 = (($335) + 12|0);
     HEAP32[$339>>2] = $338;
     $340 = $55;
     $341 = (($335) + 16|0);
     HEAP32[$341>>2] = $340;
     $342 = $80;
     $56 = $342;
     $343 = $56;
     $344 = (($343) + 12|0);
     $345 = HEAP32[$344>>2]|0;
     $346 = HEAP8[$345]|0;
     $57 = $346;
     $347 = $57;
     $348 = $347&255;
     $__c = $348;
    } else {
     $349 = HEAP32[$__inext>>2]|0;
     $350 = $80;
     $58 = $350;
     $351 = $58;
     $352 = (($351) + 8|0);
     $353 = HEAP32[$352>>2]|0;
     $354 = $__unget_sz;
     $355 = (($353) + ($354)|0);
     $356 = ($349|0)!=($355|0);
     if ($356) {
      $357 = $80;
      $358 = $80;
      $59 = $358;
      $359 = $59;
      $360 = (($359) + 8|0);
      $361 = HEAP32[$360>>2]|0;
      $362 = $80;
      $60 = $362;
      $363 = $60;
      $364 = (($363) + 8|0);
      $365 = HEAP32[$364>>2]|0;
      $366 = $__unget_sz;
      $367 = (($365) + ($366)|0);
      $368 = HEAP32[$__inext>>2]|0;
      $61 = $357;
      $62 = $361;
      $63 = $367;
      $64 = $368;
      $369 = $61;
      $370 = $62;
      $371 = (($369) + 8|0);
      HEAP32[$371>>2] = $370;
      $372 = $63;
      $373 = (($369) + 12|0);
      HEAP32[$373>>2] = $372;
      $374 = $64;
      $375 = (($369) + 16|0);
      HEAP32[$375>>2] = $374;
      $376 = $80;
      $65 = $376;
      $377 = $65;
      $378 = (($377) + 12|0);
      $379 = HEAP32[$378>>2]|0;
      $380 = HEAP8[$379]|0;
      $66 = $380;
      $381 = $66;
      $382 = $381&255;
      $__c = $382;
     }
    }
   }
  }
 } else {
  $383 = $80;
  $67 = $383;
  $384 = $67;
  $385 = (($384) + 12|0);
  $386 = HEAP32[$385>>2]|0;
  $387 = HEAP8[$386]|0;
  $68 = $387;
  $388 = $68;
  $389 = $388&255;
  $__c = $389;
 }
 $390 = $80;
 $69 = $390;
 $391 = $69;
 $392 = (($391) + 8|0);
 $393 = HEAP32[$392>>2]|0;
 $394 = ($393|0)==($__1buf|0);
 if ($394) {
  $395 = $80;
  $70 = $395;
  $71 = 0;
  $72 = 0;
  $73 = 0;
  $396 = $70;
  $397 = $71;
  $398 = (($396) + 8|0);
  HEAP32[$398>>2] = $397;
  $399 = $72;
  $400 = (($396) + 12|0);
  HEAP32[$400>>2] = $399;
  $401 = $73;
  $402 = (($396) + 16|0);
  HEAP32[$402>>2] = $401;
 }
 $403 = $__c;
 $74 = $403;
 $404 = $74;
 STACKTOP = sp;return ($404|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $19 = $this;
 $20 = $__c;
 $21 = $19;
 $22 = (($21) + 64|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 L1: do {
  if ($24) {
   $25 = $21;
   $17 = $25;
   $26 = $17;
   $27 = (($26) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $21;
   $1 = $29;
   $30 = $1;
   $31 = (($30) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($28>>>0)<($32>>>0);
   if (!($33)) {
    break;
   }
   $34 = $20;
   $2 = $34;
   $3 = -1;
   $35 = $2;
   $36 = $3;
   $37 = ($35|0)==($36|0);
   if ($37) {
    $38 = $21;
    $4 = $38;
    $5 = -1;
    $39 = $4;
    $40 = $5;
    $41 = (($39) + 12|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (($42) + ($40)|0);
    HEAP32[$41>>2] = $43;
    $44 = $20;
    $8 = $44;
    $45 = $8;
    $6 = $45;
    $7 = -1;
    $46 = $6;
    $47 = $7;
    $48 = ($46|0)==($47|0);
    if ($48) {
     $50 = 0;
    } else {
     $49 = $8;
     $50 = $49;
    }
    $18 = $50;
    $83 = $18;
    STACKTOP = sp;return ($83|0);
   } else {
    $51 = (($21) + 88|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = $52 & 16;
    $54 = ($53|0)!=(0);
    do {
     if (!($54)) {
      $55 = $20;
      $9 = $55;
      $56 = $9;
      $57 = $56&255;
      $58 = $21;
      $10 = $58;
      $59 = $10;
      $60 = (($59) + 12|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = (($61) + -1|0);
      $63 = HEAP8[$62]|0;
      $11 = $57;
      $12 = $63;
      $64 = $11;
      $65 = $64 << 24 >> 24;
      $66 = $12;
      $67 = $66 << 24 >> 24;
      $68 = ($65|0)==($67|0);
      if ($68) {
       break;
      }
      break L1;
     }
    } while(0);
    $69 = $21;
    $13 = $69;
    $14 = -1;
    $70 = $13;
    $71 = $14;
    $72 = (($70) + 12|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (($73) + ($71)|0);
    HEAP32[$72>>2] = $74;
    $75 = $20;
    $15 = $75;
    $76 = $15;
    $77 = $76&255;
    $78 = $21;
    $16 = $78;
    $79 = $16;
    $80 = (($79) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    HEAP8[$81] = $77;
    $82 = $20;
    $18 = $82;
    $83 = $18;
    STACKTOP = sp;return ($83|0);
   }
  }
 } while(0);
 $18 = -1;
 $83 = $18;
 STACKTOP = sp;return ($83|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__1buf = 0, $__e = 0;
 var $__epb_save = 0, $__extbe = 0, $__nmemb = 0, $__nmemb1 = 0, $__nmemb2 = 0, $__pb_save = 0, $__r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 456|0;
 $__1buf = sp + 384|0;
 $__extbe = sp + 416|0;
 $__e = sp + 432|0;
 $47 = $this;
 $48 = $__c;
 $49 = $47;
 $50 = (($49) + 64|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)==(0|0);
 if ($52) {
  $46 = -1;
  $258 = $46;
  STACKTOP = sp;return ($258|0);
 }
 __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($49);
 $53 = $49;
 $19 = $53;
 $54 = $19;
 $55 = (($54) + 20|0);
 $56 = HEAP32[$55>>2]|0;
 $__pb_save = $56;
 $57 = $49;
 $1 = $57;
 $58 = $1;
 $59 = (($58) + 28|0);
 $60 = HEAP32[$59>>2]|0;
 $__epb_save = $60;
 $61 = $48;
 $2 = $61;
 $3 = -1;
 $62 = $2;
 $63 = $3;
 $64 = ($62|0)==($63|0);
 if (!($64)) {
  $65 = $49;
  $4 = $65;
  $66 = $4;
  $67 = (($66) + 24|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($68|0)==(0|0);
  if ($69) {
   $70 = $49;
   $71 = (($__1buf) + 1|0);
   $5 = $70;
   $6 = $__1buf;
   $7 = $71;
   $72 = $5;
   $73 = $6;
   $74 = (($72) + 24|0);
   HEAP32[$74>>2] = $73;
   $75 = (($72) + 20|0);
   HEAP32[$75>>2] = $73;
   $76 = $7;
   $77 = (($72) + 28|0);
   HEAP32[$77>>2] = $76;
  }
  $78 = $48;
  $8 = $78;
  $79 = $8;
  $80 = $79&255;
  $81 = $49;
  $9 = $81;
  $82 = $9;
  $83 = (($82) + 24|0);
  $84 = HEAP32[$83>>2]|0;
  HEAP8[$84] = $80;
  $85 = $49;
  $10 = $85;
  $11 = 1;
  $86 = $10;
  $87 = $11;
  $88 = (($86) + 24|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (($89) + ($87)|0);
  HEAP32[$88>>2] = $90;
 }
 $91 = $49;
 $12 = $91;
 $92 = $12;
 $93 = (($92) + 24|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $49;
 $13 = $95;
 $96 = $13;
 $97 = (($96) + 20|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ($94|0)!=($98|0);
 if ($99) {
  $100 = (($49) + 98|0);
  $101 = HEAP8[$100]|0;
  $102 = $101&1;
  do {
   if ($102) {
    $103 = $49;
    $14 = $103;
    $104 = $14;
    $105 = (($104) + 24|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $49;
    $15 = $107;
    $108 = $15;
    $109 = (($108) + 20|0);
    $110 = HEAP32[$109>>2]|0;
    $111 = $106;
    $112 = $110;
    $113 = (($111) - ($112))|0;
    $__nmemb = $113;
    $114 = $49;
    $16 = $114;
    $115 = $16;
    $116 = (($115) + 20|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = $__nmemb;
    $119 = (($49) + 64|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = (_fwrite(($117|0),1,($118|0),($120|0))|0);
    $122 = $__nmemb;
    $123 = ($121|0)!=($122|0);
    if (!($123)) {
     break;
    }
    $46 = -1;
    $258 = $46;
    STACKTOP = sp;return ($258|0);
   } else {
    $124 = (($49) + 32|0);
    $125 = HEAP32[$124>>2]|0;
    HEAP32[$__extbe>>2] = $125;
    while(1) {
     $126 = (($49) + 68|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = ($127|0)!=(0|0);
     if (!($128)) {
      label = 14;
      break;
     }
     $131 = (($49) + 68|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($49) + 72|0);
     $134 = $49;
     $17 = $134;
     $135 = $17;
     $136 = (($135) + 20|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = $49;
     $18 = $138;
     $139 = $18;
     $140 = (($139) + 24|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = (($49) + 32|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = (($49) + 32|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = (($49) + 52|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = (($145) + ($147)|0);
     $20 = $132;
     $21 = $133;
     $22 = $137;
     $23 = $141;
     $24 = $__e;
     $25 = $143;
     $26 = $148;
     $27 = $__extbe;
     $149 = $20;
     $150 = $149;
     $151 = HEAP32[$150>>2]|0;
     $152 = (($151) + 12|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = $21;
     $155 = $22;
     $156 = $23;
     $157 = $24;
     $158 = $25;
     $159 = $26;
     $160 = $27;
     $161 = (FUNCTION_TABLE_iiiiiiiii[$153 & 15]($149,$154,$155,$156,$157,$158,$159,$160)|0);
     $__r = $161;
     $162 = HEAP32[$__e>>2]|0;
     $163 = $49;
     $28 = $163;
     $164 = $28;
     $165 = (($164) + 20|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = ($162|0)==($166|0);
     if ($167) {
      label = 16;
      break;
     }
     $168 = $__r;
     $169 = ($168|0)==(3);
     if ($169) {
      $170 = $49;
      $29 = $170;
      $171 = $29;
      $172 = (($171) + 24|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = $49;
      $30 = $174;
      $175 = $30;
      $176 = (($175) + 20|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = $173;
      $179 = $177;
      $180 = (($178) - ($179))|0;
      $__nmemb1 = $180;
      $181 = $49;
      $31 = $181;
      $182 = $31;
      $183 = (($182) + 20|0);
      $184 = HEAP32[$183>>2]|0;
      $185 = $__nmemb1;
      $186 = (($49) + 64|0);
      $187 = HEAP32[$186>>2]|0;
      $188 = (_fwrite(($184|0),1,($185|0),($187|0))|0);
      $189 = $__nmemb1;
      $190 = ($188|0)!=($189|0);
      if ($190) {
       label = 19;
       break;
      }
     } else {
      $191 = $__r;
      $192 = ($191|0)==(0);
      if (!($192)) {
       $193 = $__r;
       $194 = ($193|0)==(1);
       if (!($194)) {
        label = 28;
        break;
       }
      }
      $195 = HEAP32[$__extbe>>2]|0;
      $196 = (($49) + 32|0);
      $197 = HEAP32[$196>>2]|0;
      $198 = $195;
      $199 = $197;
      $200 = (($198) - ($199))|0;
      $__nmemb2 = $200;
      $201 = (($49) + 32|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = $__nmemb2;
      $204 = (($49) + 64|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = (_fwrite(($202|0),1,($203|0),($205|0))|0);
      $207 = $__nmemb2;
      $208 = ($206|0)!=($207|0);
      if ($208) {
       label = 24;
       break;
      }
      $209 = $__r;
      $210 = ($209|0)==(1);
      if ($210) {
       $211 = $49;
       $212 = HEAP32[$__e>>2]|0;
       $213 = $49;
       $32 = $213;
       $214 = $32;
       $215 = (($214) + 24|0);
       $216 = HEAP32[$215>>2]|0;
       $33 = $211;
       $34 = $212;
       $35 = $216;
       $217 = $33;
       $218 = $34;
       $219 = (($217) + 24|0);
       HEAP32[$219>>2] = $218;
       $220 = (($217) + 20|0);
       HEAP32[$220>>2] = $218;
       $221 = $35;
       $222 = (($217) + 28|0);
       HEAP32[$222>>2] = $221;
       $223 = $49;
       $224 = $49;
       $36 = $224;
       $225 = $36;
       $226 = (($225) + 28|0);
       $227 = HEAP32[$226>>2]|0;
       $228 = $49;
       $37 = $228;
       $229 = $37;
       $230 = (($229) + 20|0);
       $231 = HEAP32[$230>>2]|0;
       $232 = $227;
       $233 = $231;
       $234 = (($232) - ($233))|0;
       $38 = $223;
       $39 = $234;
       $235 = $38;
       $236 = $39;
       $237 = (($235) + 24|0);
       $238 = HEAP32[$237>>2]|0;
       $239 = (($238) + ($236)|0);
       HEAP32[$237>>2] = $239;
      }
     }
     $240 = $__r;
     $241 = ($240|0)==(1);
     if (!($241)) {
      label = 32;
      break;
     }
    }
    if ((label|0) == 14) {
     $129 = (___cxa_allocate_exception(4)|0);
     $130 = $129;
     __ZNSt8bad_castC2Ev($130);
     ___cxa_throw(($129|0),((17096)|0),((143)|0));
     // unreachable;
    }
    else if ((label|0) == 16) {
     $46 = -1;
     $258 = $46;
     STACKTOP = sp;return ($258|0);
    }
    else if ((label|0) == 19) {
     $46 = -1;
     $258 = $46;
     STACKTOP = sp;return ($258|0);
    }
    else if ((label|0) == 24) {
     $46 = -1;
     $258 = $46;
     STACKTOP = sp;return ($258|0);
    }
    else if ((label|0) == 28) {
     $46 = -1;
     $258 = $46;
     STACKTOP = sp;return ($258|0);
    }
    else if ((label|0) == 32) {
     break;
    }
   }
  } while(0);
  $242 = $49;
  $243 = $__pb_save;
  $244 = $__epb_save;
  $40 = $242;
  $41 = $243;
  $42 = $244;
  $245 = $40;
  $246 = $41;
  $247 = (($245) + 24|0);
  HEAP32[$247>>2] = $246;
  $248 = (($245) + 20|0);
  HEAP32[$248>>2] = $246;
  $249 = $42;
  $250 = (($245) + 28|0);
  HEAP32[$250>>2] = $249;
 }
 $251 = $48;
 $45 = $251;
 $252 = $45;
 $43 = $252;
 $44 = -1;
 $253 = $43;
 $254 = $44;
 $255 = ($253|0)==($254|0);
 if ($255) {
  $257 = 0;
 } else {
  $256 = $45;
  $257 = $256;
 }
 $46 = $257;
 $258 = $46;
 STACKTOP = sp;return ($258|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $14 = $this;
 $15 = $14;
 $16 = (($15) + 92|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 16;
 $19 = ($18|0)!=(0);
 if ($19) {
  STACKTOP = sp;return;
 }
 $20 = $15;
 $10 = $20;
 $11 = 0;
 $12 = 0;
 $13 = 0;
 $21 = $10;
 $22 = $11;
 $23 = (($21) + 8|0);
 HEAP32[$23>>2] = $22;
 $24 = $12;
 $25 = (($21) + 12|0);
 HEAP32[$25>>2] = $24;
 $26 = $13;
 $27 = (($21) + 16|0);
 HEAP32[$27>>2] = $26;
 $28 = (($15) + 52|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29>>>0)>(8);
 if ($30) {
  $31 = (($15) + 98|0);
  $32 = HEAP8[$31]|0;
  $33 = $32&1;
  if ($33) {
   $34 = $15;
   $35 = (($15) + 32|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($15) + 32|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($15) + 52|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) - 1)|0;
   $42 = (($38) + ($41)|0);
   $1 = $34;
   $2 = $36;
   $3 = $42;
   $43 = $1;
   $44 = $2;
   $45 = (($43) + 24|0);
   HEAP32[$45>>2] = $44;
   $46 = (($43) + 20|0);
   HEAP32[$46>>2] = $44;
   $47 = $3;
   $48 = (($43) + 28|0);
   HEAP32[$48>>2] = $47;
  } else {
   $49 = $15;
   $50 = (($15) + 56|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($15) + 56|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($15) + 60|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($55) - 1)|0;
   $57 = (($53) + ($56)|0);
   $4 = $49;
   $5 = $51;
   $6 = $57;
   $58 = $4;
   $59 = $5;
   $60 = (($58) + 24|0);
   HEAP32[$60>>2] = $59;
   $61 = (($58) + 20|0);
   HEAP32[$61>>2] = $59;
   $62 = $6;
   $63 = (($58) + 28|0);
   HEAP32[$63>>2] = $62;
  }
 } else {
  $64 = $15;
  $7 = $64;
  $8 = 0;
  $9 = 0;
  $65 = $7;
  $66 = $8;
  $67 = (($65) + 24|0);
  HEAP32[$67>>2] = $66;
  $68 = (($65) + 20|0);
  HEAP32[$68>>2] = $66;
  $69 = $9;
  $70 = (($65) + 28|0);
  HEAP32[$70>>2] = $69;
 }
 $71 = (($15) + 92|0);
 HEAP32[$71>>2] = 16;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 104|0;
 $13 = $this;
 $14 = $13;
 $15 = (($14) + 92|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 & 8;
 $18 = ($17|0)!=(0);
 if ($18) {
  $$expand_i1_val2 = 0;
  $12 = $$expand_i1_val2;
  $$pre_trunc = $12;
  $70 = $$pre_trunc&1;
  STACKTOP = sp;return ($70|0);
 }
 $19 = $14;
 $9 = $19;
 $10 = 0;
 $11 = 0;
 $20 = $9;
 $21 = $10;
 $22 = (($20) + 24|0);
 HEAP32[$22>>2] = $21;
 $23 = (($20) + 20|0);
 HEAP32[$23>>2] = $21;
 $24 = $11;
 $25 = (($20) + 28|0);
 HEAP32[$25>>2] = $24;
 $26 = (($14) + 98|0);
 $27 = HEAP8[$26]|0;
 $28 = $27&1;
 if ($28) {
  $29 = $14;
  $30 = (($14) + 32|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($14) + 32|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($14) + 52|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($33) + ($35)|0);
  $37 = (($14) + 32|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($14) + 52|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($38) + ($40)|0);
  $1 = $29;
  $2 = $31;
  $3 = $36;
  $4 = $41;
  $42 = $1;
  $43 = $2;
  $44 = (($42) + 8|0);
  HEAP32[$44>>2] = $43;
  $45 = $3;
  $46 = (($42) + 12|0);
  HEAP32[$46>>2] = $45;
  $47 = $4;
  $48 = (($42) + 16|0);
  HEAP32[$48>>2] = $47;
 } else {
  $49 = $14;
  $50 = (($14) + 56|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($14) + 56|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($14) + 60|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($53) + ($55)|0);
  $57 = (($14) + 56|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($14) + 60|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($58) + ($60)|0);
  $5 = $49;
  $6 = $51;
  $7 = $56;
  $8 = $61;
  $62 = $5;
  $63 = $6;
  $64 = (($62) + 8|0);
  HEAP32[$64>>2] = $63;
  $65 = $7;
  $66 = (($62) + 12|0);
  HEAP32[$66>>2] = $65;
  $67 = $8;
  $68 = (($62) + 16|0);
  HEAP32[$68>>2] = $67;
 }
 $69 = (($14) + 92|0);
 HEAP32[$69>>2] = 8;
 $$expand_i1_val = 1;
 $12 = $$expand_i1_val;
 $$pre_trunc = $12;
 $70 = $$pre_trunc&1;
 STACKTOP = sp;return ($70|0);
}
function __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $7 = sp + 48|0;
 $10 = sp + 72|0;
 $6 = $this;
 $11 = $6;
 $12 = $11;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($12);
 $13 = $11;
 $14 = ((1544) + 8|0);
 HEAP32[$13>>2] = $14;
 $15 = (($11) + 32|0);
 HEAP32[$15>>2] = 0;
 $16 = (($11) + 36|0);
 HEAP32[$16>>2] = 0;
 $17 = (($11) + 40|0);
 HEAP32[$17>>2] = 0;
 $18 = (($11) + 52|0);
 HEAP32[$18>>2] = 0;
 $19 = (($11) + 56|0);
 HEAP32[$19>>2] = 0;
 $20 = (($11) + 60|0);
 HEAP32[$20>>2] = 0;
 $21 = (($11) + 64|0);
 HEAP32[$21>>2] = 0;
 $22 = (($11) + 68|0);
 HEAP32[$22>>2] = 0;
 $23 = (($11) + 72|0);
 $24 = $23;
 ;HEAP32[$24+0>>2]=0|0;HEAP32[$24+4>>2]=0|0;
 $25 = (($11) + 80|0);
 $26 = $25;
 ;HEAP32[$26+0>>2]=0|0;HEAP32[$26+4>>2]=0|0;
 $27 = (($11) + 88|0);
 HEAP32[$27>>2] = 0;
 $28 = (($11) + 92|0);
 HEAP32[$28>>2] = 0;
 $29 = (($11) + 96|0);
 HEAP8[$29] = 0;
 $30 = (($11) + 97|0);
 HEAP8[$30] = 0;
 $31 = (($11) + 98|0);
 HEAP8[$31] = 0;
 $32 = $11;
 $5 = $32;
 $33 = $5;
 $34 = (($33) + 4|0);
 __ZNSt3__16localeC2ERKS0_($7,$34);
 $4 = $7;
 $35 = $4;
 __THREW__ = 0;
 $36 = (invoke_iii(26,($35|0),((9200)|0))|0);
 $37 = __THREW__; __THREW__ = 0;
 $38 = $37&1;
 if ($38) {
  $39 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($39);
  // unreachable;
 }
 __ZNSt3__16localeD2Ev($7);
 do {
  if ($36) {
   $40 = $11;
   $3 = $40;
   $41 = $3;
   $42 = (($41) + 4|0);
   __ZNSt3__16localeC2ERKS0_($10,$42);
   $2 = $10;
   $43 = $2;
   __THREW__ = 0;
   $44 = (invoke_iii(23,($43|0),((9200)|0))|0);
   $45 = __THREW__; __THREW__ = 0;
   $46 = $45&1;
   if ($46) {
    $61 = ___cxa_find_matching_catch(-1,-1)|0;
    $62 = tempRet0;
    $8 = $61;
    $9 = $62;
    __ZNSt3__16localeD2Ev($10);
    break;
   }
   $47 = $44;
   $48 = (($11) + 68|0);
   HEAP32[$48>>2] = $47;
   __ZNSt3__16localeD2Ev($10);
   $49 = (($11) + 68|0);
   $50 = HEAP32[$49>>2]|0;
   $1 = $50;
   $51 = $1;
   $52 = $51;
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + 28|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (FUNCTION_TABLE_ii[$55 & 127]($51)|0);
   $57 = (($11) + 98|0);
   $58 = $56&1;
   HEAP8[$57] = $58;
   label = 11;
  } else {
   label = 11;
  }
 } while(0);
 do {
  if ((label|0) == 11) {
   $63 = $11;
   $64 = HEAP32[$63>>2]|0;
   $65 = (($64) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   __THREW__ = 0;
   (invoke_iiii($66|0,($11|0),(0|0),4096)|0);
   $67 = __THREW__; __THREW__ = 0;
   $68 = $67&1;
   if ($68) {
    $59 = ___cxa_find_matching_catch(-1,-1)|0;
    $60 = tempRet0;
    $8 = $59;
    $9 = $60;
    break;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $69 = $11;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($69);
 $70 = $8;
 $71 = $9;
 ___resumeException($70|0);
 // unreachable;
}
function __ZNSt3__110__list_impIjNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__110__list_impIjNS_9allocatorIjEEE5clearEv($2);
 STACKTOP = sp;return;
}
function __ZNSt3__110__list_impIjNS_9allocatorIjEEE5clearEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__f = 0, $__l = 0, $__n = 0, $__na = 0, $tmp$i = 0, $tmp1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $9 = sp + 64|0;
 $12 = sp + 88|0;
 $28 = $this;
 $29 = $28;
 $27 = $29;
 $30 = $27;
 $26 = $30;
 $31 = $26;
 $32 = (($31) + 8|0);
 $25 = $32;
 $33 = $25;
 $34 = $33;
 $24 = $34;
 $35 = $24;
 $36 = ($35);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0);
 if ($38) {
  STACKTOP = sp;return;
 }
 $23 = $29;
 $39 = $23;
 $40 = (($39) + 8|0);
 $22 = $40;
 $41 = $22;
 $42 = $41;
 $21 = $42;
 $43 = $21;
 $44 = $43;
 $__na = $44;
 $45 = ($29);
 $46 = (($45) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $__f = $47;
 $48 = ($29);
 $14 = $48;
 $49 = $14;
 $13 = $49;
 $50 = $13;
 $51 = $50;
 $52 = $51;
 $53 = $52;
 $__l = $53;
 $54 = $__f;
 $55 = $__l;
 $56 = $55;
 $57 = ($56);
 $58 = HEAP32[$57>>2]|0;
 $1 = $54;
 $2 = $58;
 $59 = $2;
 $60 = $59;
 $61 = (($60) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $1;
 $64 = $63;
 $65 = ($64);
 $66 = HEAP32[$65>>2]|0;
 $67 = $66;
 $68 = (($67) + 4|0);
 HEAP32[$68>>2] = $62;
 $69 = $1;
 $70 = $69;
 $71 = ($70);
 $72 = HEAP32[$71>>2]|0;
 $73 = $2;
 $74 = $73;
 $75 = (($74) + 4|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = $76;
 $78 = ($77);
 HEAP32[$78>>2] = $72;
 $5 = $29;
 $79 = $5;
 $80 = (($79) + 8|0);
 $4 = $80;
 $81 = $4;
 $82 = $81;
 $3 = $82;
 $83 = $3;
 $84 = ($83);
 HEAP32[$84>>2] = 0;
 while(1) {
  $85 = $__f;
  $86 = $__l;
  $87 = ($85|0)!=($86|0);
  if (!($87)) {
   break;
  }
  $88 = $__f;
  $__n = $88;
  $89 = $__f;
  $90 = $89;
  $91 = (($90) + 4|0);
  $92 = HEAP32[$91>>2]|0;
  $__f = $92;
  $93 = $__na;
  $94 = $__n;
  $95 = (($94) + 8|0);
  $6 = $95;
  $96 = $6;
  $97 = $96;
  $98 = $97;
  $10 = $93;
  $11 = $98;
  $99 = $10;
  $100 = $11;
  $tmp$i = $9;
  $tmp1$i = $12;
  ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
  $7 = $99;
  $8 = $100;
  $101 = $__na;
  $102 = $__n;
  $18 = $101;
  $19 = $102;
  $20 = 1;
  $103 = $18;
  $104 = $19;
  $105 = $20;
  $15 = $103;
  $16 = $104;
  $17 = $105;
  $106 = $16;
  $107 = $106;
  __ZdlPv($107);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZNSt3__113__vector_baseIcNS_9allocatorIcEEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZN19LorenzAttractorDemoC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $4 = sp + 24|0;
 $7 = sp + 48|0;
 $17 = sp + 128|0;
 $20 = sp + 152|0;
 $30 = sp + 232|0;
 $33 = sp + 256|0;
 $40 = $this;
 $41 = $40;
 $42 = $41;
 __ZN4DemoC2Ev($42);
 $43 = $41;
 $44 = ((1768) + 8|0);
 HEAP32[$43>>2] = $44;
 $45 = (($41) + 20|0);
 $39 = $45;
 $46 = $39;
 $38 = $46;
 $47 = $38;
 $48 = $47;
 $37 = $48;
 $49 = $37;
 $50 = $49;
 $36 = $50;
 $51 = ($49);
 HEAP32[$51>>2] = 0;
 $52 = (($49) + 4|0);
 HEAP32[$52>>2] = 0;
 $53 = (($49) + 8|0);
 $34 = $53;
 $35 = 0;
 $54 = $34;
 $55 = $35;
 $32 = $54;
 HEAP32[$33>>2] = $55;
 $56 = $32;
 $57 = $56;
 $31 = $33;
 $58 = $31;
 $59 = HEAP32[$58>>2]|0;
 $29 = $57;
 HEAP32[$30>>2] = $59;
 $60 = $29;
 $61 = $60;
 $28 = $61;
 $62 = ($60);
 $27 = $30;
 $63 = $27;
 $64 = HEAP32[$63>>2]|0;
 HEAP32[$62>>2] = $64;
 $65 = (($41) + 32|0);
 $13 = $65;
 $66 = $13;
 $12 = $66;
 $67 = $12;
 $68 = $67;
 $11 = $68;
 $69 = $11;
 $70 = $69;
 $10 = $70;
 $71 = ($69);
 HEAP32[$71>>2] = 0;
 $72 = (($69) + 4|0);
 HEAP32[$72>>2] = 0;
 $73 = (($69) + 8|0);
 $8 = $73;
 $9 = 0;
 $74 = $8;
 $75 = $9;
 $6 = $74;
 HEAP32[$7>>2] = $75;
 $76 = $6;
 $77 = $76;
 $5 = $7;
 $78 = $5;
 $79 = HEAP32[$78>>2]|0;
 $3 = $77;
 HEAP32[$4>>2] = $79;
 $80 = $3;
 $81 = $80;
 $2 = $81;
 $82 = ($80);
 $1 = $4;
 $83 = $1;
 $84 = HEAP32[$83>>2]|0;
 HEAP32[$82>>2] = $84;
 $85 = (($41) + 44|0);
 $26 = $85;
 $86 = $26;
 $25 = $86;
 $87 = $25;
 $88 = $87;
 $24 = $88;
 $89 = $24;
 $90 = $89;
 $23 = $90;
 $91 = ($89);
 HEAP32[$91>>2] = 0;
 $92 = (($89) + 4|0);
 HEAP32[$92>>2] = 0;
 $93 = (($89) + 8|0);
 $21 = $93;
 $22 = 0;
 $94 = $21;
 $95 = $22;
 $19 = $94;
 HEAP32[$20>>2] = $95;
 $96 = $19;
 $97 = $96;
 $18 = $20;
 $98 = $18;
 $99 = HEAP32[$98>>2]|0;
 $16 = $97;
 HEAP32[$17>>2] = $99;
 $100 = $16;
 $101 = $100;
 $15 = $101;
 $102 = ($100);
 $14 = $17;
 $103 = $14;
 $104 = HEAP32[$103>>2]|0;
 HEAP32[$102>>2] = $104;
 $105 = (($41) + 16|0);
 HEAP32[$105>>2] = 0;
 $106 = (($41) + 4|0);
 HEAP32[$106>>2] = 0;
 $107 = (($41) + 8|0);
 HEAP32[$107>>2] = 0;
 $108 = (($41) + 12|0);
 HEAP32[$108>>2] = 0;
 $109 = (($41) + 56|0);
 HEAP32[$109>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN4DemoC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 $4 = ((2392) + 8|0);
 HEAP32[$3>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN19LorenzAttractorDemoD0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN19LorenzAttractorDemoD2Ev($2);
 $3 = $2;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZN19LorenzAttractorDemoD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 $4 = ((1768) + 8|0);
 HEAP32[$3>>2] = $4;
 $5 = (($2) + 44|0);
 __ZNSt3__16vectorIjNS_9allocatorIjEEED1Ev($5);
 $6 = (($2) + 32|0);
 __ZNSt3__16vectorIjNS_9allocatorIjEEED1Ev($6);
 $7 = (($2) + 20|0);
 __ZNSt3__16vectorIjNS_9allocatorIjEEED1Ev($7);
 $8 = $2;
 __ZN4DemoD2Ev($8);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__16vectorIjNS_9allocatorIjEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN4DemoD2Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 STACKTOP = sp;return;
}
function __ZN19LorenzAttractorDemo4initEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0;
 var $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0;
 var $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0;
 var $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0;
 var $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0;
 var $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0;
 var $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0;
 var $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0;
 var $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0;
 var $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0;
 var $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0;
 var $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0;
 var $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0;
 var $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0;
 var $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__a$i$i$i11 = 0, $__a$i$i$i5 = 0, $__i$i$i$i = 0, $__i$i$i$i12 = 0, $__i$i$i$i6 = 0, $geometryShaderFilename = 0, $i = 0, $it = 0, $logSize = 0, $nFrameBuffers = 0, $nParticles = 0, $res = 0, $shaderLog = 0, $shaders = 0, $tex_coords = 0;
 var $vbo = 0, $verts = 0, $windowHeight = 0, $windowWidth = 0, $written = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1912|0;
 $shaders = sp + 1376|0;
 $167 = sp + 1392|0;
 $170 = sp + 1424|0;
 $171 = sp + 1440|0;
 $172 = sp + 1456|0;
 $173 = sp + 1464|0;
 $174 = sp + 1480|0;
 $175 = sp + 1496|0;
 $176 = sp + 1512|0;
 $geometryShaderFilename = sp + 1520|0;
 $177 = sp + 1536|0;
 $178 = sp + 1552|0;
 $179 = sp + 1568|0;
 $it = sp + 1576|0;
 $180 = sp + 1584|0;
 $res = sp + 1592|0;
 $logSize = sp + 1600|0;
 $shaderLog = sp + 1608|0;
 $written = sp + 1624|0;
 $181 = sp + 1640|0;
 $182 = sp + 1656|0;
 $183 = sp + 1672|0;
 $184 = sp + 1688|0;
 $185 = sp + 1704|0;
 $186 = sp + 1720|0;
 $187 = sp + 1744|0;
 $windowWidth = sp + 1760|0;
 $windowHeight = sp + 1768|0;
 $verts = sp + 1784|0;
 $tex_coords = sp + 1856|0;
 $vbo = sp + 1904|0;
 $166 = $this;
 $188 = $166;
 __ZN7gltools15ShaderContainerC1Ev($shaders);
 $189 = $shaders;
 __THREW__ = 0;
 $190 = (invoke_i(2)|0);
 $191 = __THREW__; __THREW__ = 0;
 $192 = $191&1;
 L1: do {
  if ($192) {
   label = 36;
  } else {
   $164 = $170;
   $165 = (1800);
   $193 = $164;
   $194 = $165;
   $162 = $193;
   $163 = $194;
   $195 = $162;
   $196 = ($195);
   $161 = $196;
   $197 = $161;
   $160 = $197;
   $198 = $160;
   $199 = $198;
   $159 = $199;
   $200 = $159;
   $201 = $200;
   $158 = $201;
   $202 = $163;
   $203 = $163;
   $157 = $203;
   $204 = $157;
   __THREW__ = 0;
   $205 = (invoke_ii(68,($204|0))|0);
   $206 = __THREW__; __THREW__ = 0;
   $207 = $206&1;
   if ($207) {
    label = 36;
    break;
   }
   __THREW__ = 0;
   invoke_viii(5,($195|0),($202|0),($205|0));
   $208 = __THREW__; __THREW__ = 0;
   $209 = $208&1;
   if ($209) {
    label = 36;
    break;
   }
   $156 = $171;
   $210 = $156;
   $155 = $210;
   $211 = $155;
   $212 = ($211);
   $154 = $212;
   $213 = $154;
   $153 = $213;
   $214 = $153;
   $215 = $214;
   $152 = $215;
   $216 = $152;
   $217 = $216;
   $151 = $217;
   $150 = $211;
   $218 = $150;
   $219 = ($218);
   $149 = $219;
   $220 = $149;
   $221 = $220;
   $148 = $221;
   $222 = $148;
   $223 = ($222);
   $224 = ($223);
   $225 = $224;
   $226 = ($225);
   $__a$i$i$i = $226;
   $__i$i$i$i = 0;
   while(1) {
    $227 = $__i$i$i$i;
    $228 = ($227>>>0)<(3);
    if (!($228)) {
     break;
    }
    $229 = $__i$i$i$i;
    $230 = $__a$i$i$i;
    $231 = (($230) + ($229<<2)|0);
    HEAP32[$231>>2] = 0;
    $232 = $__i$i$i$i;
    $233 = (($232) + 1)|0;
    $__i$i$i$i = $233;
   }
   __THREW__ = 0;
   invoke_viiii(10,($167|0),($190|0),($170|0),($171|0));
   $234 = __THREW__; __THREW__ = 0;
   $235 = $234&1;
   if ($235) {
    $388 = ___cxa_find_matching_catch(-1,-1)|0;
    $389 = tempRet0;
    $168 = $388;
    $169 = $389;
   } else {
    __THREW__ = 0;
    $236 = (invoke_iii(27,($167|0),35633)|0);
    $237 = __THREW__; __THREW__ = 0;
    $238 = $237&1;
    do {
     if (!($238)) {
      HEAP32[$172>>2] = $236;
      __THREW__ = 0;
      invoke_vii(55,($189|0),($172|0));
      $239 = __THREW__; __THREW__ = 0;
      $240 = $239&1;
      if ($240) {
       break;
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($167);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($171);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($170);
      $241 = $shaders;
      __THREW__ = 0;
      $242 = (invoke_i(2)|0);
      $243 = __THREW__; __THREW__ = 0;
      $244 = $243&1;
      if ($244) {
       label = 36;
       break L1;
      }
      $146 = $174;
      $147 = (1824);
      $245 = $146;
      $246 = $147;
      $144 = $245;
      $145 = $246;
      $247 = $144;
      $248 = ($247);
      $143 = $248;
      $249 = $143;
      $142 = $249;
      $250 = $142;
      $251 = $250;
      $141 = $251;
      $252 = $141;
      $253 = $252;
      $140 = $253;
      $254 = $145;
      $255 = $145;
      $139 = $255;
      $256 = $139;
      __THREW__ = 0;
      $257 = (invoke_ii(68,($256|0))|0);
      $258 = __THREW__; __THREW__ = 0;
      $259 = $258&1;
      if ($259) {
       label = 36;
       break L1;
      }
      __THREW__ = 0;
      invoke_viii(5,($247|0),($254|0),($257|0));
      $260 = __THREW__; __THREW__ = 0;
      $261 = $260&1;
      if ($261) {
       label = 36;
       break L1;
      }
      $138 = $175;
      $262 = $138;
      $137 = $262;
      $263 = $137;
      $264 = ($263);
      $136 = $264;
      $265 = $136;
      $135 = $265;
      $266 = $135;
      $267 = $266;
      $134 = $267;
      $268 = $134;
      $269 = $268;
      $133 = $269;
      $132 = $263;
      $270 = $132;
      $271 = ($270);
      $131 = $271;
      $272 = $131;
      $273 = $272;
      $130 = $273;
      $274 = $130;
      $275 = ($274);
      $276 = ($275);
      $277 = $276;
      $278 = ($277);
      $__a$i$i$i5 = $278;
      $__i$i$i$i6 = 0;
      while(1) {
       $279 = $__i$i$i$i6;
       $280 = ($279>>>0)<(3);
       if (!($280)) {
        break;
       }
       $281 = $__i$i$i$i6;
       $282 = $__a$i$i$i5;
       $283 = (($282) + ($281<<2)|0);
       HEAP32[$283>>2] = 0;
       $284 = $__i$i$i$i6;
       $285 = (($284) + 1)|0;
       $__i$i$i$i6 = $285;
      }
      __THREW__ = 0;
      invoke_viiii(10,($173|0),($242|0),($174|0),($175|0));
      $286 = __THREW__; __THREW__ = 0;
      $287 = $286&1;
      if ($287) {
       $392 = ___cxa_find_matching_catch(-1,-1)|0;
       $393 = tempRet0;
       $168 = $392;
       $169 = $393;
      } else {
       __THREW__ = 0;
       $288 = (invoke_iii(27,($173|0),35632)|0);
       $289 = __THREW__; __THREW__ = 0;
       $290 = $289&1;
       do {
        if (!($290)) {
         HEAP32[$176>>2] = $288;
         __THREW__ = 0;
         invoke_vii(55,($241|0),($176|0));
         $291 = __THREW__; __THREW__ = 0;
         $292 = $291&1;
         if ($292) {
          break;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($173);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($175);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($174);
         __THREW__ = 0;
         $293 = (invoke_i(2)|0);
         $294 = __THREW__; __THREW__ = 0;
         $295 = $294&1;
         if ($295) {
          label = 36;
          break L1;
         }
         $128 = $177;
         $129 = (1848);
         $296 = $128;
         $297 = $129;
         $126 = $296;
         $127 = $297;
         $298 = $126;
         $299 = ($298);
         $125 = $299;
         $300 = $125;
         $124 = $300;
         $301 = $124;
         $302 = $301;
         $123 = $302;
         $303 = $123;
         $304 = $303;
         $122 = $304;
         $305 = $127;
         $306 = $127;
         $121 = $306;
         $307 = $121;
         __THREW__ = 0;
         $308 = (invoke_ii(68,($307|0))|0);
         $309 = __THREW__; __THREW__ = 0;
         $310 = $309&1;
         if ($310) {
          label = 36;
          break L1;
         }
         __THREW__ = 0;
         invoke_viii(5,($298|0),($305|0),($308|0));
         $311 = __THREW__; __THREW__ = 0;
         $312 = $311&1;
         if ($312) {
          label = 36;
          break L1;
         }
         $120 = $178;
         $313 = $120;
         $119 = $313;
         $314 = $119;
         $315 = ($314);
         $118 = $315;
         $316 = $118;
         $117 = $316;
         $317 = $117;
         $318 = $317;
         $116 = $318;
         $319 = $116;
         $320 = $319;
         $115 = $320;
         $114 = $314;
         $321 = $114;
         $322 = ($321);
         $113 = $322;
         $323 = $113;
         $324 = $323;
         $112 = $324;
         $325 = $112;
         $326 = ($325);
         $327 = ($326);
         $328 = $327;
         $329 = ($328);
         $__a$i$i$i11 = $329;
         $__i$i$i$i12 = 0;
         while(1) {
          $330 = $__i$i$i$i12;
          $331 = ($330>>>0)<(3);
          if (!($331)) {
           break;
          }
          $332 = $__i$i$i$i12;
          $333 = $__a$i$i$i11;
          $334 = (($333) + ($332<<2)|0);
          HEAP32[$334>>2] = 0;
          $335 = $__i$i$i$i12;
          $336 = (($335) + 1)|0;
          $__i$i$i$i12 = $336;
         }
         __THREW__ = 0;
         invoke_viiii(10,($geometryShaderFilename|0),($293|0),($177|0),($178|0));
         $337 = __THREW__; __THREW__ = 0;
         $338 = $337&1;
         if ($338) {
          $396 = ___cxa_find_matching_catch(-1,-1)|0;
          $397 = tempRet0;
          $168 = $396;
          $169 = $397;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($178);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($177);
          break L1;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($178);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($177);
         $111 = $geometryShaderFilename;
         $339 = $111;
         $110 = $339;
         $340 = $110;
         $109 = $340;
         $341 = $109;
         $342 = ($341);
         $108 = $342;
         $343 = $108;
         $344 = $343;
         $107 = $344;
         $345 = $107;
         $346 = ($345);
         $347 = ($346);
         $348 = $347;
         $349 = ($348);
         $350 = $349;
         $351 = HEAP8[$350]|0;
         $352 = $351&255;
         $353 = $352 & 1;
         $354 = ($353|0)!=(0);
         if ($354) {
          $103 = $340;
          $355 = $103;
          $356 = ($355);
          $102 = $356;
          $357 = $102;
          $358 = $357;
          $101 = $358;
          $359 = $101;
          $360 = ($359);
          $361 = ($360);
          $362 = $361;
          $363 = (($362) + 4|0);
          $364 = HEAP32[$363>>2]|0;
          $378 = $364;
         } else {
          $106 = $340;
          $365 = $106;
          $366 = ($365);
          $105 = $366;
          $367 = $105;
          $368 = $367;
          $104 = $368;
          $369 = $104;
          $370 = ($369);
          $371 = ($370);
          $372 = $371;
          $373 = ($372);
          $374 = $373;
          $375 = HEAP8[$374]|0;
          $376 = $375&255;
          $377 = $376 >> 1;
          $378 = $377;
         }
         $379 = ($378|0)==(0);
         do {
          if ($379) {
           label = 45;
          } else {
           $380 = $shaders;
           __THREW__ = 0;
           $381 = (invoke_iii(27,($geometryShaderFilename|0),36313)|0);
           $382 = __THREW__; __THREW__ = 0;
           $383 = $382&1;
           if ($383) {
            label = 44;
            break;
           }
           HEAP32[$179>>2] = $381;
           __THREW__ = 0;
           invoke_vii(55,($380|0),($179|0));
           $384 = __THREW__; __THREW__ = 0;
           $385 = $384&1;
           if ($385) {
            label = 44;
            break;
           }
           label = 45;
          }
         } while(0);
         L48: do {
          if ((label|0) == 45) {
           __THREW__ = 0;
           $400 = (invoke_i(3)|0);
           $401 = __THREW__; __THREW__ = 0;
           $402 = $401&1;
           if ($402) {
            label = 44;
            break;
           }
           $403 = (($188) + 16|0);
           HEAP32[$403>>2] = $400;
           $404 = (($188) + 16|0);
           $405 = HEAP32[$404>>2]|0;
           $406 = ($405|0)!=(0);
           if (!($406)) {
            __THREW__ = 0;
            invoke_viii(4,((1872)|0),((1904)|0),63);
            $407 = __THREW__; __THREW__ = 0;
            $408 = $407&1;
            if ($408) {
             label = 44;
             break;
            }
           }
           $409 = $shaders;
           $100 = $409;
           $410 = $100;
           $411 = $410;
           $99 = $411;
           $412 = $99;
           $413 = ($412);
           $414 = (($413) + 4|0);
           $415 = HEAP32[$414>>2]|0;
           $97 = $it;
           $98 = $415;
           $416 = $97;
           $417 = $98;
           $95 = $416;
           $96 = $417;
           $418 = $95;
           $419 = ($418);
           $420 = $96;
           HEAP32[$419>>2] = $420;
           while(1) {
            $421 = $shaders;
            $94 = $421;
            $422 = $94;
            $423 = $422;
            $93 = $423;
            $424 = $93;
            $425 = ($424);
            $92 = $425;
            $426 = $92;
            $91 = $426;
            $427 = $91;
            $428 = $427;
            $429 = $428;
            $430 = $429;
            $89 = $180;
            $90 = $430;
            $431 = $89;
            $432 = $90;
            $87 = $431;
            $88 = $432;
            $433 = $87;
            $434 = ($433);
            $435 = $88;
            HEAP32[$434>>2] = $435;
            $81 = $it;
            $82 = $180;
            $436 = $81;
            $437 = $82;
            $79 = $436;
            $80 = $437;
            $438 = $79;
            $439 = ($438);
            $440 = HEAP32[$439>>2]|0;
            $441 = $80;
            $442 = ($441);
            $443 = HEAP32[$442>>2]|0;
            $444 = ($440|0)==($443|0);
            $445 = $444 ^ 1;
            if (!($445)) {
             break;
            }
            $446 = (($188) + 16|0);
            $447 = HEAP32[$446>>2]|0;
            $71 = $it;
            $448 = $71;
            $449 = ($448);
            $450 = HEAP32[$449>>2]|0;
            $451 = (($450) + 8|0);
            $452 = HEAP32[$451>>2]|0;
            __THREW__ = 0;
            invoke_vii(56,($447|0),($452|0));
            $453 = __THREW__; __THREW__ = 0;
            $454 = $453&1;
            if ($454) {
             label = 44;
             break L48;
            }
            $70 = $it;
            $455 = $70;
            $456 = ($455);
            $457 = HEAP32[$456>>2]|0;
            $458 = $457;
            $459 = (($458) + 4|0);
            $460 = HEAP32[$459>>2]|0;
            $461 = ($455);
            HEAP32[$461>>2] = $460;
           }
           $462 = (($188) + 16|0);
           $463 = HEAP32[$462>>2]|0;
           __THREW__ = 0;
           invoke_viii(15,($463|0),0,((1936)|0));
           $464 = __THREW__; __THREW__ = 0;
           $465 = $464&1;
           if ($465) {
            label = 44;
            break;
           }
           $466 = (($188) + 16|0);
           $467 = HEAP32[$466>>2]|0;
           __THREW__ = 0;
           invoke_viii(15,($467|0),1,((1952)|0));
           $468 = __THREW__; __THREW__ = 0;
           $469 = $468&1;
           if ($469) {
            label = 44;
            break;
           }
           $470 = (($188) + 16|0);
           $471 = HEAP32[$470>>2]|0;
           __THREW__ = 0;
           invoke_viii(15,($471|0),2,((1968)|0));
           $472 = __THREW__; __THREW__ = 0;
           $473 = $472&1;
           if ($473) {
            label = 44;
            break;
           }
           $474 = (($188) + 16|0);
           $475 = HEAP32[$474>>2]|0;
           __THREW__ = 0;
           invoke_vi(164,($475|0));
           $476 = __THREW__; __THREW__ = 0;
           $477 = $476&1;
           if ($477) {
            label = 44;
            break;
           }
           $478 = (($188) + 16|0);
           $479 = HEAP32[$478>>2]|0;
           __THREW__ = 0;
           invoke_viii(16,($479|0),35714,($res|0));
           $480 = __THREW__; __THREW__ = 0;
           $481 = $480&1;
           if ($481) {
            label = 44;
            break;
           }
           $482 = (($188) + 16|0);
           $483 = HEAP32[$482>>2]|0;
           __THREW__ = 0;
           invoke_viii(16,($483|0),35716,($logSize|0));
           $484 = __THREW__; __THREW__ = 0;
           $485 = $484&1;
           if ($485) {
            label = 44;
            break;
           }
           $486 = HEAP32[$logSize>>2]|0;
           $487 = ($486|0)>(0);
           L70: do {
            if ($487) {
             $488 = HEAP32[$logSize>>2]|0;
             __THREW__ = 0;
             invoke_vii(52,($shaderLog|0),($488|0));
             $489 = __THREW__; __THREW__ = 0;
             $490 = $489&1;
             if ($490) {
              label = 44;
              break L48;
             }
             $491 = (($188) + 16|0);
             $492 = HEAP32[$491>>2]|0;
             $493 = HEAP32[$logSize>>2]|0;
             $69 = $shaderLog;
             $494 = $69;
             $495 = $494;
             $496 = ($495);
             $497 = HEAP32[$496>>2]|0;
             $68 = $497;
             $498 = $68;
             __THREW__ = 0;
             invoke_viiii(14,($492|0),($493|0),($written|0),($498|0));
             $499 = __THREW__; __THREW__ = 0;
             $500 = $499&1;
             do {
              if (!($500)) {
               $67 = $shaderLog;
               $501 = $67;
               $502 = $501;
               $503 = ($502);
               $504 = HEAP32[$503>>2]|0;
               $66 = $504;
               $505 = $66;
               __THREW__ = 0;
               $506 = (invoke_iii(21,((4008)|0),($505|0))|0);
               $507 = __THREW__; __THREW__ = 0;
               $508 = $507&1;
               if ($508) {
                break;
               }
               $55 = $506;
               $56 = 69;
               $509 = $55;
               $510 = $56;
               __THREW__ = 0;
               (invoke_ii($510|0,($509|0))|0);
               $511 = __THREW__; __THREW__ = 0;
               $512 = $511&1;
               if ($512) {
                break;
               }
               __ZNSt3__16vectorIcNS_9allocatorIcEEED1Ev($shaderLog);
               break L70;
              }
             } while(0);
             $513 = ___cxa_find_matching_catch(-1,-1)|0;
             $514 = tempRet0;
             $168 = $513;
             $169 = $514;
             __ZNSt3__16vectorIcNS_9allocatorIcEEED1Ev($shaderLog);
             break L48;
            }
           } while(0);
           $515 = HEAP32[$res>>2]|0;
           $516 = ($515|0)==(0);
           if ($516) {
            $517 = (($188) + 16|0);
            $518 = HEAP32[$517>>2]|0;
            __THREW__ = 0;
            invoke_vi(165,($518|0));
            $519 = __THREW__; __THREW__ = 0;
            $520 = $519&1;
            if ($520) {
             label = 44;
             break;
            }
            __THREW__ = 0;
            invoke_viii(4,((1984)|0),((1904)|0),92);
            $521 = __THREW__; __THREW__ = 0;
            $522 = $521&1;
            if ($522) {
             label = 44;
             break;
            }
           }
           $523 = (($188) + 16|0);
           $524 = HEAP32[$523>>2]|0;
           __THREW__ = 0;
           invoke_vi(166,($524|0));
           $525 = __THREW__; __THREW__ = 0;
           $526 = $525&1;
           if ($526) {
            label = 44;
            break;
           }
           __THREW__ = 0;
           $527 = (invoke_i(2)|0);
           $528 = __THREW__; __THREW__ = 0;
           $529 = $528&1;
           if ($529) {
            label = 44;
            break;
           }
           $53 = $181;
           $54 = (2016);
           $530 = $53;
           $531 = $54;
           $51 = $530;
           $52 = $531;
           $532 = $51;
           $533 = ($532);
           $50 = $533;
           $534 = $50;
           $49 = $534;
           $535 = $49;
           $536 = $535;
           $48 = $536;
           $537 = $48;
           $538 = $537;
           $47 = $538;
           $539 = $52;
           $540 = $52;
           $46 = $540;
           $541 = $46;
           __THREW__ = 0;
           $542 = (invoke_ii(68,($541|0))|0);
           $543 = __THREW__; __THREW__ = 0;
           $544 = $543&1;
           if ($544) {
            label = 44;
            break;
           }
           __THREW__ = 0;
           invoke_viii(5,($532|0),($539|0),($542|0));
           $545 = __THREW__; __THREW__ = 0;
           $546 = $545&1;
           if ($546) {
            label = 44;
            break;
           }
           __THREW__ = 0;
           $547 = (invoke_iiii(24,($527|0),($181|0),0)|0);
           $548 = __THREW__; __THREW__ = 0;
           $549 = $548&1;
           if ($549) {
            $714 = ___cxa_find_matching_catch(-1,-1)|0;
            $715 = tempRet0;
            $168 = $714;
            $169 = $715;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($181);
            break;
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($181);
           $nParticles = $547;
           $550 = (($188) + 4|0);
           __THREW__ = 0;
           invoke_vii(57,1,($550|0));
           $551 = __THREW__; __THREW__ = 0;
           $552 = $551&1;
           if ($552) {
            label = 44;
            break;
           }
           $553 = (($188) + 4|0);
           $554 = HEAP32[$553>>2]|0;
           __THREW__ = 0;
           invoke_vii(58,34962,($554|0));
           $555 = __THREW__; __THREW__ = 0;
           $556 = $555&1;
           if ($556) {
            label = 44;
            break;
           }
           $557 = $nParticles;
           $558 = $557<<2;
           $559 = $558<<2;
           __THREW__ = 0;
           $560 = (invoke_i(2)|0);
           $561 = __THREW__; __THREW__ = 0;
           $562 = $561&1;
           if ($562) {
            label = 44;
            break;
           }
           $44 = $182;
           $45 = (2032);
           $563 = $44;
           $564 = $45;
           $42 = $563;
           $43 = $564;
           $565 = $42;
           $566 = ($565);
           $41 = $566;
           $567 = $41;
           $40 = $567;
           $568 = $40;
           $569 = $568;
           $39 = $569;
           $570 = $39;
           $571 = $570;
           $38 = $571;
           $572 = $43;
           $573 = $43;
           $37 = $573;
           $574 = $37;
           __THREW__ = 0;
           $575 = (invoke_ii(68,($574|0))|0);
           $576 = __THREW__; __THREW__ = 0;
           $577 = $576&1;
           if ($577) {
            label = 44;
            break;
           }
           __THREW__ = 0;
           invoke_viii(5,($565|0),($572|0),($575|0));
           $578 = __THREW__; __THREW__ = 0;
           $579 = $578&1;
           if ($579) {
            label = 44;
            break;
           }
           __THREW__ = 0;
           $580 = (invoke_iiii(29,($560|0),($182|0),(0|0))|0);
           $581 = __THREW__; __THREW__ = 0;
           $582 = $581&1;
           do {
            if (!($582)) {
             __THREW__ = 0;
             invoke_viiii(15,34962,($559|0),($580|0),35048);
             $583 = __THREW__; __THREW__ = 0;
             $584 = $583&1;
             if ($584) {
              break;
             }
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($182);
             $585 = (($188) + 8|0);
             __THREW__ = 0;
             invoke_vii(57,1,($585|0));
             $586 = __THREW__; __THREW__ = 0;
             $587 = $586&1;
             if ($587) {
              label = 44;
              break L48;
             }
             $588 = (($188) + 8|0);
             $589 = HEAP32[$588>>2]|0;
             __THREW__ = 0;
             invoke_vii(58,34962,($589|0));
             $590 = __THREW__; __THREW__ = 0;
             $591 = $590&1;
             if ($591) {
              label = 44;
              break L48;
             }
             $592 = $nParticles;
             $593 = $592<<2;
             $594 = $593<<2;
             __THREW__ = 0;
             $595 = (invoke_i(2)|0);
             $596 = __THREW__; __THREW__ = 0;
             $597 = $596&1;
             if ($597) {
              label = 44;
              break L48;
             }
             $35 = $183;
             $36 = (2040);
             $598 = $35;
             $599 = $36;
             $33 = $598;
             $34 = $599;
             $600 = $33;
             $601 = ($600);
             $32 = $601;
             $602 = $32;
             $31 = $602;
             $603 = $31;
             $604 = $603;
             $30 = $604;
             $605 = $30;
             $606 = $605;
             $29 = $606;
             $607 = $34;
             $608 = $34;
             $28 = $608;
             $609 = $28;
             __THREW__ = 0;
             $610 = (invoke_ii(68,($609|0))|0);
             $611 = __THREW__; __THREW__ = 0;
             $612 = $611&1;
             if ($612) {
              label = 44;
              break L48;
             }
             __THREW__ = 0;
             invoke_viii(5,($600|0),($607|0),($610|0));
             $613 = __THREW__; __THREW__ = 0;
             $614 = $613&1;
             if ($614) {
              label = 44;
              break L48;
             }
             __THREW__ = 0;
             $615 = (invoke_iiii(29,($595|0),($183|0),(0|0))|0);
             $616 = __THREW__; __THREW__ = 0;
             $617 = $616&1;
             do {
              if (!($617)) {
               __THREW__ = 0;
               invoke_viiii(15,34962,($594|0),($615|0),35048);
               $618 = __THREW__; __THREW__ = 0;
               $619 = $618&1;
               if ($619) {
                break;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($183);
               $620 = (($188) + 12|0);
               __THREW__ = 0;
               invoke_vii(59,1,($620|0));
               $621 = __THREW__; __THREW__ = 0;
               $622 = $621&1;
               if ($622) {
                label = 44;
                break L48;
               }
               $623 = (($188) + 12|0);
               $624 = HEAP32[$623>>2]|0;
               __THREW__ = 0;
               invoke_vi(167,($624|0));
               $625 = __THREW__; __THREW__ = 0;
               $626 = $625&1;
               if ($626) {
                label = 44;
                break L48;
               }
               __THREW__ = 0;
               invoke_vi(168,0);
               $627 = __THREW__; __THREW__ = 0;
               $628 = $627&1;
               if ($628) {
                label = 44;
                break L48;
               }
               __THREW__ = 0;
               invoke_vi(168,1);
               $629 = __THREW__; __THREW__ = 0;
               $630 = $629&1;
               if ($630) {
                label = 44;
                break L48;
               }
               $631 = (($188) + 4|0);
               $632 = HEAP32[$631>>2]|0;
               __THREW__ = 0;
               invoke_vii(58,34962,($632|0));
               $633 = __THREW__; __THREW__ = 0;
               $634 = $633&1;
               if ($634) {
                label = 44;
                break L48;
               }
               __THREW__ = 0;
               invoke_viiiiii(18,0,4,5126,0,0,(0|0));
               $635 = __THREW__; __THREW__ = 0;
               $636 = $635&1;
               if ($636) {
                label = 44;
                break L48;
               }
               $637 = (($188) + 8|0);
               $638 = HEAP32[$637>>2]|0;
               __THREW__ = 0;
               invoke_vii(58,34962,($638|0));
               $639 = __THREW__; __THREW__ = 0;
               $640 = $639&1;
               if ($640) {
                label = 44;
                break L48;
               }
               __THREW__ = 0;
               invoke_viiiiii(18,1,4,5126,0,0,(0|0));
               $641 = __THREW__; __THREW__ = 0;
               $642 = $641&1;
               if ($642) {
                label = 44;
                break L48;
               }
               __THREW__ = 0;
               $643 = (invoke_i(2)|0);
               $644 = __THREW__; __THREW__ = 0;
               $645 = $644&1;
               if ($645) {
                label = 44;
                break L48;
               }
               $26 = $184;
               $27 = (2048);
               $646 = $26;
               $647 = $27;
               $24 = $646;
               $25 = $647;
               $648 = $24;
               $649 = ($648);
               $23 = $649;
               $650 = $23;
               $22 = $650;
               $651 = $22;
               $652 = $651;
               $21 = $652;
               $653 = $21;
               $654 = $653;
               $20 = $654;
               $655 = $25;
               $656 = $25;
               $19 = $656;
               $657 = $19;
               __THREW__ = 0;
               $658 = (invoke_ii(68,($657|0))|0);
               $659 = __THREW__; __THREW__ = 0;
               $660 = $659&1;
               if ($660) {
                label = 44;
                break L48;
               }
               __THREW__ = 0;
               invoke_viii(5,($648|0),($655|0),($658|0));
               $661 = __THREW__; __THREW__ = 0;
               $662 = $661&1;
               if ($662) {
                label = 44;
                break L48;
               }
               __THREW__ = 0;
               $663 = (invoke_iii(19,($643|0),($184|0))|0);
               $664 = __THREW__; __THREW__ = 0;
               $665 = $664&1;
               if ($665) {
                $720 = ___cxa_find_matching_catch(-1,-1)|0;
                $721 = tempRet0;
                $168 = $720;
                $169 = $721;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($184);
                break L48;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($184);
               do {
                if ($663) {
                 __THREW__ = 0;
                 $666 = (invoke_i(2)|0);
                 $667 = __THREW__; __THREW__ = 0;
                 $668 = $667&1;
                 if ($668) {
                  label = 44;
                  break L48;
                 }
                 $17 = $185;
                 $18 = (2064);
                 $669 = $17;
                 $670 = $18;
                 $15 = $669;
                 $16 = $670;
                 $671 = $15;
                 $672 = ($671);
                 $14 = $672;
                 $673 = $14;
                 $13 = $673;
                 $674 = $13;
                 $675 = $674;
                 $12 = $675;
                 $676 = $12;
                 $677 = $676;
                 $11 = $677;
                 $678 = $16;
                 $679 = $16;
                 $10 = $679;
                 $680 = $10;
                 __THREW__ = 0;
                 $681 = (invoke_ii(68,($680|0))|0);
                 $682 = __THREW__; __THREW__ = 0;
                 $683 = $682&1;
                 if ($683) {
                  label = 44;
                  break L48;
                 }
                 __THREW__ = 0;
                 invoke_viii(5,($671|0),($678|0),($681|0));
                 $684 = __THREW__; __THREW__ = 0;
                 $685 = $684&1;
                 if ($685) {
                  label = 44;
                  break L48;
                 }
                 $686 = (($188) + 4|0);
                 $687 = HEAP32[$686>>2]|0;
                 __THREW__ = 0;
                 invoke_viii(17,($666|0),($185|0),($687|0));
                 $688 = __THREW__; __THREW__ = 0;
                 $689 = $688&1;
                 if ($689) {
                  $722 = ___cxa_find_matching_catch(-1,-1)|0;
                  $723 = tempRet0;
                  $168 = $722;
                  $169 = $723;
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($185);
                  break L48;
                 }
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($185);
                 __THREW__ = 0;
                 $690 = (invoke_i(2)|0);
                 $691 = __THREW__; __THREW__ = 0;
                 $692 = $691&1;
                 if ($692) {
                  label = 44;
                  break L48;
                 }
                 $8 = $186;
                 $9 = (2072);
                 $693 = $8;
                 $694 = $9;
                 $6 = $693;
                 $7 = $694;
                 $695 = $6;
                 $696 = ($695);
                 $5 = $696;
                 $697 = $5;
                 $4 = $697;
                 $698 = $4;
                 $699 = $698;
                 $3 = $699;
                 $700 = $3;
                 $701 = $700;
                 $2 = $701;
                 $702 = $7;
                 $703 = $7;
                 $1 = $703;
                 $704 = $1;
                 __THREW__ = 0;
                 $705 = (invoke_ii(68,($704|0))|0);
                 $706 = __THREW__; __THREW__ = 0;
                 $707 = $706&1;
                 if ($707) {
                  label = 44;
                  break L48;
                 }
                 __THREW__ = 0;
                 invoke_viii(5,($695|0),($702|0),($705|0));
                 $708 = __THREW__; __THREW__ = 0;
                 $709 = $708&1;
                 if ($709) {
                  label = 44;
                  break L48;
                 }
                 $710 = (($188) + 8|0);
                 $711 = HEAP32[$710>>2]|0;
                 __THREW__ = 0;
                 invoke_viii(17,($690|0),($186|0),($711|0));
                 $712 = __THREW__; __THREW__ = 0;
                 $713 = $712&1;
                 if ($713) {
                  $724 = ___cxa_find_matching_catch(-1,-1)|0;
                  $725 = tempRet0;
                  $168 = $724;
                  $169 = $725;
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($186);
                  break L48;
                 } else {
                  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($186);
                  break;
                 }
                }
               } while(0);
               __THREW__ = 0;
               $726 = (invoke_i(2)|0);
               $727 = __THREW__; __THREW__ = 0;
               $728 = $727&1;
               if ($728) {
                label = 44;
                break L48;
               }
               $64 = $187;
               $65 = (2088);
               $729 = $64;
               $730 = $65;
               $62 = $729;
               $63 = $730;
               $731 = $62;
               $732 = ($731);
               $61 = $732;
               $733 = $61;
               $60 = $733;
               $734 = $60;
               $735 = $734;
               $59 = $735;
               $736 = $59;
               $737 = $736;
               $58 = $737;
               $738 = $63;
               $739 = $63;
               $57 = $739;
               $740 = $57;
               __THREW__ = 0;
               $741 = (invoke_ii(68,($740|0))|0);
               $742 = __THREW__; __THREW__ = 0;
               $743 = $742&1;
               if ($743) {
                label = 44;
                break L48;
               }
               __THREW__ = 0;
               invoke_viii(5,($731|0),($738|0),($741|0));
               $744 = __THREW__; __THREW__ = 0;
               $745 = $744&1;
               if ($745) {
                label = 44;
                break L48;
               }
               __THREW__ = 0;
               $746 = (invoke_iii(19,($726|0),($187|0))|0);
               $747 = __THREW__; __THREW__ = 0;
               $748 = $747&1;
               if ($748) {
                $808 = ___cxa_find_matching_catch(-1,-1)|0;
                $809 = tempRet0;
                $168 = $808;
                $169 = $809;
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($187);
                break L48;
               }
               $749 = $746 ? 3 : 0;
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($187);
               $nFrameBuffers = $749;
               $750 = (($188) + 20|0);
               $751 = $nFrameBuffers;
               $752 = (($751) + 1)|0;
               __THREW__ = 0;
               invoke_vii(60,($750|0),($752|0));
               $753 = __THREW__; __THREW__ = 0;
               $754 = $753&1;
               if ($754) {
                label = 44;
                break L48;
               }
               $755 = (($188) + 32|0);
               $756 = $nFrameBuffers;
               __THREW__ = 0;
               invoke_vii(60,($755|0),($756|0));
               $757 = __THREW__; __THREW__ = 0;
               $758 = $757&1;
               if ($758) {
                label = 44;
                break L48;
               }
               $759 = (($188) + 20|0);
               $72 = $759;
               $760 = $72;
               $761 = $760;
               $762 = (($761) + 4|0);
               $763 = HEAP32[$762>>2]|0;
               $764 = (($763) + -4|0);
               HEAP32[$764>>2] = 0;
               HEAP32[$windowWidth>>2] = -1;
               HEAP32[$windowHeight>>2] = -1;
               __THREW__ = 0;
               $765 = (invoke_i(4)|0);
               $766 = __THREW__; __THREW__ = 0;
               $767 = $766&1;
               if ($767) {
                label = 44;
                break L48;
               }
               __THREW__ = 0;
               invoke_viii(18,($765|0),($windowWidth|0),($windowHeight|0));
               $768 = __THREW__; __THREW__ = 0;
               $769 = $768&1;
               if ($769) {
                label = 44;
                break L48;
               }
               $770 = $nFrameBuffers;
               $771 = ($770|0)!=(0);
               if ($771) {
                $772 = $nFrameBuffers;
                $773 = (($188) + 20|0);
                $74 = $773;
                $774 = $74;
                $775 = $774;
                $776 = ($775);
                $777 = HEAP32[$776>>2]|0;
                $73 = $777;
                $778 = $73;
                __THREW__ = 0;
                invoke_vii(61,($772|0),($778|0));
                $779 = __THREW__; __THREW__ = 0;
                $780 = $779&1;
                if ($780) {
                 label = 44;
                 break L48;
                }
                $781 = $nFrameBuffers;
                $782 = (($188) + 32|0);
                $76 = $782;
                $783 = $76;
                $784 = $783;
                $785 = ($784);
                $786 = HEAP32[$785>>2]|0;
                $75 = $786;
                $787 = $75;
                __THREW__ = 0;
                invoke_vii(62,($781|0),($787|0));
                $788 = __THREW__; __THREW__ = 0;
                $789 = $788&1;
                if ($789) {
                 label = 44;
                 break L48;
                }
                $i = 0;
                while(1) {
                 $790 = $i;
                 $791 = $nFrameBuffers;
                 $792 = ($790|0)<($791|0);
                 if (!($792)) {
                  break;
                 }
                 $793 = (($188) + 20|0);
                 $794 = $i;
                 $77 = $793;
                 $78 = $794;
                 $795 = $77;
                 $796 = $78;
                 $797 = $795;
                 $798 = ($797);
                 $799 = HEAP32[$798>>2]|0;
                 $800 = (($799) + ($796<<2)|0);
                 $801 = HEAP32[$800>>2]|0;
                 __THREW__ = 0;
                 invoke_vii(63,36160,($801|0));
                 $802 = __THREW__; __THREW__ = 0;
                 $803 = $802&1;
                 if ($803) {
                  label = 44;
                  break L48;
                 }
                 $804 = $i;
                 $805 = ($804|0)>(0);
                 if ($805) {
                  __THREW__ = 0;
                  invoke_vi(169,33984);
                  $806 = __THREW__; __THREW__ = 0;
                  $807 = $806&1;
                  if ($807) {
                   label = 44;
                   break L48;
                  }
                 }
                 $810 = (($188) + 32|0);
                 $811 = $i;
                 $83 = $810;
                 $84 = $811;
                 $812 = $83;
                 $813 = $84;
                 $814 = $812;
                 $815 = ($814);
                 $816 = HEAP32[$815>>2]|0;
                 $817 = (($816) + ($813<<2)|0);
                 $818 = HEAP32[$817>>2]|0;
                 __THREW__ = 0;
                 invoke_vii(64,3553,($818|0));
                 $819 = __THREW__; __THREW__ = 0;
                 $820 = $819&1;
                 if ($820) {
                  label = 44;
                  break L48;
                 }
                 $821 = HEAP32[$windowWidth>>2]|0;
                 $822 = HEAP32[$windowHeight>>2]|0;
                 __THREW__ = 0;
                 invoke_viiiiiiiii(3,3553,0,6408,($821|0),($822|0),0,6408,5121,(0|0));
                 $823 = __THREW__; __THREW__ = 0;
                 $824 = $823&1;
                 if ($824) {
                  label = 44;
                  break L48;
                 }
                 __THREW__ = 0;
                 invoke_viii(19,3553,10241,9728);
                 $825 = __THREW__; __THREW__ = 0;
                 $826 = $825&1;
                 if ($826) {
                  label = 44;
                  break L48;
                 }
                 __THREW__ = 0;
                 invoke_viii(19,3553,10240,9728);
                 $827 = __THREW__; __THREW__ = 0;
                 $828 = $827&1;
                 if ($828) {
                  label = 44;
                  break L48;
                 }
                 $829 = (($188) + 32|0);
                 $830 = $i;
                 $85 = $829;
                 $86 = $830;
                 $831 = $85;
                 $832 = $86;
                 $833 = $831;
                 $834 = ($833);
                 $835 = HEAP32[$834>>2]|0;
                 $836 = (($835) + ($832<<2)|0);
                 $837 = HEAP32[$836>>2]|0;
                 __THREW__ = 0;
                 invoke_viiiii(4,36160,36064,3553,($837|0),0);
                 $838 = __THREW__; __THREW__ = 0;
                 $839 = $838&1;
                 if ($839) {
                  label = 44;
                  break L48;
                 }
                 $840 = $i;
                 $841 = (($840) + 1)|0;
                 $i = $841;
                }
                __THREW__ = 0;
                invoke_vii(63,36160,0);
                $842 = __THREW__; __THREW__ = 0;
                $843 = $842&1;
                if ($843) {
                 label = 44;
                 break L48;
                }
               }
               $844 = $nFrameBuffers;
               $845 = ($844|0)!=(0);
               if ($845) {
                $846 = $verts;
                dest=$846+0|0; src=(2104)+0|0; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));;
                $847 = $tex_coords;
                dest=$847+0|0; stop=dest+48|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));;
                $848 = $847;
                $849 = (($848) + 8|0);
                HEAPF32[$849>>2] = 1.0;
                $850 = (($848) + 16|0);
                HEAPF32[$850>>2] = 1.0;
                $851 = (($848) + 20|0);
                HEAPF32[$851>>2] = 1.0;
                $852 = (($848) + 32|0);
                HEAPF32[$852>>2] = 1.0;
                $853 = (($848) + 36|0);
                HEAPF32[$853>>2] = 1.0;
                $854 = (($848) + 44|0);
                HEAPF32[$854>>2] = 1.0;
                $855 = ($vbo);
                __THREW__ = 0;
                invoke_vii(57,2,($855|0));
                $856 = __THREW__; __THREW__ = 0;
                $857 = $856&1;
                if ($857) {
                 label = 44;
                 break L48;
                }
                $858 = ($vbo);
                $859 = HEAP32[$858>>2]|0;
                __THREW__ = 0;
                invoke_vii(58,34962,($859|0));
                $860 = __THREW__; __THREW__ = 0;
                $861 = $860&1;
                if ($861) {
                 label = 44;
                 break L48;
                }
                $862 = ($verts);
                $863 = $862;
                __THREW__ = 0;
                invoke_viiii(15,34962,72,($863|0),35044);
                $864 = __THREW__; __THREW__ = 0;
                $865 = $864&1;
                if ($865) {
                 label = 44;
                 break L48;
                }
                $866 = (($vbo) + 4|0);
                $867 = HEAP32[$866>>2]|0;
                __THREW__ = 0;
                invoke_vii(58,34962,($867|0));
                $868 = __THREW__; __THREW__ = 0;
                $869 = $868&1;
                if ($869) {
                 label = 44;
                 break L48;
                }
                $870 = ($tex_coords);
                $871 = $870;
                __THREW__ = 0;
                invoke_viiii(15,34962,48,($871|0),35044);
                $872 = __THREW__; __THREW__ = 0;
                $873 = $872&1;
                if ($873) {
                 label = 44;
                 break L48;
                }
                $874 = (($188) + 56|0);
                __THREW__ = 0;
                invoke_vii(59,1,($874|0));
                $875 = __THREW__; __THREW__ = 0;
                $876 = $875&1;
                if ($876) {
                 label = 44;
                 break L48;
                }
                $877 = (($188) + 56|0);
                $878 = HEAP32[$877>>2]|0;
                __THREW__ = 0;
                invoke_vi(167,($878|0));
                $879 = __THREW__; __THREW__ = 0;
                $880 = $879&1;
                if ($880) {
                 label = 44;
                 break L48;
                }
                $881 = ($vbo);
                $882 = HEAP32[$881>>2]|0;
                __THREW__ = 0;
                invoke_vii(58,34962,($882|0));
                $883 = __THREW__; __THREW__ = 0;
                $884 = $883&1;
                if ($884) {
                 label = 44;
                 break L48;
                }
                __THREW__ = 0;
                invoke_viiiiii(18,0,3,5126,0,0,(0|0));
                $885 = __THREW__; __THREW__ = 0;
                $886 = $885&1;
                if ($886) {
                 label = 44;
                 break L48;
                }
                __THREW__ = 0;
                invoke_vi(168,0);
                $887 = __THREW__; __THREW__ = 0;
                $888 = $887&1;
                if ($888) {
                 label = 44;
                 break L48;
                }
                $889 = (($vbo) + 4|0);
                $890 = HEAP32[$889>>2]|0;
                __THREW__ = 0;
                invoke_vii(58,34962,($890|0));
                $891 = __THREW__; __THREW__ = 0;
                $892 = $891&1;
                if ($892) {
                 label = 44;
                 break L48;
                }
                __THREW__ = 0;
                invoke_viiiiii(18,2,2,5126,0,0,(0|0));
                $893 = __THREW__; __THREW__ = 0;
                $894 = $893&1;
                if ($894) {
                 label = 44;
                 break L48;
                }
                __THREW__ = 0;
                invoke_vi(168,2);
                $895 = __THREW__; __THREW__ = 0;
                $896 = $895&1;
                if ($896) {
                 label = 44;
                 break L48;
                }
                __THREW__ = 0;
                invoke_vi(167,0);
                $897 = __THREW__; __THREW__ = 0;
                $898 = $897&1;
                if ($898) {
                 label = 44;
                 break L48;
                }
               }
               __THREW__ = 0;
               invoke_vi(170,3042);
               $899 = __THREW__; __THREW__ = 0;
               $900 = $899&1;
               if ($900) {
                label = 44;
                break L48;
               }
               __THREW__ = 0;
               invoke_viiii(16,770,771,1,771);
               $901 = __THREW__; __THREW__ = 0;
               $902 = $901&1;
               if ($902) {
                label = 44;
                break L48;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($geometryShaderFilename);
               __ZN7gltools15ShaderContainerD2Ev($shaders);
               STACKTOP = sp;return;
              }
             } while(0);
             $718 = ___cxa_find_matching_catch(-1,-1)|0;
             $719 = tempRet0;
             $168 = $718;
             $169 = $719;
             __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($183);
             break L48;
            }
           } while(0);
           $716 = ___cxa_find_matching_catch(-1,-1)|0;
           $717 = tempRet0;
           $168 = $716;
           $169 = $717;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($182);
          }
         } while(0);
         if ((label|0) == 44) {
          $398 = ___cxa_find_matching_catch(-1,-1)|0;
          $399 = tempRet0;
          $168 = $398;
          $169 = $399;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($geometryShaderFilename);
         break L1;
        }
       } while(0);
       $394 = ___cxa_find_matching_catch(-1,-1)|0;
       $395 = tempRet0;
       $168 = $394;
       $169 = $395;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($173);
      }
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($175);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($174);
      break L1;
     }
    } while(0);
    $390 = ___cxa_find_matching_catch(-1,-1)|0;
    $391 = tempRet0;
    $168 = $390;
    $169 = $391;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($167);
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($171);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($170);
  }
 } while(0);
 if ((label|0) == 36) {
  $386 = ___cxa_find_matching_catch(-1,-1)|0;
  $387 = tempRet0;
  $168 = $386;
  $169 = $387;
 }
 __ZN7gltools15ShaderContainerD2Ev($shaders);
 $903 = $168;
 $904 = $169;
 ___resumeException($903|0);
 // unreachable;
}
function __ZN7gltools15ShaderContainerC1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN7gltools15ShaderContainerC2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__14listIjNS_9allocatorIjEEE9push_backEOj($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__hold = 0, $__na = 0, $__t$i = 0, $__t21$i$i$i = 0, $__tmp$i$i$i = 0, $__tmp$i$i$i1 = 0, $tmp$i = 0, $tmp$i$i = 0;
 var $tmp$i$i$i = 0, $tmp$i$i$i$i = 0, $tmp1$i = 0, $tmp1$i$i = 0, $tmp1$i$i$i$i = 0, $tmp2$i$i$i = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0, u$10 = 0, u$11 = 0, u$12 = 0, u$13 = 0, u$14 = 0, u$15 = 0, u$16 = 0, u$17 = 0, u$18 = 0, u$19 = 0;
 var u$2 = 0, u$3 = 0, u$4 = 0, u$5 = 0, u$6 = 0, u$7 = 0, u$8 = 0, u$9 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 968|0;
 $14 = sp + 104|0;
 $19 = sp + 144|0;
 $43 = sp + 344|0;
 $44 = sp + 352|0;
 $47 = sp + 376|0;
 $48 = sp + 384|0;
 $__t21$i$i$i = sp + 392|0;
 $51 = sp + 416|0;
 $56 = sp + 456|0;
 $__hold = sp + 928|0;
 $94 = sp + 944|0;
 $92 = $this;
 $93 = $__x;
 $95 = $92;
 $96 = $95;
 $91 = $96;
 $97 = $91;
 $98 = (($97) + 8|0);
 $90 = $98;
 $99 = $90;
 $100 = $99;
 $89 = $100;
 $101 = $89;
 $102 = $101;
 $__na = $102;
 $103 = $__na;
 $87 = $103;
 $88 = 1;
 $104 = $87;
 $105 = $88;
 $84 = $104;
 $85 = $105;
 $86 = 0;
 $106 = $85;
 $107 = ($106*12)|0;
 $108 = (__Znwj($107)|0);
 $109 = $108;
 $110 = $__na;
 $81 = $94;
 $82 = $110;
 $83 = 1;
 $111 = $81;
 $112 = $83;
 $113 = $82;
 $78 = $111;
 $79 = $113;
 $80 = $112;
 $114 = $78;
 $115 = ($114);
 $116 = $79;
 HEAP32[$115>>2] = $116;
 $117 = (($114) + 4|0);
 $118 = $80;
 HEAP32[$117>>2] = $118;
 $57 = $__hold;
 $58 = $109;
 $59 = $94;
 $119 = $57;
 $120 = $58;
 $121 = $59;
 $53 = $119;
 $54 = $120;
 $55 = $121;
 $122 = $53;
 $123 = ($122);
 $124 = $54;
 $125 = $55;
 $52 = $125;
 $126 = $52;
 $127 = $56;
 $128 = $126;
 ;HEAP32[$127+0>>2]=HEAP32[$128+0>>2]|0;HEAP32[$127+4>>2]=HEAP32[$128+4>>2]|0;
 $tmp$i$i = $51;
 $tmp1$i$i = $56;
 ;HEAP8[$tmp$i$i+0|0]=HEAP8[$tmp1$i$i+0|0]|0;HEAP8[$tmp$i$i+1|0]=HEAP8[$tmp1$i$i+1|0]|0;HEAP8[$tmp$i$i+2|0]=HEAP8[$tmp1$i$i+2|0]|0;HEAP8[$tmp$i$i+3|0]=HEAP8[$tmp1$i$i+3|0]|0;HEAP8[$tmp$i$i+4|0]=HEAP8[$tmp1$i$i+4|0]|0;HEAP8[$tmp$i$i+5|0]=HEAP8[$tmp1$i$i+5|0]|0;HEAP8[$tmp$i$i+6|0]=HEAP8[$tmp1$i$i+6|0]|0;HEAP8[$tmp$i$i+7|0]=HEAP8[$tmp1$i$i+7|0]|0;
 $49 = $123;
 $50 = $124;
 $129 = $49;
 $130 = $50;
 $tmp$i$i$i = $__t21$i$i$i;
 $tmp2$i$i$i = $51;
 ;HEAP8[$tmp$i$i$i+0|0]=HEAP8[$tmp2$i$i$i+0|0]|0;HEAP8[$tmp$i$i$i+1|0]=HEAP8[$tmp2$i$i$i+1|0]|0;HEAP8[$tmp$i$i$i+2|0]=HEAP8[$tmp2$i$i$i+2|0]|0;HEAP8[$tmp$i$i$i+3|0]=HEAP8[$tmp2$i$i$i+3|0]|0;HEAP8[$tmp$i$i$i+4|0]=HEAP8[$tmp2$i$i$i+4|0]|0;HEAP8[$tmp$i$i$i+5|0]=HEAP8[$tmp2$i$i$i+5|0]|0;HEAP8[$tmp$i$i$i+6|0]=HEAP8[$tmp2$i$i$i+6|0]|0;HEAP8[$tmp$i$i$i+7|0]=HEAP8[$tmp2$i$i$i+7|0]|0;
 $46 = $129;
 HEAP32[$47>>2] = $130;
 $131 = $46;
 $132 = $131;
 $45 = $47;
 $133 = $45;
 $134 = HEAP32[$133>>2]|0;
 $39 = $__t21$i$i$i;
 $135 = $39;
 $136 = $48;
 $137 = $135;
 ;HEAP32[$136+0>>2]=HEAP32[$137+0>>2]|0;HEAP32[$136+4>>2]=HEAP32[$137+4>>2]|0;
 $tmp$i$i$i$i = $44;
 $tmp1$i$i$i$i = $48;
 ;HEAP8[$tmp$i$i$i$i+0|0]=HEAP8[$tmp1$i$i$i$i+0|0]|0;HEAP8[$tmp$i$i$i$i+1|0]=HEAP8[$tmp1$i$i$i$i+1|0]|0;HEAP8[$tmp$i$i$i$i+2|0]=HEAP8[$tmp1$i$i$i$i+2|0]|0;HEAP8[$tmp$i$i$i$i+3|0]=HEAP8[$tmp1$i$i$i$i+3|0]|0;HEAP8[$tmp$i$i$i$i+4|0]=HEAP8[$tmp1$i$i$i$i+4|0]|0;HEAP8[$tmp$i$i$i$i+5|0]=HEAP8[$tmp1$i$i$i$i+5|0]|0;HEAP8[$tmp$i$i$i$i+6|0]=HEAP8[$tmp1$i$i$i$i+6|0]|0;HEAP8[$tmp$i$i$i$i+7|0]=HEAP8[$tmp1$i$i$i$i+7|0]|0;
 $42 = $132;
 HEAP32[$43>>2] = $134;
 $138 = $42;
 $139 = ($138);
 $41 = $43;
 $140 = $41;
 $141 = HEAP32[$140>>2]|0;
 HEAP32[$139>>2] = $141;
 $142 = (($138) + 4|0);
 $40 = $44;
 $143 = $40;
 $144 = $142;
 $145 = $143;
 ;HEAP32[$144+0>>2]=HEAP32[$145+0>>2]|0;HEAP32[$144+4>>2]=HEAP32[$145+4>>2]|0;
 $146 = $__na;
 $3 = $__hold;
 $147 = $3;
 $148 = ($147);
 $2 = $148;
 $149 = $2;
 $150 = $149;
 $1 = $150;
 $151 = $1;
 $152 = ($151);
 $153 = HEAP32[$152>>2]|0;
 $154 = (($153) + 8|0);
 $4 = $154;
 $155 = $4;
 $156 = $155;
 $157 = $156;
 $158 = $93;
 $5 = $158;
 $159 = $5;
 $16 = $146;
 $17 = $157;
 $18 = $159;
 $160 = $16;
 $161 = $17;
 $162 = $18;
 $15 = $162;
 $163 = $15;
 $tmp$i = $14;
 $tmp1$i = $19;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
 $11 = $160;
 $12 = $161;
 $13 = $163;
 $164 = $11;
 $165 = $12;
 $166 = $13;
 $10 = $166;
 $167 = $10;
 $7 = $164;
 $8 = $165;
 $9 = $167;
 $168 = $8;
 $169 = $168;
 $170 = ($169|0)==(0|0);
 if (!($170)) {
  $171 = $169;
  $172 = $9;
  $6 = $172;
  $173 = $6;
  $174 = HEAP32[$173>>2]|0;
  HEAP32[$171>>2] = $174;
 }
 $175 = $95;
 $176 = ($175);
 $21 = $176;
 $177 = $21;
 $20 = $177;
 $178 = $20;
 $179 = $178;
 $180 = $179;
 $181 = $180;
 $24 = $__hold;
 $182 = $24;
 $183 = ($182);
 $23 = $183;
 $184 = $23;
 $185 = $184;
 $22 = $185;
 $186 = $22;
 $187 = ($186);
 $188 = HEAP32[$187>>2]|0;
 $27 = $__hold;
 $189 = $27;
 $190 = ($189);
 $26 = $190;
 $191 = $26;
 $192 = $191;
 $25 = $192;
 $193 = $25;
 $194 = ($193);
 $195 = HEAP32[$194>>2]|0;
 $28 = $181;
 $29 = $188;
 $30 = $195;
 $196 = $29;
 $197 = $28;
 $198 = $197;
 $199 = ($198);
 $200 = HEAP32[$199>>2]|0;
 $201 = $200;
 $202 = (($201) + 4|0);
 HEAP32[$202>>2] = $196;
 $203 = $28;
 $204 = $203;
 $205 = ($204);
 $206 = HEAP32[$205>>2]|0;
 $207 = $29;
 $208 = $207;
 $209 = ($208);
 HEAP32[$209>>2] = $206;
 $210 = $30;
 $211 = $28;
 $212 = $211;
 $213 = ($212);
 HEAP32[$213>>2] = $210;
 $214 = $28;
 $215 = $30;
 $216 = $215;
 $217 = (($216) + 4|0);
 HEAP32[$217>>2] = $214;
 $218 = $95;
 $33 = $218;
 $219 = $33;
 $220 = (($219) + 8|0);
 $32 = $220;
 $221 = $32;
 $222 = $221;
 $31 = $222;
 $223 = $31;
 $224 = ($223);
 $225 = HEAP32[$224>>2]|0;
 $226 = (($225) + 1)|0;
 HEAP32[$224>>2] = $226;
 $38 = $__hold;
 $227 = $38;
 $228 = ($227);
 $37 = $228;
 $229 = $37;
 $230 = $229;
 $36 = $230;
 $231 = $36;
 $232 = ($231);
 $233 = HEAP32[$232>>2]|0;
 $__t$i = $233;
 $234 = ($227);
 $35 = $234;
 $235 = $35;
 $236 = $235;
 $34 = $236;
 $237 = $34;
 $238 = ($237);
 HEAP32[$238>>2] = 0;
 $77 = $__hold;
 $239 = $77;
 $76 = $239;
 $240 = $76;
 $74 = $240;
 $75 = 0;
 $241 = $74;
 $242 = ($241);
 $73 = $242;
 $243 = $73;
 $244 = $243;
 $72 = $244;
 $245 = $72;
 $246 = ($245);
 $247 = HEAP32[$246>>2]|0;
 $__tmp$i$i$i1 = $247;
 $248 = $75;
 $249 = ($241);
 $63 = $249;
 $250 = $63;
 $251 = $250;
 $62 = $251;
 $252 = $62;
 $253 = ($252);
 HEAP32[$253>>2] = $248;
 $254 = $__tmp$i$i$i1;
 $255 = ($254|0)!=(0|0);
 if (!($255)) {
  STACKTOP = sp;return;
 }
 $256 = ($241);
 $61 = $256;
 $257 = $61;
 $258 = $257;
 $60 = $258;
 $259 = $60;
 $260 = (($259) + 4|0);
 $261 = $__tmp$i$i$i1;
 $70 = $260;
 $71 = $261;
 $262 = $70;
 $263 = ($262);
 $264 = HEAP32[$263>>2]|0;
 $265 = $71;
 $266 = (($262) + 4|0);
 $267 = HEAP32[$266>>2]|0;
 $67 = $264;
 $68 = $265;
 $69 = $267;
 $268 = $67;
 $269 = $68;
 $270 = $69;
 $64 = $268;
 $65 = $269;
 $66 = $270;
 $271 = $65;
 $272 = $271;
 __ZdlPv($272);
 STACKTOP = sp;return;
}
function __ZNK10Parameters6getPtrERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPv($this,$key,$def) {
 $this = $this|0;
 $key = $key|0;
 $def = $def|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $__i1$i$i = 0, $__i1$i$i1 = 0, $it = 0, $tmp$i = 0, $tmp$i$i = 0, $tmp$i$i4 = 0, $tmp$i2 = 0, $tmp1$i = 0, $tmp1$i3 = 0;
 var $tmp2$i$i = 0, $tmp2$i$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $__i1$i$i1 = sp + 104|0;
 $15 = sp + 120|0;
 $22 = sp + 176|0;
 $__i1$i$i = sp + 192|0;
 $25 = sp + 208|0;
 $28 = sp + 232|0;
 $it = sp + 272|0;
 $33 = sp + 280|0;
 $30 = $this;
 $31 = $key;
 $32 = $def;
 $34 = $30;
 $35 = (($34) + 80|0);
 $36 = $31;
 $26 = $35;
 $27 = $36;
 $37 = $26;
 $38 = ($37);
 $39 = $27;
 __ZNKSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($28,$38,$39);
 $tmp$i = $25;
 $tmp1$i = $28;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;HEAP8[$tmp$i+1|0]=HEAP8[$tmp1$i+1|0]|0;HEAP8[$tmp$i+2|0]=HEAP8[$tmp1$i+2|0]|0;HEAP8[$tmp$i+3|0]=HEAP8[$tmp1$i+3|0]|0;
 $24 = $it;
 $40 = $24;
 $tmp$i$i = $__i1$i$i;
 $tmp2$i$i = $25;
 ;HEAP8[$tmp$i$i+0|0]=HEAP8[$tmp2$i$i+0|0]|0;HEAP8[$tmp$i$i+1|0]=HEAP8[$tmp2$i$i+1|0]|0;HEAP8[$tmp$i$i+2|0]=HEAP8[$tmp2$i$i+2|0]|0;HEAP8[$tmp$i$i+3|0]=HEAP8[$tmp2$i$i+3|0]|0;
 $23 = $40;
 $41 = $23;
 $42 = ($41);
 $43 = $42;
 $44 = $__i1$i$i;
 ;HEAP32[$43+0>>2]=HEAP32[$44+0>>2]|0;
 $45 = (($34) + 80|0);
 $21 = $45;
 $46 = $21;
 $47 = ($46);
 $20 = $47;
 $18 = $22;
 $19 = 0;
 $48 = $18;
 $49 = $19;
 $16 = $48;
 $17 = $49;
 $50 = $16;
 $51 = ($50);
 $52 = $17;
 HEAP32[$51>>2] = $52;
 $tmp$i2 = $15;
 $tmp1$i3 = $22;
 ;HEAP8[$tmp$i2+0|0]=HEAP8[$tmp1$i3+0|0]|0;HEAP8[$tmp$i2+1|0]=HEAP8[$tmp1$i3+1|0]|0;HEAP8[$tmp$i2+2|0]=HEAP8[$tmp1$i3+2|0]|0;HEAP8[$tmp$i2+3|0]=HEAP8[$tmp1$i3+3|0]|0;
 $14 = $33;
 $53 = $14;
 $tmp$i$i4 = $__i1$i$i1;
 $tmp2$i$i5 = $15;
 ;HEAP8[$tmp$i$i4+0|0]=HEAP8[$tmp2$i$i5+0|0]|0;HEAP8[$tmp$i$i4+1|0]=HEAP8[$tmp2$i$i5+1|0]|0;HEAP8[$tmp$i$i4+2|0]=HEAP8[$tmp2$i$i5+2|0]|0;HEAP8[$tmp$i$i4+3|0]=HEAP8[$tmp2$i$i5+3|0]|0;
 $13 = $53;
 $54 = $13;
 $55 = ($54);
 $56 = $55;
 $57 = $__i1$i$i1;
 ;HEAP32[$56+0>>2]=HEAP32[$57+0>>2]|0;
 $5 = $it;
 $6 = $33;
 $58 = $5;
 $59 = ($58);
 $60 = $6;
 $61 = ($60);
 $3 = $59;
 $4 = $61;
 $62 = $3;
 $63 = $4;
 $1 = $62;
 $2 = $63;
 $64 = $1;
 $65 = ($64);
 $66 = HEAP32[$65>>2]|0;
 $67 = $2;
 $68 = ($67);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($66|0)==($69|0);
 $71 = $70 ^ 1;
 if ($71) {
  $12 = $it;
  $72 = $12;
  $73 = ($72);
  $11 = $73;
  $74 = $11;
  $75 = ($74);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + 8|0);
  $10 = $77;
  $78 = $10;
  $9 = $78;
  $79 = $9;
  $80 = $79;
  $81 = $80;
  $82 = $81;
  $8 = $82;
  $83 = $8;
  $7 = $83;
  $84 = $7;
  $85 = $84;
  $86 = $85;
  $87 = (($86) + 12|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $88;
  $29 = $89;
  $91 = $29;
  STACKTOP = sp;return ($91|0);
 } else {
  $90 = $32;
  $29 = $90;
  $91 = $29;
  STACKTOP = sp;return ($91|0);
 }
 return 0|0;
}
function __ZN10Parameters9setGLuintERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj($this,$key,$val) {
 $this = $this|0;
 $key = $key|0;
 $val = $val|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 $1 = $this;
 $2 = $key;
 $3 = $val;
 $4 = $1;
 $5 = $3;
 $6 = (($4) + 20|0);
 $7 = $2;
 $8 = (__ZNSt3__113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_jEEEEEixERSC_($6,$7)|0);
 HEAP32[$8>>2] = $5;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $__cs = 0, $tmp$i$i$i = 0, $tmp1$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $5 = sp + 32|0;
 $8 = sp + 56|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = $21;
 $23 = (($22) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $21;
 $26 = ($25);
 $27 = HEAP32[$26>>2]|0;
 $28 = $24;
 $29 = $27;
 $30 = (($28) - ($29))|0;
 $31 = (($30|0) / 4)&-1;
 $__cs = $31;
 $32 = $__cs;
 $33 = $19;
 $34 = ($32>>>0)<($33>>>0);
 if ($34) {
  $35 = $19;
  $36 = $__cs;
  $37 = (($35) - ($36))|0;
  __ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEj($20,$37);
  STACKTOP = sp;return;
 }
 $38 = $__cs;
 $39 = $19;
 $40 = ($38>>>0)>($39>>>0);
 if ($40) {
  $41 = $20;
  $42 = ($41);
  $43 = HEAP32[$42>>2]|0;
  $44 = $19;
  $45 = (($43) + ($44<<2)|0);
  $15 = $20;
  $16 = $45;
  $46 = $15;
  $47 = $46;
  $48 = $16;
  $13 = $47;
  $14 = $48;
  $49 = $13;
  while(1) {
   $50 = $14;
   $51 = (($49) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($50|0)!=($52|0);
   if (!($53)) {
    break;
   }
   $12 = $49;
   $54 = $12;
   $55 = (($54) + 8|0);
   $11 = $55;
   $56 = $11;
   $57 = $56;
   $10 = $57;
   $58 = $10;
   $59 = $58;
   $60 = (($49) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + -4|0);
   HEAP32[$60>>2] = $62;
   $9 = $62;
   $63 = $9;
   $6 = $59;
   $7 = $63;
   $64 = $6;
   $65 = $7;
   $tmp$i$i$i = $5;
   $tmp1$i$i$i = $8;
   ;HEAP8[$tmp$i$i$i+0|0]=HEAP8[$tmp1$i$i$i+0|0]|0;
   $3 = $64;
   $4 = $65;
   $66 = $3;
   $67 = $4;
   $1 = $66;
   $2 = $67;
  }
 }
 STACKTOP = sp;return;
}
function __ZN19LorenzAttractorDemo12resizeWindowEii($this,$width,$height) {
 $this = $this|0;
 $width = $width|0;
 $height = $height|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 56|0;
 $4 = $this;
 $5 = $width;
 $6 = $height;
 $7 = $4;
 $i = 0;
 while(1) {
  $8 = $i;
  $9 = (($7) + 32|0);
  $3 = $9;
  $10 = $3;
  $11 = $10;
  $12 = (($11) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $10;
  $15 = ($14);
  $16 = HEAP32[$15>>2]|0;
  $17 = $13;
  $18 = $16;
  $19 = (($17) - ($18))|0;
  $20 = (($19|0) / 4)&-1;
  $21 = ($8>>>0)<($20>>>0);
  if (!($21)) {
   break;
  }
  $22 = (($7) + 32|0);
  $23 = $i;
  $1 = $22;
  $2 = $23;
  $24 = $1;
  $25 = $2;
  $26 = $24;
  $27 = ($26);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + ($25<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  _glBindTexture(3553,($30|0));
  $31 = $5;
  $32 = $6;
  _glTexImage2D(3553,0,6408,($31|0),($32|0),0,6408,5121,(0|0));
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 STACKTOP = sp;return;
}
function __ZN19LorenzAttractorDemo6renderEf($this,$simTime) {
 $this = $this|0;
 $simTime = +$simTime;
 var $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0.0;
 var $97 = 0.0, $98 = 0.0, $99 = 0.0, $M = 0, $MVP = 0, $P = 0, $V = 0, $aspectRatio = 0, $cursorX = 0, $cursorY = 0, $eye = 0, $eyeAzimuth = 0.0, $eyeDist = 0.0, $eyeZ = 0, $hMVP = 0, $hTask = 0, $hTime = 0, $hWindowHeight = 0, $hWindowWidth = 0, $i = 0;
 var $identityMatrix = 0, $invMVP = 0, $nParticles = 0, $rayBack = 0, $rayDir = 0, $rayFront = 0, $windowHeight = 0, $windowWidth = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1064|0;
 $21 = sp + 168|0;
 $windowWidth = sp + 200|0;
 $windowHeight = sp + 208|0;
 $aspectRatio = sp + 216|0;
 $eyeZ = sp + 264|0;
 $eye = sp + 272|0;
 $24 = sp + 288|0;
 $25 = sp + 296|0;
 $identityMatrix = sp + 304|0;
 $26 = sp + 368|0;
 $M = sp + 376|0;
 $27 = sp + 440|0;
 $V = sp + 448|0;
 $28 = sp + 512|0;
 $29 = sp + 528|0;
 $30 = sp + 536|0;
 $31 = sp + 544|0;
 $32 = sp + 560|0;
 $33 = sp + 568|0;
 $34 = sp + 576|0;
 $P = sp + 584|0;
 $35 = sp + 648|0;
 $36 = sp + 656|0;
 $37 = sp + 664|0;
 $MVP = sp + 672|0;
 $38 = sp + 736|0;
 $cursorX = sp + 800|0;
 $cursorY = sp + 808|0;
 $rayFront = sp + 816|0;
 $39 = sp + 832|0;
 $40 = sp + 840|0;
 $rayBack = sp + 848|0;
 $41 = sp + 864|0;
 $42 = sp + 872|0;
 $invMVP = sp + 880|0;
 $43 = sp + 944|0;
 $44 = sp + 960|0;
 $45 = sp + 976|0;
 $46 = sp + 992|0;
 $rayDir = sp + 1008|0;
 $47 = sp + 1024|0;
 $19 = $this;
 $20 = $simTime;
 $48 = $19;
 $49 = (__ZN6global3parEv()|0);
 $17 = $21;
 $18 = (2016);
 $50 = $17;
 $51 = $18;
 $15 = $50;
 $16 = $51;
 $52 = $15;
 $53 = ($52);
 $14 = $53;
 $54 = $14;
 $13 = $54;
 $55 = $13;
 $56 = $55;
 $12 = $56;
 $57 = $12;
 $58 = $57;
 $11 = $58;
 $59 = $16;
 $60 = $16;
 $10 = $60;
 $61 = $10;
 $62 = (_strlen(($61|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($52,$59,$62);
 __THREW__ = 0;
 $63 = (invoke_iiii(24,($49|0),($21|0),0)|0);
 $64 = __THREW__; __THREW__ = 0;
 $65 = $64&1;
 if ($65) {
  $180 = ___cxa_find_matching_catch(-1,-1)|0;
  $181 = tempRet0;
  $22 = $180;
  $23 = $181;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($21);
  $182 = $22;
  $183 = $23;
  ___resumeException($182|0);
  // unreachable;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($21);
 $nParticles = $63;
 HEAP32[$windowWidth>>2] = -1;
 HEAP32[$windowHeight>>2] = -1;
 $66 = (__ZN11Application3getEv()|0);
 __ZNK11Application13getWindowSizeERiS0_($66,$windowWidth,$windowHeight);
 $67 = HEAP32[$windowWidth>>2]|0;
 $68 = (+($67|0));
 $69 = HEAP32[$windowHeight>>2]|0;
 $70 = (+($69|0));
 $71 = $68 / $70;
 HEAPF32[$aspectRatio>>2] = $71;
 $72 = (($48) + 16|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (_glGetUniformLocation(($73|0),((2176)|0))|0);
 $hTime = $74;
 $75 = $hTime;
 $76 = $20;
 _glUniform1f(($75|0),(+$76));
 $77 = (($48) + 16|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = (_glGetUniformLocation(($78|0),((2184)|0))|0);
 $hMVP = $79;
 $80 = (($48) + 16|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = (_glGetUniformLocation(($81|0),((2192)|0))|0);
 $hTask = $82;
 $eyeDist = 100.0;
 $83 = $20;
 $84 = $83 * 0.400000005960464477539;
 $eyeAzimuth = $84;
 HEAPF32[$eyeZ>>2] = 25.0;
 $85 = $eyeDist;
 $86 = $eyeAzimuth;
 $9 = $86;
 $87 = $9;
 $88 = (+Math_cos((+$87)));
 $89 = $85 * $88;
 HEAPF32[$24>>2] = $89;
 $90 = $eyeDist;
 $91 = $eyeAzimuth;
 $8 = $91;
 $92 = $8;
 $93 = (+Math_sin((+$92)));
 $94 = $90 * $93;
 HEAPF32[$25>>2] = $94;
 __ZN3glm6detail5tvec3IfEC1ERKfS4_S4_($eye,$24,$25,$eyeZ);
 HEAPF32[$26>>2] = 1.0;
 __ZN3glm6detail7tmat4x4IfEC1ERKf($identityMatrix,$26);
 HEAPF32[$27>>2] = 1.0;
 __ZN3glm6detail7tmat4x4IfEC1ERKf($M,$27);
 HEAPF32[$29>>2] = 0.0;
 HEAPF32[$30>>2] = 0.0;
 __ZN3glm6detail5tvec3IfEC1ERKfS4_S4_($28,$29,$30,$eyeZ);
 HEAPF32[$32>>2] = 0.0;
 HEAPF32[$33>>2] = 0.0;
 HEAPF32[$34>>2] = 1.0;
 __ZN3glm6detail5tvec3IfEC1ERKfS4_S4_($31,$32,$33,$34);
 __ZN3glm6lookAtIfEENS_6detail7tmat4x4IT_EERKNS1_5tvec3IS3_EES8_S8_($V,$eye,$28,$31);
 HEAPF32[$35>>2] = 25.0;
 HEAPF32[$36>>2] = 10.0;
 HEAPF32[$37>>2] = 200.0;
 __ZN3glm11perspectiveIfEENS_6detail7tmat4x4IT_EERKS3_S6_S6_S6_($P,$35,$aspectRatio,$36,$37);
 __ZN3glm6detailmlIfEENS0_7tmat4x4IT_EERKS4_S6_($38,$P,$V);
 __ZN3glm6detailmlIfEENS0_7tmat4x4IT_EERKS4_S6_($MVP,$38,$M);
 HEAPF32[$cursorX>>2] = 0.0;
 HEAPF32[$cursorY>>2] = 0.0;
 $95 = (__ZN11Application3getEv()|0);
 __ZNK11Application14getCursorPos01ERfS0_($95,$cursorX,$cursorY);
 $96 = +HEAPF32[$cursorX>>2];
 $97 = $96 * 2.0;
 $98 = $97 - 1.0;
 HEAPF32[$cursorX>>2] = $98;
 $99 = +HEAPF32[$cursorY>>2];
 $100 = $99 * 2.0;
 $101 = 1.0 - $100;
 HEAPF32[$cursorY>>2] = $101;
 HEAPF32[$39>>2] = -1.0;
 HEAPF32[$40>>2] = 1.0;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($rayFront,$cursorX,$cursorY,$39,$40);
 HEAPF32[$41>>2] = 1.0;
 HEAPF32[$42>>2] = 1.0;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($rayBack,$cursorX,$cursorY,$41,$42);
 __ZN3glm7inverseIfEENS_6detail7tmat4x4IT_EERKS4_($invMVP,$MVP);
 __ZN3glm6detailmlIfEENS0_7tmat4x4IT_E8col_typeERKS4_RKNS4_8row_typeE($43,$invMVP,$rayFront);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($rayFront,$43)|0);
 __ZN3glm6detailmlIfEENS0_7tmat4x4IT_E8col_typeERKS4_RKNS4_8row_typeE($44,$invMVP,$rayBack);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($rayBack,$44)|0);
 $102 = (($rayFront) + 12|0);
 $103 = $102;
 __ZN3glm6detaildvIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($45,$rayFront,$103);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($rayFront,$45)|0);
 $104 = (($rayBack) + 12|0);
 $105 = $104;
 __ZN3glm6detaildvIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($46,$rayBack,$105);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($rayBack,$46)|0);
 __ZN3glm6detailmiIfEENS0_5tvec4IT_EERKS4_S6_($47,$rayBack,$rayFront);
 __ZN3glm9normalizeIfEENS_6detail5tvec4IT_EERKS4_($rayDir,$47);
 $106 = (__ZN11Application3getEv()|0);
 $107 = ($rayFront);
 $108 = $107;
 $109 = ($rayDir);
 $110 = $109;
 __ZN11Application12setCursorRayEPfS0_($106,$108,$110);
 $111 = (($48) + 16|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = (_glGetUniformLocation(($112|0),((2200)|0))|0);
 $hWindowWidth = $113;
 $114 = $hWindowWidth;
 $115 = HEAP32[$windowWidth>>2]|0;
 $116 = (+($115|0));
 _glUniform1f(($114|0),(+$116));
 $117 = (($48) + 16|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = (_glGetUniformLocation(($118|0),((2216)|0))|0);
 $hWindowHeight = $119;
 $120 = $hWindowHeight;
 $121 = HEAP32[$windowHeight>>2]|0;
 $122 = (+($121|0));
 _glUniform1f(($120|0),(+$122));
 $123 = (($48) + 20|0);
 $6 = $123;
 $7 = 0;
 $124 = $6;
 $125 = $7;
 $126 = $124;
 $127 = ($126);
 $128 = HEAP32[$127>>2]|0;
 $129 = (($128) + ($125<<2)|0);
 $130 = HEAP32[$129>>2]|0;
 _glBindFramebuffer(36160,($130|0));
 _glClear(16384);
 $131 = $hTask;
 _glUniform1i(($131|0),0);
 $132 = $hMVP;
 $133 = (__ZN3glm6detail7tmat4x4IfEixEj($MVP,0)|0);
 $134 = (__ZN3glm6detail5tvec4IfEixEj($133,0)|0);
 _glUniformMatrix4fv(($132|0),1,0,($134|0));
 $135 = (($48) + 12|0);
 $136 = HEAP32[$135>>2]|0;
 _glBindVertexArray(($136|0));
 $137 = $nParticles;
 _glDrawArrays(0,0,($137|0));
 _glFinish();
 $i = 1;
 while(1) {
  $138 = $i;
  $139 = (($48) + 20|0);
  $5 = $139;
  $140 = $5;
  $141 = $140;
  $142 = (($141) + 4|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = $140;
  $145 = ($144);
  $146 = HEAP32[$145>>2]|0;
  $147 = $143;
  $148 = $146;
  $149 = (($147) - ($148))|0;
  $150 = (($149|0) / 4)&-1;
  $151 = ($138|0)<($150|0);
  if (!($151)) {
   break;
  }
  $152 = (($48) + 20|0);
  $153 = $i;
  $3 = $152;
  $4 = $153;
  $154 = $3;
  $155 = $4;
  $156 = $154;
  $157 = ($156);
  $158 = HEAP32[$157>>2]|0;
  $159 = (($158) + ($155<<2)|0);
  $160 = HEAP32[$159>>2]|0;
  _glBindFramebuffer(36160,($160|0));
  _glActiveTexture(33984);
  $161 = (($48) + 32|0);
  $162 = $i;
  $163 = (($162) - 1)|0;
  $1 = $161;
  $2 = $163;
  $164 = $1;
  $165 = $2;
  $166 = $164;
  $167 = ($166);
  $168 = HEAP32[$167>>2]|0;
  $169 = (($168) + ($165<<2)|0);
  $170 = HEAP32[$169>>2]|0;
  _glBindTexture(3553,($170|0));
  _glClear(16384);
  $171 = $hTask;
  $172 = $i;
  _glUniform1i(($171|0),($172|0));
  $173 = $hMVP;
  $174 = (__ZN3glm6detail7tmat4x4IfEixEj($identityMatrix,0)|0);
  $175 = (__ZN3glm6detail5tvec4IfEixEj($174,0)|0);
  _glUniformMatrix4fv(($173|0),1,0,($175|0));
  $176 = (($48) + 56|0);
  $177 = HEAP32[$176>>2]|0;
  _glBindVertexArray(($177|0));
  _glDrawArrays(4,0,6);
  _glFinish();
  $178 = $i;
  $179 = (($178) + 1)|0;
  $i = $179;
 }
 STACKTOP = sp;return;
}
function __ZN3glm6detail5tvec3IfEC1ERKfS4_S4_($this,$s0,$s1,$s2) {
 $this = $this|0;
 $s0 = $s0|0;
 $s1 = $s1|0;
 $s2 = $s2|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $this;
 $2 = $s0;
 $3 = $s1;
 $4 = $s2;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 __ZN3glm6detail5tvec3IfEC2ERKfS4_S4_($5,$6,$7,$8);
 STACKTOP = sp;return;
}
function __ZN3glm6detail7tmat4x4IfEC1ERKf($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $s;
 $3 = $1;
 $4 = $2;
 __ZN3glm6detail7tmat4x4IfEC2ERKf($3,$4);
 STACKTOP = sp;return;
}
function __ZN3glm6lookAtIfEENS_6detail7tmat4x4IT_EERKNS1_5tvec3IS3_EES8_S8_($agg$result,$eye,$center,$up) {
 $agg$result = $agg$result|0;
 $eye = $eye|0;
 $center = $center|0;
 $up = $up|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $f = 0, $s = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $f = sp + 24|0;
 $4 = sp + 40|0;
 $u = sp + 56|0;
 $s = sp + 72|0;
 $5 = sp + 88|0;
 $6 = sp + 104|0;
 $7 = sp + 120|0;
 $1 = $eye;
 $2 = $center;
 $3 = $up;
 $8 = $2;
 $9 = $1;
 __ZN3glm6detailmiIfEENS0_5tvec3IT_EERKS4_S6_($4,$8,$9);
 __ZN3glm9normalizeIfEENS_6detail5tvec3IT_EERKS4_($f,$4);
 $10 = $3;
 __ZN3glm9normalizeIfEENS_6detail5tvec3IT_EERKS4_($u,$10);
 __ZN3glm5crossIfEENS_6detail5tvec3IT_EERKS4_S6_($5,$f,$u);
 __ZN3glm9normalizeIfEENS_6detail5tvec3IT_EERKS4_($s,$5);
 __ZN3glm5crossIfEENS_6detail5tvec3IT_EERKS4_S6_($6,$s,$f);
 (__ZN3glm6detail5tvec3IfEaSERKS2_($u,$6)|0);
 HEAP32[$7>>2] = 1;
 __ZN3glm6detail7tmat4x4IfEC1IiEERKT_($agg$result,$7);
 $11 = ($s);
 $12 = $11;
 $13 = +HEAPF32[$12>>2];
 $14 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,0)|0);
 $15 = (__ZN3glm6detail5tvec4IfEixEj($14,0)|0);
 HEAPF32[$15>>2] = $13;
 $16 = (($s) + 4|0);
 $17 = $16;
 $18 = +HEAPF32[$17>>2];
 $19 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,1)|0);
 $20 = (__ZN3glm6detail5tvec4IfEixEj($19,0)|0);
 HEAPF32[$20>>2] = $18;
 $21 = (($s) + 8|0);
 $22 = $21;
 $23 = +HEAPF32[$22>>2];
 $24 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,2)|0);
 $25 = (__ZN3glm6detail5tvec4IfEixEj($24,0)|0);
 HEAPF32[$25>>2] = $23;
 $26 = ($u);
 $27 = $26;
 $28 = +HEAPF32[$27>>2];
 $29 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,0)|0);
 $30 = (__ZN3glm6detail5tvec4IfEixEj($29,1)|0);
 HEAPF32[$30>>2] = $28;
 $31 = (($u) + 4|0);
 $32 = $31;
 $33 = +HEAPF32[$32>>2];
 $34 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,1)|0);
 $35 = (__ZN3glm6detail5tvec4IfEixEj($34,1)|0);
 HEAPF32[$35>>2] = $33;
 $36 = (($u) + 8|0);
 $37 = $36;
 $38 = +HEAPF32[$37>>2];
 $39 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,2)|0);
 $40 = (__ZN3glm6detail5tvec4IfEixEj($39,1)|0);
 HEAPF32[$40>>2] = $38;
 $41 = ($f);
 $42 = $41;
 $43 = +HEAPF32[$42>>2];
 $44 = -$43;
 $45 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,0)|0);
 $46 = (__ZN3glm6detail5tvec4IfEixEj($45,2)|0);
 HEAPF32[$46>>2] = $44;
 $47 = (($f) + 4|0);
 $48 = $47;
 $49 = +HEAPF32[$48>>2];
 $50 = -$49;
 $51 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,1)|0);
 $52 = (__ZN3glm6detail5tvec4IfEixEj($51,2)|0);
 HEAPF32[$52>>2] = $50;
 $53 = (($f) + 8|0);
 $54 = $53;
 $55 = +HEAPF32[$54>>2];
 $56 = -$55;
 $57 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,2)|0);
 $58 = (__ZN3glm6detail5tvec4IfEixEj($57,2)|0);
 HEAPF32[$58>>2] = $56;
 $59 = $1;
 $60 = (+__ZN3glm3dotIfEET_RKNS_6detail5tvec3IS1_EES6_($s,$59));
 $61 = -$60;
 $62 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,3)|0);
 $63 = (__ZN3glm6detail5tvec4IfEixEj($62,0)|0);
 HEAPF32[$63>>2] = $61;
 $64 = $1;
 $65 = (+__ZN3glm3dotIfEET_RKNS_6detail5tvec3IS1_EES6_($u,$64));
 $66 = -$65;
 $67 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,3)|0);
 $68 = (__ZN3glm6detail5tvec4IfEixEj($67,1)|0);
 HEAPF32[$68>>2] = $66;
 $69 = $1;
 $70 = (+__ZN3glm3dotIfEET_RKNS_6detail5tvec3IS1_EES6_($f,$69));
 $71 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,3)|0);
 $72 = (__ZN3glm6detail5tvec4IfEixEj($71,2)|0);
 HEAPF32[$72>>2] = $70;
 STACKTOP = sp;return;
}
function __ZN3glm11perspectiveIfEENS_6detail7tmat4x4IT_EERKS3_S6_S6_S6_($agg$result,$fovy,$aspect,$zNear,$zFar) {
 $agg$result = $agg$result|0;
 $fovy = $fovy|0;
 $aspect = $aspect|0;
 $zNear = $zNear|0;
 $zFar = $zFar|0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0;
 var $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $8 = 0, $9 = 0.0, $bottom = 0.0, $left = 0.0, $range = 0.0, $right = 0.0;
 var $top = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $5 = sp + 40|0;
 $6 = sp + 48|0;
 $7 = sp + 88|0;
 $1 = $fovy;
 $2 = $aspect;
 $3 = $zNear;
 $4 = $zFar;
 $8 = $1;
 $9 = +HEAPF32[$8>>2];
 $10 = $9 / 2.0;
 HEAPF32[$5>>2] = $10;
 $11 = (+__ZN3glm7radiansIfEET_RKS1_($5));
 HEAPF32[$6>>2] = $11;
 $12 = (+__ZN3glm3tanIfEET_RKS1_($6));
 $13 = $3;
 $14 = +HEAPF32[$13>>2];
 $15 = $12 * $14;
 $range = $15;
 $16 = $range;
 $17 = -$16;
 $18 = $2;
 $19 = +HEAPF32[$18>>2];
 $20 = $17 * $19;
 $left = $20;
 $21 = $range;
 $22 = $2;
 $23 = +HEAPF32[$22>>2];
 $24 = $21 * $23;
 $right = $24;
 $25 = $range;
 $26 = -$25;
 $bottom = $26;
 $27 = $range;
 $top = $27;
 HEAPF32[$7>>2] = 0.0;
 __ZN3glm6detail7tmat4x4IfEC1ERKf($agg$result,$7);
 $28 = $3;
 $29 = +HEAPF32[$28>>2];
 $30 = 2.0 * $29;
 $31 = $right;
 $32 = $left;
 $33 = $31 - $32;
 $34 = $30 / $33;
 $35 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,0)|0);
 $36 = (__ZN3glm6detail5tvec4IfEixEj($35,0)|0);
 HEAPF32[$36>>2] = $34;
 $37 = $3;
 $38 = +HEAPF32[$37>>2];
 $39 = 2.0 * $38;
 $40 = $top;
 $41 = $bottom;
 $42 = $40 - $41;
 $43 = $39 / $42;
 $44 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,1)|0);
 $45 = (__ZN3glm6detail5tvec4IfEixEj($44,1)|0);
 HEAPF32[$45>>2] = $43;
 $46 = $4;
 $47 = +HEAPF32[$46>>2];
 $48 = $3;
 $49 = +HEAPF32[$48>>2];
 $50 = $47 + $49;
 $51 = -$50;
 $52 = $4;
 $53 = +HEAPF32[$52>>2];
 $54 = $3;
 $55 = +HEAPF32[$54>>2];
 $56 = $53 - $55;
 $57 = $51 / $56;
 $58 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,2)|0);
 $59 = (__ZN3glm6detail5tvec4IfEixEj($58,2)|0);
 HEAPF32[$59>>2] = $57;
 $60 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,2)|0);
 $61 = (__ZN3glm6detail5tvec4IfEixEj($60,3)|0);
 HEAPF32[$61>>2] = -1.0;
 $62 = $4;
 $63 = +HEAPF32[$62>>2];
 $64 = 2.0 * $63;
 $65 = $3;
 $66 = +HEAPF32[$65>>2];
 $67 = $64 * $66;
 $68 = -$67;
 $69 = $4;
 $70 = +HEAPF32[$69>>2];
 $71 = $3;
 $72 = +HEAPF32[$71>>2];
 $73 = $70 - $72;
 $74 = $68 / $73;
 $75 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,3)|0);
 $76 = (__ZN3glm6detail5tvec4IfEixEj($75,2)|0);
 HEAPF32[$76>>2] = $74;
 STACKTOP = sp;return;
}
function __ZN3glm6detailmlIfEENS0_7tmat4x4IT_EERKS4_S6_($agg$result,$m1,$m2) {
 $agg$result = $agg$result|0;
 $m1 = $m1|0;
 $m2 = $m2|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $SrcA0 = 0, $SrcA1 = 0, $SrcA2 = 0, $SrcA3 = 0, $SrcB0 = 0, $SrcB1 = 0, $SrcB2 = 0, $SrcB3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0;
 $SrcA0 = sp + 16|0;
 $SrcA1 = sp + 32|0;
 $SrcA2 = sp + 48|0;
 $SrcA3 = sp + 64|0;
 $SrcB0 = sp + 80|0;
 $SrcB1 = sp + 96|0;
 $SrcB2 = sp + 112|0;
 $SrcB3 = sp + 128|0;
 $3 = sp + 144|0;
 $4 = sp + 160|0;
 $5 = sp + 176|0;
 $6 = sp + 192|0;
 $7 = sp + 208|0;
 $8 = sp + 224|0;
 $9 = sp + 240|0;
 $10 = sp + 256|0;
 $11 = sp + 272|0;
 $12 = sp + 288|0;
 $13 = sp + 304|0;
 $14 = sp + 320|0;
 $15 = sp + 336|0;
 $16 = sp + 352|0;
 $17 = sp + 368|0;
 $18 = sp + 384|0;
 $19 = sp + 400|0;
 $20 = sp + 416|0;
 $21 = sp + 432|0;
 $22 = sp + 448|0;
 $23 = sp + 464|0;
 $24 = sp + 480|0;
 $25 = sp + 496|0;
 $26 = sp + 512|0;
 $27 = sp + 528|0;
 $28 = sp + 544|0;
 $29 = sp + 560|0;
 $30 = sp + 576|0;
 $1 = $m1;
 $2 = $m2;
 $31 = $1;
 $32 = (__ZNK3glm6detail7tmat4x4IfEixEj($31,0)|0);
 __ZN3glm6detail5tvec4IfEC1ERKS2_($SrcA0,$32);
 $33 = $1;
 $34 = (__ZNK3glm6detail7tmat4x4IfEixEj($33,1)|0);
 __ZN3glm6detail5tvec4IfEC1ERKS2_($SrcA1,$34);
 $35 = $1;
 $36 = (__ZNK3glm6detail7tmat4x4IfEixEj($35,2)|0);
 __ZN3glm6detail5tvec4IfEC1ERKS2_($SrcA2,$36);
 $37 = $1;
 $38 = (__ZNK3glm6detail7tmat4x4IfEixEj($37,3)|0);
 __ZN3glm6detail5tvec4IfEC1ERKS2_($SrcA3,$38);
 $39 = $2;
 $40 = (__ZNK3glm6detail7tmat4x4IfEixEj($39,0)|0);
 __ZN3glm6detail5tvec4IfEC1ERKS2_($SrcB0,$40);
 $41 = $2;
 $42 = (__ZNK3glm6detail7tmat4x4IfEixEj($41,1)|0);
 __ZN3glm6detail5tvec4IfEC1ERKS2_($SrcB1,$42);
 $43 = $2;
 $44 = (__ZNK3glm6detail7tmat4x4IfEixEj($43,2)|0);
 __ZN3glm6detail5tvec4IfEC1ERKS2_($SrcB2,$44);
 $45 = $2;
 $46 = (__ZNK3glm6detail7tmat4x4IfEixEj($45,3)|0);
 __ZN3glm6detail5tvec4IfEC1ERKS2_($SrcB3,$46);
 __ZN3glm6detail7tmat4x4IfEC1ENS2_4ctorE($agg$result,0);
 $47 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,0)|0);
 $48 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB0,0)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($6,$SrcA0,$48);
 $49 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB0,1)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($7,$SrcA1,$49);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($5,$6,$7);
 $50 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB0,2)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($8,$SrcA2,$50);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($4,$5,$8);
 $51 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB0,3)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($9,$SrcA3,$51);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($3,$4,$9);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($47,$3)|0);
 $52 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,1)|0);
 $53 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB1,0)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($13,$SrcA0,$53);
 $54 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB1,1)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($14,$SrcA1,$54);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($12,$13,$14);
 $55 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB1,2)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($15,$SrcA2,$55);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($11,$12,$15);
 $56 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB1,3)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($16,$SrcA3,$56);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($10,$11,$16);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($52,$10)|0);
 $57 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,2)|0);
 $58 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB2,0)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($20,$SrcA0,$58);
 $59 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB2,1)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($21,$SrcA1,$59);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($19,$20,$21);
 $60 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB2,2)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($22,$SrcA2,$60);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($18,$19,$22);
 $61 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB2,3)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($23,$SrcA3,$61);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($17,$18,$23);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($57,$17)|0);
 $62 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,3)|0);
 $63 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB3,0)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($27,$SrcA0,$63);
 $64 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB3,1)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($28,$SrcA1,$64);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($26,$27,$28);
 $65 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB3,2)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($29,$SrcA2,$65);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($25,$26,$29);
 $66 = (__ZNK3glm6detail5tvec4IfEixEj($SrcB3,3)|0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($30,$SrcA3,$66);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($24,$25,$30);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($62,$24)|0);
 STACKTOP = sp;return;
}
function __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($this,$s1,$s2,$s3,$s4) {
 $this = $this|0;
 $s1 = $s1|0;
 $s2 = $s2|0;
 $s3 = $s3|0;
 $s4 = $s4|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $1 = $this;
 $2 = $s1;
 $3 = $s2;
 $4 = $s3;
 $5 = $s4;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 __ZN3glm6detail5tvec4IfEC2ERKfS4_S4_S4_($6,$7,$8,$9,$10);
 STACKTOP = sp;return;
}
function __ZN3glm7inverseIfEENS_6detail7tmat4x4IT_EERKS4_($agg$result,$m) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0;
 var $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0, $189 = 0.0;
 var $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0.0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0.0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0, $284 = 0.0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0, $306 = 0, $307 = 0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0.0, $314 = 0.0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0, $327 = 0.0, $328 = 0, $329 = 0, $33 = 0.0, $330 = 0, $331 = 0.0, $332 = 0.0;
 var $333 = 0.0, $334 = 0, $335 = 0, $336 = 0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0.0, $342 = 0.0, $343 = 0, $344 = 0, $345 = 0, $346 = 0.0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0.0;
 var $351 = 0.0, $352 = 0.0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0, $367 = 0, $368 = 0, $369 = 0.0;
 var $37 = 0.0, $370 = 0.0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0.0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0.0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $Coef00 = 0, $Coef02 = 0, $Coef03 = 0, $Coef04 = 0, $Coef06 = 0, $Coef07 = 0, $Coef08 = 0, $Coef10 = 0, $Coef11 = 0, $Coef12 = 0;
 var $Coef14 = 0, $Coef15 = 0, $Coef16 = 0, $Coef18 = 0, $Coef19 = 0, $Coef20 = 0, $Coef22 = 0, $Coef23 = 0, $Determinant = 0, $Fac0 = 0, $Fac1 = 0, $Fac2 = 0, $Fac3 = 0, $Fac4 = 0, $Fac5 = 0, $Inv0 = 0, $Inv1 = 0, $Inv2 = 0, $Inv3 = 0, $Row0 = 0;
 var $SignA = 0, $SignB = 0, $Vec0 = 0, $Vec1 = 0, $Vec2 = 0, $Vec3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 816|0;
 $Coef00 = sp + 8|0;
 $Coef02 = sp + 16|0;
 $Coef03 = sp + 24|0;
 $Coef04 = sp + 32|0;
 $Coef06 = sp + 40|0;
 $Coef07 = sp + 48|0;
 $Coef08 = sp + 56|0;
 $Coef10 = sp + 64|0;
 $Coef11 = sp + 72|0;
 $Coef12 = sp + 80|0;
 $Coef14 = sp + 88|0;
 $Coef15 = sp + 96|0;
 $Coef16 = sp + 104|0;
 $Coef18 = sp + 112|0;
 $Coef19 = sp + 120|0;
 $Coef20 = sp + 128|0;
 $Coef22 = sp + 136|0;
 $Coef23 = sp + 144|0;
 $SignA = sp + 152|0;
 $2 = sp + 168|0;
 $3 = sp + 176|0;
 $4 = sp + 184|0;
 $5 = sp + 192|0;
 $SignB = sp + 200|0;
 $6 = sp + 216|0;
 $7 = sp + 224|0;
 $8 = sp + 232|0;
 $9 = sp + 240|0;
 $Fac0 = sp + 248|0;
 $Fac1 = sp + 264|0;
 $Fac2 = sp + 280|0;
 $Fac3 = sp + 296|0;
 $Fac4 = sp + 312|0;
 $Fac5 = sp + 328|0;
 $Vec0 = sp + 344|0;
 $Vec1 = sp + 360|0;
 $Vec2 = sp + 376|0;
 $Vec3 = sp + 392|0;
 $Inv0 = sp + 408|0;
 $10 = sp + 424|0;
 $11 = sp + 440|0;
 $12 = sp + 456|0;
 $13 = sp + 472|0;
 $14 = sp + 488|0;
 $Inv1 = sp + 504|0;
 $15 = sp + 520|0;
 $16 = sp + 536|0;
 $17 = sp + 552|0;
 $18 = sp + 568|0;
 $19 = sp + 584|0;
 $Inv2 = sp + 600|0;
 $20 = sp + 616|0;
 $21 = sp + 632|0;
 $22 = sp + 648|0;
 $23 = sp + 664|0;
 $24 = sp + 680|0;
 $Inv3 = sp + 696|0;
 $25 = sp + 712|0;
 $26 = sp + 728|0;
 $27 = sp + 744|0;
 $28 = sp + 760|0;
 $29 = sp + 776|0;
 $Row0 = sp + 792|0;
 $Determinant = sp + 808|0;
 $1 = $m;
 $30 = $1;
 $31 = (__ZNK3glm6detail7tmat4x4IfEixEj($30,2)|0);
 $32 = (__ZNK3glm6detail5tvec4IfEixEj($31,2)|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $1;
 $35 = (__ZNK3glm6detail7tmat4x4IfEixEj($34,3)|0);
 $36 = (__ZNK3glm6detail5tvec4IfEixEj($35,3)|0);
 $37 = +HEAPF32[$36>>2];
 $38 = $33 * $37;
 $39 = $1;
 $40 = (__ZNK3glm6detail7tmat4x4IfEixEj($39,3)|0);
 $41 = (__ZNK3glm6detail5tvec4IfEixEj($40,2)|0);
 $42 = +HEAPF32[$41>>2];
 $43 = $1;
 $44 = (__ZNK3glm6detail7tmat4x4IfEixEj($43,2)|0);
 $45 = (__ZNK3glm6detail5tvec4IfEixEj($44,3)|0);
 $46 = +HEAPF32[$45>>2];
 $47 = $42 * $46;
 $48 = $38 - $47;
 HEAPF32[$Coef00>>2] = $48;
 $49 = $1;
 $50 = (__ZNK3glm6detail7tmat4x4IfEixEj($49,1)|0);
 $51 = (__ZNK3glm6detail5tvec4IfEixEj($50,2)|0);
 $52 = +HEAPF32[$51>>2];
 $53 = $1;
 $54 = (__ZNK3glm6detail7tmat4x4IfEixEj($53,3)|0);
 $55 = (__ZNK3glm6detail5tvec4IfEixEj($54,3)|0);
 $56 = +HEAPF32[$55>>2];
 $57 = $52 * $56;
 $58 = $1;
 $59 = (__ZNK3glm6detail7tmat4x4IfEixEj($58,3)|0);
 $60 = (__ZNK3glm6detail5tvec4IfEixEj($59,2)|0);
 $61 = +HEAPF32[$60>>2];
 $62 = $1;
 $63 = (__ZNK3glm6detail7tmat4x4IfEixEj($62,1)|0);
 $64 = (__ZNK3glm6detail5tvec4IfEixEj($63,3)|0);
 $65 = +HEAPF32[$64>>2];
 $66 = $61 * $65;
 $67 = $57 - $66;
 HEAPF32[$Coef02>>2] = $67;
 $68 = $1;
 $69 = (__ZNK3glm6detail7tmat4x4IfEixEj($68,1)|0);
 $70 = (__ZNK3glm6detail5tvec4IfEixEj($69,2)|0);
 $71 = +HEAPF32[$70>>2];
 $72 = $1;
 $73 = (__ZNK3glm6detail7tmat4x4IfEixEj($72,2)|0);
 $74 = (__ZNK3glm6detail5tvec4IfEixEj($73,3)|0);
 $75 = +HEAPF32[$74>>2];
 $76 = $71 * $75;
 $77 = $1;
 $78 = (__ZNK3glm6detail7tmat4x4IfEixEj($77,2)|0);
 $79 = (__ZNK3glm6detail5tvec4IfEixEj($78,2)|0);
 $80 = +HEAPF32[$79>>2];
 $81 = $1;
 $82 = (__ZNK3glm6detail7tmat4x4IfEixEj($81,1)|0);
 $83 = (__ZNK3glm6detail5tvec4IfEixEj($82,3)|0);
 $84 = +HEAPF32[$83>>2];
 $85 = $80 * $84;
 $86 = $76 - $85;
 HEAPF32[$Coef03>>2] = $86;
 $87 = $1;
 $88 = (__ZNK3glm6detail7tmat4x4IfEixEj($87,2)|0);
 $89 = (__ZNK3glm6detail5tvec4IfEixEj($88,1)|0);
 $90 = +HEAPF32[$89>>2];
 $91 = $1;
 $92 = (__ZNK3glm6detail7tmat4x4IfEixEj($91,3)|0);
 $93 = (__ZNK3glm6detail5tvec4IfEixEj($92,3)|0);
 $94 = +HEAPF32[$93>>2];
 $95 = $90 * $94;
 $96 = $1;
 $97 = (__ZNK3glm6detail7tmat4x4IfEixEj($96,3)|0);
 $98 = (__ZNK3glm6detail5tvec4IfEixEj($97,1)|0);
 $99 = +HEAPF32[$98>>2];
 $100 = $1;
 $101 = (__ZNK3glm6detail7tmat4x4IfEixEj($100,2)|0);
 $102 = (__ZNK3glm6detail5tvec4IfEixEj($101,3)|0);
 $103 = +HEAPF32[$102>>2];
 $104 = $99 * $103;
 $105 = $95 - $104;
 HEAPF32[$Coef04>>2] = $105;
 $106 = $1;
 $107 = (__ZNK3glm6detail7tmat4x4IfEixEj($106,1)|0);
 $108 = (__ZNK3glm6detail5tvec4IfEixEj($107,1)|0);
 $109 = +HEAPF32[$108>>2];
 $110 = $1;
 $111 = (__ZNK3glm6detail7tmat4x4IfEixEj($110,3)|0);
 $112 = (__ZNK3glm6detail5tvec4IfEixEj($111,3)|0);
 $113 = +HEAPF32[$112>>2];
 $114 = $109 * $113;
 $115 = $1;
 $116 = (__ZNK3glm6detail7tmat4x4IfEixEj($115,3)|0);
 $117 = (__ZNK3glm6detail5tvec4IfEixEj($116,1)|0);
 $118 = +HEAPF32[$117>>2];
 $119 = $1;
 $120 = (__ZNK3glm6detail7tmat4x4IfEixEj($119,1)|0);
 $121 = (__ZNK3glm6detail5tvec4IfEixEj($120,3)|0);
 $122 = +HEAPF32[$121>>2];
 $123 = $118 * $122;
 $124 = $114 - $123;
 HEAPF32[$Coef06>>2] = $124;
 $125 = $1;
 $126 = (__ZNK3glm6detail7tmat4x4IfEixEj($125,1)|0);
 $127 = (__ZNK3glm6detail5tvec4IfEixEj($126,1)|0);
 $128 = +HEAPF32[$127>>2];
 $129 = $1;
 $130 = (__ZNK3glm6detail7tmat4x4IfEixEj($129,2)|0);
 $131 = (__ZNK3glm6detail5tvec4IfEixEj($130,3)|0);
 $132 = +HEAPF32[$131>>2];
 $133 = $128 * $132;
 $134 = $1;
 $135 = (__ZNK3glm6detail7tmat4x4IfEixEj($134,2)|0);
 $136 = (__ZNK3glm6detail5tvec4IfEixEj($135,1)|0);
 $137 = +HEAPF32[$136>>2];
 $138 = $1;
 $139 = (__ZNK3glm6detail7tmat4x4IfEixEj($138,1)|0);
 $140 = (__ZNK3glm6detail5tvec4IfEixEj($139,3)|0);
 $141 = +HEAPF32[$140>>2];
 $142 = $137 * $141;
 $143 = $133 - $142;
 HEAPF32[$Coef07>>2] = $143;
 $144 = $1;
 $145 = (__ZNK3glm6detail7tmat4x4IfEixEj($144,2)|0);
 $146 = (__ZNK3glm6detail5tvec4IfEixEj($145,1)|0);
 $147 = +HEAPF32[$146>>2];
 $148 = $1;
 $149 = (__ZNK3glm6detail7tmat4x4IfEixEj($148,3)|0);
 $150 = (__ZNK3glm6detail5tvec4IfEixEj($149,2)|0);
 $151 = +HEAPF32[$150>>2];
 $152 = $147 * $151;
 $153 = $1;
 $154 = (__ZNK3glm6detail7tmat4x4IfEixEj($153,3)|0);
 $155 = (__ZNK3glm6detail5tvec4IfEixEj($154,1)|0);
 $156 = +HEAPF32[$155>>2];
 $157 = $1;
 $158 = (__ZNK3glm6detail7tmat4x4IfEixEj($157,2)|0);
 $159 = (__ZNK3glm6detail5tvec4IfEixEj($158,2)|0);
 $160 = +HEAPF32[$159>>2];
 $161 = $156 * $160;
 $162 = $152 - $161;
 HEAPF32[$Coef08>>2] = $162;
 $163 = $1;
 $164 = (__ZNK3glm6detail7tmat4x4IfEixEj($163,1)|0);
 $165 = (__ZNK3glm6detail5tvec4IfEixEj($164,1)|0);
 $166 = +HEAPF32[$165>>2];
 $167 = $1;
 $168 = (__ZNK3glm6detail7tmat4x4IfEixEj($167,3)|0);
 $169 = (__ZNK3glm6detail5tvec4IfEixEj($168,2)|0);
 $170 = +HEAPF32[$169>>2];
 $171 = $166 * $170;
 $172 = $1;
 $173 = (__ZNK3glm6detail7tmat4x4IfEixEj($172,3)|0);
 $174 = (__ZNK3glm6detail5tvec4IfEixEj($173,1)|0);
 $175 = +HEAPF32[$174>>2];
 $176 = $1;
 $177 = (__ZNK3glm6detail7tmat4x4IfEixEj($176,1)|0);
 $178 = (__ZNK3glm6detail5tvec4IfEixEj($177,2)|0);
 $179 = +HEAPF32[$178>>2];
 $180 = $175 * $179;
 $181 = $171 - $180;
 HEAPF32[$Coef10>>2] = $181;
 $182 = $1;
 $183 = (__ZNK3glm6detail7tmat4x4IfEixEj($182,1)|0);
 $184 = (__ZNK3glm6detail5tvec4IfEixEj($183,1)|0);
 $185 = +HEAPF32[$184>>2];
 $186 = $1;
 $187 = (__ZNK3glm6detail7tmat4x4IfEixEj($186,2)|0);
 $188 = (__ZNK3glm6detail5tvec4IfEixEj($187,2)|0);
 $189 = +HEAPF32[$188>>2];
 $190 = $185 * $189;
 $191 = $1;
 $192 = (__ZNK3glm6detail7tmat4x4IfEixEj($191,2)|0);
 $193 = (__ZNK3glm6detail5tvec4IfEixEj($192,1)|0);
 $194 = +HEAPF32[$193>>2];
 $195 = $1;
 $196 = (__ZNK3glm6detail7tmat4x4IfEixEj($195,1)|0);
 $197 = (__ZNK3glm6detail5tvec4IfEixEj($196,2)|0);
 $198 = +HEAPF32[$197>>2];
 $199 = $194 * $198;
 $200 = $190 - $199;
 HEAPF32[$Coef11>>2] = $200;
 $201 = $1;
 $202 = (__ZNK3glm6detail7tmat4x4IfEixEj($201,2)|0);
 $203 = (__ZNK3glm6detail5tvec4IfEixEj($202,0)|0);
 $204 = +HEAPF32[$203>>2];
 $205 = $1;
 $206 = (__ZNK3glm6detail7tmat4x4IfEixEj($205,3)|0);
 $207 = (__ZNK3glm6detail5tvec4IfEixEj($206,3)|0);
 $208 = +HEAPF32[$207>>2];
 $209 = $204 * $208;
 $210 = $1;
 $211 = (__ZNK3glm6detail7tmat4x4IfEixEj($210,3)|0);
 $212 = (__ZNK3glm6detail5tvec4IfEixEj($211,0)|0);
 $213 = +HEAPF32[$212>>2];
 $214 = $1;
 $215 = (__ZNK3glm6detail7tmat4x4IfEixEj($214,2)|0);
 $216 = (__ZNK3glm6detail5tvec4IfEixEj($215,3)|0);
 $217 = +HEAPF32[$216>>2];
 $218 = $213 * $217;
 $219 = $209 - $218;
 HEAPF32[$Coef12>>2] = $219;
 $220 = $1;
 $221 = (__ZNK3glm6detail7tmat4x4IfEixEj($220,1)|0);
 $222 = (__ZNK3glm6detail5tvec4IfEixEj($221,0)|0);
 $223 = +HEAPF32[$222>>2];
 $224 = $1;
 $225 = (__ZNK3glm6detail7tmat4x4IfEixEj($224,3)|0);
 $226 = (__ZNK3glm6detail5tvec4IfEixEj($225,3)|0);
 $227 = +HEAPF32[$226>>2];
 $228 = $223 * $227;
 $229 = $1;
 $230 = (__ZNK3glm6detail7tmat4x4IfEixEj($229,3)|0);
 $231 = (__ZNK3glm6detail5tvec4IfEixEj($230,0)|0);
 $232 = +HEAPF32[$231>>2];
 $233 = $1;
 $234 = (__ZNK3glm6detail7tmat4x4IfEixEj($233,1)|0);
 $235 = (__ZNK3glm6detail5tvec4IfEixEj($234,3)|0);
 $236 = +HEAPF32[$235>>2];
 $237 = $232 * $236;
 $238 = $228 - $237;
 HEAPF32[$Coef14>>2] = $238;
 $239 = $1;
 $240 = (__ZNK3glm6detail7tmat4x4IfEixEj($239,1)|0);
 $241 = (__ZNK3glm6detail5tvec4IfEixEj($240,0)|0);
 $242 = +HEAPF32[$241>>2];
 $243 = $1;
 $244 = (__ZNK3glm6detail7tmat4x4IfEixEj($243,2)|0);
 $245 = (__ZNK3glm6detail5tvec4IfEixEj($244,3)|0);
 $246 = +HEAPF32[$245>>2];
 $247 = $242 * $246;
 $248 = $1;
 $249 = (__ZNK3glm6detail7tmat4x4IfEixEj($248,2)|0);
 $250 = (__ZNK3glm6detail5tvec4IfEixEj($249,0)|0);
 $251 = +HEAPF32[$250>>2];
 $252 = $1;
 $253 = (__ZNK3glm6detail7tmat4x4IfEixEj($252,1)|0);
 $254 = (__ZNK3glm6detail5tvec4IfEixEj($253,3)|0);
 $255 = +HEAPF32[$254>>2];
 $256 = $251 * $255;
 $257 = $247 - $256;
 HEAPF32[$Coef15>>2] = $257;
 $258 = $1;
 $259 = (__ZNK3glm6detail7tmat4x4IfEixEj($258,2)|0);
 $260 = (__ZNK3glm6detail5tvec4IfEixEj($259,0)|0);
 $261 = +HEAPF32[$260>>2];
 $262 = $1;
 $263 = (__ZNK3glm6detail7tmat4x4IfEixEj($262,3)|0);
 $264 = (__ZNK3glm6detail5tvec4IfEixEj($263,2)|0);
 $265 = +HEAPF32[$264>>2];
 $266 = $261 * $265;
 $267 = $1;
 $268 = (__ZNK3glm6detail7tmat4x4IfEixEj($267,3)|0);
 $269 = (__ZNK3glm6detail5tvec4IfEixEj($268,0)|0);
 $270 = +HEAPF32[$269>>2];
 $271 = $1;
 $272 = (__ZNK3glm6detail7tmat4x4IfEixEj($271,2)|0);
 $273 = (__ZNK3glm6detail5tvec4IfEixEj($272,2)|0);
 $274 = +HEAPF32[$273>>2];
 $275 = $270 * $274;
 $276 = $266 - $275;
 HEAPF32[$Coef16>>2] = $276;
 $277 = $1;
 $278 = (__ZNK3glm6detail7tmat4x4IfEixEj($277,1)|0);
 $279 = (__ZNK3glm6detail5tvec4IfEixEj($278,0)|0);
 $280 = +HEAPF32[$279>>2];
 $281 = $1;
 $282 = (__ZNK3glm6detail7tmat4x4IfEixEj($281,3)|0);
 $283 = (__ZNK3glm6detail5tvec4IfEixEj($282,2)|0);
 $284 = +HEAPF32[$283>>2];
 $285 = $280 * $284;
 $286 = $1;
 $287 = (__ZNK3glm6detail7tmat4x4IfEixEj($286,3)|0);
 $288 = (__ZNK3glm6detail5tvec4IfEixEj($287,0)|0);
 $289 = +HEAPF32[$288>>2];
 $290 = $1;
 $291 = (__ZNK3glm6detail7tmat4x4IfEixEj($290,1)|0);
 $292 = (__ZNK3glm6detail5tvec4IfEixEj($291,2)|0);
 $293 = +HEAPF32[$292>>2];
 $294 = $289 * $293;
 $295 = $285 - $294;
 HEAPF32[$Coef18>>2] = $295;
 $296 = $1;
 $297 = (__ZNK3glm6detail7tmat4x4IfEixEj($296,1)|0);
 $298 = (__ZNK3glm6detail5tvec4IfEixEj($297,0)|0);
 $299 = +HEAPF32[$298>>2];
 $300 = $1;
 $301 = (__ZNK3glm6detail7tmat4x4IfEixEj($300,2)|0);
 $302 = (__ZNK3glm6detail5tvec4IfEixEj($301,2)|0);
 $303 = +HEAPF32[$302>>2];
 $304 = $299 * $303;
 $305 = $1;
 $306 = (__ZNK3glm6detail7tmat4x4IfEixEj($305,2)|0);
 $307 = (__ZNK3glm6detail5tvec4IfEixEj($306,0)|0);
 $308 = +HEAPF32[$307>>2];
 $309 = $1;
 $310 = (__ZNK3glm6detail7tmat4x4IfEixEj($309,1)|0);
 $311 = (__ZNK3glm6detail5tvec4IfEixEj($310,2)|0);
 $312 = +HEAPF32[$311>>2];
 $313 = $308 * $312;
 $314 = $304 - $313;
 HEAPF32[$Coef19>>2] = $314;
 $315 = $1;
 $316 = (__ZNK3glm6detail7tmat4x4IfEixEj($315,2)|0);
 $317 = (__ZNK3glm6detail5tvec4IfEixEj($316,0)|0);
 $318 = +HEAPF32[$317>>2];
 $319 = $1;
 $320 = (__ZNK3glm6detail7tmat4x4IfEixEj($319,3)|0);
 $321 = (__ZNK3glm6detail5tvec4IfEixEj($320,1)|0);
 $322 = +HEAPF32[$321>>2];
 $323 = $318 * $322;
 $324 = $1;
 $325 = (__ZNK3glm6detail7tmat4x4IfEixEj($324,3)|0);
 $326 = (__ZNK3glm6detail5tvec4IfEixEj($325,0)|0);
 $327 = +HEAPF32[$326>>2];
 $328 = $1;
 $329 = (__ZNK3glm6detail7tmat4x4IfEixEj($328,2)|0);
 $330 = (__ZNK3glm6detail5tvec4IfEixEj($329,1)|0);
 $331 = +HEAPF32[$330>>2];
 $332 = $327 * $331;
 $333 = $323 - $332;
 HEAPF32[$Coef20>>2] = $333;
 $334 = $1;
 $335 = (__ZNK3glm6detail7tmat4x4IfEixEj($334,1)|0);
 $336 = (__ZNK3glm6detail5tvec4IfEixEj($335,0)|0);
 $337 = +HEAPF32[$336>>2];
 $338 = $1;
 $339 = (__ZNK3glm6detail7tmat4x4IfEixEj($338,3)|0);
 $340 = (__ZNK3glm6detail5tvec4IfEixEj($339,1)|0);
 $341 = +HEAPF32[$340>>2];
 $342 = $337 * $341;
 $343 = $1;
 $344 = (__ZNK3glm6detail7tmat4x4IfEixEj($343,3)|0);
 $345 = (__ZNK3glm6detail5tvec4IfEixEj($344,0)|0);
 $346 = +HEAPF32[$345>>2];
 $347 = $1;
 $348 = (__ZNK3glm6detail7tmat4x4IfEixEj($347,1)|0);
 $349 = (__ZNK3glm6detail5tvec4IfEixEj($348,1)|0);
 $350 = +HEAPF32[$349>>2];
 $351 = $346 * $350;
 $352 = $342 - $351;
 HEAPF32[$Coef22>>2] = $352;
 $353 = $1;
 $354 = (__ZNK3glm6detail7tmat4x4IfEixEj($353,1)|0);
 $355 = (__ZNK3glm6detail5tvec4IfEixEj($354,0)|0);
 $356 = +HEAPF32[$355>>2];
 $357 = $1;
 $358 = (__ZNK3glm6detail7tmat4x4IfEixEj($357,2)|0);
 $359 = (__ZNK3glm6detail5tvec4IfEixEj($358,1)|0);
 $360 = +HEAPF32[$359>>2];
 $361 = $356 * $360;
 $362 = $1;
 $363 = (__ZNK3glm6detail7tmat4x4IfEixEj($362,2)|0);
 $364 = (__ZNK3glm6detail5tvec4IfEixEj($363,0)|0);
 $365 = +HEAPF32[$364>>2];
 $366 = $1;
 $367 = (__ZNK3glm6detail7tmat4x4IfEixEj($366,1)|0);
 $368 = (__ZNK3glm6detail5tvec4IfEixEj($367,1)|0);
 $369 = +HEAPF32[$368>>2];
 $370 = $365 * $369;
 $371 = $361 - $370;
 HEAPF32[$Coef23>>2] = $371;
 HEAP32[$2>>2] = 1;
 HEAP32[$3>>2] = -1;
 HEAP32[$4>>2] = 1;
 HEAP32[$5>>2] = -1;
 __ZN3glm6detail5tvec4IfEC1IiiiiEERKT_RKT0_RKT1_RKT2_($SignA,$2,$3,$4,$5);
 HEAP32[$6>>2] = -1;
 HEAP32[$7>>2] = 1;
 HEAP32[$8>>2] = -1;
 HEAP32[$9>>2] = 1;
 __ZN3glm6detail5tvec4IfEC1IiiiiEERKT_RKT0_RKT1_RKT2_($SignB,$6,$7,$8,$9);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Fac0,$Coef00,$Coef00,$Coef02,$Coef03);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Fac1,$Coef04,$Coef04,$Coef06,$Coef07);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Fac2,$Coef08,$Coef08,$Coef10,$Coef11);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Fac3,$Coef12,$Coef12,$Coef14,$Coef15);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Fac4,$Coef16,$Coef16,$Coef18,$Coef19);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Fac5,$Coef20,$Coef20,$Coef22,$Coef23);
 $372 = $1;
 $373 = (__ZNK3glm6detail7tmat4x4IfEixEj($372,1)|0);
 $374 = (__ZNK3glm6detail5tvec4IfEixEj($373,0)|0);
 $375 = $1;
 $376 = (__ZNK3glm6detail7tmat4x4IfEixEj($375,0)|0);
 $377 = (__ZNK3glm6detail5tvec4IfEixEj($376,0)|0);
 $378 = $1;
 $379 = (__ZNK3glm6detail7tmat4x4IfEixEj($378,0)|0);
 $380 = (__ZNK3glm6detail5tvec4IfEixEj($379,0)|0);
 $381 = $1;
 $382 = (__ZNK3glm6detail7tmat4x4IfEixEj($381,0)|0);
 $383 = (__ZNK3glm6detail5tvec4IfEixEj($382,0)|0);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Vec0,$374,$377,$380,$383);
 $384 = $1;
 $385 = (__ZNK3glm6detail7tmat4x4IfEixEj($384,1)|0);
 $386 = (__ZNK3glm6detail5tvec4IfEixEj($385,1)|0);
 $387 = $1;
 $388 = (__ZNK3glm6detail7tmat4x4IfEixEj($387,0)|0);
 $389 = (__ZNK3glm6detail5tvec4IfEixEj($388,1)|0);
 $390 = $1;
 $391 = (__ZNK3glm6detail7tmat4x4IfEixEj($390,0)|0);
 $392 = (__ZNK3glm6detail5tvec4IfEixEj($391,1)|0);
 $393 = $1;
 $394 = (__ZNK3glm6detail7tmat4x4IfEixEj($393,0)|0);
 $395 = (__ZNK3glm6detail5tvec4IfEixEj($394,1)|0);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Vec1,$386,$389,$392,$395);
 $396 = $1;
 $397 = (__ZNK3glm6detail7tmat4x4IfEixEj($396,1)|0);
 $398 = (__ZNK3glm6detail5tvec4IfEixEj($397,2)|0);
 $399 = $1;
 $400 = (__ZNK3glm6detail7tmat4x4IfEixEj($399,0)|0);
 $401 = (__ZNK3glm6detail5tvec4IfEixEj($400,2)|0);
 $402 = $1;
 $403 = (__ZNK3glm6detail7tmat4x4IfEixEj($402,0)|0);
 $404 = (__ZNK3glm6detail5tvec4IfEixEj($403,2)|0);
 $405 = $1;
 $406 = (__ZNK3glm6detail7tmat4x4IfEixEj($405,0)|0);
 $407 = (__ZNK3glm6detail5tvec4IfEixEj($406,2)|0);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Vec2,$398,$401,$404,$407);
 $408 = $1;
 $409 = (__ZNK3glm6detail7tmat4x4IfEixEj($408,1)|0);
 $410 = (__ZNK3glm6detail5tvec4IfEixEj($409,3)|0);
 $411 = $1;
 $412 = (__ZNK3glm6detail7tmat4x4IfEixEj($411,0)|0);
 $413 = (__ZNK3glm6detail5tvec4IfEixEj($412,3)|0);
 $414 = $1;
 $415 = (__ZNK3glm6detail7tmat4x4IfEixEj($414,0)|0);
 $416 = (__ZNK3glm6detail5tvec4IfEixEj($415,3)|0);
 $417 = $1;
 $418 = (__ZNK3glm6detail7tmat4x4IfEixEj($417,0)|0);
 $419 = (__ZNK3glm6detail5tvec4IfEixEj($418,3)|0);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Vec3,$410,$413,$416,$419);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($12,$Vec1,$Fac0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($13,$Vec2,$Fac1);
 __ZN3glm6detailmiIfEENS0_5tvec4IT_EERKS4_S6_($11,$12,$13);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($14,$Vec3,$Fac2);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($10,$11,$14);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($Inv0,$SignA,$10);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($17,$Vec0,$Fac0);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($18,$Vec2,$Fac3);
 __ZN3glm6detailmiIfEENS0_5tvec4IT_EERKS4_S6_($16,$17,$18);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($19,$Vec3,$Fac4);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($15,$16,$19);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($Inv1,$SignB,$15);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($22,$Vec0,$Fac1);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($23,$Vec1,$Fac3);
 __ZN3glm6detailmiIfEENS0_5tvec4IT_EERKS4_S6_($21,$22,$23);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($24,$Vec3,$Fac5);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($20,$21,$24);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($Inv2,$SignA,$20);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($27,$Vec0,$Fac2);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($28,$Vec1,$Fac4);
 __ZN3glm6detailmiIfEENS0_5tvec4IT_EERKS4_S6_($26,$27,$28);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($29,$Vec2,$Fac5);
 __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($25,$26,$29);
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($Inv3,$SignB,$25);
 __ZN3glm6detail7tmat4x4IfEC1ERKNS0_5tvec4IfEES6_S6_S6_($agg$result,$Inv0,$Inv1,$Inv2,$Inv3);
 $420 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,0)|0);
 $421 = (__ZN3glm6detail5tvec4IfEixEj($420,0)|0);
 $422 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,1)|0);
 $423 = (__ZN3glm6detail5tvec4IfEixEj($422,0)|0);
 $424 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,2)|0);
 $425 = (__ZN3glm6detail5tvec4IfEixEj($424,0)|0);
 $426 = (__ZN3glm6detail7tmat4x4IfEixEj($agg$result,3)|0);
 $427 = (__ZN3glm6detail5tvec4IfEixEj($426,0)|0);
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($Row0,$421,$423,$425,$427);
 $428 = $1;
 $429 = (__ZNK3glm6detail7tmat4x4IfEixEj($428,0)|0);
 $430 = (+__ZN3glm3dotIfEET_RKNS_6detail5tvec4IS1_EES6_($429,$Row0));
 HEAPF32[$Determinant>>2] = $430;
 (__ZN3glm6detail7tmat4x4IfEdVIfEERS2_RKT_($agg$result,$Determinant)|0);
 STACKTOP = sp;return;
}
function __ZN3glm6detail5tvec4IfEaSERKS2_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $v;
 $3 = $1;
 $4 = $2;
 $5 = ($4);
 $6 = $5;
 $7 = +HEAPF32[$6>>2];
 $8 = ($3);
 $9 = $8;
 HEAPF32[$9>>2] = $7;
 $10 = $2;
 $11 = (($10) + 4|0);
 $12 = $11;
 $13 = +HEAPF32[$12>>2];
 $14 = (($3) + 4|0);
 $15 = $14;
 HEAPF32[$15>>2] = $13;
 $16 = $2;
 $17 = (($16) + 8|0);
 $18 = $17;
 $19 = +HEAPF32[$18>>2];
 $20 = (($3) + 8|0);
 $21 = $20;
 HEAPF32[$21>>2] = $19;
 $22 = $2;
 $23 = (($22) + 12|0);
 $24 = $23;
 $25 = +HEAPF32[$24>>2];
 $26 = (($3) + 12|0);
 $27 = $26;
 HEAPF32[$27>>2] = $25;
 STACKTOP = sp;return ($3|0);
}
function __ZN3glm6detailmlIfEENS0_7tmat4x4IT_E8col_typeERKS4_RKNS4_8row_typeE($agg$result,$m,$v) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $v = $v|0;
 var $1 = 0, $10 = 0.0, $100 = 0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0.0, $151 = 0.0, $152 = 0.0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0;
 var $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $3 = sp + 16|0;
 $4 = sp + 24|0;
 $5 = sp + 32|0;
 $6 = sp + 40|0;
 $1 = $m;
 $2 = $v;
 $7 = $1;
 $8 = (__ZNK3glm6detail7tmat4x4IfEixEj($7,0)|0);
 $9 = (__ZNK3glm6detail5tvec4IfEixEj($8,0)|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $2;
 $12 = ($11);
 $13 = $12;
 $14 = +HEAPF32[$13>>2];
 $15 = $10 * $14;
 $16 = $1;
 $17 = (__ZNK3glm6detail7tmat4x4IfEixEj($16,1)|0);
 $18 = (__ZNK3glm6detail5tvec4IfEixEj($17,0)|0);
 $19 = +HEAPF32[$18>>2];
 $20 = $2;
 $21 = (($20) + 4|0);
 $22 = $21;
 $23 = +HEAPF32[$22>>2];
 $24 = $19 * $23;
 $25 = $15 + $24;
 $26 = $1;
 $27 = (__ZNK3glm6detail7tmat4x4IfEixEj($26,2)|0);
 $28 = (__ZNK3glm6detail5tvec4IfEixEj($27,0)|0);
 $29 = +HEAPF32[$28>>2];
 $30 = $2;
 $31 = (($30) + 8|0);
 $32 = $31;
 $33 = +HEAPF32[$32>>2];
 $34 = $29 * $33;
 $35 = $25 + $34;
 $36 = $1;
 $37 = (__ZNK3glm6detail7tmat4x4IfEixEj($36,3)|0);
 $38 = (__ZNK3glm6detail5tvec4IfEixEj($37,0)|0);
 $39 = +HEAPF32[$38>>2];
 $40 = $2;
 $41 = (($40) + 12|0);
 $42 = $41;
 $43 = +HEAPF32[$42>>2];
 $44 = $39 * $43;
 $45 = $35 + $44;
 HEAPF32[$3>>2] = $45;
 $46 = $1;
 $47 = (__ZNK3glm6detail7tmat4x4IfEixEj($46,0)|0);
 $48 = (__ZNK3glm6detail5tvec4IfEixEj($47,1)|0);
 $49 = +HEAPF32[$48>>2];
 $50 = $2;
 $51 = ($50);
 $52 = $51;
 $53 = +HEAPF32[$52>>2];
 $54 = $49 * $53;
 $55 = $1;
 $56 = (__ZNK3glm6detail7tmat4x4IfEixEj($55,1)|0);
 $57 = (__ZNK3glm6detail5tvec4IfEixEj($56,1)|0);
 $58 = +HEAPF32[$57>>2];
 $59 = $2;
 $60 = (($59) + 4|0);
 $61 = $60;
 $62 = +HEAPF32[$61>>2];
 $63 = $58 * $62;
 $64 = $54 + $63;
 $65 = $1;
 $66 = (__ZNK3glm6detail7tmat4x4IfEixEj($65,2)|0);
 $67 = (__ZNK3glm6detail5tvec4IfEixEj($66,1)|0);
 $68 = +HEAPF32[$67>>2];
 $69 = $2;
 $70 = (($69) + 8|0);
 $71 = $70;
 $72 = +HEAPF32[$71>>2];
 $73 = $68 * $72;
 $74 = $64 + $73;
 $75 = $1;
 $76 = (__ZNK3glm6detail7tmat4x4IfEixEj($75,3)|0);
 $77 = (__ZNK3glm6detail5tvec4IfEixEj($76,1)|0);
 $78 = +HEAPF32[$77>>2];
 $79 = $2;
 $80 = (($79) + 12|0);
 $81 = $80;
 $82 = +HEAPF32[$81>>2];
 $83 = $78 * $82;
 $84 = $74 + $83;
 HEAPF32[$4>>2] = $84;
 $85 = $1;
 $86 = (__ZNK3glm6detail7tmat4x4IfEixEj($85,0)|0);
 $87 = (__ZNK3glm6detail5tvec4IfEixEj($86,2)|0);
 $88 = +HEAPF32[$87>>2];
 $89 = $2;
 $90 = ($89);
 $91 = $90;
 $92 = +HEAPF32[$91>>2];
 $93 = $88 * $92;
 $94 = $1;
 $95 = (__ZNK3glm6detail7tmat4x4IfEixEj($94,1)|0);
 $96 = (__ZNK3glm6detail5tvec4IfEixEj($95,2)|0);
 $97 = +HEAPF32[$96>>2];
 $98 = $2;
 $99 = (($98) + 4|0);
 $100 = $99;
 $101 = +HEAPF32[$100>>2];
 $102 = $97 * $101;
 $103 = $93 + $102;
 $104 = $1;
 $105 = (__ZNK3glm6detail7tmat4x4IfEixEj($104,2)|0);
 $106 = (__ZNK3glm6detail5tvec4IfEixEj($105,2)|0);
 $107 = +HEAPF32[$106>>2];
 $108 = $2;
 $109 = (($108) + 8|0);
 $110 = $109;
 $111 = +HEAPF32[$110>>2];
 $112 = $107 * $111;
 $113 = $103 + $112;
 $114 = $1;
 $115 = (__ZNK3glm6detail7tmat4x4IfEixEj($114,3)|0);
 $116 = (__ZNK3glm6detail5tvec4IfEixEj($115,2)|0);
 $117 = +HEAPF32[$116>>2];
 $118 = $2;
 $119 = (($118) + 12|0);
 $120 = $119;
 $121 = +HEAPF32[$120>>2];
 $122 = $117 * $121;
 $123 = $113 + $122;
 HEAPF32[$5>>2] = $123;
 $124 = $1;
 $125 = (__ZNK3glm6detail7tmat4x4IfEixEj($124,0)|0);
 $126 = (__ZNK3glm6detail5tvec4IfEixEj($125,3)|0);
 $127 = +HEAPF32[$126>>2];
 $128 = $2;
 $129 = ($128);
 $130 = $129;
 $131 = +HEAPF32[$130>>2];
 $132 = $127 * $131;
 $133 = $1;
 $134 = (__ZNK3glm6detail7tmat4x4IfEixEj($133,1)|0);
 $135 = (__ZNK3glm6detail5tvec4IfEixEj($134,3)|0);
 $136 = +HEAPF32[$135>>2];
 $137 = $2;
 $138 = (($137) + 4|0);
 $139 = $138;
 $140 = +HEAPF32[$139>>2];
 $141 = $136 * $140;
 $142 = $132 + $141;
 $143 = $1;
 $144 = (__ZNK3glm6detail7tmat4x4IfEixEj($143,2)|0);
 $145 = (__ZNK3glm6detail5tvec4IfEixEj($144,3)|0);
 $146 = +HEAPF32[$145>>2];
 $147 = $2;
 $148 = (($147) + 8|0);
 $149 = $148;
 $150 = +HEAPF32[$149>>2];
 $151 = $146 * $150;
 $152 = $142 + $151;
 $153 = $1;
 $154 = (__ZNK3glm6detail7tmat4x4IfEixEj($153,3)|0);
 $155 = (__ZNK3glm6detail5tvec4IfEixEj($154,3)|0);
 $156 = +HEAPF32[$155>>2];
 $157 = $2;
 $158 = (($157) + 12|0);
 $159 = $158;
 $160 = +HEAPF32[$159>>2];
 $161 = $156 * $160;
 $162 = $152 + $161;
 HEAPF32[$6>>2] = $162;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($agg$result,$3,$4,$5,$6);
 STACKTOP = sp;return;
}
function __ZN3glm6detaildvIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($agg$result,$v,$s) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $s = $s|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $3 = sp + 16|0;
 $4 = sp + 24|0;
 $5 = sp + 32|0;
 $6 = sp + 40|0;
 $1 = $v;
 $2 = $s;
 $7 = $1;
 $8 = ($7);
 $9 = $8;
 $10 = +HEAPF32[$9>>2];
 $11 = $2;
 $12 = +HEAPF32[$11>>2];
 $13 = $10 / $12;
 HEAPF32[$3>>2] = $13;
 $14 = $1;
 $15 = (($14) + 4|0);
 $16 = $15;
 $17 = +HEAPF32[$16>>2];
 $18 = $2;
 $19 = +HEAPF32[$18>>2];
 $20 = $17 / $19;
 HEAPF32[$4>>2] = $20;
 $21 = $1;
 $22 = (($21) + 8|0);
 $23 = $22;
 $24 = +HEAPF32[$23>>2];
 $25 = $2;
 $26 = +HEAPF32[$25>>2];
 $27 = $24 / $26;
 HEAPF32[$5>>2] = $27;
 $28 = $1;
 $29 = (($28) + 12|0);
 $30 = $29;
 $31 = +HEAPF32[$30>>2];
 $32 = $2;
 $33 = +HEAPF32[$32>>2];
 $34 = $31 / $33;
 HEAPF32[$6>>2] = $34;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($agg$result,$3,$4,$5,$6);
 STACKTOP = sp;return;
}
function __ZN3glm9normalizeIfEENS_6detail5tvec4IT_EERKS4_($agg$result,$x) {
 $agg$result = $agg$result|0;
 $x = $x|0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0.0, $5 = 0, $6 = 0.0;
 var $7 = 0, $8 = 0, $9 = 0, $sqr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 $sqr = sp + 8|0;
 $2 = sp + 16|0;
 $1 = $x;
 $3 = $1;
 $4 = ($3);
 $5 = $4;
 $6 = +HEAPF32[$5>>2];
 $7 = $1;
 $8 = ($7);
 $9 = $8;
 $10 = +HEAPF32[$9>>2];
 $11 = $6 * $10;
 $12 = $1;
 $13 = (($12) + 4|0);
 $14 = $13;
 $15 = +HEAPF32[$14>>2];
 $16 = $1;
 $17 = (($16) + 4|0);
 $18 = $17;
 $19 = +HEAPF32[$18>>2];
 $20 = $15 * $19;
 $21 = $11 + $20;
 $22 = $1;
 $23 = (($22) + 8|0);
 $24 = $23;
 $25 = +HEAPF32[$24>>2];
 $26 = $1;
 $27 = (($26) + 8|0);
 $28 = $27;
 $29 = +HEAPF32[$28>>2];
 $30 = $25 * $29;
 $31 = $21 + $30;
 $32 = $1;
 $33 = (($32) + 12|0);
 $34 = $33;
 $35 = +HEAPF32[$34>>2];
 $36 = $1;
 $37 = (($36) + 12|0);
 $38 = $37;
 $39 = +HEAPF32[$38>>2];
 $40 = $35 * $39;
 $41 = $31 + $40;
 HEAPF32[$sqr>>2] = $41;
 $42 = $1;
 $43 = (+__ZN3glm11inversesqrtIfEET_RKS1_($sqr));
 HEAPF32[$2>>2] = $43;
 __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($agg$result,$42,$2);
 STACKTOP = sp;return;
}
function __ZN3glm6detailmiIfEENS0_5tvec4IT_EERKS4_S6_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $3 = sp + 16|0;
 $4 = sp + 24|0;
 $5 = sp + 32|0;
 $6 = sp + 40|0;
 $1 = $v1;
 $2 = $v2;
 $7 = $1;
 $8 = ($7);
 $9 = $8;
 $10 = +HEAPF32[$9>>2];
 $11 = $2;
 $12 = ($11);
 $13 = $12;
 $14 = +HEAPF32[$13>>2];
 $15 = $10 - $14;
 HEAPF32[$3>>2] = $15;
 $16 = $1;
 $17 = (($16) + 4|0);
 $18 = $17;
 $19 = +HEAPF32[$18>>2];
 $20 = $2;
 $21 = (($20) + 4|0);
 $22 = $21;
 $23 = +HEAPF32[$22>>2];
 $24 = $19 - $23;
 HEAPF32[$4>>2] = $24;
 $25 = $1;
 $26 = (($25) + 8|0);
 $27 = $26;
 $28 = +HEAPF32[$27>>2];
 $29 = $2;
 $30 = (($29) + 8|0);
 $31 = $30;
 $32 = +HEAPF32[$31>>2];
 $33 = $28 - $32;
 HEAPF32[$5>>2] = $33;
 $34 = $1;
 $35 = (($34) + 12|0);
 $36 = $35;
 $37 = +HEAPF32[$36>>2];
 $38 = $2;
 $39 = (($38) + 12|0);
 $40 = $39;
 $41 = +HEAPF32[$40>>2];
 $42 = $37 - $41;
 HEAPF32[$6>>2] = $42;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($agg$result,$3,$4,$5,$6);
 STACKTOP = sp;return;
}
function __ZN3glm6detail7tmat4x4IfEixEj($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $i;
 $3 = $1;
 $4 = $2;
 $5 = (__ZNK3glm6detail7tmat4x4IfE6lengthEv($3)|0);
 $6 = ($4>>>0)<($5>>>0);
 if ($6) {
  $7 = $2;
  $8 = ($3);
  $9 = (($8) + ($7<<4)|0);
  STACKTOP = sp;return ($9|0);
 } else {
  ___assert_fail(((2288)|0),((2360)|0),60,((2344)|0));
  // unreachable;
 }
 return 0|0;
}
function __ZN3glm6detail5tvec4IfEixEj($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $i;
 $3 = $1;
 $4 = $2;
 $5 = (__ZNK3glm6detail5tvec4IfE6lengthEv($3)|0);
 $6 = ($4>>>0)<($5>>>0);
 if ($6) {
  $7 = $2;
  $8 = ($3);
  $9 = $8;
  $10 = (($9) + ($7<<2)|0);
  STACKTOP = sp;return ($10|0);
 } else {
  ___assert_fail(((2288)|0),((2312)|0),48,((2344)|0));
  // unreachable;
 }
 return 0|0;
}
function __ZN19LorenzAttractorDemo6updateEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bInterop = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 472|0;
 $47 = sp + 376|0;
 $50 = sp + 408|0;
 $51 = sp + 424|0;
 $52 = sp + 440|0;
 $53 = sp + 456|0;
 $46 = $this;
 $54 = $46;
 $55 = (__ZN6global3parEv()|0);
 $44 = $47;
 $45 = (2048);
 $56 = $44;
 $57 = $45;
 $42 = $56;
 $43 = $57;
 $58 = $42;
 $59 = ($58);
 $41 = $59;
 $60 = $41;
 $40 = $60;
 $61 = $40;
 $62 = $61;
 $39 = $62;
 $63 = $39;
 $64 = $63;
 $38 = $64;
 $65 = $43;
 $66 = $43;
 $37 = $66;
 $67 = $37;
 $68 = (_strlen(($67|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($58,$65,$68);
 __THREW__ = 0;
 $69 = (invoke_iii(19,($55|0),($47|0))|0);
 $70 = __THREW__; __THREW__ = 0;
 $71 = $70&1;
 if ($71) {
  $167 = ___cxa_find_matching_catch(-1,-1)|0;
  $168 = tempRet0;
  $48 = $167;
  $49 = $168;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($47);
  $177 = $48;
  $178 = $49;
  ___resumeException($177|0);
  // unreachable;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($47);
 $72 = $69&1;
 $bInterop = $72;
 $73 = $bInterop;
 $74 = $73&1;
 if ($74) {
  STACKTOP = sp;return;
 }
 $75 = (($54) + 4|0);
 $76 = HEAP32[$75>>2]|0;
 _glBindBuffer(34962,($76|0));
 $77 = (__ZN6global3parEv()|0);
 $35 = $50;
 $36 = (2016);
 $78 = $35;
 $79 = $36;
 $33 = $78;
 $34 = $79;
 $80 = $33;
 $81 = ($80);
 $32 = $81;
 $82 = $32;
 $31 = $82;
 $83 = $31;
 $84 = $83;
 $30 = $84;
 $85 = $30;
 $86 = $85;
 $29 = $86;
 $87 = $34;
 $88 = $34;
 $28 = $88;
 $89 = $28;
 $90 = (_strlen(($89|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($80,$87,$90);
 __THREW__ = 0;
 $91 = (invoke_iiii(24,($77|0),($50|0),0)|0);
 $92 = __THREW__; __THREW__ = 0;
 $93 = $92&1;
 do {
  if ($93) {
   label = 19;
  } else {
   $94 = $91<<2;
   $95 = $94<<2;
   __THREW__ = 0;
   $96 = (invoke_i(2)|0);
   $97 = __THREW__; __THREW__ = 0;
   $98 = $97&1;
   if ($98) {
    label = 19;
    break;
   }
   $26 = $51;
   $27 = (2032);
   $99 = $26;
   $100 = $27;
   $24 = $99;
   $25 = $100;
   $101 = $24;
   $102 = ($101);
   $23 = $102;
   $103 = $23;
   $22 = $103;
   $104 = $22;
   $105 = $104;
   $21 = $105;
   $106 = $21;
   $107 = $106;
   $20 = $107;
   $108 = $25;
   $109 = $25;
   $19 = $109;
   $110 = $19;
   __THREW__ = 0;
   $111 = (invoke_ii(68,($110|0))|0);
   $112 = __THREW__; __THREW__ = 0;
   $113 = $112&1;
   if ($113) {
    label = 19;
    break;
   }
   __THREW__ = 0;
   invoke_viii(5,($101|0),($108|0),($111|0));
   $114 = __THREW__; __THREW__ = 0;
   $115 = $114&1;
   if ($115) {
    label = 19;
    break;
   }
   __THREW__ = 0;
   $116 = (invoke_iiii(29,($96|0),($51|0),(0|0))|0);
   $117 = __THREW__; __THREW__ = 0;
   $118 = $117&1;
   do {
    if (!($118)) {
     __THREW__ = 0;
     invoke_viiii(17,34962,0,($95|0),($116|0));
     $119 = __THREW__; __THREW__ = 0;
     $120 = $119&1;
     if ($120) {
      break;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($51);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($50);
     $121 = (($54) + 8|0);
     $122 = HEAP32[$121>>2]|0;
     _glBindBuffer(34962,($122|0));
     $123 = (__ZN6global3parEv()|0);
     $17 = $52;
     $18 = (2016);
     $124 = $17;
     $125 = $18;
     $15 = $124;
     $16 = $125;
     $126 = $15;
     $127 = ($126);
     $14 = $127;
     $128 = $14;
     $13 = $128;
     $129 = $13;
     $130 = $129;
     $12 = $130;
     $131 = $12;
     $132 = $131;
     $11 = $132;
     $133 = $16;
     $134 = $16;
     $10 = $134;
     $135 = $10;
     $136 = (_strlen(($135|0))|0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($126,$133,$136);
     __THREW__ = 0;
     $137 = (invoke_iiii(24,($123|0),($52|0),0)|0);
     $138 = __THREW__; __THREW__ = 0;
     $139 = $138&1;
     do {
      if ($139) {
       label = 22;
      } else {
       $140 = $137<<2;
       $141 = $140<<2;
       __THREW__ = 0;
       $142 = (invoke_i(2)|0);
       $143 = __THREW__; __THREW__ = 0;
       $144 = $143&1;
       if ($144) {
        label = 22;
        break;
       }
       $8 = $53;
       $9 = (2040);
       $145 = $8;
       $146 = $9;
       $6 = $145;
       $7 = $146;
       $147 = $6;
       $148 = ($147);
       $5 = $148;
       $149 = $5;
       $4 = $149;
       $150 = $4;
       $151 = $150;
       $3 = $151;
       $152 = $3;
       $153 = $152;
       $2 = $153;
       $154 = $7;
       $155 = $7;
       $1 = $155;
       $156 = $1;
       __THREW__ = 0;
       $157 = (invoke_ii(68,($156|0))|0);
       $158 = __THREW__; __THREW__ = 0;
       $159 = $158&1;
       if ($159) {
        label = 22;
        break;
       }
       __THREW__ = 0;
       invoke_viii(5,($147|0),($154|0),($157|0));
       $160 = __THREW__; __THREW__ = 0;
       $161 = $160&1;
       if ($161) {
        label = 22;
        break;
       }
       __THREW__ = 0;
       $162 = (invoke_iiii(29,($142|0),($53|0),(0|0))|0);
       $163 = __THREW__; __THREW__ = 0;
       $164 = $163&1;
       do {
        if (!($164)) {
         __THREW__ = 0;
         invoke_viiii(17,34962,0,($141|0),($162|0));
         $165 = __THREW__; __THREW__ = 0;
         $166 = $165&1;
         if ($166) {
          break;
         }
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($53);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($52);
         STACKTOP = sp;return;
        }
       } while(0);
       $175 = ___cxa_find_matching_catch(-1,-1)|0;
       $176 = tempRet0;
       $48 = $175;
       $49 = $176;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($53);
      }
     } while(0);
     if ((label|0) == 22) {
      $173 = ___cxa_find_matching_catch(-1,-1)|0;
      $174 = tempRet0;
      $48 = $173;
      $49 = $174;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($52);
     $177 = $48;
     $178 = $49;
     ___resumeException($177|0);
     // unreachable;
    }
   } while(0);
   $171 = ___cxa_find_matching_catch(-1,-1)|0;
   $172 = tempRet0;
   $48 = $171;
   $49 = $172;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($51);
  }
 } while(0);
 if ((label|0) == 19) {
  $169 = ___cxa_find_matching_catch(-1,-1)|0;
  $170 = tempRet0;
  $48 = $169;
  $49 = $170;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($50);
 $177 = $48;
 $178 = $49;
 ___resumeException($177|0);
 // unreachable;
}
function __ZNK3glm6detail5tvec4IfE6lengthEv($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 STACKTOP = sp;return 4;
}
function __ZNK3glm6detail7tmat4x4IfE6lengthEv($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 STACKTOP = sp;return 4;
}
function __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_RKNS4_10value_typeE($agg$result,$v,$s) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $s = $s|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0, $27 = 0.0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $3 = sp + 16|0;
 $4 = sp + 24|0;
 $5 = sp + 32|0;
 $6 = sp + 40|0;
 $1 = $v;
 $2 = $s;
 $7 = $1;
 $8 = ($7);
 $9 = $8;
 $10 = +HEAPF32[$9>>2];
 $11 = $2;
 $12 = +HEAPF32[$11>>2];
 $13 = $10 * $12;
 HEAPF32[$3>>2] = $13;
 $14 = $1;
 $15 = (($14) + 4|0);
 $16 = $15;
 $17 = +HEAPF32[$16>>2];
 $18 = $2;
 $19 = +HEAPF32[$18>>2];
 $20 = $17 * $19;
 HEAPF32[$4>>2] = $20;
 $21 = $1;
 $22 = (($21) + 8|0);
 $23 = $22;
 $24 = +HEAPF32[$23>>2];
 $25 = $2;
 $26 = +HEAPF32[$25>>2];
 $27 = $24 * $26;
 HEAPF32[$5>>2] = $27;
 $28 = $1;
 $29 = (($28) + 12|0);
 $30 = $29;
 $31 = +HEAPF32[$30>>2];
 $32 = $2;
 $33 = +HEAPF32[$32>>2];
 $34 = $31 * $33;
 HEAPF32[$6>>2] = $34;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($agg$result,$3,$4,$5,$6);
 STACKTOP = sp;return;
}
function __ZN3glm11inversesqrtIfEET_RKS1_($x) {
 $x = $x|0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = $x;
 $3 = $2;
 $4 = +HEAPF32[$3>>2];
 $1 = $4;
 $5 = $1;
 $6 = (+Math_sqrt((+$5)));
 $7 = 1.0 / $6;
 STACKTOP = sp;return (+$7);
}
function __ZNK3glm6detail7tmat4x4IfEixEj($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $i;
 $3 = $1;
 $4 = $2;
 $5 = (__ZNK3glm6detail7tmat4x4IfE6lengthEv($3)|0);
 $6 = ($4>>>0)<($5>>>0);
 if ($6) {
  $7 = $2;
  $8 = ($3);
  $9 = (($8) + ($7<<4)|0);
  STACKTOP = sp;return ($9|0);
 } else {
  ___assert_fail(((2288)|0),((2360)|0),71,((2344)|0));
  // unreachable;
 }
 return 0|0;
}
function __ZNK3glm6detail5tvec4IfEixEj($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $i;
 $3 = $1;
 $4 = $2;
 $5 = (__ZNK3glm6detail5tvec4IfE6lengthEv($3)|0);
 $6 = ($4>>>0)<($5>>>0);
 if ($6) {
  $7 = $2;
  $8 = ($3);
  $9 = $8;
  $10 = (($9) + ($7<<2)|0);
  STACKTOP = sp;return ($10|0);
 } else {
  ___assert_fail(((2288)|0),((2312)|0),59,((2344)|0));
  // unreachable;
 }
 return 0|0;
}
function __ZN3glm6detail5tvec4IfEC1IiiiiEERKT_RKT0_RKT1_RKT2_($this,$x,$y,$z,$w) {
 $this = $this|0;
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 $w = $w|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $1 = $this;
 $2 = $x;
 $3 = $y;
 $4 = $z;
 $5 = $w;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 __ZN3glm6detail5tvec4IfEC2IiiiiEERKT_RKT0_RKT1_RKT2_($6,$7,$8,$9,$10);
 STACKTOP = sp;return;
}
function __ZN3glm6detailmlIfEENS0_5tvec4IT_EERKS4_S6_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $3 = sp + 16|0;
 $4 = sp + 24|0;
 $5 = sp + 32|0;
 $6 = sp + 40|0;
 $1 = $v1;
 $2 = $v2;
 $7 = $1;
 $8 = ($7);
 $9 = $8;
 $10 = +HEAPF32[$9>>2];
 $11 = $2;
 $12 = ($11);
 $13 = $12;
 $14 = +HEAPF32[$13>>2];
 $15 = $10 * $14;
 HEAPF32[$3>>2] = $15;
 $16 = $1;
 $17 = (($16) + 4|0);
 $18 = $17;
 $19 = +HEAPF32[$18>>2];
 $20 = $2;
 $21 = (($20) + 4|0);
 $22 = $21;
 $23 = +HEAPF32[$22>>2];
 $24 = $19 * $23;
 HEAPF32[$4>>2] = $24;
 $25 = $1;
 $26 = (($25) + 8|0);
 $27 = $26;
 $28 = +HEAPF32[$27>>2];
 $29 = $2;
 $30 = (($29) + 8|0);
 $31 = $30;
 $32 = +HEAPF32[$31>>2];
 $33 = $28 * $32;
 HEAPF32[$5>>2] = $33;
 $34 = $1;
 $35 = (($34) + 12|0);
 $36 = $35;
 $37 = +HEAPF32[$36>>2];
 $38 = $2;
 $39 = (($38) + 12|0);
 $40 = $39;
 $41 = +HEAPF32[$40>>2];
 $42 = $37 * $41;
 HEAPF32[$6>>2] = $42;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($agg$result,$3,$4,$5,$6);
 STACKTOP = sp;return;
}
function __ZN3glm6detailplIfEENS0_5tvec4IT_EERKS4_S6_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $3 = sp + 16|0;
 $4 = sp + 24|0;
 $5 = sp + 32|0;
 $6 = sp + 40|0;
 $1 = $v1;
 $2 = $v2;
 $7 = $1;
 $8 = ($7);
 $9 = $8;
 $10 = +HEAPF32[$9>>2];
 $11 = $2;
 $12 = ($11);
 $13 = $12;
 $14 = +HEAPF32[$13>>2];
 $15 = $10 + $14;
 HEAPF32[$3>>2] = $15;
 $16 = $1;
 $17 = (($16) + 4|0);
 $18 = $17;
 $19 = +HEAPF32[$18>>2];
 $20 = $2;
 $21 = (($20) + 4|0);
 $22 = $21;
 $23 = +HEAPF32[$22>>2];
 $24 = $19 + $23;
 HEAPF32[$4>>2] = $24;
 $25 = $1;
 $26 = (($25) + 8|0);
 $27 = $26;
 $28 = +HEAPF32[$27>>2];
 $29 = $2;
 $30 = (($29) + 8|0);
 $31 = $30;
 $32 = +HEAPF32[$31>>2];
 $33 = $28 + $32;
 HEAPF32[$5>>2] = $33;
 $34 = $1;
 $35 = (($34) + 12|0);
 $36 = $35;
 $37 = +HEAPF32[$36>>2];
 $38 = $2;
 $39 = (($38) + 12|0);
 $40 = $39;
 $41 = +HEAPF32[$40>>2];
 $42 = $37 + $41;
 HEAPF32[$6>>2] = $42;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($agg$result,$3,$4,$5,$6);
 STACKTOP = sp;return;
}
function __ZN3glm6detail7tmat4x4IfEC1ERKNS0_5tvec4IfEES6_S6_S6_($this,$v0,$v1,$v2,$v3) {
 $this = $this|0;
 $v0 = $v0|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 $v3 = $v3|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $1 = $this;
 $2 = $v0;
 $3 = $v1;
 $4 = $v2;
 $5 = $v3;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 __ZN3glm6detail7tmat4x4IfEC2ERKNS0_5tvec4IfEES6_S6_S6_($6,$7,$8,$9,$10);
 STACKTOP = sp;return;
}
function __ZN3glm3dotIfEET_RKNS_6detail5tvec4IS1_EES6_($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $x;
 $2 = $y;
 $3 = $1;
 $4 = ($3);
 $5 = $4;
 $6 = +HEAPF32[$5>>2];
 $7 = $2;
 $8 = ($7);
 $9 = $8;
 $10 = +HEAPF32[$9>>2];
 $11 = $6 * $10;
 $12 = $1;
 $13 = (($12) + 4|0);
 $14 = $13;
 $15 = +HEAPF32[$14>>2];
 $16 = $2;
 $17 = (($16) + 4|0);
 $18 = $17;
 $19 = +HEAPF32[$18>>2];
 $20 = $15 * $19;
 $21 = $11 + $20;
 $22 = $1;
 $23 = (($22) + 8|0);
 $24 = $23;
 $25 = +HEAPF32[$24>>2];
 $26 = $2;
 $27 = (($26) + 8|0);
 $28 = $27;
 $29 = +HEAPF32[$28>>2];
 $30 = $25 * $29;
 $31 = $21 + $30;
 $32 = $1;
 $33 = (($32) + 12|0);
 $34 = $33;
 $35 = +HEAPF32[$34>>2];
 $36 = $2;
 $37 = (($36) + 12|0);
 $38 = $37;
 $39 = +HEAPF32[$38>>2];
 $40 = $35 * $39;
 $41 = $31 + $40;
 STACKTOP = sp;return (+$41);
}
function __ZN3glm6detail7tmat4x4IfEdVIfEERS2_RKT_($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $s;
 $3 = $1;
 $4 = ($3);
 $5 = ($4);
 $6 = $2;
 (__ZN3glm6detail5tvec4IfEdVIfEERS2_RKT_($5,$6)|0);
 $7 = ($3);
 $8 = (($7) + 16|0);
 $9 = $2;
 (__ZN3glm6detail5tvec4IfEdVIfEERS2_RKT_($8,$9)|0);
 $10 = ($3);
 $11 = (($10) + 32|0);
 $12 = $2;
 (__ZN3glm6detail5tvec4IfEdVIfEERS2_RKT_($11,$12)|0);
 $13 = ($3);
 $14 = (($13) + 48|0);
 $15 = $2;
 (__ZN3glm6detail5tvec4IfEdVIfEERS2_RKT_($14,$15)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN3glm6detail5tvec4IfEdVIfEERS2_RKT_($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0;
 var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $s;
 $3 = $1;
 $4 = $2;
 $5 = +HEAPF32[$4>>2];
 $6 = ($3);
 $7 = $6;
 $8 = +HEAPF32[$7>>2];
 $9 = $8 / $5;
 HEAPF32[$7>>2] = $9;
 $10 = $2;
 $11 = +HEAPF32[$10>>2];
 $12 = (($3) + 4|0);
 $13 = $12;
 $14 = +HEAPF32[$13>>2];
 $15 = $14 / $11;
 HEAPF32[$13>>2] = $15;
 $16 = $2;
 $17 = +HEAPF32[$16>>2];
 $18 = (($3) + 8|0);
 $19 = $18;
 $20 = +HEAPF32[$19>>2];
 $21 = $20 / $17;
 HEAPF32[$19>>2] = $21;
 $22 = $2;
 $23 = +HEAPF32[$22>>2];
 $24 = (($3) + 12|0);
 $25 = $24;
 $26 = +HEAPF32[$25>>2];
 $27 = $26 / $23;
 HEAPF32[$25>>2] = $27;
 STACKTOP = sp;return ($3|0);
}
function __ZN3glm6detail7tmat4x4IfEC2ERKNS0_5tvec4IfEES6_S6_S6_($this,$v0,$v1,$v2,$v3) {
 $this = $this|0;
 $v0 = $v0|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 $v3 = $v3|0;
 var $1 = 0, $10 = 0, $10$phi = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $1 = $this;
 $2 = $v0;
 $3 = $v1;
 $4 = $v2;
 $5 = $v3;
 $6 = $1;
 $7 = ($6);
 $8 = ($7);
 $9 = (($8) + 64|0);
 $10 = $8;
 while(1) {
  __ZN3glm6detail5tvec4IfEC1Ev($10);
  $11 = (($10) + 16|0);
  $12 = ($11|0)==($9|0);
  if ($12) {
   break;
  } else {
   $10$phi = $11;$10 = $10$phi;
  }
 }
 $13 = ($6);
 $14 = ($13);
 $15 = $2;
 (__ZN3glm6detail5tvec4IfEaSERKS2_($14,$15)|0);
 $16 = ($6);
 $17 = (($16) + 16|0);
 $18 = $3;
 (__ZN3glm6detail5tvec4IfEaSERKS2_($17,$18)|0);
 $19 = ($6);
 $20 = (($19) + 32|0);
 $21 = $4;
 (__ZN3glm6detail5tvec4IfEaSERKS2_($20,$21)|0);
 $22 = ($6);
 $23 = (($22) + 48|0);
 $24 = $5;
 (__ZN3glm6detail5tvec4IfEaSERKS2_($23,$24)|0);
 STACKTOP = sp;return;
}
function __ZN3glm6detail5tvec4IfEC1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN3glm6detail5tvec4IfEC2Ev($2);
 STACKTOP = sp;return;
}
function __ZN3glm6detail5tvec4IfEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = $3;
 HEAPF32[$4>>2] = 0.0;
 $5 = (($2) + 4|0);
 $6 = $5;
 HEAPF32[$6>>2] = 0.0;
 $7 = (($2) + 8|0);
 $8 = $7;
 HEAPF32[$8>>2] = 0.0;
 $9 = (($2) + 12|0);
 $10 = $9;
 HEAPF32[$10>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZN3glm6detail5tvec4IfEC2IiiiiEERKT_RKT0_RKT1_RKT2_($this,$x,$y,$z,$w) {
 $this = $this|0;
 $x = $x|0;
 $y = $y|0;
 $z = $z|0;
 $w = $w|0;
 var $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $1 = $this;
 $2 = $x;
 $3 = $y;
 $4 = $z;
 $5 = $w;
 $6 = $1;
 $7 = ($6);
 $8 = $7;
 $9 = $2;
 $10 = HEAP32[$9>>2]|0;
 $11 = (+($10|0));
 HEAPF32[$8>>2] = $11;
 $12 = (($6) + 4|0);
 $13 = $12;
 $14 = $3;
 $15 = HEAP32[$14>>2]|0;
 $16 = (+($15|0));
 HEAPF32[$13>>2] = $16;
 $17 = (($6) + 8|0);
 $18 = $17;
 $19 = $4;
 $20 = HEAP32[$19>>2]|0;
 $21 = (+($20|0));
 HEAPF32[$18>>2] = $21;
 $22 = (($6) + 12|0);
 $23 = $22;
 $24 = $5;
 $25 = HEAP32[$24>>2]|0;
 $26 = (+($25|0));
 HEAPF32[$23>>2] = $26;
 STACKTOP = sp;return;
}
function __ZN3glm6detail5tvec4IfEC1ERKS2_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $v;
 $3 = $1;
 $4 = $2;
 __ZN3glm6detail5tvec4IfEC2ERKS2_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3glm6detail7tmat4x4IfEC1ENS2_4ctorE($this,$1) {
 $this = $this|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = $this;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN3glm6detail7tmat4x4IfEC2ENS2_4ctorE($4,$5);
 STACKTOP = sp;return;
}
function __ZN3glm6detail7tmat4x4IfEC2ENS2_4ctorE($this,$1) {
 $this = $this|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $8$phi = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = $this;
 $3 = $1;
 $4 = $2;
 $5 = ($4);
 $6 = ($5);
 $7 = (($6) + 64|0);
 $8 = $6;
 while(1) {
  __ZN3glm6detail5tvec4IfEC1Ev($8);
  $9 = (($8) + 16|0);
  $10 = ($9|0)==($7|0);
  if ($10) {
   break;
  } else {
   $8$phi = $9;$8 = $8$phi;
  }
 }
 STACKTOP = sp;return;
}
function __ZN3glm6detail5tvec4IfEC2ERKS2_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $v;
 $3 = $1;
 $4 = ($3);
 $5 = $4;
 $6 = $2;
 $7 = ($6);
 $8 = $7;
 $9 = +HEAPF32[$8>>2];
 HEAPF32[$5>>2] = $9;
 $10 = (($3) + 4|0);
 $11 = $10;
 $12 = $2;
 $13 = (($12) + 4|0);
 $14 = $13;
 $15 = +HEAPF32[$14>>2];
 HEAPF32[$11>>2] = $15;
 $16 = (($3) + 8|0);
 $17 = $16;
 $18 = $2;
 $19 = (($18) + 8|0);
 $20 = $19;
 $21 = +HEAPF32[$20>>2];
 HEAPF32[$17>>2] = $21;
 $22 = (($3) + 12|0);
 $23 = $22;
 $24 = $2;
 $25 = (($24) + 12|0);
 $26 = $25;
 $27 = +HEAPF32[$26>>2];
 HEAPF32[$23>>2] = $27;
 STACKTOP = sp;return;
}
function __ZN3glm3tanIfEET_RKS1_($angle) {
 $angle = $angle|0;
 var $1 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = $angle;
 $3 = $2;
 $4 = +HEAPF32[$3>>2];
 $1 = $4;
 $5 = $1;
 $6 = (+Math_tan((+$5)));
 STACKTOP = sp;return (+$6);
}
function __ZN3glm7radiansIfEET_RKS1_($degrees) {
 $degrees = $degrees|0;
 var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $pi = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $degrees;
 $pi = 3.14159274101257324219;
 $2 = $1;
 $3 = +HEAPF32[$2>>2];
 $4 = $3 * 0.0174532923847436904907;
 STACKTOP = sp;return (+$4);
}
function __ZN3glm9normalizeIfEENS_6detail5tvec3IT_EERKS4_($agg$result,$x) {
 $agg$result = $agg$result|0;
 $x = $x|0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $sqr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 $sqr = sp + 8|0;
 $2 = sp + 16|0;
 $1 = $x;
 $3 = $1;
 $4 = ($3);
 $5 = $4;
 $6 = +HEAPF32[$5>>2];
 $7 = $1;
 $8 = ($7);
 $9 = $8;
 $10 = +HEAPF32[$9>>2];
 $11 = $6 * $10;
 $12 = $1;
 $13 = (($12) + 4|0);
 $14 = $13;
 $15 = +HEAPF32[$14>>2];
 $16 = $1;
 $17 = (($16) + 4|0);
 $18 = $17;
 $19 = +HEAPF32[$18>>2];
 $20 = $15 * $19;
 $21 = $11 + $20;
 $22 = $1;
 $23 = (($22) + 8|0);
 $24 = $23;
 $25 = +HEAPF32[$24>>2];
 $26 = $1;
 $27 = (($26) + 8|0);
 $28 = $27;
 $29 = +HEAPF32[$28>>2];
 $30 = $25 * $29;
 $31 = $21 + $30;
 HEAPF32[$sqr>>2] = $31;
 $32 = $1;
 $33 = (+__ZN3glm11inversesqrtIfEET_RKS1_($sqr));
 HEAPF32[$2>>2] = $33;
 __ZN3glm6detailmlIfEENS0_5tvec3IT_EERKS4_RKS3_($agg$result,$32,$2);
 STACKTOP = sp;return;
}
function __ZN3glm6detailmiIfEENS0_5tvec3IT_EERKS4_S6_($agg$result,$v1,$v2) {
 $agg$result = $agg$result|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $3 = sp + 16|0;
 $4 = sp + 24|0;
 $5 = sp + 32|0;
 $1 = $v1;
 $2 = $v2;
 $6 = $1;
 $7 = ($6);
 $8 = $7;
 $9 = +HEAPF32[$8>>2];
 $10 = $2;
 $11 = ($10);
 $12 = $11;
 $13 = +HEAPF32[$12>>2];
 $14 = $9 - $13;
 HEAPF32[$3>>2] = $14;
 $15 = $1;
 $16 = (($15) + 4|0);
 $17 = $16;
 $18 = +HEAPF32[$17>>2];
 $19 = $2;
 $20 = (($19) + 4|0);
 $21 = $20;
 $22 = +HEAPF32[$21>>2];
 $23 = $18 - $22;
 HEAPF32[$4>>2] = $23;
 $24 = $1;
 $25 = (($24) + 8|0);
 $26 = $25;
 $27 = +HEAPF32[$26>>2];
 $28 = $2;
 $29 = (($28) + 8|0);
 $30 = $29;
 $31 = +HEAPF32[$30>>2];
 $32 = $27 - $31;
 HEAPF32[$5>>2] = $32;
 __ZN3glm6detail5tvec3IfEC1ERKfS4_S4_($agg$result,$3,$4,$5);
 STACKTOP = sp;return;
}
function __ZN3glm5crossIfEENS_6detail5tvec3IT_EERKS4_S6_($agg$result,$x,$y) {
 $agg$result = $agg$result|0;
 $x = $x|0;
 $y = $y|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $7 = 0;
 var $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $3 = sp + 16|0;
 $4 = sp + 24|0;
 $5 = sp + 32|0;
 $1 = $x;
 $2 = $y;
 $6 = $1;
 $7 = (($6) + 4|0);
 $8 = $7;
 $9 = +HEAPF32[$8>>2];
 $10 = $2;
 $11 = (($10) + 8|0);
 $12 = $11;
 $13 = +HEAPF32[$12>>2];
 $14 = $9 * $13;
 $15 = $2;
 $16 = (($15) + 4|0);
 $17 = $16;
 $18 = +HEAPF32[$17>>2];
 $19 = $1;
 $20 = (($19) + 8|0);
 $21 = $20;
 $22 = +HEAPF32[$21>>2];
 $23 = $18 * $22;
 $24 = $14 - $23;
 HEAPF32[$3>>2] = $24;
 $25 = $1;
 $26 = (($25) + 8|0);
 $27 = $26;
 $28 = +HEAPF32[$27>>2];
 $29 = $2;
 $30 = ($29);
 $31 = $30;
 $32 = +HEAPF32[$31>>2];
 $33 = $28 * $32;
 $34 = $2;
 $35 = (($34) + 8|0);
 $36 = $35;
 $37 = +HEAPF32[$36>>2];
 $38 = $1;
 $39 = ($38);
 $40 = $39;
 $41 = +HEAPF32[$40>>2];
 $42 = $37 * $41;
 $43 = $33 - $42;
 HEAPF32[$4>>2] = $43;
 $44 = $1;
 $45 = ($44);
 $46 = $45;
 $47 = +HEAPF32[$46>>2];
 $48 = $2;
 $49 = (($48) + 4|0);
 $50 = $49;
 $51 = +HEAPF32[$50>>2];
 $52 = $47 * $51;
 $53 = $2;
 $54 = ($53);
 $55 = $54;
 $56 = +HEAPF32[$55>>2];
 $57 = $1;
 $58 = (($57) + 4|0);
 $59 = $58;
 $60 = +HEAPF32[$59>>2];
 $61 = $56 * $60;
 $62 = $52 - $61;
 HEAPF32[$5>>2] = $62;
 __ZN3glm6detail5tvec3IfEC1ERKfS4_S4_($agg$result,$3,$4,$5);
 STACKTOP = sp;return;
}
function __ZN3glm6detail5tvec3IfEaSERKS2_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $v;
 $3 = $1;
 $4 = $2;
 $5 = ($4);
 $6 = $5;
 $7 = +HEAPF32[$6>>2];
 $8 = ($3);
 $9 = $8;
 HEAPF32[$9>>2] = $7;
 $10 = $2;
 $11 = (($10) + 4|0);
 $12 = $11;
 $13 = +HEAPF32[$12>>2];
 $14 = (($3) + 4|0);
 $15 = $14;
 HEAPF32[$15>>2] = $13;
 $16 = $2;
 $17 = (($16) + 8|0);
 $18 = $17;
 $19 = +HEAPF32[$18>>2];
 $20 = (($3) + 8|0);
 $21 = $20;
 HEAPF32[$21>>2] = $19;
 STACKTOP = sp;return ($3|0);
}
function __ZN3glm6detail7tmat4x4IfEC1IiEERKT_($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $s;
 $3 = $1;
 $4 = $2;
 __ZN3glm6detail7tmat4x4IfEC2IiEERKT_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3glm3dotIfEET_RKNS_6detail5tvec3IS1_EES6_($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $x;
 $2 = $y;
 $3 = $1;
 $4 = ($3);
 $5 = $4;
 $6 = +HEAPF32[$5>>2];
 $7 = $2;
 $8 = ($7);
 $9 = $8;
 $10 = +HEAPF32[$9>>2];
 $11 = $6 * $10;
 $12 = $1;
 $13 = (($12) + 4|0);
 $14 = $13;
 $15 = +HEAPF32[$14>>2];
 $16 = $2;
 $17 = (($16) + 4|0);
 $18 = $17;
 $19 = +HEAPF32[$18>>2];
 $20 = $15 * $19;
 $21 = $11 + $20;
 $22 = $1;
 $23 = (($22) + 8|0);
 $24 = $23;
 $25 = +HEAPF32[$24>>2];
 $26 = $2;
 $27 = (($26) + 8|0);
 $28 = $27;
 $29 = +HEAPF32[$28>>2];
 $30 = $25 * $29;
 $31 = $21 + $30;
 STACKTOP = sp;return (+$31);
}
function __ZN3glm6detail7tmat4x4IfEC2IiEERKT_($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $15$phi = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Zero = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 120|0;
 $Zero = sp + 16|0;
 $3 = sp + 24|0;
 $4 = sp + 40|0;
 $5 = sp + 48|0;
 $6 = sp + 64|0;
 $7 = sp + 72|0;
 $8 = sp + 88|0;
 $9 = sp + 96|0;
 $10 = sp + 112|0;
 $1 = $this;
 $2 = $s;
 $11 = $1;
 $12 = ($11);
 $13 = ($12);
 $14 = (($13) + 64|0);
 $15 = $13;
 while(1) {
  __ZN3glm6detail5tvec4IfEC1Ev($15);
  $16 = (($15) + 16|0);
  $17 = ($16|0)==($14|0);
  if ($17) {
   break;
  } else {
   $15$phi = $16;$15 = $15$phi;
  }
 }
 HEAPF32[$Zero>>2] = 0.0;
 $18 = ($11);
 $19 = ($18);
 $20 = $2;
 $21 = HEAP32[$20>>2]|0;
 $22 = (+($21|0));
 HEAPF32[$4>>2] = $22;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($3,$4,$Zero,$Zero,$Zero);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($19,$3)|0);
 $23 = ($11);
 $24 = (($23) + 16|0);
 $25 = $2;
 $26 = HEAP32[$25>>2]|0;
 $27 = (+($26|0));
 HEAPF32[$6>>2] = $27;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($5,$Zero,$6,$Zero,$Zero);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($24,$5)|0);
 $28 = ($11);
 $29 = (($28) + 32|0);
 $30 = $2;
 $31 = HEAP32[$30>>2]|0;
 $32 = (+($31|0));
 HEAPF32[$8>>2] = $32;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($7,$Zero,$Zero,$8,$Zero);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($29,$7)|0);
 $33 = ($11);
 $34 = (($33) + 48|0);
 $35 = $2;
 $36 = HEAP32[$35>>2]|0;
 $37 = (+($36|0));
 HEAPF32[$10>>2] = $37;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($9,$Zero,$Zero,$Zero,$10);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($34,$9)|0);
 STACKTOP = sp;return;
}
function __ZN3glm6detailmlIfEENS0_5tvec3IT_EERKS4_RKS3_($agg$result,$v,$s) {
 $agg$result = $agg$result|0;
 $v = $v|0;
 $s = $s|0;
 var $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $3 = sp + 16|0;
 $4 = sp + 24|0;
 $5 = sp + 32|0;
 $1 = $v;
 $2 = $s;
 $6 = $1;
 $7 = ($6);
 $8 = $7;
 $9 = +HEAPF32[$8>>2];
 $10 = $2;
 $11 = +HEAPF32[$10>>2];
 $12 = $9 * $11;
 HEAPF32[$3>>2] = $12;
 $13 = $1;
 $14 = (($13) + 4|0);
 $15 = $14;
 $16 = +HEAPF32[$15>>2];
 $17 = $2;
 $18 = +HEAPF32[$17>>2];
 $19 = $16 * $18;
 HEAPF32[$4>>2] = $19;
 $20 = $1;
 $21 = (($20) + 8|0);
 $22 = $21;
 $23 = +HEAPF32[$22>>2];
 $24 = $2;
 $25 = +HEAPF32[$24>>2];
 $26 = $23 * $25;
 HEAPF32[$5>>2] = $26;
 __ZN3glm6detail5tvec3IfEC1ERKfS4_S4_($agg$result,$3,$4,$5);
 STACKTOP = sp;return;
}
function __ZN3glm6detail7tmat4x4IfEC2ERKf($this,$s) {
 $this = $this|0;
 $s = $s|0;
 var $1 = 0, $10 = 0, $11 = 0, $11$phi = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Zero = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 88|0;
 $Zero = sp + 16|0;
 $3 = sp + 24|0;
 $4 = sp + 40|0;
 $5 = sp + 56|0;
 $6 = sp + 72|0;
 $1 = $this;
 $2 = $s;
 $7 = $1;
 $8 = ($7);
 $9 = ($8);
 $10 = (($9) + 64|0);
 $11 = $9;
 while(1) {
  __ZN3glm6detail5tvec4IfEC1Ev($11);
  $12 = (($11) + 16|0);
  $13 = ($12|0)==($10|0);
  if ($13) {
   break;
  } else {
   $11$phi = $12;$11 = $11$phi;
  }
 }
 HEAPF32[$Zero>>2] = 0.0;
 $14 = ($7);
 $15 = ($14);
 $16 = $2;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($3,$16,$Zero,$Zero,$Zero);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($15,$3)|0);
 $17 = ($7);
 $18 = (($17) + 16|0);
 $19 = $2;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($4,$Zero,$19,$Zero,$Zero);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($18,$4)|0);
 $20 = ($7);
 $21 = (($20) + 32|0);
 $22 = $2;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($5,$Zero,$Zero,$22,$Zero);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($21,$5)|0);
 $23 = ($7);
 $24 = (($23) + 48|0);
 $25 = $2;
 __ZN3glm6detail5tvec4IfEC1ERKfS4_S4_S4_($6,$Zero,$Zero,$Zero,$25);
 (__ZN3glm6detail5tvec4IfEaSERKS2_($24,$6)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, $tmp$i$i = 0, $tmp1$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $7 = sp + 48|0;
 $10 = sp + 72|0;
 $18 = sp + 136|0;
 $19 = sp + 160|0;
 $__v = sp + 248|0;
 $27 = $this;
 $28 = $__n;
 $31 = $27;
 $32 = $31;
 $26 = $32;
 $33 = $26;
 $34 = (($33) + 8|0);
 $25 = $34;
 $35 = $25;
 $36 = $35;
 $24 = $36;
 $37 = $24;
 $38 = ($37);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = (($40) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $39;
 $44 = $42;
 $45 = (($43) - ($44))|0;
 $46 = (($45|0) / 4)&-1;
 $47 = $28;
 $48 = ($46>>>0)>=($47>>>0);
 if ($48) {
  $49 = $28;
  __ZNSt3__16vectorIjNS_9allocatorIjEEE18__construct_at_endEj($31,$49);
  STACKTOP = sp;return;
 }
 $50 = $31;
 $23 = $50;
 $51 = $23;
 $52 = (($51) + 8|0);
 $22 = $52;
 $53 = $22;
 $54 = $53;
 $21 = $54;
 $55 = $21;
 $56 = $55;
 $__a = $56;
 $20 = $31;
 $57 = $20;
 $58 = $57;
 $59 = (($58) + 4|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $57;
 $62 = ($61);
 $63 = HEAP32[$62>>2]|0;
 $64 = $60;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $67 = (($66|0) / 4)&-1;
 $68 = $28;
 $69 = (($67) + ($68))|0;
 $17 = $31;
 HEAP32[$18>>2] = $69;
 $70 = $17;
 $71 = (__ZNKSt3__16vectorIjNS_9allocatorIjEEE8max_sizeEv($70)|0);
 $__ms$i = $71;
 $72 = HEAP32[$18>>2]|0;
 $73 = $__ms$i;
 $74 = ($72>>>0)>($73>>>0);
 if ($74) {
  $75 = $70;
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($75);
 }
 $15 = $70;
 $76 = $15;
 $77 = $76;
 $14 = $77;
 $78 = $14;
 $13 = $78;
 $79 = $13;
 $80 = (($79) + 8|0);
 $12 = $80;
 $81 = $12;
 $82 = $81;
 $11 = $82;
 $83 = $11;
 $84 = ($83);
 $85 = HEAP32[$84>>2]|0;
 $86 = ($78);
 $87 = HEAP32[$86>>2]|0;
 $88 = $85;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 4)&-1;
 $__cap$i = $91;
 $92 = $__cap$i;
 $93 = $__ms$i;
 $94 = (($93>>>0) / 2)&-1;
 $95 = ($92>>>0)>=($94>>>0);
 if ($95) {
  $96 = $__ms$i;
  $16 = $96;
 } else {
  $97 = $__cap$i;
  $98 = $97<<1;
  HEAP32[$19>>2] = $98;
  $8 = $19;
  $9 = $18;
  $99 = $8;
  $100 = $9;
  $tmp$i$i = $7;
  $tmp1$i$i = $10;
  ;HEAP8[$tmp$i$i+0|0]=HEAP8[$tmp1$i$i+0|0]|0;
  $5 = $99;
  $6 = $100;
  $101 = $5;
  $102 = $6;
  $2 = $7;
  $3 = $101;
  $4 = $102;
  $103 = $3;
  $104 = HEAP32[$103>>2]|0;
  $105 = $4;
  $106 = HEAP32[$105>>2]|0;
  $107 = ($104>>>0)<($106>>>0);
  if ($107) {
   $108 = $6;
   $110 = $108;
  } else {
   $109 = $5;
   $110 = $109;
  }
  $111 = HEAP32[$110>>2]|0;
  $16 = $111;
 }
 $112 = $16;
 $1 = $31;
 $113 = $1;
 $114 = $113;
 $115 = (($114) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $113;
 $118 = ($117);
 $119 = HEAP32[$118>>2]|0;
 $120 = $116;
 $121 = $119;
 $122 = (($120) - ($121))|0;
 $123 = (($122|0) / 4)&-1;
 $124 = $__a;
 __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEEC1EjjS3_($__v,$112,$123,$124);
 $125 = $28;
 __THREW__ = 0;
 invoke_vii(65,($__v|0),($125|0));
 $126 = __THREW__; __THREW__ = 0;
 $127 = $126&1;
 do {
  if (!($127)) {
   __THREW__ = 0;
   invoke_vii(66,($31|0),($__v|0));
   $128 = __THREW__; __THREW__ = 0;
   $129 = $128&1;
   if ($129) {
    break;
   }
   __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED1Ev($__v);
   STACKTOP = sp;return;
  }
 } while(0);
 $130 = ___cxa_find_matching_catch(-1,-1)|0;
 $131 = tempRet0;
 $29 = $130;
 $30 = $131;
 __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED1Ev($__v);
 $132 = $29;
 $133 = $30;
 ___resumeException($132|0);
 // unreachable;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__a = 0, $tmp$i = 0, $tmp1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 120|0;
 $6 = sp + 40|0;
 $9 = sp + 64|0;
 $13 = $this;
 $14 = $__n;
 $15 = $13;
 $16 = $15;
 $12 = $16;
 $17 = $12;
 $18 = (($17) + 8|0);
 $11 = $18;
 $19 = $11;
 $20 = $19;
 $10 = $20;
 $21 = $10;
 $22 = $21;
 $__a = $22;
 while(1) {
  $23 = $__a;
  $24 = $15;
  $25 = (($24) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $1 = $26;
  $27 = $1;
  $7 = $23;
  $8 = $27;
  $28 = $7;
  $29 = $8;
  $tmp$i = $6;
  $tmp1$i = $9;
  ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
  $4 = $28;
  $5 = $29;
  $30 = $4;
  $31 = $5;
  $2 = $30;
  $3 = $31;
  $32 = $3;
  $33 = $32;
  $34 = ($33|0)==(0|0);
  if (!($34)) {
   $35 = $33;
   HEAP32[$35>>2] = 0;
  }
  $36 = $15;
  $37 = (($36) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 4|0);
  HEAP32[$37>>2] = $39;
  $40 = $14;
  $41 = (($40) + -1)|0;
  $14 = $41;
  $42 = $14;
  $43 = ($42>>>0)>(0);
  if (!($43)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEEC1EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $this;
 $2 = $__cap;
 $3 = $__start;
 $4 = $__a;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEEC2EjjS3_($5,$6,$7,$8);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__a = 0, $tmp$i = 0, $tmp1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 120|0;
 $6 = sp + 40|0;
 $9 = sp + 64|0;
 $13 = $this;
 $14 = $__n;
 $15 = $13;
 $12 = $15;
 $16 = $12;
 $17 = (($16) + 12|0);
 $11 = $17;
 $18 = $11;
 $19 = $18;
 $10 = $19;
 $20 = $10;
 $21 = (($20) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $__a = $22;
 while(1) {
  $23 = $__a;
  $24 = (($15) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $1 = $25;
  $26 = $1;
  $7 = $23;
  $8 = $26;
  $27 = $7;
  $28 = $8;
  $tmp$i = $6;
  $tmp1$i = $9;
  ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
  $4 = $27;
  $5 = $28;
  $29 = $4;
  $30 = $5;
  $2 = $29;
  $3 = $30;
  $31 = $3;
  $32 = $31;
  $33 = ($32|0)==(0|0);
  if (!($33)) {
   $34 = $32;
   HEAP32[$34>>2] = 0;
  }
  $35 = (($15) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + 4|0);
  HEAP32[$35>>2] = $37;
  $38 = $14;
  $39 = (($38) + -1)|0;
  $14 = $39;
  $40 = $14;
  $41 = ($40>>>0)>(0);
  if (!($41)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 280|0;
 $__t$i2 = sp + 80|0;
 $__t$i1 = sp + 128|0;
 $__t$i = sp + 224|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 $33 = $32;
 $29 = $33;
 $34 = $29;
 $35 = (($34) + 8|0);
 $28 = $35;
 $36 = $28;
 $37 = $36;
 $27 = $37;
 $38 = $27;
 $39 = $38;
 $40 = $32;
 $41 = ($40);
 $42 = HEAP32[$41>>2]|0;
 $43 = $32;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $31;
 $47 = (($46) + 4|0);
 $1 = $39;
 $2 = $42;
 $3 = $45;
 $4 = $47;
 $48 = $3;
 $49 = $2;
 $50 = $48;
 $51 = $49;
 $52 = (($50) - ($51))|0;
 $53 = (($52|0) / 4)&-1;
 $_Np$i = $53;
 $54 = $_Np$i;
 $55 = $4;
 $56 = HEAP32[$55>>2]|0;
 $57 = (0 - ($54))|0;
 $58 = (($56) + ($57<<2)|0);
 HEAP32[$55>>2] = $58;
 $59 = $4;
 $60 = HEAP32[$59>>2]|0;
 $61 = $60;
 $62 = $2;
 $63 = $62;
 $64 = $_Np$i;
 $65 = $64<<2;
 _memcpy(($61|0),($63|0),($65|0))|0;
 $66 = $32;
 $67 = ($66);
 $68 = $31;
 $69 = (($68) + 4|0);
 $8 = $67;
 $9 = $69;
 $70 = $8;
 $7 = $70;
 $71 = $7;
 $72 = HEAP32[$71>>2]|0;
 HEAP32[$__t$i2>>2] = $72;
 $73 = $9;
 $5 = $73;
 $74 = $5;
 $75 = HEAP32[$74>>2]|0;
 $76 = $8;
 HEAP32[$76>>2] = $75;
 $6 = $__t$i2;
 $77 = $6;
 $78 = HEAP32[$77>>2]|0;
 $79 = $9;
 HEAP32[$79>>2] = $78;
 $80 = $32;
 $81 = (($80) + 4|0);
 $82 = $31;
 $83 = (($82) + 8|0);
 $13 = $81;
 $14 = $83;
 $84 = $13;
 $12 = $84;
 $85 = $12;
 $86 = HEAP32[$85>>2]|0;
 HEAP32[$__t$i1>>2] = $86;
 $87 = $14;
 $10 = $87;
 $88 = $10;
 $89 = HEAP32[$88>>2]|0;
 $90 = $13;
 HEAP32[$90>>2] = $89;
 $11 = $__t$i1;
 $91 = $11;
 $92 = HEAP32[$91>>2]|0;
 $93 = $14;
 HEAP32[$93>>2] = $92;
 $94 = $32;
 $17 = $94;
 $95 = $17;
 $96 = (($95) + 8|0);
 $16 = $96;
 $97 = $16;
 $98 = $97;
 $15 = $98;
 $99 = $15;
 $100 = ($99);
 $101 = $31;
 $20 = $101;
 $102 = $20;
 $103 = (($102) + 12|0);
 $19 = $103;
 $104 = $19;
 $105 = $104;
 $18 = $105;
 $106 = $18;
 $107 = ($106);
 $24 = $100;
 $25 = $107;
 $108 = $24;
 $23 = $108;
 $109 = $23;
 $110 = HEAP32[$109>>2]|0;
 HEAP32[$__t$i>>2] = $110;
 $111 = $25;
 $21 = $111;
 $112 = $21;
 $113 = HEAP32[$112>>2]|0;
 $114 = $24;
 HEAP32[$114>>2] = $113;
 $22 = $__t$i;
 $115 = $22;
 $116 = HEAP32[$115>>2]|0;
 $117 = $25;
 HEAP32[$117>>2] = $116;
 $118 = $31;
 $119 = (($118) + 4|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = $31;
 $122 = ($121);
 HEAP32[$122>>2] = $120;
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $tmp$i$i = 0, $tmp$i$i$i$i = 0, $tmp1$i$i = 0, $tmp1$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 264|0;
 $18 = sp + 136|0;
 $21 = sp + 160|0;
 $28 = sp + 216|0;
 $31 = sp + 240|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = (($35) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 $tmp$i$i = $28;
 $tmp1$i$i = $31;
 ;HEAP8[$tmp$i$i+0|0]=HEAP8[$tmp1$i$i+0|0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = (($40) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = (($45) + 12|0);
  $24 = $46;
  $47 = $24;
  $48 = $47;
  $23 = $48;
  $49 = $23;
  $50 = (($49) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($40) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + -4|0);
  HEAP32[$52>>2] = $54;
  $22 = $54;
  $55 = $22;
  $19 = $51;
  $20 = $55;
  $56 = $19;
  $57 = $20;
  $tmp$i$i$i$i = $18;
  $tmp1$i$i$i$i = $21;
  ;HEAP8[$tmp$i$i$i$i+0|0]=HEAP8[$tmp1$i$i$i$i+0|0]|0;
  $16 = $56;
  $17 = $57;
  $58 = $16;
  $59 = $17;
  $14 = $58;
  $15 = $59;
 }
 $60 = ($34);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61|0)!=(0|0);
 if (!($62)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $63 = $13;
 $64 = (($63) + 12|0);
 $12 = $64;
 $65 = $12;
 $66 = $65;
 $11 = $66;
 $67 = $11;
 $68 = (($67) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($34);
 $71 = HEAP32[$70>>2]|0;
 $4 = $34;
 $72 = $4;
 $3 = $72;
 $73 = $3;
 $74 = (($73) + 12|0);
 $2 = $74;
 $75 = $2;
 $76 = $75;
 $1 = $76;
 $77 = $1;
 $78 = ($77);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($72);
 $81 = HEAP32[$80>>2]|0;
 $82 = $79;
 $83 = $81;
 $84 = (($82) - ($83))|0;
 $85 = (($84|0) / 4)&-1;
 $8 = $69;
 $9 = $71;
 $10 = $85;
 $86 = $8;
 $87 = $9;
 $88 = $10;
 $5 = $86;
 $6 = $87;
 $7 = $88;
 $89 = $6;
 $90 = $89;
 __ZdlPv($90);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIjNS_9allocatorIjEEE8max_sizeEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp$i = 0, $tmp$i1 = 0, $tmp1$i = 0, $tmp1$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $6 = sp + 40|0;
 $9 = sp + 64|0;
 $12 = sp + 88|0;
 $14 = sp + 104|0;
 $19 = sp + 144|0;
 $20 = sp + 152|0;
 $18 = $this;
 $21 = $18;
 $22 = $21;
 $17 = $22;
 $23 = $17;
 $24 = (($23) + 8|0);
 $16 = $24;
 $25 = $16;
 $26 = $25;
 $15 = $26;
 $27 = $15;
 $28 = $27;
 $13 = $28;
 $29 = $13;
 $tmp$i = $12;
 $tmp1$i = $14;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
 $11 = $29;
 $30 = $11;
 $10 = $30;
 HEAP32[$19>>2] = 1073741823;
 $31 = (4294967295 / 2)&-1;
 HEAP32[$20>>2] = $31;
 $7 = $19;
 $8 = $20;
 $32 = $7;
 $33 = $8;
 $tmp$i1 = $6;
 $tmp1$i2 = $9;
 ;HEAP8[$tmp$i1+0|0]=HEAP8[$tmp1$i2+0|0]|0;
 $4 = $32;
 $5 = $33;
 $34 = $5;
 $35 = $4;
 $1 = $6;
 $2 = $34;
 $3 = $35;
 $36 = $2;
 $37 = HEAP32[$36>>2]|0;
 $38 = $3;
 $39 = HEAP32[$38>>2]|0;
 $40 = ($37>>>0)<($39>>>0);
 if ($40) {
  $41 = $5;
  $43 = $41;
 } else {
  $42 = $4;
  $43 = $42;
 }
 $44 = HEAP32[$43>>2]|0;
 STACKTOP = sp;return ($44|0);
}
function __ZNSt3__114__split_bufferIjRNS_9allocatorIjEEEC2EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $16 = sp + 120|0;
 $20 = sp + 152|0;
 $25 = $this;
 $26 = $__cap;
 $27 = $__start;
 $28 = $__a;
 $29 = $25;
 $30 = (($29) + 12|0);
 $31 = $28;
 $22 = $30;
 $23 = 0;
 $24 = $31;
 $32 = $22;
 $33 = $23;
 $34 = $24;
 $19 = $32;
 HEAP32[$20>>2] = $33;
 $21 = $34;
 $35 = $19;
 $36 = $35;
 $18 = $20;
 $37 = $18;
 $38 = HEAP32[$37>>2]|0;
 $39 = $21;
 $12 = $39;
 $40 = $12;
 $15 = $36;
 HEAP32[$16>>2] = $38;
 $17 = $40;
 $41 = $15;
 $42 = ($41);
 $14 = $16;
 $43 = $14;
 $44 = HEAP32[$43>>2]|0;
 HEAP32[$42>>2] = $44;
 $45 = (($41) + 4|0);
 $46 = $17;
 $13 = $46;
 $47 = $13;
 HEAP32[$45>>2] = $47;
 $48 = $26;
 $49 = ($48|0)!=(0);
 if ($49) {
  $3 = $29;
  $50 = $3;
  $51 = (($50) + 12|0);
  $2 = $51;
  $52 = $2;
  $53 = $52;
  $1 = $53;
  $54 = $1;
  $55 = (($54) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $26;
  $7 = $56;
  $8 = $57;
  $58 = $7;
  $59 = $8;
  $4 = $58;
  $5 = $59;
  $6 = 0;
  $60 = $5;
  $61 = $60<<2;
  $62 = (__Znwj($61)|0);
  $63 = $62;
  $64 = $63;
 } else {
  $64 = 0;
 }
 $65 = ($29);
 HEAP32[$65>>2] = $64;
 $66 = ($29);
 $67 = HEAP32[$66>>2]|0;
 $68 = $27;
 $69 = (($67) + ($68<<2)|0);
 $70 = (($29) + 8|0);
 HEAP32[$70>>2] = $69;
 $71 = (($29) + 4|0);
 HEAP32[$71>>2] = $69;
 $72 = ($29);
 $73 = HEAP32[$72>>2]|0;
 $74 = $26;
 $75 = (($73) + ($74<<2)|0);
 $11 = $29;
 $76 = $11;
 $77 = (($76) + 12|0);
 $10 = $77;
 $78 = $10;
 $79 = $78;
 $9 = $79;
 $80 = $9;
 $81 = ($80);
 HEAP32[$81>>2] = $75;
 STACKTOP = sp;return;
}
function __ZN3glm6detail5tvec4IfEC2ERKfS4_S4_S4_($this,$s1,$s2,$s3,$s4) {
 $this = $this|0;
 $s1 = $s1|0;
 $s2 = $s2|0;
 $s3 = $s3|0;
 $s4 = $s4|0;
 var $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $1 = $this;
 $2 = $s1;
 $3 = $s2;
 $4 = $s3;
 $5 = $s4;
 $6 = $1;
 $7 = ($6);
 $8 = $7;
 $9 = $2;
 $10 = +HEAPF32[$9>>2];
 HEAPF32[$8>>2] = $10;
 $11 = (($6) + 4|0);
 $12 = $11;
 $13 = $3;
 $14 = +HEAPF32[$13>>2];
 HEAPF32[$12>>2] = $14;
 $15 = (($6) + 8|0);
 $16 = $15;
 $17 = $4;
 $18 = +HEAPF32[$17>>2];
 HEAPF32[$16>>2] = $18;
 $19 = (($6) + 12|0);
 $20 = $19;
 $21 = $5;
 $22 = +HEAPF32[$21>>2];
 HEAPF32[$20>>2] = $22;
 STACKTOP = sp;return;
}
function __ZN3glm6detail5tvec3IfEC2ERKfS4_S4_($this,$s0,$s1,$s2) {
 $this = $this|0;
 $s0 = $s0|0;
 $s1 = $s1|0;
 $s2 = $s2|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $this;
 $2 = $s0;
 $3 = $s1;
 $4 = $s2;
 $5 = $1;
 $6 = ($5);
 $7 = $6;
 $8 = $2;
 $9 = +HEAPF32[$8>>2];
 HEAPF32[$7>>2] = $9;
 $10 = (($5) + 4|0);
 $11 = $10;
 $12 = $3;
 $13 = +HEAPF32[$12>>2];
 HEAPF32[$11>>2] = $13;
 $14 = (($5) + 8|0);
 $15 = $14;
 $16 = $4;
 $17 = +HEAPF32[$16>>2];
 HEAPF32[$15>>2] = $17;
 STACKTOP = sp;return;
}
function __ZNKSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($agg$result,$this,$__k) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__k = $__k|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bc = 0, $__chash = 0, $__hash = 0, $__lhs_sz$i$i$i = 0, $__lp$i$i$i = 0, $__nd = 0, $__rp$i$i$i = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 832|0;
 $96 = $this;
 $97 = $__k;
 $98 = $96;
 $95 = $98;
 $99 = $95;
 $100 = (($99) + 12|0);
 $94 = $100;
 $101 = $94;
 $102 = $101;
 $93 = $102;
 $103 = $93;
 $104 = $103;
 $105 = $97;
 $19 = $104;
 $20 = $105;
 $106 = $19;
 $107 = $106;
 $108 = $20;
 $109 = (__ZNKSt3__14hashINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEclERKS6_($107,$108)|0);
 $__hash = $109;
 $18 = $98;
 $110 = $18;
 $111 = ($110);
 $17 = $111;
 $112 = $17;
 $113 = ($112);
 $16 = $113;
 $114 = $16;
 $115 = $114;
 $15 = $115;
 $116 = $15;
 $117 = (($116) + 4|0);
 $14 = $117;
 $118 = $14;
 $119 = ($118);
 $13 = $119;
 $120 = $13;
 $121 = $120;
 $12 = $121;
 $122 = $12;
 $123 = ($122);
 $124 = HEAP32[$123>>2]|0;
 $__bc = $124;
 $125 = $__bc;
 $126 = ($125|0)!=(0);
 if ($126) {
  $127 = $__hash;
  $128 = $__bc;
  $10 = $127;
  $11 = $128;
  $129 = $11;
  $130 = $11;
  $131 = (($130) - 1)|0;
  $132 = $129 & $131;
  $133 = ($132|0)!=(0);
  if ($133) {
   $138 = $10;
   $139 = $11;
   $140 = (($138>>>0) % ($139>>>0))&-1;
   $141 = $140;
  } else {
   $134 = $10;
   $135 = $11;
   $136 = (($135) - 1)|0;
   $137 = $134 & $136;
   $141 = $137;
  }
  $__chash = $141;
  $142 = ($98);
  $143 = $__chash;
  $3 = $142;
  $4 = $143;
  $144 = $3;
  $145 = $4;
  $146 = ($144);
  $2 = $146;
  $147 = $2;
  $148 = $147;
  $1 = $148;
  $149 = $1;
  $150 = ($149);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($151) + ($145<<2)|0);
  $153 = HEAP32[$152>>2]|0;
  $__nd = $153;
  $154 = $__nd;
  $155 = ($154|0)!=(0|0);
  do {
   if ($155) {
    $156 = $__nd;
    $157 = $156;
    $158 = ($157);
    $159 = HEAP32[$158>>2]|0;
    $__nd = $159;
    L9: while(1) {
     $160 = $__nd;
     $161 = ($160|0)!=(0|0);
     if ($161) {
      $162 = $__nd;
      $163 = (($162) + 4|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = $__bc;
      $5 = $164;
      $6 = $165;
      $166 = $6;
      $167 = $6;
      $168 = (($167) - 1)|0;
      $169 = $166 & $168;
      $170 = ($169|0)!=(0);
      if ($170) {
       $175 = $5;
       $176 = $6;
       $177 = (($175>>>0) % ($176>>>0))&-1;
       $178 = $177;
      } else {
       $171 = $5;
       $172 = $6;
       $173 = (($172) - 1)|0;
       $174 = $171 & $173;
       $178 = $174;
      }
      $179 = $__chash;
      $180 = ($178|0)==($179|0);
      $181 = $180;
     } else {
      $181 = 0;
     }
     if (!($181)) {
      label = 41;
      break;
     }
     $9 = $98;
     $182 = $9;
     $183 = (($182) + 16|0);
     $8 = $183;
     $184 = $8;
     $185 = $184;
     $7 = $185;
     $186 = $7;
     $187 = $186;
     $188 = $__nd;
     $189 = (($188) + 8|0);
     $190 = $97;
     $81 = $187;
     $82 = $189;
     $83 = $190;
     $191 = $81;
     $192 = $191;
     $193 = $82;
     $194 = $193;
     $195 = ($194);
     $196 = $83;
     $78 = $192;
     $79 = $195;
     $80 = $196;
     $197 = $79;
     $198 = $80;
     $76 = $197;
     $77 = $198;
     $199 = $76;
     $74 = $199;
     $200 = $74;
     $73 = $200;
     $201 = $73;
     $202 = ($201);
     $72 = $202;
     $203 = $72;
     $204 = $203;
     $71 = $204;
     $205 = $71;
     $206 = ($205);
     $207 = ($206);
     $208 = $207;
     $209 = ($208);
     $210 = $209;
     $211 = HEAP8[$210]|0;
     $212 = $211&255;
     $213 = $212 & 1;
     $214 = ($213|0)!=(0);
     if ($214) {
      $67 = $200;
      $215 = $67;
      $216 = ($215);
      $66 = $216;
      $217 = $66;
      $218 = $217;
      $65 = $218;
      $219 = $65;
      $220 = ($219);
      $221 = ($220);
      $222 = $221;
      $223 = (($222) + 4|0);
      $224 = HEAP32[$223>>2]|0;
      $238 = $224;
     } else {
      $70 = $200;
      $225 = $70;
      $226 = ($225);
      $69 = $226;
      $227 = $69;
      $228 = $227;
      $68 = $228;
      $229 = $68;
      $230 = ($229);
      $231 = ($230);
      $232 = $231;
      $233 = ($232);
      $234 = $233;
      $235 = HEAP8[$234]|0;
      $236 = $235&255;
      $237 = $236 >> 1;
      $238 = $237;
     }
     $__lhs_sz$i$i$i = $238;
     $239 = $__lhs_sz$i$i$i;
     $240 = $77;
     $64 = $240;
     $241 = $64;
     $63 = $241;
     $242 = $63;
     $243 = ($242);
     $62 = $243;
     $244 = $62;
     $245 = $244;
     $61 = $245;
     $246 = $61;
     $247 = ($246);
     $248 = ($247);
     $249 = $248;
     $250 = ($249);
     $251 = $250;
     $252 = HEAP8[$251]|0;
     $253 = $252&255;
     $254 = $253 & 1;
     $255 = ($254|0)!=(0);
     if ($255) {
      $57 = $241;
      $256 = $57;
      $257 = ($256);
      $56 = $257;
      $258 = $56;
      $259 = $258;
      $55 = $259;
      $260 = $55;
      $261 = ($260);
      $262 = ($261);
      $263 = $262;
      $264 = (($263) + 4|0);
      $265 = HEAP32[$264>>2]|0;
      $279 = $265;
     } else {
      $60 = $241;
      $266 = $60;
      $267 = ($266);
      $59 = $267;
      $268 = $59;
      $269 = $268;
      $58 = $269;
      $270 = $58;
      $271 = ($270);
      $272 = ($271);
      $273 = $272;
      $274 = ($273);
      $275 = $274;
      $276 = HEAP8[$275]|0;
      $277 = $276&255;
      $278 = $277 >> 1;
      $279 = $278;
     }
     $280 = ($239|0)!=($279|0);
     do {
      if ($280) {
       $$expand_i1_val = 0;
       $75 = $$expand_i1_val;
      } else {
       $281 = $76;
       $51 = $281;
       $282 = $51;
       $50 = $282;
       $283 = $50;
       $49 = $283;
       $284 = $49;
       $285 = ($284);
       $48 = $285;
       $286 = $48;
       $287 = $286;
       $47 = $287;
       $288 = $47;
       $289 = ($288);
       $290 = ($289);
       $291 = $290;
       $292 = ($291);
       $293 = $292;
       $294 = HEAP8[$293]|0;
       $295 = $294&255;
       $296 = $295 & 1;
       $297 = ($296|0)!=(0);
       if ($297) {
        $41 = $283;
        $298 = $41;
        $299 = ($298);
        $40 = $299;
        $300 = $40;
        $301 = $300;
        $39 = $301;
        $302 = $39;
        $303 = ($302);
        $304 = ($303);
        $305 = $304;
        $306 = (($305) + 8|0);
        $307 = HEAP32[$306>>2]|0;
        $320 = $307;
       } else {
        $46 = $283;
        $308 = $46;
        $309 = ($308);
        $45 = $309;
        $310 = $45;
        $311 = $310;
        $44 = $311;
        $312 = $44;
        $313 = ($312);
        $314 = ($313);
        $315 = $314;
        $316 = (($315) + 1|0);
        $317 = ($316);
        $43 = $317;
        $318 = $43;
        $42 = $318;
        $319 = $42;
        $320 = $319;
       }
       $38 = $320;
       $321 = $38;
       $__lp$i$i$i = $321;
       $322 = $77;
       $34 = $322;
       $323 = $34;
       $33 = $323;
       $324 = $33;
       $32 = $324;
       $325 = $32;
       $326 = ($325);
       $31 = $326;
       $327 = $31;
       $328 = $327;
       $30 = $328;
       $329 = $30;
       $330 = ($329);
       $331 = ($330);
       $332 = $331;
       $333 = ($332);
       $334 = $333;
       $335 = HEAP8[$334]|0;
       $336 = $335&255;
       $337 = $336 & 1;
       $338 = ($337|0)!=(0);
       if ($338) {
        $24 = $324;
        $339 = $24;
        $340 = ($339);
        $23 = $340;
        $341 = $23;
        $342 = $341;
        $22 = $342;
        $343 = $22;
        $344 = ($343);
        $345 = ($344);
        $346 = $345;
        $347 = (($346) + 8|0);
        $348 = HEAP32[$347>>2]|0;
        $361 = $348;
       } else {
        $29 = $324;
        $349 = $29;
        $350 = ($349);
        $28 = $350;
        $351 = $28;
        $352 = $351;
        $27 = $352;
        $353 = $27;
        $354 = ($353);
        $355 = ($354);
        $356 = $355;
        $357 = (($356) + 1|0);
        $358 = ($357);
        $26 = $358;
        $359 = $26;
        $25 = $359;
        $360 = $25;
        $361 = $360;
       }
       $21 = $361;
       $362 = $21;
       $__rp$i$i$i = $362;
       $363 = $76;
       $37 = $363;
       $364 = $37;
       $365 = ($364);
       $36 = $365;
       $366 = $36;
       $367 = $366;
       $35 = $367;
       $368 = $35;
       $369 = ($368);
       $370 = ($369);
       $371 = $370;
       $372 = ($371);
       $373 = $372;
       $374 = HEAP8[$373]|0;
       $375 = $374&255;
       $376 = $375 & 1;
       $377 = ($376|0)!=(0);
       if ($377) {
        $378 = $__lp$i$i$i;
        $379 = $__rp$i$i$i;
        $380 = $__lhs_sz$i$i$i;
        $52 = $378;
        $53 = $379;
        $54 = $380;
        $381 = $52;
        $382 = $53;
        $383 = $54;
        __THREW__ = 0;
        $384 = (invoke_iiii(25,($381|0),($382|0),($383|0))|0);
        $385 = __THREW__; __THREW__ = 0;
        $386 = $385&1;
        if ($386) {
         label = 36;
         break L9;
        }
        $387 = ($384|0)==(0);
        $$expand_i1_val2 = $387&1;
        $75 = $$expand_i1_val2;
        break;
       }
       while(1) {
        $388 = $__lhs_sz$i$i$i;
        $389 = ($388|0)!=(0);
        if (!($389)) {
         label = 35;
         break;
        }
        $390 = $__lp$i$i$i;
        $391 = HEAP8[$390]|0;
        $392 = $391 << 24 >> 24;
        $393 = $__rp$i$i$i;
        $394 = HEAP8[$393]|0;
        $395 = $394 << 24 >> 24;
        $396 = ($392|0)!=($395|0);
        if ($396) {
         label = 33;
         break;
        }
        $397 = $__lhs_sz$i$i$i;
        $398 = (($397) + -1)|0;
        $__lhs_sz$i$i$i = $398;
        $399 = $__lp$i$i$i;
        $400 = (($399) + 1|0);
        $__lp$i$i$i = $400;
        $401 = $__rp$i$i$i;
        $402 = (($401) + 1|0);
        $__rp$i$i$i = $402;
       }
       if ((label|0) == 33) {
        label = 0;
        $$expand_i1_val4 = 0;
        $75 = $$expand_i1_val4;
        break;
       }
       else if ((label|0) == 35) {
        label = 0;
        $$expand_i1_val6 = 1;
        $75 = $$expand_i1_val6;
        break;
       }
      }
     } while(0);
     $$pre_trunc = $75;
     $404 = $$pre_trunc&1;
     if ($404) {
      label = 38;
      break;
     }
     $411 = $__nd;
     $412 = $411;
     $413 = ($412);
     $414 = HEAP32[$413>>2]|0;
     $__nd = $414;
    }
    if ((label|0) == 36) {
     $403 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$0 = tempRet0;
     ___clang_call_terminate($403);
     // unreachable;
    }
    else if ((label|0) == 38) {
     $405 = $__nd;
     $86 = $agg$result;
     $87 = $405;
     $406 = $86;
     $407 = $87;
     $84 = $406;
     $85 = $407;
     $408 = $84;
     $409 = ($408);
     $410 = $85;
     HEAP32[$409>>2] = $410;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 41) {
     break;
    }
   }
  } while(0);
 }
 $92 = $98;
 $90 = $agg$result;
 $91 = 0;
 $415 = $90;
 $416 = $91;
 $88 = $415;
 $89 = $416;
 $417 = $88;
 $418 = ($417);
 $419 = $89;
 HEAP32[$418>>2] = $419;
 STACKTOP = sp;return;
}
function __ZN7gltools15ShaderContainerC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $4 = sp + 24|0;
 $7 = sp + 48|0;
 $18 = $this;
 $19 = $18;
 $20 = $19;
 $17 = $20;
 $21 = $17;
 $22 = $21;
 $16 = $22;
 $23 = $16;
 $24 = ($23);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $27 = ($26);
 $13 = $26;
 $28 = $13;
 $12 = $28;
 $29 = $12;
 $30 = $29;
 $31 = $30;
 $32 = $31;
 HEAP32[$27>>2] = $32;
 $33 = (($26) + 4|0);
 $11 = $26;
 $34 = $11;
 $10 = $34;
 $35 = $10;
 $36 = $35;
 $37 = $36;
 $38 = $37;
 HEAP32[$33>>2] = $38;
 $39 = (($23) + 8|0);
 $8 = $39;
 $9 = 0;
 $40 = $8;
 $41 = $9;
 $6 = $40;
 HEAP32[$7>>2] = $41;
 $42 = $6;
 $43 = $42;
 $5 = $7;
 $44 = $5;
 $45 = HEAP32[$44>>2]|0;
 $3 = $43;
 HEAP32[$4>>2] = $45;
 $46 = $3;
 $47 = $46;
 $2 = $47;
 $48 = ($46);
 $1 = $4;
 $49 = $1;
 $50 = HEAP32[$49>>2]|0;
 HEAP32[$48>>2] = $50;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZNSt3__113__vector_baseIjNS_9allocatorIjEEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIjNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $9 = 0, $tmp$i$i$i = 0, $tmp1$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 232|0;
 $18 = sp + 136|0;
 $21 = sp + 160|0;
 $29 = $this;
 $30 = $29;
 $31 = ($30);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $34 = $28;
 $35 = ($34);
 $36 = HEAP32[$35>>2]|0;
 $26 = $34;
 $27 = $36;
 $37 = $26;
 while(1) {
  $38 = $27;
  $39 = (($37) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($38|0)!=($40|0);
  if (!($41)) {
   break;
  }
  $25 = $37;
  $42 = $25;
  $43 = (($42) + 8|0);
  $24 = $43;
  $44 = $24;
  $45 = $44;
  $23 = $45;
  $46 = $23;
  $47 = $46;
  $48 = (($37) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + -4|0);
  HEAP32[$48>>2] = $50;
  $22 = $50;
  $51 = $22;
  $19 = $47;
  $20 = $51;
  $52 = $19;
  $53 = $20;
  $tmp$i$i$i = $18;
  $tmp1$i$i$i = $21;
  ;HEAP8[$tmp$i$i$i+0|0]=HEAP8[$tmp1$i$i$i+0|0]|0;
  $16 = $52;
  $17 = $53;
  $54 = $16;
  $55 = $17;
  $14 = $54;
  $15 = $55;
 }
 $7 = $30;
 $56 = $7;
 $57 = (($56) + 8|0);
 $6 = $57;
 $58 = $6;
 $59 = $58;
 $5 = $59;
 $60 = $5;
 $61 = $60;
 $62 = ($30);
 $63 = HEAP32[$62>>2]|0;
 $4 = $30;
 $64 = $4;
 $3 = $64;
 $65 = $3;
 $66 = (($65) + 8|0);
 $2 = $66;
 $67 = $2;
 $68 = $67;
 $1 = $68;
 $69 = $1;
 $70 = ($69);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($64);
 $73 = HEAP32[$72>>2]|0;
 $74 = $71;
 $75 = $73;
 $76 = (($74) - ($75))|0;
 $77 = (($76|0) / 4)&-1;
 $11 = $61;
 $12 = $63;
 $13 = $77;
 $78 = $11;
 $79 = $12;
 $80 = $13;
 $8 = $78;
 $9 = $79;
 $10 = $80;
 $81 = $9;
 $82 = $81;
 __ZdlPv($82);
 STACKTOP = sp;return;
}
function __ZN4DemoD1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN4DemoD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN4DemoD0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN4DemoD1Ev($2);
 $3 = $2;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function ___cxx_global_var_init120() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN2cl7NDRangeC1Ev((2424));
 (_atexit(((171)|0),((2424)|0),((___dso_handle)|0))|0);
 STACKTOP = sp;return;
}
function __ZN2cl7NDRangeC1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN2cl7NDRangeC2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl7NDRangeD1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN2cl7NDRangeD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN27LorenzAttractorOpenCLSolverC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $4 = sp + 24|0;
 $7 = sp + 48|0;
 $14 = $this;
 $17 = $14;
 $18 = $17;
 __ZN6SolverC2Ev($18);
 $19 = $17;
 $20 = ((2448) + 8|0);
 HEAP32[$19>>2] = $20;
 $21 = (($17) + 4|0);
 __THREW__ = 0;
 invoke_vi(172,($21|0));
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $62 = ___cxa_find_matching_catch(-1,-1)|0;
  $63 = tempRet0;
  $15 = $62;
  $16 = $63;
 } else {
  $24 = (($17) + 8|0);
  __THREW__ = 0;
  invoke_vi(173,($24|0));
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   $64 = ___cxa_find_matching_catch(-1,-1)|0;
   $65 = tempRet0;
   $15 = $64;
   $16 = $65;
  } else {
   $27 = (($17) + 12|0);
   __THREW__ = 0;
   invoke_vi(174,($27|0));
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    $66 = ___cxa_find_matching_catch(-1,-1)|0;
    $67 = tempRet0;
    $15 = $66;
    $16 = $67;
   } else {
    $30 = (($17) + 16|0);
    __THREW__ = 0;
    invoke_vi(175,($30|0));
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     $68 = ___cxa_find_matching_catch(-1,-1)|0;
     $69 = tempRet0;
     $15 = $68;
     $16 = $69;
    } else {
     $33 = (($17) + 20|0);
     __THREW__ = 0;
     invoke_vi(176,($33|0));
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if ($35) {
      $70 = ___cxa_find_matching_catch(-1,-1)|0;
      $71 = tempRet0;
      $15 = $70;
      $16 = $71;
     } else {
      $36 = (($17) + 24|0);
      __THREW__ = 0;
      invoke_vi(176,($36|0));
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      do {
       if ($38) {
        $72 = ___cxa_find_matching_catch(-1,-1)|0;
        $73 = tempRet0;
        $15 = $72;
        $16 = $73;
       } else {
        $39 = (($17) + 28|0);
        __THREW__ = 0;
        invoke_vi(176,($39|0));
        $40 = __THREW__; __THREW__ = 0;
        $41 = $40&1;
        if ($41) {
         $74 = ___cxa_find_matching_catch(-1,-1)|0;
         $75 = tempRet0;
         $15 = $74;
         $16 = $75;
         __ZN2cl6BufferD1Ev($36);
         break;
        } else {
         $42 = (($17) + 32|0);
         $13 = $42;
         $43 = $13;
         $12 = $43;
         $44 = $12;
         $45 = $44;
         $11 = $45;
         $46 = $11;
         $47 = $46;
         $10 = $47;
         $48 = ($46);
         HEAP32[$48>>2] = 0;
         $49 = (($46) + 4|0);
         HEAP32[$49>>2] = 0;
         $50 = (($46) + 8|0);
         $8 = $50;
         $9 = 0;
         $51 = $8;
         $52 = $9;
         $6 = $51;
         HEAP32[$7>>2] = $52;
         $53 = $6;
         $54 = $53;
         $5 = $7;
         $55 = $5;
         $56 = HEAP32[$55>>2]|0;
         $3 = $54;
         HEAP32[$4>>2] = $56;
         $57 = $3;
         $58 = $57;
         $2 = $58;
         $59 = ($57);
         $1 = $4;
         $60 = $1;
         $61 = HEAP32[$60>>2]|0;
         HEAP32[$59>>2] = $61;
         STACKTOP = sp;return;
        }
       }
      } while(0);
      __ZN2cl6BufferD1Ev($33);
     }
     __ZN2cl12CommandQueueD1Ev($30);
    }
    __ZN2cl6KernelD1Ev($27);
   }
   __ZN2cl7ProgramD1Ev($24);
  }
  __ZN2cl7ContextD1Ev($21);
 }
 $76 = $17;
 __ZN6SolverD2Ev($76);
 $77 = $15;
 $78 = $16;
 ___resumeException($77|0);
 // unreachable;
}
function __ZN6SolverC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 $4 = ((3464) + 8|0);
 HEAP32[$3>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN2cl7ContextC1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN2cl7ContextC2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl7ProgramC1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN2cl7ProgramC2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl6KernelC1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN2cl6KernelC2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl12CommandQueueC1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN2cl12CommandQueueC2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl6BufferC1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN2cl6BufferC2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl6BufferD1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN2cl6BufferD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl12CommandQueueD1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN2cl12CommandQueueD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl6KernelD1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN2cl6KernelD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl7ProgramD1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN2cl7ProgramD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl7ContextD1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN2cl7ContextD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN6SolverD2Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 STACKTOP = sp;return;
}
function __ZN27LorenzAttractorOpenCLSolverD0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN27LorenzAttractorOpenCLSolverD2Ev($2);
 $3 = $2;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZN27LorenzAttractorOpenCLSolverD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 $4 = ((2448) + 8|0);
 HEAP32[$3>>2] = $4;
 $5 = (($2) + 32|0);
 __ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEED1Ev($5);
 $6 = (($2) + 28|0);
 __ZN2cl6BufferD1Ev($6);
 $7 = (($2) + 24|0);
 __ZN2cl6BufferD1Ev($7);
 $8 = (($2) + 20|0);
 __ZN2cl6BufferD1Ev($8);
 $9 = (($2) + 16|0);
 __ZN2cl12CommandQueueD1Ev($9);
 $10 = (($2) + 12|0);
 __ZN2cl6KernelD1Ev($10);
 $11 = (($2) + 8|0);
 __ZN2cl7ProgramD1Ev($11);
 $12 = (($2) + 4|0);
 __ZN2cl7ContextD1Ev($12);
 $13 = $2;
 __ZN6SolverD2Ev($13);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN27LorenzAttractorOpenCLSolver4initEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__a$i$i$i$i$i$i = 0, $__a$i$i$i1$i$i$i = 0, $__i$i$i$i$i$i$i = 0, $__i$i$i$i2$i$i$i = 0, $e = 0, $ss = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0;
 $39 = sp + 336|0;
 $ss = sp + 544|0;
 $63 = sp + 688|0;
 $60 = $this;
 $64 = $60;
 __THREW__ = 0;
 invoke_vi(177,($64|0));
 $65 = __THREW__; __THREW__ = 0;
 $66 = $65&1;
 if (!($66)) {
  STACKTOP = sp;return;
 }
 $67 = ___cxa_find_matching_catch(-1,-1,(2488)|0)|0;
 $68 = tempRet0;
 $61 = $67;
 $62 = $68;
 $69 = $62;
 $70 = (_llvm_eh_typeid_for(((2488)|0))|0);
 $71 = ($69|0)==($70|0);
 if (!($71)) {
  $338 = $61;
  $339 = $62;
  ___resumeException($338|0);
  // unreachable;
 }
 $72 = $61;
 $73 = (___cxa_begin_catch(($72|0))|0);
 $74 = $73;
 $e = $74;
 $56 = $ss;
 $57 = 24;
 $75 = $56;
 $76 = $75;
 $77 = (($76) + 64|0);
 $78 = $77;
 $55 = $78;
 $79 = $55;
 $80 = $79;
 $54 = $80;
 $81 = $54;
 $82 = $81;
 $83 = ((6704) + 8|0);
 HEAP32[$82>>2] = $83;
 $84 = $79;
 $85 = ((6304) + 8|0);
 HEAP32[$84>>2] = $85;
 $86 = $75;
 $87 = ((656) + 12|0);
 HEAP32[$86>>2] = $87;
 $88 = $75;
 $89 = (($88) + 64|0);
 $90 = $89;
 $91 = ((656) + 52|0);
 HEAP32[$90>>2] = $91;
 $92 = $75;
 $93 = (($92) + 8|0);
 $94 = $93;
 $95 = ((656) + 32|0);
 HEAP32[$94>>2] = $95;
 $96 = $75;
 $97 = (($75) + 12|0);
 $98 = $97;
 $51 = $96;
 $99 = ((720) + 4|0);
 $52 = $99;
 $53 = $98;
 $100 = $51;
 $101 = $52;
 $102 = $100;
 $103 = (($101) + 4|0);
 $104 = $53;
 $48 = $102;
 $49 = $103;
 $50 = $104;
 $105 = $48;
 $106 = $49;
 $107 = HEAP32[$106>>2]|0;
 $108 = $105;
 HEAP32[$108>>2] = $107;
 $109 = (($106) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $105;
 $112 = HEAP32[$111>>2]|0;
 $113 = (($112) + -12|0);
 $114 = $113;
 $115 = HEAP32[$114>>2]|0;
 $116 = $105;
 $117 = (($116) + ($115)|0);
 $118 = $117;
 HEAP32[$118>>2] = $110;
 $119 = (($105) + 4|0);
 HEAP32[$119>>2] = 0;
 $120 = $105;
 $121 = HEAP32[$120>>2]|0;
 $122 = (($121) + -12|0);
 $123 = $122;
 $124 = HEAP32[$123>>2]|0;
 $125 = $105;
 $126 = (($125) + ($124)|0);
 $127 = $126;
 $128 = $50;
 $46 = $127;
 $47 = $128;
 $129 = $46;
 $130 = $129;
 $131 = $47;
 $132 = $131;
 __THREW__ = 0;
 invoke_vii(44,($130|0),($132|0));
 $133 = __THREW__; __THREW__ = 0;
 $134 = $133&1;
 do {
  if ($134) {
   $249 = ___cxa_find_matching_catch(-1,-1)|0;
   $250 = tempRet0;
   $58 = $249;
   $59 = $250;
   label = 15;
  } else {
   $135 = (($129) + 72|0);
   HEAP32[$135>>2] = 0;
   $136 = (($129) + 76|0);
   HEAP32[$136>>2] = -1;
   $137 = $100;
   $138 = (($137) + 8|0);
   $139 = $138;
   $140 = (($101) + 12|0);
   $44 = $139;
   $45 = $140;
   $141 = $44;
   $142 = $45;
   $143 = HEAP32[$142>>2]|0;
   $144 = $141;
   HEAP32[$144>>2] = $143;
   $145 = (($142) + 4|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = $141;
   $148 = HEAP32[$147>>2]|0;
   $149 = (($148) + -12|0);
   $150 = $149;
   $151 = HEAP32[$150>>2]|0;
   $152 = $141;
   $153 = (($152) + ($151)|0);
   $154 = $153;
   HEAP32[$154>>2] = $146;
   $155 = HEAP32[$101>>2]|0;
   $156 = $100;
   HEAP32[$156>>2] = $155;
   $157 = (($101) + 20|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = $100;
   $160 = HEAP32[$159>>2]|0;
   $161 = (($160) + -12|0);
   $162 = $161;
   $163 = HEAP32[$162>>2]|0;
   $164 = $100;
   $165 = (($164) + ($163)|0);
   $166 = $165;
   HEAP32[$166>>2] = $158;
   $167 = (($101) + 24|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = $100;
   $170 = (($169) + 8|0);
   $171 = $170;
   HEAP32[$171>>2] = $168;
   $172 = $75;
   $173 = ((656) + 12|0);
   HEAP32[$172>>2] = $173;
   $174 = $75;
   $175 = (($174) + 64|0);
   $176 = $175;
   $177 = ((656) + 52|0);
   HEAP32[$176>>2] = $177;
   $178 = $75;
   $179 = (($178) + 8|0);
   $180 = $179;
   $181 = ((656) + 32|0);
   HEAP32[$180>>2] = $181;
   $182 = (($75) + 12|0);
   $183 = $57;
   $42 = $182;
   $43 = $183;
   $184 = $42;
   $185 = $43;
   $37 = $184;
   $38 = $185;
   $186 = $37;
   $187 = $186;
   __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($187);
   $188 = $186;
   $189 = ((992) + 8|0);
   HEAP32[$188>>2] = $189;
   $190 = (($186) + 32|0);
   $36 = $190;
   $191 = $36;
   $35 = $191;
   $192 = $35;
   $193 = ($192);
   $34 = $193;
   $194 = $34;
   $33 = $194;
   $195 = $33;
   $196 = $195;
   $32 = $196;
   $197 = $32;
   $198 = $197;
   $31 = $198;
   $30 = $192;
   $199 = $30;
   $200 = ($199);
   $29 = $200;
   $201 = $29;
   $202 = $201;
   $28 = $202;
   $203 = $28;
   $204 = ($203);
   $205 = ($204);
   $206 = $205;
   $207 = ($206);
   $__a$i$i$i$i$i$i = $207;
   $__i$i$i$i$i$i$i = 0;
   while(1) {
    $208 = $__i$i$i$i$i$i$i;
    $209 = ($208>>>0)<(3);
    if (!($209)) {
     break;
    }
    $210 = $__i$i$i$i$i$i$i;
    $211 = $__a$i$i$i$i$i$i;
    $212 = (($211) + ($210<<2)|0);
    HEAP32[$212>>2] = 0;
    $213 = $__i$i$i$i$i$i$i;
    $214 = (($213) + 1)|0;
    $__i$i$i$i$i$i$i = $214;
   }
   $215 = (($186) + 44|0);
   HEAP32[$215>>2] = 0;
   $216 = (($186) + 48|0);
   $217 = $38;
   HEAP32[$216>>2] = $217;
   $27 = $39;
   $218 = $27;
   $26 = $218;
   $219 = $26;
   $220 = ($219);
   $25 = $220;
   $221 = $25;
   $24 = $221;
   $222 = $24;
   $223 = $222;
   $23 = $223;
   $224 = $23;
   $225 = $224;
   $22 = $225;
   $21 = $219;
   $226 = $21;
   $227 = ($226);
   $20 = $227;
   $228 = $20;
   $229 = $228;
   $19 = $229;
   $230 = $19;
   $231 = ($230);
   $232 = ($231);
   $233 = $232;
   $234 = ($233);
   $__a$i$i$i1$i$i$i = $234;
   $__i$i$i$i2$i$i$i = 0;
   while(1) {
    $235 = $__i$i$i$i2$i$i$i;
    $236 = ($235>>>0)<(3);
    if (!($236)) {
     break;
    }
    $237 = $__i$i$i$i2$i$i$i;
    $238 = $__a$i$i$i1$i$i$i;
    $239 = (($238) + ($237<<2)|0);
    HEAP32[$239>>2] = 0;
    $240 = $__i$i$i$i2$i$i$i;
    $241 = (($240) + 1)|0;
    $__i$i$i$i2$i$i$i = $241;
   }
   __THREW__ = 0;
   invoke_vii(45,($186|0),($39|0));
   $242 = __THREW__; __THREW__ = 0;
   $243 = $242&1;
   if ($243) {
    $244 = ___cxa_find_matching_catch(-1,-1)|0;
    $245 = tempRet0;
    $40 = $244;
    $41 = $245;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($39);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($190);
    $246 = $186;
    __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($246);
    $247 = $40;
    $248 = $41;
    $58 = $247;
    $59 = $248;
    label = 15;
    break;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($39);
   $256 = $ss;
   $257 = (($256) + 8|0);
   $258 = $257;
   __THREW__ = 0;
   $259 = (invoke_iii(21,($258|0),((2504)|0))|0);
   $260 = __THREW__; __THREW__ = 0;
   $261 = $260&1;
   do {
    if ($261) {
     label = 33;
    } else {
     $262 = $e;
     $263 = $262;
     $264 = HEAP32[$263>>2]|0;
     $265 = (($264) + 8|0);
     $266 = HEAP32[$265>>2]|0;
     $267 = (FUNCTION_TABLE_ii[$266 & 127]($262)|0);
     __THREW__ = 0;
     $268 = (invoke_iii(21,($259|0),($267|0))|0);
     $269 = __THREW__; __THREW__ = 0;
     $270 = $269&1;
     if ($270) {
      label = 33;
      break;
     }
     __THREW__ = 0;
     $271 = (invoke_iii(21,($268|0),((2520)|0))|0);
     $272 = __THREW__; __THREW__ = 0;
     $273 = $272&1;
     if ($273) {
      label = 33;
      break;
     }
     $274 = $e;
     __THREW__ = 0;
     $275 = (invoke_ii(73,($274|0))|0);
     $276 = __THREW__; __THREW__ = 0;
     $277 = $276&1;
     if ($277) {
      label = 33;
      break;
     }
     __THREW__ = 0;
     $278 = (invoke_iii(22,($271|0),($275|0))|0);
     $279 = __THREW__; __THREW__ = 0;
     $280 = $279&1;
     if ($280) {
      label = 33;
      break;
     }
     $17 = $278;
     $18 = 69;
     $281 = $17;
     $282 = $18;
     __THREW__ = 0;
     (invoke_ii($282|0,($281|0))|0);
     $283 = __THREW__; __THREW__ = 0;
     $284 = $283&1;
     if ($284) {
      label = 33;
      break;
     }
     $16 = $ss;
     $285 = $16;
     $286 = (($285) + 12|0);
     __THREW__ = 0;
     invoke_vii(46,($63|0),($286|0));
     $287 = __THREW__; __THREW__ = 0;
     $288 = $287&1;
     if ($288) {
      label = 33;
      break;
     }
     $15 = $63;
     $289 = $15;
     $14 = $289;
     $290 = $14;
     $13 = $290;
     $291 = $13;
     $12 = $291;
     $292 = $12;
     $293 = ($292);
     $11 = $293;
     $294 = $11;
     $295 = $294;
     $10 = $295;
     $296 = $10;
     $297 = ($296);
     $298 = ($297);
     $299 = $298;
     $300 = ($299);
     $301 = $300;
     $302 = HEAP8[$301]|0;
     $303 = $302&255;
     $304 = $303 & 1;
     $305 = ($304|0)!=(0);
     if ($305) {
      $4 = $291;
      $306 = $4;
      $307 = ($306);
      $3 = $307;
      $308 = $3;
      $309 = $308;
      $2 = $309;
      $310 = $2;
      $311 = ($310);
      $312 = ($311);
      $313 = $312;
      $314 = (($313) + 8|0);
      $315 = HEAP32[$314>>2]|0;
      $328 = $315;
     } else {
      $9 = $291;
      $316 = $9;
      $317 = ($316);
      $8 = $317;
      $318 = $8;
      $319 = $318;
      $7 = $319;
      $320 = $7;
      $321 = ($320);
      $322 = ($321);
      $323 = $322;
      $324 = (($323) + 1|0);
      $325 = ($324);
      $6 = $325;
      $326 = $6;
      $5 = $326;
      $327 = $5;
      $328 = $327;
     }
     $1 = $328;
     $329 = $1;
     __THREW__ = 0;
     invoke_viii(4,($329|0),((2528)|0),55);
     $330 = __THREW__; __THREW__ = 0;
     $331 = $330&1;
     if ($331) {
      $334 = ___cxa_find_matching_catch(-1,-1)|0;
      $335 = tempRet0;
      $61 = $334;
      $62 = $335;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($63);
      break;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($63);
     __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ss);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    }
   } while(0);
   if ((label|0) == 33) {
    $332 = ___cxa_find_matching_catch(-1,-1)|0;
    $333 = tempRet0;
    $61 = $332;
    $62 = $333;
   }
   __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ss);
  }
 } while(0);
 if ((label|0) == 15) {
  $251 = $75;
  $252 = (($251) + 64|0);
  $253 = $252;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($253);
  $254 = $58;
  $255 = $59;
  $61 = $254;
  $62 = $255;
 }
 __THREW__ = 0;
 invoke_v(5);
 $336 = __THREW__; __THREW__ = 0;
 $337 = $336&1;
 if ($337) {
  $340 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($340);
  // unreachable;
 }
 $338 = $61;
 $339 = $62;
 ___resumeException($338|0);
 // unreachable;
}
function __ZN27LorenzAttractorOpenCLSolver6__initEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0;
 var $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0;
 var $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0;
 var $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0;
 var $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0;
 var $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0;
 var $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0;
 var $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0;
 var $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0;
 var $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0;
 var $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0;
 var $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0;
 var $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0;
 var $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0;
 var $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0;
 var $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0;
 var $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0;
 var $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0;
 var $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0;
 var $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0;
 var $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0;
 var $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0;
 var $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0;
 var $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0;
 var $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0;
 var $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0;
 var $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0;
 var $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0;
 var $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0;
 var $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0;
 var $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0;
 var $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0;
 var $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0;
 var $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0;
 var $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0;
 var $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0;
 var $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0;
 var $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0;
 var $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0;
 var $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0;
 var $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0;
 var $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0;
 var $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0;
 var $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0;
 var $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0;
 var $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0;
 var $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0;
 var $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0;
 var $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0;
 var $998 = 0, $999 = 0, $__a$i$i$i = 0, $__a$i$i$i$i$i$i = 0, $__a$i$i$i1$i$i$i = 0, $__i$i$i$i = 0, $__i$i$i$i$i$i$i = 0, $__i$i$i$i2$i$i$i = 0, $charSrc = 0, $context_properties = 0, $devices = 0, $e = 0, $eh$lpad$body6$index7Z2D = 0, $eh$lpad$body6$indexZ2D = 0, $file = 0, $gpuDevice = 0, $kernelFilename = 0, $nParticles = 0, $platforms = 0, $sources = 0;
 var $ss = 0, $strSrc = 0, $tmp$i$i = 0, $tmp$i$i27 = 0, $tmp1$i$i = 0, $tmp1$i$i28 = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3024|0;
 $37 = sp + 288|0;
 $42 = sp + 328|0;
 $60 = sp + 472|0;
 $65 = sp + 512|0;
 $180 = sp + 1464|0;
 $266 = sp + 2176|0;
 $269 = sp + 2200|0;
 $platforms = sp + 2264|0;
 $context_properties = sp + 2296|0;
 $279 = sp + 2336|0;
 $280 = sp + 2352|0;
 $devices = sp + 2360|0;
 $kernelFilename = sp + 2376|0;
 $281 = sp + 2392|0;
 $282 = sp + 2408|0;
 $file = sp + 2424|0;
 $ss = sp + 2616|0;
 $strSrc = sp + 2752|0;
 $charSrc = sp + 2768|0;
 $sources = sp + 2776|0;
 $283 = sp + 2792|0;
 $284 = sp + 2800|0;
 $285 = sp + 2808|0;
 $286 = sp + 2816|0;
 $287 = sp + 2832|0;
 $288 = sp + 2848|0;
 $289 = sp + 2856|0;
 $290 = sp + 2872|0;
 $291 = sp + 2888|0;
 $292 = sp + 2904|0;
 $293 = sp + 2912|0;
 $294 = sp + 2928|0;
 $295 = sp + 2936|0;
 $296 = sp + 2952|0;
 $297 = sp + 2960|0;
 $298 = sp + 2976|0;
 $299 = sp + 2984|0;
 $300 = sp + 3000|0;
 $301 = sp + 3008|0;
 $276 = $this;
 $302 = $276;
 $275 = $platforms;
 $303 = $275;
 $274 = $303;
 $304 = $274;
 $305 = $304;
 $273 = $305;
 $306 = $273;
 $307 = $306;
 $272 = $307;
 $308 = ($306);
 HEAP32[$308>>2] = 0;
 $309 = (($306) + 4|0);
 HEAP32[$309>>2] = 0;
 $310 = (($306) + 8|0);
 $270 = $310;
 $271 = 0;
 $311 = $270;
 $312 = $271;
 $268 = $311;
 HEAP32[$269>>2] = $312;
 $313 = $268;
 $314 = $313;
 $267 = $269;
 $315 = $267;
 $316 = HEAP32[$315>>2]|0;
 $265 = $314;
 HEAP32[$266>>2] = $316;
 $317 = $265;
 $318 = $317;
 $264 = $318;
 $319 = ($317);
 $263 = $266;
 $320 = $263;
 $321 = HEAP32[$320>>2]|0;
 HEAP32[$319>>2] = $321;
 __THREW__ = 0;
 (invoke_ii(74,($platforms|0))|0);
 $322 = __THREW__; __THREW__ = 0;
 $323 = $322&1;
 do {
  if ($323) {
   label = 5;
  } else {
   $262 = $platforms;
   $324 = $262;
   $325 = $324;
   $326 = ($325);
   $327 = HEAP32[$326>>2]|0;
   $328 = $324;
   $329 = (($328) + 4|0);
   $330 = HEAP32[$329>>2]|0;
   $331 = ($327|0)==($330|0);
   if ($331) {
    __THREW__ = 0;
    invoke_viii(4,((2568)|0),((2528)|0),65);
    $332 = __THREW__; __THREW__ = 0;
    $333 = $332&1;
    if ($333) {
     label = 5;
     break;
    }
   }
   $336 = ($context_properties);
   HEAP32[$336>>2] = 8200;
   $337 = (($336) + 4|0);
   HEAP32[$337>>2] = 0;
   $338 = (($337) + 4|0);
   HEAP32[$338>>2] = 8202;
   $339 = (($338) + 4|0);
   HEAP32[$339>>2] = 0;
   $340 = (($339) + 4|0);
   HEAP32[$340>>2] = 4228;
   $341 = (($340) + 4|0);
   $260 = $platforms;
   $261 = 0;
   $342 = $260;
   $343 = $261;
   $344 = $342;
   $345 = ($344);
   $346 = HEAP32[$345>>2]|0;
   $347 = (($346) + ($343<<2)|0);
   $348 = $347;
   __THREW__ = 0;
   $349 = (invoke_ii(75,($348|0))|0);
   $350 = __THREW__; __THREW__ = 0;
   $351 = $350&1;
   if ($351) {
    label = 5;
    break;
   }
   $352 = HEAP32[$349>>2]|0;
   $353 = $352;
   HEAP32[$341>>2] = $353;
   $354 = (($341) + 4|0);
   HEAP32[$354>>2] = 0;
   __THREW__ = 0;
   $355 = (invoke_i(2)|0);
   $356 = __THREW__; __THREW__ = 0;
   $357 = $356&1;
   if ($357) {
    label = 5;
    break;
   }
   $258 = $279;
   $259 = (2600);
   $358 = $258;
   $359 = $259;
   $256 = $358;
   $257 = $359;
   $360 = $256;
   $361 = ($360);
   $255 = $361;
   $362 = $255;
   $254 = $362;
   $363 = $254;
   $364 = $363;
   $253 = $364;
   $365 = $253;
   $366 = $365;
   $252 = $366;
   $367 = $257;
   $368 = $257;
   $251 = $368;
   $369 = $251;
   __THREW__ = 0;
   $370 = (invoke_ii(68,($369|0))|0);
   $371 = __THREW__; __THREW__ = 0;
   $372 = $371&1;
   if ($372) {
    label = 5;
    break;
   }
   __THREW__ = 0;
   invoke_viii(5,($360|0),($367|0),($370|0));
   $373 = __THREW__; __THREW__ = 0;
   $374 = $373&1;
   if ($374) {
    label = 5;
    break;
   }
   __THREW__ = 0;
   $375 = (invoke_iiii(24,($355|0),($279|0),0)|0);
   $376 = __THREW__; __THREW__ = 0;
   $377 = $376&1;
   if ($377) {
    $402 = ___cxa_find_matching_catch(-1,-1)|0;
    $403 = tempRet0;
    $277 = $402;
    $278 = $403;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($279);
    break;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($279);
   $gpuDevice = $375;
   $378 = (($302) + 4|0);
   $379 = $gpuDevice;
   $380 = ($379|0)==(1);
   $381 = $380 ? 4 : 2;
   $382 = ($381|0)<(0);
   $383 = $382 << 31 >> 31;
   $384 = ($context_properties);
   __THREW__ = 0;
   invoke_viiiiiii(40,($280|0),($381|0),($383|0),($384|0),(0|0),(0|0),(0|0));
   $385 = __THREW__; __THREW__ = 0;
   $386 = $385&1;
   if ($386) {
    label = 5;
    break;
   }
   __THREW__ = 0;
   (invoke_iii(28,($378|0),($280|0))|0);
   $387 = __THREW__; __THREW__ = 0;
   $388 = $387&1;
   if ($388) {
    $404 = ___cxa_find_matching_catch(-1,-1)|0;
    $405 = tempRet0;
    $277 = $404;
    $278 = $405;
    __ZN2cl7ContextD1Ev($280);
    break;
   }
   __ZN2cl7ContextD1Ev($280);
   $389 = (($302) + 4|0);
   __THREW__ = 0;
   invoke_viii(20,($devices|0),($389|0),(0|0));
   $390 = __THREW__; __THREW__ = 0;
   $391 = $390&1;
   if ($391) {
    label = 5;
    break;
   }
   $250 = $devices;
   $392 = $250;
   $393 = $392;
   $394 = ($393);
   $395 = HEAP32[$394>>2]|0;
   $396 = $392;
   $397 = (($396) + 4|0);
   $398 = HEAP32[$397>>2]|0;
   $399 = ($395|0)==($398|0);
   do {
    if ($399) {
     __THREW__ = 0;
     invoke_viii(4,((2616)|0),((2528)|0),103);
     $400 = __THREW__; __THREW__ = 0;
     $401 = $400&1;
     if ($401) {
      label = 21;
      break;
     }
     label = 22;
    } else {
     label = 22;
    }
   } while(0);
   do {
    if ((label|0) == 22) {
     __THREW__ = 0;
     $408 = (invoke_i(2)|0);
     $409 = __THREW__; __THREW__ = 0;
     $410 = $409&1;
     if ($410) {
      label = 21;
      break;
     }
     $248 = $281;
     $249 = (2640);
     $411 = $248;
     $412 = $249;
     $246 = $411;
     $247 = $412;
     $413 = $246;
     $414 = ($413);
     $245 = $414;
     $415 = $245;
     $244 = $415;
     $416 = $244;
     $417 = $416;
     $243 = $417;
     $418 = $243;
     $419 = $418;
     $242 = $419;
     $420 = $247;
     $421 = $247;
     $241 = $421;
     $422 = $241;
     __THREW__ = 0;
     $423 = (invoke_ii(68,($422|0))|0);
     $424 = __THREW__; __THREW__ = 0;
     $425 = $424&1;
     if ($425) {
      label = 21;
      break;
     }
     __THREW__ = 0;
     invoke_viii(5,($413|0),($420|0),($423|0));
     $426 = __THREW__; __THREW__ = 0;
     $427 = $426&1;
     if ($427) {
      label = 21;
      break;
     }
     $240 = $282;
     $428 = $240;
     $239 = $428;
     $429 = $239;
     $430 = ($429);
     $238 = $430;
     $431 = $238;
     $237 = $431;
     $432 = $237;
     $433 = $432;
     $236 = $433;
     $434 = $236;
     $435 = $434;
     $235 = $435;
     $234 = $429;
     $436 = $234;
     $437 = ($436);
     $233 = $437;
     $438 = $233;
     $439 = $438;
     $232 = $439;
     $440 = $232;
     $441 = ($440);
     $442 = ($441);
     $443 = $442;
     $444 = ($443);
     $__a$i$i$i = $444;
     $__i$i$i$i = 0;
     while(1) {
      $445 = $__i$i$i$i;
      $446 = ($445>>>0)<(3);
      if (!($446)) {
       break;
      }
      $447 = $__i$i$i$i;
      $448 = $__a$i$i$i;
      $449 = (($448) + ($447<<2)|0);
      HEAP32[$449>>2] = 0;
      $450 = $__i$i$i$i;
      $451 = (($450) + 1)|0;
      $__i$i$i$i = $451;
     }
     __THREW__ = 0;
     invoke_viiii(10,($kernelFilename|0),($408|0),($281|0),($282|0));
     $452 = __THREW__; __THREW__ = 0;
     $453 = $452&1;
     if ($453) {
      $605 = ___cxa_find_matching_catch(-1,-1)|0;
      $606 = tempRet0;
      $277 = $605;
      $278 = $606;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($282);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($281);
      break;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($282);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($281);
     $227 = $file;
     $228 = $kernelFilename;
     $229 = 8;
     $454 = $227;
     $455 = $454;
     $456 = (($455) + 108|0);
     $457 = $456;
     $226 = $457;
     $458 = $226;
     $459 = $458;
     $225 = $459;
     $460 = $225;
     $461 = $460;
     $462 = ((6704) + 8|0);
     HEAP32[$461>>2] = $462;
     $463 = $458;
     $464 = ((6304) + 8|0);
     HEAP32[$463>>2] = $464;
     $465 = $454;
     $466 = ((1384) + 12|0);
     HEAP32[$465>>2] = $466;
     $467 = $454;
     $468 = (($467) + 108|0);
     $469 = $468;
     $470 = ((1384) + 32|0);
     HEAP32[$469>>2] = $470;
     $471 = $454;
     $472 = (($454) + 8|0);
     $473 = $472;
     $222 = $471;
     $474 = ((1424) + 4|0);
     $223 = $474;
     $224 = $473;
     $475 = $222;
     $476 = $223;
     $477 = HEAP32[$476>>2]|0;
     $478 = $475;
     HEAP32[$478>>2] = $477;
     $479 = (($476) + 4|0);
     $480 = HEAP32[$479>>2]|0;
     $481 = $475;
     $482 = HEAP32[$481>>2]|0;
     $483 = (($482) + -12|0);
     $484 = $483;
     $485 = HEAP32[$484>>2]|0;
     $486 = $475;
     $487 = (($486) + ($485)|0);
     $488 = $487;
     HEAP32[$488>>2] = $480;
     $489 = (($475) + 4|0);
     HEAP32[$489>>2] = 0;
     $490 = $475;
     $491 = HEAP32[$490>>2]|0;
     $492 = (($491) + -12|0);
     $493 = $492;
     $494 = HEAP32[$493>>2]|0;
     $495 = $475;
     $496 = (($495) + ($494)|0);
     $497 = $496;
     $498 = $224;
     $220 = $497;
     $221 = $498;
     $499 = $220;
     $500 = $499;
     $501 = $221;
     $502 = $501;
     __THREW__ = 0;
     invoke_vii(44,($500|0),($502|0));
     $503 = __THREW__; __THREW__ = 0;
     $504 = $503&1;
     L37: do {
      if ($504) {
       $586 = ___cxa_find_matching_catch(-1,-1)|0;
       $587 = tempRet0;
       $230 = $586;
       $231 = $587;
       label = 43;
      } else {
       $505 = (($499) + 72|0);
       HEAP32[$505>>2] = 0;
       $506 = (($499) + 76|0);
       HEAP32[$506>>2] = -1;
       $507 = $454;
       $508 = ((1384) + 12|0);
       HEAP32[$507>>2] = $508;
       $509 = $454;
       $510 = (($509) + 108|0);
       $511 = $510;
       $512 = ((1384) + 32|0);
       HEAP32[$511>>2] = $512;
       $513 = (($454) + 8|0);
       __THREW__ = 0;
       invoke_vi(161,($513|0));
       $514 = __THREW__; __THREW__ = 0;
       $515 = $514&1;
       if ($515) {
        $588 = ___cxa_find_matching_catch(-1,-1)|0;
        $589 = tempRet0;
        $230 = $588;
        $231 = $589;
       } else {
        $516 = (($454) + 8|0);
        $517 = $228;
        $518 = $229;
        $519 = $518 | 8;
        $217 = $516;
        $218 = $517;
        $219 = $519;
        $520 = $217;
        $521 = $218;
        $216 = $521;
        $522 = $216;
        $215 = $522;
        $523 = $215;
        $214 = $523;
        $524 = $214;
        $213 = $524;
        $525 = $213;
        $526 = ($525);
        $212 = $526;
        $527 = $212;
        $528 = $527;
        $211 = $528;
        $529 = $211;
        $530 = ($529);
        $531 = ($530);
        $532 = $531;
        $533 = ($532);
        $534 = $533;
        $535 = HEAP8[$534]|0;
        $536 = $535&255;
        $537 = $536 & 1;
        $538 = ($537|0)!=(0);
        if ($538) {
         $205 = $524;
         $539 = $205;
         $540 = ($539);
         $204 = $540;
         $541 = $204;
         $542 = $541;
         $203 = $542;
         $543 = $203;
         $544 = ($543);
         $545 = ($544);
         $546 = $545;
         $547 = (($546) + 8|0);
         $548 = HEAP32[$547>>2]|0;
         $561 = $548;
        } else {
         $210 = $524;
         $549 = $210;
         $550 = ($549);
         $209 = $550;
         $551 = $209;
         $552 = $551;
         $208 = $552;
         $553 = $208;
         $554 = ($553);
         $555 = ($554);
         $556 = $555;
         $557 = (($556) + 1|0);
         $558 = ($557);
         $207 = $558;
         $559 = $207;
         $206 = $559;
         $560 = $206;
         $561 = $560;
        }
        $202 = $561;
        $562 = $202;
        $563 = $219;
        __THREW__ = 0;
        $564 = (invoke_iiii(27,($520|0),($562|0),($563|0))|0);
        $565 = __THREW__; __THREW__ = 0;
        $566 = $565&1;
        do {
         if (!($566)) {
          $567 = ($564|0)==(0|0);
          if ($567) {
           $568 = $454;
           $569 = HEAP32[$568>>2]|0;
           $570 = (($569) + -12|0);
           $571 = $570;
           $572 = HEAP32[$571>>2]|0;
           $573 = $454;
           $574 = (($573) + ($572)|0);
           $575 = $574;
           $200 = $575;
           $201 = 4;
           $576 = $200;
           $577 = $576;
           $578 = $201;
           $198 = $577;
           $199 = $578;
           $579 = $198;
           $580 = (($579) + 16|0);
           $581 = HEAP32[$580>>2]|0;
           $582 = $199;
           $583 = $581 | $582;
           __THREW__ = 0;
           invoke_vii(50,($579|0),($583|0));
           $584 = __THREW__; __THREW__ = 0;
           $585 = $584&1;
           if ($585) {
            break;
           }
          }
          $197 = $file;
          $597 = $197;
          $598 = (($597) + 8|0);
          $196 = $598;
          $599 = $196;
          $600 = (($599) + 64|0);
          $601 = HEAP32[$600>>2]|0;
          $602 = ($601|0)!=(0|0);
          do {
           if ($602) {
            label = 53;
           } else {
            __THREW__ = 0;
            invoke_viii(4,((2656)|0),((2528)|0),111);
            $603 = __THREW__; __THREW__ = 0;
            $604 = $603&1;
            if ($604) {
             $607 = ___cxa_find_matching_catch(-1,-1)|0;
             $608 = tempRet0;
             $eh$lpad$body6$index7Z2D = $608;$eh$lpad$body6$indexZ2D = $607;
             label = 52;
             break;
            } else {
             label = 53;
             break;
            }
           }
          } while(0);
          L60: do {
           if ((label|0) == 53) {
            $192 = $ss;
            $193 = 16;
            $609 = $192;
            $610 = $609;
            $611 = (($610) + 56|0);
            $612 = $611;
            $191 = $612;
            $613 = $191;
            $614 = $613;
            $190 = $614;
            $615 = $190;
            $616 = $615;
            $617 = ((6704) + 8|0);
            HEAP32[$616>>2] = $617;
            $618 = $613;
            $619 = ((6304) + 8|0);
            HEAP32[$618>>2] = $619;
            $620 = $609;
            $621 = ((2952) + 12|0);
            HEAP32[$620>>2] = $621;
            $622 = $609;
            $623 = (($622) + 56|0);
            $624 = $623;
            $625 = ((2952) + 32|0);
            HEAP32[$624>>2] = $625;
            $626 = $609;
            $627 = (($609) + 4|0);
            $628 = $627;
            $187 = $626;
            $629 = ((2992) + 4|0);
            $188 = $629;
            $189 = $628;
            $630 = $187;
            $631 = $188;
            $632 = HEAP32[$631>>2]|0;
            $633 = $630;
            HEAP32[$633>>2] = $632;
            $634 = (($631) + 4|0);
            $635 = HEAP32[$634>>2]|0;
            $636 = $630;
            $637 = HEAP32[$636>>2]|0;
            $638 = (($637) + -12|0);
            $639 = $638;
            $640 = HEAP32[$639>>2]|0;
            $641 = $630;
            $642 = (($641) + ($640)|0);
            $643 = $642;
            HEAP32[$643>>2] = $635;
            $644 = $630;
            $645 = HEAP32[$644>>2]|0;
            $646 = (($645) + -12|0);
            $647 = $646;
            $648 = HEAP32[$647>>2]|0;
            $649 = $630;
            $650 = (($649) + ($648)|0);
            $651 = $650;
            $652 = $189;
            $185 = $651;
            $186 = $652;
            $653 = $185;
            $654 = $653;
            $655 = $186;
            $656 = $655;
            __THREW__ = 0;
            invoke_vii(44,($654|0),($656|0));
            $657 = __THREW__; __THREW__ = 0;
            $658 = $657&1;
            do {
             if ($658) {
              $735 = ___cxa_find_matching_catch(-1,-1)|0;
              $736 = tempRet0;
              $194 = $735;
              $195 = $736;
             } else {
              $659 = (($653) + 72|0);
              HEAP32[$659>>2] = 0;
              $660 = (($653) + 76|0);
              HEAP32[$660>>2] = -1;
              $661 = $609;
              $662 = ((2952) + 12|0);
              HEAP32[$661>>2] = $662;
              $663 = $609;
              $664 = (($663) + 56|0);
              $665 = $664;
              $666 = ((2952) + 32|0);
              HEAP32[$665>>2] = $666;
              $667 = (($609) + 4|0);
              $668 = $193;
              $669 = $668 | 16;
              $183 = $667;
              $184 = $669;
              $670 = $183;
              $671 = $184;
              $178 = $670;
              $179 = $671;
              $672 = $178;
              $673 = $672;
              __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($673);
              $674 = $672;
              $675 = ((992) + 8|0);
              HEAP32[$674>>2] = $675;
              $676 = (($672) + 32|0);
              $177 = $676;
              $677 = $177;
              $176 = $677;
              $678 = $176;
              $679 = ($678);
              $175 = $679;
              $680 = $175;
              $174 = $680;
              $681 = $174;
              $682 = $681;
              $173 = $682;
              $683 = $173;
              $684 = $683;
              $172 = $684;
              $171 = $678;
              $685 = $171;
              $686 = ($685);
              $170 = $686;
              $687 = $170;
              $688 = $687;
              $169 = $688;
              $689 = $169;
              $690 = ($689);
              $691 = ($690);
              $692 = $691;
              $693 = ($692);
              $__a$i$i$i$i$i$i = $693;
              $__i$i$i$i$i$i$i = 0;
              while(1) {
               $694 = $__i$i$i$i$i$i$i;
               $695 = ($694>>>0)<(3);
               if (!($695)) {
                break;
               }
               $696 = $__i$i$i$i$i$i$i;
               $697 = $__a$i$i$i$i$i$i;
               $698 = (($697) + ($696<<2)|0);
               HEAP32[$698>>2] = 0;
               $699 = $__i$i$i$i$i$i$i;
               $700 = (($699) + 1)|0;
               $__i$i$i$i$i$i$i = $700;
              }
              $701 = (($672) + 44|0);
              HEAP32[$701>>2] = 0;
              $702 = (($672) + 48|0);
              $703 = $179;
              HEAP32[$702>>2] = $703;
              $168 = $180;
              $704 = $168;
              $167 = $704;
              $705 = $167;
              $706 = ($705);
              $166 = $706;
              $707 = $166;
              $165 = $707;
              $708 = $165;
              $709 = $708;
              $164 = $709;
              $710 = $164;
              $711 = $710;
              $163 = $711;
              $162 = $705;
              $712 = $162;
              $713 = ($712);
              $161 = $713;
              $714 = $161;
              $715 = $714;
              $160 = $715;
              $716 = $160;
              $717 = ($716);
              $718 = ($717);
              $719 = $718;
              $720 = ($719);
              $__a$i$i$i1$i$i$i = $720;
              $__i$i$i$i2$i$i$i = 0;
              while(1) {
               $721 = $__i$i$i$i2$i$i$i;
               $722 = ($721>>>0)<(3);
               if (!($722)) {
                break;
               }
               $723 = $__i$i$i$i2$i$i$i;
               $724 = $__a$i$i$i1$i$i$i;
               $725 = (($724) + ($723<<2)|0);
               HEAP32[$725>>2] = 0;
               $726 = $__i$i$i$i2$i$i$i;
               $727 = (($726) + 1)|0;
               $__i$i$i$i2$i$i$i = $727;
              }
              __THREW__ = 0;
              invoke_vii(45,($672|0),($180|0));
              $728 = __THREW__; __THREW__ = 0;
              $729 = $728&1;
              if ($729) {
               $730 = ___cxa_find_matching_catch(-1,-1)|0;
               $731 = tempRet0;
               $181 = $730;
               $182 = $731;
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($180);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($676);
               $732 = $672;
               __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($732);
               $733 = $181;
               $734 = $182;
               $194 = $733;
               $195 = $734;
               break;
              }
              __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($180);
              $742 = $ss;
              $159 = $file;
              $743 = $159;
              $744 = (($743) + 8|0);
              $745 = $744;
              __THREW__ = 0;
              (invoke_iii(24,($742|0),($745|0))|0);
              $746 = __THREW__; __THREW__ = 0;
              $747 = $746&1;
              do {
               if ($747) {
                label = 84;
               } else {
                $158 = $file;
                $748 = $158;
                $749 = (($748) + 8|0);
                __THREW__ = 0;
                $750 = (invoke_ii(71,($749|0))|0);
                $751 = __THREW__; __THREW__ = 0;
                $752 = $751&1;
                if ($752) {
                 label = 84;
                 break;
                }
                $753 = ($750|0)==(0|0);
                if ($753) {
                 $754 = $748;
                 $755 = HEAP32[$754>>2]|0;
                 $756 = (($755) + -12|0);
                 $757 = $756;
                 $758 = HEAP32[$757>>2]|0;
                 $759 = $748;
                 $760 = (($759) + ($758)|0);
                 $761 = $760;
                 $156 = $761;
                 $157 = 4;
                 $762 = $156;
                 $763 = $762;
                 $764 = $157;
                 $154 = $763;
                 $155 = $764;
                 $765 = $154;
                 $766 = (($765) + 16|0);
                 $767 = HEAP32[$766>>2]|0;
                 $768 = $155;
                 $769 = $767 | $768;
                 __THREW__ = 0;
                 invoke_vii(50,($765|0),($769|0));
                 $770 = __THREW__; __THREW__ = 0;
                 $771 = $770&1;
                 if ($771) {
                  label = 84;
                  break;
                 }
                }
                $153 = $ss;
                $772 = $153;
                $773 = (($772) + 4|0);
                __THREW__ = 0;
                invoke_vii(46,($strSrc|0),($773|0));
                $774 = __THREW__; __THREW__ = 0;
                $775 = $774&1;
                if ($775) {
                 label = 84;
                 break;
                }
                $152 = $strSrc;
                $776 = $152;
                $151 = $776;
                $777 = $151;
                $150 = $777;
                $778 = $150;
                $149 = $778;
                $779 = $149;
                $780 = ($779);
                $148 = $780;
                $781 = $148;
                $782 = $781;
                $147 = $782;
                $783 = $147;
                $784 = ($783);
                $785 = ($784);
                $786 = $785;
                $787 = ($786);
                $788 = $787;
                $789 = HEAP8[$788]|0;
                $790 = $789&255;
                $791 = $790 & 1;
                $792 = ($791|0)!=(0);
                if ($792) {
                 $141 = $778;
                 $793 = $141;
                 $794 = ($793);
                 $140 = $794;
                 $795 = $140;
                 $796 = $795;
                 $139 = $796;
                 $797 = $139;
                 $798 = ($797);
                 $799 = ($798);
                 $800 = $799;
                 $801 = (($800) + 8|0);
                 $802 = HEAP32[$801>>2]|0;
                 $815 = $802;
                } else {
                 $146 = $778;
                 $803 = $146;
                 $804 = ($803);
                 $145 = $804;
                 $805 = $145;
                 $806 = $805;
                 $144 = $806;
                 $807 = $144;
                 $808 = ($807);
                 $809 = ($808);
                 $810 = $809;
                 $811 = (($810) + 1|0);
                 $812 = ($811);
                 $143 = $812;
                 $813 = $143;
                 $142 = $813;
                 $814 = $142;
                 $815 = $814;
                }
                $138 = $815;
                $816 = $138;
                HEAP32[$charSrc>>2] = $816;
                HEAP32[$285>>2] = 0;
                $136 = $charSrc;
                $137 = $285;
                $817 = $136;
                $135 = $817;
                $818 = $135;
                $819 = $137;
                $126 = $819;
                $820 = $126;
                $132 = $284;
                $133 = $818;
                $134 = $820;
                $821 = $132;
                $822 = $133;
                $823 = $134;
                $129 = $821;
                $130 = $822;
                $131 = $823;
                $824 = $129;
                $825 = ($824);
                $826 = $130;
                $128 = $826;
                $827 = $128;
                $828 = HEAP32[$827>>2]|0;
                HEAP32[$825>>2] = $828;
                $829 = (($824) + 4|0);
                $830 = $131;
                $127 = $830;
                $831 = $127;
                $832 = HEAP32[$831>>2]|0;
                HEAP32[$829>>2] = $832;
                $123 = $283;
                $124 = $284;
                $125 = 0;
                $833 = $123;
                $834 = $125;
                $835 = $124;
                $120 = $833;
                $121 = $835;
                $122 = $834;
                $836 = $120;
                $837 = ($836);
                $838 = $121;
                $839 = ($838);
                $119 = $839;
                $840 = $119;
                $841 = HEAP32[$840>>2]|0;
                HEAP32[$837>>2] = $841;
                $842 = (($836) + 4|0);
                $843 = $121;
                $844 = (($843) + 4|0);
                $118 = $844;
                $845 = $118;
                $846 = HEAP32[$845>>2]|0;
                HEAP32[$842>>2] = $846;
                __THREW__ = 0;
                invoke_viii(21,($sources|0),1,($283|0));
                $847 = __THREW__; __THREW__ = 0;
                $848 = $847&1;
                if ($848) {
                 $860 = ___cxa_find_matching_catch(-1,-1)|0;
                 $861 = tempRet0;
                 $277 = $860;
                 $278 = $861;
                } else {
                 $849 = (($302) + 8|0);
                 $850 = (($302) + 4|0);
                 __THREW__ = 0;
                 invoke_viiii(18,($286|0),($850|0),($sources|0),(0|0));
                 $851 = __THREW__; __THREW__ = 0;
                 $852 = $851&1;
                 L96: do {
                  if ($852) {
                   label = 86;
                  } else {
                   __THREW__ = 0;
                   (invoke_iii(29,($849|0),($286|0))|0);
                   $853 = __THREW__; __THREW__ = 0;
                   $854 = $853&1;
                   if ($854) {
                    $864 = ___cxa_find_matching_catch(-1,-1)|0;
                    $865 = tempRet0;
                    $277 = $864;
                    $278 = $865;
                    __ZN2cl7ProgramD1Ev($286);
                    break;
                   }
                   __ZN2cl7ProgramD1Ev($286);
                   $855 = (($302) + 8|0);
                   __THREW__ = 0;
                   (invoke_iiiiii(13,($855|0),($devices|0),(0|0),(0|0),(0|0))|0);
                   $856 = __THREW__; __THREW__ = 0;
                   $857 = $856&1;
                   if ($857) {
                    $866 = ___cxa_find_matching_catch(-1,-1,(2488)|0)|0;
                    $867 = tempRet0;
                    $277 = $866;
                    $278 = $867;
                    $868 = $278;
                    $869 = (_llvm_eh_typeid_for(((2488)|0))|0);
                    $870 = ($868|0)==($869|0);
                    if (!($870)) {
                     break;
                    }
                    $871 = $277;
                    $872 = (___cxa_begin_catch(($871|0))|0);
                    $873 = $872;
                    $e = $873;
                    __THREW__ = 0;
                    $874 = (invoke_iii(21,((4008)|0),((2688)|0))|0);
                    $875 = __THREW__; __THREW__ = 0;
                    $876 = $875&1;
                    L105: do {
                     if ($876) {
                      label = 99;
                     } else {
                      $116 = $874;
                      $117 = 69;
                      $877 = $116;
                      $878 = $117;
                      __THREW__ = 0;
                      (invoke_ii($878|0,($877|0))|0);
                      $879 = __THREW__; __THREW__ = 0;
                      $880 = $879&1;
                      if ($880) {
                       label = 99;
                       break;
                      }
                      $881 = (($302) + 8|0);
                      $114 = $devices;
                      $115 = 0;
                      $882 = $114;
                      $883 = $115;
                      $884 = $882;
                      $885 = ($884);
                      $886 = HEAP32[$885>>2]|0;
                      $887 = (($886) + ($883<<2)|0);
                      __THREW__ = 0;
                      invoke_viiii(19,($287|0),($881|0),($887|0),(0|0));
                      $888 = __THREW__; __THREW__ = 0;
                      $889 = $888&1;
                      if ($889) {
                       label = 99;
                       break;
                      }
                      __THREW__ = 0;
                      $890 = (invoke_iii(25,((4008)|0),($287|0))|0);
                      $891 = __THREW__; __THREW__ = 0;
                      $892 = $891&1;
                      do {
                       if (!($892)) {
                        $112 = $890;
                        $113 = 69;
                        $893 = $112;
                        $894 = $113;
                        __THREW__ = 0;
                        (invoke_ii($894|0,($893|0))|0);
                        $895 = __THREW__; __THREW__ = 0;
                        $896 = $895&1;
                        if ($896) {
                         break;
                        }
                        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($287);
                        $897 = (___cxa_allocate_exception(12)|0);
                        $898 = $897;
                        $899 = $e;
                        __ZN2cl5ErrorC1ERKS0_($898,$899);
                        __THREW__ = 0;
                        invoke_viii(12,($897|0),((2488)|0),((40)|0));
                        $900 = __THREW__; __THREW__ = 0;
                        $901 = $900&1;
                        if ($901) {
                         label = 99;
                         break L105;
                        }
                        // unreachable;
                       }
                      } while(0);
                      $904 = ___cxa_find_matching_catch(-1,-1)|0;
                      $905 = tempRet0;
                      $277 = $904;
                      $278 = $905;
                      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($287);
                     }
                    } while(0);
                    if ((label|0) == 99) {
                     $902 = ___cxa_find_matching_catch(-1,-1)|0;
                     $903 = tempRet0;
                     $277 = $902;
                     $278 = $903;
                    }
                    __THREW__ = 0;
                    invoke_v(5);
                    $906 = __THREW__; __THREW__ = 0;
                    $907 = $906&1;
                    if ($907) {
                     $1262 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
                     u$0 = tempRet0;
                     ___clang_call_terminate($1262);
                     // unreachable;
                    } else {
                     break;
                    }
                   }
                   $908 = (($302) + 12|0);
                   $909 = (($302) + 8|0);
                   __THREW__ = 0;
                   invoke_viiii(20,($288|0),($909|0),((2712)|0),(0|0));
                   $910 = __THREW__; __THREW__ = 0;
                   $911 = $910&1;
                   if ($911) {
                    label = 86;
                    break;
                   }
                   __THREW__ = 0;
                   (invoke_iii(30,($908|0),($288|0))|0);
                   $912 = __THREW__; __THREW__ = 0;
                   $913 = $912&1;
                   if ($913) {
                    $1137 = ___cxa_find_matching_catch(-1,-1)|0;
                    $1138 = tempRet0;
                    $277 = $1137;
                    $278 = $1138;
                    __ZN2cl6KernelD1Ev($288);
                    break;
                   }
                   __ZN2cl6KernelD1Ev($288);
                   $914 = (($302) + 16|0);
                   $915 = (($302) + 4|0);
                   $110 = $devices;
                   $111 = 0;
                   $916 = $110;
                   $917 = $111;
                   $918 = $916;
                   $919 = ($918);
                   $920 = HEAP32[$919>>2]|0;
                   $921 = (($920) + ($917<<2)|0);
                   __THREW__ = 0;
                   invoke_viiiiii(19,($289|0),($915|0),($921|0),0,0,(0|0));
                   $922 = __THREW__; __THREW__ = 0;
                   $923 = $922&1;
                   if ($923) {
                    label = 86;
                    break;
                   }
                   __THREW__ = 0;
                   (invoke_iii(31,($914|0),($289|0))|0);
                   $924 = __THREW__; __THREW__ = 0;
                   $925 = $924&1;
                   if ($925) {
                    $1139 = ___cxa_find_matching_catch(-1,-1)|0;
                    $1140 = tempRet0;
                    $277 = $1139;
                    $278 = $1140;
                    __ZN2cl12CommandQueueD1Ev($289);
                    break;
                   }
                   __ZN2cl12CommandQueueD1Ev($289);
                   __THREW__ = 0;
                   $926 = (invoke_i(2)|0);
                   $927 = __THREW__; __THREW__ = 0;
                   $928 = $927&1;
                   if ($928) {
                    label = 86;
                    break;
                   }
                   $108 = $290;
                   $109 = (2728);
                   $929 = $108;
                   $930 = $109;
                   $106 = $929;
                   $107 = $930;
                   $931 = $106;
                   $932 = ($931);
                   $105 = $932;
                   $933 = $105;
                   $104 = $933;
                   $934 = $104;
                   $935 = $934;
                   $103 = $935;
                   $936 = $103;
                   $937 = $936;
                   $102 = $937;
                   $938 = $107;
                   $939 = $107;
                   $101 = $939;
                   $940 = $101;
                   __THREW__ = 0;
                   $941 = (invoke_ii(68,($940|0))|0);
                   $942 = __THREW__; __THREW__ = 0;
                   $943 = $942&1;
                   if ($943) {
                    label = 86;
                    break;
                   }
                   __THREW__ = 0;
                   invoke_viii(5,($931|0),($938|0),($941|0));
                   $944 = __THREW__; __THREW__ = 0;
                   $945 = $944&1;
                   if ($945) {
                    label = 86;
                    break;
                   }
                   __THREW__ = 0;
                   $946 = (invoke_iiii(24,($926|0),($290|0),0)|0);
                   $947 = __THREW__; __THREW__ = 0;
                   $948 = $947&1;
                   if ($948) {
                    $1141 = ___cxa_find_matching_catch(-1,-1)|0;
                    $1142 = tempRet0;
                    $277 = $1141;
                    $278 = $1142;
                    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($290);
                    break;
                   }
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($290);
                   $nParticles = $946;
                   __THREW__ = 0;
                   $949 = (invoke_i(2)|0);
                   $950 = __THREW__; __THREW__ = 0;
                   $951 = $950&1;
                   if ($951) {
                    label = 86;
                    break;
                   }
                   $99 = $291;
                   $100 = (2744);
                   $952 = $99;
                   $953 = $100;
                   $97 = $952;
                   $98 = $953;
                   $954 = $97;
                   $955 = ($954);
                   $96 = $955;
                   $956 = $96;
                   $95 = $956;
                   $957 = $95;
                   $958 = $957;
                   $94 = $958;
                   $959 = $94;
                   $960 = $959;
                   $93 = $960;
                   $961 = $98;
                   $962 = $98;
                   $92 = $962;
                   $963 = $92;
                   __THREW__ = 0;
                   $964 = (invoke_ii(68,($963|0))|0);
                   $965 = __THREW__; __THREW__ = 0;
                   $966 = $965&1;
                   if ($966) {
                    label = 86;
                    break;
                   }
                   __THREW__ = 0;
                   invoke_viii(5,($954|0),($961|0),($964|0));
                   $967 = __THREW__; __THREW__ = 0;
                   $968 = $967&1;
                   if ($968) {
                    label = 86;
                    break;
                   }
                   __THREW__ = 0;
                   $969 = (invoke_iii(19,($949|0),($291|0))|0);
                   $970 = __THREW__; __THREW__ = 0;
                   $971 = $970&1;
                   if ($971) {
                    $1143 = ___cxa_find_matching_catch(-1,-1)|0;
                    $1144 = tempRet0;
                    $277 = $1143;
                    $278 = $1144;
                    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($291);
                    break;
                   }
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($291);
                   L148: do {
                    if ($969) {
                     $972 = (($302) + 20|0);
                     $973 = (($302) + 4|0);
                     __THREW__ = 0;
                     $974 = (invoke_i(2)|0);
                     $975 = __THREW__; __THREW__ = 0;
                     $976 = $975&1;
                     if ($976) {
                      label = 86;
                      break L96;
                     }
                     $90 = $293;
                     $91 = (2760);
                     $977 = $90;
                     $978 = $91;
                     $88 = $977;
                     $89 = $978;
                     $979 = $88;
                     $980 = ($979);
                     $87 = $980;
                     $981 = $87;
                     $86 = $981;
                     $982 = $86;
                     $983 = $982;
                     $85 = $983;
                     $984 = $85;
                     $985 = $984;
                     $84 = $985;
                     $986 = $89;
                     $987 = $89;
                     $83 = $987;
                     $988 = $83;
                     __THREW__ = 0;
                     $989 = (invoke_ii(68,($988|0))|0);
                     $990 = __THREW__; __THREW__ = 0;
                     $991 = $990&1;
                     if ($991) {
                      label = 86;
                      break L96;
                     }
                     __THREW__ = 0;
                     invoke_viii(5,($979|0),($986|0),($989|0));
                     $992 = __THREW__; __THREW__ = 0;
                     $993 = $992&1;
                     if ($993) {
                      label = 86;
                      break L96;
                     }
                     __THREW__ = 0;
                     $994 = (invoke_iiii(30,($974|0),($293|0),0)|0);
                     $995 = __THREW__; __THREW__ = 0;
                     $996 = $995&1;
                     do {
                      if ($996) {
                       label = 155;
                      } else {
                       __THREW__ = 0;
                       invoke_viiiiii(20,($292|0),($973|0),1,0,($994|0),(0|0));
                       $997 = __THREW__; __THREW__ = 0;
                       $998 = $997&1;
                       if ($998) {
                        label = 155;
                        break;
                       }
                       $999 = $292;
                       __THREW__ = 0;
                       (invoke_iii(32,($972|0),($999|0))|0);
                       $1000 = __THREW__; __THREW__ = 0;
                       $1001 = $1000&1;
                       if ($1001) {
                        $1147 = ___cxa_find_matching_catch(-1,-1)|0;
                        $1148 = tempRet0;
                        $277 = $1147;
                        $278 = $1148;
                        __ZN2cl8BufferGLD1Ev($292);
                        break;
                       }
                       __ZN2cl8BufferGLD1Ev($292);
                       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($293);
                       $1002 = (($302) + 24|0);
                       $1003 = (($302) + 4|0);
                       __THREW__ = 0;
                       $1004 = (invoke_i(2)|0);
                       $1005 = __THREW__; __THREW__ = 0;
                       $1006 = $1005&1;
                       if ($1006) {
                        label = 86;
                        break L96;
                       }
                       $81 = $295;
                       $82 = (2768);
                       $1007 = $81;
                       $1008 = $82;
                       $79 = $1007;
                       $80 = $1008;
                       $1009 = $79;
                       $1010 = ($1009);
                       $78 = $1010;
                       $1011 = $78;
                       $77 = $1011;
                       $1012 = $77;
                       $1013 = $1012;
                       $76 = $1013;
                       $1014 = $76;
                       $1015 = $1014;
                       $75 = $1015;
                       $1016 = $80;
                       $1017 = $80;
                       $74 = $1017;
                       $1018 = $74;
                       __THREW__ = 0;
                       $1019 = (invoke_ii(68,($1018|0))|0);
                       $1020 = __THREW__; __THREW__ = 0;
                       $1021 = $1020&1;
                       if ($1021) {
                        label = 86;
                        break L96;
                       }
                       __THREW__ = 0;
                       invoke_viii(5,($1009|0),($1016|0),($1019|0));
                       $1022 = __THREW__; __THREW__ = 0;
                       $1023 = $1022&1;
                       if ($1023) {
                        label = 86;
                        break L96;
                       }
                       __THREW__ = 0;
                       $1024 = (invoke_iiii(30,($1004|0),($295|0),0)|0);
                       $1025 = __THREW__; __THREW__ = 0;
                       $1026 = $1025&1;
                       do {
                        if ($1026) {
                         label = 158;
                        } else {
                         __THREW__ = 0;
                         invoke_viiiiii(20,($294|0),($1003|0),1,0,($1024|0),(0|0));
                         $1027 = __THREW__; __THREW__ = 0;
                         $1028 = $1027&1;
                         if ($1028) {
                          label = 158;
                          break;
                         }
                         $1029 = $294;
                         __THREW__ = 0;
                         (invoke_iii(32,($1002|0),($1029|0))|0);
                         $1030 = __THREW__; __THREW__ = 0;
                         $1031 = $1030&1;
                         if ($1031) {
                          $1151 = ___cxa_find_matching_catch(-1,-1)|0;
                          $1152 = tempRet0;
                          $277 = $1151;
                          $278 = $1152;
                          __ZN2cl8BufferGLD1Ev($294);
                          break;
                         }
                         __ZN2cl8BufferGLD1Ev($294);
                         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($295);
                         $1032 = (($302) + 32|0);
                         __THREW__ = 0;
                         invoke_vii(67,($1032|0),2);
                         $1033 = __THREW__; __THREW__ = 0;
                         $1034 = $1033&1;
                         if ($1034) {
                          label = 86;
                          break L96;
                         }
                         $1035 = (($302) + 32|0);
                         $1036 = (($302) + 20|0);
                         $1037 = $1036;
                         $72 = $1035;
                         $73 = $1037;
                         $1038 = $72;
                         $1039 = $1038;
                         $1040 = (($1039) + 4|0);
                         $1041 = HEAP32[$1040>>2]|0;
                         $1042 = $1038;
                         $71 = $1042;
                         $1043 = $71;
                         $1044 = (($1043) + 8|0);
                         $70 = $1044;
                         $1045 = $70;
                         $1046 = $1045;
                         $69 = $1046;
                         $1047 = $69;
                         $1048 = ($1047);
                         $1049 = HEAP32[$1048>>2]|0;
                         $1050 = ($1041|0)!=($1049|0);
                         if ($1050) {
                          $1051 = $1038;
                          $68 = $1051;
                          $1052 = $68;
                          $1053 = (($1052) + 8|0);
                          $67 = $1053;
                          $1054 = $67;
                          $1055 = $1054;
                          $66 = $1055;
                          $1056 = $66;
                          $1057 = $1056;
                          $1058 = $1038;
                          $1059 = (($1058) + 4|0);
                          $1060 = HEAP32[$1059>>2]|0;
                          $51 = $1060;
                          $1061 = $51;
                          $1062 = $73;
                          $62 = $1057;
                          $63 = $1061;
                          $64 = $1062;
                          $1063 = $62;
                          $1064 = $63;
                          $1065 = $64;
                          $61 = $1065;
                          $1066 = $61;
                          $tmp$i$i = $60;
                          $tmp1$i$i = $65;
                          ;HEAP8[$tmp$i$i+0|0]=HEAP8[$tmp1$i$i+0|0]|0;
                          $57 = $1063;
                          $58 = $1064;
                          $59 = $1066;
                          $1067 = $57;
                          $1068 = $58;
                          $1069 = $59;
                          $56 = $1069;
                          $1070 = $56;
                          $53 = $1067;
                          $54 = $1068;
                          $55 = $1070;
                          $1071 = $54;
                          $1072 = $1071;
                          $1073 = ($1072|0)==(0|0);
                          if (!($1073)) {
                           $1074 = $1072;
                           $1075 = $55;
                           $52 = $1075;
                           $1076 = $52;
                           __THREW__ = 0;
                           invoke_vii(68,($1074|0),($1076|0));
                           $1077 = __THREW__; __THREW__ = 0;
                           $1078 = $1077&1;
                           if ($1078) {
                            label = 86;
                            break L96;
                           }
                          }
                          $1079 = $1038;
                          $1080 = (($1079) + 4|0);
                          $1081 = HEAP32[$1080>>2]|0;
                          $1082 = (($1081) + 4|0);
                          HEAP32[$1080>>2] = $1082;
                         } else {
                          $1083 = $73;
                          __THREW__ = 0;
                          invoke_vii(69,($1038|0),($1083|0));
                          $1084 = __THREW__; __THREW__ = 0;
                          $1085 = $1084&1;
                          if ($1085) {
                           label = 86;
                           break L96;
                          }
                         }
                         $1086 = (($302) + 32|0);
                         $1087 = (($302) + 24|0);
                         $1088 = $1087;
                         $49 = $1086;
                         $50 = $1088;
                         $1089 = $49;
                         $1090 = $1089;
                         $1091 = (($1090) + 4|0);
                         $1092 = HEAP32[$1091>>2]|0;
                         $1093 = $1089;
                         $48 = $1093;
                         $1094 = $48;
                         $1095 = (($1094) + 8|0);
                         $47 = $1095;
                         $1096 = $47;
                         $1097 = $1096;
                         $46 = $1097;
                         $1098 = $46;
                         $1099 = ($1098);
                         $1100 = HEAP32[$1099>>2]|0;
                         $1101 = ($1092|0)!=($1100|0);
                         if ($1101) {
                          $1102 = $1089;
                          $45 = $1102;
                          $1103 = $45;
                          $1104 = (($1103) + 8|0);
                          $44 = $1104;
                          $1105 = $44;
                          $1106 = $1105;
                          $43 = $1106;
                          $1107 = $43;
                          $1108 = $1107;
                          $1109 = $1089;
                          $1110 = (($1109) + 4|0);
                          $1111 = HEAP32[$1110>>2]|0;
                          $28 = $1111;
                          $1112 = $28;
                          $1113 = $50;
                          $39 = $1108;
                          $40 = $1112;
                          $41 = $1113;
                          $1114 = $39;
                          $1115 = $40;
                          $1116 = $41;
                          $38 = $1116;
                          $1117 = $38;
                          $tmp$i$i27 = $37;
                          $tmp1$i$i28 = $42;
                          ;HEAP8[$tmp$i$i27+0|0]=HEAP8[$tmp1$i$i28+0|0]|0;
                          $34 = $1114;
                          $35 = $1115;
                          $36 = $1117;
                          $1118 = $34;
                          $1119 = $35;
                          $1120 = $36;
                          $33 = $1120;
                          $1121 = $33;
                          $30 = $1118;
                          $31 = $1119;
                          $32 = $1121;
                          $1122 = $31;
                          $1123 = $1122;
                          $1124 = ($1123|0)==(0|0);
                          if (!($1124)) {
                           $1125 = $1123;
                           $1126 = $32;
                           $29 = $1126;
                           $1127 = $29;
                           __THREW__ = 0;
                           invoke_vii(68,($1125|0),($1127|0));
                           $1128 = __THREW__; __THREW__ = 0;
                           $1129 = $1128&1;
                           if ($1129) {
                            label = 86;
                            break L96;
                           }
                          }
                          $1130 = $1089;
                          $1131 = (($1130) + 4|0);
                          $1132 = HEAP32[$1131>>2]|0;
                          $1133 = (($1132) + 4|0);
                          HEAP32[$1131>>2] = $1133;
                         } else {
                          $1134 = $50;
                          __THREW__ = 0;
                          invoke_vii(69,($1089|0),($1134|0));
                          $1135 = __THREW__; __THREW__ = 0;
                          $1136 = $1135&1;
                          if ($1136) {
                           label = 86;
                           break L96;
                          }
                         }
                         break L148;
                        }
                       } while(0);
                       if ((label|0) == 158) {
                        $1149 = ___cxa_find_matching_catch(-1,-1)|0;
                        $1150 = tempRet0;
                        $277 = $1149;
                        $278 = $1150;
                       }
                       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($295);
                       break L96;
                      }
                     } while(0);
                     if ((label|0) == 155) {
                      $1145 = ___cxa_find_matching_catch(-1,-1)|0;
                      $1146 = tempRet0;
                      $277 = $1145;
                      $278 = $1146;
                     }
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($293);
                     break L96;
                    } else {
                     $1153 = (($302) + 20|0);
                     $1154 = (($302) + 4|0);
                     $1155 = $nParticles;
                     $1156 = $1155<<2;
                     $1157 = $1156<<2;
                     __THREW__ = 0;
                     $1158 = (invoke_i(2)|0);
                     $1159 = __THREW__; __THREW__ = 0;
                     $1160 = $1159&1;
                     if ($1160) {
                      label = 86;
                      break L96;
                     }
                     $26 = $297;
                     $27 = (2784);
                     $1161 = $26;
                     $1162 = $27;
                     $24 = $1161;
                     $25 = $1162;
                     $1163 = $24;
                     $1164 = ($1163);
                     $23 = $1164;
                     $1165 = $23;
                     $22 = $1165;
                     $1166 = $22;
                     $1167 = $1166;
                     $21 = $1167;
                     $1168 = $21;
                     $1169 = $1168;
                     $20 = $1169;
                     $1170 = $25;
                     $1171 = $25;
                     $19 = $1171;
                     $1172 = $19;
                     __THREW__ = 0;
                     $1173 = (invoke_ii(68,($1172|0))|0);
                     $1174 = __THREW__; __THREW__ = 0;
                     $1175 = $1174&1;
                     if ($1175) {
                      label = 86;
                      break L96;
                     }
                     __THREW__ = 0;
                     invoke_viii(5,($1163|0),($1170|0),($1173|0));
                     $1176 = __THREW__; __THREW__ = 0;
                     $1177 = $1176&1;
                     if ($1177) {
                      label = 86;
                      break L96;
                     }
                     __THREW__ = 0;
                     $1178 = (invoke_iiii(29,($1158|0),($297|0),(0|0))|0);
                     $1179 = __THREW__; __THREW__ = 0;
                     $1180 = $1179&1;
                     do {
                      if ($1180) {
                       label = 176;
                      } else {
                       __THREW__ = 0;
                       invoke_viiiiiii(41,($296|0),($1154|0),33,0,($1157|0),($1178|0),(0|0));
                       $1181 = __THREW__; __THREW__ = 0;
                       $1182 = $1181&1;
                       if ($1182) {
                        label = 176;
                        break;
                       }
                       __THREW__ = 0;
                       (invoke_iii(32,($1153|0),($296|0))|0);
                       $1183 = __THREW__; __THREW__ = 0;
                       $1184 = $1183&1;
                       if ($1184) {
                        $1219 = ___cxa_find_matching_catch(-1,-1)|0;
                        $1220 = tempRet0;
                        $277 = $1219;
                        $278 = $1220;
                        __ZN2cl6BufferD1Ev($296);
                        break;
                       }
                       __ZN2cl6BufferD1Ev($296);
                       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($297);
                       $1185 = (($302) + 24|0);
                       $1186 = (($302) + 4|0);
                       $1187 = $nParticles;
                       $1188 = $1187<<2;
                       $1189 = $1188<<2;
                       __THREW__ = 0;
                       $1190 = (invoke_i(2)|0);
                       $1191 = __THREW__; __THREW__ = 0;
                       $1192 = $1191&1;
                       if ($1192) {
                        label = 86;
                        break L96;
                       }
                       $17 = $299;
                       $18 = (2792);
                       $1193 = $17;
                       $1194 = $18;
                       $15 = $1193;
                       $16 = $1194;
                       $1195 = $15;
                       $1196 = ($1195);
                       $14 = $1196;
                       $1197 = $14;
                       $13 = $1197;
                       $1198 = $13;
                       $1199 = $1198;
                       $12 = $1199;
                       $1200 = $12;
                       $1201 = $1200;
                       $11 = $1201;
                       $1202 = $16;
                       $1203 = $16;
                       $10 = $1203;
                       $1204 = $10;
                       __THREW__ = 0;
                       $1205 = (invoke_ii(68,($1204|0))|0);
                       $1206 = __THREW__; __THREW__ = 0;
                       $1207 = $1206&1;
                       if ($1207) {
                        label = 86;
                        break L96;
                       }
                       __THREW__ = 0;
                       invoke_viii(5,($1195|0),($1202|0),($1205|0));
                       $1208 = __THREW__; __THREW__ = 0;
                       $1209 = $1208&1;
                       if ($1209) {
                        label = 86;
                        break L96;
                       }
                       __THREW__ = 0;
                       $1210 = (invoke_iiii(29,($1190|0),($299|0),(0|0))|0);
                       $1211 = __THREW__; __THREW__ = 0;
                       $1212 = $1211&1;
                       do {
                        if ($1212) {
                         label = 179;
                        } else {
                         __THREW__ = 0;
                         invoke_viiiiiii(41,($298|0),($1186|0),33,0,($1189|0),($1210|0),(0|0));
                         $1213 = __THREW__; __THREW__ = 0;
                         $1214 = $1213&1;
                         if ($1214) {
                          label = 179;
                          break;
                         }
                         __THREW__ = 0;
                         (invoke_iii(32,($1185|0),($298|0))|0);
                         $1215 = __THREW__; __THREW__ = 0;
                         $1216 = $1215&1;
                         if ($1216) {
                          $1223 = ___cxa_find_matching_catch(-1,-1)|0;
                          $1224 = tempRet0;
                          $277 = $1223;
                          $278 = $1224;
                          __ZN2cl6BufferD1Ev($298);
                          break;
                         } else {
                          __ZN2cl6BufferD1Ev($298);
                          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($299);
                          break L148;
                         }
                        }
                       } while(0);
                       if ((label|0) == 179) {
                        $1221 = ___cxa_find_matching_catch(-1,-1)|0;
                        $1222 = tempRet0;
                        $277 = $1221;
                        $278 = $1222;
                       }
                       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($299);
                       break L96;
                      }
                     } while(0);
                     if ((label|0) == 176) {
                      $1217 = ___cxa_find_matching_catch(-1,-1)|0;
                      $1218 = tempRet0;
                      $277 = $1217;
                      $278 = $1218;
                     }
                     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($297);
                     break L96;
                    }
                   } while(0);
                   $1225 = (($302) + 28|0);
                   $1226 = (($302) + 4|0);
                   $1227 = $nParticles;
                   $1228 = $1227<<2;
                   __THREW__ = 0;
                   $1229 = (invoke_i(2)|0);
                   $1230 = __THREW__; __THREW__ = 0;
                   $1231 = $1230&1;
                   if ($1231) {
                    label = 86;
                    break;
                   }
                   $8 = $301;
                   $9 = (2800);
                   $1232 = $8;
                   $1233 = $9;
                   $6 = $1232;
                   $7 = $1233;
                   $1234 = $6;
                   $1235 = ($1234);
                   $5 = $1235;
                   $1236 = $5;
                   $4 = $1236;
                   $1237 = $4;
                   $1238 = $1237;
                   $3 = $1238;
                   $1239 = $3;
                   $1240 = $1239;
                   $2 = $1240;
                   $1241 = $7;
                   $1242 = $7;
                   $1 = $1242;
                   $1243 = $1;
                   __THREW__ = 0;
                   $1244 = (invoke_ii(68,($1243|0))|0);
                   $1245 = __THREW__; __THREW__ = 0;
                   $1246 = $1245&1;
                   if ($1246) {
                    label = 86;
                    break;
                   }
                   __THREW__ = 0;
                   invoke_viii(5,($1234|0),($1241|0),($1244|0));
                   $1247 = __THREW__; __THREW__ = 0;
                   $1248 = $1247&1;
                   if ($1248) {
                    label = 86;
                    break;
                   }
                   __THREW__ = 0;
                   $1249 = (invoke_iiii(29,($1229|0),($301|0),(0|0))|0);
                   $1250 = __THREW__; __THREW__ = 0;
                   $1251 = $1250&1;
                   do {
                    if ($1251) {
                     label = 190;
                    } else {
                     __THREW__ = 0;
                     invoke_viiiiiii(41,($300|0),($1226|0),33,0,($1228|0),($1249|0),(0|0));
                     $1252 = __THREW__; __THREW__ = 0;
                     $1253 = $1252&1;
                     if ($1253) {
                      label = 190;
                      break;
                     }
                     __THREW__ = 0;
                     (invoke_iii(32,($1225|0),($300|0))|0);
                     $1254 = __THREW__; __THREW__ = 0;
                     $1255 = $1254&1;
                     if ($1255) {
                      $1258 = ___cxa_find_matching_catch(-1,-1)|0;
                      $1259 = tempRet0;
                      $277 = $1258;
                      $278 = $1259;
                      __ZN2cl6BufferD1Ev($300);
                      break;
                     } else {
                      __ZN2cl6BufferD1Ev($300);
                      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($301);
                      __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEED1Ev($sources);
                      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($strSrc);
                      __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ss);
                      __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
                      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($kernelFilename);
                      __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEED1Ev($devices);
                      __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEED1Ev($platforms);
                      STACKTOP = sp;return;
                     }
                    }
                   } while(0);
                   if ((label|0) == 190) {
                    $1256 = ___cxa_find_matching_catch(-1,-1)|0;
                    $1257 = tempRet0;
                    $277 = $1256;
                    $278 = $1257;
                   }
                   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($301);
                  }
                 } while(0);
                 if ((label|0) == 86) {
                  $862 = ___cxa_find_matching_catch(-1,-1)|0;
                  $863 = tempRet0;
                  $277 = $862;
                  $278 = $863;
                 }
                 __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEED1Ev($sources);
                }
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($strSrc);
               }
              } while(0);
              if ((label|0) == 84) {
               $858 = ___cxa_find_matching_catch(-1,-1)|0;
               $859 = tempRet0;
               $277 = $858;
               $278 = $859;
              }
              __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ss);
              break L60;
             }
            } while(0);
            $737 = $609;
            $738 = (($737) + 56|0);
            $739 = $738;
            __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($739);
            $740 = $194;
            $741 = $195;
            $eh$lpad$body6$index7Z2D = $741;$eh$lpad$body6$indexZ2D = $740;
            label = 52;
           }
          } while(0);
          if ((label|0) == 52) {
           $277 = $eh$lpad$body6$indexZ2D;
           $278 = $eh$lpad$body6$index7Z2D;
          }
          __ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev($file);
          break L37;
         }
        } while(0);
        $590 = ___cxa_find_matching_catch(-1,-1)|0;
        $591 = tempRet0;
        $230 = $590;
        $231 = $591;
        __ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev($513);
       }
       label = 43;
      }
     } while(0);
     if ((label|0) == 43) {
      $592 = $454;
      $593 = (($592) + 108|0);
      $594 = $593;
      __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($594);
      $595 = $230;
      $596 = $231;
      $277 = $595;
      $278 = $596;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($kernelFilename);
    }
   } while(0);
   if ((label|0) == 21) {
    $406 = ___cxa_find_matching_catch(-1,-1)|0;
    $407 = tempRet0;
    $277 = $406;
    $278 = $407;
   }
   __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEED1Ev($devices);
  }
 } while(0);
 if ((label|0) == 5) {
  $334 = ___cxa_find_matching_catch(-1,-1)|0;
  $335 = tempRet0;
  $277 = $334;
  $278 = $335;
 }
 __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEED1Ev($platforms);
 $1260 = $277;
 $1261 = $278;
 ___resumeException($1260|0);
 // unreachable;
}
function __ZNK2cl5Error3errEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN2cl8Platform3getEPNSt3__16vectorIS0_NS1_9allocatorIS0_EEEE($platforms) {
 $platforms = $platforms|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $ids = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $n = sp + 16|0;
 $2 = $platforms;
 HEAP32[$n>>2] = 0;
 $3 = (_clGetPlatformIDs(0,(0|0),($n|0))|0);
 $err = $3;
 $4 = $err;
 $5 = ($4|0)!=(0);
 if ($5) {
  $6 = $err;
  $7 = (__ZN2cl6detailL10errHandlerEiPKc($6,(3440))|0);
  $1 = $7;
  $25 = $1;
  STACKTOP = sp;return ($25|0);
 }
 $8 = HEAP32[$n>>2]|0;
 $9 = $8<<2;
 $10 = STACKTOP; STACKTOP = STACKTOP + ((((1*$9)|0)+7)&-8)|0;
 $11 = $10;
 $ids = $11;
 $12 = HEAP32[$n>>2]|0;
 $13 = $ids;
 $14 = (_clGetPlatformIDs(($12|0),($13|0),(0|0))|0);
 $err = $14;
 $15 = $err;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $err;
  $18 = (__ZN2cl6detailL10errHandlerEiPKc($17,(3440))|0);
  $1 = $18;
  $25 = $1;
  STACKTOP = sp;return ($25|0);
 } else {
  $19 = $2;
  $20 = $ids;
  $21 = ($20);
  $22 = HEAP32[$n>>2]|0;
  $23 = $ids;
  $24 = (($23) + ($22<<2)|0);
  __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE6assignIPP15_cl_platform_idEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_($19,$21,$24);
  $1 = 0;
  $25 = $1;
  STACKTOP = sp;return ($25|0);
 }
 return 0|0;
}
function __ZN2cl6detail7WrapperIP15_cl_platform_idEclEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl7ContextaSERKS0_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $rhs;
 $3 = $1;
 $4 = $2;
 $5 = ($3|0)!=($4|0);
 if (!($5)) {
  STACKTOP = sp;return ($3|0);
 }
 $6 = $3;
 $7 = $2;
 $8 = $7;
 (__ZN2cl6detail7WrapperIP11_cl_contextEaSERKS4_($6,$8)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl7ContextC1EyPiPFvPKcPKvjPvES6_S1_($this,$1,$2,$properties,$notifyFptr,$data,$err) {
 $this = $this|0;
 $1 = $1|0;
 $2 = $2|0;
 $properties = $properties|0;
 $notifyFptr = $notifyFptr|0;
 $data = $data|0;
 $err = $err|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $4 = sp + 8|0;
 $3 = $this;
 $9 = $4;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $2;
 $5 = $properties;
 $6 = $notifyFptr;
 $7 = $data;
 $8 = $err;
 $13 = $3;
 $14 = $4;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = $5;
 $21 = $6;
 $22 = $7;
 $23 = $8;
 __ZN2cl7ContextC2EyPiPFvPKcPKvjPvES6_S1_($13,$16,$19,$20,$21,$22,$23);
 STACKTOP = sp;return;
}
function __ZNK2cl7Context7getInfoILi4225EEENS_6detail12param_traitsINS2_15cl_context_infoEXT_EE10param_typeEPi($agg$result,$this,$err) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $err = $err|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $4 = sp + 24|0;
 $7 = sp + 48|0;
 $14 = $this;
 $15 = $err;
 $20 = $14;
 $$expand_i1_val = 0;
 $16 = $$expand_i1_val;
 $13 = $agg$result;
 $21 = $13;
 $12 = $21;
 $22 = $12;
 $23 = $22;
 $11 = $23;
 $24 = $11;
 $25 = $24;
 $10 = $25;
 $26 = ($24);
 HEAP32[$26>>2] = 0;
 $27 = (($24) + 4|0);
 HEAP32[$27>>2] = 0;
 $28 = (($24) + 8|0);
 $8 = $28;
 $9 = 0;
 $29 = $8;
 $30 = $9;
 $6 = $29;
 HEAP32[$7>>2] = $30;
 $31 = $6;
 $32 = $31;
 $5 = $7;
 $33 = $5;
 $34 = HEAP32[$33>>2]|0;
 $3 = $32;
 HEAP32[$4>>2] = $34;
 $35 = $3;
 $36 = $35;
 $2 = $36;
 $37 = ($35);
 $1 = $4;
 $38 = $1;
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$37>>2] = $39;
 __THREW__ = 0;
 $40 = (invoke_iiii(31,($20|0),4225,($agg$result|0))|0);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $47 = ___cxa_find_matching_catch(-1,-1)|0;
  $48 = tempRet0;
  $17 = $47;
  $18 = $48;
  __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEED1Ev($agg$result);
  $50 = $17;
  $51 = $18;
  ___resumeException($50|0);
  // unreachable;
 }
 $result = $40;
 $43 = $15;
 $44 = ($43|0)!=(0|0);
 if ($44) {
  $45 = $result;
  $46 = $15;
  HEAP32[$46>>2] = $45;
 }
 $$expand_i1_val2 = 1;
 $16 = $$expand_i1_val2;
 $19 = 1;
 $$pre_trunc = $16;
 $49 = $$pre_trunc&1;
 if ($49) {
  STACKTOP = sp;return;
 }
 __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEED1Ev($agg$result);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEEC1EjRKS4_($this,$__n,$__x) {
 $this = $this|0;
 $__n = $__n|0;
 $__x = $__x|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 $1 = $this;
 $2 = $__n;
 $3 = $__x;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEEC2EjRKS4_($4,$5,$6);
 STACKTOP = sp;return;
}
function __ZN2cl7ProgramaSERKS0_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $rhs;
 $3 = $1;
 $4 = $2;
 $5 = ($3|0)!=($4|0);
 if (!($5)) {
  STACKTOP = sp;return ($3|0);
 }
 $6 = $3;
 $7 = $2;
 $8 = $7;
 (__ZN2cl6detail7WrapperIP11_cl_programEaSERKS4_($6,$8)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl7ProgramC1ERKNS_7ContextERKNSt3__16vectorINS4_4pairIPKcjEENS4_9allocatorIS9_EEEEPi($this,$context,$sources,$err) {
 $this = $this|0;
 $context = $context|0;
 $sources = $sources|0;
 $err = $err|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $this;
 $2 = $context;
 $3 = $sources;
 $4 = $err;
 $5 = $1;
 $6 = $4;
 $7 = $2;
 $8 = $3;
 __ZN2cl7ProgramC2ERKNS_7ContextERKNSt3__16vectorINS4_4pairIPKcjEENS4_9allocatorIS9_EEEEPi($5,$7,$8,$6);
 STACKTOP = sp;return;
}
function __ZNK2cl7Program5buildERKNSt3__16vectorINS_6DeviceENS1_9allocatorIS3_EEEEPKcPFvP11_cl_programPvESD_($this,$devices,$options,$notifyFptr,$data) {
 $this = $this|0;
 $devices = $devices|0;
 $options = $options|0;
 $notifyFptr = $notifyFptr|0;
 $data = $data|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 56|0;
 $3 = $this;
 $4 = $devices;
 $5 = $options;
 $6 = $notifyFptr;
 $7 = $data;
 $8 = $3;
 $9 = $8;
 $10 = ($9);
 $11 = HEAP32[$10>>2]|0;
 $12 = $4;
 $2 = $12;
 $13 = $2;
 $14 = $13;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $13;
 $18 = ($17);
 $19 = HEAP32[$18>>2]|0;
 $20 = $16;
 $21 = $19;
 $22 = (($20) - ($21))|0;
 $23 = (($22|0) / 4)&-1;
 $24 = $4;
 $1 = $24;
 $25 = $1;
 $26 = $25;
 $27 = ($26);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28;
 $30 = $5;
 $31 = $6;
 $32 = $7;
 $33 = (_clBuildProgram(($11|0),($23|0),($29|0),($30|0),($31|0),($32|0))|0);
 $34 = (__ZN2cl6detailL10errHandlerEiPKc($33,(3368))|0);
 STACKTOP = sp;return ($34|0);
}
function __ZNK2cl7Program12getBuildInfoILi4483EEENS_6detail12param_traitsINS2_21cl_program_build_infoEXT_EE10param_typeERKNS_6DeviceEPi($agg$result,$this,$device,$err) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $device = $device|0;
 $err = $err|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, $result = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 152|0;
 $10 = $this;
 $11 = $device;
 $12 = $err;
 $17 = $10;
 $$expand_i1_val = 0;
 $13 = $$expand_i1_val;
 $9 = $agg$result;
 $18 = $9;
 $8 = $18;
 $19 = $8;
 $20 = ($19);
 $7 = $20;
 $21 = $7;
 $6 = $21;
 $22 = $6;
 $23 = $22;
 $5 = $23;
 $24 = $5;
 $25 = $24;
 $4 = $25;
 $3 = $19;
 $26 = $3;
 $27 = ($26);
 $2 = $27;
 $28 = $2;
 $29 = $28;
 $1 = $29;
 $30 = $1;
 $31 = ($30);
 $32 = ($31);
 $33 = $32;
 $34 = ($33);
 $__a$i$i$i = $34;
 $__i$i$i$i = 0;
 while(1) {
  $35 = $__i$i$i$i;
  $36 = ($35>>>0)<(3);
  if (!($36)) {
   break;
  }
  $37 = $__i$i$i$i;
  $38 = $__a$i$i$i;
  $39 = (($38) + ($37<<2)|0);
  HEAP32[$39>>2] = 0;
  $40 = $__i$i$i$i;
  $41 = (($40) + 1)|0;
  $__i$i$i$i = $41;
 }
 $42 = $11;
 __THREW__ = 0;
 $43 = (invoke_iiiii(6,($17|0),($42|0),4483,($agg$result|0))|0);
 $44 = __THREW__; __THREW__ = 0;
 $45 = $44&1;
 if ($45) {
  $50 = ___cxa_find_matching_catch(-1,-1)|0;
  $51 = tempRet0;
  $14 = $50;
  $15 = $51;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg$result);
  $53 = $14;
  $54 = $15;
  ___resumeException($53|0);
  // unreachable;
 }
 $result = $43;
 $46 = $12;
 $47 = ($46|0)!=(0|0);
 if ($47) {
  $48 = $result;
  $49 = $12;
  HEAP32[$49>>2] = $48;
 }
 $$expand_i1_val2 = 1;
 $13 = $$expand_i1_val2;
 $16 = 1;
 $$pre_trunc = $13;
 $52 = $$pre_trunc&1;
 if ($52) {
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg$result);
 STACKTOP = sp;return;
}
function __ZN2cl5ErrorC1ERKS0_($this,$1) {
 $this = $this|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = $this;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 __ZN2cl5ErrorC2ERKS0_($4,$5);
 STACKTOP = sp;return;
}
function __ZN2cl5ErrorD1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN2cl5ErrorD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl6KernelaSERKS0_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $rhs;
 $3 = $1;
 $4 = $2;
 $5 = ($3|0)!=($4|0);
 if (!($5)) {
  STACKTOP = sp;return ($3|0);
 }
 $6 = $3;
 $7 = $2;
 $8 = $7;
 (__ZN2cl6detail7WrapperIP10_cl_kernelEaSERKS4_($6,$8)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl6KernelC1ERKNS_7ProgramEPKcPi($this,$program,$name,$err) {
 $this = $this|0;
 $program = $program|0;
 $name = $name|0;
 $err = $err|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $this;
 $2 = $program;
 $3 = $name;
 $4 = $err;
 $5 = $1;
 $6 = $3;
 $7 = $4;
 $8 = $2;
 __ZN2cl6KernelC2ERKNS_7ProgramEPKcPi($5,$8,$6,$7);
 STACKTOP = sp;return;
}
function __ZN2cl12CommandQueueaSERKS0_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $rhs;
 $3 = $1;
 $4 = $2;
 $5 = ($3|0)!=($4|0);
 if (!($5)) {
  STACKTOP = sp;return ($3|0);
 }
 $6 = $3;
 $7 = $2;
 $8 = $7;
 (__ZN2cl6detail7WrapperIP17_cl_command_queueEaSERKS4_($6,$8)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl12CommandQueueC1ERKNS_7ContextERKNS_6DeviceEyPi($this,$context,$device,$1,$2,$err) {
 $this = $this|0;
 $context = $context|0;
 $device = $device|0;
 $1 = $1|0;
 $2 = $2|0;
 $err = $err|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $6 = sp + 24|0;
 $3 = $this;
 $4 = $context;
 $5 = $device;
 $8 = $6;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $2;
 $7 = $err;
 $12 = $3;
 $13 = $6;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = $7;
 $20 = $4;
 $21 = $5;
 __ZN2cl12CommandQueueC2ERKNS_7ContextERKNS_6DeviceEyPi($12,$20,$21,$15,$18,$19);
 STACKTOP = sp;return;
}
function __ZN2cl6BufferaSERKS0_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $rhs;
 $3 = $1;
 $4 = $2;
 $5 = ($3|0)!=($4|0);
 if (!($5)) {
  STACKTOP = sp;return ($3|0);
 }
 $6 = $3;
 $7 = $2;
 $8 = $7;
 (__ZN2cl6MemoryaSERKS0_($6,$8)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl8BufferGLC1ERKNS_7ContextEyjPi($this,$context,$1,$2,$bufobj,$err) {
 $this = $this|0;
 $context = $context|0;
 $1 = $1|0;
 $2 = $2|0;
 $bufobj = $bufobj|0;
 $err = $err|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $5 = sp + 16|0;
 $3 = $this;
 $4 = $context;
 $8 = $5;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $10 = (($8) + 4)|0;
 $11 = $10;
 HEAP32[$11>>2] = $2;
 $6 = $bufobj;
 $7 = $err;
 $12 = $3;
 $13 = $5;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 4)|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = $6;
 $20 = $7;
 $21 = $4;
 __ZN2cl8BufferGLC2ERKNS_7ContextEyjPi($12,$21,$15,$18,$19,$20);
 STACKTOP = sp;return;
}
function __ZNK10Parameters9getGLuintERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj($this,$key,$def) {
 $this = $this|0;
 $key = $key|0;
 $def = $def|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $__i1$i$i = 0, $__i1$i$i1 = 0, $it = 0, $tmp$i = 0, $tmp$i$i = 0, $tmp$i$i4 = 0, $tmp$i2 = 0, $tmp1$i = 0, $tmp1$i3 = 0, $tmp2$i$i = 0;
 var $tmp2$i$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $__i1$i$i1 = sp + 104|0;
 $15 = sp + 120|0;
 $22 = sp + 176|0;
 $__i1$i$i = sp + 192|0;
 $25 = sp + 208|0;
 $28 = sp + 232|0;
 $it = sp + 272|0;
 $33 = sp + 280|0;
 $30 = $this;
 $31 = $key;
 $32 = $def;
 $34 = $30;
 $35 = (($34) + 20|0);
 $36 = $31;
 $26 = $35;
 $27 = $36;
 $37 = $26;
 $38 = ($37);
 $39 = $27;
 __ZNKSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE4findIS7_EENS_21__hash_const_iteratorIPNS_11__hash_nodeIS8_PvEEEERKT_($28,$38,$39);
 $tmp$i = $25;
 $tmp1$i = $28;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;HEAP8[$tmp$i+1|0]=HEAP8[$tmp1$i+1|0]|0;HEAP8[$tmp$i+2|0]=HEAP8[$tmp1$i+2|0]|0;HEAP8[$tmp$i+3|0]=HEAP8[$tmp1$i+3|0]|0;
 $24 = $it;
 $40 = $24;
 $tmp$i$i = $__i1$i$i;
 $tmp2$i$i = $25;
 ;HEAP8[$tmp$i$i+0|0]=HEAP8[$tmp2$i$i+0|0]|0;HEAP8[$tmp$i$i+1|0]=HEAP8[$tmp2$i$i+1|0]|0;HEAP8[$tmp$i$i+2|0]=HEAP8[$tmp2$i$i+2|0]|0;HEAP8[$tmp$i$i+3|0]=HEAP8[$tmp2$i$i+3|0]|0;
 $23 = $40;
 $41 = $23;
 $42 = ($41);
 $43 = $42;
 $44 = $__i1$i$i;
 ;HEAP32[$43+0>>2]=HEAP32[$44+0>>2]|0;
 $45 = (($34) + 20|0);
 $21 = $45;
 $46 = $21;
 $47 = ($46);
 $20 = $47;
 $18 = $22;
 $19 = 0;
 $48 = $18;
 $49 = $19;
 $16 = $48;
 $17 = $49;
 $50 = $16;
 $51 = ($50);
 $52 = $17;
 HEAP32[$51>>2] = $52;
 $tmp$i2 = $15;
 $tmp1$i3 = $22;
 ;HEAP8[$tmp$i2+0|0]=HEAP8[$tmp1$i3+0|0]|0;HEAP8[$tmp$i2+1|0]=HEAP8[$tmp1$i3+1|0]|0;HEAP8[$tmp$i2+2|0]=HEAP8[$tmp1$i3+2|0]|0;HEAP8[$tmp$i2+3|0]=HEAP8[$tmp1$i3+3|0]|0;
 $14 = $33;
 $53 = $14;
 $tmp$i$i4 = $__i1$i$i1;
 $tmp2$i$i5 = $15;
 ;HEAP8[$tmp$i$i4+0|0]=HEAP8[$tmp2$i$i5+0|0]|0;HEAP8[$tmp$i$i4+1|0]=HEAP8[$tmp2$i$i5+1|0]|0;HEAP8[$tmp$i$i4+2|0]=HEAP8[$tmp2$i$i5+2|0]|0;HEAP8[$tmp$i$i4+3|0]=HEAP8[$tmp2$i$i5+3|0]|0;
 $13 = $53;
 $54 = $13;
 $55 = ($54);
 $56 = $55;
 $57 = $__i1$i$i1;
 ;HEAP32[$56+0>>2]=HEAP32[$57+0>>2]|0;
 $5 = $it;
 $6 = $33;
 $58 = $5;
 $59 = ($58);
 $60 = $6;
 $61 = ($60);
 $3 = $59;
 $4 = $61;
 $62 = $3;
 $63 = $4;
 $1 = $62;
 $2 = $63;
 $64 = $1;
 $65 = ($64);
 $66 = HEAP32[$65>>2]|0;
 $67 = $2;
 $68 = ($67);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($66|0)==($69|0);
 $71 = $70 ^ 1;
 if ($71) {
  $12 = $it;
  $72 = $12;
  $73 = ($72);
  $11 = $73;
  $74 = $11;
  $75 = ($74);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + 8|0);
  $10 = $77;
  $78 = $10;
  $9 = $78;
  $79 = $9;
  $80 = $79;
  $81 = $80;
  $82 = $81;
  $8 = $82;
  $83 = $8;
  $7 = $83;
  $84 = $7;
  $85 = $84;
  $86 = $85;
  $87 = (($86) + 12|0);
  $88 = HEAP32[$87>>2]|0;
  $29 = $88;
  $90 = $29;
  STACKTOP = sp;return ($90|0);
 } else {
  $89 = $32;
  $29 = $89;
  $90 = $29;
  STACKTOP = sp;return ($90|0);
 }
 return 0|0;
}
function __ZN2cl8BufferGLD1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN2cl8BufferGLD2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__v = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 136|0;
 $__v = sp + 96|0;
 $10 = $this;
 $11 = $__n;
 $14 = $10;
 $15 = $11;
 $9 = $14;
 $16 = $9;
 $17 = $16;
 $8 = $17;
 $18 = $8;
 $7 = $18;
 $19 = $7;
 $20 = (($19) + 8|0);
 $6 = $20;
 $21 = $6;
 $22 = $21;
 $5 = $22;
 $23 = $5;
 $24 = ($23);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($18);
 $27 = HEAP32[$26>>2]|0;
 $28 = $25;
 $29 = $27;
 $30 = (($28) - ($29))|0;
 $31 = (($30|0) / 4)&-1;
 $32 = ($15>>>0)>($31>>>0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $33 = $14;
 $4 = $33;
 $34 = $4;
 $35 = (($34) + 8|0);
 $3 = $35;
 $36 = $3;
 $37 = $36;
 $2 = $37;
 $38 = $2;
 $39 = $38;
 $__a = $39;
 $40 = $11;
 $1 = $14;
 $41 = $1;
 $42 = $41;
 $43 = (($42) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $41;
 $46 = ($45);
 $47 = HEAP32[$46>>2]|0;
 $48 = $44;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $52 = $__a;
 __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEEC1EjjS5_($__v,$40,$51,$52);
 __THREW__ = 0;
 invoke_vii(70,($14|0),($__v|0));
 $53 = __THREW__; __THREW__ = 0;
 $54 = $53&1;
 if ($54) {
  $55 = ___cxa_find_matching_catch(-1,-1)|0;
  $56 = tempRet0;
  $12 = $55;
  $13 = $56;
  __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEED1Ev($__v);
  $57 = $12;
  $58 = $13;
  ___resumeException($57|0);
  // unreachable;
 } else {
  __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEED1Ev($__v);
  STACKTOP = sp;return;
 }
}
function __ZN2cl6BufferC1ERKNS_7ContextEyjPvPi($this,$context,$1,$2,$size,$host_ptr,$err) {
 $this = $this|0;
 $context = $context|0;
 $1 = $1|0;
 $2 = $2|0;
 $size = $size|0;
 $host_ptr = $host_ptr|0;
 $err = $err|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $5 = sp + 16|0;
 $3 = $this;
 $4 = $context;
 $9 = $5;
 $10 = $9;
 HEAP32[$10>>2] = $1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = $2;
 $6 = $size;
 $7 = $host_ptr;
 $8 = $err;
 $13 = $3;
 $14 = $5;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = $6;
 $21 = $7;
 $22 = $8;
 $23 = $4;
 __ZN2cl6BufferC2ERKNS_7ContextEyjPvPi($13,$23,$16,$19,$20,$21,$22);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = (2992);
 __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($2,$3);
 $4 = $2;
 $5 = (($4) + 56|0);
 $6 = $5;
 __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($6);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN27LorenzAttractorOpenCLSolver4stepEff($this,$time,$deltaTime) {
 $this = $this|0;
 $time = +$time;
 $deltaTime = +$deltaTime;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0;
 var $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i$i$i$i = 0, $__a$i$i$i1$i$i$i = 0, $__i$i$i$i$i$i$i = 0, $__i$i$i$i2$i$i$i = 0, $e = 0, $ss = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 720|0;
 $39 = sp + 336|0;
 $ss = sp + 560|0;
 $65 = sp + 704|0;
 $60 = $this;
 $61 = $time;
 $62 = $deltaTime;
 $66 = $60;
 $67 = $61;
 $68 = $62;
 __THREW__ = 0;
 invoke_vidd(2,($66|0),(+$67),(+$68));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if (!($70)) {
  STACKTOP = sp;return;
 }
 $71 = ___cxa_find_matching_catch(-1,-1,(2488)|0)|0;
 $72 = tempRet0;
 $63 = $71;
 $64 = $72;
 $73 = $64;
 $74 = (_llvm_eh_typeid_for(((2488)|0))|0);
 $75 = ($73|0)==($74|0);
 if (!($75)) {
  $342 = $63;
  $343 = $64;
  ___resumeException($342|0);
  // unreachable;
 }
 $76 = $63;
 $77 = (___cxa_begin_catch(($76|0))|0);
 $78 = $77;
 $e = $78;
 $56 = $ss;
 $57 = 24;
 $79 = $56;
 $80 = $79;
 $81 = (($80) + 64|0);
 $82 = $81;
 $55 = $82;
 $83 = $55;
 $84 = $83;
 $54 = $84;
 $85 = $54;
 $86 = $85;
 $87 = ((6704) + 8|0);
 HEAP32[$86>>2] = $87;
 $88 = $83;
 $89 = ((6304) + 8|0);
 HEAP32[$88>>2] = $89;
 $90 = $79;
 $91 = ((656) + 12|0);
 HEAP32[$90>>2] = $91;
 $92 = $79;
 $93 = (($92) + 64|0);
 $94 = $93;
 $95 = ((656) + 52|0);
 HEAP32[$94>>2] = $95;
 $96 = $79;
 $97 = (($96) + 8|0);
 $98 = $97;
 $99 = ((656) + 32|0);
 HEAP32[$98>>2] = $99;
 $100 = $79;
 $101 = (($79) + 12|0);
 $102 = $101;
 $51 = $100;
 $103 = ((720) + 4|0);
 $52 = $103;
 $53 = $102;
 $104 = $51;
 $105 = $52;
 $106 = $104;
 $107 = (($105) + 4|0);
 $108 = $53;
 $48 = $106;
 $49 = $107;
 $50 = $108;
 $109 = $48;
 $110 = $49;
 $111 = HEAP32[$110>>2]|0;
 $112 = $109;
 HEAP32[$112>>2] = $111;
 $113 = (($110) + 4|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $109;
 $116 = HEAP32[$115>>2]|0;
 $117 = (($116) + -12|0);
 $118 = $117;
 $119 = HEAP32[$118>>2]|0;
 $120 = $109;
 $121 = (($120) + ($119)|0);
 $122 = $121;
 HEAP32[$122>>2] = $114;
 $123 = (($109) + 4|0);
 HEAP32[$123>>2] = 0;
 $124 = $109;
 $125 = HEAP32[$124>>2]|0;
 $126 = (($125) + -12|0);
 $127 = $126;
 $128 = HEAP32[$127>>2]|0;
 $129 = $109;
 $130 = (($129) + ($128)|0);
 $131 = $130;
 $132 = $50;
 $46 = $131;
 $47 = $132;
 $133 = $46;
 $134 = $133;
 $135 = $47;
 $136 = $135;
 __THREW__ = 0;
 invoke_vii(44,($134|0),($136|0));
 $137 = __THREW__; __THREW__ = 0;
 $138 = $137&1;
 do {
  if ($138) {
   $253 = ___cxa_find_matching_catch(-1,-1)|0;
   $254 = tempRet0;
   $58 = $253;
   $59 = $254;
   label = 15;
  } else {
   $139 = (($133) + 72|0);
   HEAP32[$139>>2] = 0;
   $140 = (($133) + 76|0);
   HEAP32[$140>>2] = -1;
   $141 = $104;
   $142 = (($141) + 8|0);
   $143 = $142;
   $144 = (($105) + 12|0);
   $44 = $143;
   $45 = $144;
   $145 = $44;
   $146 = $45;
   $147 = HEAP32[$146>>2]|0;
   $148 = $145;
   HEAP32[$148>>2] = $147;
   $149 = (($146) + 4|0);
   $150 = HEAP32[$149>>2]|0;
   $151 = $145;
   $152 = HEAP32[$151>>2]|0;
   $153 = (($152) + -12|0);
   $154 = $153;
   $155 = HEAP32[$154>>2]|0;
   $156 = $145;
   $157 = (($156) + ($155)|0);
   $158 = $157;
   HEAP32[$158>>2] = $150;
   $159 = HEAP32[$105>>2]|0;
   $160 = $104;
   HEAP32[$160>>2] = $159;
   $161 = (($105) + 20|0);
   $162 = HEAP32[$161>>2]|0;
   $163 = $104;
   $164 = HEAP32[$163>>2]|0;
   $165 = (($164) + -12|0);
   $166 = $165;
   $167 = HEAP32[$166>>2]|0;
   $168 = $104;
   $169 = (($168) + ($167)|0);
   $170 = $169;
   HEAP32[$170>>2] = $162;
   $171 = (($105) + 24|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = $104;
   $174 = (($173) + 8|0);
   $175 = $174;
   HEAP32[$175>>2] = $172;
   $176 = $79;
   $177 = ((656) + 12|0);
   HEAP32[$176>>2] = $177;
   $178 = $79;
   $179 = (($178) + 64|0);
   $180 = $179;
   $181 = ((656) + 52|0);
   HEAP32[$180>>2] = $181;
   $182 = $79;
   $183 = (($182) + 8|0);
   $184 = $183;
   $185 = ((656) + 32|0);
   HEAP32[$184>>2] = $185;
   $186 = (($79) + 12|0);
   $187 = $57;
   $42 = $186;
   $43 = $187;
   $188 = $42;
   $189 = $43;
   $37 = $188;
   $38 = $189;
   $190 = $37;
   $191 = $190;
   __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($191);
   $192 = $190;
   $193 = ((992) + 8|0);
   HEAP32[$192>>2] = $193;
   $194 = (($190) + 32|0);
   $36 = $194;
   $195 = $36;
   $35 = $195;
   $196 = $35;
   $197 = ($196);
   $34 = $197;
   $198 = $34;
   $33 = $198;
   $199 = $33;
   $200 = $199;
   $32 = $200;
   $201 = $32;
   $202 = $201;
   $31 = $202;
   $30 = $196;
   $203 = $30;
   $204 = ($203);
   $29 = $204;
   $205 = $29;
   $206 = $205;
   $28 = $206;
   $207 = $28;
   $208 = ($207);
   $209 = ($208);
   $210 = $209;
   $211 = ($210);
   $__a$i$i$i$i$i$i = $211;
   $__i$i$i$i$i$i$i = 0;
   while(1) {
    $212 = $__i$i$i$i$i$i$i;
    $213 = ($212>>>0)<(3);
    if (!($213)) {
     break;
    }
    $214 = $__i$i$i$i$i$i$i;
    $215 = $__a$i$i$i$i$i$i;
    $216 = (($215) + ($214<<2)|0);
    HEAP32[$216>>2] = 0;
    $217 = $__i$i$i$i$i$i$i;
    $218 = (($217) + 1)|0;
    $__i$i$i$i$i$i$i = $218;
   }
   $219 = (($190) + 44|0);
   HEAP32[$219>>2] = 0;
   $220 = (($190) + 48|0);
   $221 = $38;
   HEAP32[$220>>2] = $221;
   $27 = $39;
   $222 = $27;
   $26 = $222;
   $223 = $26;
   $224 = ($223);
   $25 = $224;
   $225 = $25;
   $24 = $225;
   $226 = $24;
   $227 = $226;
   $23 = $227;
   $228 = $23;
   $229 = $228;
   $22 = $229;
   $21 = $223;
   $230 = $21;
   $231 = ($230);
   $20 = $231;
   $232 = $20;
   $233 = $232;
   $19 = $233;
   $234 = $19;
   $235 = ($234);
   $236 = ($235);
   $237 = $236;
   $238 = ($237);
   $__a$i$i$i1$i$i$i = $238;
   $__i$i$i$i2$i$i$i = 0;
   while(1) {
    $239 = $__i$i$i$i2$i$i$i;
    $240 = ($239>>>0)<(3);
    if (!($240)) {
     break;
    }
    $241 = $__i$i$i$i2$i$i$i;
    $242 = $__a$i$i$i1$i$i$i;
    $243 = (($242) + ($241<<2)|0);
    HEAP32[$243>>2] = 0;
    $244 = $__i$i$i$i2$i$i$i;
    $245 = (($244) + 1)|0;
    $__i$i$i$i2$i$i$i = $245;
   }
   __THREW__ = 0;
   invoke_vii(45,($190|0),($39|0));
   $246 = __THREW__; __THREW__ = 0;
   $247 = $246&1;
   if ($247) {
    $248 = ___cxa_find_matching_catch(-1,-1)|0;
    $249 = tempRet0;
    $40 = $248;
    $41 = $249;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($39);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($194);
    $250 = $190;
    __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($250);
    $251 = $40;
    $252 = $41;
    $58 = $251;
    $59 = $252;
    label = 15;
    break;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($39);
   $260 = $ss;
   $261 = (($260) + 8|0);
   $262 = $261;
   __THREW__ = 0;
   $263 = (invoke_iii(21,($262|0),((2504)|0))|0);
   $264 = __THREW__; __THREW__ = 0;
   $265 = $264&1;
   do {
    if ($265) {
     label = 33;
    } else {
     $266 = $e;
     $267 = $266;
     $268 = HEAP32[$267>>2]|0;
     $269 = (($268) + 8|0);
     $270 = HEAP32[$269>>2]|0;
     $271 = (FUNCTION_TABLE_ii[$270 & 127]($266)|0);
     __THREW__ = 0;
     $272 = (invoke_iii(21,($263|0),($271|0))|0);
     $273 = __THREW__; __THREW__ = 0;
     $274 = $273&1;
     if ($274) {
      label = 33;
      break;
     }
     __THREW__ = 0;
     $275 = (invoke_iii(21,($272|0),((2520)|0))|0);
     $276 = __THREW__; __THREW__ = 0;
     $277 = $276&1;
     if ($277) {
      label = 33;
      break;
     }
     $278 = $e;
     __THREW__ = 0;
     $279 = (invoke_ii(73,($278|0))|0);
     $280 = __THREW__; __THREW__ = 0;
     $281 = $280&1;
     if ($281) {
      label = 33;
      break;
     }
     __THREW__ = 0;
     $282 = (invoke_iii(22,($275|0),($279|0))|0);
     $283 = __THREW__; __THREW__ = 0;
     $284 = $283&1;
     if ($284) {
      label = 33;
      break;
     }
     $17 = $282;
     $18 = 69;
     $285 = $17;
     $286 = $18;
     __THREW__ = 0;
     (invoke_ii($286|0,($285|0))|0);
     $287 = __THREW__; __THREW__ = 0;
     $288 = $287&1;
     if ($288) {
      label = 33;
      break;
     }
     $16 = $ss;
     $289 = $16;
     $290 = (($289) + 12|0);
     __THREW__ = 0;
     invoke_vii(46,($65|0),($290|0));
     $291 = __THREW__; __THREW__ = 0;
     $292 = $291&1;
     if ($292) {
      label = 33;
      break;
     }
     $15 = $65;
     $293 = $15;
     $14 = $293;
     $294 = $14;
     $13 = $294;
     $295 = $13;
     $12 = $295;
     $296 = $12;
     $297 = ($296);
     $11 = $297;
     $298 = $11;
     $299 = $298;
     $10 = $299;
     $300 = $10;
     $301 = ($300);
     $302 = ($301);
     $303 = $302;
     $304 = ($303);
     $305 = $304;
     $306 = HEAP8[$305]|0;
     $307 = $306&255;
     $308 = $307 & 1;
     $309 = ($308|0)!=(0);
     if ($309) {
      $4 = $295;
      $310 = $4;
      $311 = ($310);
      $3 = $311;
      $312 = $3;
      $313 = $312;
      $2 = $313;
      $314 = $2;
      $315 = ($314);
      $316 = ($315);
      $317 = $316;
      $318 = (($317) + 8|0);
      $319 = HEAP32[$318>>2]|0;
      $332 = $319;
     } else {
      $9 = $295;
      $320 = $9;
      $321 = ($320);
      $8 = $321;
      $322 = $8;
      $323 = $322;
      $7 = $323;
      $324 = $7;
      $325 = ($324);
      $326 = ($325);
      $327 = $326;
      $328 = (($327) + 1|0);
      $329 = ($328);
      $6 = $329;
      $330 = $6;
      $5 = $330;
      $331 = $5;
      $332 = $331;
     }
     $1 = $332;
     $333 = $1;
     __THREW__ = 0;
     invoke_viii(4,($333|0),((2528)|0),172);
     $334 = __THREW__; __THREW__ = 0;
     $335 = $334&1;
     if ($335) {
      $338 = ___cxa_find_matching_catch(-1,-1)|0;
      $339 = tempRet0;
      $63 = $338;
      $64 = $339;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($65);
      break;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($65);
     __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ss);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    }
   } while(0);
   if ((label|0) == 33) {
    $336 = ___cxa_find_matching_catch(-1,-1)|0;
    $337 = tempRet0;
    $63 = $336;
    $64 = $337;
   }
   __ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($ss);
  }
 } while(0);
 if ((label|0) == 15) {
  $255 = $79;
  $256 = (($255) + 64|0);
  $257 = $256;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($257);
  $258 = $58;
  $259 = $59;
  $63 = $258;
  $64 = $259;
 }
 __THREW__ = 0;
 invoke_v(5);
 $340 = __THREW__; __THREW__ = 0;
 $341 = $340&1;
 if ($341) {
  $344 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($344);
  // unreachable;
 }
 $342 = $63;
 $343 = $64;
 ___resumeException($342|0);
 // unreachable;
}
function __ZN27LorenzAttractorOpenCLSolver6__stepEff($this,$time,$deltaTime) {
 $this = $this|0;
 $time = +$time;
 $deltaTime = +$deltaTime;
 var $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0.0;
 var $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0;
 var $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $bInterop = 0, $baseColor = 0, $nParticles = 0, $par = 0, $rayDir = 0, $rayOrigin = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 520|0;
 $40 = sp + 320|0;
 $baseColor = sp + 352|0;
 $par = sp + 368|0;
 $43 = sp + 392|0;
 $rayOrigin = sp + 408|0;
 $rayDir = sp + 424|0;
 $44 = sp + 440|0;
 $45 = sp + 448|0;
 $46 = sp + 456|0;
 $47 = sp + 464|0;
 $48 = sp + 488|0;
 $49 = sp + 504|0;
 $37 = $this;
 $38 = $time;
 $39 = $deltaTime;
 $50 = $37;
 $51 = (__ZN6global3parEv()|0);
 $35 = $40;
 $36 = (2728);
 $52 = $35;
 $53 = $36;
 $33 = $52;
 $34 = $53;
 $54 = $33;
 $55 = ($54);
 $32 = $55;
 $56 = $32;
 $31 = $56;
 $57 = $31;
 $58 = $57;
 $30 = $58;
 $59 = $30;
 $60 = $59;
 $29 = $60;
 $61 = $34;
 $62 = $34;
 $28 = $62;
 $63 = $28;
 $64 = (_strlen(($63|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($54,$61,$64);
 __THREW__ = 0;
 $65 = (invoke_iiii(24,($51|0),($40|0),0)|0);
 $66 = __THREW__; __THREW__ = 0;
 $67 = $66&1;
 if ($67) {
  $145 = ___cxa_find_matching_catch(-1,-1)|0;
  $146 = tempRet0;
  $41 = $145;
  $42 = $146;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($40);
  $252 = $41;
  $253 = $42;
  ___resumeException($252|0);
  // unreachable;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($40);
 $nParticles = $65;
 $68 = ($baseColor);
 $69 = $38;
 $70 = $69 * 0.109999999403953552246;
 $71 = (+Math_sin((+$70)));
 $72 = 0.20000000298023223877 * $71;
 $73 = 0.5 + $72;
 HEAPF32[$68>>2] = $73;
 $74 = (($68) + 4|0);
 $75 = $38;
 $76 = $75 * 0.140000000596046447754;
 $77 = (+Math_sin((+$76)));
 $78 = 0.20000000298023223877 * $77;
 $79 = 0.5 + $78;
 HEAPF32[$74>>2] = $79;
 $80 = (($74) + 4|0);
 $81 = $38;
 $82 = $81 * 0.189999997615814208984;
 $83 = (+Math_cos((+$82)));
 $84 = 0.20000000298023223877 * $83;
 $85 = 0.5 + $84;
 HEAPF32[$80>>2] = $85;
 $86 = (($80) + 4|0);
 $87 = $nParticles;
 $88 = (($87|0) / 1000000)&-1;
 $89 = (+($88|0));
 $90 = 1.0 + $89;
 $91 = 0.5 / $90;
 HEAPF32[$86>>2] = $91;
 $92 = ($par);
 $93 = $38;
 $94 = $93 * 0.100000001490116119385;
 $95 = (+Math_sin((+$94)));
 $96 = 10.0 * $95;
 $97 = $38;
 $98 = $97 * 0.27000001072883605957;
 $99 = (+Math_cos((+$98)));
 $100 = $96 * $99;
 $101 = 15.0 + $100;
 HEAPF32[$92>>2] = $101;
 $102 = (($92) + 4|0);
 $103 = $38;
 $104 = $103 * 0.129999995231628417969;
 $105 = (+Math_sin((+$104)));
 $106 = 2.0 * $105;
 $107 = $38;
 $108 = $107 * 0.230000004172325134277;
 $109 = (+Math_cos((+$108)));
 $110 = $106 * $109;
 $111 = 2.66666674613952636719 + $110;
 HEAPF32[$102>>2] = $111;
 $112 = (($102) + 4|0);
 $113 = $38;
 $114 = $113 * 0.170000001788139343262;
 $115 = (+Math_sin((+$114)));
 $116 = 5.0 * $115;
 $117 = $38;
 $118 = $117 * 0.109999999403953552246;
 $119 = (+Math_cos((+$118)));
 $120 = $116 * $119;
 $121 = 28.0 + $120;
 HEAPF32[$112>>2] = $121;
 $122 = (($112) + 4|0);
 HEAPF32[$122>>2] = 0.0500000007450580596924;
 $123 = (__ZN6global3parEv()|0);
 $26 = $43;
 $27 = (2744);
 $124 = $26;
 $125 = $27;
 $24 = $124;
 $25 = $125;
 $126 = $24;
 $127 = ($126);
 $23 = $127;
 $128 = $23;
 $22 = $128;
 $129 = $22;
 $130 = $129;
 $21 = $130;
 $131 = $21;
 $132 = $131;
 $20 = $132;
 $133 = $25;
 $134 = $25;
 $19 = $134;
 $135 = $19;
 $136 = (_strlen(($135|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($126,$133,$136);
 __THREW__ = 0;
 $137 = (invoke_iii(19,($123|0),($43|0))|0);
 $138 = __THREW__; __THREW__ = 0;
 $139 = $138&1;
 if ($139) {
  $147 = ___cxa_find_matching_catch(-1,-1)|0;
  $148 = tempRet0;
  $41 = $147;
  $42 = $148;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($43);
  $252 = $41;
  $253 = $42;
  ___resumeException($252|0);
  // unreachable;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($43);
 $140 = $137&1;
 $bInterop = $140;
 $141 = $bInterop;
 $142 = $141&1;
 if ($142) {
  $143 = (($50) + 16|0);
  $144 = (($50) + 32|0);
  (__ZNK2cl12CommandQueue23enqueueAcquireGLObjectsEPKNSt3__16vectorINS_6MemoryENS1_9allocatorIS3_EEEEPKNS2_INS_5EventENS4_IS9_EEEEPS9_($143,$144,0,0)|0);
 }
 $149 = (__ZN11Application3getEv()|0);
 $150 = ($rayOrigin);
 $151 = ($rayDir);
 __ZNK11Application12getCursorRayEPfS0_($149,$150,$151);
 $152 = (($50) + 12|0);
 $153 = (($50) + 20|0);
 __ZN2cl6BufferC1ERKS0_($44,$153);
 __THREW__ = 0;
 (invoke_iiii(32,($152|0),0,($44|0))|0);
 $154 = __THREW__; __THREW__ = 0;
 $155 = $154&1;
 if ($155) {
  $189 = ___cxa_find_matching_catch(-1,-1)|0;
  $190 = tempRet0;
  $41 = $189;
  $42 = $190;
  __ZN2cl6BufferD1Ev($44);
  $252 = $41;
  $253 = $42;
  ___resumeException($252|0);
  // unreachable;
 }
 __ZN2cl6BufferD1Ev($44);
 $156 = (($50) + 12|0);
 $157 = (($50) + 24|0);
 __ZN2cl6BufferC1ERKS0_($45,$157);
 __THREW__ = 0;
 (invoke_iiii(32,($156|0),1,($45|0))|0);
 $158 = __THREW__; __THREW__ = 0;
 $159 = $158&1;
 if ($159) {
  $191 = ___cxa_find_matching_catch(-1,-1)|0;
  $192 = tempRet0;
  $41 = $191;
  $42 = $192;
  __ZN2cl6BufferD1Ev($45);
  $252 = $41;
  $253 = $42;
  ___resumeException($252|0);
  // unreachable;
 }
 __ZN2cl6BufferD1Ev($45);
 $160 = (($50) + 12|0);
 $161 = (($50) + 28|0);
 __ZN2cl6BufferC1ERKS0_($46,$161);
 __THREW__ = 0;
 (invoke_iiii(32,($160|0),2,($46|0))|0);
 $162 = __THREW__; __THREW__ = 0;
 $163 = $162&1;
 if ($163) {
  $193 = ___cxa_find_matching_catch(-1,-1)|0;
  $194 = tempRet0;
  $41 = $193;
  $42 = $194;
  __ZN2cl6BufferD1Ev($46);
  $252 = $41;
  $253 = $42;
  ___resumeException($252|0);
  // unreachable;
 }
 __ZN2cl6BufferD1Ev($46);
 $164 = (($50) + 12|0);
 $165 = ($baseColor);
 $166 = $165;
 (__ZN2cl6Kernel6setArgEjjPv($164,3,16,$166)|0);
 $167 = (($50) + 12|0);
 $168 = ($par);
 $169 = $168;
 (__ZN2cl6Kernel6setArgEjjPv($167,4,16,$169)|0);
 $170 = (($50) + 12|0);
 $171 = ($rayOrigin);
 $172 = $171;
 (__ZN2cl6Kernel6setArgEjjPv($170,5,16,$172)|0);
 $173 = (($50) + 12|0);
 $174 = ($rayDir);
 $175 = $174;
 (__ZN2cl6Kernel6setArgEjjPv($173,6,16,$175)|0);
 $176 = (($50) + 12|0);
 $177 = $38;
 (__ZN2cl6Kernel6setArgIfEEijT_($176,7,$177)|0);
 $178 = (($50) + 12|0);
 $179 = $39;
 (__ZN2cl6Kernel6setArgIfEEijT_($178,8,$179)|0);
 $180 = (($50) + 16|0);
 $181 = (($50) + 12|0);
 $182 = $nParticles;
 __ZN2cl7NDRangeC1Ej($47,$182);
 __THREW__ = 0;
 (invoke_iiiiiiii(1,($180|0),($181|0),((2424)|0),($47|0),((2424)|0),(0|0),(0|0))|0);
 $183 = __THREW__; __THREW__ = 0;
 $184 = $183&1;
 if ($184) {
  $195 = ___cxa_find_matching_catch(-1,-1)|0;
  $196 = tempRet0;
  $41 = $195;
  $42 = $196;
  __ZN2cl7NDRangeD1Ev($47);
  $252 = $41;
  $253 = $42;
  ___resumeException($252|0);
  // unreachable;
 }
 __ZN2cl7NDRangeD1Ev($47);
 $185 = $bInterop;
 $186 = $185&1;
 if ($186) {
  $187 = (($50) + 16|0);
  $188 = (($50) + 32|0);
  (__ZNK2cl12CommandQueue23enqueueReleaseGLObjectsEPKNSt3__16vectorINS_6MemoryENS1_9allocatorIS3_EEEEPKNS2_INS_5EventENS4_IS9_EEEEPS9_($187,$188,0,0)|0);
 }
 $197 = (($50) + 16|0);
 (__ZNK2cl12CommandQueue6finishEv($197)|0);
 $198 = $bInterop;
 $199 = $198&1;
 if ($199) {
  STACKTOP = sp;return;
 }
 $200 = (($50) + 16|0);
 $201 = (($50) + 20|0);
 $202 = $nParticles;
 $203 = $202<<2;
 $204 = $203<<2;
 $205 = (__ZN6global3parEv()|0);
 $17 = $48;
 $18 = (2784);
 $206 = $17;
 $207 = $18;
 $15 = $206;
 $16 = $207;
 $208 = $15;
 $209 = ($208);
 $14 = $209;
 $210 = $14;
 $13 = $210;
 $211 = $13;
 $212 = $211;
 $12 = $212;
 $213 = $12;
 $214 = $213;
 $11 = $214;
 $215 = $16;
 $216 = $16;
 $10 = $216;
 $217 = $10;
 $218 = (_strlen(($217|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($208,$215,$218);
 __THREW__ = 0;
 $219 = (invoke_iiii(29,($205|0),($48|0),(0|0))|0);
 $220 = __THREW__; __THREW__ = 0;
 $221 = $220&1;
 do {
  if (!($221)) {
   __THREW__ = 0;
   (invoke_iiiiiiiii(9,($200|0),($201|0),1,0,($204|0),($219|0),(0|0),(0|0))|0);
   $222 = __THREW__; __THREW__ = 0;
   $223 = $222&1;
   if ($223) {
    break;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($48);
   $224 = (($50) + 16|0);
   $225 = (($50) + 24|0);
   $226 = $nParticles;
   $227 = $226<<2;
   $228 = $227<<2;
   $229 = (__ZN6global3parEv()|0);
   $8 = $49;
   $9 = (2792);
   $230 = $8;
   $231 = $9;
   $6 = $230;
   $7 = $231;
   $232 = $6;
   $233 = ($232);
   $5 = $233;
   $234 = $5;
   $4 = $234;
   $235 = $4;
   $236 = $235;
   $3 = $236;
   $237 = $3;
   $238 = $237;
   $2 = $238;
   $239 = $7;
   $240 = $7;
   $1 = $240;
   $241 = $1;
   $242 = (_strlen(($241|0))|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($232,$239,$242);
   __THREW__ = 0;
   $243 = (invoke_iiii(29,($229|0),($49|0),(0|0))|0);
   $244 = __THREW__; __THREW__ = 0;
   $245 = $244&1;
   do {
    if (!($245)) {
     __THREW__ = 0;
     (invoke_iiiiiiiii(9,($224|0),($225|0),1,0,($228|0),($243|0),(0|0),(0|0))|0);
     $246 = __THREW__; __THREW__ = 0;
     $247 = $246&1;
     if ($247) {
      break;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($49);
     STACKTOP = sp;return;
    }
   } while(0);
   $250 = ___cxa_find_matching_catch(-1,-1)|0;
   $251 = tempRet0;
   $41 = $250;
   $42 = $251;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($49);
   $252 = $41;
   $253 = $42;
   ___resumeException($252|0);
   // unreachable;
  }
 } while(0);
 $248 = ___cxa_find_matching_catch(-1,-1)|0;
 $249 = tempRet0;
 $41 = $248;
 $42 = $249;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($48);
 $252 = $41;
 $253 = $42;
 ___resumeException($252|0);
 // unreachable;
}
function __ZNK2cl12CommandQueue23enqueueAcquireGLObjectsEPKNSt3__16vectorINS_6MemoryENS1_9allocatorIS3_EEEEPKNS2_INS_5EventENS4_IS9_EEEEPS9_($this,$mem_objects,$events,$event) {
 $this = $this|0;
 $mem_objects = $mem_objects|0;
 $events = $events|0;
 $event = $event|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 72|0;
 $6 = $this;
 $7 = $mem_objects;
 $8 = $events;
 $9 = $event;
 $10 = $6;
 $11 = $10;
 $12 = ($11);
 $13 = HEAP32[$12>>2]|0;
 $14 = $7;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $7;
  $5 = $16;
  $17 = $5;
  $18 = $17;
  $19 = (($18) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $17;
  $22 = ($21);
  $23 = HEAP32[$22>>2]|0;
  $24 = $20;
  $25 = $23;
  $26 = (($24) - ($25))|0;
  $27 = (($26|0) / 4)&-1;
  $28 = $27;
 } else {
  $28 = 0;
 }
 $29 = $7;
 $30 = ($29|0)!=(0|0);
 if ($30) {
  $31 = $7;
  $4 = $31;
  $32 = $4;
  $33 = $32;
  $34 = ($33);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35;
  $37 = $36;
 } else {
  $37 = 0;
 }
 $38 = $8;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $40 = $8;
  $1 = $40;
  $41 = $1;
  $42 = $41;
  $43 = (($42) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $41;
  $46 = ($45);
  $47 = HEAP32[$46>>2]|0;
  $48 = $44;
  $49 = $47;
  $50 = (($48) - ($49))|0;
  $51 = (($50|0) / 4)&-1;
  $52 = $51;
 } else {
  $52 = 0;
 }
 $53 = $8;
 $54 = ($53|0)!=(0|0);
 do {
  if ($54) {
   $55 = $8;
   $2 = $55;
   $56 = $2;
   $57 = $56;
   $58 = (($57) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $56;
   $61 = ($60);
   $62 = HEAP32[$61>>2]|0;
   $63 = $59;
   $64 = $62;
   $65 = (($63) - ($64))|0;
   $66 = (($65|0) / 4)&-1;
   $67 = ($66>>>0)>(0);
   if (!($67)) {
    break;
   }
   $68 = $8;
   $3 = $68;
   $69 = $3;
   $70 = $69;
   $71 = ($70);
   $72 = HEAP32[$71>>2]|0;
   $73 = $72;
   $74 = $73;
   $75 = $9;
   $76 = $75;
   $77 = (_clEnqueueAcquireGLObjects(($13|0),($28|0),($37|0),($52|0),($74|0),($76|0))|0);
   $78 = (__ZN2cl6detailL10errHandlerEiPKc($77,(3256))|0);
   STACKTOP = sp;return ($78|0);
  }
 } while(0);
 $74 = 0;
 $75 = $9;
 $76 = $75;
 $77 = (_clEnqueueAcquireGLObjects(($13|0),($28|0),($37|0),($52|0),($74|0),($76|0))|0);
 $78 = (__ZN2cl6detailL10errHandlerEiPKc($77,(3256))|0);
 STACKTOP = sp;return ($78|0);
}
function __ZN2cl6Kernel6setArgINS_6BufferEEEijT_($this,$index,$value) {
 $this = $this|0;
 $index = $index|0;
 $value = $value|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $index;
 $3 = $1;
 $4 = $3;
 $5 = ($4);
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = (__ZN2cl6detail21KernelArgumentHandlerINS_6BufferEE4sizeERKS2_($value)|0);
 $9 = (__ZN2cl6detail21KernelArgumentHandlerINS_6BufferEE3ptrERS2_($value)|0);
 $10 = $9;
 $11 = (_clSetKernelArg(($6|0),($7|0),($8|0),($10|0))|0);
 $12 = (__ZN2cl6detailL10errHandlerEiPKc($11,(2880))|0);
 STACKTOP = sp;return ($12|0);
}
function __ZN2cl6BufferC1ERKS0_($this,$buffer) {
 $this = $this|0;
 $buffer = $buffer|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $buffer;
 $3 = $1;
 $4 = $2;
 __ZN2cl6BufferC2ERKS0_($3,$4);
 STACKTOP = sp;return;
}
function __ZN2cl6Kernel6setArgEjjPv($this,$index,$size,$argPtr) {
 $this = $this|0;
 $index = $index|0;
 $size = $size|0;
 $argPtr = $argPtr|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $this;
 $2 = $index;
 $3 = $size;
 $4 = $argPtr;
 $5 = $1;
 $6 = $5;
 $7 = ($6);
 $8 = HEAP32[$7>>2]|0;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = (_clSetKernelArg(($8|0),($9|0),($10|0),($11|0))|0);
 $13 = (__ZN2cl6detailL10errHandlerEiPKc($12,(2880))|0);
 STACKTOP = sp;return ($13|0);
}
function __ZN2cl6Kernel6setArgIfEEijT_($this,$index,$value) {
 $this = $this|0;
 $index = $index|0;
 $value = +$value;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 $3 = sp + 16|0;
 $1 = $this;
 $2 = $index;
 HEAPF32[$3>>2] = $value;
 $4 = $1;
 $5 = $4;
 $6 = ($5);
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $9 = (__ZN2cl6detail21KernelArgumentHandlerIfE4sizeERKf($3)|0);
 $10 = (__ZN2cl6detail21KernelArgumentHandlerIfE3ptrERf($3)|0);
 $11 = $10;
 $12 = (_clSetKernelArg(($7|0),($8|0),($9|0),($11|0))|0);
 $13 = (__ZN2cl6detailL10errHandlerEiPKc($12,(2880))|0);
 STACKTOP = sp;return ($13|0);
}
function __ZNK2cl12CommandQueue20enqueueNDRangeKernelERKNS_6KernelERKNS_7NDRangeES6_S6_PKNSt3__16vectorINS_5EventENS7_9allocatorIS9_EEEEPS9_($this,$kernel,$offset,$global,$local,$events,$event) {
 $this = $this|0;
 $kernel = $kernel|0;
 $offset = $offset|0;
 $global = $global|0;
 $local = $local|0;
 $events = $events|0;
 $event = $event|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $4 = $this;
 $5 = $kernel;
 $6 = $offset;
 $7 = $global;
 $8 = $local;
 $9 = $events;
 $10 = $event;
 $11 = $4;
 $12 = $11;
 $13 = ($12);
 $14 = HEAP32[$13>>2]|0;
 $15 = $5;
 $16 = $15;
 $17 = (__ZNK2cl6detail7WrapperIP10_cl_kernelEclEv($16)|0);
 $18 = $7;
 $19 = (__ZNK2cl7NDRange10dimensionsEv($18)|0);
 $20 = $6;
 $21 = (__ZNK2cl7NDRange10dimensionsEv($20)|0);
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $6;
  $24 = (__ZNK2cl7NDRangecvPKjEv($23)|0);
  $25 = $24;
 } else {
  $25 = 0;
 }
 $26 = $7;
 $27 = (__ZNK2cl7NDRangecvPKjEv($26)|0);
 $28 = $8;
 $29 = (__ZNK2cl7NDRange10dimensionsEv($28)|0);
 $30 = ($29|0)!=(0);
 if ($30) {
  $31 = $8;
  $32 = (__ZNK2cl7NDRangecvPKjEv($31)|0);
  $33 = $32;
 } else {
  $33 = 0;
 }
 $34 = $9;
 $35 = ($34|0)!=(0|0);
 if ($35) {
  $36 = $9;
  $3 = $36;
  $37 = $3;
  $38 = $37;
  $39 = (($38) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $37;
  $42 = ($41);
  $43 = HEAP32[$42>>2]|0;
  $44 = $40;
  $45 = $43;
  $46 = (($44) - ($45))|0;
  $47 = (($46|0) / 4)&-1;
  $48 = $47;
 } else {
  $48 = 0;
 }
 $49 = $9;
 $50 = ($49|0)!=(0|0);
 do {
  if ($50) {
   $51 = $9;
   $2 = $51;
   $52 = $2;
   $53 = $52;
   $54 = (($53) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $52;
   $57 = ($56);
   $58 = HEAP32[$57>>2]|0;
   $59 = $55;
   $60 = $58;
   $61 = (($59) - ($60))|0;
   $62 = (($61|0) / 4)&-1;
   $63 = ($62>>>0)>(0);
   if (!($63)) {
    break;
   }
   $64 = $9;
   $1 = $64;
   $65 = $1;
   $66 = $65;
   $67 = ($66);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68;
   $70 = $69;
   $71 = $10;
   $72 = $71;
   $73 = (_clEnqueueNDRangeKernel(($14|0),($17|0),($19|0),($25|0),($27|0),($33|0),($48|0),($70|0),($72|0))|0);
   $74 = (__ZN2cl6detailL10errHandlerEiPKc($73,(3232))|0);
   STACKTOP = sp;return ($74|0);
  }
 } while(0);
 $70 = 0;
 $71 = $10;
 $72 = $71;
 $73 = (_clEnqueueNDRangeKernel(($14|0),($17|0),($19|0),($25|0),($27|0),($33|0),($48|0),($70|0),($72|0))|0);
 $74 = (__ZN2cl6detailL10errHandlerEiPKc($73,(3232))|0);
 STACKTOP = sp;return ($74|0);
}
function __ZN2cl7NDRangeC1Ej($this,$size0) {
 $this = $this|0;
 $size0 = $size0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $size0;
 $3 = $1;
 $4 = $2;
 __ZN2cl7NDRangeC2Ej($3,$4);
 STACKTOP = sp;return;
}
function __ZNK2cl12CommandQueue23enqueueReleaseGLObjectsEPKNSt3__16vectorINS_6MemoryENS1_9allocatorIS3_EEEEPKNS2_INS_5EventENS4_IS9_EEEEPS9_($this,$mem_objects,$events,$event) {
 $this = $this|0;
 $mem_objects = $mem_objects|0;
 $events = $events|0;
 $event = $event|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 72|0;
 $6 = $this;
 $7 = $mem_objects;
 $8 = $events;
 $9 = $event;
 $10 = $6;
 $11 = $10;
 $12 = ($11);
 $13 = HEAP32[$12>>2]|0;
 $14 = $7;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $7;
  $5 = $16;
  $17 = $5;
  $18 = $17;
  $19 = (($18) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $17;
  $22 = ($21);
  $23 = HEAP32[$22>>2]|0;
  $24 = $20;
  $25 = $23;
  $26 = (($24) - ($25))|0;
  $27 = (($26|0) / 4)&-1;
  $28 = $27;
 } else {
  $28 = 0;
 }
 $29 = $7;
 $30 = ($29|0)!=(0|0);
 if ($30) {
  $31 = $7;
  $4 = $31;
  $32 = $4;
  $33 = $32;
  $34 = ($33);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35;
  $37 = $36;
 } else {
  $37 = 0;
 }
 $38 = $8;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $40 = $8;
  $1 = $40;
  $41 = $1;
  $42 = $41;
  $43 = (($42) + 4|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $41;
  $46 = ($45);
  $47 = HEAP32[$46>>2]|0;
  $48 = $44;
  $49 = $47;
  $50 = (($48) - ($49))|0;
  $51 = (($50|0) / 4)&-1;
  $52 = $51;
 } else {
  $52 = 0;
 }
 $53 = $8;
 $54 = ($53|0)!=(0|0);
 do {
  if ($54) {
   $55 = $8;
   $2 = $55;
   $56 = $2;
   $57 = $56;
   $58 = (($57) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $56;
   $61 = ($60);
   $62 = HEAP32[$61>>2]|0;
   $63 = $59;
   $64 = $62;
   $65 = (($63) - ($64))|0;
   $66 = (($65|0) / 4)&-1;
   $67 = ($66>>>0)>(0);
   if (!($67)) {
    break;
   }
   $68 = $8;
   $3 = $68;
   $69 = $3;
   $70 = $69;
   $71 = ($70);
   $72 = HEAP32[$71>>2]|0;
   $73 = $72;
   $74 = $73;
   $75 = $9;
   $76 = $75;
   $77 = (_clEnqueueReleaseGLObjects(($13|0),($28|0),($37|0),($52|0),($74|0),($76|0))|0);
   $78 = (__ZN2cl6detailL10errHandlerEiPKc($77,(3200))|0);
   STACKTOP = sp;return ($78|0);
  }
 } while(0);
 $74 = 0;
 $75 = $9;
 $76 = $75;
 $77 = (_clEnqueueReleaseGLObjects(($13|0),($28|0),($37|0),($52|0),($74|0),($76|0))|0);
 $78 = (__ZN2cl6detailL10errHandlerEiPKc($77,(3200))|0);
 STACKTOP = sp;return ($78|0);
}
function __ZNK2cl12CommandQueue6finishEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 $4 = ($3);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_clFinish(($5|0))|0);
 $7 = (__ZN2cl6detailL10errHandlerEiPKc($6,(3184))|0);
 STACKTOP = sp;return ($7|0);
}
function __ZNK2cl12CommandQueue17enqueueReadBufferERKNS_6BufferEjjjPvPKNSt3__16vectorINS_5EventENS5_9allocatorIS7_EEEEPS7_($this,$buffer,$blocking,$offset,$size,$ptr,$events,$event) {
 $this = $this|0;
 $buffer = $buffer|0;
 $blocking = $blocking|0;
 $offset = $offset|0;
 $size = $size|0;
 $ptr = $ptr|0;
 $events = $events|0;
 $event = $event|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 88|0;
 $4 = $this;
 $5 = $buffer;
 $6 = $blocking;
 $7 = $offset;
 $8 = $size;
 $9 = $ptr;
 $10 = $events;
 $11 = $event;
 $12 = $4;
 $13 = $12;
 $14 = ($13);
 $15 = HEAP32[$14>>2]|0;
 $16 = $5;
 $17 = $16;
 $18 = (__ZNK2cl6detail7WrapperIP7_cl_memEclEv($17)|0);
 $19 = $6;
 $20 = $7;
 $21 = $8;
 $22 = $9;
 $23 = $10;
 $24 = ($23|0)!=(0|0);
 if ($24) {
  $25 = $10;
  $3 = $25;
  $26 = $3;
  $27 = $26;
  $28 = (($27) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $26;
  $31 = ($30);
  $32 = HEAP32[$31>>2]|0;
  $33 = $29;
  $34 = $32;
  $35 = (($33) - ($34))|0;
  $36 = (($35|0) / 4)&-1;
  $37 = $36;
 } else {
  $37 = 0;
 }
 $38 = $10;
 $39 = ($38|0)!=(0|0);
 do {
  if ($39) {
   $40 = $10;
   $2 = $40;
   $41 = $2;
   $42 = $41;
   $43 = (($42) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $41;
   $46 = ($45);
   $47 = HEAP32[$46>>2]|0;
   $48 = $44;
   $49 = $47;
   $50 = (($48) - ($49))|0;
   $51 = (($50|0) / 4)&-1;
   $52 = ($51>>>0)>(0);
   if (!($52)) {
    break;
   }
   $53 = $10;
   $1 = $53;
   $54 = $1;
   $55 = $54;
   $56 = ($55);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57;
   $59 = $58;
   $60 = $11;
   $61 = $60;
   $62 = (_clEnqueueReadBuffer(($15|0),($18|0),($19|0),($20|0),($21|0),($22|0),($37|0),($59|0),($61|0))|0);
   $63 = (__ZN2cl6detailL10errHandlerEiPKc($62,(3160))|0);
   STACKTOP = sp;return ($63|0);
  }
 } while(0);
 $59 = 0;
 $60 = $11;
 $61 = $60;
 $62 = (_clEnqueueReadBuffer(($15|0),($18|0),($19|0),($20|0),($21|0),($22|0),($37|0),($59|0),($61|0))|0);
 $63 = (__ZN2cl6detailL10errHandlerEiPKc($62,(3160))|0);
 STACKTOP = sp;return ($63|0);
}
function __ZN2cl6detailL10errHandlerEiPKc($err,$errStr) {
 $err = $err|0;
 $errStr = $errStr|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $err;
 $2 = $errStr;
 $5 = $1;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  $22 = $1;
  STACKTOP = sp;return ($22|0);
 }
 $7 = (___cxa_allocate_exception(12)|0);
 $8 = $7;
 $9 = $1;
 $10 = $2;
 __THREW__ = 0;
 invoke_viii(22,($8|0),($9|0),($10|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 do {
  if ($12) {
   $15 = ___cxa_find_matching_catch(-1,-1,(2488)|0)|0;
   $16 = tempRet0;
   $3 = $15;
   $4 = $16;
   ___cxa_free_exception(($7|0));
  } else {
   __THREW__ = 0;
   invoke_viii(12,($7|0),((2488)|0),((40)|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    $17 = ___cxa_find_matching_catch(-1,-1,(2488)|0)|0;
    $18 = tempRet0;
    $3 = $17;
    $4 = $18;
    break;
   } else {
    // unreachable;
   }
  }
 } while(0);
 $19 = $4;
 $20 = ($19|0)<(0);
 if ($20) {
  $21 = $3;
  ___cxa_call_unexpected(($21|0));
  // unreachable;
 } else {
  $23 = $3;
  $24 = $4;
  ___resumeException($23|0);
  // unreachable;
 }
 return 0|0;
}
function __ZN2cl6detail21KernelArgumentHandlerIfE4sizeERKf($1) {
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $2 = $1;
 STACKTOP = sp;return 4;
}
function __ZN2cl6detail21KernelArgumentHandlerIfE3ptrERf($value) {
 $value = $value|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $value;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function __ZN2cl5ErrorC1EiPKc($this,$err,$errStr) {
 $this = $this|0;
 $err = $err|0;
 $errStr = $errStr|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 $1 = $this;
 $2 = $err;
 $3 = $errStr;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 __ZN2cl5ErrorC2EiPKc($4,$5,$6);
 STACKTOP = sp;return;
}
function __ZN2cl5ErrorC2EiPKc($this,$err,$errStr) {
 $this = $this|0;
 $err = $err|0;
 $errStr = $errStr|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = $this;
 $3 = $err;
 $4 = $errStr;
 $5 = $2;
 $6 = $5;
 $1 = $6;
 $7 = $1;
 $8 = $7;
 $9 = ((__ZTVSt9exception) + 8|0);
 HEAP32[$8>>2] = $9;
 $10 = $5;
 $11 = ((2896) + 8|0);
 HEAP32[$10>>2] = $11;
 $12 = (($5) + 4|0);
 $13 = $3;
 HEAP32[$12>>2] = $13;
 $14 = (($5) + 8|0);
 $15 = $4;
 HEAP32[$14>>2] = $15;
 STACKTOP = sp;return;
}
function __ZN2cl5ErrorD0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN2cl5ErrorD1Ev($2);
 $3 = $2;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZNK2cl5Error4whatEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = $this;
 $3 = $2;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $1 = (2920);
 } else {
  $7 = (($3) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $1 = $8;
 }
 $9 = $1;
 STACKTOP = sp;return ($9|0);
}
function __ZN2cl6detail21KernelArgumentHandlerINS_6BufferEE4sizeERKS2_($1) {
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $2 = $1;
 STACKTOP = sp;return 4;
}
function __ZN2cl6detail21KernelArgumentHandlerINS_6BufferEE3ptrERS2_($value) {
 $value = $value|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $value;
 $2 = $1;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, $tmp$i = 0, $tmp$i$i = 0, $tmp1$i = 0, $tmp1$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 392|0;
 $9 = sp + 64|0;
 $14 = sp + 104|0;
 $23 = sp + 176|0;
 $26 = sp + 200|0;
 $34 = sp + 264|0;
 $35 = sp + 288|0;
 $__v = sp + 352|0;
 $40 = $this;
 $41 = $__x;
 $44 = $40;
 $45 = $44;
 $39 = $45;
 $46 = $39;
 $47 = (($46) + 8|0);
 $38 = $47;
 $48 = $38;
 $49 = $48;
 $37 = $49;
 $50 = $37;
 $51 = $50;
 $__a = $51;
 $36 = $44;
 $52 = $36;
 $53 = $52;
 $54 = (($53) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $52;
 $57 = ($56);
 $58 = HEAP32[$57>>2]|0;
 $59 = $55;
 $60 = $58;
 $61 = (($59) - ($60))|0;
 $62 = (($61|0) / 4)&-1;
 $63 = (($62) + 1)|0;
 $33 = $44;
 HEAP32[$34>>2] = $63;
 $64 = $33;
 $65 = (__ZNKSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE8max_sizeEv($64)|0);
 $__ms$i = $65;
 $66 = HEAP32[$34>>2]|0;
 $67 = $__ms$i;
 $68 = ($66>>>0)>($67>>>0);
 if ($68) {
  $69 = $64;
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($69);
 }
 $31 = $64;
 $70 = $31;
 $71 = $70;
 $30 = $71;
 $72 = $30;
 $29 = $72;
 $73 = $29;
 $74 = (($73) + 8|0);
 $28 = $74;
 $75 = $28;
 $76 = $75;
 $27 = $76;
 $77 = $27;
 $78 = ($77);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($72);
 $81 = HEAP32[$80>>2]|0;
 $82 = $79;
 $83 = $81;
 $84 = (($82) - ($83))|0;
 $85 = (($84|0) / 4)&-1;
 $__cap$i = $85;
 $86 = $__cap$i;
 $87 = $__ms$i;
 $88 = (($87>>>0) / 2)&-1;
 $89 = ($86>>>0)>=($88>>>0);
 if ($89) {
  $90 = $__ms$i;
  $32 = $90;
 } else {
  $91 = $__cap$i;
  $92 = $91<<1;
  HEAP32[$35>>2] = $92;
  $24 = $35;
  $25 = $34;
  $93 = $24;
  $94 = $25;
  $tmp$i$i = $23;
  $tmp1$i$i = $26;
  ;HEAP8[$tmp$i$i+0|0]=HEAP8[$tmp1$i$i+0|0]|0;
  $21 = $93;
  $22 = $94;
  $95 = $21;
  $96 = $22;
  $18 = $23;
  $19 = $95;
  $20 = $96;
  $97 = $19;
  $98 = HEAP32[$97>>2]|0;
  $99 = $20;
  $100 = HEAP32[$99>>2]|0;
  $101 = ($98>>>0)<($100>>>0);
  if ($101) {
   $102 = $22;
   $104 = $102;
  } else {
   $103 = $21;
   $104 = $103;
  }
  $105 = HEAP32[$104>>2]|0;
  $32 = $105;
 }
 $106 = $32;
 $17 = $44;
 $107 = $17;
 $108 = $107;
 $109 = (($108) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $107;
 $112 = ($111);
 $113 = HEAP32[$112>>2]|0;
 $114 = $110;
 $115 = $113;
 $116 = (($114) - ($115))|0;
 $117 = (($116|0) / 4)&-1;
 $118 = $__a;
 __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEEC1EjjS5_($__v,$106,$117,$118);
 $119 = $__a;
 $120 = (($__v) + 8|0);
 $121 = HEAP32[$120>>2]|0;
 $16 = $121;
 $122 = $16;
 $123 = $41;
 $15 = $123;
 $124 = $15;
 $11 = $119;
 $12 = $122;
 $13 = $124;
 $125 = $11;
 $126 = $12;
 $127 = $13;
 $10 = $127;
 $128 = $10;
 $tmp$i = $9;
 $tmp1$i = $14;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
 $6 = $125;
 $7 = $126;
 $8 = $128;
 $129 = $6;
 $130 = $7;
 $131 = $8;
 $5 = $131;
 $132 = $5;
 $2 = $129;
 $3 = $130;
 $4 = $132;
 $133 = $3;
 $134 = $133;
 $135 = ($134|0)==(0|0);
 do {
  if ($135) {
   label = 12;
  } else {
   $136 = $134;
   $137 = $4;
   $1 = $137;
   $138 = $1;
   __THREW__ = 0;
   invoke_vii(68,($136|0),($138|0));
   $139 = __THREW__; __THREW__ = 0;
   $140 = $139&1;
   if ($140) {
    break;
   }
   label = 12;
  }
 } while(0);
 do {
  if ((label|0) == 12) {
   $141 = (($__v) + 8|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = (($142) + 4|0);
   HEAP32[$141>>2] = $143;
   __THREW__ = 0;
   invoke_vii(70,($44|0),($__v|0));
   $144 = __THREW__; __THREW__ = 0;
   $145 = $144&1;
   if ($145) {
    break;
   }
   __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEED1Ev($__v);
   STACKTOP = sp;return;
  }
 } while(0);
 $146 = ___cxa_find_matching_catch(-1,-1)|0;
 $147 = tempRet0;
 $42 = $146;
 $43 = $147;
 __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEED1Ev($__v);
 $148 = $42;
 $149 = $43;
 ___resumeException($148|0);
 // unreachable;
}
function __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEEC1EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $this;
 $2 = $__cap;
 $3 = $__start;
 $4 = $__a;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEEC2EjjS5_($5,$6,$7,$8);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $tmp$i$i = 0, $tmp1$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 408|0;
 $11 = sp + 80|0;
 $16 = sp + 120|0;
 $__t$i2 = sp + 208|0;
 $__t$i1 = sp + 256|0;
 $__t$i = sp + 352|0;
 $47 = $this;
 $48 = $__v;
 $49 = $47;
 $50 = $49;
 $46 = $50;
 $51 = $46;
 $52 = (($51) + 8|0);
 $45 = $52;
 $53 = $45;
 $54 = $53;
 $44 = $54;
 $55 = $44;
 $56 = $55;
 $57 = $49;
 $58 = ($57);
 $59 = HEAP32[$58>>2]|0;
 $60 = $49;
 $61 = (($60) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $48;
 $64 = (($63) + 4|0);
 $18 = $56;
 $19 = $59;
 $20 = $62;
 $21 = $64;
 while(1) {
  $65 = $20;
  $66 = $19;
  $67 = ($65|0)!=($66|0);
  if (!($67)) {
   break;
  }
  $68 = $18;
  $69 = $21;
  $70 = HEAP32[$69>>2]|0;
  $71 = (($70) + -4|0);
  $17 = $71;
  $72 = $17;
  $73 = $20;
  $74 = (($73) + -4|0);
  $20 = $74;
  $2 = $74;
  $75 = $2;
  $1 = $75;
  $76 = $1;
  $13 = $68;
  $14 = $72;
  $15 = $76;
  $77 = $13;
  $78 = $14;
  $79 = $15;
  $12 = $79;
  $80 = $12;
  $tmp$i$i = $11;
  $tmp1$i$i = $16;
  ;HEAP8[$tmp$i$i+0|0]=HEAP8[$tmp1$i$i+0|0]|0;
  $8 = $77;
  $9 = $78;
  $10 = $80;
  $81 = $8;
  $82 = $9;
  $83 = $10;
  $7 = $83;
  $84 = $7;
  $4 = $81;
  $5 = $82;
  $6 = $84;
  $85 = $5;
  $86 = $85;
  $87 = ($86|0)==(0|0);
  if (!($87)) {
   $88 = $86;
   $89 = $6;
   $3 = $89;
   $90 = $3;
   __ZN2cl6MemoryC1ERKS0_($88,$90);
  }
  $91 = $21;
  $92 = HEAP32[$91>>2]|0;
  $93 = (($92) + -4|0);
  HEAP32[$91>>2] = $93;
 }
 $94 = $49;
 $95 = ($94);
 $96 = $48;
 $97 = (($96) + 4|0);
 $25 = $95;
 $26 = $97;
 $98 = $25;
 $24 = $98;
 $99 = $24;
 $100 = HEAP32[$99>>2]|0;
 HEAP32[$__t$i2>>2] = $100;
 $101 = $26;
 $22 = $101;
 $102 = $22;
 $103 = HEAP32[$102>>2]|0;
 $104 = $25;
 HEAP32[$104>>2] = $103;
 $23 = $__t$i2;
 $105 = $23;
 $106 = HEAP32[$105>>2]|0;
 $107 = $26;
 HEAP32[$107>>2] = $106;
 $108 = $49;
 $109 = (($108) + 4|0);
 $110 = $48;
 $111 = (($110) + 8|0);
 $30 = $109;
 $31 = $111;
 $112 = $30;
 $29 = $112;
 $113 = $29;
 $114 = HEAP32[$113>>2]|0;
 HEAP32[$__t$i1>>2] = $114;
 $115 = $31;
 $27 = $115;
 $116 = $27;
 $117 = HEAP32[$116>>2]|0;
 $118 = $30;
 HEAP32[$118>>2] = $117;
 $28 = $__t$i1;
 $119 = $28;
 $120 = HEAP32[$119>>2]|0;
 $121 = $31;
 HEAP32[$121>>2] = $120;
 $122 = $49;
 $34 = $122;
 $123 = $34;
 $124 = (($123) + 8|0);
 $33 = $124;
 $125 = $33;
 $126 = $125;
 $32 = $126;
 $127 = $32;
 $128 = ($127);
 $129 = $48;
 $37 = $129;
 $130 = $37;
 $131 = (($130) + 12|0);
 $36 = $131;
 $132 = $36;
 $133 = $132;
 $35 = $133;
 $134 = $35;
 $135 = ($134);
 $41 = $128;
 $42 = $135;
 $136 = $41;
 $40 = $136;
 $137 = $40;
 $138 = HEAP32[$137>>2]|0;
 HEAP32[$__t$i>>2] = $138;
 $139 = $42;
 $38 = $139;
 $140 = $38;
 $141 = HEAP32[$140>>2]|0;
 $142 = $41;
 HEAP32[$142>>2] = $141;
 $39 = $__t$i;
 $143 = $39;
 $144 = HEAP32[$143>>2]|0;
 $145 = $42;
 HEAP32[$145>>2] = $144;
 $146 = $48;
 $147 = (($146) + 4|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = $48;
 $150 = ($149);
 HEAP32[$150>>2] = $148;
 $43 = $49;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $tmp$i$i = 0, $tmp$i$i$i$i = 0, $tmp1$i$i = 0, $tmp1$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 264|0;
 $18 = sp + 136|0;
 $21 = sp + 160|0;
 $28 = sp + 216|0;
 $31 = sp + 240|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = (($35) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 $tmp$i$i = $28;
 $tmp1$i$i = $31;
 ;HEAP8[$tmp$i$i+0|0]=HEAP8[$tmp1$i$i+0|0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = (($40) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = (($45) + 12|0);
  $24 = $46;
  $47 = $24;
  $48 = $47;
  $23 = $48;
  $49 = $23;
  $50 = (($49) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($40) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + -4|0);
  HEAP32[$52>>2] = $54;
  $22 = $54;
  $55 = $22;
  $19 = $51;
  $20 = $55;
  $56 = $19;
  $57 = $20;
  $tmp$i$i$i$i = $18;
  $tmp1$i$i$i$i = $21;
  ;HEAP8[$tmp$i$i$i$i+0|0]=HEAP8[$tmp1$i$i$i$i+0|0]|0;
  $16 = $56;
  $17 = $57;
  $58 = $16;
  $59 = $17;
  $14 = $58;
  $15 = $59;
  $60 = $15;
  __ZN2cl6MemoryD1Ev($60);
 }
 $61 = ($34);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)!=(0|0);
 if (!($63)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $64 = $13;
 $65 = (($64) + 12|0);
 $12 = $65;
 $66 = $12;
 $67 = $66;
 $11 = $67;
 $68 = $11;
 $69 = (($68) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($34);
 $72 = HEAP32[$71>>2]|0;
 $10 = $34;
 $73 = $10;
 $9 = $73;
 $74 = $9;
 $75 = (($74) + 12|0);
 $8 = $75;
 $76 = $8;
 $77 = $76;
 $7 = $77;
 $78 = $7;
 $79 = ($78);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($73);
 $82 = HEAP32[$81>>2]|0;
 $83 = $80;
 $84 = $82;
 $85 = (($83) - ($84))|0;
 $86 = (($85|0) / 4)&-1;
 $4 = $70;
 $5 = $72;
 $6 = $86;
 $87 = $4;
 $88 = $5;
 $89 = $6;
 $1 = $87;
 $2 = $88;
 $3 = $89;
 $90 = $2;
 $91 = $90;
 __ZdlPv($91);
 STACKTOP = sp;return;
}
function __ZN2cl6MemoryD1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN2cl6MemoryD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl6MemoryD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6detail7WrapperIP7_cl_memED2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP7_cl_memED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 (invoke_ii(76,($2|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable;
 }
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP7_cl_memE7releaseEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN2cl6detail16ReferenceHandlerIP7_cl_memE7releaseES3_($4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN2cl6detail16ReferenceHandlerIP7_cl_memE7releaseES3_($memory) {
 $memory = $memory|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $memory;
 $2 = $1;
 $3 = (_clReleaseMemObject(($2|0))|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNKSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp$i = 0, $tmp$i1 = 0, $tmp1$i = 0, $tmp1$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $6 = sp + 40|0;
 $9 = sp + 64|0;
 $12 = sp + 88|0;
 $14 = sp + 104|0;
 $19 = sp + 144|0;
 $20 = sp + 152|0;
 $18 = $this;
 $21 = $18;
 $22 = $21;
 $17 = $22;
 $23 = $17;
 $24 = (($23) + 8|0);
 $16 = $24;
 $25 = $16;
 $26 = $25;
 $15 = $26;
 $27 = $15;
 $28 = $27;
 $13 = $28;
 $29 = $13;
 $tmp$i = $12;
 $tmp1$i = $14;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
 $11 = $29;
 $30 = $11;
 $10 = $30;
 HEAP32[$19>>2] = 1073741823;
 $31 = (4294967295 / 2)&-1;
 HEAP32[$20>>2] = $31;
 $7 = $19;
 $8 = $20;
 $32 = $7;
 $33 = $8;
 $tmp$i1 = $6;
 $tmp1$i2 = $9;
 ;HEAP8[$tmp$i1+0|0]=HEAP8[$tmp1$i2+0|0]|0;
 $4 = $32;
 $5 = $33;
 $34 = $5;
 $35 = $4;
 $1 = $6;
 $2 = $34;
 $3 = $35;
 $36 = $2;
 $37 = HEAP32[$36>>2]|0;
 $38 = $3;
 $39 = HEAP32[$38>>2]|0;
 $40 = ($37>>>0)<($39>>>0);
 if ($40) {
  $41 = $5;
  $43 = $41;
 } else {
  $42 = $4;
  $43 = $42;
 }
 $44 = HEAP32[$43>>2]|0;
 STACKTOP = sp;return ($44|0);
}
function __ZNSt3__114__split_bufferIN2cl6MemoryERNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $16 = sp + 120|0;
 $20 = sp + 152|0;
 $25 = $this;
 $26 = $__cap;
 $27 = $__start;
 $28 = $__a;
 $29 = $25;
 $30 = (($29) + 12|0);
 $31 = $28;
 $22 = $30;
 $23 = 0;
 $24 = $31;
 $32 = $22;
 $33 = $23;
 $34 = $24;
 $19 = $32;
 HEAP32[$20>>2] = $33;
 $21 = $34;
 $35 = $19;
 $36 = $35;
 $18 = $20;
 $37 = $18;
 $38 = HEAP32[$37>>2]|0;
 $39 = $21;
 $12 = $39;
 $40 = $12;
 $15 = $36;
 HEAP32[$16>>2] = $38;
 $17 = $40;
 $41 = $15;
 $42 = ($41);
 $14 = $16;
 $43 = $14;
 $44 = HEAP32[$43>>2]|0;
 HEAP32[$42>>2] = $44;
 $45 = (($41) + 4|0);
 $46 = $17;
 $13 = $46;
 $47 = $13;
 HEAP32[$45>>2] = $47;
 $48 = $26;
 $49 = ($48|0)!=(0);
 if ($49) {
  $3 = $29;
  $50 = $3;
  $51 = (($50) + 12|0);
  $2 = $51;
  $52 = $2;
  $53 = $52;
  $1 = $53;
  $54 = $1;
  $55 = (($54) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $26;
  $7 = $56;
  $8 = $57;
  $58 = $7;
  $59 = $8;
  $4 = $58;
  $5 = $59;
  $6 = 0;
  $60 = $5;
  $61 = $60<<2;
  $62 = (__Znwj($61)|0);
  $63 = $62;
  $64 = $63;
 } else {
  $64 = 0;
 }
 $65 = ($29);
 HEAP32[$65>>2] = $64;
 $66 = ($29);
 $67 = HEAP32[$66>>2]|0;
 $68 = $27;
 $69 = (($67) + ($68<<2)|0);
 $70 = (($29) + 8|0);
 HEAP32[$70>>2] = $69;
 $71 = (($29) + 4|0);
 HEAP32[$71>>2] = $69;
 $72 = ($29);
 $73 = HEAP32[$72>>2]|0;
 $74 = $26;
 $75 = (($73) + ($74<<2)|0);
 $11 = $29;
 $76 = $11;
 $77 = (($76) + 12|0);
 $10 = $77;
 $78 = $10;
 $79 = $78;
 $9 = $79;
 $80 = $9;
 $81 = ($80);
 HEAP32[$81>>2] = $75;
 STACKTOP = sp;return;
}
function __ZN2cl6MemoryC1ERKS0_($this,$memory) {
 $this = $this|0;
 $memory = $memory|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $memory;
 $3 = $1;
 $4 = $2;
 __ZN2cl6MemoryC2ERKS0_($3,$4);
 STACKTOP = sp;return;
}
function __ZN2cl6MemoryC2ERKS0_($this,$memory) {
 $this = $this|0;
 $memory = $memory|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $memory;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = $5;
 __ZN2cl6detail7WrapperIP7_cl_memEC2ERKS4_($4,$6);
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP7_cl_memEC2ERKS4_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $rhs;
 $3 = $1;
 $4 = $2;
 $5 = ($4);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($3);
 HEAP32[$7>>2] = $6;
 $8 = ($3);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 (__ZNK2cl6detail7WrapperIP7_cl_memE6retainEv($3)|0);
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP7_cl_memE6retainEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN2cl6detail16ReferenceHandlerIP7_cl_memE6retainES3_($4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN2cl6detail16ReferenceHandlerIP7_cl_memE6retainES3_($memory) {
 $memory = $memory|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $memory;
 $2 = $1;
 $3 = (_clRetainMemObject(($2|0))|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK2cl7Program12getBuildInfoINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEiRKNS_6DeviceEjPT_($this,$device,$name,$param) {
 $this = $this|0;
 $device = $device|0;
 $name = $name|0;
 $param = $param|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $5 = sp + 32|0;
 $1 = $this;
 $2 = $device;
 $3 = $name;
 $4 = $param;
 $6 = $1;
 $7 = $6;
 $8 = ($7);
 $9 = $2;
 $10 = $9;
 $11 = (__ZNK2cl6detail7WrapperIP13_cl_device_idEclEv($10)|0);
 HEAP32[$5>>2] = $11;
 $12 = $3;
 $13 = $4;
 $14 = (__ZN2cl6detail7getInfoIPFiP11_cl_programP13_cl_device_idjjPvPjES3_S5_NSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEiT_RKT0_RKT1_jPT2_(1,$8,$5,$12,$13)|0);
 $15 = (__ZN2cl6detailL10errHandlerEiPKc($14,(2928))|0);
 STACKTOP = sp;return ($15|0);
}
function __ZN2cl6detail7getInfoIPFiP11_cl_programP13_cl_device_idjjPvPjES3_S5_NSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEiT_RKT0_RKT1_jPT2_($f,$arg0,$arg1,$name,$param) {
 $f = $f|0;
 $arg0 = $arg0|0;
 $arg1 = $arg1|0;
 $name = $name|0;
 $param = $param|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $f0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 88|0;
 $$byval_copy = sp;
 $f0 = sp + 56|0;
 $6 = sp + 72|0;
 $1 = $f;
 $2 = $arg0;
 $3 = $arg1;
 $4 = $name;
 $5 = $param;
 $7 = ($f0);
 $8 = $1;
 HEAP32[$7>>2] = $8;
 $9 = (($f0) + 4|0);
 $10 = $2;
 HEAP32[$9>>2] = $10;
 $11 = (($f0) + 8|0);
 $12 = $3;
 HEAP32[$11>>2] = $12;
 $13 = $6;
 $14 = $f0;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;HEAP32[$13+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$14+8>>2]|0;
 $15 = $4;
 $16 = $5;
 $17 = $$byval_copy;
 $18 = $$byval_copy;
 $19 = $6;
 ;HEAP32[$18+0>>2]=HEAP32[$19+0>>2]|0;HEAP32[$18+4>>2]=HEAP32[$19+4>>2]|0;HEAP32[$18+8>>2]=HEAP32[$19+8>>2]|0;
 $20 = (__ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor1IPFiP11_cl_programP13_cl_device_idjjPvPjES4_S6_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEE3getESB_jPSI_($$byval_copy,$15,$16)|0);
 $21 = $$byval_copy;
 STACKTOP = sp;return ($20|0);
}
function __ZNK2cl6detail7WrapperIP13_cl_device_idEclEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor1IPFiP11_cl_programP13_cl_device_idjjPvPjES4_S6_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEE3getESB_jPSI_($f,$name,$param) {
 $f = $f|0;
 $name = $name|0;
 $param = $param|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $required = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $required = sp + 40|0;
 $4 = $name;
 $5 = $param;
 $6 = $4;
 $7 = (__ZN2cl6detail15GetInfoFunctor1IPFiP11_cl_programP13_cl_device_idjjPvPjES3_S5_EclEjjS6_S7_($f,$6,0,0,$required)|0);
 $err = $7;
 $8 = $err;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $err;
  $3 = $10;
  $24 = $3;
  STACKTOP = sp;return ($24|0);
 }
 $11 = HEAP32[$required>>2]|0;
 $12 = STACKTOP; STACKTOP = STACKTOP + ((((1*$11)|0)+7)&-8)|0;
 $value = $12;
 $13 = $4;
 $14 = HEAP32[$required>>2]|0;
 $15 = $value;
 $16 = (__ZN2cl6detail15GetInfoFunctor1IPFiP11_cl_programP13_cl_device_idjjPvPjES3_S5_EclEjjS6_S7_($f,$13,$14,$15,0)|0);
 $err = $16;
 $17 = $err;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $err;
  $3 = $19;
  $24 = $3;
  STACKTOP = sp;return ($24|0);
 } else {
  $20 = $5;
  $21 = $value;
  $1 = $20;
  $2 = $21;
  $22 = $1;
  $23 = $2;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($22,$23)|0);
  $3 = 0;
  $24 = $3;
  STACKTOP = sp;return ($24|0);
 }
 return 0|0;
}
function __ZN2cl6detail15GetInfoFunctor1IPFiP11_cl_programP13_cl_device_idjjPvPjES3_S5_EclEjjS6_S7_($this,$param,$size,$value,$size_ret) {
 $this = $this|0;
 $param = $param|0;
 $size = $size|0;
 $value = $value|0;
 $size_ret = $size_ret|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $1 = $this;
 $2 = $param;
 $3 = $size;
 $4 = $value;
 $5 = $size_ret;
 $6 = $1;
 $7 = ($6);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($6) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 $16 = $3;
 $17 = $4;
 $18 = $5;
 $19 = (FUNCTION_TABLE_iiiiiii[$8 & 3]($11,$14,$15,$16,$17,$18)|0);
 STACKTOP = sp;return ($19|0);
}
function __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEEC2EjRKS4_($this,$__n,$__x) {
 $this = $this|0;
 $__n = $__n|0;
 $__x = $__x|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i = 0, $tmp$i$i = 0, $tmp1$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $10 = sp + 72|0;
 $15 = sp + 112|0;
 $25 = sp + 200|0;
 $28 = sp + 224|0;
 $33 = $this;
 $34 = $__n;
 $35 = $__x;
 $38 = $33;
 $39 = $38;
 $32 = $39;
 $40 = $32;
 $41 = $40;
 $31 = $41;
 $42 = ($40);
 HEAP32[$42>>2] = 0;
 $43 = (($40) + 4|0);
 HEAP32[$43>>2] = 0;
 $44 = (($40) + 8|0);
 $29 = $44;
 $30 = 0;
 $45 = $29;
 $46 = $30;
 $27 = $45;
 HEAP32[$28>>2] = $46;
 $47 = $27;
 $48 = $47;
 $26 = $28;
 $49 = $26;
 $50 = HEAP32[$49>>2]|0;
 $24 = $48;
 HEAP32[$25>>2] = $50;
 $51 = $24;
 $52 = $51;
 $23 = $52;
 $53 = ($51);
 $22 = $25;
 $54 = $22;
 $55 = HEAP32[$54>>2]|0;
 HEAP32[$53>>2] = $55;
 $56 = $34;
 $57 = ($56>>>0)>(0);
 if (!($57)) {
  STACKTOP = sp;return;
 }
 $58 = $34;
 __THREW__ = 0;
 invoke_vii(71,($38|0),($58|0));
 $59 = __THREW__; __THREW__ = 0;
 $60 = $59&1;
 if ($60) {
  $101 = ___cxa_find_matching_catch(-1,-1)|0;
  $102 = tempRet0;
  $36 = $101;
  $37 = $102;
  $103 = $38;
  __ZNSt3__113__vector_baseINS_4pairIPKcjEENS_9allocatorIS4_EEED2Ev($103);
  $104 = $36;
  $105 = $37;
  ___resumeException($104|0);
  // unreachable;
 }
 $61 = $34;
 $62 = $35;
 $19 = $38;
 $20 = $61;
 $21 = $62;
 $63 = $19;
 $64 = $63;
 $18 = $64;
 $65 = $18;
 $66 = (($65) + 8|0);
 $17 = $66;
 $67 = $17;
 $68 = $67;
 $16 = $68;
 $69 = $16;
 $70 = $69;
 $__a$i = $70;
 while(1) {
  $71 = $__a$i;
  $72 = $63;
  $73 = (($72) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $1 = $74;
  $75 = $1;
  $76 = $21;
  $12 = $71;
  $13 = $75;
  $14 = $76;
  $77 = $12;
  $78 = $13;
  $79 = $14;
  $11 = $79;
  $80 = $11;
  $tmp$i$i = $10;
  $tmp1$i$i = $15;
  ;HEAP8[$tmp$i$i+0|0]=HEAP8[$tmp1$i$i+0|0]|0;
  $7 = $77;
  $8 = $78;
  $9 = $80;
  $81 = $7;
  $82 = $8;
  $83 = $9;
  $6 = $83;
  $84 = $6;
  $3 = $81;
  $4 = $82;
  $5 = $84;
  $85 = $4;
  $86 = $85;
  $87 = ($86|0)==(0|0);
  if (!($87)) {
   $88 = $86;
   $89 = $5;
   $2 = $89;
   $90 = $2;
   $91 = $88;
   $92 = $90;
   ;HEAP32[$91+0>>2]=HEAP32[$92+0>>2]|0;HEAP32[$91+4>>2]=HEAP32[$92+4>>2]|0;
  }
  $93 = $63;
  $94 = (($93) + 4|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (($95) + 8|0);
  HEAP32[$94>>2] = $96;
  $97 = $20;
  $98 = (($97) + -1)|0;
  $20 = $98;
  $99 = $20;
  $100 = ($99>>>0)>(0);
  if (!($100)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 104|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  $18 = $14;
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($18);
 }
 $19 = $14;
 $11 = $19;
 $20 = $11;
 $21 = (($20) + 8|0);
 $10 = $21;
 $22 = $10;
 $23 = $22;
 $9 = $23;
 $24 = $9;
 $25 = $24;
 $26 = $13;
 $4 = $25;
 $5 = $26;
 $27 = $4;
 $28 = $5;
 $1 = $27;
 $2 = $28;
 $3 = 0;
 $29 = $2;
 $30 = $29<<3;
 $31 = (__Znwj($30)|0);
 $32 = $31;
 $33 = $14;
 $34 = (($33) + 4|0);
 HEAP32[$34>>2] = $32;
 $35 = $14;
 $36 = ($35);
 HEAP32[$36>>2] = $32;
 $37 = $14;
 $38 = ($37);
 $39 = HEAP32[$38>>2]|0;
 $40 = $13;
 $41 = (($39) + ($40<<3)|0);
 $42 = $14;
 $8 = $42;
 $43 = $8;
 $44 = (($43) + 8|0);
 $7 = $44;
 $45 = $7;
 $46 = $45;
 $6 = $46;
 $47 = $6;
 $48 = ($47);
 HEAP32[$48>>2] = $41;
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseINS_4pairIPKcjEENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $9 = 0, $tmp$i$i$i = 0, $tmp1$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 232|0;
 $18 = sp + 136|0;
 $21 = sp + 160|0;
 $29 = $this;
 $30 = $29;
 $31 = ($30);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $34 = $28;
 $35 = ($34);
 $36 = HEAP32[$35>>2]|0;
 $26 = $34;
 $27 = $36;
 $37 = $26;
 while(1) {
  $38 = $27;
  $39 = (($37) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($38|0)!=($40|0);
  if (!($41)) {
   break;
  }
  $25 = $37;
  $42 = $25;
  $43 = (($42) + 8|0);
  $24 = $43;
  $44 = $24;
  $45 = $44;
  $23 = $45;
  $46 = $23;
  $47 = $46;
  $48 = (($37) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + -8|0);
  HEAP32[$48>>2] = $50;
  $22 = $50;
  $51 = $22;
  $19 = $47;
  $20 = $51;
  $52 = $19;
  $53 = $20;
  $tmp$i$i$i = $18;
  $tmp1$i$i$i = $21;
  ;HEAP8[$tmp$i$i$i+0|0]=HEAP8[$tmp1$i$i$i+0|0]|0;
  $16 = $52;
  $17 = $53;
  $54 = $16;
  $55 = $17;
  $14 = $54;
  $15 = $55;
 }
 $7 = $30;
 $56 = $7;
 $57 = (($56) + 8|0);
 $6 = $57;
 $58 = $6;
 $59 = $58;
 $5 = $59;
 $60 = $5;
 $61 = $60;
 $62 = ($30);
 $63 = HEAP32[$62>>2]|0;
 $4 = $30;
 $64 = $4;
 $3 = $64;
 $65 = $3;
 $66 = (($65) + 8|0);
 $2 = $66;
 $67 = $2;
 $68 = $67;
 $1 = $68;
 $69 = $1;
 $70 = ($69);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($64);
 $73 = HEAP32[$72>>2]|0;
 $74 = $71;
 $75 = $73;
 $76 = (($74) - ($75))|0;
 $77 = (($76|0) / 8)&-1;
 $11 = $61;
 $12 = $63;
 $13 = $77;
 $78 = $11;
 $79 = $12;
 $80 = $13;
 $8 = $78;
 $9 = $79;
 $10 = $80;
 $81 = $9;
 $82 = $81;
 __ZdlPv($82);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp$i = 0, $tmp$i1 = 0, $tmp1$i = 0, $tmp1$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $6 = sp + 40|0;
 $9 = sp + 64|0;
 $12 = sp + 88|0;
 $14 = sp + 104|0;
 $19 = sp + 144|0;
 $20 = sp + 152|0;
 $18 = $this;
 $21 = $18;
 $22 = $21;
 $17 = $22;
 $23 = $17;
 $24 = (($23) + 8|0);
 $16 = $24;
 $25 = $16;
 $26 = $25;
 $15 = $26;
 $27 = $15;
 $28 = $27;
 $13 = $28;
 $29 = $13;
 $tmp$i = $12;
 $tmp1$i = $14;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
 $11 = $29;
 $30 = $11;
 $10 = $30;
 HEAP32[$19>>2] = 536870911;
 $31 = (4294967295 / 2)&-1;
 HEAP32[$20>>2] = $31;
 $7 = $19;
 $8 = $20;
 $32 = $7;
 $33 = $8;
 $tmp$i1 = $6;
 $tmp1$i2 = $9;
 ;HEAP8[$tmp$i1+0|0]=HEAP8[$tmp1$i2+0|0]|0;
 $4 = $32;
 $5 = $33;
 $34 = $5;
 $35 = $4;
 $1 = $6;
 $2 = $34;
 $3 = $35;
 $36 = $2;
 $37 = HEAP32[$36>>2]|0;
 $38 = $3;
 $39 = HEAP32[$38>>2]|0;
 $40 = ($37>>>0)<($39>>>0);
 if ($40) {
  $41 = $5;
  $43 = $41;
 } else {
  $42 = $4;
  $43 = $42;
 }
 $44 = HEAP32[$43>>2]|0;
 STACKTOP = sp;return ($44|0);
}
function __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 $3 = $2;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -12|0);
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($3) + ($8)|0);
 $10 = $9;
 __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -12|0);
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($3) + ($8)|0);
 $10 = $9;
 __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($10);
 STACKTOP = sp;return;
}
function __ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $vtt;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$6>>2] = $5;
 $7 = (($4) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) + -12|0);
 $12 = $11;
 $13 = HEAP32[$12>>2]|0;
 $14 = $3;
 $15 = (($14) + ($13)|0);
 $16 = $15;
 HEAP32[$16>>2] = $8;
 $17 = (($3) + 4|0);
 __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
 STACKTOP = sp;return;
}
function __ZNK2cl7Context7getInfoINSt3__16vectorINS_6DeviceENS2_9allocatorIS4_EEEEEEijPT_($this,$name,$param) {
 $this = $this|0;
 $name = $name|0;
 $param = $param|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 $1 = $this;
 $2 = $name;
 $3 = $param;
 $4 = $1;
 $5 = $4;
 $6 = ($5);
 $7 = $2;
 $8 = $3;
 $9 = (__ZN2cl6detail7getInfoIPFiP11_cl_contextjjPvPjES3_NSt3__16vectorINS_6DeviceENS8_9allocatorISA_EEEEEEiT_RKT0_jPT1_(14,$6,$7,$8)|0);
 $10 = (__ZN2cl6detailL10errHandlerEiPKc($9,(3136))|0);
 STACKTOP = sp;return ($10|0);
}
function __ZN2cl6detail7getInfoIPFiP11_cl_contextjjPvPjES3_NSt3__16vectorINS_6DeviceENS8_9allocatorISA_EEEEEEiT_RKT0_jPT1_($f,$arg0,$name,$param) {
 $f = $f|0;
 $arg0 = $arg0|0;
 $name = $name|0;
 $param = $param|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f0 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 56|0;
 $$byval_copy = sp;
 $f0 = sp + 40|0;
 $5 = sp + 48|0;
 $1 = $f;
 $2 = $arg0;
 $3 = $name;
 $4 = $param;
 $6 = ($f0);
 $7 = $1;
 HEAP32[$6>>2] = $7;
 $8 = (($f0) + 4|0);
 $9 = $2;
 HEAP32[$8>>2] = $9;
 $10 = $5;
 $11 = $f0;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$10+4>>2]=HEAP32[$11+4>>2]|0;
 $12 = $3;
 $13 = $4;
 $14 = $$byval_copy;
 $15 = $$byval_copy;
 $16 = $5;
 ;HEAP32[$15+0>>2]=HEAP32[$16+0>>2]|0;HEAP32[$15+4>>2]=HEAP32[$16+4>>2]|0;
 $17 = (__ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor0IPFiP11_cl_contextjjPvPjES4_EENSt3__16vectorINS_6DeviceENSA_9allocatorISC_EEEEE3getES9_jPSF_($$byval_copy,$12,$13)|0);
 $18 = $$byval_copy;
 STACKTOP = sp;return ($17|0);
}
function __ZN2cl6detail13GetInfoHelperINS0_15GetInfoFunctor0IPFiP11_cl_contextjjPvPjES4_EENSt3__16vectorINS_6DeviceENSA_9allocatorISC_EEEEE3getES9_jPSF_($f,$name,$param) {
 $f = $f|0;
 $name = $name|0;
 $param = $param|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, $required = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $required = sp + 24|0;
 $2 = $name;
 $3 = $param;
 $4 = $2;
 $5 = (__ZN2cl6detail15GetInfoFunctor0IPFiP11_cl_contextjjPvPjES3_EclEjjS4_S5_($f,$4,0,0,$required)|0);
 $err = $5;
 $6 = $err;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $err;
  $1 = $8;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 }
 $9 = HEAP32[$required>>2]|0;
 $10 = STACKTOP; STACKTOP = STACKTOP + ((((1*$9)|0)+7)&-8)|0;
 $11 = $10;
 $value = $11;
 $12 = $2;
 $13 = HEAP32[$required>>2]|0;
 $14 = $value;
 $15 = $14;
 $16 = (__ZN2cl6detail15GetInfoFunctor0IPFiP11_cl_contextjjPvPjES3_EclEjjS4_S5_($f,$12,$13,$15,0)|0);
 $err = $16;
 $17 = $err;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $err;
  $1 = $19;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 } else {
  $20 = $3;
  $21 = $value;
  $22 = ($21);
  $23 = HEAP32[$required>>2]|0;
  $24 = (($23>>>0) / 4)&-1;
  $25 = $value;
  $26 = (($25) + ($24<<2)|0);
  __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($20,$22,$26);
  $1 = 0;
  $27 = $1;
  STACKTOP = sp;return ($27|0);
 }
 return 0|0;
}
function __ZN2cl6detail15GetInfoFunctor0IPFiP11_cl_contextjjPvPjES3_EclEjjS4_S5_($this,$param,$size,$value,$size_ret) {
 $this = $this|0;
 $param = $param|0;
 $size = $size|0;
 $value = $value|0;
 $size_ret = $size_ret|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $1 = $this;
 $2 = $param;
 $3 = $size;
 $4 = $value;
 $5 = $size_ret;
 $6 = $1;
 $7 = ($6);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = (FUNCTION_TABLE_iiiiii[$8 & 31]($11,$12,$13,$14,$15)|0);
 STACKTOP = sp;return ($16|0);
}
function __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE6assignIPS2_EENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsIS9_E9referenceEEE5valueEvE4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__cap$i = 0, $__growing = 0, $__m = 0, $__mid = 0, $__ms$i = 0, $__new_size = 0, $tmp$i = 0, $tmp$i$i = 0, $tmp$i$i$i = 0, $tmp$i1 = 0, $tmp1$i = 0, $tmp1$i$i = 0, $tmp1$i$i$i = 0, $tmp1$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 568|0;
 $5 = sp + 32|0;
 $8 = sp + 56|0;
 $28 = sp + 216|0;
 $31 = sp + 240|0;
 $38 = sp + 296|0;
 $41 = sp + 320|0;
 $49 = sp + 384|0;
 $50 = sp + 408|0;
 $59 = sp + 480|0;
 $62 = sp + 504|0;
 $__mid = sp + 544|0;
 $63 = $this;
 $64 = $__first;
 $65 = $__last;
 $66 = $63;
 $67 = $64;
 $68 = $65;
 $60 = $67;
 $61 = $68;
 $69 = $60;
 $70 = $61;
 $tmp$i = $59;
 $tmp1$i = $62;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
 $57 = $69;
 $58 = $70;
 $71 = $58;
 $72 = $57;
 $73 = $71;
 $74 = $72;
 $75 = (($73) - ($74))|0;
 $76 = (($75|0) / 4)&-1;
 $__new_size = $76;
 $77 = $__new_size;
 $56 = $66;
 $78 = $56;
 $79 = $78;
 $55 = $79;
 $80 = $55;
 $54 = $80;
 $81 = $54;
 $82 = (($81) + 8|0);
 $53 = $82;
 $83 = $53;
 $84 = $83;
 $52 = $84;
 $85 = $52;
 $86 = ($85);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($80);
 $89 = HEAP32[$88>>2]|0;
 $90 = $87;
 $91 = $89;
 $92 = (($90) - ($91))|0;
 $93 = (($92|0) / 4)&-1;
 $94 = ($77>>>0)<=($93>>>0);
 if (!($94)) {
  __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE10deallocateEv($66);
  $176 = $__new_size;
  $48 = $66;
  HEAP32[$49>>2] = $176;
  $177 = $48;
  $178 = (__ZNKSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE8max_sizeEv($177)|0);
  $__ms$i = $178;
  $179 = HEAP32[$49>>2]|0;
  $180 = $__ms$i;
  $181 = ($179>>>0)>($180>>>0);
  if ($181) {
   $182 = $177;
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($182);
  }
  $46 = $177;
  $183 = $46;
  $184 = $183;
  $45 = $184;
  $185 = $45;
  $44 = $185;
  $186 = $44;
  $187 = (($186) + 8|0);
  $43 = $187;
  $188 = $43;
  $189 = $188;
  $42 = $189;
  $190 = $42;
  $191 = ($190);
  $192 = HEAP32[$191>>2]|0;
  $193 = ($185);
  $194 = HEAP32[$193>>2]|0;
  $195 = $192;
  $196 = $194;
  $197 = (($195) - ($196))|0;
  $198 = (($197|0) / 4)&-1;
  $__cap$i = $198;
  $199 = $__cap$i;
  $200 = $__ms$i;
  $201 = (($200>>>0) / 2)&-1;
  $202 = ($199>>>0)>=($201>>>0);
  if ($202) {
   $203 = $__ms$i;
   $47 = $203;
  } else {
   $204 = $__cap$i;
   $205 = $204<<1;
   HEAP32[$50>>2] = $205;
   $39 = $50;
   $40 = $49;
   $206 = $39;
   $207 = $40;
   $tmp$i$i = $38;
   $tmp1$i$i = $41;
   ;HEAP8[$tmp$i$i+0|0]=HEAP8[$tmp1$i$i+0|0]|0;
   $36 = $206;
   $37 = $207;
   $208 = $36;
   $209 = $37;
   $33 = $38;
   $34 = $208;
   $35 = $209;
   $210 = $34;
   $211 = HEAP32[$210>>2]|0;
   $212 = $35;
   $213 = HEAP32[$212>>2]|0;
   $214 = ($211>>>0)<($213>>>0);
   if ($214) {
    $215 = $37;
    $217 = $215;
   } else {
    $216 = $36;
    $217 = $216;
   }
   $218 = HEAP32[$217>>2]|0;
   $47 = $218;
  }
  $219 = $47;
  __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE8allocateEj($66,$219);
  $220 = $64;
  $221 = $65;
  __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($66,$220,$221);
  STACKTOP = sp;return;
 }
 $95 = $65;
 HEAP32[$__mid>>2] = $95;
 $__growing = 0;
 $96 = $__new_size;
 $51 = $66;
 $97 = $51;
 $98 = $97;
 $99 = (($98) + 4|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = $97;
 $102 = ($101);
 $103 = HEAP32[$102>>2]|0;
 $104 = $100;
 $105 = $103;
 $106 = (($104) - ($105))|0;
 $107 = (($106|0) / 4)&-1;
 $108 = ($96>>>0)>($107>>>0);
 if ($108) {
  $__growing = 1;
  $109 = $64;
  HEAP32[$__mid>>2] = $109;
  $32 = $66;
  $110 = $32;
  $111 = $110;
  $112 = (($111) + 4|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $110;
  $115 = ($114);
  $116 = HEAP32[$115>>2]|0;
  $117 = $113;
  $118 = $116;
  $119 = (($117) - ($118))|0;
  $120 = (($119|0) / 4)&-1;
  $29 = $__mid;
  $30 = $120;
  $121 = $29;
  $122 = $30;
  $tmp$i1 = $28;
  $tmp1$i2 = $31;
  ;HEAP8[$tmp$i1+0|0]=HEAP8[$tmp1$i2+0|0]|0;
  $26 = $121;
  $27 = $122;
  $123 = $27;
  $124 = $26;
  $125 = HEAP32[$124>>2]|0;
  $126 = (($125) + ($123<<2)|0);
  HEAP32[$124>>2] = $126;
 }
 $127 = $64;
 $128 = HEAP32[$__mid>>2]|0;
 $129 = $66;
 $130 = ($129);
 $131 = HEAP32[$130>>2]|0;
 $23 = $127;
 $24 = $128;
 $25 = $131;
 $132 = $23;
 $22 = $132;
 $133 = $22;
 $134 = $24;
 $18 = $134;
 $135 = $18;
 $136 = $25;
 $17 = $136;
 $137 = $17;
 $19 = $133;
 $20 = $135;
 $21 = $137;
 while(1) {
  $138 = $19;
  $139 = $20;
  $140 = ($138|0)!=($139|0);
  if (!($140)) {
   break;
  }
  $141 = $21;
  $142 = $19;
  (__ZN2cl6DeviceaSERKS0_($141,$142)|0);
  $143 = $19;
  $144 = (($143) + 4|0);
  $19 = $144;
  $145 = $21;
  $146 = (($145) + 4|0);
  $21 = $146;
 }
 $147 = $21;
 $__m = $147;
 $148 = $__growing;
 $149 = $148&1;
 if ($149) {
  $150 = HEAP32[$__mid>>2]|0;
  $151 = $65;
  __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($66,$150,$151);
 } else {
  $152 = $__m;
  $15 = $66;
  $16 = $152;
  $153 = $15;
  $154 = $153;
  $155 = $16;
  $13 = $154;
  $14 = $155;
  $156 = $13;
  while(1) {
   $157 = $14;
   $158 = (($156) + 4|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = ($157|0)!=($159|0);
   if (!($160)) {
    break;
   }
   $12 = $156;
   $161 = $12;
   $162 = (($161) + 8|0);
   $11 = $162;
   $163 = $11;
   $164 = $163;
   $10 = $164;
   $165 = $10;
   $166 = $165;
   $167 = (($156) + 4|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = (($168) + -4|0);
   HEAP32[$167>>2] = $169;
   $9 = $169;
   $170 = $9;
   $6 = $166;
   $7 = $170;
   $171 = $6;
   $172 = $7;
   $tmp$i$i$i = $5;
   $tmp1$i$i$i = $8;
   ;HEAP8[$tmp$i$i$i+0|0]=HEAP8[$tmp1$i$i$i+0|0]|0;
   $3 = $171;
   $4 = $172;
   $173 = $3;
   $174 = $4;
   $1 = $173;
   $2 = $174;
   $175 = $2;
   __ZN2cl6DeviceD1Ev($175);
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE18__construct_at_endIPS2_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $tmp$i = 0;
 var $tmp1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $10 = sp + 72|0;
 $15 = sp + 112|0;
 $19 = $this;
 $20 = $__first;
 $21 = $__last;
 $22 = $19;
 $23 = $22;
 $18 = $23;
 $24 = $18;
 $25 = (($24) + 8|0);
 $17 = $25;
 $26 = $17;
 $27 = $26;
 $16 = $27;
 $28 = $16;
 $29 = $28;
 $__a = $29;
 while(1) {
  $30 = $20;
  $31 = $21;
  $32 = ($30|0)!=($31|0);
  if (!($32)) {
   break;
  }
  $33 = $__a;
  $34 = $22;
  $35 = (($34) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $1 = $36;
  $37 = $1;
  $38 = $20;
  $12 = $33;
  $13 = $37;
  $14 = $38;
  $39 = $12;
  $40 = $13;
  $41 = $14;
  $11 = $41;
  $42 = $11;
  $tmp$i = $10;
  $tmp1$i = $15;
  ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
  $7 = $39;
  $8 = $40;
  $9 = $42;
  $43 = $7;
  $44 = $8;
  $45 = $9;
  $6 = $45;
  $46 = $6;
  $3 = $43;
  $4 = $44;
  $5 = $46;
  $47 = $4;
  $48 = $47;
  $49 = ($48|0)==(0|0);
  if (!($49)) {
   $50 = $48;
   $51 = $5;
   $2 = $51;
   $52 = $2;
   __ZN2cl6DeviceC1ERKS0_($50,$52);
  }
  $53 = $22;
  $54 = (($53) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + 4|0);
  HEAP32[$54>>2] = $56;
  $57 = $20;
  $58 = (($57) + 4|0);
  $20 = $58;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE10deallocateEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $tmp$i$i$i$i = 0, $tmp1$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 280|0;
 $23 = sp + 176|0;
 $26 = sp + 200|0;
 $35 = $this;
 $36 = $35;
 $37 = $36;
 $38 = ($37);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0|0);
 if (!($40)) {
  STACKTOP = sp;return;
 }
 $34 = $36;
 $41 = $34;
 $42 = $41;
 $33 = $42;
 $43 = $33;
 $44 = ($43);
 $45 = HEAP32[$44>>2]|0;
 $31 = $43;
 $32 = $45;
 $46 = $31;
 while(1) {
  $47 = $32;
  $48 = (($46) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($47|0)!=($49|0);
  if (!($50)) {
   break;
  }
  $30 = $46;
  $51 = $30;
  $52 = (($51) + 8|0);
  $29 = $52;
  $53 = $29;
  $54 = $53;
  $28 = $54;
  $55 = $28;
  $56 = $55;
  $57 = (($46) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + -4|0);
  HEAP32[$57>>2] = $59;
  $27 = $59;
  $60 = $27;
  $24 = $56;
  $25 = $60;
  $61 = $24;
  $62 = $25;
  $tmp$i$i$i$i = $23;
  $tmp1$i$i$i$i = $26;
  ;HEAP8[$tmp$i$i$i$i+0|0]=HEAP8[$tmp1$i$i$i$i+0|0]|0;
  $21 = $61;
  $22 = $62;
  $63 = $21;
  $64 = $22;
  $19 = $63;
  $20 = $64;
  $65 = $20;
  __ZN2cl6DeviceD1Ev($65);
 }
 $18 = $41;
 $66 = $36;
 $17 = $66;
 $67 = $17;
 $68 = (($67) + 8|0);
 $16 = $68;
 $69 = $16;
 $70 = $69;
 $15 = $70;
 $71 = $15;
 $72 = $71;
 $73 = $36;
 $74 = ($73);
 $75 = HEAP32[$74>>2]|0;
 $5 = $36;
 $76 = $5;
 $77 = $76;
 $4 = $77;
 $78 = $4;
 $3 = $78;
 $79 = $3;
 $80 = (($79) + 8|0);
 $2 = $80;
 $81 = $2;
 $82 = $81;
 $1 = $82;
 $83 = $1;
 $84 = ($83);
 $85 = HEAP32[$84>>2]|0;
 $86 = ($78);
 $87 = HEAP32[$86>>2]|0;
 $88 = $85;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 4)&-1;
 $9 = $72;
 $10 = $75;
 $11 = $91;
 $92 = $9;
 $93 = $10;
 $94 = $11;
 $6 = $92;
 $7 = $93;
 $8 = $94;
 $95 = $7;
 $96 = $95;
 __ZdlPv($96);
 $97 = $36;
 $14 = $97;
 $98 = $14;
 $99 = (($98) + 8|0);
 $13 = $99;
 $100 = $13;
 $101 = $100;
 $12 = $101;
 $102 = $12;
 $103 = ($102);
 HEAP32[$103>>2] = 0;
 $104 = $36;
 $105 = (($104) + 4|0);
 HEAP32[$105>>2] = 0;
 $106 = $36;
 $107 = ($106);
 HEAP32[$107>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 104|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  $18 = $14;
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($18);
 }
 $19 = $14;
 $11 = $19;
 $20 = $11;
 $21 = (($20) + 8|0);
 $10 = $21;
 $22 = $10;
 $23 = $22;
 $9 = $23;
 $24 = $9;
 $25 = $24;
 $26 = $13;
 $4 = $25;
 $5 = $26;
 $27 = $4;
 $28 = $5;
 $1 = $27;
 $2 = $28;
 $3 = 0;
 $29 = $2;
 $30 = $29<<2;
 $31 = (__Znwj($30)|0);
 $32 = $31;
 $33 = $14;
 $34 = (($33) + 4|0);
 HEAP32[$34>>2] = $32;
 $35 = $14;
 $36 = ($35);
 HEAP32[$36>>2] = $32;
 $37 = $14;
 $38 = ($37);
 $39 = HEAP32[$38>>2]|0;
 $40 = $13;
 $41 = (($39) + ($40<<2)|0);
 $42 = $14;
 $8 = $42;
 $43 = $8;
 $44 = (($43) + 8|0);
 $7 = $44;
 $45 = $7;
 $46 = $45;
 $6 = $46;
 $47 = $6;
 $48 = ($47);
 HEAP32[$48>>2] = $41;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp$i = 0, $tmp$i1 = 0, $tmp1$i = 0, $tmp1$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $6 = sp + 40|0;
 $9 = sp + 64|0;
 $12 = sp + 88|0;
 $14 = sp + 104|0;
 $19 = sp + 144|0;
 $20 = sp + 152|0;
 $18 = $this;
 $21 = $18;
 $22 = $21;
 $17 = $22;
 $23 = $17;
 $24 = (($23) + 8|0);
 $16 = $24;
 $25 = $16;
 $26 = $25;
 $15 = $26;
 $27 = $15;
 $28 = $27;
 $13 = $28;
 $29 = $13;
 $tmp$i = $12;
 $tmp1$i = $14;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
 $11 = $29;
 $30 = $11;
 $10 = $30;
 HEAP32[$19>>2] = 1073741823;
 $31 = (4294967295 / 2)&-1;
 HEAP32[$20>>2] = $31;
 $7 = $19;
 $8 = $20;
 $32 = $7;
 $33 = $8;
 $tmp$i1 = $6;
 $tmp1$i2 = $9;
 ;HEAP8[$tmp$i1+0|0]=HEAP8[$tmp1$i2+0|0]|0;
 $4 = $32;
 $5 = $33;
 $34 = $5;
 $35 = $4;
 $1 = $6;
 $2 = $34;
 $3 = $35;
 $36 = $2;
 $37 = HEAP32[$36>>2]|0;
 $38 = $3;
 $39 = HEAP32[$38>>2]|0;
 $40 = ($37>>>0)<($39>>>0);
 if ($40) {
  $41 = $5;
  $43 = $41;
 } else {
  $42 = $4;
  $43 = $42;
 }
 $44 = HEAP32[$43>>2]|0;
 STACKTOP = sp;return ($44|0);
}
function __ZN2cl6DeviceD1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN2cl6DeviceD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl6DeviceD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6detail7WrapperIP13_cl_device_idED2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP13_cl_device_idED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 (invoke_ii(77,($2|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable;
 }
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP13_cl_device_idE7releaseEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN2cl6detail16ReferenceHandlerIP13_cl_device_idE7releaseES3_($4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN2cl6detail16ReferenceHandlerIP13_cl_device_idE7releaseES3_($1) {
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $2 = $1;
 STACKTOP = sp;return -33;
}
function __ZN2cl6DeviceC1ERKS0_($this,$device) {
 $this = $this|0;
 $device = $device|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $device;
 $3 = $1;
 $4 = $2;
 __ZN2cl6DeviceC2ERKS0_($3,$4);
 STACKTOP = sp;return;
}
function __ZN2cl6DeviceC2ERKS0_($this,$device) {
 $this = $this|0;
 $device = $device|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $device;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = $5;
 __ZN2cl6detail7WrapperIP13_cl_device_idEC2ERKS4_($4,$6);
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP13_cl_device_idEC2ERKS4_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $rhs;
 $3 = $1;
 $4 = $2;
 $5 = ($4);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($3);
 HEAP32[$7>>2] = $6;
 $8 = ($3);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 (__ZNK2cl6detail7WrapperIP13_cl_device_idE6retainEv($3)|0);
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP13_cl_device_idE6retainEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN2cl6detail16ReferenceHandlerIP13_cl_device_idE6retainES3_($4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN2cl6detail16ReferenceHandlerIP13_cl_device_idE6retainES3_($1) {
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $2 = $1;
 STACKTOP = sp;return -33;
}
function __ZN2cl6DeviceaSERKS0_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $rhs;
 $3 = $1;
 $4 = $2;
 $5 = ($3|0)!=($4|0);
 if (!($5)) {
  STACKTOP = sp;return ($3|0);
 }
 $6 = $3;
 $7 = $2;
 $8 = $7;
 (__ZN2cl6detail7WrapperIP13_cl_device_idEaSERKS4_($6,$8)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl6detail7WrapperIP13_cl_device_idEaSERKS4_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $rhs;
 $3 = $1;
 $4 = ($3);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  (__ZNK2cl6detail7WrapperIP13_cl_device_idE7releaseEv($3)|0);
 }
 $7 = $2;
 $8 = ($7);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($3);
 HEAP32[$10>>2] = $9;
 $11 = ($3);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  STACKTOP = sp;return ($3|0);
 }
 (__ZNK2cl6detail7WrapperIP13_cl_device_idE6retainEv($3)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK2cl6detail7WrapperIP7_cl_memEclEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN2cl7NDRangeC2Ej($this,$size0) {
 $this = $this|0;
 $size0 = $size0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $2 = sp + 8|0;
 $1 = $this;
 HEAP32[$2>>2] = $size0;
 $5 = $1;
 $6 = ($5);
 __ZN2cl6size_tILi3EEC1Ev($6);
 $7 = (($5) + 20|0);
 HEAP32[$7>>2] = 1;
 $8 = ($5);
 $9 = $8;
 __THREW__ = 0;
 invoke_vii(72,($9|0),($2|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = ___cxa_find_matching_catch(-1,-1)|0;
 $13 = tempRet0;
 $3 = $12;
 $4 = $13;
 __ZN2cl6size_tILi3EED1Ev($6);
 $14 = $3;
 $15 = $4;
 ___resumeException($14|0);
 // unreachable;
}
function __ZN2cl6size_tILi3EEC1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN2cl6size_tILi3EEC2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl6vectorIjLj3EE9push_backERKj($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $x;
 $3 = $1;
 $4 = (__ZNK2cl6vectorIjLj3EE4sizeEv($3)|0);
 $5 = ($4>>>0)<(3);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = (($3) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1)|0;
 HEAP32[$6>>2] = $8;
 $9 = $2;
 $10 = HEAP32[$9>>2]|0;
 $11 = (($3) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($3);
 $14 = (($13) + ($12<<2)|0);
 HEAP32[$14>>2] = $10;
 $15 = (($3) + 16|0);
 HEAP8[$15] = 0;
 STACKTOP = sp;return;
}
function __ZN2cl6size_tILi3EED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN2cl6size_tILi3EED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl6size_tILi3EED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6vectorIjLj3EED2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl6vectorIjLj3EED2Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 STACKTOP = sp;return;
}
function __ZNK2cl6vectorIjLj3EE4sizeEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 1)|0;
 STACKTOP = sp;return ($5|0);
}
function __ZN2cl6size_tILi3EEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6vectorIjLj3EEC2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl6vectorIjLj3EEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = (($2) + 12|0);
 HEAP32[$3>>2] = -1;
 $4 = (($2) + 16|0);
 HEAP8[$4] = 1;
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP10_cl_kernelEclEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZNK2cl7NDRange10dimensionsEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZNK2cl7NDRangecvPKjEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = $3;
 $5 = (__ZNK2cl6vectorIjLj3EEcvPKjEv($4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZNK2cl6vectorIjLj3EEcvPKjEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = ($3);
 STACKTOP = sp;return ($4|0);
}
function __ZN2cl6BufferC2ERKS0_($this,$buffer) {
 $this = $this|0;
 $buffer = $buffer|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $buffer;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = $5;
 __ZN2cl6MemoryC2ERKS0_($4,$6);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZNSt3__113__vector_baseIN2cl8PlatformENS_9allocatorIS2_EEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN2cl8PlatformENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $9 = 0, $tmp$i$i$i = 0, $tmp1$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 232|0;
 $18 = sp + 136|0;
 $21 = sp + 160|0;
 $29 = $this;
 $30 = $29;
 $31 = ($30);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $34 = $28;
 $35 = ($34);
 $36 = HEAP32[$35>>2]|0;
 $26 = $34;
 $27 = $36;
 $37 = $26;
 while(1) {
  $38 = $27;
  $39 = (($37) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($38|0)!=($40|0);
  if (!($41)) {
   break;
  }
  $25 = $37;
  $42 = $25;
  $43 = (($42) + 8|0);
  $24 = $43;
  $44 = $24;
  $45 = $44;
  $23 = $45;
  $46 = $23;
  $47 = $46;
  $48 = (($37) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + -4|0);
  HEAP32[$48>>2] = $50;
  $22 = $50;
  $51 = $22;
  $19 = $47;
  $20 = $51;
  $52 = $19;
  $53 = $20;
  $tmp$i$i$i = $18;
  $tmp1$i$i$i = $21;
  ;HEAP8[$tmp$i$i$i+0|0]=HEAP8[$tmp1$i$i$i+0|0]|0;
  $16 = $52;
  $17 = $53;
  $54 = $16;
  $55 = $17;
  $14 = $54;
  $15 = $55;
  $56 = $15;
  __ZN2cl8PlatformD1Ev($56);
 }
 $13 = $30;
 $57 = $13;
 $58 = (($57) + 8|0);
 $12 = $58;
 $59 = $12;
 $60 = $59;
 $11 = $60;
 $61 = $11;
 $62 = $61;
 $63 = ($30);
 $64 = HEAP32[$63>>2]|0;
 $4 = $30;
 $65 = $4;
 $3 = $65;
 $66 = $3;
 $67 = (($66) + 8|0);
 $2 = $67;
 $68 = $2;
 $69 = $68;
 $1 = $69;
 $70 = $1;
 $71 = ($70);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($65);
 $74 = HEAP32[$73>>2]|0;
 $75 = $72;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $8 = $62;
 $9 = $64;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $83 = $82;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZN2cl8PlatformD1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN2cl8PlatformD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN2cl8PlatformD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6detail7WrapperIP15_cl_platform_idED2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP15_cl_platform_idED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 (invoke_ii(78,($2|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable;
 }
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP15_cl_platform_idE7releaseEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN2cl6detail16ReferenceHandlerIP15_cl_platform_idE7releaseES3_($4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN2cl6detail16ReferenceHandlerIP15_cl_platform_idE7releaseES3_($1) {
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $2 = $1;
 STACKTOP = sp;return -32;
}
function __ZNSt3__16vectorIN2cl6DeviceENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZNSt3__113__vector_baseIN2cl6DeviceENS_9allocatorIS2_EEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN2cl6DeviceENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $9 = 0, $tmp$i$i$i = 0, $tmp1$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 232|0;
 $18 = sp + 136|0;
 $21 = sp + 160|0;
 $29 = $this;
 $30 = $29;
 $31 = ($30);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $34 = $28;
 $35 = ($34);
 $36 = HEAP32[$35>>2]|0;
 $26 = $34;
 $27 = $36;
 $37 = $26;
 while(1) {
  $38 = $27;
  $39 = (($37) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($38|0)!=($40|0);
  if (!($41)) {
   break;
  }
  $25 = $37;
  $42 = $25;
  $43 = (($42) + 8|0);
  $24 = $43;
  $44 = $24;
  $45 = $44;
  $23 = $45;
  $46 = $23;
  $47 = $46;
  $48 = (($37) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + -4|0);
  HEAP32[$48>>2] = $50;
  $22 = $50;
  $51 = $22;
  $19 = $47;
  $20 = $51;
  $52 = $19;
  $53 = $20;
  $tmp$i$i$i = $18;
  $tmp1$i$i$i = $21;
  ;HEAP8[$tmp$i$i$i+0|0]=HEAP8[$tmp1$i$i$i+0|0]|0;
  $16 = $52;
  $17 = $53;
  $54 = $16;
  $55 = $17;
  $14 = $54;
  $15 = $55;
  $56 = $15;
  __ZN2cl6DeviceD1Ev($56);
 }
 $13 = $30;
 $57 = $13;
 $58 = (($57) + 8|0);
 $12 = $58;
 $59 = $12;
 $60 = $59;
 $11 = $60;
 $61 = $11;
 $62 = $61;
 $63 = ($30);
 $64 = HEAP32[$63>>2]|0;
 $4 = $30;
 $65 = $4;
 $3 = $65;
 $66 = $3;
 $67 = (($66) + 8|0);
 $2 = $67;
 $68 = $2;
 $69 = $68;
 $1 = $69;
 $70 = $1;
 $71 = ($70);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($65);
 $74 = HEAP32[$73>>2]|0;
 $75 = $72;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $8 = $62;
 $9 = $64;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $83 = $82;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZNSt3__113__vector_baseINS_4pairIPKcjEENS_9allocatorIS4_EEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl6BufferC2ERKNS_7ContextEyjPvPi($this,$context,$1,$2,$size,$host_ptr,$err) {
 $this = $this|0;
 $context = $context|0;
 $1 = $1|0;
 $2 = $2|0;
 $size = $size|0;
 $host_ptr = $host_ptr|0;
 $err = $err|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 72|0;
 $5 = sp + 16|0;
 $error = sp + 48|0;
 $3 = $this;
 $4 = $context;
 $11 = $5;
 $12 = $11;
 HEAP32[$12>>2] = $1;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $2;
 $6 = $size;
 $7 = $host_ptr;
 $8 = $err;
 $15 = $3;
 $16 = $15;
 __ZN2cl6MemoryC2Ev($16);
 $17 = $4;
 $18 = $17;
 __THREW__ = 0;
 $19 = (invoke_ii(79,($18|0))|0);
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 do {
  if (!($21)) {
   $22 = $5;
   $23 = $22;
   $24 = HEAP32[$23>>2]|0;
   $25 = (($22) + 4)|0;
   $26 = $25;
   $27 = HEAP32[$26>>2]|0;
   $28 = $6;
   $29 = $7;
   __THREW__ = 0;
   $30 = (invoke_iiiiiii(2,($19|0),($24|0),($27|0),($28|0),($29|0),($error|0))|0);
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    break;
   }
   $33 = $15;
   $34 = ($33);
   HEAP32[$34>>2] = $30;
   $35 = HEAP32[$error>>2]|0;
   __THREW__ = 0;
   (invoke_iii(33,($35|0),((3288)|0))|0);
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if ($37) {
    break;
   }
   $38 = $8;
   $39 = ($38|0)!=(0|0);
   if (!($39)) {
    STACKTOP = sp;return;
   }
   $40 = HEAP32[$error>>2]|0;
   $41 = $8;
   HEAP32[$41>>2] = $40;
   STACKTOP = sp;return;
  }
 } while(0);
 $42 = ___cxa_find_matching_catch(-1,-1)|0;
 $43 = tempRet0;
 $9 = $42;
 $10 = $43;
 $44 = $15;
 __ZN2cl6MemoryD2Ev($44);
 $45 = $9;
 $46 = $10;
 ___resumeException($45|0);
 // unreachable;
}
function __ZN2cl6MemoryC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6detail7WrapperIP7_cl_memEC2Ev($3);
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP11_cl_contextEclEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN2cl6detail7WrapperIP7_cl_memEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN2cl8BufferGLD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6BufferD2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl6BufferD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6MemoryD2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl8BufferGLC2ERKNS_7ContextEyjPi($this,$context,$1,$2,$bufobj,$err) {
 $this = $this|0;
 $context = $context|0;
 $1 = $1|0;
 $2 = $2|0;
 $bufobj = $bufobj|0;
 $err = $err|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $5 = sp + 16|0;
 $error = sp + 40|0;
 $3 = $this;
 $4 = $context;
 $10 = $5;
 $11 = $10;
 HEAP32[$11>>2] = $1;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $2;
 $6 = $bufobj;
 $7 = $err;
 $14 = $3;
 $15 = $14;
 __ZN2cl6BufferC2Ev($15);
 $16 = $4;
 $17 = $16;
 __THREW__ = 0;
 $18 = (invoke_ii(79,($17|0))|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 do {
  if (!($20)) {
   $21 = $5;
   $22 = $21;
   $23 = HEAP32[$22>>2]|0;
   $24 = (($21) + 4)|0;
   $25 = $24;
   $26 = HEAP32[$25>>2]|0;
   $27 = $6;
   __THREW__ = 0;
   $28 = (invoke_iiiiii(15,($18|0),($23|0),($26|0),($27|0),($error|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if ($30) {
    break;
   }
   $31 = $14;
   $32 = ($31);
   HEAP32[$32>>2] = $28;
   $33 = HEAP32[$error>>2]|0;
   __THREW__ = 0;
   (invoke_iii(33,($33|0),((3304)|0))|0);
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if ($35) {
    break;
   }
   $36 = $7;
   $37 = ($36|0)!=(0|0);
   if (!($37)) {
    STACKTOP = sp;return;
   }
   $38 = HEAP32[$error>>2]|0;
   $39 = $7;
   HEAP32[$39>>2] = $38;
   STACKTOP = sp;return;
  }
 } while(0);
 $40 = ___cxa_find_matching_catch(-1,-1)|0;
 $41 = tempRet0;
 $8 = $40;
 $9 = $41;
 $42 = $14;
 __ZN2cl6BufferD2Ev($42);
 $43 = $8;
 $44 = $9;
 ___resumeException($43|0);
 // unreachable;
}
function __ZN2cl6BufferC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6MemoryC2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl6MemoryaSERKS0_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $rhs;
 $3 = $1;
 $4 = $2;
 $5 = ($3|0)!=($4|0);
 if (!($5)) {
  STACKTOP = sp;return ($3|0);
 }
 $6 = $3;
 $7 = $2;
 $8 = $7;
 (__ZN2cl6detail7WrapperIP7_cl_memEaSERKS4_($6,$8)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl6detail7WrapperIP7_cl_memEaSERKS4_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $rhs;
 $3 = $1;
 $4 = ($3);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  (__ZNK2cl6detail7WrapperIP7_cl_memE7releaseEv($3)|0);
 }
 $7 = $2;
 $8 = ($7);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($3);
 HEAP32[$10>>2] = $9;
 $11 = ($3);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  STACKTOP = sp;return ($3|0);
 }
 (__ZNK2cl6detail7WrapperIP7_cl_memE6retainEv($3)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl12CommandQueueC2ERKNS_7ContextERKNS_6DeviceEyPi($this,$context,$device,$1,$2,$err) {
 $this = $this|0;
 $context = $context|0;
 $device = $device|0;
 $1 = $1|0;
 $2 = $2|0;
 $err = $err|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $6 = sp + 24|0;
 $error = sp + 40|0;
 $3 = $this;
 $4 = $context;
 $5 = $device;
 $10 = $6;
 $11 = $10;
 HEAP32[$11>>2] = $1;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $2;
 $7 = $err;
 $14 = $3;
 $15 = $14;
 __ZN2cl6detail7WrapperIP17_cl_command_queueEC2Ev($15);
 $16 = $4;
 $17 = $16;
 __THREW__ = 0;
 $18 = (invoke_ii(79,($17|0))|0);
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 do {
  if (!($20)) {
   $21 = $5;
   $22 = $21;
   __THREW__ = 0;
   $23 = (invoke_ii(80,($22|0))|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    break;
   }
   $26 = $6;
   $27 = $26;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($26) + 4)|0;
   $30 = $29;
   $31 = HEAP32[$30>>2]|0;
   __THREW__ = 0;
   $32 = (invoke_iiiiii(16,($18|0),($23|0),($28|0),($31|0),($error|0))|0);
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    break;
   }
   $35 = $14;
   $36 = ($35);
   HEAP32[$36>>2] = $32;
   $37 = HEAP32[$error>>2]|0;
   __THREW__ = 0;
   (invoke_iii(33,($37|0),((3328)|0))|0);
   $38 = __THREW__; __THREW__ = 0;
   $39 = $38&1;
   if ($39) {
    break;
   }
   $40 = $7;
   $41 = ($40|0)!=(0|0);
   if (!($41)) {
    STACKTOP = sp;return;
   }
   $42 = HEAP32[$error>>2]|0;
   $43 = $7;
   HEAP32[$43>>2] = $42;
   STACKTOP = sp;return;
  }
 } while(0);
 $44 = ___cxa_find_matching_catch(-1,-1)|0;
 $45 = tempRet0;
 $8 = $44;
 $9 = $45;
 $46 = $14;
 __ZN2cl6detail7WrapperIP17_cl_command_queueED2Ev($46);
 $47 = $8;
 $48 = $9;
 ___resumeException($47|0);
 // unreachable;
}
function __ZN2cl6detail7WrapperIP17_cl_command_queueEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP17_cl_command_queueED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 (invoke_ii(81,($2|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable;
 }
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP17_cl_command_queueE7releaseEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN2cl6detail16ReferenceHandlerIP17_cl_command_queueE7releaseES3_($4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN2cl6detail16ReferenceHandlerIP17_cl_command_queueE7releaseES3_($queue) {
 $queue = $queue|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $queue;
 $2 = $1;
 $3 = (_clReleaseCommandQueue(($2|0))|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl6detail7WrapperIP17_cl_command_queueEaSERKS4_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $rhs;
 $3 = $1;
 $4 = ($3);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  (__ZNK2cl6detail7WrapperIP17_cl_command_queueE7releaseEv($3)|0);
 }
 $7 = $2;
 $8 = ($7);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($3);
 HEAP32[$10>>2] = $9;
 $11 = ($3);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  STACKTOP = sp;return ($3|0);
 }
 (__ZNK2cl6detail7WrapperIP17_cl_command_queueE6retainEv($3)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK2cl6detail7WrapperIP17_cl_command_queueE6retainEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN2cl6detail16ReferenceHandlerIP17_cl_command_queueE6retainES3_($4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN2cl6detail16ReferenceHandlerIP17_cl_command_queueE6retainES3_($queue) {
 $queue = $queue|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $queue;
 $2 = $1;
 $3 = (_clRetainCommandQueue(($2|0))|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl6KernelC2ERKNS_7ProgramEPKcPi($this,$program,$name,$err) {
 $this = $this|0;
 $program = $program|0;
 $name = $name|0;
 $err = $err|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 56|0;
 $error = sp + 32|0;
 $1 = $this;
 $2 = $program;
 $3 = $name;
 $4 = $err;
 $7 = $1;
 $8 = $7;
 __ZN2cl6detail7WrapperIP10_cl_kernelEC2Ev($8);
 $9 = $2;
 $10 = $9;
 __THREW__ = 0;
 $11 = (invoke_ii(82,($10|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 do {
  if (!($13)) {
   $14 = $3;
   __THREW__ = 0;
   $15 = (invoke_iiii(33,($11|0),($14|0),($error|0))|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    break;
   }
   $18 = $7;
   $19 = ($18);
   HEAP32[$19>>2] = $15;
   $20 = HEAP32[$error>>2]|0;
   __THREW__ = 0;
   (invoke_iii(33,($20|0),((3352)|0))|0);
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    break;
   }
   $23 = $4;
   $24 = ($23|0)!=(0|0);
   if (!($24)) {
    STACKTOP = sp;return;
   }
   $25 = HEAP32[$error>>2]|0;
   $26 = $4;
   HEAP32[$26>>2] = $25;
   STACKTOP = sp;return;
  }
 } while(0);
 $27 = ___cxa_find_matching_catch(-1,-1)|0;
 $28 = tempRet0;
 $5 = $27;
 $6 = $28;
 $29 = $7;
 __ZN2cl6detail7WrapperIP10_cl_kernelED2Ev($29);
 $30 = $5;
 $31 = $6;
 ___resumeException($30|0);
 // unreachable;
}
function __ZN2cl6detail7WrapperIP10_cl_kernelEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP11_cl_programEclEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function __ZN2cl6detail7WrapperIP10_cl_kernelED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 (invoke_ii(83,($2|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable;
 }
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP10_cl_kernelE7releaseEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN2cl6detail16ReferenceHandlerIP10_cl_kernelE7releaseES3_($4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN2cl6detail16ReferenceHandlerIP10_cl_kernelE7releaseES3_($kernel) {
 $kernel = $kernel|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $kernel;
 $2 = $1;
 $3 = (_clReleaseKernel(($2|0))|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl6detail7WrapperIP10_cl_kernelEaSERKS4_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $rhs;
 $3 = $1;
 $4 = ($3);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  (__ZNK2cl6detail7WrapperIP10_cl_kernelE7releaseEv($3)|0);
 }
 $7 = $2;
 $8 = ($7);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($3);
 HEAP32[$10>>2] = $9;
 $11 = ($3);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  STACKTOP = sp;return ($3|0);
 }
 (__ZNK2cl6detail7WrapperIP10_cl_kernelE6retainEv($3)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK2cl6detail7WrapperIP10_cl_kernelE6retainEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN2cl6detail16ReferenceHandlerIP10_cl_kernelE6retainES3_($4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN2cl6detail16ReferenceHandlerIP10_cl_kernelE6retainES3_($kernel) {
 $kernel = $kernel|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $kernel;
 $2 = $1;
 $3 = (_clRetainKernel(($2|0))|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl5ErrorD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZNSt9exceptionD2Ev(($3|0));
 STACKTOP = sp;return;
}
function __ZN2cl5ErrorC2ERKS0_($this,$1) {
 $this = $this|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = $this;
 $3 = $1;
 $4 = $2;
 $5 = $4;
 $6 = $3;
 $7 = $6;
 __ZNSt9exceptionC2ERKS_($5,$7);
 $8 = $4;
 $9 = ((2896) + 8|0);
 HEAP32[$8>>2] = $9;
 $10 = (($4) + 4|0);
 $11 = $3;
 $12 = (($11) + 4|0);
 $13 = $10;
 $14 = $12;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;HEAP32[$13+4>>2]=HEAP32[$14+4>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt9exceptionC2ERKS_($this,$1) {
 $this = $this|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $2 = $this;
 $3 = $1;
 $4 = $2;
 $5 = $4;
 $6 = ((__ZTVSt9exception) + 8|0);
 HEAP32[$5>>2] = $6;
 STACKTOP = sp;return;
}
function __ZN2cl7ProgramC2ERKNS_7ContextERKNSt3__16vectorINS4_4pairIPKcjEENS4_9allocatorIS9_EEEEPi($this,$context,$sources,$err) {
 $this = $this|0;
 $context = $context|0;
 $sources = $sources|0;
 $err = $err|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $error = 0, $i = 0, $lengths = 0, $n = 0, $strings = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $error = sp + 72|0;
 $6 = $this;
 $7 = $context;
 $8 = $sources;
 $9 = $err;
 $12 = $6;
 $13 = $12;
 __ZN2cl6detail7WrapperIP11_cl_programEC2Ev($13);
 $14 = $8;
 $5 = $14;
 $15 = $5;
 $16 = $15;
 $17 = (($16) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $15;
 $20 = ($19);
 $21 = HEAP32[$20>>2]|0;
 $22 = $18;
 $23 = $21;
 $24 = (($22) - ($23))|0;
 $25 = (($24|0) / 8)&-1;
 $n = $25;
 $26 = $n;
 $27 = $26<<2;
 $28 = STACKTOP; STACKTOP = STACKTOP + ((((1*$27)|0)+7)&-8)|0;
 $29 = $28;
 $lengths = $29;
 $30 = $n;
 $31 = $30<<2;
 $32 = STACKTOP; STACKTOP = STACKTOP + ((((1*$31)|0)+7)&-8)|0;
 $33 = $32;
 $strings = $33;
 $i = 0;
 while(1) {
  $34 = $i;
  $35 = $n;
  $36 = ($34>>>0)<($35>>>0);
  if (!($36)) {
   break;
  }
  $37 = $8;
  $38 = $i;
  $3 = $37;
  $4 = $38;
  $39 = $3;
  $40 = $4;
  $41 = $39;
  $42 = ($41);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($40<<3)|0);
  $45 = ($44);
  $46 = HEAP32[$45>>2]|0;
  $47 = $i;
  $48 = $strings;
  $49 = (($48) + ($47<<2)|0);
  HEAP32[$49>>2] = $46;
  $50 = $8;
  $51 = $i;
  $1 = $50;
  $2 = $51;
  $52 = $1;
  $53 = $2;
  $54 = $52;
  $55 = ($54);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + ($53<<3)|0);
  $58 = (($57) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $i;
  $61 = $lengths;
  $62 = (($61) + ($60<<2)|0);
  HEAP32[$62>>2] = $59;
  $63 = $i;
  $64 = (($63) + 1)|0;
  $i = $64;
 }
 $68 = $7;
 $69 = $68;
 __THREW__ = 0;
 $70 = (invoke_ii(79,($69|0))|0);
 $71 = __THREW__; __THREW__ = 0;
 $72 = $71&1;
 do {
  if (!($72)) {
   $73 = $n;
   $74 = $strings;
   $75 = $lengths;
   __THREW__ = 0;
   $76 = (invoke_iiiiii(17,($70|0),($73|0),($74|0),($75|0),($error|0))|0);
   $77 = __THREW__; __THREW__ = 0;
   $78 = $77&1;
   if ($78) {
    break;
   }
   $79 = $12;
   $80 = ($79);
   HEAP32[$80>>2] = $76;
   $81 = HEAP32[$error>>2]|0;
   __THREW__ = 0;
   (invoke_iii(33,($81|0),((3384)|0))|0);
   $82 = __THREW__; __THREW__ = 0;
   $83 = $82&1;
   if ($83) {
    break;
   }
   $84 = $9;
   $85 = ($84|0)!=(0|0);
   if (!($85)) {
    STACKTOP = sp;return;
   }
   $86 = HEAP32[$error>>2]|0;
   $87 = $9;
   HEAP32[$87>>2] = $86;
   STACKTOP = sp;return;
  }
 } while(0);
 $65 = ___cxa_find_matching_catch(-1,-1)|0;
 $66 = tempRet0;
 $10 = $65;
 $11 = $66;
 $67 = $12;
 __ZN2cl6detail7WrapperIP11_cl_programED2Ev($67);
 $88 = $10;
 $89 = $11;
 ___resumeException($88|0);
 // unreachable;
}
function __ZN2cl6detail7WrapperIP11_cl_programEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP11_cl_programED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 (invoke_ii(84,($2|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable;
 }
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP11_cl_programE7releaseEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN2cl6detail16ReferenceHandlerIP11_cl_programE7releaseES3_($4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN2cl6detail16ReferenceHandlerIP11_cl_programE7releaseES3_($program) {
 $program = $program|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $program;
 $2 = $1;
 $3 = (_clReleaseProgram(($2|0))|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl6detail7WrapperIP11_cl_programEaSERKS4_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $rhs;
 $3 = $1;
 $4 = ($3);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  (__ZNK2cl6detail7WrapperIP11_cl_programE7releaseEv($3)|0);
 }
 $7 = $2;
 $8 = ($7);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($3);
 HEAP32[$10>>2] = $9;
 $11 = ($3);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  STACKTOP = sp;return ($3|0);
 }
 (__ZNK2cl6detail7WrapperIP11_cl_programE6retainEv($3)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK2cl6detail7WrapperIP11_cl_programE6retainEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN2cl6detail16ReferenceHandlerIP11_cl_programE6retainES3_($4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN2cl6detail16ReferenceHandlerIP11_cl_programE6retainES3_($program) {
 $program = $program|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $program;
 $2 = $1;
 $3 = (_clRetainProgram(($2|0))|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl7ContextC2EyPiPFvPKcPKvjPvES6_S1_($this,$1,$2,$properties,$notifyFptr,$data,$err) {
 $this = $this|0;
 $1 = $1|0;
 $2 = $2|0;
 $properties = $properties|0;
 $notifyFptr = $notifyFptr|0;
 $data = $data|0;
 $err = $err|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $error = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 72|0;
 $4 = sp + 8|0;
 $error = sp + 48|0;
 $3 = $this;
 $11 = $4;
 $12 = $11;
 HEAP32[$12>>2] = $1;
 $13 = (($11) + 4)|0;
 $14 = $13;
 HEAP32[$14>>2] = $2;
 $5 = $properties;
 $6 = $notifyFptr;
 $7 = $data;
 $8 = $err;
 $15 = $3;
 $16 = $15;
 __ZN2cl6detail7WrapperIP11_cl_contextEC2Ev($16);
 $17 = $5;
 $18 = $4;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = $6;
 $25 = $7;
 __THREW__ = 0;
 $26 = (invoke_iiiiiii(3,($17|0),($20|0),($23|0),($24|0),($25|0),($error|0))|0);
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 do {
  if (!($28)) {
   $29 = $15;
   $30 = ($29);
   HEAP32[$30>>2] = $26;
   $31 = HEAP32[$error>>2]|0;
   __THREW__ = 0;
   (invoke_iii(33,($31|0),((3416)|0))|0);
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    break;
   }
   $34 = $8;
   $35 = ($34|0)!=(0|0);
   if (!($35)) {
    STACKTOP = sp;return;
   }
   $36 = HEAP32[$error>>2]|0;
   $37 = $8;
   HEAP32[$37>>2] = $36;
   STACKTOP = sp;return;
  }
 } while(0);
 $38 = ___cxa_find_matching_catch(-1,-1)|0;
 $39 = tempRet0;
 $9 = $38;
 $10 = $39;
 $40 = $15;
 __ZN2cl6detail7WrapperIP11_cl_contextED2Ev($40);
 $41 = $9;
 $42 = $10;
 ___resumeException($41|0);
 // unreachable;
}
function __ZN2cl6detail7WrapperIP11_cl_contextEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP11_cl_contextED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 (invoke_ii(85,($2|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable;
 }
 STACKTOP = sp;return;
}
function __ZNK2cl6detail7WrapperIP11_cl_contextE7releaseEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN2cl6detail16ReferenceHandlerIP11_cl_contextE7releaseES3_($4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN2cl6detail16ReferenceHandlerIP11_cl_contextE7releaseES3_($context) {
 $context = $context|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $context;
 $2 = $1;
 $3 = (_clReleaseContext(($2|0))|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl6detail7WrapperIP11_cl_contextEaSERKS4_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $rhs;
 $3 = $1;
 $4 = ($3);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  (__ZNK2cl6detail7WrapperIP11_cl_contextE7releaseEv($3)|0);
 }
 $7 = $2;
 $8 = ($7);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($3);
 HEAP32[$10>>2] = $9;
 $11 = ($3);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  STACKTOP = sp;return ($3|0);
 }
 (__ZNK2cl6detail7WrapperIP11_cl_contextE6retainEv($3)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK2cl6detail7WrapperIP11_cl_contextE6retainEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN2cl6detail16ReferenceHandlerIP11_cl_contextE6retainES3_($4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN2cl6detail16ReferenceHandlerIP11_cl_contextE6retainES3_($context) {
 $context = $context|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $context;
 $2 = $1;
 $3 = (_clRetainContext(($2|0))|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE6assignIPP15_cl_platform_idEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIS2_NS_15iterator_traitsISB_E9referenceEEE5valueEvE4typeESB_SB_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cap$i = 0, $__growing = 0, $__m = 0, $__mid = 0, $__ms$i = 0, $__new_size = 0, $tmp$i = 0, $tmp$i$i = 0, $tmp$i$i$i = 0;
 var $tmp$i1 = 0, $tmp1$i = 0, $tmp1$i$i = 0, $tmp1$i$i$i = 0, $tmp1$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0;
 $5 = sp + 32|0;
 $8 = sp + 56|0;
 $22 = sp + 168|0;
 $31 = sp + 240|0;
 $34 = sp + 264|0;
 $41 = sp + 320|0;
 $44 = sp + 344|0;
 $52 = sp + 408|0;
 $53 = sp + 432|0;
 $62 = sp + 504|0;
 $65 = sp + 528|0;
 $__mid = sp + 568|0;
 $66 = $this;
 $67 = $__first;
 $68 = $__last;
 $69 = $66;
 $70 = $67;
 $71 = $68;
 $63 = $70;
 $64 = $71;
 $72 = $63;
 $73 = $64;
 $tmp$i = $62;
 $tmp1$i = $65;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
 $60 = $72;
 $61 = $73;
 $74 = $61;
 $75 = $60;
 $76 = $74;
 $77 = $75;
 $78 = (($76) - ($77))|0;
 $79 = (($78|0) / 4)&-1;
 $__new_size = $79;
 $80 = $__new_size;
 $59 = $69;
 $81 = $59;
 $82 = $81;
 $58 = $82;
 $83 = $58;
 $57 = $83;
 $84 = $57;
 $85 = (($84) + 8|0);
 $56 = $85;
 $86 = $56;
 $87 = $86;
 $55 = $87;
 $88 = $55;
 $89 = ($88);
 $90 = HEAP32[$89>>2]|0;
 $91 = ($83);
 $92 = HEAP32[$91>>2]|0;
 $93 = $90;
 $94 = $92;
 $95 = (($93) - ($94))|0;
 $96 = (($95|0) / 4)&-1;
 $97 = ($80>>>0)<=($96>>>0);
 if (!($97)) {
  __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE10deallocateEv($69);
  $186 = $__new_size;
  $51 = $69;
  HEAP32[$52>>2] = $186;
  $187 = $51;
  $188 = (__ZNKSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE8max_sizeEv($187)|0);
  $__ms$i = $188;
  $189 = HEAP32[$52>>2]|0;
  $190 = $__ms$i;
  $191 = ($189>>>0)>($190>>>0);
  if ($191) {
   $192 = $187;
   __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($192);
  }
  $49 = $187;
  $193 = $49;
  $194 = $193;
  $48 = $194;
  $195 = $48;
  $47 = $195;
  $196 = $47;
  $197 = (($196) + 8|0);
  $46 = $197;
  $198 = $46;
  $199 = $198;
  $45 = $199;
  $200 = $45;
  $201 = ($200);
  $202 = HEAP32[$201>>2]|0;
  $203 = ($195);
  $204 = HEAP32[$203>>2]|0;
  $205 = $202;
  $206 = $204;
  $207 = (($205) - ($206))|0;
  $208 = (($207|0) / 4)&-1;
  $__cap$i = $208;
  $209 = $__cap$i;
  $210 = $__ms$i;
  $211 = (($210>>>0) / 2)&-1;
  $212 = ($209>>>0)>=($211>>>0);
  if ($212) {
   $213 = $__ms$i;
   $50 = $213;
  } else {
   $214 = $__cap$i;
   $215 = $214<<1;
   HEAP32[$53>>2] = $215;
   $42 = $53;
   $43 = $52;
   $216 = $42;
   $217 = $43;
   $tmp$i$i = $41;
   $tmp1$i$i = $44;
   ;HEAP8[$tmp$i$i+0|0]=HEAP8[$tmp1$i$i+0|0]|0;
   $39 = $216;
   $40 = $217;
   $218 = $39;
   $219 = $40;
   $36 = $41;
   $37 = $218;
   $38 = $219;
   $220 = $37;
   $221 = HEAP32[$220>>2]|0;
   $222 = $38;
   $223 = HEAP32[$222>>2]|0;
   $224 = ($221>>>0)<($223>>>0);
   if ($224) {
    $225 = $40;
    $227 = $225;
   } else {
    $226 = $39;
    $227 = $226;
   }
   $228 = HEAP32[$227>>2]|0;
   $50 = $228;
  }
  $229 = $50;
  __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE8allocateEj($69,$229);
  $230 = $67;
  $231 = $68;
  __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE18__construct_at_endIPP15_cl_platform_idEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_($69,$230,$231);
  STACKTOP = sp;return;
 }
 $98 = $68;
 HEAP32[$__mid>>2] = $98;
 $__growing = 0;
 $99 = $__new_size;
 $54 = $69;
 $100 = $54;
 $101 = $100;
 $102 = (($101) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $100;
 $105 = ($104);
 $106 = HEAP32[$105>>2]|0;
 $107 = $103;
 $108 = $106;
 $109 = (($107) - ($108))|0;
 $110 = (($109|0) / 4)&-1;
 $111 = ($99>>>0)>($110>>>0);
 if ($111) {
  $__growing = 1;
  $112 = $67;
  HEAP32[$__mid>>2] = $112;
  $35 = $69;
  $113 = $35;
  $114 = $113;
  $115 = (($114) + 4|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $113;
  $118 = ($117);
  $119 = HEAP32[$118>>2]|0;
  $120 = $116;
  $121 = $119;
  $122 = (($120) - ($121))|0;
  $123 = (($122|0) / 4)&-1;
  $32 = $__mid;
  $33 = $123;
  $124 = $32;
  $125 = $33;
  $tmp$i1 = $31;
  $tmp1$i2 = $34;
  ;HEAP8[$tmp$i1+0|0]=HEAP8[$tmp1$i2+0|0]|0;
  $29 = $124;
  $30 = $125;
  $126 = $30;
  $127 = $29;
  $128 = HEAP32[$127>>2]|0;
  $129 = (($128) + ($126<<2)|0);
  HEAP32[$127>>2] = $129;
 }
 $130 = $67;
 $131 = HEAP32[$__mid>>2]|0;
 $132 = $69;
 $133 = ($132);
 $134 = HEAP32[$133>>2]|0;
 $26 = $130;
 $27 = $131;
 $28 = $134;
 $135 = $26;
 $25 = $135;
 $136 = $25;
 $137 = $27;
 $18 = $137;
 $138 = $18;
 $139 = $28;
 $17 = $139;
 $140 = $17;
 $19 = $136;
 $20 = $138;
 $21 = $140;
 while(1) {
  $141 = $19;
  $142 = $20;
  $143 = ($141|0)!=($142|0);
  if (!($143)) {
   break;
  }
  $144 = $21;
  $145 = $19;
  $146 = HEAP32[$145>>2]|0;
  __ZN2cl8PlatformC1EP15_cl_platform_id($22,$146);
  __THREW__ = 0;
  (invoke_iii(34,($144|0),($22|0))|0);
  $147 = __THREW__; __THREW__ = 0;
  $148 = $147&1;
  if ($148) {
   label = 8;
   break;
  }
  __ZN2cl8PlatformD1Ev($22);
  $149 = $19;
  $150 = (($149) + 4|0);
  $19 = $150;
  $151 = $21;
  $152 = (($151) + 4|0);
  $21 = $152;
 }
 if ((label|0) == 8) {
  $153 = ___cxa_find_matching_catch(-1,-1)|0;
  $154 = tempRet0;
  $23 = $153;
  $24 = $154;
  __ZN2cl8PlatformD1Ev($22);
  $155 = $23;
  $156 = $24;
  ___resumeException($155|0);
  // unreachable;
 }
 $157 = $21;
 $__m = $157;
 $158 = $__growing;
 $159 = $158&1;
 if ($159) {
  $160 = HEAP32[$__mid>>2]|0;
  $161 = $68;
  __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE18__construct_at_endIPP15_cl_platform_idEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_($69,$160,$161);
 } else {
  $162 = $__m;
  $15 = $69;
  $16 = $162;
  $163 = $15;
  $164 = $163;
  $165 = $16;
  $13 = $164;
  $14 = $165;
  $166 = $13;
  while(1) {
   $167 = $14;
   $168 = (($166) + 4|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = ($167|0)!=($169|0);
   if (!($170)) {
    break;
   }
   $12 = $166;
   $171 = $12;
   $172 = (($171) + 8|0);
   $11 = $172;
   $173 = $11;
   $174 = $173;
   $10 = $174;
   $175 = $10;
   $176 = $175;
   $177 = (($166) + 4|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = (($178) + -4|0);
   HEAP32[$177>>2] = $179;
   $9 = $179;
   $180 = $9;
   $6 = $176;
   $7 = $180;
   $181 = $6;
   $182 = $7;
   $tmp$i$i$i = $5;
   $tmp1$i$i$i = $8;
   ;HEAP8[$tmp$i$i$i+0|0]=HEAP8[$tmp1$i$i$i+0|0]|0;
   $3 = $181;
   $4 = $182;
   $183 = $3;
   $184 = $4;
   $1 = $183;
   $2 = $184;
   $185 = $2;
   __ZN2cl8PlatformD1Ev($185);
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE18__construct_at_endIPP15_cl_platform_idEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESB_SB_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0;
 var $tmp$i = 0, $tmp1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $10 = sp + 72|0;
 $15 = sp + 112|0;
 $19 = $this;
 $20 = $__first;
 $21 = $__last;
 $22 = $19;
 $23 = $22;
 $18 = $23;
 $24 = $18;
 $25 = (($24) + 8|0);
 $17 = $25;
 $26 = $17;
 $27 = $26;
 $16 = $27;
 $28 = $16;
 $29 = $28;
 $__a = $29;
 while(1) {
  $30 = $20;
  $31 = $21;
  $32 = ($30|0)!=($31|0);
  if (!($32)) {
   break;
  }
  $33 = $__a;
  $34 = $22;
  $35 = (($34) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $1 = $36;
  $37 = $1;
  $38 = $20;
  $12 = $33;
  $13 = $37;
  $14 = $38;
  $39 = $12;
  $40 = $13;
  $41 = $14;
  $11 = $41;
  $42 = $11;
  $tmp$i = $10;
  $tmp1$i = $15;
  ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
  $7 = $39;
  $8 = $40;
  $9 = $42;
  $43 = $7;
  $44 = $8;
  $45 = $9;
  $6 = $45;
  $46 = $6;
  $3 = $43;
  $4 = $44;
  $5 = $46;
  $47 = $4;
  $48 = $47;
  $49 = ($48|0)==(0|0);
  if (!($49)) {
   $50 = $48;
   $51 = $5;
   $2 = $51;
   $52 = $2;
   $53 = HEAP32[$52>>2]|0;
   __ZN2cl8PlatformC1EP15_cl_platform_id($50,$53);
  }
  $54 = $22;
  $55 = (($54) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + 4|0);
  HEAP32[$55>>2] = $57;
  $58 = $20;
  $59 = (($58) + 4|0);
  $20 = $59;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE10deallocateEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $tmp$i$i$i$i = 0, $tmp1$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 280|0;
 $23 = sp + 176|0;
 $26 = sp + 200|0;
 $35 = $this;
 $36 = $35;
 $37 = $36;
 $38 = ($37);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0|0);
 if (!($40)) {
  STACKTOP = sp;return;
 }
 $34 = $36;
 $41 = $34;
 $42 = $41;
 $33 = $42;
 $43 = $33;
 $44 = ($43);
 $45 = HEAP32[$44>>2]|0;
 $31 = $43;
 $32 = $45;
 $46 = $31;
 while(1) {
  $47 = $32;
  $48 = (($46) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($47|0)!=($49|0);
  if (!($50)) {
   break;
  }
  $30 = $46;
  $51 = $30;
  $52 = (($51) + 8|0);
  $29 = $52;
  $53 = $29;
  $54 = $53;
  $28 = $54;
  $55 = $28;
  $56 = $55;
  $57 = (($46) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + -4|0);
  HEAP32[$57>>2] = $59;
  $27 = $59;
  $60 = $27;
  $24 = $56;
  $25 = $60;
  $61 = $24;
  $62 = $25;
  $tmp$i$i$i$i = $23;
  $tmp1$i$i$i$i = $26;
  ;HEAP8[$tmp$i$i$i$i+0|0]=HEAP8[$tmp1$i$i$i$i+0|0]|0;
  $21 = $61;
  $22 = $62;
  $63 = $21;
  $64 = $22;
  $19 = $63;
  $20 = $64;
  $65 = $20;
  __ZN2cl8PlatformD1Ev($65);
 }
 $18 = $41;
 $66 = $36;
 $17 = $66;
 $67 = $17;
 $68 = (($67) + 8|0);
 $16 = $68;
 $69 = $16;
 $70 = $69;
 $15 = $70;
 $71 = $15;
 $72 = $71;
 $73 = $36;
 $74 = ($73);
 $75 = HEAP32[$74>>2]|0;
 $5 = $36;
 $76 = $5;
 $77 = $76;
 $4 = $77;
 $78 = $4;
 $3 = $78;
 $79 = $3;
 $80 = (($79) + 8|0);
 $2 = $80;
 $81 = $2;
 $82 = $81;
 $1 = $82;
 $83 = $1;
 $84 = ($83);
 $85 = HEAP32[$84>>2]|0;
 $86 = ($78);
 $87 = HEAP32[$86>>2]|0;
 $88 = $85;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 4)&-1;
 $9 = $72;
 $10 = $75;
 $11 = $91;
 $92 = $9;
 $93 = $10;
 $94 = $11;
 $6 = $92;
 $7 = $93;
 $8 = $94;
 $95 = $7;
 $96 = $95;
 __ZdlPv($96);
 $97 = $36;
 $14 = $97;
 $98 = $14;
 $99 = (($98) + 8|0);
 $13 = $99;
 $100 = $13;
 $101 = $100;
 $12 = $101;
 $102 = $12;
 $103 = ($102);
 HEAP32[$103>>2] = 0;
 $104 = $36;
 $105 = (($104) + 4|0);
 HEAP32[$105>>2] = 0;
 $106 = $36;
 $107 = ($106);
 HEAP32[$107>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 104|0;
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  $18 = $14;
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($18);
 }
 $19 = $14;
 $11 = $19;
 $20 = $11;
 $21 = (($20) + 8|0);
 $10 = $21;
 $22 = $10;
 $23 = $22;
 $9 = $23;
 $24 = $9;
 $25 = $24;
 $26 = $13;
 $4 = $25;
 $5 = $26;
 $27 = $4;
 $28 = $5;
 $1 = $27;
 $2 = $28;
 $3 = 0;
 $29 = $2;
 $30 = $29<<2;
 $31 = (__Znwj($30)|0);
 $32 = $31;
 $33 = $14;
 $34 = (($33) + 4|0);
 HEAP32[$34>>2] = $32;
 $35 = $14;
 $36 = ($35);
 HEAP32[$36>>2] = $32;
 $37 = $14;
 $38 = ($37);
 $39 = HEAP32[$38>>2]|0;
 $40 = $13;
 $41 = (($39) + ($40<<2)|0);
 $42 = $14;
 $8 = $42;
 $43 = $8;
 $44 = (($43) + 8|0);
 $7 = $44;
 $45 = $7;
 $46 = $45;
 $6 = $46;
 $47 = $6;
 $48 = ($47);
 HEAP32[$48>>2] = $41;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN2cl8PlatformENS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp$i = 0, $tmp$i1 = 0, $tmp1$i = 0, $tmp1$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $6 = sp + 40|0;
 $9 = sp + 64|0;
 $12 = sp + 88|0;
 $14 = sp + 104|0;
 $19 = sp + 144|0;
 $20 = sp + 152|0;
 $18 = $this;
 $21 = $18;
 $22 = $21;
 $17 = $22;
 $23 = $17;
 $24 = (($23) + 8|0);
 $16 = $24;
 $25 = $16;
 $26 = $25;
 $15 = $26;
 $27 = $15;
 $28 = $27;
 $13 = $28;
 $29 = $13;
 $tmp$i = $12;
 $tmp1$i = $14;
 ;HEAP8[$tmp$i+0|0]=HEAP8[$tmp1$i+0|0]|0;
 $11 = $29;
 $30 = $11;
 $10 = $30;
 HEAP32[$19>>2] = 1073741823;
 $31 = (4294967295 / 2)&-1;
 HEAP32[$20>>2] = $31;
 $7 = $19;
 $8 = $20;
 $32 = $7;
 $33 = $8;
 $tmp$i1 = $6;
 $tmp1$i2 = $9;
 ;HEAP8[$tmp$i1+0|0]=HEAP8[$tmp1$i2+0|0]|0;
 $4 = $32;
 $5 = $33;
 $34 = $5;
 $35 = $4;
 $1 = $6;
 $2 = $34;
 $3 = $35;
 $36 = $2;
 $37 = HEAP32[$36>>2]|0;
 $38 = $3;
 $39 = HEAP32[$38>>2]|0;
 $40 = ($37>>>0)<($39>>>0);
 if ($40) {
  $41 = $5;
  $43 = $41;
 } else {
  $42 = $4;
  $43 = $42;
 }
 $44 = HEAP32[$43>>2]|0;
 STACKTOP = sp;return ($44|0);
}
function __ZN2cl8PlatformC1EP15_cl_platform_id($this,$platform) {
 $this = $this|0;
 $platform = $platform|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $platform;
 $3 = $1;
 $4 = $2;
 __ZN2cl8PlatformC2EP15_cl_platform_id($3,$4);
 STACKTOP = sp;return;
}
function __ZN2cl8PlatformC2EP15_cl_platform_id($this,$platform) {
 $this = $this|0;
 $platform = $platform|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $platform;
 $3 = $1;
 $4 = $3;
 __ZN2cl6detail7WrapperIP15_cl_platform_idEC2Ev($4);
 $5 = $2;
 $6 = $3;
 $7 = ($6);
 HEAP32[$7>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN2cl6detail7WrapperIP15_cl_platform_idEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN2cl8PlatformaSERKS0_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $rhs;
 $3 = $1;
 $4 = $2;
 $5 = ($3|0)!=($4|0);
 if (!($5)) {
  STACKTOP = sp;return ($3|0);
 }
 $6 = $3;
 $7 = $2;
 $8 = $7;
 (__ZN2cl6detail7WrapperIP15_cl_platform_idEaSERKS4_($6,$8)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN2cl6detail7WrapperIP15_cl_platform_idEaSERKS4_($this,$rhs) {
 $this = $this|0;
 $rhs = $rhs|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $rhs;
 $3 = $1;
 $4 = ($3);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  (__ZNK2cl6detail7WrapperIP15_cl_platform_idE7releaseEv($3)|0);
 }
 $7 = $2;
 $8 = ($7);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($3);
 HEAP32[$10>>2] = $9;
 $11 = ($3);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if (!($13)) {
  STACKTOP = sp;return ($3|0);
 }
 (__ZNK2cl6detail7WrapperIP15_cl_platform_idE6retainEv($3)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK2cl6detail7WrapperIP15_cl_platform_idE6retainEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN2cl6detail16ReferenceHandlerIP15_cl_platform_idE6retainES3_($4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN2cl6detail16ReferenceHandlerIP15_cl_platform_idE6retainES3_($1) {
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $2 = $1;
 STACKTOP = sp;return -32;
}
function __ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZNSt3__113__vector_baseIN2cl6MemoryENS_9allocatorIS2_EEED2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN2cl6MemoryENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $9 = 0, $tmp$i$i$i = 0, $tmp1$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 232|0;
 $18 = sp + 136|0;
 $21 = sp + 160|0;
 $29 = $this;
 $30 = $29;
 $31 = ($30);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if (!($33)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $34 = $28;
 $35 = ($34);
 $36 = HEAP32[$35>>2]|0;
 $26 = $34;
 $27 = $36;
 $37 = $26;
 while(1) {
  $38 = $27;
  $39 = (($37) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($38|0)!=($40|0);
  if (!($41)) {
   break;
  }
  $25 = $37;
  $42 = $25;
  $43 = (($42) + 8|0);
  $24 = $43;
  $44 = $24;
  $45 = $44;
  $23 = $45;
  $46 = $23;
  $47 = $46;
  $48 = (($37) + 4|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + -4|0);
  HEAP32[$48>>2] = $50;
  $22 = $50;
  $51 = $22;
  $19 = $47;
  $20 = $51;
  $52 = $19;
  $53 = $20;
  $tmp$i$i$i = $18;
  $tmp1$i$i$i = $21;
  ;HEAP8[$tmp$i$i$i+0|0]=HEAP8[$tmp1$i$i$i+0|0]|0;
  $16 = $52;
  $17 = $53;
  $54 = $16;
  $55 = $17;
  $14 = $54;
  $15 = $55;
  $56 = $15;
  __ZN2cl6MemoryD1Ev($56);
 }
 $13 = $30;
 $57 = $13;
 $58 = (($57) + 8|0);
 $12 = $58;
 $59 = $12;
 $60 = $59;
 $11 = $60;
 $61 = $11;
 $62 = $61;
 $63 = ($30);
 $64 = HEAP32[$63>>2]|0;
 $4 = $30;
 $65 = $4;
 $3 = $65;
 $66 = $3;
 $67 = (($66) + 8|0);
 $2 = $67;
 $68 = $2;
 $69 = $68;
 $1 = $69;
 $70 = $1;
 $71 = ($70);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($65);
 $74 = HEAP32[$73>>2]|0;
 $75 = $72;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 4)&-1;
 $8 = $62;
 $9 = $64;
 $10 = $78;
 $79 = $8;
 $80 = $9;
 $81 = $10;
 $5 = $79;
 $6 = $80;
 $7 = $81;
 $82 = $6;
 $83 = $82;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZN2cl7ContextD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6detail7WrapperIP11_cl_contextED2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl7ProgramD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6detail7WrapperIP11_cl_programED2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl6KernelD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6detail7WrapperIP10_cl_kernelED2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl12CommandQueueD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6detail7WrapperIP17_cl_command_queueED2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl12CommandQueueC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6detail7WrapperIP17_cl_command_queueEC2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl6KernelC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6detail7WrapperIP10_cl_kernelEC2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl7ProgramC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6detail7WrapperIP11_cl_programEC2Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl7ContextC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = $2;
 __ZN2cl6detail7WrapperIP11_cl_contextEC2Ev($3);
 STACKTOP = sp;return;
}
function __ZN6SolverD1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN6SolverD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN6SolverD0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 __ZN6SolverD1Ev($2);
 $3 = $2;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZN2cl7NDRangeD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 __ZN2cl6size_tILi3EED1Ev($3);
 STACKTOP = sp;return;
}
function __ZN2cl7NDRangeC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = $this;
 $2 = $1;
 $3 = ($2);
 __ZN2cl6size_tILi3EEC1Ev($3);
 $4 = (($2) + 20|0);
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function __GLOBAL__I_a121() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init120();
 STACKTOP = sp;return;
}
function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $app = 0, $e = 0, $i = 0, $use_filter = 0, $use_gpu = 0, $use_interop = 0, $vararg_buffer = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $vararg_buffer = sp;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $81 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $82 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $85 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $86 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $87 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $88 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $89 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $78 = 0;
 $79 = $argc;
 $80 = $argv;
 $90 = (__ZN6global3parEv()|0);
 $76 = $81;
 $77 = (3488);
 $91 = $76;
 $92 = $77;
 $74 = $91;
 $75 = $92;
 $93 = $74;
 $94 = ($93);
 $73 = $94;
 $95 = $73;
 $72 = $95;
 $96 = $72;
 $97 = $96;
 $71 = $97;
 $98 = $71;
 $99 = $98;
 $70 = $99;
 $100 = $75;
 $101 = $75;
 $69 = $101;
 $102 = $69;
 $103 = (_strlen(($102|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($93,$100,$103);
 $67 = $82;
 $68 = (3504);
 $104 = $67;
 $105 = $68;
 $65 = $104;
 $66 = $105;
 $106 = $65;
 $107 = ($106);
 $64 = $107;
 $108 = $64;
 $63 = $108;
 $109 = $63;
 $110 = $109;
 $62 = $110;
 $111 = $62;
 $112 = $111;
 $61 = $112;
 $113 = $66;
 $114 = $66;
 $60 = $114;
 $115 = $60;
 __THREW__ = 0;
 $116 = (invoke_ii(68,($115|0))|0);
 $117 = __THREW__; __THREW__ = 0;
 $118 = $117&1;
 do {
  if ($118) {
   label = 11;
  } else {
   __THREW__ = 0;
   invoke_viii(5,($106|0),($113|0),($116|0));
   $119 = __THREW__; __THREW__ = 0;
   $120 = $119&1;
   if ($120) {
    label = 11;
    break;
   }
   __THREW__ = 0;
   invoke_viii(7,($90|0),($81|0),($82|0));
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    $136 = ___cxa_find_matching_catch(-1,-1)|0;
    $137 = tempRet0;
    $83 = $136;
    $84 = $137;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($82);
    break;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($82);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($81);
   $use_gpu = 1;
   $use_interop = 0;
   $use_filter = 0;
   $i = 0;
   while(1) {
    $123 = $i;
    $124 = $79;
    $125 = ($123|0)<($124|0);
    if ($125) {
     $126 = $80;
     $127 = ($126|0)!=(0|0);
     $128 = $127;
    } else {
     $128 = 0;
    }
    if (!($128)) {
     break;
    }
    $129 = $i;
    $130 = $80;
    $131 = (($130) + ($129<<2)|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = ($132|0)!=(0|0);
    if ($133) {
     $138 = $i;
     $139 = $80;
     $140 = (($139) + ($138<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $58 = $141;
     $59 = (3512);
     $142 = $58;
     $143 = $59;
     $144 = (_strstr(($142|0),($143|0))|0);
     $145 = ($144|0)!=(0|0);
     if ($145) {
      $use_gpu = 0;
     } else {
      $146 = $i;
      $147 = $80;
      $148 = (($147) + ($146<<2)|0);
      $149 = HEAP32[$148>>2]|0;
      $56 = $149;
      $57 = (3520);
      $150 = $56;
      $151 = $57;
      $152 = (_strstr(($150|0),($151|0))|0);
      $153 = ($152|0)!=(0|0);
      if ($153) {
       $use_gpu = 1;
      } else {
       $154 = $i;
       $155 = $80;
       $156 = (($155) + ($154<<2)|0);
       $157 = HEAP32[$156>>2]|0;
       $54 = $157;
       $55 = (3528);
       $158 = $54;
       $159 = $55;
       $160 = (_strstr(($158|0),($159|0))|0);
       $161 = ($160|0)!=(0|0);
       if ($161) {
        $use_interop = 1;
       } else {
        $162 = $i;
        $163 = $80;
        $164 = (($163) + ($162<<2)|0);
        $165 = HEAP32[$164>>2]|0;
        $52 = $165;
        $53 = (3536);
        $166 = $52;
        $167 = $53;
        $168 = (_strstr(($166|0),($167|0))|0);
        $169 = ($168|0)!=(0|0);
        if ($169) {
         $use_filter = 1;
        }
       }
      }
     }
    } else {
    }
    $170 = $i;
    $171 = (($170) + 1)|0;
    $i = $171;
   }
   $172 = $use_gpu;
   $173 = ($172|0)==(1);
   if ($173) {
    $174 = 3576;
   } else {
    $174 = 3584;
   }
   $175 = ($174);
   $vararg_ptr = ($vararg_buffer);
   HEAP32[$vararg_ptr>>2] = $175;
   (_printf(((3544)|0),($vararg_buffer|0))|0);
   $176 = (__ZN6global3parEv()|0);
   $50 = $85;
   $51 = (3592);
   $177 = $50;
   $178 = $51;
   $48 = $177;
   $49 = $178;
   $179 = $48;
   $180 = ($179);
   $47 = $180;
   $181 = $47;
   $46 = $181;
   $182 = $46;
   $183 = $182;
   $45 = $183;
   $184 = $45;
   $185 = $184;
   $44 = $185;
   $186 = $49;
   $187 = $49;
   $43 = $187;
   $188 = $43;
   $189 = (_strlen(($188|0))|0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($179,$186,$189);
   $190 = $use_gpu;
   __THREW__ = 0;
   invoke_viii(6,($176|0),($85|0),($190|0));
   $191 = __THREW__; __THREW__ = 0;
   $192 = $191&1;
   if ($192) {
    $211 = ___cxa_find_matching_catch(-1,-1)|0;
    $212 = tempRet0;
    $83 = $211;
    $84 = $212;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($85);
    $324 = $83;
    $325 = $84;
    ___resumeException($324|0);
    // unreachable;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($85);
   $193 = $use_interop;
   $194 = ($193|0)==(1);
   do {
    if ($194) {
     $195 = (__ZN6global3parEv()|0);
     $41 = $86;
     $42 = (3608);
     $196 = $41;
     $197 = $42;
     $39 = $196;
     $40 = $197;
     $198 = $39;
     $199 = ($198);
     $38 = $199;
     $200 = $38;
     $37 = $200;
     $201 = $37;
     $202 = $201;
     $36 = $202;
     $203 = $36;
     $204 = $203;
     $35 = $204;
     $205 = $40;
     $206 = $40;
     $34 = $206;
     $207 = $34;
     $208 = (_strlen(($207|0))|0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($198,$205,$208);
     __THREW__ = 0;
     invoke_vii(73,($195|0),($86|0));
     $209 = __THREW__; __THREW__ = 0;
     $210 = $209&1;
     if (!($210)) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($86);
      break;
     }
     $213 = ___cxa_find_matching_catch(-1,-1)|0;
     $214 = tempRet0;
     $83 = $213;
     $84 = $214;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($86);
     $324 = $83;
     $325 = $84;
     ___resumeException($324|0);
     // unreachable;
    } else {
     $215 = (__ZN6global3parEv()|0);
     $32 = $87;
     $33 = (3608);
     $216 = $32;
     $217 = $33;
     $30 = $216;
     $31 = $217;
     $218 = $30;
     $219 = ($218);
     $29 = $219;
     $220 = $29;
     $28 = $220;
     $221 = $28;
     $222 = $221;
     $27 = $222;
     $223 = $27;
     $224 = $223;
     $26 = $224;
     $225 = $31;
     $226 = $31;
     $25 = $226;
     $227 = $25;
     $228 = (_strlen(($227|0))|0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($218,$225,$228);
     __THREW__ = 0;
     invoke_vii(74,($215|0),($87|0));
     $229 = __THREW__; __THREW__ = 0;
     $230 = $229&1;
     if (!($230)) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($87);
      break;
     }
     $231 = ___cxa_find_matching_catch(-1,-1)|0;
     $232 = tempRet0;
     $83 = $231;
     $84 = $232;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($87);
     $324 = $83;
     $325 = $84;
     ___resumeException($324|0);
     // unreachable;
    }
   } while(0);
   $233 = $use_filter;
   $234 = ($233|0)==(1);
   do {
    if ($234) {
     $235 = (__ZN6global3parEv()|0);
     $23 = $88;
     $24 = (3624);
     $236 = $23;
     $237 = $24;
     $21 = $236;
     $22 = $237;
     $238 = $21;
     $239 = ($238);
     $20 = $239;
     $240 = $20;
     $19 = $240;
     $241 = $19;
     $242 = $241;
     $18 = $242;
     $243 = $18;
     $244 = $243;
     $17 = $244;
     $245 = $22;
     $246 = $22;
     $16 = $246;
     $247 = $16;
     $248 = (_strlen(($247|0))|0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($238,$245,$248);
     __THREW__ = 0;
     invoke_vii(73,($235|0),($88|0));
     $249 = __THREW__; __THREW__ = 0;
     $250 = $249&1;
     if (!($250)) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($88);
      break;
     }
     $251 = ___cxa_find_matching_catch(-1,-1)|0;
     $252 = tempRet0;
     $83 = $251;
     $84 = $252;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($88);
     $324 = $83;
     $325 = $84;
     ___resumeException($324|0);
     // unreachable;
    } else {
     $253 = (__ZN6global3parEv()|0);
     $14 = $89;
     $15 = (3624);
     $254 = $14;
     $255 = $15;
     $12 = $254;
     $13 = $255;
     $256 = $12;
     $257 = ($256);
     $11 = $257;
     $258 = $11;
     $10 = $258;
     $259 = $10;
     $260 = $259;
     $9 = $260;
     $261 = $9;
     $262 = $261;
     $8 = $262;
     $263 = $13;
     $264 = $13;
     $7 = $264;
     $265 = $7;
     $266 = (_strlen(($265|0))|0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($256,$263,$266);
     __THREW__ = 0;
     invoke_vii(74,($253|0),($89|0));
     $267 = __THREW__; __THREW__ = 0;
     $268 = $267&1;
     if (!($268)) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($89);
      break;
     }
     $269 = ___cxa_find_matching_catch(-1,-1)|0;
     $270 = tempRet0;
     $83 = $269;
     $84 = $270;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($89);
     $324 = $83;
     $325 = $84;
     ___resumeException($324|0);
     // unreachable;
    }
   } while(0);
   $271 = (__ZN11Application3getEv()|0);
   $app = $271;
   $272 = $app;
   $273 = ($272|0)==(0|0);
   if ($273) {
    $274 = (__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc((4008),(3640))|0);
    $5 = $274;
    $6 = 69;
    $275 = $5;
    $276 = $6;
    (FUNCTION_TABLE_ii[$276 & 127]($275)|0);
    _exit(1);
    // unreachable;
   }
   $277 = $app;
   __THREW__ = 0;
   invoke_vi(178,($277|0));
   $278 = __THREW__; __THREW__ = 0;
   $279 = $278&1;
   if (!($279)) {
    STACKTOP = sp;return 0;
   }
   $280 = ___cxa_find_matching_catch(-1,-1,(__ZTISt9exception)|0,0|0)|0;
   $281 = tempRet0;
   $83 = $280;
   $84 = $281;
   $282 = $84;
   $283 = (_llvm_eh_typeid_for(((__ZTISt9exception)|0))|0);
   $284 = ($282|0)==($283|0);
   if (!($284)) {
    $306 = $83;
    (___cxa_begin_catch(($306|0))|0);
    __THREW__ = 0;
    $307 = (invoke_iii(21,((4008)|0),((3680)|0))|0);
    $308 = __THREW__; __THREW__ = 0;
    $309 = $308&1;
    do {
     if (!($309)) {
      $1 = $307;
      $2 = 69;
      $310 = $1;
      $311 = $2;
      __THREW__ = 0;
      (invoke_ii($311|0,($310|0))|0);
      $312 = __THREW__; __THREW__ = 0;
      $313 = $312&1;
      if ($313) {
       break;
      }
      __THREW__ = 0;
      invoke_vi(179,1);
      $314 = __THREW__; __THREW__ = 0;
      $315 = $314&1;
      if ($315) {
       break;
      }
      // unreachable;
     }
    } while(0);
    $316 = ___cxa_find_matching_catch(-1,-1)|0;
    $317 = tempRet0;
    $83 = $316;
    $84 = $317;
    __THREW__ = 0;
    invoke_v(5);
    $318 = __THREW__; __THREW__ = 0;
    $319 = $318&1;
    if ($319) {
     $326 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$0 = tempRet0;
     ___clang_call_terminate($326);
     // unreachable;
    }
    $324 = $83;
    $325 = $84;
    ___resumeException($324|0);
    // unreachable;
   }
   $285 = $83;
   $286 = (___cxa_begin_catch(($285|0))|0);
   $287 = $286;
   $e = $287;
   __THREW__ = 0;
   $288 = (invoke_iii(21,((4008)|0),((3712)|0))|0);
   $289 = __THREW__; __THREW__ = 0;
   $290 = $289&1;
   do {
    if (!($290)) {
     $291 = $e;
     $292 = $291;
     $293 = HEAP32[$292>>2]|0;
     $294 = (($293) + 8|0);
     $295 = HEAP32[$294>>2]|0;
     $296 = (FUNCTION_TABLE_ii[$295 & 127]($291)|0);
     __THREW__ = 0;
     $297 = (invoke_iii(21,($288|0),($296|0))|0);
     $298 = __THREW__; __THREW__ = 0;
     $299 = $298&1;
     if ($299) {
      break;
     }
     $3 = $297;
     $4 = 69;
     $300 = $3;
     $301 = $4;
     __THREW__ = 0;
     (invoke_ii($301|0,($300|0))|0);
     $302 = __THREW__; __THREW__ = 0;
     $303 = $302&1;
     if ($303) {
      break;
     }
     __THREW__ = 0;
     invoke_vi(179,1);
     $304 = __THREW__; __THREW__ = 0;
     $305 = $304&1;
     if ($305) {
      break;
     }
     // unreachable;
    }
   } while(0);
   $320 = ___cxa_find_matching_catch(-1,-1)|0;
   $321 = tempRet0;
   $83 = $320;
   $84 = $321;
   __THREW__ = 0;
   invoke_v(5);
   $322 = __THREW__; __THREW__ = 0;
   $323 = $322&1;
   if ($323) {
    $326 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    u$0 = tempRet0;
    ___clang_call_terminate($326);
    // unreachable;
   }
   $324 = $83;
   $325 = $84;
   ___resumeException($324|0);
   // unreachable;
  }
 } while(0);
 if ((label|0) == 11) {
  $134 = ___cxa_find_matching_catch(-1,-1)|0;
  $135 = tempRet0;
  $83 = $134;
  $84 = $135;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($81);
 $324 = $83;
 $325 = $84;
 ___resumeException($324|0);
 // unreachable;
 return 0|0;
}
function __ZN10Parameters6enableERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$key) {
 $this = $this|0;
 $key = $key|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $key;
 $3 = $1;
 $4 = $2;
 __ZN10Parameters6setIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($3,$4,1);
 STACKTOP = sp;return;
}
function __ZN10Parameters7disableERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$key) {
 $this = $this|0;
 $key = $key|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $this;
 $2 = $key;
 $3 = $1;
 $4 = $2;
 __ZN10Parameters6setIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi($3,$4,0);
 STACKTOP = sp;return;
}
function ___cxx_global_var_init144() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZN2cl7NDRangeC1Ev((3720));
 (_atexit(((171)|0),((3720)|0),((___dso_handle)|0))|0);
 STACKTOP = sp;return;
}
function __ZN6Solver3getEv() {
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[(3744)>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZN6Solver6createENS_4TypeE($type) {
 $type = $type|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 $1 = $type;
 $4 = (__ZN4Demo3getEv()|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  __ZN5error8throw_exEPKcS1_i((3752),(3792),33);
 }
 $6 = $1;
 do {
  if ((($6|0) == 0)) {
   $7 = (__Znwj(44)|0);
   $8 = $7;
   __THREW__ = 0;
   invoke_vi(180,($8|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = $8;
    HEAP32[(3744)>>2] = $11;
    break;
   }
   $12 = ___cxa_find_matching_catch(-1,-1)|0;
   $13 = tempRet0;
   $2 = $12;
   $3 = $13;
   __ZdlPv($7);
   $21 = $2;
   $22 = $3;
   ___resumeException($21|0);
   // unreachable;
  } else {
  }
 } while(0);
 $14 = HEAP32[(3744)>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  __ZN5error8throw_exEPKcS1_i((3808),(3792),45);
 }
 $16 = HEAP32[(3744)>>2]|0;
 $17 = $16;
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 FUNCTION_TABLE_vi[$20 & 255]($16);
 STACKTOP = sp;return;
}
function __GLOBAL__I_a149() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init144();
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4InitC2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp;
 $2 = sp + 8|0;
 $3 = sp + 16|0;
 $4 = sp + 24|0;
 $5 = HEAP32[(_stdin)>>2]|0;
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t((4544),$5,((4600)));
 HEAP32[(3832)>>2] = ((((6448) + 12|0)));
 HEAP32[(((3832 + 8|0)))>>2] = ((((6448) + 32|0)));
 HEAP32[(((3832 + 4|0)))>>2] = 0;
 __THREW__ = 0;
 invoke_vii(44,((((3832 + 8|0)))|0),((4544)|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch(-1,-1)|0;
  $9 = tempRet0;
  __ZNSt3__18ios_baseD2Ev((((3832 + 8|0))));
  ___resumeException($8|0);
  // unreachable;
 }
 HEAP32[(((3832 + 80|0)))>>2] = 0;
 HEAP32[(((3832 + 84|0)))>>2] = -1;
 $10 = HEAP32[(_stdout)>>2]|0;
 $11 = $4;
 HEAP32[(4648)>>2] = ((((6320) + 8|0)));
 __ZNSt3__16localeC2Ev((((4648 + 4|0))));
 ;HEAP32[((4648 + 8|0))+0>>2]=0|0;HEAP32[((4648 + 8|0))+4>>2]=0|0;HEAP32[((4648 + 8|0))+8>>2]=0|0;HEAP32[((4648 + 8|0))+12>>2]=0|0;HEAP32[((4648 + 8|0))+16>>2]=0|0;HEAP32[((4648 + 8|0))+20>>2]=0|0;
 HEAP32[(4648)>>2] = ((((5152) + 8|0)));
 HEAP32[(((4648 + 32|0)))>>2] = $10;
 __ZNSt3__16localeC2ERKS0_($4,(((4648 + 4|0))));
 __THREW__ = 0;
 $12 = (invoke_iii(23,($4|0),((9200)|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $15 = ___cxa_find_matching_catch(-1,-1)|0;
  $16 = tempRet0;
  __ZNSt3__16localeD2Ev($4);
  HEAP32[(4648)>>2] = ((((6320) + 8|0)));
  __ZNSt3__16localeD2Ev((((4648 + 4|0))));
  ___resumeException($15|0);
  // unreachable;
 }
 $17 = $12;
 __ZNSt3__16localeD2Ev($4);
 HEAP32[(((4648 + 36|0)))>>2] = $17;
 HEAP32[(((4648 + 40|0)))>>2] = (((4600) + 8|0));
 $18 = $12;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + 28|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (FUNCTION_TABLE_ii[$21 & 127]($17)|0);
 $23 = $22&1;
 HEAP8[((4648 + 44|0))] = $23;
 HEAP32[(3920)>>2] = ((((6528) + 12|0)));
 HEAP32[(((3920 + 4|0)))>>2] = ((((6528) + 32|0)));
 __THREW__ = 0;
 invoke_vii(44,((((3920 + 4|0)))|0),((4648)|0));
 $24 = __THREW__; __THREW__ = 0;
 $25 = $24&1;
 if ($25) {
  $26 = ___cxa_find_matching_catch(-1,-1)|0;
  $27 = tempRet0;
  __ZNSt3__18ios_baseD2Ev((((3920 + 4|0))));
  ___resumeException($26|0);
  // unreachable;
 }
 HEAP32[(((3920 + 76|0)))>>2] = 0;
 HEAP32[(((3920 + 80|0)))>>2] = -1;
 $28 = HEAP32[(_stderr)>>2]|0;
 $29 = $3;
 HEAP32[(4696)>>2] = ((((6320) + 8|0)));
 __ZNSt3__16localeC2Ev((((4696 + 4|0))));
 ;HEAP32[((4696 + 8|0))+0>>2]=0|0;HEAP32[((4696 + 8|0))+4>>2]=0|0;HEAP32[((4696 + 8|0))+8>>2]=0|0;HEAP32[((4696 + 8|0))+12>>2]=0|0;HEAP32[((4696 + 8|0))+16>>2]=0|0;HEAP32[((4696 + 8|0))+20>>2]=0|0;
 HEAP32[(4696)>>2] = ((((5152) + 8|0)));
 HEAP32[(((4696 + 32|0)))>>2] = $28;
 __ZNSt3__16localeC2ERKS0_($3,(((4696 + 4|0))));
 __THREW__ = 0;
 $30 = (invoke_iii(23,($3|0),((9200)|0))|0);
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $33 = ___cxa_find_matching_catch(-1,-1)|0;
  $34 = tempRet0;
  __ZNSt3__16localeD2Ev($3);
  HEAP32[(4696)>>2] = ((((6320) + 8|0)));
  __ZNSt3__16localeD2Ev((((4696 + 4|0))));
  ___resumeException($33|0);
  // unreachable;
 }
 $35 = $30;
 __ZNSt3__16localeD2Ev($3);
 HEAP32[(((4696 + 36|0)))>>2] = $35;
 HEAP32[(((4696 + 40|0)))>>2] = (((4600) + 16|0));
 $36 = $30;
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + 28|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (FUNCTION_TABLE_ii[$39 & 127]($35)|0);
 $41 = $40&1;
 HEAP8[((4696 + 44|0))] = $41;
 HEAP32[(4008)>>2] = ((((6528) + 12|0)));
 HEAP32[(((4008 + 4|0)))>>2] = ((((6528) + 32|0)));
 __THREW__ = 0;
 invoke_vii(44,((((4008 + 4|0)))|0),((4696)|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if ($43) {
  $44 = ___cxa_find_matching_catch(-1,-1)|0;
  $45 = tempRet0;
  __ZNSt3__18ios_baseD2Ev((((4008 + 4|0))));
  ___resumeException($44|0);
  // unreachable;
 }
 HEAP32[(((4008 + 76|0)))>>2] = 0;
 HEAP32[(((4008 + 80|0)))>>2] = -1;
 $46 = HEAP32[(4008)>>2]|0;
 $47 = (($46) + -12|0);
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $$sum = (($49) + 24)|0;
 $50 = (4008 + ($$sum)|0);
 $51 = $50;
 $52 = HEAP32[$51>>2]|0;
 HEAP32[(4096)>>2] = ((((6528) + 12|0)));
 HEAP32[(((4096 + 4|0)))>>2] = ((((6528) + 32|0)));
 __THREW__ = 0;
 invoke_vii(44,((((4096 + 4|0)))|0),($52|0));
 $53 = __THREW__; __THREW__ = 0;
 $54 = $53&1;
 if ($54) {
  $55 = ___cxa_find_matching_catch(-1,-1)|0;
  $56 = tempRet0;
  __ZNSt3__18ios_baseD2Ev((((4096 + 4|0))));
  ___resumeException($55|0);
  // unreachable;
 }
 HEAP32[(((4096 + 76|0)))>>2] = 0;
 HEAP32[(((4096 + 80|0)))>>2] = -1;
 $57 = HEAP32[(3832)>>2]|0;
 $58 = (($57) + -12|0);
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $$sum7 = (($60) + 72)|0;
 $61 = (3832 + ($$sum7)|0);
 $62 = $61;
 HEAP32[$62>>2] = (3920);
 $63 = HEAP32[(4008)>>2]|0;
 $64 = (($63) + -12|0);
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $$sum8 = (($66) + 4)|0;
 $67 = (4008 + ($$sum8)|0);
 $68 = $67;
 $69 = HEAP32[$68>>2]|0;
 $70 = $69 | 8192;
 HEAP32[$68>>2] = $70;
 $71 = HEAP32[(4008)>>2]|0;
 $72 = (($71) + -12|0);
 $73 = $72;
 $74 = HEAP32[$73>>2]|0;
 $$sum9 = (($74) + 72)|0;
 $75 = (4008 + ($$sum9)|0);
 $76 = $75;
 HEAP32[$76>>2] = (3920);
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t((4744),$5,(((4600) + 24|0)));
 HEAP32[(4184)>>2] = ((((6488) + 12|0)));
 HEAP32[(((4184 + 8|0)))>>2] = ((((6488) + 32|0)));
 HEAP32[(((4184 + 4|0)))>>2] = 0;
 __THREW__ = 0;
 invoke_vii(44,((((4184 + 8|0)))|0),((4744)|0));
 $77 = __THREW__; __THREW__ = 0;
 $78 = $77&1;
 if ($78) {
  $79 = ___cxa_find_matching_catch(-1,-1)|0;
  $80 = tempRet0;
  __ZNSt3__18ios_baseD2Ev((((4184 + 8|0))));
  ___resumeException($79|0);
  // unreachable;
 }
 HEAP32[(((4184 + 80|0)))>>2] = 0;
 HEAP32[(((4184 + 84|0)))>>2] = -1;
 $81 = $2;
 HEAP32[(4800)>>2] = ((((6384) + 8|0)));
 __ZNSt3__16localeC2Ev((((4800 + 4|0))));
 ;HEAP32[((4800 + 8|0))+0>>2]=0|0;HEAP32[((4800 + 8|0))+4>>2]=0|0;HEAP32[((4800 + 8|0))+8>>2]=0|0;HEAP32[((4800 + 8|0))+12>>2]=0|0;HEAP32[((4800 + 8|0))+16>>2]=0|0;HEAP32[((4800 + 8|0))+20>>2]=0|0;
 HEAP32[(4800)>>2] = ((((4896) + 8|0)));
 HEAP32[(((4800 + 32|0)))>>2] = $10;
 __ZNSt3__16localeC2ERKS0_($2,(((4800 + 4|0))));
 __THREW__ = 0;
 $82 = (invoke_iii(23,($2|0),((9208)|0))|0);
 $83 = __THREW__; __THREW__ = 0;
 $84 = $83&1;
 if ($84) {
  $85 = ___cxa_find_matching_catch(-1,-1)|0;
  $86 = tempRet0;
  __ZNSt3__16localeD2Ev($2);
  HEAP32[(4800)>>2] = ((((6384) + 8|0)));
  __ZNSt3__16localeD2Ev((((4800 + 4|0))));
  ___resumeException($85|0);
  // unreachable;
 }
 $87 = $82;
 __ZNSt3__16localeD2Ev($2);
 HEAP32[(((4800 + 36|0)))>>2] = $87;
 HEAP32[(((4800 + 40|0)))>>2] = (((4600) + 32|0));
 $88 = $82;
 $89 = HEAP32[$88>>2]|0;
 $90 = (($89) + 28|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = (FUNCTION_TABLE_ii[$91 & 127]($87)|0);
 $93 = $92&1;
 HEAP8[((4800 + 44|0))] = $93;
 HEAP32[(4272)>>2] = ((((6568) + 12|0)));
 HEAP32[(((4272 + 4|0)))>>2] = ((((6568) + 32|0)));
 __THREW__ = 0;
 invoke_vii(44,((((4272 + 4|0)))|0),((4800)|0));
 $94 = __THREW__; __THREW__ = 0;
 $95 = $94&1;
 if ($95) {
  $96 = ___cxa_find_matching_catch(-1,-1)|0;
  $97 = tempRet0;
  __ZNSt3__18ios_baseD2Ev((((4272 + 4|0))));
  ___resumeException($96|0);
  // unreachable;
 }
 HEAP32[(((4272 + 76|0)))>>2] = 0;
 HEAP32[(((4272 + 80|0)))>>2] = -1;
 $98 = $1;
 HEAP32[(4848)>>2] = ((((6384) + 8|0)));
 __ZNSt3__16localeC2Ev((((4848 + 4|0))));
 ;HEAP32[((4848 + 8|0))+0>>2]=0|0;HEAP32[((4848 + 8|0))+4>>2]=0|0;HEAP32[((4848 + 8|0))+8>>2]=0|0;HEAP32[((4848 + 8|0))+12>>2]=0|0;HEAP32[((4848 + 8|0))+16>>2]=0|0;HEAP32[((4848 + 8|0))+20>>2]=0|0;
 HEAP32[(4848)>>2] = ((((4896) + 8|0)));
 HEAP32[(((4848 + 32|0)))>>2] = $28;
 __ZNSt3__16localeC2ERKS0_($1,(((4848 + 4|0))));
 __THREW__ = 0;
 $99 = (invoke_iii(23,($1|0),((9208)|0))|0);
 $100 = __THREW__; __THREW__ = 0;
 $101 = $100&1;
 if ($101) {
  $102 = ___cxa_find_matching_catch(-1,-1)|0;
  $103 = tempRet0;
  __ZNSt3__16localeD2Ev($1);
  HEAP32[(4848)>>2] = ((((6384) + 8|0)));
  __ZNSt3__16localeD2Ev((((4848 + 4|0))));
  ___resumeException($102|0);
  // unreachable;
 }
 $104 = $99;
 __ZNSt3__16localeD2Ev($1);
 HEAP32[(((4848 + 36|0)))>>2] = $104;
 HEAP32[(((4848 + 40|0)))>>2] = (((4600) + 40|0));
 $105 = $99;
 $106 = HEAP32[$105>>2]|0;
 $107 = (($106) + 28|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = (FUNCTION_TABLE_ii[$108 & 127]($104)|0);
 $110 = $109&1;
 HEAP8[((4848 + 44|0))] = $110;
 HEAP32[(4360)>>2] = ((((6568) + 12|0)));
 HEAP32[(((4360 + 4|0)))>>2] = ((((6568) + 32|0)));
 __THREW__ = 0;
 invoke_vii(44,((((4360 + 4|0)))|0),((4848)|0));
 $111 = __THREW__; __THREW__ = 0;
 $112 = $111&1;
 if ($112) {
  $113 = ___cxa_find_matching_catch(-1,-1)|0;
  $114 = tempRet0;
  __ZNSt3__18ios_baseD2Ev((((4360 + 4|0))));
  ___resumeException($113|0);
  // unreachable;
 }
 HEAP32[(((4360 + 76|0)))>>2] = 0;
 HEAP32[(((4360 + 80|0)))>>2] = -1;
 $115 = HEAP32[(4360)>>2]|0;
 $116 = (($115) + -12|0);
 $117 = $116;
 $118 = HEAP32[$117>>2]|0;
 $$sum10 = (($118) + 24)|0;
 $119 = (4360 + ($$sum10)|0);
 $120 = $119;
 $121 = HEAP32[$120>>2]|0;
 HEAP32[(4448)>>2] = ((((6568) + 12|0)));
 HEAP32[(((4448 + 4|0)))>>2] = ((((6568) + 32|0)));
 __THREW__ = 0;
 invoke_vii(44,((((4448 + 4|0)))|0),($121|0));
 $122 = __THREW__; __THREW__ = 0;
 $123 = $122&1;
 if ($123) {
  $124 = ___cxa_find_matching_catch(-1,-1)|0;
  $125 = tempRet0;
  __ZNSt3__18ios_baseD2Ev((((4448 + 4|0))));
  ___resumeException($124|0);
  // unreachable;
 } else {
  HEAP32[(((4448 + 76|0)))>>2] = 0;
  HEAP32[(((4448 + 80|0)))>>2] = -1;
  $126 = HEAP32[(4184)>>2]|0;
  $127 = (($126) + -12|0);
  $128 = $127;
  $129 = HEAP32[$128>>2]|0;
  $$sum11 = (($129) + 72)|0;
  $130 = (4184 + ($$sum11)|0);
  $131 = $130;
  HEAP32[$131>>2] = (4272);
  $132 = HEAP32[(4360)>>2]|0;
  $133 = (($132) + -12|0);
  $134 = $133;
  $135 = HEAP32[$134>>2]|0;
  $$sum12 = (($135) + 4)|0;
  $136 = (4360 + ($$sum12)|0);
  $137 = $136;
  $138 = HEAP32[$137>>2]|0;
  $139 = $138 | 8192;
  HEAP32[$137>>2] = $139;
  $140 = HEAP32[(4360)>>2]|0;
  $141 = (($140) + -12|0);
  $142 = $141;
  $143 = HEAP32[$142>>2]|0;
  $$sum13 = (($143) + 72)|0;
  $144 = (4360 + ($$sum13)|0);
  $145 = $144;
  HEAP32[$145>>2] = (4272);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__18ios_base4InitD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 (invoke_ii(86,((3920)|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 do {
  if (!($2)) {
   __THREW__ = 0;
   (invoke_ii(86,((4096)|0))|0);
   $3 = __THREW__; __THREW__ = 0;
   $4 = $3&1;
   if ($4) {
    break;
   }
   __THREW__ = 0;
   (invoke_ii(87,((4272)|0))|0);
   $5 = __THREW__; __THREW__ = 0;
   $6 = $5&1;
   if ($6) {
    break;
   }
   __THREW__ = 0;
   (invoke_ii(87,((4448)|0))|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $9 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 u$0 = tempRet0;
 ___clang_call_terminate($9);
 // unreachable;
}
function __ZNSt3__111__stdoutbufIwED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((6384) + 8|0)));
 $2 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((6384) + 8|0)));
 $2 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($2);
 $3 = $this;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 (FUNCTION_TABLE_ii[$4 & 127]($this)|0);
 $5 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,(9208))|0);
 $6 = $5;
 $7 = (($this) + 36|0);
 HEAP32[$7>>2] = $6;
 $8 = $5;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 127]($6)|0);
 $13 = (($this) + 44|0);
 $14 = $12&1;
 HEAP8[$13] = $14;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__extbuf = sp;
 $__extbe = sp + 8|0;
 $1 = (($this) + 36|0);
 $2 = (($this) + 40|0);
 $3 = ($__extbuf);
 $4 = (($__extbuf) + 8|0);
 $5 = $__extbuf;
 $6 = (($this) + 32|0);
 while(1) {
  $7 = HEAP32[$1>>2]|0;
  $8 = HEAP32[$2>>2]|0;
  $9 = $7;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (FUNCTION_TABLE_iiiiii[$12 & 31]($7,$8,$3,$4,$__extbe)|0);
  $14 = HEAP32[$__extbe>>2]|0;
  $15 = $14;
  $16 = (($15) - ($5))|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = (_fwrite(($3|0),1,($16|0),($17|0))|0);
  $19 = ($18|0)==($16|0);
  if (!($19)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($13|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($13|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $20 = HEAP32[$6>>2]|0;
  $21 = (_fflush(($20|0))|0);
  $not$ = ($21|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__i$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 44|0);
 $2 = HEAP8[$1]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $6 = $__s;
  $7 = (($this) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_fwrite(($6|0),4,($__n|0),($8|0))|0);
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = $this;
 $5 = ($__n|0)>(0);
 if ($5) {
  $$012 = $__s;$__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $10 = HEAP32[$4>>2]|0;
  $11 = (($10) + 52|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$$012>>2]|0;
  $14 = (FUNCTION_TABLE_iii[$12 & 63]($this,$13)|0);
  $15 = ($14|0)==(-1);
  if ($15) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $16 = (($__i$03) + 1)|0;
  $17 = (($$012) + 4|0);
  $18 = ($16|0)<($__n|0);
  if ($18) {
   $$012 = $17;$__i$03 = $16;
  } else {
   $$0 = $16;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__1buf = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp;
 $__1buf = sp + 8|0;
 $__extbe = sp + 16|0;
 $__e = sp + 24|0;
 $1 = ($__c|0)==(-1);
 L1: do {
  if (!($1)) {
   HEAP32[$__1buf>>2] = $__c;
   $2 = (($this) + 44|0);
   $3 = HEAP8[$2]|0;
   $4 = ($3<<24>>24)==(0);
   if (!($4)) {
    $5 = $__1buf;
    $6 = (($this) + 32|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = (_fwrite(($5|0),4,1,($7|0))|0);
    $9 = ($8|0)==(1);
    if ($9) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   $10 = ($__extbuf);
   HEAP32[$__extbe>>2] = $10;
   $11 = (($__1buf) + 4|0);
   $12 = (($this) + 36|0);
   $13 = (($this) + 40|0);
   $14 = (($__extbuf) + 8|0);
   $15 = $__extbuf;
   $16 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $17 = HEAP32[$12>>2]|0;
    $18 = HEAP32[$13>>2]|0;
    $19 = $17;
    $20 = HEAP32[$19>>2]|0;
    $21 = (($20) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_iiiiiiiii[$22 & 15]($17,$18,$pbase$0,$11,$__e,$10,$14,$__extbe)|0);
    $24 = HEAP32[$__e>>2]|0;
    $25 = ($24|0)==($pbase$0|0);
    if ($25) {
     $$0 = -1;
     label = 12;
     break;
    }
    $26 = ($23|0)==(3);
    if ($26) {
     label = 7;
     break;
    }
    $31 = ($23|0)==(1);
    $32 = ($23>>>0)<(2);
    if (!($32)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $33 = HEAP32[$__extbe>>2]|0;
    $34 = $33;
    $35 = (($34) - ($15))|0;
    $36 = HEAP32[$16>>2]|0;
    $37 = (_fwrite(($10|0),1,($35|0),($36|0))|0);
    $38 = ($37|0)==($35|0);
    if (!($38)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $39 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $31 ? $39 : $pbase$0;
    if ($31) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $27 = $pbase$0;
    $28 = HEAP32[$16>>2]|0;
    $29 = (_fwrite(($27|0),1,1,($28|0))|0);
    $30 = ($29|0)==(1);
    if ($30) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $1 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = sp;
 $2 = ($this);
 HEAP32[$2>>2] = ((((6384) + 8|0)));
 $3 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($3);
 $4 = (($this) + 8|0);
 $5 = $4;
 ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP32[$5+16>>2]=0|0;HEAP32[$5+20>>2]=0|0;
 HEAP32[$2>>2] = ((((5008) + 8|0)));
 $6 = (($this) + 32|0);
 HEAP32[$6>>2] = $__fp;
 $7 = (($this) + 40|0);
 HEAP32[$7>>2] = $__st;
 $8 = (($this) + 48|0);
 HEAP32[$8>>2] = -1;
 $9 = (($this) + 52|0);
 HEAP8[$9] = 0;
 __ZNSt3__16localeC2ERKS0_($1,$3);
 __THREW__ = 0;
 $10 = (invoke_iii(23,($1|0),((9208)|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $33 = ___cxa_find_matching_catch(-1,-1)|0;
  $34 = tempRet0;
  __ZNSt3__16localeD2Ev($1);
  HEAP32[$2>>2] = ((((6384) + 8|0)));
  __ZNSt3__16localeD2Ev($3);
  ___resumeException($33|0);
  // unreachable;
 }
 $13 = $10;
 $14 = (($this) + 36|0);
 HEAP32[$14>>2] = $13;
 $15 = $10;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_ii[$18 & 127]($13)|0);
 $20 = (($this) + 44|0);
 HEAP32[$20>>2] = $19;
 $21 = HEAP32[$14>>2]|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 28|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (FUNCTION_TABLE_ii[$25 & 127]($21)|0);
 $27 = (($this) + 53|0);
 $28 = $26&1;
 HEAP8[$27] = $28;
 $29 = HEAP32[$20>>2]|0;
 $30 = ($29|0)>(8);
 if (!($30)) {
  __ZNSt3__16localeD2Ev($1);
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_vi(181,((5112)|0));
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $33 = ___cxa_find_matching_catch(-1,-1)|0;
  $34 = tempRet0;
  __ZNSt3__16localeD2Ev($1);
  HEAP32[$2>>2] = ((((6384) + 8|0)));
  __ZNSt3__16localeD2Ev($3);
  ___resumeException($33|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($1);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIwED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((6384) + 8|0)));
 $2 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((6384) + 8|0)));
 $2 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($2);
 $3 = $this;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,(9208))|0);
 $2 = $1;
 $3 = (($this) + 36|0);
 HEAP32[$3>>2] = $2;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 127]($2)|0);
 $9 = (($this) + 44|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$3>>2]|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 127]($10)|0);
 $16 = (($this) + 53|0);
 $17 = $15&1;
 HEAP8[$16] = $17;
 $18 = HEAP32[$9>>2]|0;
 $19 = ($18|0)>(8);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 __ZNSt3__121__throw_runtime_errorEPKc((5112));
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp;
 $__enxt = sp + 8|0;
 $__ci = sp + 16|0;
 $__inxt = sp + 24|0;
 $1 = ($__c|0)==(-1);
 $2 = (($this) + 52|0);
 $3 = HEAP8[$2]|0;
 $4 = ($3<<24>>24)!=(0);
 if ($1) {
  if ($4) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $5 = (($this) + 48|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(-1);
  $8 = $7&1;
  HEAP8[$2] = $8;
  $$01 = $6;
  STACKTOP = sp;return ($$01|0);
 }
 $9 = (($this) + 48|0);
 L8: do {
  if ($4) {
   $10 = HEAP32[$9>>2]|0;
   HEAP32[$__ci>>2] = $10;
   $11 = (($this) + 36|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($this) + 40|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($__ci) + 4|0);
   $16 = ($__extbuf);
   $17 = (($__extbuf) + 8|0);
   $18 = $12;
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (FUNCTION_TABLE_iiiiiiiii[$21 & 15]($12,$14,$__ci,$15,$__inxt,$16,$17,$__enxt)|0);
   if ((($22|0) == 3)) {
    $23 = HEAP32[$9>>2]|0;
    $24 = $23&255;
    HEAP8[$16] = $24;
    $25 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $25;
   } else if ((($22|0) == 1) | (($22|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   }
   $26 = (($this) + 32|0);
   while(1) {
    $27 = HEAP32[$__enxt>>2]|0;
    $28 = ($27>>>0)>($16>>>0);
    if (!($28)) {
     break L8;
    }
    $29 = (($27) + -1|0);
    HEAP32[$__enxt>>2] = $29;
    $30 = HEAP8[$29]|0;
    $31 = $30 << 24 >> 24;
    $32 = HEAP32[$26>>2]|0;
    $33 = (_ungetc(($31|0),($32|0))|0);
    $34 = ($33|0)==(-1);
    if ($34) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$9>>2] = $__c;
 HEAP8[$2] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp;
 $__1buf = sp + 8|0;
 $__enxt = sp + 16|0;
 $__inxt = sp + 24|0;
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  if (!($__consume)) {
   $$0 = $5;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$4>>2] = -1;
  HEAP8[$1] = 0;
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($this) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(1);
 $9 = $8 ? $7 : 1;
 $10 = ($9|0)>(0);
 L8: do {
  if ($10) {
   $11 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $12 = HEAP32[$11>>2]|0;
    $13 = (_fgetc(($12|0))|0);
    $14 = ($13|0)==(-1);
    if ($14) {
     $$0 = -1;
     break;
    }
    $15 = $13&255;
    $16 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$16] = $15;
    $17 = (($__i$09) + 1)|0;
    $18 = ($17|0)<($9|0);
    if ($18) {
     $__i$09 = $17;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $19 = (($this) + 53|0);
 $20 = HEAP8[$19]|0;
 $21 = ($20<<24>>24)==(0);
 L15: do {
  if ($21) {
   $22 = (($this) + 40|0);
   $23 = (($this) + 36|0);
   $24 = ($__extbuf);
   $25 = (($__1buf) + 4|0);
   $26 = (($this) + 32|0);
   $__nread$0 = $9;
   while(1) {
    $30 = HEAP32[$22>>2]|0;
    $31 = $30;
    $32 = $31;
    $33 = $32;
    $34 = HEAP32[$33>>2]|0;
    $35 = (($32) + 4)|0;
    $36 = $35;
    $37 = HEAP32[$36>>2]|0;
    $38 = HEAP32[$23>>2]|0;
    $39 = (($__extbuf) + ($__nread$0)|0);
    $40 = $38;
    $41 = HEAP32[$40>>2]|0;
    $42 = (($41) + 16|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (FUNCTION_TABLE_iiiiiiiii[$43 & 15]($38,$30,$24,$39,$__enxt,$__1buf,$25,$__inxt)|0);
    if ((($44|0) == 3)) {
     label = 14;
     break;
    } else if ((($44|0) == 2)) {
     $$0 = -1;
     label = 22;
     break;
    } else if (!((($44|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $45 = HEAP32[$22>>2]|0;
    $46 = $45;
    $47 = $46;
    $48 = $47;
    HEAP32[$48>>2] = $34;
    $49 = (($47) + 4)|0;
    $50 = $49;
    HEAP32[$50>>2] = $37;
    $51 = ($__nread$0|0)==(8);
    if ($51) {
     $$0 = -1;
     label = 22;
     break;
    }
    $52 = HEAP32[$26>>2]|0;
    $53 = (_fgetc(($52|0))|0);
    $54 = ($53|0)==(-1);
    if ($54) {
     $$0 = -1;
     label = 22;
     break;
    }
    $57 = $53&255;
    HEAP8[$39] = $57;
    $58 = (($__nread$0) + 1)|0;
    $__nread$0 = $58;
   }
   if ((label|0) == 14) {
    $55 = HEAP8[$24]|0;
    $56 = $55 << 24 >> 24;
    HEAP32[$__1buf>>2] = $56;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 22) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $27 = ($__extbuf);
   $28 = HEAP8[$27]|0;
   $29 = $28 << 24 >> 24;
   HEAP32[$__1buf>>2] = $29;
   $__nread$2 = $9;
  }
 } while(0);
 if ($__consume) {
  $68 = HEAP32[$__1buf>>2]|0;
  $69 = (($this) + 48|0);
  HEAP32[$69>>2] = $68;
  $$0 = $68;
  STACKTOP = sp;return ($$0|0);
 }
 $59 = (($this) + 32|0);
 $__i2$0 = $__nread$2;
 while(1) {
  $60 = ($__i2$0|0)>(0);
  if (!($60)) {
   break;
  }
  $61 = (($__i2$0) + -1)|0;
  $62 = (($__extbuf) + ($61)|0);
  $63 = HEAP8[$62]|0;
  $64 = $63 << 24 >> 24;
  $65 = HEAP32[$59>>2]|0;
  $66 = (_ungetc(($64|0),($65|0))|0);
  $67 = ($66|0)==(-1);
  if ($67) {
   $$0 = -1;
   label = 22;
   break;
  } else {
   $__i2$0 = $61;
  }
 }
 if ((label|0) == 22) {
  STACKTOP = sp;return ($$0|0);
 }
 $$pre = HEAP32[$__1buf>>2]|0;
 $$0 = $$pre;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__111__stdoutbufIcED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((6320) + 8|0)));
 $2 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((6320) + 8|0)));
 $2 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($2);
 $3 = $this;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 (FUNCTION_TABLE_ii[$4 & 127]($this)|0);
 $5 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,(9200))|0);
 $6 = $5;
 $7 = (($this) + 36|0);
 HEAP32[$7>>2] = $6;
 $8 = $5;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$11 & 127]($6)|0);
 $13 = (($this) + 44|0);
 $14 = $12&1;
 HEAP8[$13] = $14;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__extbuf = sp;
 $__extbe = sp + 8|0;
 $1 = (($this) + 36|0);
 $2 = (($this) + 40|0);
 $3 = ($__extbuf);
 $4 = (($__extbuf) + 8|0);
 $5 = $__extbuf;
 $6 = (($this) + 32|0);
 while(1) {
  $7 = HEAP32[$1>>2]|0;
  $8 = HEAP32[$2>>2]|0;
  $9 = $7;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (FUNCTION_TABLE_iiiiii[$12 & 31]($7,$8,$3,$4,$__extbe)|0);
  $14 = HEAP32[$__extbe>>2]|0;
  $15 = $14;
  $16 = (($15) - ($5))|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = (_fwrite(($3|0),1,($16|0),($17|0))|0);
  $19 = ($18|0)==($16|0);
  if (!($19)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($13|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($13|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $20 = HEAP32[$6>>2]|0;
  $21 = (_fflush(($20|0))|0);
  $not$ = ($21|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__i$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 44|0);
 $2 = HEAP8[$1]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $6 = (($this) + 32|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (_fwrite(($__s|0),1,($__n|0),($7|0))|0);
  $$0 = $8;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = $this;
 $5 = ($__n|0)>(0);
 if ($5) {
  $$012 = $__s;$__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $9 = HEAP32[$4>>2]|0;
  $10 = (($9) + 52|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP8[$$012]|0;
  $13 = $12&255;
  $14 = (FUNCTION_TABLE_iii[$11 & 63]($this,$13)|0);
  $15 = ($14|0)==(-1);
  if ($15) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $16 = (($__i$03) + 1)|0;
  $17 = (($$012) + 1|0);
  $18 = ($16|0)<($__n|0);
  if ($18) {
   $$012 = $17;$__i$03 = $16;
  } else {
   $$0 = $16;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__1buf = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp;
 $__1buf = sp + 8|0;
 $__extbe = sp + 16|0;
 $__e = sp + 24|0;
 $1 = ($__c|0)==(-1);
 L1: do {
  if (!($1)) {
   $2 = $__c&255;
   HEAP8[$__1buf] = $2;
   $3 = (($this) + 44|0);
   $4 = HEAP8[$3]|0;
   $5 = ($4<<24>>24)==(0);
   if (!($5)) {
    $6 = (($this) + 32|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = (_fwrite(($__1buf|0),1,1,($7|0))|0);
    $9 = ($8|0)==(1);
    if ($9) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   $10 = ($__extbuf);
   HEAP32[$__extbe>>2] = $10;
   $11 = (($__1buf) + 1|0);
   $12 = (($this) + 36|0);
   $13 = (($this) + 40|0);
   $14 = (($__extbuf) + 8|0);
   $15 = $__extbuf;
   $16 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $17 = HEAP32[$12>>2]|0;
    $18 = HEAP32[$13>>2]|0;
    $19 = $17;
    $20 = HEAP32[$19>>2]|0;
    $21 = (($20) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_iiiiiiiii[$22 & 15]($17,$18,$pbase$0,$11,$__e,$10,$14,$__extbe)|0);
    $24 = HEAP32[$__e>>2]|0;
    $25 = ($24|0)==($pbase$0|0);
    if ($25) {
     $$0 = -1;
     label = 12;
     break;
    }
    $26 = ($23|0)==(3);
    if ($26) {
     label = 7;
     break;
    }
    $30 = ($23|0)==(1);
    $31 = ($23>>>0)<(2);
    if (!($31)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $32 = HEAP32[$__extbe>>2]|0;
    $33 = $32;
    $34 = (($33) - ($15))|0;
    $35 = HEAP32[$16>>2]|0;
    $36 = (_fwrite(($10|0),1,($34|0),($35|0))|0);
    $37 = ($36|0)==($34|0);
    if (!($37)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $38 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $30 ? $38 : $pbase$0;
    if ($30) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $27 = HEAP32[$16>>2]|0;
    $28 = (_fwrite(($pbase$0|0),1,1,($27|0))|0);
    $29 = ($28|0)==(1);
    if ($29) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $1 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = sp;
 $2 = ($this);
 HEAP32[$2>>2] = ((((6320) + 8|0)));
 $3 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($3);
 $4 = (($this) + 8|0);
 $5 = $4;
 ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;HEAP32[$5+12>>2]=0|0;HEAP32[$5+16>>2]=0|0;HEAP32[$5+20>>2]=0|0;
 HEAP32[$2>>2] = ((((5264) + 8|0)));
 $6 = (($this) + 32|0);
 HEAP32[$6>>2] = $__fp;
 $7 = (($this) + 40|0);
 HEAP32[$7>>2] = $__st;
 $8 = (($this) + 48|0);
 HEAP32[$8>>2] = -1;
 $9 = (($this) + 52|0);
 HEAP8[$9] = 0;
 __ZNSt3__16localeC2ERKS0_($1,$3);
 __THREW__ = 0;
 $10 = (invoke_iii(23,($1|0),((9200)|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $33 = ___cxa_find_matching_catch(-1,-1)|0;
  $34 = tempRet0;
  __ZNSt3__16localeD2Ev($1);
  HEAP32[$2>>2] = ((((6320) + 8|0)));
  __ZNSt3__16localeD2Ev($3);
  ___resumeException($33|0);
  // unreachable;
 }
 $13 = $10;
 $14 = (($this) + 36|0);
 HEAP32[$14>>2] = $13;
 $15 = $10;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (FUNCTION_TABLE_ii[$18 & 127]($13)|0);
 $20 = (($this) + 44|0);
 HEAP32[$20>>2] = $19;
 $21 = HEAP32[$14>>2]|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 28|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (FUNCTION_TABLE_ii[$25 & 127]($21)|0);
 $27 = (($this) + 53|0);
 $28 = $26&1;
 HEAP8[$27] = $28;
 $29 = HEAP32[$20>>2]|0;
 $30 = ($29|0)>(8);
 if (!($30)) {
  __ZNSt3__16localeD2Ev($1);
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_vi(181,((5112)|0));
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $33 = ___cxa_find_matching_catch(-1,-1)|0;
  $34 = tempRet0;
  __ZNSt3__16localeD2Ev($1);
  HEAP32[$2>>2] = ((((6320) + 8|0)));
  __ZNSt3__16localeD2Ev($3);
  ___resumeException($33|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($1);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIcED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((6320) + 8|0)));
 $2 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((6320) + 8|0)));
 $2 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($2);
 $3 = $this;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,(9200))|0);
 $2 = $1;
 $3 = (($this) + 36|0);
 HEAP32[$3>>2] = $2;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 127]($2)|0);
 $9 = (($this) + 44|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[$3>>2]|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 127]($10)|0);
 $16 = (($this) + 53|0);
 $17 = $15&1;
 HEAP8[$16] = $17;
 $18 = HEAP32[$9>>2]|0;
 $19 = ($18|0)>(8);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 __ZNSt3__121__throw_runtime_errorEPKc((5112));
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp;
 $__enxt = sp + 8|0;
 $__ci = sp + 16|0;
 $__inxt = sp + 24|0;
 $1 = ($__c|0)==(-1);
 $2 = (($this) + 52|0);
 $3 = HEAP8[$2]|0;
 $4 = ($3<<24>>24)!=(0);
 if ($1) {
  if ($4) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $5 = (($this) + 48|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(-1);
  $8 = $7&1;
  HEAP8[$2] = $8;
  $$01 = $6;
  STACKTOP = sp;return ($$01|0);
 }
 $9 = (($this) + 48|0);
 L8: do {
  if ($4) {
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   HEAP8[$__ci] = $11;
   $12 = (($this) + 36|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($this) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($__ci) + 1|0);
   $17 = ($__extbuf);
   $18 = (($__extbuf) + 8|0);
   $19 = $13;
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + 12|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (FUNCTION_TABLE_iiiiiiiii[$22 & 15]($13,$15,$__ci,$16,$__inxt,$17,$18,$__enxt)|0);
   if ((($23|0) == 1) | (($23|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   } else if ((($23|0) == 3)) {
    $24 = HEAP32[$9>>2]|0;
    $25 = $24&255;
    HEAP8[$17] = $25;
    $26 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $26;
   }
   $27 = (($this) + 32|0);
   while(1) {
    $28 = HEAP32[$__enxt>>2]|0;
    $29 = ($28>>>0)>($17>>>0);
    if (!($29)) {
     break L8;
    }
    $30 = (($28) + -1|0);
    HEAP32[$__enxt>>2] = $30;
    $31 = HEAP8[$30]|0;
    $32 = $31 << 24 >> 24;
    $33 = HEAP32[$27>>2]|0;
    $34 = (_ungetc(($32|0),($33|0))|0);
    $35 = ($34|0)==(-1);
    if ($35) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$9>>2] = $__c;
 HEAP8[$2] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $__extbuf = sp;
 $__1buf = sp + 8|0;
 $__enxt = sp + 16|0;
 $__inxt = sp + 24|0;
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  if (!($__consume)) {
   $$0 = $5;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$4>>2] = -1;
  HEAP8[$1] = 0;
  $$0 = $5;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (($this) + 44|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(1);
 $9 = $8 ? $7 : 1;
 $10 = ($9|0)>(0);
 L8: do {
  if ($10) {
   $11 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $12 = HEAP32[$11>>2]|0;
    $13 = (_fgetc(($12|0))|0);
    $14 = ($13|0)==(-1);
    if ($14) {
     $$0 = -1;
     break;
    }
    $15 = $13&255;
    $16 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$16] = $15;
    $17 = (($__i$09) + 1)|0;
    $18 = ($17|0)<($9|0);
    if ($18) {
     $__i$09 = $17;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $19 = (($this) + 53|0);
 $20 = HEAP8[$19]|0;
 $21 = ($20<<24>>24)==(0);
 L15: do {
  if ($21) {
   $22 = (($this) + 40|0);
   $23 = (($this) + 36|0);
   $24 = ($__extbuf);
   $25 = (($__1buf) + 1|0);
   $26 = (($this) + 32|0);
   $__nread$0 = $9;
   while(1) {
    $29 = HEAP32[$22>>2]|0;
    $30 = $29;
    $31 = $30;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    $34 = (($31) + 4)|0;
    $35 = $34;
    $36 = HEAP32[$35>>2]|0;
    $37 = HEAP32[$23>>2]|0;
    $38 = (($__extbuf) + ($__nread$0)|0);
    $39 = $37;
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + 16|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = (FUNCTION_TABLE_iiiiiiiii[$42 & 15]($37,$29,$24,$38,$__enxt,$__1buf,$25,$__inxt)|0);
    if ((($43|0) == 3)) {
     label = 14;
     break;
    } else if ((($43|0) == 2)) {
     $$0 = -1;
     label = 23;
     break;
    } else if (!((($43|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $44 = HEAP32[$22>>2]|0;
    $45 = $44;
    $46 = $45;
    $47 = $46;
    HEAP32[$47>>2] = $33;
    $48 = (($46) + 4)|0;
    $49 = $48;
    HEAP32[$49>>2] = $36;
    $50 = ($__nread$0|0)==(8);
    if ($50) {
     $$0 = -1;
     label = 23;
     break;
    }
    $51 = HEAP32[$26>>2]|0;
    $52 = (_fgetc(($51|0))|0);
    $53 = ($52|0)==(-1);
    if ($53) {
     $$0 = -1;
     label = 23;
     break;
    }
    $55 = $52&255;
    HEAP8[$38] = $55;
    $56 = (($__nread$0) + 1)|0;
    $__nread$0 = $56;
   }
   if ((label|0) == 14) {
    $54 = HEAP8[$24]|0;
    HEAP8[$__1buf] = $54;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $27 = ($__extbuf);
   $28 = HEAP8[$27]|0;
   HEAP8[$__1buf] = $28;
   $__nread$2 = $9;
  }
 } while(0);
 do {
  if ($__consume) {
   $66 = HEAP8[$__1buf]|0;
   $67 = $66&255;
   $68 = (($this) + 48|0);
   HEAP32[$68>>2] = $67;
   $69 = $66;
  } else {
   $57 = (($this) + 32|0);
   $__i2$0 = $__nread$2;
   while(1) {
    $58 = ($__i2$0|0)>(0);
    if (!($58)) {
     label = 21;
     break;
    }
    $59 = (($__i2$0) + -1)|0;
    $60 = (($__extbuf) + ($59)|0);
    $61 = HEAP8[$60]|0;
    $62 = $61&255;
    $63 = HEAP32[$57>>2]|0;
    $64 = (_ungetc(($62|0),($63|0))|0);
    $65 = ($64|0)==(-1);
    if ($65) {
     $$0 = -1;
     label = 23;
     break;
    } else {
     $__i2$0 = $59;
    }
   }
   if ((label|0) == 21) {
    $$pre = HEAP8[$__1buf]|0;
    $69 = $$pre;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $70 = $69&255;
 $$0 = $70;
 STACKTOP = sp;return ($$0|0);
}
function __GLOBAL__I_a263() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_base4InitC2Ev(0);
 (_atexit(((182)|0),(((4536))|0),((___dso_handle)|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 $1 = (($this) + 4|0);
 u$0 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = ((u$0+1)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = ($2|0)==(0);
 if (!($3)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = $this;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 FUNCTION_TABLE_vi[$7 & 255]($this);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt11logic_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((5408) + 8|0)));
 $2 = (_strlen(($msg|0))|0);
 $3 = (($2) + 13)|0;
 __THREW__ = 0;
 $4 = (invoke_ii(88,($3|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $15 = ___cxa_find_matching_catch(-1,-1)|0;
  $16 = tempRet0;
  $17 = ($this);
  __ZNSt9exceptionD2Ev(($17|0));
  ___resumeException($15|0);
  // unreachable;
 } else {
  $7 = (($this) + 4|0);
  $8 = (($2) + 1)|0;
  $9 = $4;
  $10 = (($4) + 4|0);
  $11 = $10;
  HEAP32[$11>>2] = $2;
  HEAP32[$9>>2] = $2;
  $12 = (($4) + 12|0);
  HEAP32[$7>>2] = $12;
  $13 = (($4) + 8|0);
  $14 = $13;
  HEAP32[$14>>2] = 0;
  _memcpy(($12|0),($msg|0),($8|0))|0;
  STACKTOP = sp;return;
 }
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((5408) + 8|0)));
 $2 = (($this) + 4|0);
 $this$idx$val$i$i = HEAP32[$2>>2]|0;
 $3 = (($this$idx$val$i$i) + -4|0);
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($5+-1)|0);
 $6 = (($5) + -1)|0;
 $7 = ($6|0)<(0);
 if ($7) {
  $8 = HEAP32[$2>>2]|0;
  $9 = (($8) + -12|0);
  __ZdaPv($9);
 }
 $10 = ($this);
 __ZNSt9exceptionD2Ev(($10|0));
 $11 = $this;
 __ZdlPv($11);
 STACKTOP = sp;return;
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $this$idx$val$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((5408) + 8|0)));
 $2 = (($this) + 4|0);
 $this$idx$val$i = HEAP32[$2>>2]|0;
 $3 = (($this$idx$val$i) + -4|0);
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($5+-1)|0);
 $6 = (($5) + -1)|0;
 $7 = ($6|0)<(0);
 if (!($7)) {
  $10 = ($this);
  __ZNSt9exceptionD2Ev(($10|0));
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + -12|0);
 __ZdaPv($9);
 $10 = ($this);
 __ZNSt9exceptionD2Ev(($10|0));
 STACKTOP = sp;return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $$idx$val = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 4|0);
 $$idx$val = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($$idx$val|0);
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 $2 = ($this);
 HEAP32[$2>>2] = ((((5432) + 8|0)));
 $3 = (($this) + 4|0);
 $4 = $msg;
 $5 = HEAP8[$4]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = $msg;
  $11 = (($10) + 1|0);
  $12 = $11;
 } else {
  $8 = (($msg) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $12 = $9;
 }
 $13 = (_strlen(($12|0))|0);
 $14 = (($13) + 13)|0;
 __THREW__ = 0;
 $15 = (invoke_ii(88,($14|0))|0);
 $16 = __THREW__; __THREW__ = 0;
 $17 = $16&1;
 if ($17) {
  $25 = ___cxa_find_matching_catch(-1,-1)|0;
  $26 = tempRet0;
  __ZNSt9exceptionD2Ev(($1|0));
  ___resumeException($25|0);
  // unreachable;
 } else {
  $18 = (($13) + 1)|0;
  $19 = $15;
  $20 = (($15) + 4|0);
  $21 = $20;
  HEAP32[$21>>2] = $13;
  HEAP32[$19>>2] = $13;
  $22 = (($15) + 12|0);
  HEAP32[$3>>2] = $22;
  $23 = (($15) + 8|0);
  $24 = $23;
  HEAP32[$24>>2] = 0;
  _memcpy(($22|0),($12|0),($18|0))|0;
  STACKTOP = sp;return;
 }
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((5432) + 8|0)));
 $2 = (_strlen(($msg|0))|0);
 $3 = (($2) + 13)|0;
 __THREW__ = 0;
 $4 = (invoke_ii(88,($3|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $15 = ___cxa_find_matching_catch(-1,-1)|0;
  $16 = tempRet0;
  $17 = ($this);
  __ZNSt9exceptionD2Ev(($17|0));
  ___resumeException($15|0);
  // unreachable;
 } else {
  $7 = (($this) + 4|0);
  $8 = (($2) + 1)|0;
  $9 = $4;
  $10 = (($4) + 4|0);
  $11 = $10;
  HEAP32[$11>>2] = $2;
  HEAP32[$9>>2] = $2;
  $12 = (($4) + 12|0);
  HEAP32[$7>>2] = $12;
  $13 = (($4) + 8|0);
  $14 = $13;
  HEAP32[$14>>2] = 0;
  _memcpy(($12|0),($msg|0),($8|0))|0;
  STACKTOP = sp;return;
 }
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((5432) + 8|0)));
 $2 = (($this) + 4|0);
 $this$idx$val$i$i = HEAP32[$2>>2]|0;
 $3 = (($this$idx$val$i$i) + -4|0);
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($5+-1)|0);
 $6 = (($5) + -1)|0;
 $7 = ($6|0)<(0);
 if ($7) {
  $8 = HEAP32[$2>>2]|0;
  $9 = (($8) + -12|0);
  __ZdaPv($9);
 }
 $10 = ($this);
 __ZNSt9exceptionD2Ev(($10|0));
 $11 = $this;
 __ZdlPv($11);
 STACKTOP = sp;return;
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $this$idx$val$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((5432) + 8|0)));
 $2 = (($this) + 4|0);
 $this$idx$val$i = HEAP32[$2>>2]|0;
 $3 = (($this$idx$val$i) + -4|0);
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($5+-1)|0);
 $6 = (($5) + -1)|0;
 $7 = ($6|0)<(0);
 if (!($7)) {
  $10 = ($this);
  __ZNSt9exceptionD2Ev(($10|0));
  STACKTOP = sp;return;
 }
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + -12|0);
 __ZdaPv($9);
 $10 = ($this);
 __ZNSt9exceptionD2Ev(($10|0));
 STACKTOP = sp;return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $$idx$val = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 4|0);
 $$idx$val = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($$idx$val|0);
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((5408) + 8|0)));
 $2 = (($this) + 4|0);
 $this$idx$val$i$i = HEAP32[$2>>2]|0;
 $3 = (($this$idx$val$i$i) + -4|0);
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($5+-1)|0);
 $6 = (($5) + -1)|0;
 $7 = ($6|0)<(0);
 if ($7) {
  $8 = HEAP32[$2>>2]|0;
  $9 = (($8) + -12|0);
  __ZdaPv($9);
 }
 $10 = ($this);
 __ZNSt9exceptionD2Ev(($10|0));
 $11 = $this;
 __ZdlPv($11);
 STACKTOP = sp;return;
}
function __ZNSt14overflow_errorD0Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $this$idx$val$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((5432) + 8|0)));
 $2 = (($this) + 4|0);
 $this$idx$val$i$i = HEAP32[$2>>2]|0;
 $3 = (($this$idx$val$i$i) + -4|0);
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;HEAP32[$4>>2] = (($5+-1)|0);
 $6 = (($5) + -1)|0;
 $7 = ($6|0)<(0);
 if ($7) {
  $8 = HEAP32[$2>>2]|0;
  $9 = (($8) + -12|0);
  __ZdaPv($9);
 }
 $10 = ($this);
 __ZNSt9exceptionD2Ev(($10|0));
 $11 = $this;
 __ZdlPv($11);
 STACKTOP = sp;return;
}
function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($agg$result);
 HEAP32[$1>>2] = $ev;
 $2 = (($agg$result) + 4|0);
 HEAP32[$2>>2] = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = sp;
 $2 = $this;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_viii[$5 & 31]($1,$this,$code);
 $6 = (($1) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($condition) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7|0)==($9|0);
 if (!($10)) {
  $16 = 0;
  STACKTOP = sp;return ($16|0);
 }
 $11 = ($1);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($condition);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($12|0)==($14|0);
 $16 = $15;
 STACKTOP = sp;return ($16|0);
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($code) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($this|0);
 if (!($3)) {
  $7 = 0;
  STACKTOP = sp;return ($7|0);
 }
 $4 = ($code);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($condition|0);
 $7 = $6;
 STACKTOP = sp;return ($7|0);
}
function __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strerror(($ev|0))|0);
 $2 = (_strlen(($1|0))|0);
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  $7 = $agg$result;
  HEAP8[$7] = $6;
  $8 = $agg$result;
  $9 = (($8) + 1|0);
  $__p$0$i$i$i = $9;
  _memcpy(($__p$0$i$i$i|0),($1|0),($2|0))|0;
  $17 = (($__p$0$i$i$i) + ($2)|0);
  HEAP8[$17] = 0;
  STACKTOP = sp;return;
 } else {
  $10 = (($2) + 16)|0;
  $11 = $10 & -16;
  $12 = (__Znwj($11)|0);
  $13 = (($agg$result) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = $11 | 1;
  $15 = ($agg$result);
  HEAP32[$15>>2] = $14;
  $16 = (($agg$result) + 4|0);
  HEAP32[$16>>2] = $2;
  $__p$0$i$i$i = $12;
  _memcpy(($__p$0$i$i$i|0),($1|0),($2|0))|0;
  $17 = (($__p$0$i$i$i) + ($2)|0);
  HEAP8[$17] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$ec,$what_arg) {
 $agg$result = $agg$result|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$pre = 0, $$pre2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = sp;
 $2 = ($ec);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 $$pre2 = $what_arg;
 do {
  if (!($4)) {
   $5 = HEAP8[$$pre2]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = $5&255;
    $11 = $10 >>> 1;
    $12 = $11;
   } else {
    $8 = (($what_arg) + 4|0);
    $9 = HEAP32[$8>>2]|0;
    $12 = $9;
   }
   $13 = ($12|0)==(0);
   if ($13) {
    $14 = $3;
   } else {
    (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg,(5656),2)|0);
    $$pre = HEAP32[$2>>2]|0;
    $14 = $$pre;
   }
   $15 = (($ec) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $16;
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + 24|0);
   $20 = HEAP32[$19>>2]|0;
   FUNCTION_TABLE_viii[$20 & 31]($1,$16,$14);
   $21 = $1;
   $22 = HEAP8[$21]|0;
   $23 = $22 & 1;
   $24 = ($23<<24>>24)==(0);
   if ($24) {
    $29 = $1;
    $30 = (($29) + 1|0);
    $31 = $22&255;
    $32 = $31 >>> 1;
    $33 = $30;$34 = $32;
   } else {
    $25 = (($1) + 8|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($1) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $33 = $26;$34 = $28;
   }
   __THREW__ = 0;
   (invoke_iiii(28,($what_arg|0),($33|0),($34|0))|0);
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   if (!($36)) {
    $37 = HEAP8[$21]|0;
    $38 = $37 & 1;
    $39 = ($38<<24>>24)==(0);
    if ($39) {
     break;
    }
    $40 = (($1) + 8|0);
    $41 = HEAP32[$40>>2]|0;
    __ZdlPv($41);
    break;
   }
   $42 = ___cxa_find_matching_catch(-1,-1)|0;
   $43 = tempRet0;
   $44 = HEAP8[$21]|0;
   $45 = $44 & 1;
   $46 = ($45<<24>>24)==(0);
   if ($46) {
    ___resumeException($42|0);
    // unreachable;
   }
   $47 = (($1) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   __ZdlPv($48);
   ___resumeException($42|0);
   // unreachable;
  }
 } while(0);
 $49 = $agg$result;
 ;HEAP32[$49+0>>2]=HEAP32[$$pre2+0>>2]|0;HEAP32[$49+4>>2]=HEAP32[$$pre2+4>>2]|0;HEAP32[$49+8>>2]=HEAP32[$$pre2+8>>2]|0;
 ;HEAP32[$$pre2+0>>2]=0|0;HEAP32[$$pre2+4>>2]=0|0;HEAP32[$$pre2+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg) {
 $this = $this|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$0 = 0, $$01 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = sp;
 $2 = sp + 16|0;
 $3 = (_strlen(($what_arg|0))|0);
 $4 = ($3>>>0)>(4294967279);
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $5 = ($3>>>0)<(11);
 if ($5) {
  $6 = $3 << 1;
  $7 = $6&255;
  $8 = $2;
  HEAP8[$8] = $7;
  $9 = $2;
  $10 = (($9) + 1|0);
  $__p$0$i$i$i = $10;
 } else {
  $11 = (($3) + 16)|0;
  $12 = $11 & -16;
  $13 = (__Znwj($12)|0);
  $14 = (($2) + 8|0);
  HEAP32[$14>>2] = $13;
  $15 = $12 | 1;
  $16 = ($2);
  HEAP32[$16>>2] = $15;
  $17 = (($2) + 4|0);
  HEAP32[$17>>2] = $3;
  $__p$0$i$i$i = $13;
 }
 _memcpy(($__p$0$i$i$i|0),($what_arg|0),($3|0))|0;
 $18 = (($__p$0$i$i$i) + ($3)|0);
 HEAP8[$18] = 0;
 __THREW__ = 0;
 invoke_viii(23,($1|0),($ec|0),($2|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 do {
  if ($20) {
   $50 = ___cxa_find_matching_catch(-1,-1)|0;
   $51 = tempRet0;
   $$0 = $51;$$01 = $50;
  } else {
   $21 = ($this);
   __THREW__ = 0;
   invoke_vii(47,($21|0),($1|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $52 = ___cxa_find_matching_catch(-1,-1)|0;
    $53 = tempRet0;
    $54 = $1;
    $55 = HEAP8[$54]|0;
    $56 = $55 & 1;
    $57 = ($56<<24>>24)==(0);
    if ($57) {
     $$0 = $53;$$01 = $52;
     break;
    }
    $58 = (($1) + 8|0);
    $59 = HEAP32[$58>>2]|0;
    __ZdlPv($59);
    $$0 = $53;$$01 = $52;
    break;
   }
   $24 = $1;
   $25 = HEAP8[$24]|0;
   $26 = $25 & 1;
   $27 = ($26<<24>>24)==(0);
   if (!($27)) {
    $28 = (($1) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    __ZdlPv($29);
   }
   $30 = $2;
   $31 = HEAP8[$30]|0;
   $32 = $31 & 1;
   $33 = ($32<<24>>24)==(0);
   if ($33) {
    $36 = ($this);
    HEAP32[$36>>2] = ((((5664) + 8|0)));
    $37 = (($this) + 8|0);
    $38 = $ec;
    $39 = $37;
    $40 = $38;
    $41 = $40;
    $42 = HEAP32[$41>>2]|0;
    $43 = (($40) + 4)|0;
    $44 = $43;
    $45 = HEAP32[$44>>2]|0;
    $46 = $39;
    $47 = $46;
    HEAP32[$47>>2] = $42;
    $48 = (($46) + 4)|0;
    $49 = $48;
    HEAP32[$49>>2] = $45;
    STACKTOP = sp;return;
   }
   $34 = (($2) + 8|0);
   $35 = HEAP32[$34>>2]|0;
   __ZdlPv($35);
   $36 = ($this);
   HEAP32[$36>>2] = ((((5664) + 8|0)));
   $37 = (($this) + 8|0);
   $38 = $ec;
   $39 = $37;
   $40 = $38;
   $41 = $40;
   $42 = HEAP32[$41>>2]|0;
   $43 = (($40) + 4)|0;
   $44 = $43;
   $45 = HEAP32[$44>>2]|0;
   $46 = $39;
   $47 = $46;
   HEAP32[$47>>2] = $42;
   $48 = (($46) + 4)|0;
   $49 = $48;
   HEAP32[$49>>2] = $45;
   STACKTOP = sp;return;
  }
 } while(0);
 $60 = $2;
 $61 = HEAP8[$60]|0;
 $62 = $61 & 1;
 $63 = ($62<<24>>24)==(0);
 if ($63) {
  ___resumeException($$01|0);
  // unreachable;
 }
 $64 = (($2) + 8|0);
 $65 = HEAP32[$64>>2]|0;
 __ZdlPv($65);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 __ZNSt13runtime_errorD2Ev($1);
 $2 = $this;
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 __ZNSt13runtime_errorD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__112__next_primeEj($n) {
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$0$ph$i$i$i = 0, $$0$ph$i$i$i2 = 0, $$k0$0 = 0, $$neg1$i$i$i = 0, $$neg1$i$i$i6 = 0, $$sum$i$i$i = 0, $$sum$i$i$i5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__len$0$i$i$i = 0, $__len$0$i$i$i4 = 0, $__len$0$ph$i$i$i = 0, $__len$0$ph$i$i$i1 = 0, $i$015 = 0, $in$0 = 0, $j$012 = 0, $k0$0 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($n>>>0)<(212);
 if ($1) {
  $$0$ph$i$i$i = ((5808));$__len$0$ph$i$i$i = 48;
  L2: while(1) {
   $__len$0$i$i$i = $__len$0$ph$i$i$i;
   while(1) {
    $2 = ($__len$0$i$i$i|0)==(0);
    if ($2) {
     break L2;
    }
    $3 = (($__len$0$i$i$i|0) / 2)&-1;
    $4 = (($$0$ph$i$i$i) + ($3<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($5>>>0)<($n>>>0);
    if ($6) {
     break;
    } else {
     $__len$0$i$i$i = $3;
    }
   }
   $$sum$i$i$i = (($3) + 1)|0;
   $7 = (($$0$ph$i$i$i) + ($$sum$i$i$i<<2)|0);
   $$neg1$i$i$i = (($__len$0$i$i$i) + -1)|0;
   $8 = (($$neg1$i$i$i) - ($3))|0;
   $$0$ph$i$i$i = $7;$__len$0$ph$i$i$i = $8;
  }
  $9 = HEAP32[$$0$ph$i$i$i>>2]|0;
  $$0 = $9;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ($n>>>0)>(4294967291);
 if ($10) {
  $11 = (___cxa_allocate_exception(8)|0);
  $12 = $11;
  __THREW__ = 0;
  invoke_vii(75,($12|0),((6192)|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if ($14) {
   $16 = ___cxa_find_matching_catch(-1,-1)|0;
   $17 = tempRet0;
   ___cxa_free_exception(($11|0));
   ___resumeException($16|0);
   // unreachable;
  } else {
   $15 = $11;
   HEAP32[$15>>2] = ((((5592) + 8|0)));
   ___cxa_throw(($11|0),((5640)|0),((58)|0));
   // unreachable;
  }
 }
 $18 = (($n>>>0) / 210)&-1;
 $19 = ($18*210)|0;
 $20 = (($n) - ($19))|0;
 $$0$ph$i$i$i2 = ((6000));$__len$0$ph$i$i$i1 = 48;
 L17: while(1) {
  $__len$0$i$i$i4 = $__len$0$ph$i$i$i1;
  while(1) {
   $21 = ($__len$0$i$i$i4|0)==(0);
   if ($21) {
    break L17;
   }
   $22 = (($__len$0$i$i$i4|0) / 2)&-1;
   $23 = (($$0$ph$i$i$i2) + ($22<<2)|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24>>>0)<($20>>>0);
   if ($25) {
    break;
   } else {
    $__len$0$i$i$i4 = $22;
   }
  }
  $$sum$i$i$i5 = (($22) + 1)|0;
  $26 = (($$0$ph$i$i$i2) + ($$sum$i$i$i5<<2)|0);
  $$neg1$i$i$i6 = (($__len$0$i$i$i4) + -1)|0;
  $27 = (($$neg1$i$i$i6) - ($22))|0;
  $$0$ph$i$i$i2 = $26;$__len$0$ph$i$i$i1 = $27;
 }
 $28 = $$0$ph$i$i$i2;
 $29 = (($28) - (6000))|0;
 $30 = $29 >> 2;
 $31 = ((6000) + ($30<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + ($19))|0;
 $in$0 = $30;$k0$0 = $18;$storemerge = $33;
 L24: while(1) {
  $j$012 = 5;
  while(1) {
   $35 = ((5808) + ($j$012<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($storemerge>>>0) / ($36>>>0))&-1;
   $38 = ($37>>>0)<($36>>>0);
   if ($38) {
    $$0 = $storemerge;
    label = 120;
    break L24;
   }
   $39 = Math_imul($37, $36)|0;
   $40 = ($storemerge|0)==($39|0);
   $41 = (($j$012) + 1)|0;
   if ($40) {
    break;
   }
   $34 = ($41>>>0)<(47);
   if ($34) {
    $j$012 = $41;
   } else {
    label = 21;
    break;
   }
  }
  L30: do {
   if ((label|0) == 21) {
    label = 0;
    $42 = ($storemerge>>>0)<(44521);
    if ($42) {
     $$0 = $storemerge;
     label = 120;
     break L24;
    }
    $43 = (($storemerge>>>0) / 211)&-1;
    $46 = $43;$i$015 = 211;
    while(1) {
     $47 = Math_imul($46, $i$015)|0;
     $48 = ($storemerge|0)==($47|0);
     if ($48) {
      break L30;
     }
     $49 = (($i$015) + 10)|0;
     $50 = (($storemerge>>>0) / ($49>>>0))&-1;
     $51 = ($50>>>0)<($49>>>0);
     if ($51) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $52 = Math_imul($50, $49)|0;
     $53 = ($storemerge|0)==($52|0);
     if ($53) {
      break L30;
     }
     $54 = (($i$015) + 12)|0;
     $55 = (($storemerge>>>0) / ($54>>>0))&-1;
     $56 = ($55>>>0)<($54>>>0);
     if ($56) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $57 = Math_imul($55, $54)|0;
     $58 = ($storemerge|0)==($57|0);
     if ($58) {
      break L30;
     }
     $59 = (($i$015) + 16)|0;
     $60 = (($storemerge>>>0) / ($59>>>0))&-1;
     $61 = ($60>>>0)<($59>>>0);
     if ($61) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $62 = Math_imul($60, $59)|0;
     $63 = ($storemerge|0)==($62|0);
     if ($63) {
      break L30;
     }
     $64 = (($i$015) + 18)|0;
     $65 = (($storemerge>>>0) / ($64>>>0))&-1;
     $66 = ($65>>>0)<($64>>>0);
     if ($66) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $67 = Math_imul($65, $64)|0;
     $68 = ($storemerge|0)==($67|0);
     if ($68) {
      break L30;
     }
     $69 = (($i$015) + 22)|0;
     $70 = (($storemerge>>>0) / ($69>>>0))&-1;
     $71 = ($70>>>0)<($69>>>0);
     if ($71) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $72 = Math_imul($70, $69)|0;
     $73 = ($storemerge|0)==($72|0);
     if ($73) {
      break L30;
     }
     $74 = (($i$015) + 28)|0;
     $75 = (($storemerge>>>0) / ($74>>>0))&-1;
     $76 = ($75>>>0)<($74>>>0);
     if ($76) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $77 = Math_imul($75, $74)|0;
     $78 = ($storemerge|0)==($77|0);
     if ($78) {
      break L30;
     }
     $79 = (($i$015) + 30)|0;
     $80 = (($storemerge>>>0) / ($79>>>0))&-1;
     $81 = ($80>>>0)<($79>>>0);
     if ($81) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $82 = Math_imul($80, $79)|0;
     $83 = ($storemerge|0)==($82|0);
     if ($83) {
      break L30;
     }
     $84 = (($i$015) + 36)|0;
     $85 = (($storemerge>>>0) / ($84>>>0))&-1;
     $86 = ($85>>>0)<($84>>>0);
     if ($86) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $87 = Math_imul($85, $84)|0;
     $88 = ($storemerge|0)==($87|0);
     if ($88) {
      break L30;
     }
     $89 = (($i$015) + 40)|0;
     $90 = (($storemerge>>>0) / ($89>>>0))&-1;
     $91 = ($90>>>0)<($89>>>0);
     if ($91) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $92 = Math_imul($90, $89)|0;
     $93 = ($storemerge|0)==($92|0);
     if ($93) {
      break L30;
     }
     $94 = (($i$015) + 42)|0;
     $95 = (($storemerge>>>0) / ($94>>>0))&-1;
     $96 = ($95>>>0)<($94>>>0);
     if ($96) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $97 = Math_imul($95, $94)|0;
     $98 = ($storemerge|0)==($97|0);
     if ($98) {
      break L30;
     }
     $99 = (($i$015) + 46)|0;
     $100 = (($storemerge>>>0) / ($99>>>0))&-1;
     $101 = ($100>>>0)<($99>>>0);
     if ($101) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $102 = Math_imul($100, $99)|0;
     $103 = ($storemerge|0)==($102|0);
     if ($103) {
      break L30;
     }
     $104 = (($i$015) + 52)|0;
     $105 = (($storemerge>>>0) / ($104>>>0))&-1;
     $106 = ($105>>>0)<($104>>>0);
     if ($106) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $107 = Math_imul($105, $104)|0;
     $108 = ($storemerge|0)==($107|0);
     if ($108) {
      break L30;
     }
     $109 = (($i$015) + 58)|0;
     $110 = (($storemerge>>>0) / ($109>>>0))&-1;
     $111 = ($110>>>0)<($109>>>0);
     if ($111) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $112 = Math_imul($110, $109)|0;
     $113 = ($storemerge|0)==($112|0);
     if ($113) {
      break L30;
     }
     $114 = (($i$015) + 60)|0;
     $115 = (($storemerge>>>0) / ($114>>>0))&-1;
     $116 = ($115>>>0)<($114>>>0);
     if ($116) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $117 = Math_imul($115, $114)|0;
     $118 = ($storemerge|0)==($117|0);
     if ($118) {
      break L30;
     }
     $119 = (($i$015) + 66)|0;
     $120 = (($storemerge>>>0) / ($119>>>0))&-1;
     $121 = ($120>>>0)<($119>>>0);
     if ($121) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $122 = Math_imul($120, $119)|0;
     $123 = ($storemerge|0)==($122|0);
     if ($123) {
      break L30;
     }
     $124 = (($i$015) + 70)|0;
     $125 = (($storemerge>>>0) / ($124>>>0))&-1;
     $126 = ($125>>>0)<($124>>>0);
     if ($126) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $127 = Math_imul($125, $124)|0;
     $128 = ($storemerge|0)==($127|0);
     if ($128) {
      break L30;
     }
     $129 = (($i$015) + 72)|0;
     $130 = (($storemerge>>>0) / ($129>>>0))&-1;
     $131 = ($130>>>0)<($129>>>0);
     if ($131) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $132 = Math_imul($130, $129)|0;
     $133 = ($storemerge|0)==($132|0);
     if ($133) {
      break L30;
     }
     $134 = (($i$015) + 78)|0;
     $135 = (($storemerge>>>0) / ($134>>>0))&-1;
     $136 = ($135>>>0)<($134>>>0);
     if ($136) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $137 = Math_imul($135, $134)|0;
     $138 = ($storemerge|0)==($137|0);
     if ($138) {
      break L30;
     }
     $139 = (($i$015) + 82)|0;
     $140 = (($storemerge>>>0) / ($139>>>0))&-1;
     $141 = ($140>>>0)<($139>>>0);
     if ($141) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $142 = Math_imul($140, $139)|0;
     $143 = ($storemerge|0)==($142|0);
     if ($143) {
      break L30;
     }
     $144 = (($i$015) + 88)|0;
     $145 = (($storemerge>>>0) / ($144>>>0))&-1;
     $146 = ($145>>>0)<($144>>>0);
     if ($146) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $147 = Math_imul($145, $144)|0;
     $148 = ($storemerge|0)==($147|0);
     if ($148) {
      break L30;
     }
     $149 = (($i$015) + 96)|0;
     $150 = (($storemerge>>>0) / ($149>>>0))&-1;
     $151 = ($150>>>0)<($149>>>0);
     if ($151) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $152 = Math_imul($150, $149)|0;
     $153 = ($storemerge|0)==($152|0);
     if ($153) {
      break L30;
     }
     $154 = (($i$015) + 100)|0;
     $155 = (($storemerge>>>0) / ($154>>>0))&-1;
     $156 = ($155>>>0)<($154>>>0);
     if ($156) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $157 = Math_imul($155, $154)|0;
     $158 = ($storemerge|0)==($157|0);
     if ($158) {
      break L30;
     }
     $159 = (($i$015) + 102)|0;
     $160 = (($storemerge>>>0) / ($159>>>0))&-1;
     $161 = ($160>>>0)<($159>>>0);
     if ($161) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $162 = Math_imul($160, $159)|0;
     $163 = ($storemerge|0)==($162|0);
     if ($163) {
      break L30;
     }
     $164 = (($i$015) + 106)|0;
     $165 = (($storemerge>>>0) / ($164>>>0))&-1;
     $166 = ($165>>>0)<($164>>>0);
     if ($166) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $167 = Math_imul($165, $164)|0;
     $168 = ($storemerge|0)==($167|0);
     if ($168) {
      break L30;
     }
     $169 = (($i$015) + 108)|0;
     $170 = (($storemerge>>>0) / ($169>>>0))&-1;
     $171 = ($170>>>0)<($169>>>0);
     if ($171) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $172 = Math_imul($170, $169)|0;
     $173 = ($storemerge|0)==($172|0);
     if ($173) {
      break L30;
     }
     $174 = (($i$015) + 112)|0;
     $175 = (($storemerge>>>0) / ($174>>>0))&-1;
     $176 = ($175>>>0)<($174>>>0);
     if ($176) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $177 = Math_imul($175, $174)|0;
     $178 = ($storemerge|0)==($177|0);
     if ($178) {
      break L30;
     }
     $179 = (($i$015) + 120)|0;
     $180 = (($storemerge>>>0) / ($179>>>0))&-1;
     $181 = ($180>>>0)<($179>>>0);
     if ($181) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $182 = Math_imul($180, $179)|0;
     $183 = ($storemerge|0)==($182|0);
     if ($183) {
      break L30;
     }
     $184 = (($i$015) + 126)|0;
     $185 = (($storemerge>>>0) / ($184>>>0))&-1;
     $186 = ($185>>>0)<($184>>>0);
     if ($186) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $187 = Math_imul($185, $184)|0;
     $188 = ($storemerge|0)==($187|0);
     if ($188) {
      break L30;
     }
     $189 = (($i$015) + 130)|0;
     $190 = (($storemerge>>>0) / ($189>>>0))&-1;
     $191 = ($190>>>0)<($189>>>0);
     if ($191) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $192 = Math_imul($190, $189)|0;
     $193 = ($storemerge|0)==($192|0);
     if ($193) {
      break L30;
     }
     $194 = (($i$015) + 136)|0;
     $195 = (($storemerge>>>0) / ($194>>>0))&-1;
     $196 = ($195>>>0)<($194>>>0);
     if ($196) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $197 = Math_imul($195, $194)|0;
     $198 = ($storemerge|0)==($197|0);
     if ($198) {
      break L30;
     }
     $199 = (($i$015) + 138)|0;
     $200 = (($storemerge>>>0) / ($199>>>0))&-1;
     $201 = ($200>>>0)<($199>>>0);
     if ($201) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $202 = Math_imul($200, $199)|0;
     $203 = ($storemerge|0)==($202|0);
     if ($203) {
      break L30;
     }
     $204 = (($i$015) + 142)|0;
     $205 = (($storemerge>>>0) / ($204>>>0))&-1;
     $206 = ($205>>>0)<($204>>>0);
     if ($206) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $207 = Math_imul($205, $204)|0;
     $208 = ($storemerge|0)==($207|0);
     if ($208) {
      break L30;
     }
     $209 = (($i$015) + 148)|0;
     $210 = (($storemerge>>>0) / ($209>>>0))&-1;
     $211 = ($210>>>0)<($209>>>0);
     if ($211) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $212 = Math_imul($210, $209)|0;
     $213 = ($storemerge|0)==($212|0);
     if ($213) {
      break L30;
     }
     $214 = (($i$015) + 150)|0;
     $215 = (($storemerge>>>0) / ($214>>>0))&-1;
     $216 = ($215>>>0)<($214>>>0);
     if ($216) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $217 = Math_imul($215, $214)|0;
     $218 = ($storemerge|0)==($217|0);
     if ($218) {
      break L30;
     }
     $219 = (($i$015) + 156)|0;
     $220 = (($storemerge>>>0) / ($219>>>0))&-1;
     $221 = ($220>>>0)<($219>>>0);
     if ($221) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $222 = Math_imul($220, $219)|0;
     $223 = ($storemerge|0)==($222|0);
     if ($223) {
      break L30;
     }
     $224 = (($i$015) + 162)|0;
     $225 = (($storemerge>>>0) / ($224>>>0))&-1;
     $226 = ($225>>>0)<($224>>>0);
     if ($226) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $227 = Math_imul($225, $224)|0;
     $228 = ($storemerge|0)==($227|0);
     if ($228) {
      break L30;
     }
     $229 = (($i$015) + 166)|0;
     $230 = (($storemerge>>>0) / ($229>>>0))&-1;
     $231 = ($230>>>0)<($229>>>0);
     if ($231) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $232 = Math_imul($230, $229)|0;
     $233 = ($storemerge|0)==($232|0);
     if ($233) {
      break L30;
     }
     $234 = (($i$015) + 168)|0;
     $235 = (($storemerge>>>0) / ($234>>>0))&-1;
     $236 = ($235>>>0)<($234>>>0);
     if ($236) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $237 = Math_imul($235, $234)|0;
     $238 = ($storemerge|0)==($237|0);
     if ($238) {
      break L30;
     }
     $239 = (($i$015) + 172)|0;
     $240 = (($storemerge>>>0) / ($239>>>0))&-1;
     $241 = ($240>>>0)<($239>>>0);
     if ($241) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $242 = Math_imul($240, $239)|0;
     $243 = ($storemerge|0)==($242|0);
     if ($243) {
      break L30;
     }
     $244 = (($i$015) + 178)|0;
     $245 = (($storemerge>>>0) / ($244>>>0))&-1;
     $246 = ($245>>>0)<($244>>>0);
     if ($246) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $247 = Math_imul($245, $244)|0;
     $248 = ($storemerge|0)==($247|0);
     if ($248) {
      break L30;
     }
     $249 = (($i$015) + 180)|0;
     $250 = (($storemerge>>>0) / ($249>>>0))&-1;
     $251 = ($250>>>0)<($249>>>0);
     if ($251) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $252 = Math_imul($250, $249)|0;
     $253 = ($storemerge|0)==($252|0);
     if ($253) {
      break L30;
     }
     $254 = (($i$015) + 186)|0;
     $255 = (($storemerge>>>0) / ($254>>>0))&-1;
     $256 = ($255>>>0)<($254>>>0);
     if ($256) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $257 = Math_imul($255, $254)|0;
     $258 = ($storemerge|0)==($257|0);
     if ($258) {
      break L30;
     }
     $259 = (($i$015) + 190)|0;
     $260 = (($storemerge>>>0) / ($259>>>0))&-1;
     $261 = ($260>>>0)<($259>>>0);
     if ($261) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $262 = Math_imul($260, $259)|0;
     $263 = ($storemerge|0)==($262|0);
     if ($263) {
      break L30;
     }
     $264 = (($i$015) + 192)|0;
     $265 = (($storemerge>>>0) / ($264>>>0))&-1;
     $266 = ($265>>>0)<($264>>>0);
     if ($266) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $267 = Math_imul($265, $264)|0;
     $268 = ($storemerge|0)==($267|0);
     if ($268) {
      break L30;
     }
     $269 = (($i$015) + 196)|0;
     $270 = (($storemerge>>>0) / ($269>>>0))&-1;
     $271 = ($270>>>0)<($269>>>0);
     if ($271) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $272 = Math_imul($270, $269)|0;
     $273 = ($storemerge|0)==($272|0);
     if ($273) {
      break L30;
     }
     $274 = (($i$015) + 198)|0;
     $275 = (($storemerge>>>0) / ($274>>>0))&-1;
     $276 = ($275>>>0)<($274>>>0);
     if ($276) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $277 = Math_imul($275, $274)|0;
     $278 = ($storemerge|0)==($277|0);
     if ($278) {
      break L30;
     }
     $279 = (($i$015) + 208)|0;
     $280 = (($storemerge>>>0) / ($279>>>0))&-1;
     $281 = ($280>>>0)<($279>>>0);
     if ($281) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     }
     $282 = Math_imul($280, $279)|0;
     $283 = ($storemerge|0)==($282|0);
     $284 = (($i$015) + 210)|0;
     if ($283) {
      break L30;
     }
     $44 = (($storemerge>>>0) / ($284>>>0))&-1;
     $45 = ($44>>>0)<($284>>>0);
     if ($45) {
      $$0 = $storemerge;
      label = 120;
      break L24;
     } else {
      $46 = $44;$i$015 = $284;
     }
    }
   }
  } while(0);
  $285 = (($in$0) + 1)|0;
  $286 = ($285|0)==(48);
  $$ = $286 ? 0 : $285;
  $287 = $286&1;
  $$k0$0 = (($287) + ($k0$0))|0;
  $288 = ($$k0$0*210)|0;
  $289 = ((6000) + ($$<<2)|0);
  $290 = HEAP32[$289>>2]|0;
  $291 = (($290) + ($288))|0;
  $in$0 = $$;$k0$0 = $$k0$0;$storemerge = $291;
 }
 if ((label|0) == 120) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func) {
 $flag = $flag|0;
 $arg = $arg|0;
 $func = $func|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock(((6216)|0))|0);
 $1 = HEAP32[$flag>>2]|0;
 $2 = ($1|0)==(1);
 if ($2) {
  while(1) {
   (_pthread_cond_wait(((6240)|0),((6216)|0))|0);
   $3 = HEAP32[$flag>>2]|0;
   $4 = ($3|0)==(1);
   if (!($4)) {
    break;
   }
  }
 }
 $5 = HEAP32[$flag>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  (_pthread_mutex_unlock(((6216)|0))|0);
  STACKTOP = sp;return;
 }
 HEAP32[$flag>>2] = 1;
 __THREW__ = 0;
 (invoke_ii(89,((6216)|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 do {
  if (!($8)) {
   __THREW__ = 0;
   invoke_vi($func|0,($arg|0));
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    break;
   }
   __THREW__ = 0;
   (invoke_ii(90,((6216)|0))|0);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    break;
   }
   HEAP32[$flag>>2] = -1;
   __THREW__ = 0;
   (invoke_ii(89,((6216)|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    break;
   }
   __THREW__ = 0;
   (invoke_ii(91,((6240)|0))|0);
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if ($16) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $17 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 u$0 = tempRet0;
 (___cxa_begin_catch(($17|0))|0);
 __THREW__ = 0;
 (invoke_ii(90,((6216)|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 do {
  if (!($19)) {
   HEAP32[$flag>>2] = 0;
   __THREW__ = 0;
   (invoke_ii(89,((6216)|0))|0);
   $20 = __THREW__; __THREW__ = 0;
   $21 = $20&1;
   if ($21) {
    break;
   }
   __THREW__ = 0;
   (invoke_ii(91,((6240)|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    break;
   }
   __THREW__ = 0;
   invoke_v(6);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if ($25) {
    break;
   }
   // unreachable;
  }
 } while(0);
 $26 = ___cxa_find_matching_catch(-1,-1)|0;
 $27 = tempRet0;
 __THREW__ = 0;
 invoke_v(5);
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $30 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$1 = tempRet0;
  ___clang_call_terminate($30);
  // unreachable;
 } else {
  ___resumeException($26|0);
  // unreachable;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___cxa_allocate_exception(8)|0);
 $2 = $1;
 __THREW__ = 0;
 invoke_vii(76,($2|0),((6288)|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $6 = ___cxa_find_matching_catch(-1,-1)|0;
  $7 = tempRet0;
  ___cxa_free_exception(($1|0));
  ___resumeException($6|0);
  // unreachable;
 } else {
  $5 = $1;
  HEAP32[$5>>2] = ((((5488) + 8|0)));
  ___cxa_throw(($1|0),((5536)|0),((56)|0));
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $__str;
 $2 = HEAP8[$1]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $5 = $this;
  ;HEAP32[$5+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$5+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$1+8>>2]|0;
  STACKTOP = sp;return;
 }
 $6 = (($__str) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($__str) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)>(4294967279);
 if ($10) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $11 = ($9>>>0)<(11);
 if ($11) {
  $12 = $9 << 1;
  $13 = $12&255;
  $14 = $this;
  HEAP8[$14] = $13;
  $15 = $this;
  $16 = (($15) + 1|0);
  $__p$0$i$i = $16;
 } else {
  $17 = (($9) + 16)|0;
  $18 = $17 & -16;
  $19 = (__Znwj($18)|0);
  $20 = (($this) + 8|0);
  HEAP32[$20>>2] = $19;
  $21 = $18 | 1;
  $22 = ($this);
  HEAP32[$22>>2] = $21;
  $23 = (($this) + 4|0);
  HEAP32[$23>>2] = $9;
  $__p$0$i$i = $19;
 }
 _memcpy(($__p$0$i$i|0),($7|0),($9|0))|0;
 $24 = (($__p$0$i$i) + ($9)|0);
 HEAP8[$24] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__sz>>>0)>(4294967279);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = ($__sz>>>0)<(11);
 if ($2) {
  $3 = $__sz << 1;
  $4 = $3&255;
  $5 = $this;
  HEAP8[$5] = $4;
  $6 = $this;
  $7 = (($6) + 1|0);
  $__p$0 = $7;
 } else {
  $8 = (($__sz) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = (($this) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  $13 = ($this);
  HEAP32[$13>>2] = $12;
  $14 = (($this) + 4|0);
  HEAP32[$14>>2] = $__sz;
  $__p$0 = $10;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $15 = (($__p$0) + ($__sz)|0);
 HEAP8[$15] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__n>>>0)>(4294967279);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = ($__n>>>0)<(11);
 if ($2) {
  $3 = $__n << 1;
  $4 = $3&255;
  $5 = $this;
  HEAP8[$5] = $4;
  $6 = $this;
  $7 = (($6) + 1|0);
  $__p$0 = $7;
 } else {
  $8 = (($__n) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = (($this) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  $13 = ($this);
  HEAP32[$13>>2] = $12;
  $14 = (($this) + 4|0);
  HEAP32[$14>>2] = $__n;
  $__p$0 = $10;
 }
 _memset(($__p$0|0),($__c|0),($__n|0))|0;
 $15 = (($__p$0) + ($__n)|0);
 HEAP8[$15] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = HEAP8[$1]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = (($this) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 __ZdlPv($6);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this|0)==($__str|0);
 if ($1) {
  STACKTOP = sp;return ($this|0);
 }
 $2 = $__str;
 $3 = HEAP8[$2]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $10 = $__str;
  $11 = (($10) + 1|0);
  $12 = $3&255;
  $13 = $12 >>> 1;
  $14 = $11;$15 = $13;
 } else {
  $6 = (($__str) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($__str) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $14 = $7;$15 = $9;
 }
 $16 = $this;
 $17 = HEAP8[$16]|0;
 $18 = $17 & 1;
 $19 = ($18<<24>>24)==(0);
 if ($19) {
  $24 = $17;$25 = 10;
 } else {
  $20 = ($this);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21 & -2;
  $phitmp$i$i$i = (($22) + -1)|0;
  $23 = $21&255;
  $24 = $23;$25 = $phitmp$i$i$i;
 }
 $26 = ($25>>>0)<($15>>>0);
 $27 = $24 & 1;
 $28 = ($27<<24>>24)==(0);
 if ($26) {
  if ($28) {
   $43 = $24&255;
   $44 = $43 >>> 1;
   $45 = $44;
  } else {
   $41 = (($this) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $45 = $42;
  }
  $46 = (($15) - ($25))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$25,$46,$45,0,$45,$15,$14);
  STACKTOP = sp;return ($this|0);
 }
 if ($28) {
  $31 = $this;
  $32 = (($31) + 1|0);
  $33 = $32;
 } else {
  $29 = (($this) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $33 = $30;
 }
 _memmove(($33|0),($14|0),($15|0))|0;
 $34 = (($33) + ($15)|0);
 HEAP8[$34] = 0;
 $35 = HEAP8[$16]|0;
 $36 = $35 & 1;
 $37 = ($36<<24>>24)==(0);
 if ($37) {
  $39 = $15 << 1;
  $40 = $39&255;
  HEAP8[$16] = $40;
  STACKTOP = sp;return ($this|0);
 } else {
  $38 = (($this) + 4|0);
  HEAP32[$38>>2] = $15;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen(($__s|0))|0);
 $2 = $this;
 $3 = HEAP8[$2]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $10 = $3;$11 = 10;
 } else {
  $6 = ($this);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & -2;
  $phitmp$i$i = (($8) + -1)|0;
  $9 = $7&255;
  $10 = $9;$11 = $phitmp$i$i;
 }
 $12 = ($11>>>0)<($1>>>0);
 $13 = $10 & 1;
 $14 = ($13<<24>>24)==(0);
 if ($12) {
  if ($14) {
   $29 = $10&255;
   $30 = $29 >>> 1;
   $31 = $30;
  } else {
   $27 = (($this) + 4|0);
   $28 = HEAP32[$27>>2]|0;
   $31 = $28;
  }
  $32 = (($1) - ($11))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$11,$32,$31,0,$31,$1,$__s);
  STACKTOP = sp;return ($this|0);
 }
 if ($14) {
  $17 = $this;
  $18 = (($17) + 1|0);
  $19 = $18;
 } else {
  $15 = (($this) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $19 = $16;
 }
 _memmove(($19|0),($__s|0),($1|0))|0;
 $20 = (($19) + ($1)|0);
 HEAP8[$20] = 0;
 $21 = HEAP8[$2]|0;
 $22 = $21 & 1;
 $23 = ($22<<24>>24)==(0);
 if ($23) {
  $25 = $1 << 1;
  $26 = $25&255;
  HEAP8[$2] = $26;
  STACKTOP = sp;return ($this|0);
 } else {
  $24 = (($this) + 4|0);
  HEAP32[$24>>2] = $1;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = HEAP8[$1]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = $2&255;
  $8 = $7 >>> 1;
  $9 = $8;
 } else {
  $5 = (($this) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $9 = $6;
 }
 $10 = ($9>>>0)<($__n>>>0);
 if ($10) {
  $11 = (($__n) - ($9))|0;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$11,$__c)|0);
  STACKTOP = sp;return;
 }
 if ($4) {
  $16 = $this;
  $17 = ((($16) + ($__n)|0) + 1|0);
  HEAP8[$17] = 0;
  $18 = $__n << 1;
  $19 = $18&255;
  HEAP8[$1] = $19;
  STACKTOP = sp;return;
 } else {
  $12 = (($this) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($__n)|0);
  HEAP8[$14] = 0;
  $15 = (($this) + 4|0);
  HEAP32[$15>>2] = $__n;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__n|0)==(0);
 if ($1) {
  STACKTOP = sp;return ($this|0);
 }
 $2 = $this;
 $3 = HEAP8[$2]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $10 = $3;$11 = 10;
 } else {
  $6 = ($this);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & -2;
  $phitmp$i = (($8) + -1)|0;
  $9 = $7&255;
  $10 = $9;$11 = $phitmp$i;
 }
 $12 = $10 & 1;
 $13 = ($12<<24>>24)==(0);
 if ($13) {
  $16 = $10&255;
  $17 = $16 >>> 1;
  $18 = $17;
 } else {
  $14 = (($this) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $18 = $15;
 }
 $19 = (($11) - ($18))|0;
 $20 = ($19>>>0)<($__n>>>0);
 if ($20) {
  $21 = (($__n) - ($11))|0;
  $22 = (($21) + ($18))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$11,$22,$18,$18,0,0);
  $$pre = HEAP8[$2]|0;
  $23 = $$pre;
 } else {
  $23 = $10;
 }
 $24 = $23 & 1;
 $25 = ($24<<24>>24)==(0);
 if ($25) {
  $28 = $this;
  $29 = (($28) + 1|0);
  $30 = $29;
 } else {
  $26 = (($this) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $30 = $27;
 }
 $31 = (($30) + ($18)|0);
 _memset(($31|0),($__c|0),($__n|0))|0;
 $32 = (($18) + ($__n))|0;
 $33 = HEAP8[$2]|0;
 $34 = $33 & 1;
 $35 = ($34<<24>>24)==(0);
 if ($35) {
  $37 = $32 << 1;
  $38 = $37&255;
  HEAP8[$2] = $38;
 } else {
  $36 = (($this) + 4|0);
  HEAP32[$36>>2] = $32;
 }
 $39 = (($30) + ($32)|0);
 HEAP8[$39] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$1 = 0;
 var $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 $1 = ($__res_arg>>>0)>(4294967279);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = $this;
 $3 = HEAP8[$2]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $10 = $3;$11 = 10;
 } else {
  $6 = ($this);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & -2;
  $phitmp$i = (($8) + -1)|0;
  $9 = $7&255;
  $10 = $9;$11 = $phitmp$i;
 }
 $12 = $10 & 1;
 $13 = ($12<<24>>24)==(0);
 if ($13) {
  $16 = $10&255;
  $17 = $16 >>> 1;
  $18 = $17;
 } else {
  $14 = (($this) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $18 = $15;
 }
 $19 = ($18>>>0)>($__res_arg>>>0);
 $20 = $19 ? $18 : $__res_arg;
 $21 = ($20>>>0)<(11);
 if ($21) {
  $24 = 10;
 } else {
  $22 = (($20) + 16)|0;
  $23 = $22 & -16;
  $phitmp$i2 = (($23) + -1)|0;
  $24 = $phitmp$i2;
 }
 $25 = ($24|0)==($11|0);
 if ($25) {
  STACKTOP = sp;return;
 }
 $26 = ($24|0)==(10);
 do {
  if ($26) {
   $27 = $this;
   $28 = (($27) + 1|0);
   $29 = (($this) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $__new_data$1 = $28;$__now_long$0$off0 = 0;$__p$0 = $30;$__was_long$0$off0 = 1;
  } else {
   $31 = ($24>>>0)>($11>>>0);
   $32 = (($24) + 1)|0;
   do {
    if ($31) {
     $33 = (__Znwj($32)|0);
     $__new_data$0 = $33;
    } else {
     __THREW__ = 0;
     $34 = (invoke_ii(92,($32|0))|0);
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if (!($36)) {
      $__new_data$0 = $34;
      break;
     }
     $37 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$0 = tempRet0;
     (___cxa_begin_catch(($37|0))|0);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    }
   } while(0);
   $38 = $10 & 1;
   $39 = ($38<<24>>24)==(0);
   if ($39) {
    $42 = $this;
    $43 = (($42) + 1|0);
    $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $43;$__was_long$0$off0 = 0;
    break;
   } else {
    $40 = (($this) + 8|0);
    $41 = HEAP32[$40>>2]|0;
    $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $41;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 $44 = $10 & 1;
 $45 = ($44<<24>>24)==(0);
 if ($45) {
  $48 = $10&255;
  $49 = $48 >>> 1;
  $50 = $49;
 } else {
  $46 = (($this) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $50 = $47;
 }
 $51 = (($50) + 1)|0;
 _memcpy(($__new_data$1|0),($__p$0|0),($51|0))|0;
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0);
 }
 if ($__now_long$0$off0) {
  $52 = (($24) + 1)|0;
  $53 = $52 | 1;
  $54 = ($this);
  HEAP32[$54>>2] = $53;
  $55 = (($this) + 4|0);
  HEAP32[$55>>2] = $18;
  $56 = (($this) + 8|0);
  HEAP32[$56>>2] = $__new_data$1;
  STACKTOP = sp;return;
 } else {
  $57 = $18 << 1;
  $58 = $57&255;
  HEAP8[$2] = $58;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = HEAP8[$1]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)!=(0);
 if ($4) {
  $7 = ($this);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & -2;
  $10 = (($9) + -1)|0;
  $11 = (($this) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $__cap$0 = $10;$__sz$0 = $12;
 } else {
  $5 = $2&255;
  $6 = $5 >>> 1;
  $__cap$0 = 10;$__sz$0 = $6;
 }
 $13 = ($__sz$0|0)==($__cap$0|0);
 if ($13) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $14 = HEAP8[$1]|0;
  $15 = $14 & 1;
  $16 = ($15<<24>>24)==(0);
  if ($16) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($4) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $17 = $this;
  $18 = (($17) + 1|0);
  $19 = $__sz$0 << 1;
  $20 = (($19) + 2)|0;
  $21 = $20&255;
  HEAP8[$1] = $21;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $18;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0] = $__c;
  $26 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$26] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $22 = (($this) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($__sz$0) + 1)|0;
  $25 = (($this) + 4|0);
  HEAP32[$25>>2] = $24;
  $$pn = $23;$__p$0$sum$pre$phiZZZ2D = $24;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0] = $__c;
  $26 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$26] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = HEAP8[$1]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $10 = 10;$9 = $2;
 } else {
  $5 = ($this);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $6&255;
  $10 = $phitmp$i;$9 = $8;
 }
 $11 = $9 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $9&255;
  $16 = $15 >>> 1;
  $17 = $16;
 } else {
  $13 = (($this) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $17 = $14;
 }
 $18 = (($10) - ($17))|0;
 $19 = ($18>>>0)<($__n>>>0);
 if ($19) {
  $37 = (($__n) - ($10))|0;
  $38 = (($37) + ($17))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$10,$38,$17,$17,0,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 $20 = ($__n|0)==(0);
 if ($20) {
  STACKTOP = sp;return ($this|0);
 }
 $21 = $9 & 1;
 $22 = ($21<<24>>24)==(0);
 if ($22) {
  $25 = $this;
  $26 = (($25) + 1|0);
  $27 = $26;
 } else {
  $23 = (($this) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 }
 $28 = (($27) + ($17)|0);
 _memcpy(($28|0),($__s|0),($__n|0))|0;
 $29 = (($17) + ($__n))|0;
 $30 = HEAP8[$1]|0;
 $31 = $30 & 1;
 $32 = ($31<<24>>24)==(0);
 if ($32) {
  $34 = $29 << 1;
  $35 = $34&255;
  HEAP8[$1] = $35;
 } else {
  $33 = (($this) + 4|0);
  HEAP32[$33>>2] = $29;
 }
 $36 = (($27) + ($29)|0);
 HEAP8[$36] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (-18 - ($__old_cap))|0;
 $2 = ($1>>>0)<($__delta_cap>>>0);
 if ($2) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $3 = $this;
 $4 = HEAP8[$3]|0;
 $5 = $4 & 1;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $9 = $this;
  $10 = (($9) + 1|0);
  $11 = $10;
 } else {
  $7 = (($this) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $11 = $8;
 }
 $12 = ($__old_cap>>>0)<(2147483623);
 do {
  if ($12) {
   $13 = (($__delta_cap) + ($__old_cap))|0;
   $14 = $__old_cap << 1;
   $15 = ($13>>>0)<($14>>>0);
   $16 = $15 ? $14 : $13;
   $17 = ($16>>>0)<(11);
   if ($17) {
    $20 = 11;
    break;
   }
   $18 = (($16) + 16)|0;
   $19 = $18 & -16;
   $20 = $19;
  } else {
   $20 = -17;
  }
 } while(0);
 $21 = (__Znwj($20)|0);
 $22 = ($__n_copy|0)==(0);
 if (!($22)) {
  _memcpy(($21|0),($11|0),($__n_copy|0))|0;
 }
 $23 = ($__n_add|0)==(0);
 if (!($23)) {
  $24 = (($21) + ($__n_copy)|0);
  _memcpy(($24|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $25 = (($__old_sz) - ($__n_del))|0;
 $26 = ($25|0)==($__n_copy|0);
 if (!($26)) {
  $27 = (($25) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $28 = (($21) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $29 = (($11) + ($$sum1)|0);
  _memcpy(($28|0),($29|0),($27|0))|0;
 }
 $30 = ($__old_cap|0)==(10);
 if ($30) {
  $31 = (($this) + 8|0);
  HEAP32[$31>>2] = $21;
  $32 = $20 | 1;
  $33 = ($this);
  HEAP32[$33>>2] = $32;
  $34 = (($25) + ($__n_add))|0;
  $35 = (($this) + 4|0);
  HEAP32[$35>>2] = $34;
  $36 = (($21) + ($34)|0);
  HEAP8[$36] = 0;
  STACKTOP = sp;return;
 }
 __ZdlPv($11);
 $31 = (($this) + 8|0);
 HEAP32[$31>>2] = $21;
 $32 = $20 | 1;
 $33 = ($this);
 HEAP32[$33>>2] = $32;
 $34 = (($25) + ($__n_add))|0;
 $35 = (($this) + 4|0);
 HEAP32[$35>>2] = $34;
 $36 = (($21) + ($34)|0);
 HEAP8[$36] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (-17 - ($__old_cap))|0;
 $2 = ($1>>>0)<($__delta_cap>>>0);
 if ($2) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $3 = $this;
 $4 = HEAP8[$3]|0;
 $5 = $4 & 1;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $9 = $this;
  $10 = (($9) + 1|0);
  $11 = $10;
 } else {
  $7 = (($this) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $11 = $8;
 }
 $12 = ($__old_cap>>>0)<(2147483623);
 do {
  if ($12) {
   $13 = (($__delta_cap) + ($__old_cap))|0;
   $14 = $__old_cap << 1;
   $15 = ($13>>>0)<($14>>>0);
   $16 = $15 ? $14 : $13;
   $17 = ($16>>>0)<(11);
   if ($17) {
    $20 = 11;
    break;
   }
   $18 = (($16) + 16)|0;
   $19 = $18 & -16;
   $20 = $19;
  } else {
   $20 = -17;
  }
 } while(0);
 $21 = (__Znwj($20)|0);
 $22 = ($__n_copy|0)==(0);
 if (!($22)) {
  _memcpy(($21|0),($11|0),($__n_copy|0))|0;
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $26 = (($21) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $27 = (($11) + ($$sum1)|0);
  _memcpy(($26|0),($27|0),($25|0))|0;
 }
 $28 = ($__old_cap|0)==(10);
 if ($28) {
  $29 = (($this) + 8|0);
  HEAP32[$29>>2] = $21;
  $30 = $20 | 1;
  $31 = ($this);
  HEAP32[$31>>2] = $30;
  STACKTOP = sp;return;
 }
 __ZdlPv($11);
 $29 = (($this) + 8|0);
 HEAP32[$29>>2] = $21;
 $30 = $20 | 1;
 $31 = ($this);
 HEAP32[$31>>2] = $30;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__sz>>>0)>(1073741807);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = ($__sz>>>0)<(2);
 if ($2) {
  $3 = $__sz << 1;
  $4 = $3&255;
  $5 = $this;
  HEAP8[$5] = $4;
  $6 = (($this) + 4|0);
  $__p$0 = $6;
  (_wmemcpy($__p$0,$__s,$__sz)|0);
  $16 = (($__p$0) + ($__sz<<2)|0);
  HEAP32[$16>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $7 = (($__sz) + 4)|0;
  $8 = $7 & -4;
  $9 = $8 << 2;
  $10 = (__Znwj($9)|0);
  $11 = $10;
  $12 = (($this) + 8|0);
  HEAP32[$12>>2] = $11;
  $13 = $8 | 1;
  $14 = ($this);
  HEAP32[$14>>2] = $13;
  $15 = (($this) + 4|0);
  HEAP32[$15>>2] = $__sz;
  $__p$0 = $11;
  (_wmemcpy($__p$0,$__s,$__sz)|0);
  $16 = (($__p$0) + ($__sz<<2)|0);
  HEAP32[$16>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__n>>>0)>(1073741807);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = ($__n>>>0)<(2);
 if ($2) {
  $3 = $__n << 1;
  $4 = $3&255;
  $5 = $this;
  HEAP8[$5] = $4;
  $6 = (($this) + 4|0);
  $__p$0 = $6;
  (_wmemset($__p$0,$__c,$__n)|0);
  $16 = (($__p$0) + ($__n<<2)|0);
  HEAP32[$16>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $7 = (($__n) + 4)|0;
  $8 = $7 & -4;
  $9 = $8 << 2;
  $10 = (__Znwj($9)|0);
  $11 = $10;
  $12 = (($this) + 8|0);
  HEAP32[$12>>2] = $11;
  $13 = $8 | 1;
  $14 = ($this);
  HEAP32[$14>>2] = $13;
  $15 = (($this) + 4|0);
  HEAP32[$15>>2] = $__n;
  $__p$0 = $11;
  (_wmemset($__p$0,$__c,$__n)|0);
  $16 = (($__p$0) + ($__n<<2)|0);
  HEAP32[$16>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = HEAP8[$1]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = (($this) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6;
 __ZdlPv($7);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_wcslen($__s)|0);
 $2 = (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = HEAP8[$1]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $10 = 1;$9 = $2;
 } else {
  $5 = ($this);
  $6 = HEAP32[$5>>2]|0;
  $7 = $6 & -2;
  $phitmp$i = (($7) + -1)|0;
  $8 = $6&255;
  $10 = $phitmp$i;$9 = $8;
 }
 $11 = ($10>>>0)<($__n>>>0);
 $12 = $9 & 1;
 $13 = ($12<<24>>24)==(0);
 if ($11) {
  if ($13) {
   $27 = $9&255;
   $28 = $27 >>> 1;
   $29 = $28;
  } else {
   $25 = (($this) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $29 = $26;
  }
  $30 = (($__n) - ($10))|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$10,$30,$29,0,$29,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 if ($13) {
  $16 = (($this) + 4|0);
  $17 = $16;
 } else {
  $14 = (($this) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $17 = $15;
 }
 (_wmemmove($17,$__s,$__n)|0);
 $18 = (($17) + ($__n<<2)|0);
 HEAP32[$18>>2] = 0;
 $19 = HEAP8[$1]|0;
 $20 = $19 & 1;
 $21 = ($20<<24>>24)==(0);
 if ($21) {
  $23 = $__n << 1;
  $24 = $23&255;
  HEAP8[$1] = $24;
  STACKTOP = sp;return ($this|0);
 } else {
  $22 = (($this) + 4|0);
  HEAP32[$22>>2] = $__n;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 $1 = ($__res_arg>>>0)>(1073741807);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $2 = $this;
 $3 = HEAP8[$2]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $10 = $3;$11 = 1;
 } else {
  $6 = ($this);
  $7 = HEAP32[$6>>2]|0;
  $8 = $7 & -2;
  $phitmp$i = (($8) + -1)|0;
  $9 = $7&255;
  $10 = $9;$11 = $phitmp$i;
 }
 $12 = $10 & 1;
 $13 = ($12<<24>>24)==(0);
 if ($13) {
  $16 = $10&255;
  $17 = $16 >>> 1;
  $18 = $17;
 } else {
  $14 = (($this) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $18 = $15;
 }
 $19 = ($18>>>0)>($__res_arg>>>0);
 $20 = $19 ? $18 : $__res_arg;
 $21 = ($20>>>0)<(2);
 if ($21) {
  $24 = 1;
 } else {
  $22 = (($20) + 4)|0;
  $23 = $22 & -4;
  $phitmp$i2 = (($23) + -1)|0;
  $24 = $phitmp$i2;
 }
 $25 = ($24|0)==($11|0);
 if ($25) {
  STACKTOP = sp;return;
 }
 $26 = ($24|0)==(1);
 do {
  if ($26) {
   $27 = (($this) + 4|0);
   $28 = (($this) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $__new_data$1 = $27;$__now_long$0$off0 = 0;$__p$0 = $29;$__was_long$0$off0 = 1;
  } else {
   $30 = ($24>>>0)>($11>>>0);
   $31 = $24 << 2;
   $32 = (($31) + 4)|0;
   do {
    if ($30) {
     $33 = (__Znwj($32)|0);
     $$sink = $33;
    } else {
     __THREW__ = 0;
     $34 = (invoke_ii(92,($32|0))|0);
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if (!($36)) {
      $$sink = $34;
      break;
     }
     $37 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$0 = tempRet0;
     (___cxa_begin_catch(($37|0))|0);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    }
   } while(0);
   $38 = $$sink;
   $39 = $10 & 1;
   $40 = ($39<<24>>24)==(0);
   if ($40) {
    $43 = (($this) + 4|0);
    $__new_data$1 = $38;$__now_long$0$off0 = 1;$__p$0 = $43;$__was_long$0$off0 = 0;
    break;
   } else {
    $41 = (($this) + 8|0);
    $42 = HEAP32[$41>>2]|0;
    $__new_data$1 = $38;$__now_long$0$off0 = 1;$__p$0 = $42;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 $44 = $10 & 1;
 $45 = ($44<<24>>24)==(0);
 if ($45) {
  $48 = $10&255;
  $49 = $48 >>> 1;
  $50 = $49;
 } else {
  $46 = (($this) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $50 = $47;
 }
 $51 = (($50) + 1)|0;
 (_wmemcpy($__new_data$1,$__p$0,$51)|0);
 if ($__was_long$0$off0) {
  $52 = $__p$0;
  __ZdlPv($52);
 }
 if ($__now_long$0$off0) {
  $53 = (($24) + 1)|0;
  $54 = $53 | 1;
  $55 = ($this);
  HEAP32[$55>>2] = $54;
  $56 = (($this) + 4|0);
  HEAP32[$56>>2] = $18;
  $57 = (($this) + 8|0);
  HEAP32[$57>>2] = $__new_data$1;
  STACKTOP = sp;return;
 } else {
  $58 = $18 << 1;
  $59 = $58&255;
  HEAP8[$2] = $59;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = HEAP8[$1]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)!=(0);
 if ($4) {
  $7 = ($this);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 & -2;
  $10 = (($9) + -1)|0;
  $11 = (($this) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $__cap$0 = $10;$__sz$0 = $12;
 } else {
  $5 = $2&255;
  $6 = $5 >>> 1;
  $__cap$0 = 1;$__sz$0 = $6;
 }
 $13 = ($__sz$0|0)==($__cap$0|0);
 if ($13) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $14 = HEAP8[$1]|0;
  $15 = $14 & 1;
  $16 = ($15<<24>>24)==(0);
  if ($16) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($4) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $17 = (($this) + 4|0);
  $18 = $__sz$0 << 1;
  $19 = (($18) + 2)|0;
  $20 = $19&255;
  HEAP8[$1] = $20;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $17;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
  $__p$0 = (($$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $25 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$25>>2] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $21 = (($this) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($__sz$0) + 1)|0;
  $24 = (($this) + 4|0);
  HEAP32[$24>>2] = $23;
  $$pn = $22;$__p$0$sum$pre$phiZZZ2D = $23;
  $__p$0 = (($$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $25 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$25>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (1073741806 - ($__old_cap))|0;
 $2 = ($1>>>0)<($__delta_cap>>>0);
 if ($2) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $3 = $this;
 $4 = HEAP8[$3]|0;
 $5 = $4 & 1;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $9 = (($this) + 4|0);
  $10 = $9;
 } else {
  $7 = (($this) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $10 = $8;
 }
 $11 = ($__old_cap>>>0)<(536870887);
 do {
  if ($11) {
   $12 = (($__delta_cap) + ($__old_cap))|0;
   $13 = $__old_cap << 1;
   $14 = ($12>>>0)<($13>>>0);
   $15 = $14 ? $13 : $12;
   $16 = ($15>>>0)<(2);
   if ($16) {
    $19 = 2;
    break;
   }
   $17 = (($15) + 4)|0;
   $18 = $17 & -4;
   $19 = $18;
  } else {
   $19 = 1073741807;
  }
 } while(0);
 $20 = $19 << 2;
 $21 = (__Znwj($20)|0);
 $22 = $21;
 $23 = ($__n_copy|0)==(0);
 if (!($23)) {
  (_wmemcpy($22,$10,$__n_copy)|0);
 }
 $24 = ($__n_add|0)==(0);
 if (!($24)) {
  $25 = (($22) + ($__n_copy<<2)|0);
  (_wmemcpy($25,$__p_new_stuff,$__n_add)|0);
 }
 $26 = (($__old_sz) - ($__n_del))|0;
 $27 = ($26|0)==($__n_copy|0);
 if (!($27)) {
  $28 = (($26) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $29 = (($22) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $30 = (($10) + ($$sum1<<2)|0);
  (_wmemcpy($29,$30,$28)|0);
 }
 $31 = ($__old_cap|0)==(1);
 if ($31) {
  $33 = (($this) + 8|0);
  HEAP32[$33>>2] = $22;
  $34 = $19 | 1;
  $35 = ($this);
  HEAP32[$35>>2] = $34;
  $36 = (($26) + ($__n_add))|0;
  $37 = (($this) + 4|0);
  HEAP32[$37>>2] = $36;
  $38 = (($22) + ($36<<2)|0);
  HEAP32[$38>>2] = 0;
  STACKTOP = sp;return;
 }
 $32 = $10;
 __ZdlPv($32);
 $33 = (($this) + 8|0);
 HEAP32[$33>>2] = $22;
 $34 = $19 | 1;
 $35 = ($this);
 HEAP32[$35>>2] = $34;
 $36 = (($26) + ($__n_add))|0;
 $37 = (($this) + 4|0);
 HEAP32[$37>>2] = $36;
 $38 = (($22) + ($36<<2)|0);
 HEAP32[$38>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (1073741807 - ($__old_cap))|0;
 $2 = ($1>>>0)<($__delta_cap>>>0);
 if ($2) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $3 = $this;
 $4 = HEAP8[$3]|0;
 $5 = $4 & 1;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $9 = (($this) + 4|0);
  $10 = $9;
 } else {
  $7 = (($this) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $10 = $8;
 }
 $11 = ($__old_cap>>>0)<(536870887);
 do {
  if ($11) {
   $12 = (($__delta_cap) + ($__old_cap))|0;
   $13 = $__old_cap << 1;
   $14 = ($12>>>0)<($13>>>0);
   $15 = $14 ? $13 : $12;
   $16 = ($15>>>0)<(2);
   if ($16) {
    $19 = 2;
    break;
   }
   $17 = (($15) + 4)|0;
   $18 = $17 & -4;
   $19 = $18;
  } else {
   $19 = 1073741807;
  }
 } while(0);
 $20 = $19 << 2;
 $21 = (__Znwj($20)|0);
 $22 = $21;
 $23 = ($__n_copy|0)==(0);
 if (!($23)) {
  (_wmemcpy($22,$10,$__n_copy)|0);
 }
 $24 = (($__old_sz) - ($__n_del))|0;
 $25 = ($24|0)==($__n_copy|0);
 if (!($25)) {
  $26 = (($24) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $27 = (($22) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $28 = (($10) + ($$sum1<<2)|0);
  (_wmemcpy($27,$28,$26)|0);
 }
 $29 = ($__old_cap|0)==(1);
 if ($29) {
  $31 = (($this) + 8|0);
  HEAP32[$31>>2] = $22;
  $32 = $19 | 1;
  $33 = ($this);
  HEAP32[$33>>2] = $32;
  STACKTOP = sp;return;
 }
 $30 = $10;
 __ZdlPv($30);
 $31 = (($this) + 8|0);
 HEAP32[$31>>2] = $22;
 $32 = $19 | 1;
 $33 = ($this);
 HEAP32[$33>>2] = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base5clearEj($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$i = 0, $tmpcast$i$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $tmpcast$i$byval_copy = sp;
 $1 = sp + 8|0;
 $2 = (($this) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $6 = $state | 1;
  $7 = (($this) + 16|0);
  HEAP32[$7>>2] = $6;
 } else {
  $5 = (($this) + 16|0);
  HEAP32[$5>>2] = $state;
 }
 $8 = $4&1;
 $9 = $8 | $state;
 $10 = (($this) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $9 & $11;
 $13 = ($12|0)==(0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = (___cxa_allocate_exception(16)|0);
 $15 = HEAP8[(6672)]|0;
 $16 = ($15<<24>>24)==(0);
 do {
  if ($16) {
   $17 = (___cxa_guard_acquire(((6672)|0))|0);
   $18 = ($17|0)==(0);
   if ($18) {
    break;
   }
   HEAP32[((6664))>>2] = ((((7440) + 8|0)));
   (_atexit(((82)|0),((6664)|0),((___dso_handle)|0))|0);
   ___cxa_guard_release(((6672)|0));
  }
 } while(0);
 $19 = $1;
 $tmpcast$i = $1;
 $20 = $14;
 $21 = $1;
 $22 = $21;
 HEAP32[$22>>2] = 1;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = (6664);
 __THREW__ = 0;
 $25 = $tmpcast$i$byval_copy;
 $26 = $tmpcast$i$byval_copy;
 $27 = $tmpcast$i;
 ;HEAP32[$26+0>>2]=HEAP32[$27+0>>2]|0;HEAP32[$26+4>>2]=HEAP32[$27+4>>2]|0;
 invoke_viii(24,($20|0),($tmpcast$i$byval_copy|0),((6720)|0));
 $28 = $tmpcast$i$byval_copy;
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $32 = ___cxa_find_matching_catch(-1,-1)|0;
  $33 = tempRet0;
  ___cxa_free_exception(($14|0));
  ___resumeException($32|0);
  // unreachable;
 } else {
  $31 = $14;
  HEAP32[$31>>2] = ((((6680) + 8|0)));
  ___cxa_throw(($14|0),((6768)|0),((78)|0));
  // unreachable;
 }
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01$i = 0, $i$01$i$phi = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((6704) + 8|0)));
 $2 = (($this) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 $$pre = (($this) + 32|0);
 $$pre1 = (($this) + 36|0);
 L1: do {
  if (!($4)) {
   $i$01$i = $3;
   while(1) {
    $5 = (($i$01$i) + -1)|0;
    $6 = HEAP32[$$pre>>2]|0;
    $7 = (($6) + ($5<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = HEAP32[$$pre1>>2]|0;
    $10 = (($9) + ($5<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    __THREW__ = 0;
    invoke_viii($8|0,0,($this|0),($11|0));
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if ($13) {
     break;
    }
    $14 = ($5|0)==(0);
    if ($14) {
     break L1;
    } else {
     $i$01$i$phi = $5;$i$01$i = $i$01$i$phi;
    }
   }
   $27 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$0 = tempRet0;
   ___clang_call_terminate($27);
   // unreachable;
  }
 } while(0);
 $15 = (($this) + 28|0);
 $16 = $15;
 __ZNSt3__16localeD2Ev($16);
 $17 = HEAP32[$$pre>>2]|0;
 $18 = $17;
 _free($18);
 $19 = HEAP32[$$pre1>>2]|0;
 $20 = $19;
 _free($20);
 $21 = (($this) + 48|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22;
 _free($23);
 $24 = (($this) + 60|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25;
 _free($26);
 STACKTOP = sp;return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 __ZNSt3__18ios_baseD2Ev($1);
 $2 = $this;
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 __ZNSt3__18ios_baseD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 __ZNSt3__18ios_baseD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNKSt3__18ios_base6getlocEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 28|0);
 $2 = $1;
 __ZNSt3__16localeC2ERKS0_($agg$result,$2);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4initEPv($this,$sb) {
 $this = $this|0;
 $sb = $sb|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $1 = (($this) + 24|0);
 HEAP32[$1>>2] = $sb;
 $not$ = ($sb|0)==(0|0);
 $2 = $not$&1;
 $3 = (($this) + 16|0);
 HEAP32[$3>>2] = $2;
 $4 = (($this) + 20|0);
 HEAP32[$4>>2] = 0;
 $5 = (($this) + 4|0);
 HEAP32[$5>>2] = 4098;
 $6 = (($this) + 12|0);
 HEAP32[$6>>2] = 0;
 $7 = (($this) + 8|0);
 HEAP32[$7>>2] = 6;
 $8 = (($this) + 32|0);
 $9 = (($this) + 28|0);
 $10 = $9;
 $11 = $8;
 dest=$11+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));;
 __ZNSt3__16localeC2Ev($10);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((6320) + 8|0)));
 $2 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($2);
 $3 = $this;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((6320) + 8|0)));
 $2 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((6320) + 8|0)));
 $2 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((6320) + 8|0)));
 $2 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($2);
 $3 = (($this) + 8|0);
 $4 = $3;
 ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;HEAP32[$4+16>>2]=0|0;HEAP32[$4+20>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,u$0) {
 $this = $this|0;
 u$0 = u$0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,u$0,u$1) {
 $this = $this|0;
 u$0 = u$0|0;
 u$1 = u$1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,u$0,u$1,u$2,u$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 u$0 = u$0|0;
 u$1 = u$1|0;
 u$2 = u$2|0;
 u$3 = u$3|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $agg$result;
 $2 = $1;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,u$0,u$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 u$0 = u$0|0;
 u$1 = u$1|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $agg$result;
 $2 = $1;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0;
 var $__i$02 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = ($__n|0)>(0);
 if (!($2)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $3 = (($this) + 12|0);
 $4 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $5 = HEAP32[$3>>2]|0;
  $6 = HEAP32[$4>>2]|0;
  $7 = ($5>>>0)<($6>>>0);
  if ($7) {
   $8 = (($5) + 1|0);
   HEAP32[$3>>2] = $8;
   $9 = HEAP8[$5]|0;
   $storemerge = $9;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + 40|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (FUNCTION_TABLE_ii[$12 & 127]($this)|0);
   $14 = ($13|0)==(-1);
   if ($14) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   }
   $15 = $13&255;
   $storemerge = $15;
  }
  HEAP8[$$01] = $storemerge;
  $16 = (($__i$02) + 1)|0;
  $17 = (($$01) + 1|0);
  $18 = ($16|0)<($__n|0);
  if ($18) {
   $$01 = $17;$__i$02 = $16;
  } else {
   $__i$0$lcssa = $16;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 127]($this)|0);
 $6 = ($5|0)==(-1);
 if ($6) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($this) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1|0);
 HEAP32[$7>>2] = $9;
 $10 = HEAP8[$8]|0;
 $11 = $10&255;
 $$0 = $11;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,u$0) {
 $this = $this|0;
 u$0 = u$0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__i$0$lcssa = 0, $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = ($__n|0)>(0);
 if (!($2)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $3 = (($this) + 24|0);
 $4 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $5 = HEAP32[$3>>2]|0;
  $6 = HEAP32[$4>>2]|0;
  $7 = ($5>>>0)<($6>>>0);
  if ($7) {
   $8 = HEAP8[$$02]|0;
   $9 = (($5) + 1|0);
   HEAP32[$3>>2] = $9;
   HEAP8[$5] = $8;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + 52|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP8[$$02]|0;
   $14 = $13&255;
   $15 = (FUNCTION_TABLE_iii[$12 & 63]($this,$14)|0);
   $16 = ($15|0)==(-1);
   if ($16) {
    $__i$0$lcssa = $__i$01;
    label = 7;
    break;
   }
  }
  $17 = (($$02) + 1|0);
  $18 = (($__i$01) + 1)|0;
  $19 = ($18|0)<($__n|0);
  if ($19) {
   $$02 = $17;$__i$01 = $18;
  } else {
   $__i$0$lcssa = $18;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,u$0) {
 $this = $this|0;
 u$0 = u$0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((6384) + 8|0)));
 $2 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($2);
 $3 = $this;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((6384) + 8|0)));
 $2 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,u$0) {
 $this = $this|0;
 u$0 = u$0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,u$0,u$1) {
 $this = $this|0;
 u$0 = u$0|0;
 u$1 = u$1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,u$0,u$1,u$2,u$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 u$0 = u$0|0;
 u$1 = u$1|0;
 u$2 = u$2|0;
 u$3 = u$3|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $agg$result;
 $2 = $1;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,u$0,u$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 u$0 = u$0|0;
 u$1 = u$1|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $agg$result;
 $2 = $1;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = ($__n|0)>(0);
 if (!($2)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $3 = (($this) + 12|0);
 $4 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $5 = HEAP32[$3>>2]|0;
  $6 = HEAP32[$4>>2]|0;
  $7 = ($5>>>0)<($6>>>0);
  if ($7) {
   $8 = (($5) + 4|0);
   HEAP32[$3>>2] = $8;
   $9 = HEAP32[$5>>2]|0;
   $storemerge = $9;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + 40|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (FUNCTION_TABLE_ii[$12 & 127]($this)|0);
   $14 = ($13|0)==(-1);
   if ($14) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   } else {
    $storemerge = $13;
   }
  }
  HEAP32[$$01>>2] = $storemerge;
  $15 = (($__i$02) + 1)|0;
  $16 = ($15|0)<($__n|0);
  if (!($16)) {
   $__i$0$lcssa = $15;
   label = 8;
   break;
  }
  $17 = (($$01) + 4|0);
  $$01 = $17;$__i$02 = $15;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 36|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 127]($this)|0);
 $6 = ($5|0)==(-1);
 if ($6) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = (($this) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 4|0);
 HEAP32[$7>>2] = $9;
 $10 = HEAP32[$8>>2]|0;
 $$0 = $10;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,u$0) {
 $this = $this|0;
 u$0 = u$0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0;
 var $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = ($__n|0)>(0);
 if (!($2)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $3 = (($this) + 24|0);
 $4 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $5 = HEAP32[$3>>2]|0;
  $6 = HEAP32[$4>>2]|0;
  $7 = ($5>>>0)<($6>>>0);
  if ($7) {
   $8 = HEAP32[$$02>>2]|0;
   $9 = (($5) + 4|0);
   HEAP32[$3>>2] = $9;
   HEAP32[$5>>2] = $8;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + 52|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$$02>>2]|0;
   $14 = (FUNCTION_TABLE_iii[$12 & 63]($this,$13)|0);
   $15 = ($14|0)==(-1);
   if ($15) {
    $__i$0$lcssa = $__i$01;
    label = 8;
    break;
   }
  }
  $16 = (($__i$01) + 1)|0;
  $17 = ($16|0)<($__n|0);
  if (!($17)) {
   $__i$0$lcssa = $16;
   label = 8;
   break;
  }
  $18 = (($$02) + 4|0);
  $$02 = $18;$__i$01 = $16;
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return 0|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,u$0) {
 $this = $this|0;
 u$0 = u$0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($1);
 $2 = $this;
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($1);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = $this;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -12|0);
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($1) + ($6)|0);
 $$sum = (($6) + 8)|0;
 $8 = (($1) + ($$sum)|0);
 $9 = $8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = $this;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -12|0);
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $$sum = (($6) + 8)|0;
 $7 = (($1) + ($$sum)|0);
 $8 = $7;
 __ZNSt3__18ios_baseD2Ev($8);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$phi$trans$insert$phi$trans$insert = 0, $$phi$trans$insert11$phi$trans$insert = 0, $$pre$pre = 0, $$pre12 = 0, $$pre12$pre = 0, $$sum = 0, $$sum10 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__s = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0, u$2 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $__s = sp;
 $1 = $this;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $this;
 $$sum = (($5) + 24)|0;
 $7 = (($6) + ($$sum)|0);
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return ($this|0);
 }
 $11 = ($__s);
 HEAP8[$11] = 0;
 $12 = (($__s) + 4|0);
 HEAP32[$12>>2] = $this;
 $$sum5 = (($5) + 16)|0;
 $13 = (($6) + ($$sum5)|0);
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 do {
  if ($16) {
   $$sum10 = (($5) + 72)|0;
   $17 = (($6) + ($$sum10)|0);
   $18 = $17;
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0|0);
   do {
    if ($20) {
     $$pre12 = $5;
     label = 6;
    } else {
     __THREW__ = 0;
     (invoke_ii(86,($19|0))|0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if ($22) {
      $47 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      u$0 = tempRet0;
      $$0 = $47;
      break;
     } else {
      $$pre$pre = HEAP32[$1>>2]|0;
      $$phi$trans$insert$phi$trans$insert = (($$pre$pre) + -12|0);
      $$phi$trans$insert11$phi$trans$insert = $$phi$trans$insert$phi$trans$insert;
      $$pre12$pre = HEAP32[$$phi$trans$insert11$phi$trans$insert>>2]|0;
      $$pre12 = $$pre12$pre;
      label = 6;
      break;
     }
    }
   } while(0);
   if ((label|0) == 6) {
    HEAP8[$11] = 1;
    $$sum6 = (($$pre12) + 24)|0;
    $23 = (($6) + ($$sum6)|0);
    $24 = $23;
    $25 = HEAP32[$24>>2]|0;
    $26 = $25;
    $27 = $25;
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + 24|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_ii($30|0,($26|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if (!($33)) {
     $34 = ($31|0)==(-1);
     if (!($34)) {
      break;
     }
     $35 = HEAP32[$1>>2]|0;
     $36 = (($35) + -12|0);
     $37 = $36;
     $38 = HEAP32[$37>>2]|0;
     $39 = (($6) + ($38)|0);
     $40 = $39;
     $$sum9 = (($38) + 16)|0;
     $41 = (($6) + ($$sum9)|0);
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = $43 | 1;
     __THREW__ = 0;
     invoke_vii(50,($40|0),($44|0));
     $45 = __THREW__; __THREW__ = 0;
     $46 = $45&1;
     if (!($46)) {
      break;
     }
    }
    $48 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    u$1 = tempRet0;
    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
    $$0 = $48;
   }
   (___cxa_begin_catch(($$0|0))|0);
   $49 = HEAP32[$1>>2]|0;
   $50 = (($49) + -12|0);
   $51 = $50;
   $52 = HEAP32[$51>>2]|0;
   $$sum7 = (($52) + 16)|0;
   $53 = (($6) + ($$sum7)|0);
   $54 = $53;
   $55 = HEAP32[$54>>2]|0;
   $56 = $55 | 1;
   HEAP32[$54>>2] = $56;
   $$sum8 = (($52) + 20)|0;
   $57 = (($6) + ($$sum8)|0);
   $58 = $57;
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & 1;
   $61 = ($60|0)==(0);
   if ($61) {
    ___cxa_end_catch();
    STACKTOP = sp;return ($this|0);
   }
   __THREW__ = 0;
   invoke_v(6);
   $62 = __THREW__; __THREW__ = 0;
   $63 = $62&1;
   if (!($63)) {
    // unreachable;
   }
   $64 = ___cxa_find_matching_catch(-1,-1)|0;
   $65 = tempRet0;
   __THREW__ = 0;
   invoke_v(5);
   $66 = __THREW__; __THREW__ = 0;
   $67 = $66&1;
   if ($67) {
    $68 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    u$2 = tempRet0;
    ___clang_call_terminate($68);
    // unreachable;
   } else {
    ___resumeException($64|0);
    // unreachable;
   }
  }
 } while(0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 | 1;
 HEAP32[$1>>2] = $3;
 $4 = (($this) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 } else {
  ___cxa_rethrow();
  // unreachable;
 }
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($1);
 $2 = $this;
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($1);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = $this;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -12|0);
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($1) + ($6)|0);
 $$sum = (($6) + 8)|0;
 $8 = (($1) + ($$sum)|0);
 $9 = $8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = $this;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -12|0);
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $$sum = (($6) + 8)|0;
 $7 = (($1) + ($$sum)|0);
 $8 = $7;
 __ZNSt3__18ios_baseD2Ev($8);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$phi$trans$insert$phi$trans$insert = 0, $$phi$trans$insert11$phi$trans$insert = 0, $$pre$pre = 0, $$pre12 = 0, $$pre12$pre = 0, $$sum = 0, $$sum10 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__s = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0, u$2 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $__s = sp;
 $1 = $this;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = $this;
 $$sum = (($5) + 24)|0;
 $7 = (($6) + ($$sum)|0);
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return ($this|0);
 }
 $11 = ($__s);
 HEAP8[$11] = 0;
 $12 = (($__s) + 4|0);
 HEAP32[$12>>2] = $this;
 $$sum5 = (($5) + 16)|0;
 $13 = (($6) + ($$sum5)|0);
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 do {
  if ($16) {
   $$sum10 = (($5) + 72)|0;
   $17 = (($6) + ($$sum10)|0);
   $18 = $17;
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0|0);
   do {
    if ($20) {
     $$pre12 = $5;
     label = 6;
    } else {
     __THREW__ = 0;
     (invoke_ii(87,($19|0))|0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if ($22) {
      $47 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      u$0 = tempRet0;
      $$0 = $47;
      break;
     } else {
      $$pre$pre = HEAP32[$1>>2]|0;
      $$phi$trans$insert$phi$trans$insert = (($$pre$pre) + -12|0);
      $$phi$trans$insert11$phi$trans$insert = $$phi$trans$insert$phi$trans$insert;
      $$pre12$pre = HEAP32[$$phi$trans$insert11$phi$trans$insert>>2]|0;
      $$pre12 = $$pre12$pre;
      label = 6;
      break;
     }
    }
   } while(0);
   if ((label|0) == 6) {
    HEAP8[$11] = 1;
    $$sum6 = (($$pre12) + 24)|0;
    $23 = (($6) + ($$sum6)|0);
    $24 = $23;
    $25 = HEAP32[$24>>2]|0;
    $26 = $25;
    $27 = $25;
    $28 = HEAP32[$27>>2]|0;
    $29 = (($28) + 24|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_ii($30|0,($26|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if (!($33)) {
     $34 = ($31|0)==(-1);
     if (!($34)) {
      break;
     }
     $35 = HEAP32[$1>>2]|0;
     $36 = (($35) + -12|0);
     $37 = $36;
     $38 = HEAP32[$37>>2]|0;
     $39 = (($6) + ($38)|0);
     $40 = $39;
     $$sum9 = (($38) + 16)|0;
     $41 = (($6) + ($$sum9)|0);
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = $43 | 1;
     __THREW__ = 0;
     invoke_vii(50,($40|0),($44|0));
     $45 = __THREW__; __THREW__ = 0;
     $46 = $45&1;
     if (!($46)) {
      break;
     }
    }
    $48 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    u$1 = tempRet0;
    __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
    $$0 = $48;
   }
   (___cxa_begin_catch(($$0|0))|0);
   $49 = HEAP32[$1>>2]|0;
   $50 = (($49) + -12|0);
   $51 = $50;
   $52 = HEAP32[$51>>2]|0;
   $$sum7 = (($52) + 16)|0;
   $53 = (($6) + ($$sum7)|0);
   $54 = $53;
   $55 = HEAP32[$54>>2]|0;
   $56 = $55 | 1;
   HEAP32[$54>>2] = $56;
   $$sum8 = (($52) + 20)|0;
   $57 = (($6) + ($$sum8)|0);
   $58 = $57;
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & 1;
   $61 = ($60|0)==(0);
   if ($61) {
    ___cxa_end_catch();
    STACKTOP = sp;return ($this|0);
   }
   __THREW__ = 0;
   invoke_v(6);
   $62 = __THREW__; __THREW__ = 0;
   $63 = $62&1;
   if (!($63)) {
    // unreachable;
   }
   $64 = ___cxa_find_matching_catch(-1,-1)|0;
   $65 = tempRet0;
   __THREW__ = 0;
   invoke_v(5);
   $66 = __THREW__; __THREW__ = 0;
   $67 = $66&1;
   if ($67) {
    $68 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    u$2 = tempRet0;
    ___clang_call_terminate($68);
    // unreachable;
   } else {
    ___resumeException($64|0);
    // unreachable;
   }
  }
 } while(0);
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($1);
 $2 = $this;
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($1);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = $this;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -12|0);
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($1) + ($6)|0);
 $$sum = (($6) + 4)|0;
 $8 = (($1) + ($$sum)|0);
 $9 = $8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = $this;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -12|0);
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $$sum = (($6) + 4)|0;
 $7 = (($1) + ($$sum)|0);
 $8 = $7;
 __ZNSt3__18ios_baseD2Ev($8);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $$sum = 0, $$sum1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP8[$1] = 0;
 $2 = (($this) + 4|0);
 HEAP32[$2>>2] = $__os;
 $3 = $__os;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -12|0);
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $__os;
 $$sum = (($7) + 16)|0;
 $9 = (($8) + ($$sum)|0);
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($7) + 72)|0;
 $13 = (($8) + ($$sum1)|0);
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if (!($16)) {
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($15)|0);
 }
 HEAP8[$1] = 1;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0;
 sp = STACKTOP;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -12|0);
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $$sum = (($7) + 24)|0;
 $9 = (($8) + ($$sum)|0);
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($7) + 16)|0;
 $13 = (($8) + ($$sum1)|0);
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($7) + 4)|0;
 $17 = (($8) + ($$sum2)|0);
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & 8192;
 $21 = ($20|0)==(0);
 if ($21) {
  STACKTOP = sp;return;
 }
 $22 = (__ZSt18uncaught_exceptionv()|0);
 if ($22) {
  STACKTOP = sp;return;
 }
 $23 = HEAP32[$1>>2]|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + -12|0);
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = $23;
 $$sum3 = (($28) + 24)|0;
 $30 = (($29) + ($$sum3)|0);
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = $32;
 $34 = $32;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + 24|0);
 $37 = HEAP32[$36>>2]|0;
 __THREW__ = 0;
 $38 = (invoke_ii($37|0,($33|0))|0);
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 do {
  if (!($40)) {
   $41 = ($38|0)==(-1);
   if (!($41)) {
    STACKTOP = sp;return;
   }
   $42 = HEAP32[$1>>2]|0;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + -12|0);
   $46 = $45;
   $47 = HEAP32[$46>>2]|0;
   $48 = $42;
   $49 = (($48) + ($47)|0);
   $50 = $49;
   $$sum4 = (($47) + 16)|0;
   $51 = (($48) + ($$sum4)|0);
   $52 = $51;
   $53 = HEAP32[$52>>2]|0;
   $54 = $53 | 1;
   __THREW__ = 0;
   invoke_vii(50,($50|0),($54|0));
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   if ($56) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $57 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 u$0 = tempRet0;
 (___cxa_begin_catch(($57|0))|0);
 __THREW__ = 0;
 invoke_v(5);
 $58 = __THREW__; __THREW__ = 0;
 $59 = $58&1;
 if ($59) {
  $60 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$1 = tempRet0;
  ___clang_call_terminate($60);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$1 = 0, $$byval_copy = 0, $$phi$trans$insert$phi$trans$insert = 0, $$phi$trans$insert13$phi$trans$insert = 0, $$pre$pre = 0, $$pre14 = 0, $$pre14$pre = 0, $$sum = 0, $$sum$i = 0, $$sum$i$i = 0, $$sum1$i = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum8 = 0, $$sum9 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__s = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0, u$2 = 0, u$3 = 0, u$4 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $$byval_copy = sp;
 $1 = sp + 8|0;
 $2 = sp + 16|0;
 $__s = sp + 24|0;
 $3 = sp + 32|0;
 $4 = sp + 40|0;
 $5 = ($__s);
 HEAP8[$5] = 0;
 $6 = (($__s) + 4|0);
 HEAP32[$6>>2] = $this;
 $7 = $this;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + -12|0);
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $this;
 $$sum$i = (($11) + 16)|0;
 $13 = (($12) + ($$sum$i)|0);
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 do {
  if ($16) {
   $$sum1$i = (($11) + 72)|0;
   $17 = (($12) + ($$sum1$i)|0);
   $18 = $17;
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0|0);
   do {
    if ($20) {
     $$pre14 = $11;
     label = 5;
    } else {
     __THREW__ = 0;
     (invoke_ii(86,($19|0))|0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if ($22) {
      $88 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      u$1 = tempRet0;
      $$1 = $88;
      break;
     } else {
      $$pre$pre = HEAP32[$7>>2]|0;
      $$phi$trans$insert$phi$trans$insert = (($$pre$pre) + -12|0);
      $$phi$trans$insert13$phi$trans$insert = $$phi$trans$insert$phi$trans$insert;
      $$pre14$pre = HEAP32[$$phi$trans$insert13$phi$trans$insert>>2]|0;
      $$pre14 = $$pre14$pre;
      label = 5;
      break;
     }
    }
   } while(0);
   if ((label|0) == 5) {
    HEAP8[$5] = 1;
    $$sum = (($$pre14) + 28)|0;
    $23 = (($12) + ($$sum)|0);
    $24 = $23;
    __ZNSt3__16localeC2ERKS0_($3,$24);
    __THREW__ = 0;
    $25 = (invoke_iii(23,($3|0),((7856)|0))|0);
    $26 = __THREW__; __THREW__ = 0;
    $27 = $26&1;
    if ($27) {
     $90 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$3 = tempRet0;
     __ZNSt3__16localeD2Ev($3);
     $$0 = $90;
    } else {
     $28 = $25;
     __ZNSt3__16localeD2Ev($3);
     $29 = HEAP32[$7>>2]|0;
     $30 = (($29) + -12|0);
     $31 = $30;
     $32 = HEAP32[$31>>2]|0;
     $$sum$i$i = (($32) + 24)|0;
     $33 = (($12) + ($$sum$i$i)|0);
     $34 = $33;
     $35 = HEAP32[$34>>2]|0;
     $36 = $35;
     $37 = (($12) + ($32)|0);
     $$sum10 = (($32) + 76)|0;
     $38 = (($12) + ($$sum10)|0);
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==(-1);
     L13: do {
      if ($41) {
       $42 = $2;
       $$sum12 = (($32) + 28)|0;
       $43 = (($12) + ($$sum12)|0);
       $44 = $43;
       __ZNSt3__16localeC2ERKS0_($2,$44);
       __THREW__ = 0;
       $45 = (invoke_iii(23,($2|0),((9136)|0))|0);
       $46 = __THREW__; __THREW__ = 0;
       $47 = $46&1;
       do {
        if (!($47)) {
         $48 = $45;
         $49 = $45;
         $50 = HEAP32[$49>>2]|0;
         $51 = (($50) + 28|0);
         $52 = HEAP32[$51>>2]|0;
         __THREW__ = 0;
         $53 = (invoke_iii($52|0,($48|0),32)|0);
         $54 = __THREW__; __THREW__ = 0;
         $55 = $54&1;
         if ($55) {
          break;
         }
         __ZNSt3__16localeD2Ev($2);
         $57 = $53 << 24 >> 24;
         HEAP32[$39>>2] = $57;
         $58 = $57;
         label = 11;
         break L13;
        }
       } while(0);
       $56 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       u$0 = tempRet0;
       __ZNSt3__16localeD2Ev($2);
       $eh$lpad$body$indexZ2D = $56;
      } else {
       $58 = $40;
       label = 11;
      }
     } while(0);
     if ((label|0) == 11) {
      $59 = $58&255;
      $60 = $37;
      $61 = $1;
      $62 = $25;
      $63 = HEAP32[$62>>2]|0;
      $64 = (($63) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($1);
      HEAP32[$66>>2] = $36;
      __THREW__ = 0;
      $67 = $$byval_copy;
      $68 = $$byval_copy;
      $69 = $1;
      ;HEAP32[$68+0>>2]=HEAP32[$69+0>>2]|0;
      invoke_viiiiii($65|0,($4|0),($28|0),($$byval_copy|0),($60|0),($59|0),($__n|0));
      $70 = $$byval_copy;
      $71 = __THREW__; __THREW__ = 0;
      $72 = $71&1;
      if (!($72)) {
       $73 = ($4);
       $74 = HEAP32[$73>>2]|0;
       $75 = ($74|0)==(0|0);
       if (!($75)) {
        break;
       }
       $76 = HEAP32[$7>>2]|0;
       $77 = (($76) + -12|0);
       $78 = $77;
       $79 = HEAP32[$78>>2]|0;
       $80 = (($12) + ($79)|0);
       $81 = $80;
       $$sum11 = (($79) + 16)|0;
       $82 = (($12) + ($$sum11)|0);
       $83 = $82;
       $84 = HEAP32[$83>>2]|0;
       $85 = $84 | 5;
       __THREW__ = 0;
       invoke_vii(50,($81|0),($85|0));
       $86 = __THREW__; __THREW__ = 0;
       $87 = $86&1;
       if (!($87)) {
        break;
       }
      }
      $89 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      u$2 = tempRet0;
      $eh$lpad$body$indexZ2D = $89;
     }
     $$0 = $eh$lpad$body$indexZ2D;
    }
    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
    $$1 = $$0;
   }
   (___cxa_begin_catch(($$1|0))|0);
   $91 = HEAP32[$7>>2]|0;
   $92 = (($91) + -12|0);
   $93 = $92;
   $94 = HEAP32[$93>>2]|0;
   $$sum8 = (($94) + 16)|0;
   $95 = (($12) + ($$sum8)|0);
   $96 = $95;
   $97 = HEAP32[$96>>2]|0;
   $98 = $97 | 1;
   HEAP32[$96>>2] = $98;
   $$sum9 = (($94) + 20)|0;
   $99 = (($12) + ($$sum9)|0);
   $100 = $99;
   $101 = HEAP32[$100>>2]|0;
   $102 = $101 & 1;
   $103 = ($102|0)==(0);
   if ($103) {
    ___cxa_end_catch();
    STACKTOP = sp;return ($this|0);
   }
   __THREW__ = 0;
   invoke_v(6);
   $104 = __THREW__; __THREW__ = 0;
   $105 = $104&1;
   if (!($105)) {
    // unreachable;
   }
   $106 = ___cxa_find_matching_catch(-1,-1)|0;
   $107 = tempRet0;
   __THREW__ = 0;
   invoke_v(5);
   $108 = __THREW__; __THREW__ = 0;
   $109 = $108&1;
   if ($109) {
    $110 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    u$4 = tempRet0;
    ___clang_call_terminate($110);
    // unreachable;
   } else {
    ___resumeException($106|0);
    // unreachable;
   }
  }
 } while(0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPNS_15basic_streambufIcS2_EE($this,$__sb) {
 $this = $this|0;
 $__sb = $__sb|0;
 var $$ = 0, $$$us = 0, $$0 = 0, $$0$i$i = 0, $$1 = 0, $$phi$trans$insert$phi$trans$insert = 0, $$phi$trans$insert22$phi$trans$insert = 0, $$pre$pre = 0, $$pre23 = 0, $$pre23$pre = 0, $$sum = 0, $$sum$i = 0, $$sum$i$i = 0, $$sum1$i = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__s = 0, $lpad$phi$index = 0, label = 0, sp = 0;
 var u$0 = 0, u$1 = 0, u$2 = 0, u$3 = 0, u$4 = 0, u$5 = 0, u$6 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $__s = sp;
 $1 = ($__s);
 HEAP8[$1] = 0;
 $2 = (($__s) + 4|0);
 HEAP32[$2>>2] = $this;
 $3 = $this;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -12|0);
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $this;
 $$sum$i = (($7) + 16)|0;
 $9 = (($8) + ($$sum$i)|0);
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 L1: do {
  if ($12) {
   $$sum1$i = (($7) + 72)|0;
   $13 = (($8) + ($$sum1$i)|0);
   $14 = $13;
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0|0);
   do {
    if ($16) {
     $$pre23 = $7;
     label = 5;
    } else {
     __THREW__ = 0;
     (invoke_ii(86,($15|0))|0);
     $17 = __THREW__; __THREW__ = 0;
     $18 = $17&1;
     if ($18) {
      $101 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      u$1 = tempRet0;
      $$1 = $101;
      break;
     } else {
      $$pre$pre = HEAP32[$3>>2]|0;
      $$phi$trans$insert$phi$trans$insert = (($$pre$pre) + -12|0);
      $$phi$trans$insert22$phi$trans$insert = $$phi$trans$insert$phi$trans$insert;
      $$pre23$pre = HEAP32[$$phi$trans$insert22$phi$trans$insert>>2]|0;
      $$pre23 = $$pre23$pre;
      label = 5;
      break;
     }
    }
   } while(0);
   if ((label|0) == 5) {
    HEAP8[$1] = 1;
    $19 = ($__sb|0)==(0|0);
    do {
     if ($19) {
      $149 = (($8) + ($$pre23)|0);
      $150 = $149;
      $$sum19 = (($$pre23) + 16)|0;
      $151 = (($8) + ($$sum19)|0);
      $152 = $151;
      $153 = HEAP32[$152>>2]|0;
      $154 = $153 | 1;
      __THREW__ = 0;
      invoke_vii(50,($150|0),($154|0));
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      if ($156) {
       label = 25;
      } else {
       break L1;
      }
     } else {
      $$sum$i$i = (($$pre23) + 24)|0;
      $20 = (($8) + ($$sum$i$i)|0);
      $21 = $20;
      $22 = HEAP32[$21>>2]|0;
      $23 = $22;
      $24 = ($22|0)==(0|0);
      $25 = (($22) + 24|0);
      $26 = $25;
      $27 = (($22) + 28|0);
      $28 = $27;
      $29 = $22;
      L12: do {
       if ($24) {
        $30 = (($__sb) + 12|0);
        $31 = HEAP32[$30>>2]|0;
        $32 = (($__sb) + 16|0);
        $33 = HEAP32[$32>>2]|0;
        $34 = ($31|0)==($33|0);
        do {
         if ($34) {
          $35 = $__sb;
          $36 = HEAP32[$35>>2]|0;
          $37 = (($36) + 36|0);
          $38 = HEAP32[$37>>2]|0;
          __THREW__ = 0;
          $39 = (invoke_ii($38|0,($__sb|0))|0);
          $40 = __THREW__; __THREW__ = 0;
          $41 = $40&1;
          if ($41) {
           break;
          }
          $42 = ($39|0)==(-1);
          $$$us = $42 ? 0 : $__sb;
          $43 = ($$$us|0)==(0|0);
          if ($43) {
           label = 37;
           break L12;
          } else {
           $44 = $$$us;
           label = 10;
          }
         } else {
          $44 = $__sb;
          label = 10;
         }
        } while(0);
        if ((label|0) == 10) {
         $45 = (($44) + 12|0);
         $46 = HEAP32[$45>>2]|0;
         $47 = (($44) + 16|0);
         $48 = HEAP32[$47>>2]|0;
         $49 = ($46|0)==($48|0);
         if (!($49)) {
          label = 37;
          break;
         }
         $50 = $44;
         $51 = HEAP32[$50>>2]|0;
         $52 = (($51) + 36|0);
         $53 = HEAP32[$52>>2]|0;
         __THREW__ = 0;
         (invoke_ii($53|0,($44|0))|0);
         $54 = __THREW__; __THREW__ = 0;
         $55 = $54&1;
         if (!($55)) {
          label = 37;
          break;
         }
        }
        $56 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        u$0 = tempRet0;
        $lpad$phi$index = $56;
       } else {
        $57 = $__sb;$__c$0 = 0;
        while(1) {
         $58 = ($57|0)==(0|0);
         if ($58) {
          label = 36;
          break;
         }
         $59 = (($57) + 12|0);
         $60 = HEAP32[$59>>2]|0;
         $61 = (($57) + 16|0);
         $62 = HEAP32[$61>>2]|0;
         $63 = ($60|0)==($62|0);
         if ($63) {
          $64 = $57;
          $65 = HEAP32[$64>>2]|0;
          $66 = (($65) + 36|0);
          $67 = HEAP32[$66>>2]|0;
          __THREW__ = 0;
          $68 = (invoke_ii($67|0,($57|0))|0);
          $69 = __THREW__; __THREW__ = 0;
          $70 = $69&1;
          if ($70) {
           label = 26;
           break;
          }
          $71 = ($68|0)==(-1);
          $$ = $71 ? 0 : $57;
          $72 = ($$|0)==(0|0);
          if ($72) {
           label = 36;
           break;
          } else {
           $73 = $$;
          }
         } else {
          $73 = $57;
         }
         $74 = (($73) + 12|0);
         $75 = HEAP32[$74>>2]|0;
         $76 = (($73) + 16|0);
         $77 = HEAP32[$76>>2]|0;
         $78 = ($75|0)==($77|0);
         if ($78) {
          $79 = $73;
          $80 = HEAP32[$79>>2]|0;
          $81 = (($80) + 36|0);
          $82 = HEAP32[$81>>2]|0;
          __THREW__ = 0;
          $83 = (invoke_ii($82|0,($73|0))|0);
          $84 = __THREW__; __THREW__ = 0;
          $85 = $84&1;
          if ($85) {
           label = 26;
           break;
          } else {
           $$0$i$i = $83;
          }
         } else {
          $86 = HEAP8[$75]|0;
          $87 = $86&255;
          $$0$i$i = $87;
         }
         $88 = HEAP32[$26>>2]|0;
         $89 = HEAP32[$28>>2]|0;
         $90 = ($88|0)==($89|0);
         if ($90) {
          $93 = HEAP32[$29>>2]|0;
          $94 = (($93) + 52|0);
          $95 = HEAP32[$94>>2]|0;
          $96 = $$0$i$i & 255;
          __THREW__ = 0;
          $97 = (invoke_iii($95|0,($23|0),($96|0))|0);
          $98 = __THREW__; __THREW__ = 0;
          $99 = $98&1;
          if ($99) {
           label = 26;
           break;
          }
          $100 = ($97|0)==(-1);
          if ($100) {
           label = 36;
           break;
          }
         } else {
          $91 = $$0$i$i&255;
          $92 = (($88) + 1|0);
          HEAP32[$26>>2] = $92;
          HEAP8[$88] = $91;
         }
         $122 = HEAP32[$74>>2]|0;
         $123 = HEAP32[$76>>2]|0;
         $124 = ($122|0)==($123|0);
         if ($124) {
          $125 = $73;
          $126 = HEAP32[$125>>2]|0;
          $127 = (($126) + 40|0);
          $128 = HEAP32[$127>>2]|0;
          __THREW__ = 0;
          (invoke_ii($128|0,($73|0))|0);
          $129 = __THREW__; __THREW__ = 0;
          $130 = $129&1;
          if ($130) {
           label = 26;
           break;
          }
         } else {
          $131 = (($122) + 1|0);
          HEAP32[$74>>2] = $131;
         }
         $132 = (($__c$0) + 1)|0;
         $57 = $73;$__c$0 = $132;
        }
        if ((label|0) == 26) {
         $103 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
         u$3 = tempRet0;
         $lpad$phi$index = $103;
         break;
        }
        else if ((label|0) == 36) {
         $133 = ($__c$0|0)==(0);
         if ($133) {
          label = 37;
          break;
         } else {
          break L1;
         }
        }
       }
      } while(0);
      if ((label|0) == 37) {
       $134 = HEAP32[$3>>2]|0;
       $135 = (($134) + -12|0);
       $136 = $135;
       $137 = HEAP32[$136>>2]|0;
       $138 = (($8) + ($137)|0);
       $139 = $138;
       $$sum = (($137) + 16)|0;
       $140 = (($8) + ($$sum)|0);
       $141 = $140;
       $142 = HEAP32[$141>>2]|0;
       $143 = $142 | 4;
       __THREW__ = 0;
       invoke_vii(50,($139|0),($143|0));
       $144 = __THREW__; __THREW__ = 0;
       $145 = $144&1;
       if (!($145)) {
        break L1;
       }
       $104 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       u$4 = tempRet0;
       $lpad$phi$index = $104;
      }
      (___cxa_begin_catch(($lpad$phi$index|0))|0);
      $105 = HEAP32[$3>>2]|0;
      $106 = (($105) + -12|0);
      $107 = $106;
      $108 = HEAP32[$107>>2]|0;
      $$sum15 = (($108) + 16)|0;
      $109 = (($8) + ($$sum15)|0);
      $110 = $109;
      $111 = HEAP32[$110>>2]|0;
      $112 = $111 | 4;
      HEAP32[$110>>2] = $112;
      $$sum16 = (($108) + 20)|0;
      $113 = (($8) + ($$sum16)|0);
      $114 = $113;
      $115 = HEAP32[$114>>2]|0;
      $116 = $115 & 4;
      $117 = ($116|0)==(0);
      if ($117) {
       __THREW__ = 0;
       invoke_v(5);
       $120 = __THREW__; __THREW__ = 0;
       $121 = $120&1;
       if ($121) {
        label = 25;
        break;
       } else {
        break L1;
       }
      }
      __THREW__ = 0;
      invoke_v(6);
      $118 = __THREW__; __THREW__ = 0;
      $119 = $118&1;
      if (!($119)) {
       // unreachable;
      }
      $146 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      u$5 = tempRet0;
      __THREW__ = 0;
      invoke_v(5);
      $147 = __THREW__; __THREW__ = 0;
      $148 = $147&1;
      if (!($148)) {
       $$0 = $146;
       break;
      }
      $176 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      u$6 = tempRet0;
      ___clang_call_terminate($176);
      // unreachable;
     }
    } while(0);
    if ((label|0) == 25) {
     $102 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$2 = tempRet0;
     $$0 = $102;
    }
    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
    $$1 = $$0;
   }
   (___cxa_begin_catch(($$1|0))|0);
   $157 = HEAP32[$3>>2]|0;
   $158 = (($157) + -12|0);
   $159 = $158;
   $160 = HEAP32[$159>>2]|0;
   $$sum17 = (($160) + 16)|0;
   $161 = (($8) + ($$sum17)|0);
   $162 = $161;
   $163 = HEAP32[$162>>2]|0;
   $164 = $163 | 1;
   HEAP32[$162>>2] = $164;
   $$sum18 = (($160) + 20)|0;
   $165 = (($8) + ($$sum18)|0);
   $166 = $165;
   $167 = HEAP32[$166>>2]|0;
   $168 = $167 & 1;
   $169 = ($168|0)==(0);
   if ($169) {
    ___cxa_end_catch();
    STACKTOP = sp;return ($this|0);
   }
   __THREW__ = 0;
   invoke_v(6);
   $170 = __THREW__; __THREW__ = 0;
   $171 = $170&1;
   if (!($171)) {
    // unreachable;
   }
   $172 = ___cxa_find_matching_catch(-1,-1)|0;
   $173 = tempRet0;
   __THREW__ = 0;
   invoke_v(5);
   $174 = __THREW__; __THREW__ = 0;
   $175 = $174&1;
   if ($175) {
    $176 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    u$6 = tempRet0;
    ___clang_call_terminate($176);
    // unreachable;
   } else {
    ___resumeException($172|0);
    // unreachable;
   }
  }
 } while(0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$phi$trans$insert$phi$trans$insert = 0, $$phi$trans$insert6$phi$trans$insert = 0, $$pre = 0, $$pre$pre = 0, $$pre7 = 0, $$pre7$pre = 0, $$pre8 = 0, $$sum = 0, $$sum$i = 0, $$sum$i$i = 0, $$sum1$i = 0, $$sum4 = 0, $$sum5 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0, u$2 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $__s = sp;
 $1 = ($__s);
 HEAP8[$1] = 0;
 $2 = (($__s) + 4|0);
 HEAP32[$2>>2] = $this;
 $3 = $this;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -12|0);
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $this;
 $$sum$i = (($7) + 16)|0;
 $9 = (($8) + ($$sum$i)|0);
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0);
 L1: do {
  if ($12) {
   $$sum1$i = (($7) + 72)|0;
   $13 = (($8) + ($$sum1$i)|0);
   $14 = $13;
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0|0);
   do {
    if ($16) {
     $$pre = $4;$$pre7 = $7;
     label = 5;
    } else {
     __THREW__ = 0;
     (invoke_ii(86,($15|0))|0);
     $17 = __THREW__; __THREW__ = 0;
     $18 = $17&1;
     if ($18) {
      $53 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
      u$0 = tempRet0;
      $$0 = $53;
      break;
     } else {
      $$pre$pre = HEAP32[$3>>2]|0;
      $$phi$trans$insert$phi$trans$insert = (($$pre$pre) + -12|0);
      $$phi$trans$insert6$phi$trans$insert = $$phi$trans$insert$phi$trans$insert;
      $$pre7$pre = HEAP32[$$phi$trans$insert6$phi$trans$insert>>2]|0;
      $$pre = $$pre$pre;$$pre7 = $$pre7$pre;
      label = 5;
      break;
     }
    }
   } while(0);
   if ((label|0) == 5) {
    HEAP8[$1] = 1;
    $$sum$i$i = (($$pre7) + 24)|0;
    $19 = (($8) + ($$sum$i$i)|0);
    $20 = $19;
    $21 = HEAP32[$20>>2]|0;
    $22 = $21;
    $23 = ($21|0)==(0|0);
    do {
     if ($23) {
      $41 = $$pre;
      label = 11;
     } else {
      $24 = (($21) + 24|0);
      $25 = $24;
      $26 = HEAP32[$25>>2]|0;
      $27 = (($21) + 28|0);
      $28 = $27;
      $29 = HEAP32[$28>>2]|0;
      $30 = ($26|0)==($29|0);
      if (!($30)) {
       $31 = (($26) + 1|0);
       HEAP32[$25>>2] = $31;
       HEAP8[$26] = $__c;
       break L1;
      }
      $32 = $21;
      $33 = HEAP32[$32>>2]|0;
      $34 = (($33) + 52|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = $__c&255;
      __THREW__ = 0;
      $37 = (invoke_iii($35|0,($22|0),($36|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       break;
      }
      $40 = ($37|0)==(-1);
      if (!($40)) {
       break L1;
      }
      $$pre8 = HEAP32[$3>>2]|0;
      $41 = $$pre8;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $42 = (($41) + -12|0);
     $43 = $42;
     $44 = HEAP32[$43>>2]|0;
     $45 = (($8) + ($44)|0);
     $46 = $45;
     $$sum = (($44) + 16)|0;
     $47 = (($8) + ($$sum)|0);
     $48 = $47;
     $49 = HEAP32[$48>>2]|0;
     $50 = $49 | 1;
     __THREW__ = 0;
     invoke_vii(50,($46|0),($50|0));
     $51 = __THREW__; __THREW__ = 0;
     $52 = $51&1;
     if (!($52)) {
      break;
     }
    }
    $54 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    u$1 = tempRet0;
    __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
    $$0 = $54;
   }
   (___cxa_begin_catch(($$0|0))|0);
   $55 = HEAP32[$3>>2]|0;
   $56 = (($55) + -12|0);
   $57 = $56;
   $58 = HEAP32[$57>>2]|0;
   $$sum4 = (($58) + 16)|0;
   $59 = (($8) + ($$sum4)|0);
   $60 = $59;
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $$sum5 = (($58) + 20)|0;
   $63 = (($8) + ($$sum5)|0);
   $64 = $63;
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 & 1;
   $67 = ($66|0)==(0);
   if ($67) {
    ___cxa_end_catch();
    STACKTOP = sp;return ($this|0);
   }
   __THREW__ = 0;
   invoke_v(6);
   $68 = __THREW__; __THREW__ = 0;
   $69 = $68&1;
   if (!($69)) {
    // unreachable;
   }
   $70 = ___cxa_find_matching_catch(-1,-1)|0;
   $71 = tempRet0;
   __THREW__ = 0;
   invoke_v(5);
   $72 = __THREW__; __THREW__ = 0;
   $73 = $72&1;
   if ($73) {
    $74 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    u$2 = tempRet0;
    ___clang_call_terminate($74);
    // unreachable;
   } else {
    ___resumeException($70|0);
    // unreachable;
   }
  }
 } while(0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($1);
 $2 = $this;
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($1);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = $this;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -12|0);
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($1) + ($6)|0);
 $$sum = (($6) + 4)|0;
 $8 = (($1) + ($$sum)|0);
 $9 = $8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = $this;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -12|0);
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $$sum = (($6) + 4)|0;
 $7 = (($1) + ($$sum)|0);
 $8 = $7;
 __ZNSt3__18ios_baseD2Ev($8);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0;
 sp = STACKTOP;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + -12|0);
 $6 = $5;
 $7 = HEAP32[$6>>2]|0;
 $8 = $2;
 $$sum = (($7) + 24)|0;
 $9 = (($8) + ($$sum)|0);
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($7) + 16)|0;
 $13 = (($8) + ($$sum1)|0);
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 if (!($16)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($7) + 4)|0;
 $17 = (($8) + ($$sum2)|0);
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & 8192;
 $21 = ($20|0)==(0);
 if ($21) {
  STACKTOP = sp;return;
 }
 $22 = (__ZSt18uncaught_exceptionv()|0);
 if ($22) {
  STACKTOP = sp;return;
 }
 $23 = HEAP32[$1>>2]|0;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + -12|0);
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = $23;
 $$sum3 = (($28) + 24)|0;
 $30 = (($29) + ($$sum3)|0);
 $31 = $30;
 $32 = HEAP32[$31>>2]|0;
 $33 = $32;
 $34 = $32;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + 24|0);
 $37 = HEAP32[$36>>2]|0;
 __THREW__ = 0;
 $38 = (invoke_ii($37|0,($33|0))|0);
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 do {
  if (!($40)) {
   $41 = ($38|0)==(-1);
   if (!($41)) {
    STACKTOP = sp;return;
   }
   $42 = HEAP32[$1>>2]|0;
   $43 = $42;
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + -12|0);
   $46 = $45;
   $47 = HEAP32[$46>>2]|0;
   $48 = $42;
   $49 = (($48) + ($47)|0);
   $50 = $49;
   $$sum4 = (($47) + 16)|0;
   $51 = (($48) + ($$sum4)|0);
   $52 = $51;
   $53 = HEAP32[$52>>2]|0;
   $54 = $53 | 1;
   __THREW__ = 0;
   invoke_vii(50,($50|0),($54|0));
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   if ($56) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $57 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 u$0 = tempRet0;
 (___cxa_begin_catch(($57|0))|0);
 __THREW__ = 0;
 invoke_v(5);
 $58 = __THREW__; __THREW__ = 0;
 $59 = $58&1;
 if ($59) {
  $60 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$1 = tempRet0;
  ___clang_call_terminate($60);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 12|0);
 __ZNSt3__18ios_baseD2Ev($1);
 $2 = $this;
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 12|0);
 __ZNSt3__18ios_baseD2Ev($1);
 STACKTOP = sp;return;
}
function __ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + -8|0);
 $2 = (($1) + 12|0);
 $3 = $2;
 __ZNSt3__18ios_baseD2Ev($3);
 $4 = $1;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $$sum = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = $this;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -12|0);
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($1) + ($6)|0);
 $$sum = (($6) + 12)|0;
 $8 = (($1) + ($$sum)|0);
 $9 = $8;
 __ZNSt3__18ios_baseD2Ev($9);
 __ZdlPv($7);
 STACKTOP = sp;return;
}
function __ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + -8|0);
 $2 = (($1) + 12|0);
 $3 = $2;
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = $this;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -12|0);
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $$sum = (($6) + 12)|0;
 $7 = (($1) + ($$sum)|0);
 $8 = $7;
 __ZNSt3__18ios_baseD2Ev($8);
 STACKTOP = sp;return;
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ((6608)|0);
}
function __ZNKSt3__119__iostream_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($ev|0)==(1);
 if ($1) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,(6624),35);
  STACKTOP = sp;return;
 } else {
  $2 = ($this);
  __ZNKSt3__112__do_message7messageEi($agg$result,$2,$ev);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__iostream_categoryD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 __ZNSt3__112system_errorD2Ev($1);
 $2 = $this;
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 __ZNSt3__112system_errorD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($1) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $2 = ($$024|0)==($__hi1|0);
    if ($2) {
     $$0 = -1;
     break L1;
    }
    $3 = HEAP8[$$024]|0;
    $4 = HEAP8[$$015]|0;
    $5 = ($3<<24>>24)<($4<<24>>24);
    if ($5) {
     $$0 = -1;
     break L1;
    }
    $6 = ($4<<24>>24)<($3<<24>>24);
    if ($6) {
     $$0 = 1;
     break L1;
    }
    $7 = (($$024) + 1|0);
    $8 = (($$015) + 1|0);
    $9 = ($8|0)==($__hi2|0);
    if ($9) {
     $$02$lcssa = $7;
     label = 6;
     break;
    } else {
     $$015 = $8;$$024 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $10 = ($$02$lcssa|0)!=($__hi1|0);
  $11 = $10&1;
  $$0 = $11;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $$02$i$i$i = 0, $$02$i$i$i$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa$i$i$i = 0, $__p$0$ph$i$i$i = 0, $__p$01$i$i$i = 0, $__p$01$i$i$i$phi = 0, $scevgep$i$i$i = 0, $scevgep3$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $__lo;
 $2 = $__hi;
 $3 = (($2) - ($1))|0;
 $4 = ($3>>>0)>(4294967279);
 if ($4) {
  $5 = $agg$result;
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($5);
 }
 $6 = ($3>>>0)<(11);
 if ($6) {
  $7 = $3 << 1;
  $8 = $7&255;
  $9 = $agg$result;
  HEAP8[$9] = $8;
  $10 = $agg$result;
  $11 = (($10) + 1|0);
  $__p$0$ph$i$i$i = $11;
 } else {
  $12 = (($3) + 16)|0;
  $13 = $12 & -16;
  $14 = (__Znwj($13)|0);
  $15 = (($agg$result) + 8|0);
  HEAP32[$15>>2] = $14;
  $16 = $13 | 1;
  $17 = ($agg$result);
  HEAP32[$17>>2] = $16;
  $18 = (($agg$result) + 4|0);
  HEAP32[$18>>2] = $3;
  $__p$0$ph$i$i$i = $14;
 }
 $19 = ($__lo|0)==($__hi|0);
 if ($19) {
  $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i;
  HEAP8[$__p$0$lcssa$i$i$i] = 0;
  STACKTOP = sp;return;
 } else {
  $$02$i$i$i = $__lo;$__p$01$i$i$i = $__p$0$ph$i$i$i;
 }
 while(1) {
  $20 = HEAP8[$$02$i$i$i]|0;
  HEAP8[$__p$01$i$i$i] = $20;
  $21 = (($$02$i$i$i) + 1|0);
  $22 = (($__p$01$i$i$i) + 1|0);
  $23 = ($21|0)==($__hi|0);
  if ($23) {
   break;
  } else {
   $__p$01$i$i$i$phi = $22;$$02$i$i$i$phi = $21;$__p$01$i$i$i = $__p$01$i$i$i$phi;$$02$i$i$i = $$02$i$i$i$phi;
  }
 }
 $24 = (0 - ($1))|0;
 $scevgep$i$i$i = (($__hi) + ($24)|0);
 $scevgep3$i$i$i = $scevgep$i$i$i;
 $scevgep4$i$i$i = (($__p$0$ph$i$i$i) + ($scevgep3$i$i$i)|0);
 $__p$0$lcssa$i$i$i = $scevgep4$i$i$i;
 HEAP8[$__p$0$lcssa$i$i$i] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__h$02$phi = 0, $__p$01 = 0, $__p$01$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__lo|0)==($__hi|0);
 if ($1) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $2 = $__h$02 << 4;
  $3 = HEAP8[$__p$01]|0;
  $4 = $3 << 24 >> 24;
  $5 = (($4) + ($2))|0;
  $6 = $5 & -268435456;
  $7 = $6 >>> 24;
  $8 = $7 | $6;
  $9 = $8 ^ $5;
  $10 = (($__p$01) + 1|0);
  $11 = ($10|0)==($__hi|0);
  if ($11) {
   $__h$0$lcssa = $9;
   break;
  } else {
   $__p$01$phi = $10;$__h$02$phi = $9;$__p$01 = $__p$01$phi;$__h$02 = $__h$02$phi;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($1) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $2 = ($$024|0)==($__hi1|0);
    if ($2) {
     $$0 = -1;
     break L1;
    }
    $3 = HEAP32[$$024>>2]|0;
    $4 = HEAP32[$$015>>2]|0;
    $5 = ($3|0)<($4|0);
    if ($5) {
     $$0 = -1;
     break L1;
    }
    $6 = ($4|0)<($3|0);
    if ($6) {
     $$0 = 1;
     break L1;
    }
    $7 = (($$024) + 4|0);
    $8 = (($$015) + 4|0);
    $9 = ($8|0)==($__hi2|0);
    if ($9) {
     $$02$lcssa = $7;
     label = 6;
     break;
    } else {
     $$015 = $8;$$024 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $10 = ($$02$lcssa|0)!=($__hi1|0);
  $11 = $10&1;
  $$0 = $11;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $$02$i$i$i = 0, $$02$i$i$i$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa$i$i$i = 0, $__p$0$ph$i$i$i = 0, $__p$01$i$i$i = 0, $__p$01$i$i$i$phi = 0, $scevgep$i$i$i = 0, $scevgep3$i$i$i = 0, $scevgep5$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep4$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = $__lo;
 $2 = $__hi;
 $3 = (($2) - ($1))|0;
 $4 = $3 >> 2;
 $5 = ($4>>>0)>(1073741807);
 if ($5) {
  $6 = $agg$result;
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($6);
 }
 $7 = ($4>>>0)<(2);
 if ($7) {
  $8 = $3 >>> 1;
  $9 = $8&255;
  $10 = $agg$result;
  HEAP8[$10] = $9;
  $11 = (($agg$result) + 4|0);
  $__p$0$ph$i$i$i = $11;
 } else {
  $12 = (($4) + 4)|0;
  $13 = $12 & -4;
  $14 = $13 << 2;
  $15 = (__Znwj($14)|0);
  $16 = $15;
  $17 = (($agg$result) + 8|0);
  HEAP32[$17>>2] = $16;
  $18 = $13 | 1;
  $19 = ($agg$result);
  HEAP32[$19>>2] = $18;
  $20 = (($agg$result) + 4|0);
  HEAP32[$20>>2] = $4;
  $__p$0$ph$i$i$i = $16;
 }
 $21 = ($__lo|0)==($__hi|0);
 if ($21) {
  $__p$0$lcssa$i$i$i = $__p$0$ph$i$i$i;
  HEAP32[$__p$0$lcssa$i$i$i>>2] = 0;
  STACKTOP = sp;return;
 }
 $scevgep$i$i$i = (($__hi) + -4|0);
 $scevgep3$i$i$i = $scevgep$i$i$i;
 $22 = (0 - ($1))|0;
 $uglygep$i$i$i = (($scevgep3$i$i$i) + ($22)|0);
 $$02$i$i$i = $__lo;$__p$01$i$i$i = $__p$0$ph$i$i$i;
 while(1) {
  $23 = HEAP32[$$02$i$i$i>>2]|0;
  HEAP32[$__p$01$i$i$i>>2] = $23;
  $24 = (($$02$i$i$i) + 4|0);
  $25 = (($__p$01$i$i$i) + 4|0);
  $26 = ($24|0)==($__hi|0);
  if ($26) {
   break;
  } else {
   $__p$01$i$i$i$phi = $25;$$02$i$i$i$phi = $24;$__p$01$i$i$i = $__p$01$i$i$i$phi;$$02$i$i$i = $$02$i$i$i$phi;
  }
 }
 $uglygep4$i$i$i = $uglygep$i$i$i;
 $27 = $uglygep4$i$i$i >>> 2;
 $28 = (($27) + 1)|0;
 $scevgep5$i$i$i = (($__p$0$ph$i$i$i) + ($28<<2)|0);
 $__p$0$lcssa$i$i$i = $scevgep5$i$i$i;
 HEAP32[$__p$0$lcssa$i$i$i>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__h$02$phi = 0, $__p$01 = 0, $__p$01$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__lo|0)==($__hi|0);
 if ($1) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $2 = $__h$02 << 4;
  $3 = HEAP32[$__p$01>>2]|0;
  $4 = (($3) + ($2))|0;
  $5 = $4 & -268435456;
  $6 = $5 >>> 24;
  $7 = $6 | $5;
  $8 = $7 ^ $4;
  $9 = (($__p$01) + 4|0);
  $10 = ($9|0)==($__hi|0);
  if ($10) {
   $__h$0$lcssa = $8;
   break;
  } else {
   $__p$01$phi = $9;$__h$02$phi = $8;$__p$01 = $__p$01$phi;$__h$02 = $__h$02$phi;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $137$phi = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lv = 0, $__names = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 136|0;
 $$byval_copy2 = sp;
 $$byval_copy1 = sp + 8|0;
 $$byval_copy = sp + 16|0;
 $__p$i$i$i$i4 = sp + 24|0;
 $__p$i$i$i$i = sp + 40|0;
 $__lv = sp + 56|0;
 $1 = sp + 64|0;
 $2 = sp + 72|0;
 $3 = sp + 80|0;
 $4 = sp + 88|0;
 $5 = sp + 96|0;
 $__names = sp + 104|0;
 $6 = sp + 128|0;
 $7 = (($__iob) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  HEAP32[$__lv>>2] = -1;
  $11 = $this;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($__b);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($2);
  HEAP32[$17>>2] = $16;
  $18 = ($__e);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($3);
  HEAP32[$20>>2] = $19;
  $21 = $$byval_copy;
  $22 = $$byval_copy;
  $23 = $2;
  ;HEAP32[$22+0>>2]=HEAP32[$23+0>>2]|0;
  $24 = $$byval_copy1;
  $25 = $$byval_copy1;
  $26 = $3;
  ;HEAP32[$25+0>>2]=HEAP32[$26+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$14 & 63]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv);
  $27 = $$byval_copy1;
  $28 = $$byval_copy;
  $29 = ($1);
  $30 = HEAP32[$29>>2]|0;
  HEAP32[$15>>2] = $30;
  $31 = HEAP32[$__lv>>2]|0;
  if ((($31|0) == 1)) {
   HEAP8[$__v] = 1;
  } else if ((($31|0) == 0)) {
   HEAP8[$__v] = 0;
  } else {
   HEAP8[$__v] = 1;
   HEAP32[$__err>>2] = 4;
  }
  $32 = ($agg$result);
  HEAP32[$32>>2] = $30;
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($4,$__iob);
 $33 = ($4);
 $34 = HEAP32[$33>>2]|0;
 $35 = $__p$i$i$i$i;
 $36 = HEAP32[((9136))>>2]|0;
 $37 = ($36|0)==(-1);
 if ($37) {
  label = 9;
 } else {
  $38 = ($__p$i$i$i$i);
  HEAP32[$38>>2] = (9136);
  $39 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$39>>2] = (183);
  $40 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$40>>2] = 0;
  __THREW__ = 0;
  invoke_viii(25,(((9136))|0),($35|0),(184|0));
  $41 = __THREW__; __THREW__ = 0;
  $42 = $41&1;
  if (!($42)) {
   label = 9;
  }
 }
 do {
  if ((label|0) == 9) {
   $43 = HEAP32[(((9136) + 4|0))>>2]|0;
   $44 = (($43) + -1)|0;
   $45 = (($34) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($34) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $46;
   $50 = $48;
   $51 = (($49) - ($50))|0;
   $52 = $51 >> 2;
   $53 = ($52>>>0)>($44>>>0);
   do {
    if ($53) {
     $54 = (($48) + ($44<<2)|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==(0|0);
     if ($56) {
      break;
     }
     $61 = $55;
     $62 = HEAP32[$33>>2]|0;
     $63 = ($62);
     (__ZNSt3__114__shared_count16__release_sharedEv($63)|0);
     __ZNKSt3__18ios_base6getlocEv($5,$__iob);
     $64 = ($5);
     $65 = HEAP32[$64>>2]|0;
     $66 = $__p$i$i$i$i4;
     $67 = HEAP32[((9280))>>2]|0;
     $68 = ($67|0)==(-1);
     if ($68) {
      label = 15;
     } else {
      $69 = ($__p$i$i$i$i4);
      HEAP32[$69>>2] = (9280);
      $70 = (($__p$i$i$i$i4) + 4|0);
      HEAP32[$70>>2] = (183);
      $71 = (($__p$i$i$i$i4) + 8|0);
      HEAP32[$71>>2] = 0;
      __THREW__ = 0;
      invoke_viii(25,(((9280))|0),($66|0),(184|0));
      $72 = __THREW__; __THREW__ = 0;
      $73 = $72&1;
      if (!($73)) {
       label = 15;
      }
     }
     do {
      if ((label|0) == 15) {
       $74 = HEAP32[(((9280) + 4|0))>>2]|0;
       $75 = (($74) + -1)|0;
       $76 = (($65) + 12|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = (($65) + 8|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = $77;
       $81 = $79;
       $82 = (($80) - ($81))|0;
       $83 = $82 >> 2;
       $84 = ($83>>>0)>($75>>>0);
       do {
        if ($84) {
         $85 = (($79) + ($75<<2)|0);
         $86 = HEAP32[$85>>2]|0;
         $87 = ($86|0)==(0|0);
         if ($87) {
          break;
         }
         $92 = $86;
         $93 = HEAP32[$64>>2]|0;
         $94 = ($93);
         (__ZNSt3__114__shared_count16__release_sharedEv($94)|0);
         $95 = ($__names);
         $96 = $86;
         $97 = HEAP32[$96>>2]|0;
         $98 = (($97) + 24|0);
         $99 = HEAP32[$98>>2]|0;
         __THREW__ = 0;
         invoke_vii($99|0,($95|0),($92|0));
         $100 = __THREW__; __THREW__ = 0;
         $101 = $100&1;
         do {
          if ($101) {
           $$02 = $95;
          } else {
           $102 = (($__names) + 12|0);
           $103 = HEAP32[$96>>2]|0;
           $104 = (($103) + 28|0);
           $105 = HEAP32[$104>>2]|0;
           __THREW__ = 0;
           invoke_vii($105|0,($102|0),($92|0));
           $106 = __THREW__; __THREW__ = 0;
           $107 = $106&1;
           if ($107) {
            $$02 = $102;
            break;
           }
           $108 = ($__e);
           $109 = HEAP32[$108>>2]|0;
           $110 = ($6);
           HEAP32[$110>>2] = $109;
           $111 = (($__names) + 24|0);
           __THREW__ = 0;
           $112 = $$byval_copy2;
           $113 = $$byval_copy2;
           $114 = $6;
           ;HEAP32[$113+0>>2]=HEAP32[$114+0>>2]|0;
           $115 = (invoke_iiiiiiii(2,($__b|0),($$byval_copy2|0),($95|0),($111|0),($61|0),($__err|0),1)|0);
           $116 = $$byval_copy2;
           $117 = __THREW__; __THREW__ = 0;
           $118 = $117&1;
           if ($118) {
            $140 = ___cxa_find_matching_catch(-1,-1)|0;
            $141 = tempRet0;
            $142 = (($__names) + 12|0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($142);
            $143 = ($__names);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($143);
            $$0 = $140;$$01 = $141;
            ___resumeException($$0|0);
            // unreachable;
           } else {
            $119 = ($115|0)==($95|0);
            $120 = $119&1;
            HEAP8[$__v] = $120;
            $121 = ($__b);
            $122 = HEAP32[$121>>2]|0;
            $123 = ($agg$result);
            HEAP32[$123>>2] = $122;
            $124 = (($__names) + 12|0);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($124);
            $125 = ($__names);
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($125);
            STACKTOP = sp;return;
           }
          }
         } while(0);
         $134 = ___cxa_find_matching_catch(-1,-1)|0;
         $135 = tempRet0;
         $136 = ($95|0)==($$02|0);
         if ($136) {
          $$0 = $134;$$01 = $135;
          ___resumeException($$0|0);
          // unreachable;
         } else {
          $137 = $$02;
         }
         while(1) {
          $138 = (($137) + -12|0);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($138);
          $139 = ($138|0)==($95|0);
          if ($139) {
           $$0 = $134;$$01 = $135;
           break;
          } else {
           $137$phi = $138;$137 = $137$phi;
          }
         }
         ___resumeException($$0|0);
         // unreachable;
        }
       } while(0);
       $88 = (___cxa_allocate_exception(4)|0);
       $89 = $88;
       __ZNSt8bad_castC2Ev($89);
       __THREW__ = 0;
       invoke_viii(12,($88|0),((17096)|0),((143)|0));
       $90 = __THREW__; __THREW__ = 0;
       $91 = $90&1;
       if ($91) {
        break;
       }
       // unreachable;
      }
     } while(0);
     $130 = ___cxa_find_matching_catch(-1,-1)|0;
     $131 = tempRet0;
     $132 = HEAP32[$64>>2]|0;
     $133 = ($132);
     (__ZNSt3__114__shared_count16__release_sharedEv($133)|0);
     $$0 = $130;$$01 = $131;
     ___resumeException($$0|0);
     // unreachable;
    }
   } while(0);
   $57 = (___cxa_allocate_exception(4)|0);
   $58 = $57;
   __ZNSt8bad_castC2Ev($58);
   __THREW__ = 0;
   invoke_viii(12,($57|0),((17096)|0),((143)|0));
   $59 = __THREW__; __THREW__ = 0;
   $60 = $59&1;
   if ($60) {
    break;
   }
   // unreachable;
  }
 } while(0);
 $126 = ___cxa_find_matching_catch(-1,-1)|0;
 $127 = tempRet0;
 $128 = HEAP32[$33>>2]|0;
 $129 = ($128);
 (__ZNSt3__114__shared_count16__release_sharedEv($129)|0);
 $$0 = $126;$$01 = $127;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0$i$i = 0, $$024 = 0, $$02680 = 0, $$02680$phi = 0, $$index = 0, $$index10 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i12 = 0, $$pre$i2$i$i16 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off035 = 0, $__consume$0$off035$us = 0, $__consume$1$off0 = 0, $__consume$1$off0$us = 0, $__indx$0 = 0, $__ky$064 = 0, $__ky1$036 = 0, $__ky1$036$us = 0, $__ky2$047 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$062 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0;
 var $__n_does_match$2$phi = 0, $__n_does_match$3$lcssa = 0, $__n_does_match$332 = 0, $__n_does_match$332$us = 0, $__n_does_match$4 = 0, $__n_does_match$4$us = 0, $__n_does_match$545 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$061 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$2$phi = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$331 = 0, $__n_might_match$331$us = 0, $__n_might_match$4 = 0, $__n_might_match$4$us = 0, $__st$063 = 0, $__st$133 = 0;
 var $__st$133$us = 0, $__st$246 = 0, $__st$32581 = 0, $__st$32581$phi = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $tmp$i$i = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 104|0;
 $__statbuf = sp;
 $1 = $__ke;
 $2 = $__kb;
 $3 = (($1) - ($2))|0;
 $4 = (($3|0) / 12)&-1;
 $5 = ($__statbuf);
 $6 = ($4>>>0)>(100);
 do {
  if ($6) {
   $7 = (_malloc($4)|0);
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    $23 = $7;$__status$0 = $7;
    break;
   }
   __THREW__ = 0;
   invoke_v(7);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $23 = 0;$__status$0 = 0;
    break;
   }
   $11 = ___cxa_find_matching_catch(-1,-1)|0;
   $12 = tempRet0;
   $$index = $11;$$index10 = $12;
   ___resumeException($$index|0);
   // unreachable;
  } else {
   $23 = 0;$__status$0 = $5;
  }
 } while(0);
 $24 = ($__kb|0)==($__ke|0);
 if ($24) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $4;
 } else {
  $__ky$064 = $__kb;$__n_does_match$062 = 0;$__n_might_match$061 = $4;$__st$063 = $__status$0;
  while(1) {
   $28 = $__ky$064;
   $29 = HEAP8[$28]|0;
   $30 = $29 & 1;
   $31 = ($30<<24>>24)==(0);
   if ($31) {
    $34 = $29&255;
    $35 = $34 >>> 1;
    $36 = $35;
   } else {
    $32 = (($__ky$064) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $36 = $33;
   }
   $37 = ($36|0)==(0);
   if ($37) {
    HEAP8[$__st$063] = 2;
    $38 = (($__n_might_match$061) + -1)|0;
    $39 = (($__n_does_match$062) + 1)|0;
    $__n_does_match$1 = $39;$__n_might_match$1 = $38;
   } else {
    HEAP8[$__st$063] = 1;
    $__n_does_match$1 = $__n_does_match$062;$__n_might_match$1 = $__n_might_match$061;
   }
   $40 = (($__ky$064) + 12|0);
   $41 = (($__st$063) + 1|0);
   $42 = ($40|0)==($__ke|0);
   if ($42) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$064 = $40;$__n_does_match$062 = $__n_does_match$1;$__n_might_match$061 = $__n_might_match$1;$__st$063 = $41;
   }
  }
 }
 $25 = ($__b);
 $26 = ($__e);
 $27 = $__ct;
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L19: while(1) {
  $43 = HEAP32[$25>>2]|0;
  $44 = ($43|0)==(0|0);
  do {
   if ($44) {
    $58 = 0;
   } else {
    $45 = (($43) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (($43) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($46|0)==($48|0);
    if (!($49)) {
     $58 = $43;
     break;
    }
    $50 = $43;
    $51 = HEAP32[$50>>2]|0;
    $52 = (($51) + 36|0);
    $53 = HEAP32[$52>>2]|0;
    __THREW__ = 0;
    $54 = (invoke_ii($53|0,($43|0))|0);
    $55 = __THREW__; __THREW__ = 0;
    $56 = $55&1;
    if ($56) {
     label = 6;
     break L19;
    }
    $57 = ($54|0)==(-1);
    if ($57) {
     HEAP32[$25>>2] = 0;
     $58 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$25>>2]|0;
     $58 = $$pre$i$i$i;
     break;
    }
   }
  } while(0);
  $59 = ($58|0)==(0|0);
  $60 = HEAP32[$26>>2]|0;
  $61 = ($60|0)==(0|0);
  do {
   if ($61) {
    $$pre$i2$i$i16 = 0;
   } else {
    $62 = (($60) + 12|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($60) + 16|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($63|0)==($65|0);
    if (!($66)) {
     $$pre$i2$i$i16 = $60;
     break;
    }
    $67 = $60;
    $68 = HEAP32[$67>>2]|0;
    $69 = (($68) + 36|0);
    $70 = HEAP32[$69>>2]|0;
    __THREW__ = 0;
    $71 = (invoke_ii($70|0,($60|0))|0);
    $72 = __THREW__; __THREW__ = 0;
    $73 = $72&1;
    if ($73) {
     label = 6;
     break L19;
    }
    $74 = ($71|0)==(-1);
    if (!($74)) {
     $$pre$i2$i$i16 = $60;
     break;
    }
    HEAP32[$26>>2] = 0;
    $$pre$i2$i$i16 = 0;
   }
  } while(0);
  $75 = ($$pre$i2$i$i16|0)==(0|0);
  $tmp$i$i = $59 ^ $75;
  $76 = ($__n_might_match$2|0)!=(0);
  $$ = $tmp$i$i & $76;
  $77 = HEAP32[$25>>2]|0;
  if (!($$)) {
   label = 79;
   break;
  }
  $78 = (($77) + 12|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (($77) + 16|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = ($79|0)==($81|0);
  if ($82) {
   $83 = $77;
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) + 36|0);
   $86 = HEAP32[$85>>2]|0;
   __THREW__ = 0;
   $87 = (invoke_ii($86|0,($77|0))|0);
   $88 = __THREW__; __THREW__ = 0;
   $89 = $88&1;
   if ($89) {
    label = 6;
    break;
   } else {
    $$0$i$i = $87;
   }
  } else {
   $90 = HEAP8[$79]|0;
   $91 = $90&255;
   $$0$i$i = $91;
  }
  $92 = $$0$i$i&255;
  if ($__case_sensitive) {
   $__c$0 = $92;
  } else {
   $93 = HEAP32[$27>>2]|0;
   $94 = (($93) + 12|0);
   $95 = HEAP32[$94>>2]|0;
   __THREW__ = 0;
   $96 = (invoke_iii($95|0,($__ct|0),($92|0))|0);
   $97 = __THREW__; __THREW__ = 0;
   $98 = $97&1;
   if ($98) {
    label = 6;
    break;
   } else {
    $__c$0 = $96;
   }
  }
  $$pre = (($__indx$0) + 1)|0;
  if ($24) {
   $__n_might_match$2$phi = $__n_might_match$2;$__n_does_match$2$phi = $__n_does_match$2;$__indx$0 = $$pre;$__n_might_match$2 = $__n_might_match$2$phi;$__n_does_match$2 = $__n_does_match$2$phi;
   continue;
  }
  L44: do {
   if ($__case_sensitive) {
    $__consume$0$off035$us = 0;$__ky1$036$us = $__kb;$__n_does_match$332$us = $__n_does_match$2;$__n_might_match$331$us = $__n_might_match$2;$__st$133$us = $__status$0;
    while(1) {
     $99 = HEAP8[$__st$133$us]|0;
     $100 = ($99<<24>>24)==(1);
     do {
      if ($100) {
       $101 = $__ky1$036$us;
       $102 = HEAP8[$101]|0;
       $103 = $102 & 1;
       $104 = ($103<<24>>24)==(0);
       if ($104) {
        $107 = $__ky1$036$us;
        $108 = (($107) + 1|0);
        $109 = $108;
       } else {
        $105 = (($__ky1$036$us) + 8|0);
        $106 = HEAP32[$105>>2]|0;
        $109 = $106;
       }
       $110 = (($109) + ($__indx$0)|0);
       $111 = HEAP8[$110]|0;
       $112 = ($__c$0<<24>>24)==($111<<24>>24);
       if (!($112)) {
        HEAP8[$__st$133$us] = 0;
        $113 = (($__n_might_match$331$us) + -1)|0;
        $__consume$1$off0$us = $__consume$0$off035$us;$__n_does_match$4$us = $__n_does_match$332$us;$__n_might_match$4$us = $113;
        break;
       }
       if ($104) {
        $116 = $102&255;
        $117 = $116 >>> 1;
        $118 = $117;
       } else {
        $114 = (($__ky1$036$us) + 4|0);
        $115 = HEAP32[$114>>2]|0;
        $118 = $115;
       }
       $119 = ($118|0)==($$pre|0);
       if (!($119)) {
        $__consume$1$off0$us = 1;$__n_does_match$4$us = $__n_does_match$332$us;$__n_might_match$4$us = $__n_might_match$331$us;
        break;
       }
       HEAP8[$__st$133$us] = 2;
       $120 = (($__n_might_match$331$us) + -1)|0;
       $121 = (($__n_does_match$332$us) + 1)|0;
       $__consume$1$off0$us = 1;$__n_does_match$4$us = $121;$__n_might_match$4$us = $120;
      } else {
       $__consume$1$off0$us = $__consume$0$off035$us;$__n_does_match$4$us = $__n_does_match$332$us;$__n_might_match$4$us = $__n_might_match$331$us;
      }
     } while(0);
     $122 = (($__ky1$036$us) + 12|0);
     $123 = ($122|0)==($__ke|0);
     if ($123) {
      $__consume$0$off0$lcssa = $__consume$1$off0$us;$__n_does_match$3$lcssa = $__n_does_match$4$us;$__n_might_match$3$lcssa = $__n_might_match$4$us;
      break L44;
     }
     $124 = (($__st$133$us) + 1|0);
     $__consume$0$off035$us = $__consume$1$off0$us;$__ky1$036$us = $122;$__n_does_match$332$us = $__n_does_match$4$us;$__n_might_match$331$us = $__n_might_match$4$us;$__st$133$us = $124;
    }
   } else {
    $__consume$0$off035 = 0;$__ky1$036 = $__kb;$__n_does_match$332 = $__n_does_match$2;$__n_might_match$331 = $__n_might_match$2;$__st$133 = $__status$0;
    while(1) {
     $125 = HEAP8[$__st$133]|0;
     $126 = ($125<<24>>24)==(1);
     do {
      if ($126) {
       $127 = $__ky1$036;
       $128 = HEAP8[$127]|0;
       $129 = $128 & 1;
       $130 = ($129<<24>>24)==(0);
       if ($130) {
        $133 = $__ky1$036;
        $134 = (($133) + 1|0);
        $135 = $134;
       } else {
        $131 = (($__ky1$036) + 8|0);
        $132 = HEAP32[$131>>2]|0;
        $135 = $132;
       }
       $136 = (($135) + ($__indx$0)|0);
       $137 = HEAP8[$136]|0;
       $138 = HEAP32[$27>>2]|0;
       $139 = (($138) + 12|0);
       $140 = HEAP32[$139>>2]|0;
       __THREW__ = 0;
       $141 = (invoke_iii($140|0,($__ct|0),($137|0))|0);
       $142 = __THREW__; __THREW__ = 0;
       $143 = $142&1;
       if ($143) {
        label = 5;
        break L19;
       }
       $144 = ($__c$0<<24>>24)==($141<<24>>24);
       if (!($144)) {
        HEAP8[$__st$133] = 0;
        $156 = (($__n_might_match$331) + -1)|0;
        $__consume$1$off0 = $__consume$0$off035;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $156;
        break;
       }
       $145 = HEAP8[$127]|0;
       $146 = $145 & 1;
       $147 = ($146<<24>>24)==(0);
       if ($147) {
        $150 = $145&255;
        $151 = $150 >>> 1;
        $152 = $151;
       } else {
        $148 = (($__ky1$036) + 4|0);
        $149 = HEAP32[$148>>2]|0;
        $152 = $149;
       }
       $153 = ($152|0)==($$pre|0);
       if (!($153)) {
        $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $__n_might_match$331;
        break;
       }
       HEAP8[$__st$133] = 2;
       $154 = (($__n_might_match$331) + -1)|0;
       $155 = (($__n_does_match$332) + 1)|0;
       $__consume$1$off0 = 1;$__n_does_match$4 = $155;$__n_might_match$4 = $154;
      } else {
       $__consume$1$off0 = $__consume$0$off035;$__n_does_match$4 = $__n_does_match$332;$__n_might_match$4 = $__n_might_match$331;
      }
     } while(0);
     $157 = (($__ky1$036) + 12|0);
     $158 = ($157|0)==($__ke|0);
     if ($158) {
      $__consume$0$off0$lcssa = $__consume$1$off0;$__n_does_match$3$lcssa = $__n_does_match$4;$__n_might_match$3$lcssa = $__n_might_match$4;
      break L44;
     }
     $159 = (($__st$133) + 1|0);
     $__consume$0$off035 = $__consume$1$off0;$__ky1$036 = $157;$__n_does_match$332 = $__n_does_match$4;$__n_might_match$331 = $__n_might_match$4;$__st$133 = $159;
    }
   }
  } while(0);
  if (!($__consume$0$off0$lcssa)) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  }
  $160 = HEAP32[$25>>2]|0;
  $161 = (($160) + 12|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (($160) + 16|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = ($162|0)==($164|0);
  if ($165) {
   $166 = $160;
   $167 = HEAP32[$166>>2]|0;
   $168 = (($167) + 40|0);
   $169 = HEAP32[$168>>2]|0;
   __THREW__ = 0;
   (invoke_ii($169|0,($160|0))|0);
   $170 = __THREW__; __THREW__ = 0;
   $171 = $170&1;
   if ($171) {
    label = 6;
    break;
   }
  } else {
   $172 = (($162) + 1|0);
   HEAP32[$161>>2] = $172;
  }
  $173 = (($__n_might_match$3$lcssa) + ($__n_does_match$3$lcssa))|0;
  $$not = ($173>>>0)<(2);
  if ($$not) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  } else {
   $__ky2$047 = $__kb;$__n_does_match$545 = $__n_does_match$3$lcssa;$__st$246 = $__status$0;
  }
  while(1) {
   $174 = HEAP8[$__st$246]|0;
   $175 = ($174<<24>>24)==(2);
   do {
    if ($175) {
     $176 = $__ky2$047;
     $177 = HEAP8[$176]|0;
     $178 = $177 & 1;
     $179 = ($178<<24>>24)==(0);
     if ($179) {
      $182 = $177&255;
      $183 = $182 >>> 1;
      $184 = $183;
     } else {
      $180 = (($__ky2$047) + 4|0);
      $181 = HEAP32[$180>>2]|0;
      $184 = $181;
     }
     $185 = ($184|0)==($$pre|0);
     if ($185) {
      $__n_does_match$6 = $__n_does_match$545;
      break;
     }
     HEAP8[$__st$246] = 0;
     $186 = (($__n_does_match$545) + -1)|0;
     $__n_does_match$6 = $186;
    } else {
     $__n_does_match$6 = $__n_does_match$545;
    }
   } while(0);
   $187 = (($__ky2$047) + 12|0);
   $188 = (($__st$246) + 1|0);
   $189 = ($187|0)==($__ke|0);
   if ($189) {
    $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3$lcssa;
    continue L19;
   } else {
    $__ky2$047 = $187;$__n_does_match$545 = $__n_does_match$6;$__st$246 = $188;
   }
  }
 }
 if ((label|0) == 5) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  $lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 else if ((label|0) == 6) {
  $15 = ___cxa_find_matching_catch(-1,-1)|0;
  $16 = tempRet0;
  $lpad$phi$index = $15;$lpad$phi$index3 = $16;
 }
 else if ((label|0) == 79) {
  $190 = ($77|0)==(0|0);
  do {
   if ($190) {
    $204 = 0;
    label = 85;
   } else {
    $191 = (($77) + 12|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = (($77) + 16|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = ($192|0)==($194|0);
    if (!($195)) {
     $204 = $77;
     label = 85;
     break;
    }
    $196 = $77;
    $197 = HEAP32[$196>>2]|0;
    $198 = (($197) + 36|0);
    $199 = HEAP32[$198>>2]|0;
    __THREW__ = 0;
    $200 = (invoke_ii($199|0,($77|0))|0);
    $201 = __THREW__; __THREW__ = 0;
    $202 = $201&1;
    if ($202) {
     break;
    }
    $203 = ($200|0)==(-1);
    if ($203) {
     HEAP32[$25>>2] = 0;
     $204 = 0;
     label = 85;
     break;
    } else {
     $$pre$i$i$i12 = HEAP32[$25>>2]|0;
     $204 = $$pre$i$i$i12;
     label = 85;
     break;
    }
   }
  } while(0);
  L108: do {
   if ((label|0) == 85) {
    $205 = ($204|0)==(0|0);
    do {
     if ($75) {
      label = 91;
     } else {
      $206 = (($$pre$i2$i$i16) + 12|0);
      $207 = HEAP32[$206>>2]|0;
      $208 = (($$pre$i2$i$i16) + 16|0);
      $209 = HEAP32[$208>>2]|0;
      $210 = ($207|0)==($209|0);
      if (!($210)) {
       if ($205) {
        break;
       } else {
        label = 93;
        break;
       }
      }
      $211 = $$pre$i2$i$i16;
      $212 = HEAP32[$211>>2]|0;
      $213 = (($212) + 36|0);
      $214 = HEAP32[$213>>2]|0;
      __THREW__ = 0;
      $215 = (invoke_ii($214|0,($$pre$i2$i$i16|0))|0);
      $216 = __THREW__; __THREW__ = 0;
      $217 = $216&1;
      if ($217) {
       break L108;
      }
      $218 = ($215|0)==(-1);
      if ($218) {
       HEAP32[$26>>2] = 0;
       label = 91;
       break;
      } else {
       if ($205) {
        break;
       } else {
        label = 93;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 91) {
     if ($205) {
      label = 93;
     }
    }
    if ((label|0) == 93) {
     $219 = HEAP32[$__err>>2]|0;
     $220 = $219 | 2;
     HEAP32[$__err>>2] = $220;
    }
    L124: do {
     if ($24) {
      label = 98;
     } else {
      $221 = HEAP8[$__status$0]|0;
      $222 = ($221<<24>>24)==(2);
      if ($222) {
       $$024 = $__kb;
       break;
      } else {
       $$02680 = $__kb;$__st$32581 = $__status$0;
      }
      while(1) {
       $225 = (($$02680) + 12|0);
       $226 = ($225|0)==($__ke|0);
       $227 = (($__st$32581) + 1|0);
       if ($226) {
        label = 98;
        break L124;
       }
       $223 = HEAP8[$227]|0;
       $224 = ($223<<24>>24)==(2);
       if ($224) {
        $$024 = $225;
        break;
       } else {
        $__st$32581$phi = $227;$$02680$phi = $225;$__st$32581 = $__st$32581$phi;$$02680 = $$02680$phi;
       }
      }
     }
    } while(0);
    if ((label|0) == 98) {
     $228 = HEAP32[$__err>>2]|0;
     $229 = $228 | 4;
     HEAP32[$__err>>2] = $229;
     $$024 = $__ke;
    }
    $230 = ($23|0)==(0|0);
    if ($230) {
     STACKTOP = sp;return ($$024|0);
    }
    __THREW__ = 0;
    invoke_vi(185,($23|0));
    $231 = __THREW__; __THREW__ = 0;
    $232 = $231&1;
    if ($232) {
     $233 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$1 = tempRet0;
     ___clang_call_terminate($233);
     // unreachable;
    } else {
     STACKTOP = sp;return ($$024|0);
    }
   }
  } while(0);
  $17 = ___cxa_find_matching_catch(-1,-1)|0;
  $18 = tempRet0;
  $lpad$phi$index = $17;$lpad$phi$index3 = $18;
 }
 $19 = ($23|0)==(0|0);
 if ($19) {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(185,($23|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $3 = ($__b);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1);
 HEAP32[$5>>2] = $4;
 $6 = ($__e);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($2);
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 $16 = $$byval_copy;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre30 = 0, $$pre31 = 0, $$pre33 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0;
 var $this2$i$i$i = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $__atoms = sp;
 $__thousands_sep = sp + 32|0;
 $__grouping = sp + 40|0;
 $__buf = sp + 56|0;
 $__a_end = sp + 72|0;
 $__g = sp + 80|0;
 $__g_end = sp + 240|0;
 $__dc = sp + 248|0;
 $1 = (($__iob) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 if ((($3|0) == 0)) {
  $$0$i = 0;
 } else if ((($3|0) == 8)) {
  $$0$i = 16;
 } else if ((($3|0) == 64)) {
  $$0$i = 8;
 } else {
  $$0$i = 10;
 }
 $4 = ($__atoms);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$4,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(13,($__buf|0),10,0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L6: do {
  if (!($6)) {
   $7 = HEAP8[$this2$i$i$i]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = $__buf;
    $13 = (($12) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $13;$$pre$phi34Z2D = $$pre33;$14 = $13;
   } else {
    $10 = (($__buf) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre30 = $__buf;
    $$pre31 = (($$pre30) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $10;$14 = $11;
   }
   HEAP32[$__a_end>>2] = $14;
   $15 = $__g;
   $16 = ($__g);
   HEAP32[$__g_end>>2] = $16;
   HEAP32[$__dc>>2] = 0;
   $17 = ($__b);
   $18 = ($__e);
   $19 = ($__buf);
   $20 = (($__buf) + 4|0);
   $21 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$17>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $14;
   L12: while(1) {
    $22 = ($$pre$i$i$i4|0)==(0|0);
    do {
     if ($22) {
      $36 = 0;
     } else {
      $23 = (($$pre$i$i$i4) + 12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (($$pre$i$i$i4) + 16|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($24|0)==($26|0);
      if (!($27)) {
       $36 = $$pre$i$i$i4;
       break;
      }
      $28 = $$pre$i$i$i4;
      $29 = HEAP32[$28>>2]|0;
      $30 = (($29) + 36|0);
      $31 = HEAP32[$30>>2]|0;
      __THREW__ = 0;
      $32 = (invoke_ii($31|0,($$pre$i$i$i4|0))|0);
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       label = 37;
       break L12;
      }
      $35 = ($32|0)==(-1);
      if (!($35)) {
       $36 = $$pre$i$i$i4;
       break;
      }
      HEAP32[$17>>2] = 0;
      $36 = 0;
     }
    } while(0);
    $37 = ($36|0)==(0|0);
    $38 = HEAP32[$18>>2]|0;
    $39 = ($38|0)==(0|0);
    do {
     if ($39) {
      label = 21;
     } else {
      $40 = (($38) + 12|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (($38) + 16|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($41|0)==($43|0);
      if (!($44)) {
       if ($37) {
        $53 = $38;
        break;
       } else {
        $$pre$i2$i$i = $38;$__a$2 = $__a$0;
        break L12;
       }
      }
      $45 = $38;
      $46 = HEAP32[$45>>2]|0;
      $47 = (($46) + 36|0);
      $48 = HEAP32[$47>>2]|0;
      __THREW__ = 0;
      $49 = (invoke_ii($48|0,($38|0))|0);
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      if ($51) {
       label = 37;
       break L12;
      }
      $52 = ($49|0)==(-1);
      if ($52) {
       HEAP32[$18>>2] = 0;
       label = 21;
       break;
      } else {
       if ($37) {
        $53 = $38;
        break;
       } else {
        $$pre$i2$i$i = $38;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     if ($37) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $53 = 0;
     }
    }
    $54 = HEAP32[$__a_end>>2]|0;
    $55 = $54;
    $56 = $__a$0;
    $57 = (($55) - ($56))|0;
    $58 = HEAP8[$this2$i$i$i]|0;
    $59 = $58 & 1;
    $60 = ($59<<24>>24)==(0);
    if ($60) {
     $62 = $58&255;
     $63 = $62 >>> 1;
     $64 = $63;
    } else {
     $61 = HEAP32[$20>>2]|0;
     $64 = $61;
    }
    $65 = ($57|0)==($64|0);
    if ($65) {
     if ($60) {
      $67 = $58&255;
      $68 = $67 >>> 1;
      $69 = $58&255;
      $70 = $69 >>> 1;
      $71 = $68;$72 = $70;
     } else {
      $66 = HEAP32[$20>>2]|0;
      $71 = $66;$72 = $66;
     }
     $73 = $72 << 1;
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($73|0),0);
     $74 = __THREW__; __THREW__ = 0;
     $75 = $74&1;
     if ($75) {
      label = 37;
      break;
     }
     $76 = HEAP8[$this2$i$i$i]|0;
     $77 = $76 & 1;
     $78 = ($77<<24>>24)==(0);
     if ($78) {
      $81 = 10;
     } else {
      $79 = HEAP32[$19>>2]|0;
      $80 = $79 & -2;
      $phitmp$i19 = (($80) + -1)|0;
      $81 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($81|0),0);
     $82 = __THREW__; __THREW__ = 0;
     $83 = $82&1;
     if ($83) {
      label = 37;
      break;
     }
     $84 = HEAP8[$this2$i$i$i]|0;
     $85 = $84 & 1;
     $86 = ($85<<24>>24)==(0);
     if ($86) {
      $88 = $$pre$phi32Z2D;
     } else {
      $87 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $88 = $87;
     }
     $89 = (($88) + ($71)|0);
     HEAP32[$__a_end>>2] = $89;
     $__a$1 = $88;
    } else {
     $__a$1 = $__a$0;
    }
    $94 = (($36) + 12|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($36) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95|0)==($97|0);
    if ($98) {
     $99 = $36;
     $100 = HEAP32[$99>>2]|0;
     $101 = (($100) + 36|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     $103 = (invoke_ii($102|0,($36|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 37;
      break;
     } else {
      $$0$i$i = $103;
     }
    } else {
     $106 = HEAP8[$95]|0;
     $107 = $106&255;
     $$0$i$i = $107;
    }
    $108 = $$0$i$i&255;
    $109 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($108,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$16,$__g_end,$4)|0);
    $110 = ($109|0)==(0);
    if (!($110)) {
     $$pre$i2$i$i = $53;$__a$2 = $__a$1;
     break;
    }
    $111 = HEAP32[$94>>2]|0;
    $112 = HEAP32[$96>>2]|0;
    $113 = ($111|0)==($112|0);
    if ($113) {
     $114 = $36;
     $115 = HEAP32[$114>>2]|0;
     $116 = (($115) + 40|0);
     $117 = HEAP32[$116>>2]|0;
     __THREW__ = 0;
     (invoke_ii($117|0,($36|0))|0);
     $118 = __THREW__; __THREW__ = 0;
     $119 = $118&1;
     if ($119) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $36;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $120 = (($111) + 1|0);
     HEAP32[$94>>2] = $120;
     $$pre$i$i$i4 = $36;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $90 = ___cxa_find_matching_catch(-1,-1)|0;
    $91 = tempRet0;
    $lpad$phi$index = $90;$lpad$phi$index2 = $91;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $121 = $__grouping;
   $122 = HEAP8[$121]|0;
   $123 = $122 & 1;
   $124 = ($123<<24>>24)==(0);
   if ($124) {
    $127 = $122&255;
    $128 = $127 >>> 1;
    $129 = $128;
   } else {
    $125 = (($__grouping) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $129 = $126;
   }
   $130 = ($129|0)==(0);
   do {
    if (!($130)) {
     $131 = HEAP32[$__g_end>>2]|0;
     $132 = $131;
     $133 = $__g;
     $134 = (($132) - ($133))|0;
     $135 = ($134|0)<(160);
     if (!($135)) {
      break;
     }
     $136 = HEAP32[$__dc>>2]|0;
     $137 = (($131) + 4|0);
     HEAP32[$__g_end>>2] = $137;
     HEAP32[$131>>2] = $136;
    }
   } while(0);
   $138 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $139 = (invoke_iiiii(7,($__a$2|0),($138|0),($__err|0),($$0$i|0))|0);
   $140 = __THREW__; __THREW__ = 0;
   $141 = $140&1;
   if ($141) {
    break;
   }
   HEAP32[$__v>>2] = $139;
   $142 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$16,$142,$__err);
   $143 = ($36|0)==(0|0);
   do {
    if ($143) {
     $157 = 0;
    } else {
     $144 = (($36) + 12|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = (($36) + 16|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = ($145|0)==($147|0);
     if (!($148)) {
      $157 = $36;
      break;
     }
     $149 = $36;
     $150 = HEAP32[$149>>2]|0;
     $151 = (($150) + 36|0);
     $152 = HEAP32[$151>>2]|0;
     __THREW__ = 0;
     $153 = (invoke_ii($152|0,($36|0))|0);
     $154 = __THREW__; __THREW__ = 0;
     $155 = $154&1;
     if ($155) {
      break L6;
     }
     $156 = ($153|0)==(-1);
     if (!($156)) {
      $157 = $36;
      break;
     }
     HEAP32[$17>>2] = 0;
     $157 = 0;
    }
   } while(0);
   $158 = ($157|0)==(0|0);
   $159 = ($$pre$i2$i$i|0)==(0|0);
   do {
    if ($159) {
     label = 65;
    } else {
     $160 = (($$pre$i2$i$i) + 12|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = (($$pre$i2$i$i) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($161|0)==($163|0);
     if (!($164)) {
      if (!($158)) {
       break;
      }
      $176 = ($agg$result);
      HEAP32[$176>>2] = $157;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
     $165 = $$pre$i2$i$i;
     $166 = HEAP32[$165>>2]|0;
     $167 = (($166) + 36|0);
     $168 = HEAP32[$167>>2]|0;
     __THREW__ = 0;
     $169 = (invoke_ii($168|0,($$pre$i2$i$i|0))|0);
     $170 = __THREW__; __THREW__ = 0;
     $171 = $170&1;
     if ($171) {
      break L6;
     }
     $172 = ($169|0)==(-1);
     if ($172) {
      HEAP32[$18>>2] = 0;
      label = 65;
      break;
     }
     $173 = ($$pre$i2$i$i|0)==(0|0);
     $tmp$i$i = $158 ^ $173;
     if (!($tmp$i$i)) {
      break;
     }
     $176 = ($agg$result);
     HEAP32[$176>>2] = $157;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 65) {
     if ($158) {
      break;
     }
     $176 = ($agg$result);
     HEAP32[$176>>2] = $157;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $174 = HEAP32[$__err>>2]|0;
   $175 = $174 | 2;
   HEAP32[$__err>>2] = $175;
   $176 = ($agg$result);
   HEAP32[$176>>2] = $157;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $92 = ___cxa_find_matching_catch(-1,-1)|0;
 $93 = tempRet0;
 $lpad$phi$index = $92;$lpad$phi$index2 = $93;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $3 = ($__b);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1);
 HEAP32[$5>>2] = $4;
 $6 = ($__e);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($2);
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 $16 = $$byval_copy;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre30 = 0, $$pre31 = 0, $$pre33 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $this2$i$i$i = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $__atoms = sp;
 $__thousands_sep = sp + 32|0;
 $__grouping = sp + 40|0;
 $__buf = sp + 56|0;
 $__a_end = sp + 72|0;
 $__g = sp + 80|0;
 $__g_end = sp + 240|0;
 $__dc = sp + 248|0;
 $1 = (($__iob) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 if ((($3|0) == 64)) {
  $$0$i = 8;
 } else if ((($3|0) == 0)) {
  $$0$i = 0;
 } else if ((($3|0) == 8)) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 $4 = ($__atoms);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$4,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(13,($__buf|0),10,0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L6: do {
  if (!($6)) {
   $7 = HEAP8[$this2$i$i$i]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = $__buf;
    $13 = (($12) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $13;$$pre$phi34Z2D = $$pre33;$14 = $13;
   } else {
    $10 = (($__buf) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre30 = $__buf;
    $$pre31 = (($$pre30) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $10;$14 = $11;
   }
   HEAP32[$__a_end>>2] = $14;
   $15 = $__g;
   $16 = ($__g);
   HEAP32[$__g_end>>2] = $16;
   HEAP32[$__dc>>2] = 0;
   $17 = ($__b);
   $18 = ($__e);
   $19 = ($__buf);
   $20 = (($__buf) + 4|0);
   $21 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$17>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $14;
   L12: while(1) {
    $22 = ($$pre$i$i$i4|0)==(0|0);
    do {
     if ($22) {
      $36 = 0;
     } else {
      $23 = (($$pre$i$i$i4) + 12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (($$pre$i$i$i4) + 16|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($24|0)==($26|0);
      if (!($27)) {
       $36 = $$pre$i$i$i4;
       break;
      }
      $28 = $$pre$i$i$i4;
      $29 = HEAP32[$28>>2]|0;
      $30 = (($29) + 36|0);
      $31 = HEAP32[$30>>2]|0;
      __THREW__ = 0;
      $32 = (invoke_ii($31|0,($$pre$i$i$i4|0))|0);
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       label = 37;
       break L12;
      }
      $35 = ($32|0)==(-1);
      if (!($35)) {
       $36 = $$pre$i$i$i4;
       break;
      }
      HEAP32[$17>>2] = 0;
      $36 = 0;
     }
    } while(0);
    $37 = ($36|0)==(0|0);
    $38 = HEAP32[$18>>2]|0;
    $39 = ($38|0)==(0|0);
    do {
     if ($39) {
      label = 21;
     } else {
      $40 = (($38) + 12|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (($38) + 16|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($41|0)==($43|0);
      if (!($44)) {
       if ($37) {
        $53 = $38;
        break;
       } else {
        $$pre$i2$i$i = $38;$__a$2 = $__a$0;
        break L12;
       }
      }
      $45 = $38;
      $46 = HEAP32[$45>>2]|0;
      $47 = (($46) + 36|0);
      $48 = HEAP32[$47>>2]|0;
      __THREW__ = 0;
      $49 = (invoke_ii($48|0,($38|0))|0);
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      if ($51) {
       label = 37;
       break L12;
      }
      $52 = ($49|0)==(-1);
      if ($52) {
       HEAP32[$18>>2] = 0;
       label = 21;
       break;
      } else {
       if ($37) {
        $53 = $38;
        break;
       } else {
        $$pre$i2$i$i = $38;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     if ($37) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $53 = 0;
     }
    }
    $54 = HEAP32[$__a_end>>2]|0;
    $55 = $54;
    $56 = $__a$0;
    $57 = (($55) - ($56))|0;
    $58 = HEAP8[$this2$i$i$i]|0;
    $59 = $58 & 1;
    $60 = ($59<<24>>24)==(0);
    if ($60) {
     $62 = $58&255;
     $63 = $62 >>> 1;
     $64 = $63;
    } else {
     $61 = HEAP32[$20>>2]|0;
     $64 = $61;
    }
    $65 = ($57|0)==($64|0);
    if ($65) {
     if ($60) {
      $67 = $58&255;
      $68 = $67 >>> 1;
      $69 = $58&255;
      $70 = $69 >>> 1;
      $71 = $68;$72 = $70;
     } else {
      $66 = HEAP32[$20>>2]|0;
      $71 = $66;$72 = $66;
     }
     $73 = $72 << 1;
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($73|0),0);
     $74 = __THREW__; __THREW__ = 0;
     $75 = $74&1;
     if ($75) {
      label = 37;
      break;
     }
     $76 = HEAP8[$this2$i$i$i]|0;
     $77 = $76 & 1;
     $78 = ($77<<24>>24)==(0);
     if ($78) {
      $81 = 10;
     } else {
      $79 = HEAP32[$19>>2]|0;
      $80 = $79 & -2;
      $phitmp$i19 = (($80) + -1)|0;
      $81 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($81|0),0);
     $82 = __THREW__; __THREW__ = 0;
     $83 = $82&1;
     if ($83) {
      label = 37;
      break;
     }
     $84 = HEAP8[$this2$i$i$i]|0;
     $85 = $84 & 1;
     $86 = ($85<<24>>24)==(0);
     if ($86) {
      $88 = $$pre$phi32Z2D;
     } else {
      $87 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $88 = $87;
     }
     $89 = (($88) + ($71)|0);
     HEAP32[$__a_end>>2] = $89;
     $__a$1 = $88;
    } else {
     $__a$1 = $__a$0;
    }
    $94 = (($36) + 12|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($36) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95|0)==($97|0);
    if ($98) {
     $99 = $36;
     $100 = HEAP32[$99>>2]|0;
     $101 = (($100) + 36|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     $103 = (invoke_ii($102|0,($36|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 37;
      break;
     } else {
      $$0$i$i = $103;
     }
    } else {
     $106 = HEAP8[$95]|0;
     $107 = $106&255;
     $$0$i$i = $107;
    }
    $108 = $$0$i$i&255;
    $109 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($108,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$16,$__g_end,$4)|0);
    $110 = ($109|0)==(0);
    if (!($110)) {
     $$pre$i2$i$i = $53;$__a$2 = $__a$1;
     break;
    }
    $111 = HEAP32[$94>>2]|0;
    $112 = HEAP32[$96>>2]|0;
    $113 = ($111|0)==($112|0);
    if ($113) {
     $114 = $36;
     $115 = HEAP32[$114>>2]|0;
     $116 = (($115) + 40|0);
     $117 = HEAP32[$116>>2]|0;
     __THREW__ = 0;
     (invoke_ii($117|0,($36|0))|0);
     $118 = __THREW__; __THREW__ = 0;
     $119 = $118&1;
     if ($119) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $36;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $120 = (($111) + 1|0);
     HEAP32[$94>>2] = $120;
     $$pre$i$i$i4 = $36;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $90 = ___cxa_find_matching_catch(-1,-1)|0;
    $91 = tempRet0;
    $lpad$phi$index = $90;$lpad$phi$index2 = $91;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $121 = $__grouping;
   $122 = HEAP8[$121]|0;
   $123 = $122 & 1;
   $124 = ($123<<24>>24)==(0);
   if ($124) {
    $127 = $122&255;
    $128 = $127 >>> 1;
    $129 = $128;
   } else {
    $125 = (($__grouping) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $129 = $126;
   }
   $130 = ($129|0)==(0);
   do {
    if (!($130)) {
     $131 = HEAP32[$__g_end>>2]|0;
     $132 = $131;
     $133 = $__g;
     $134 = (($132) - ($133))|0;
     $135 = ($134|0)<(160);
     if (!($135)) {
      break;
     }
     $136 = HEAP32[$__dc>>2]|0;
     $137 = (($131) + 4|0);
     HEAP32[$__g_end>>2] = $137;
     HEAP32[$131>>2] = $136;
    }
   } while(0);
   $138 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $139 = (invoke_iiiii(8,($__a$2|0),($138|0),($__err|0),($$0$i|0))|0);
   $140 = tempRet0;
   $141 = __THREW__; __THREW__ = 0;
   $142 = $141&1;
   if ($142) {
    break;
   }
   $143 = $__v;
   $144 = $143;
   HEAP32[$144>>2] = $139;
   $145 = (($143) + 4)|0;
   $146 = $145;
   HEAP32[$146>>2] = $140;
   $147 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$16,$147,$__err);
   $148 = ($36|0)==(0|0);
   do {
    if ($148) {
     $162 = 0;
    } else {
     $149 = (($36) + 12|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = (($36) + 16|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($150|0)==($152|0);
     if (!($153)) {
      $162 = $36;
      break;
     }
     $154 = $36;
     $155 = HEAP32[$154>>2]|0;
     $156 = (($155) + 36|0);
     $157 = HEAP32[$156>>2]|0;
     __THREW__ = 0;
     $158 = (invoke_ii($157|0,($36|0))|0);
     $159 = __THREW__; __THREW__ = 0;
     $160 = $159&1;
     if ($160) {
      break L6;
     }
     $161 = ($158|0)==(-1);
     if (!($161)) {
      $162 = $36;
      break;
     }
     HEAP32[$17>>2] = 0;
     $162 = 0;
    }
   } while(0);
   $163 = ($162|0)==(0|0);
   $164 = ($$pre$i2$i$i|0)==(0|0);
   do {
    if ($164) {
     label = 65;
    } else {
     $165 = (($$pre$i2$i$i) + 12|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = (($$pre$i2$i$i) + 16|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($166|0)==($168|0);
     if (!($169)) {
      if (!($163)) {
       break;
      }
      $181 = ($agg$result);
      HEAP32[$181>>2] = $162;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
     $170 = $$pre$i2$i$i;
     $171 = HEAP32[$170>>2]|0;
     $172 = (($171) + 36|0);
     $173 = HEAP32[$172>>2]|0;
     __THREW__ = 0;
     $174 = (invoke_ii($173|0,($$pre$i2$i$i|0))|0);
     $175 = __THREW__; __THREW__ = 0;
     $176 = $175&1;
     if ($176) {
      break L6;
     }
     $177 = ($174|0)==(-1);
     if ($177) {
      HEAP32[$18>>2] = 0;
      label = 65;
      break;
     }
     $178 = ($$pre$i2$i$i|0)==(0|0);
     $tmp$i$i = $163 ^ $178;
     if (!($tmp$i$i)) {
      break;
     }
     $181 = ($agg$result);
     HEAP32[$181>>2] = $162;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 65) {
     if ($163) {
      break;
     }
     $181 = ($agg$result);
     HEAP32[$181>>2] = $162;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $179 = HEAP32[$__err>>2]|0;
   $180 = $179 | 2;
   HEAP32[$__err>>2] = $180;
   $181 = ($agg$result);
   HEAP32[$181>>2] = $162;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $92 = ___cxa_find_matching_catch(-1,-1)|0;
 $93 = tempRet0;
 $lpad$phi$index = $92;$lpad$phi$index2 = $93;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $3 = ($__b);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1);
 HEAP32[$5>>2] = $4;
 $6 = ($__e);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($2);
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 $16 = $$byval_copy;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre30 = 0, $$pre31 = 0, $$pre33 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0;
 var $this2$i$i$i = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $__atoms = sp;
 $__thousands_sep = sp + 32|0;
 $__grouping = sp + 40|0;
 $__buf = sp + 56|0;
 $__a_end = sp + 72|0;
 $__g = sp + 80|0;
 $__g_end = sp + 240|0;
 $__dc = sp + 248|0;
 $1 = (($__iob) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 if ((($3|0) == 64)) {
  $$0$i = 8;
 } else if ((($3|0) == 8)) {
  $$0$i = 16;
 } else if ((($3|0) == 0)) {
  $$0$i = 0;
 } else {
  $$0$i = 10;
 }
 $4 = ($__atoms);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$4,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(13,($__buf|0),10,0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L6: do {
  if (!($6)) {
   $7 = HEAP8[$this2$i$i$i]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = $__buf;
    $13 = (($12) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $13;$$pre$phi34Z2D = $$pre33;$14 = $13;
   } else {
    $10 = (($__buf) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre30 = $__buf;
    $$pre31 = (($$pre30) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $10;$14 = $11;
   }
   HEAP32[$__a_end>>2] = $14;
   $15 = $__g;
   $16 = ($__g);
   HEAP32[$__g_end>>2] = $16;
   HEAP32[$__dc>>2] = 0;
   $17 = ($__b);
   $18 = ($__e);
   $19 = ($__buf);
   $20 = (($__buf) + 4|0);
   $21 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$17>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $14;
   L12: while(1) {
    $22 = ($$pre$i$i$i4|0)==(0|0);
    do {
     if ($22) {
      $36 = 0;
     } else {
      $23 = (($$pre$i$i$i4) + 12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (($$pre$i$i$i4) + 16|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($24|0)==($26|0);
      if (!($27)) {
       $36 = $$pre$i$i$i4;
       break;
      }
      $28 = $$pre$i$i$i4;
      $29 = HEAP32[$28>>2]|0;
      $30 = (($29) + 36|0);
      $31 = HEAP32[$30>>2]|0;
      __THREW__ = 0;
      $32 = (invoke_ii($31|0,($$pre$i$i$i4|0))|0);
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       label = 37;
       break L12;
      }
      $35 = ($32|0)==(-1);
      if (!($35)) {
       $36 = $$pre$i$i$i4;
       break;
      }
      HEAP32[$17>>2] = 0;
      $36 = 0;
     }
    } while(0);
    $37 = ($36|0)==(0|0);
    $38 = HEAP32[$18>>2]|0;
    $39 = ($38|0)==(0|0);
    do {
     if ($39) {
      label = 21;
     } else {
      $40 = (($38) + 12|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (($38) + 16|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($41|0)==($43|0);
      if (!($44)) {
       if ($37) {
        $53 = $38;
        break;
       } else {
        $$pre$i2$i$i = $38;$__a$2 = $__a$0;
        break L12;
       }
      }
      $45 = $38;
      $46 = HEAP32[$45>>2]|0;
      $47 = (($46) + 36|0);
      $48 = HEAP32[$47>>2]|0;
      __THREW__ = 0;
      $49 = (invoke_ii($48|0,($38|0))|0);
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      if ($51) {
       label = 37;
       break L12;
      }
      $52 = ($49|0)==(-1);
      if ($52) {
       HEAP32[$18>>2] = 0;
       label = 21;
       break;
      } else {
       if ($37) {
        $53 = $38;
        break;
       } else {
        $$pre$i2$i$i = $38;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     if ($37) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $53 = 0;
     }
    }
    $54 = HEAP32[$__a_end>>2]|0;
    $55 = $54;
    $56 = $__a$0;
    $57 = (($55) - ($56))|0;
    $58 = HEAP8[$this2$i$i$i]|0;
    $59 = $58 & 1;
    $60 = ($59<<24>>24)==(0);
    if ($60) {
     $62 = $58&255;
     $63 = $62 >>> 1;
     $64 = $63;
    } else {
     $61 = HEAP32[$20>>2]|0;
     $64 = $61;
    }
    $65 = ($57|0)==($64|0);
    if ($65) {
     if ($60) {
      $67 = $58&255;
      $68 = $67 >>> 1;
      $69 = $58&255;
      $70 = $69 >>> 1;
      $71 = $68;$72 = $70;
     } else {
      $66 = HEAP32[$20>>2]|0;
      $71 = $66;$72 = $66;
     }
     $73 = $72 << 1;
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($73|0),0);
     $74 = __THREW__; __THREW__ = 0;
     $75 = $74&1;
     if ($75) {
      label = 37;
      break;
     }
     $76 = HEAP8[$this2$i$i$i]|0;
     $77 = $76 & 1;
     $78 = ($77<<24>>24)==(0);
     if ($78) {
      $81 = 10;
     } else {
      $79 = HEAP32[$19>>2]|0;
      $80 = $79 & -2;
      $phitmp$i19 = (($80) + -1)|0;
      $81 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($81|0),0);
     $82 = __THREW__; __THREW__ = 0;
     $83 = $82&1;
     if ($83) {
      label = 37;
      break;
     }
     $84 = HEAP8[$this2$i$i$i]|0;
     $85 = $84 & 1;
     $86 = ($85<<24>>24)==(0);
     if ($86) {
      $88 = $$pre$phi32Z2D;
     } else {
      $87 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $88 = $87;
     }
     $89 = (($88) + ($71)|0);
     HEAP32[$__a_end>>2] = $89;
     $__a$1 = $88;
    } else {
     $__a$1 = $__a$0;
    }
    $94 = (($36) + 12|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($36) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95|0)==($97|0);
    if ($98) {
     $99 = $36;
     $100 = HEAP32[$99>>2]|0;
     $101 = (($100) + 36|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     $103 = (invoke_ii($102|0,($36|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 37;
      break;
     } else {
      $$0$i$i = $103;
     }
    } else {
     $106 = HEAP8[$95]|0;
     $107 = $106&255;
     $$0$i$i = $107;
    }
    $108 = $$0$i$i&255;
    $109 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($108,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$16,$__g_end,$4)|0);
    $110 = ($109|0)==(0);
    if (!($110)) {
     $$pre$i2$i$i = $53;$__a$2 = $__a$1;
     break;
    }
    $111 = HEAP32[$94>>2]|0;
    $112 = HEAP32[$96>>2]|0;
    $113 = ($111|0)==($112|0);
    if ($113) {
     $114 = $36;
     $115 = HEAP32[$114>>2]|0;
     $116 = (($115) + 40|0);
     $117 = HEAP32[$116>>2]|0;
     __THREW__ = 0;
     (invoke_ii($117|0,($36|0))|0);
     $118 = __THREW__; __THREW__ = 0;
     $119 = $118&1;
     if ($119) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $36;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $120 = (($111) + 1|0);
     HEAP32[$94>>2] = $120;
     $$pre$i$i$i4 = $36;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $90 = ___cxa_find_matching_catch(-1,-1)|0;
    $91 = tempRet0;
    $lpad$phi$index = $90;$lpad$phi$index2 = $91;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $121 = $__grouping;
   $122 = HEAP8[$121]|0;
   $123 = $122 & 1;
   $124 = ($123<<24>>24)==(0);
   if ($124) {
    $127 = $122&255;
    $128 = $127 >>> 1;
    $129 = $128;
   } else {
    $125 = (($__grouping) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $129 = $126;
   }
   $130 = ($129|0)==(0);
   do {
    if (!($130)) {
     $131 = HEAP32[$__g_end>>2]|0;
     $132 = $131;
     $133 = $__g;
     $134 = (($132) - ($133))|0;
     $135 = ($134|0)<(160);
     if (!($135)) {
      break;
     }
     $136 = HEAP32[$__dc>>2]|0;
     $137 = (($131) + 4|0);
     HEAP32[$__g_end>>2] = $137;
     HEAP32[$131>>2] = $136;
    }
   } while(0);
   $138 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $139 = (invoke_iiiii(9,($__a$2|0),($138|0),($__err|0),($$0$i|0))|0);
   $140 = __THREW__; __THREW__ = 0;
   $141 = $140&1;
   if ($141) {
    break;
   }
   HEAP16[$__v>>1] = $139;
   $142 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$16,$142,$__err);
   $143 = ($36|0)==(0|0);
   do {
    if ($143) {
     $157 = 0;
    } else {
     $144 = (($36) + 12|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = (($36) + 16|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = ($145|0)==($147|0);
     if (!($148)) {
      $157 = $36;
      break;
     }
     $149 = $36;
     $150 = HEAP32[$149>>2]|0;
     $151 = (($150) + 36|0);
     $152 = HEAP32[$151>>2]|0;
     __THREW__ = 0;
     $153 = (invoke_ii($152|0,($36|0))|0);
     $154 = __THREW__; __THREW__ = 0;
     $155 = $154&1;
     if ($155) {
      break L6;
     }
     $156 = ($153|0)==(-1);
     if (!($156)) {
      $157 = $36;
      break;
     }
     HEAP32[$17>>2] = 0;
     $157 = 0;
    }
   } while(0);
   $158 = ($157|0)==(0|0);
   $159 = ($$pre$i2$i$i|0)==(0|0);
   do {
    if ($159) {
     label = 65;
    } else {
     $160 = (($$pre$i2$i$i) + 12|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = (($$pre$i2$i$i) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($161|0)==($163|0);
     if (!($164)) {
      if (!($158)) {
       break;
      }
      $176 = ($agg$result);
      HEAP32[$176>>2] = $157;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
     $165 = $$pre$i2$i$i;
     $166 = HEAP32[$165>>2]|0;
     $167 = (($166) + 36|0);
     $168 = HEAP32[$167>>2]|0;
     __THREW__ = 0;
     $169 = (invoke_ii($168|0,($$pre$i2$i$i|0))|0);
     $170 = __THREW__; __THREW__ = 0;
     $171 = $170&1;
     if ($171) {
      break L6;
     }
     $172 = ($169|0)==(-1);
     if ($172) {
      HEAP32[$18>>2] = 0;
      label = 65;
      break;
     }
     $173 = ($$pre$i2$i$i|0)==(0|0);
     $tmp$i$i = $158 ^ $173;
     if (!($tmp$i$i)) {
      break;
     }
     $176 = ($agg$result);
     HEAP32[$176>>2] = $157;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 65) {
     if ($158) {
      break;
     }
     $176 = ($agg$result);
     HEAP32[$176>>2] = $157;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $174 = HEAP32[$__err>>2]|0;
   $175 = $174 | 2;
   HEAP32[$__err>>2] = $175;
   $176 = ($agg$result);
   HEAP32[$176>>2] = $157;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $92 = ___cxa_find_matching_catch(-1,-1)|0;
 $93 = tempRet0;
 $lpad$phi$index = $92;$lpad$phi$index2 = $93;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $3 = ($__b);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1);
 HEAP32[$5>>2] = $4;
 $6 = ($__e);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($2);
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 $16 = $$byval_copy;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre30 = 0, $$pre31 = 0, $$pre33 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0;
 var $this2$i$i$i = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $__atoms = sp;
 $__thousands_sep = sp + 32|0;
 $__grouping = sp + 40|0;
 $__buf = sp + 56|0;
 $__a_end = sp + 72|0;
 $__g = sp + 80|0;
 $__g_end = sp + 240|0;
 $__dc = sp + 248|0;
 $1 = (($__iob) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 if ((($3|0) == 64)) {
  $$0$i = 8;
 } else if ((($3|0) == 8)) {
  $$0$i = 16;
 } else if ((($3|0) == 0)) {
  $$0$i = 0;
 } else {
  $$0$i = 10;
 }
 $4 = ($__atoms);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$4,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(13,($__buf|0),10,0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L6: do {
  if (!($6)) {
   $7 = HEAP8[$this2$i$i$i]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = $__buf;
    $13 = (($12) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $13;$$pre$phi34Z2D = $$pre33;$14 = $13;
   } else {
    $10 = (($__buf) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre30 = $__buf;
    $$pre31 = (($$pre30) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $10;$14 = $11;
   }
   HEAP32[$__a_end>>2] = $14;
   $15 = $__g;
   $16 = ($__g);
   HEAP32[$__g_end>>2] = $16;
   HEAP32[$__dc>>2] = 0;
   $17 = ($__b);
   $18 = ($__e);
   $19 = ($__buf);
   $20 = (($__buf) + 4|0);
   $21 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$17>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $14;
   L12: while(1) {
    $22 = ($$pre$i$i$i4|0)==(0|0);
    do {
     if ($22) {
      $36 = 0;
     } else {
      $23 = (($$pre$i$i$i4) + 12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (($$pre$i$i$i4) + 16|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($24|0)==($26|0);
      if (!($27)) {
       $36 = $$pre$i$i$i4;
       break;
      }
      $28 = $$pre$i$i$i4;
      $29 = HEAP32[$28>>2]|0;
      $30 = (($29) + 36|0);
      $31 = HEAP32[$30>>2]|0;
      __THREW__ = 0;
      $32 = (invoke_ii($31|0,($$pre$i$i$i4|0))|0);
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       label = 37;
       break L12;
      }
      $35 = ($32|0)==(-1);
      if (!($35)) {
       $36 = $$pre$i$i$i4;
       break;
      }
      HEAP32[$17>>2] = 0;
      $36 = 0;
     }
    } while(0);
    $37 = ($36|0)==(0|0);
    $38 = HEAP32[$18>>2]|0;
    $39 = ($38|0)==(0|0);
    do {
     if ($39) {
      label = 21;
     } else {
      $40 = (($38) + 12|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (($38) + 16|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($41|0)==($43|0);
      if (!($44)) {
       if ($37) {
        $53 = $38;
        break;
       } else {
        $$pre$i2$i$i = $38;$__a$2 = $__a$0;
        break L12;
       }
      }
      $45 = $38;
      $46 = HEAP32[$45>>2]|0;
      $47 = (($46) + 36|0);
      $48 = HEAP32[$47>>2]|0;
      __THREW__ = 0;
      $49 = (invoke_ii($48|0,($38|0))|0);
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      if ($51) {
       label = 37;
       break L12;
      }
      $52 = ($49|0)==(-1);
      if ($52) {
       HEAP32[$18>>2] = 0;
       label = 21;
       break;
      } else {
       if ($37) {
        $53 = $38;
        break;
       } else {
        $$pre$i2$i$i = $38;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     if ($37) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $53 = 0;
     }
    }
    $54 = HEAP32[$__a_end>>2]|0;
    $55 = $54;
    $56 = $__a$0;
    $57 = (($55) - ($56))|0;
    $58 = HEAP8[$this2$i$i$i]|0;
    $59 = $58 & 1;
    $60 = ($59<<24>>24)==(0);
    if ($60) {
     $62 = $58&255;
     $63 = $62 >>> 1;
     $64 = $63;
    } else {
     $61 = HEAP32[$20>>2]|0;
     $64 = $61;
    }
    $65 = ($57|0)==($64|0);
    if ($65) {
     if ($60) {
      $67 = $58&255;
      $68 = $67 >>> 1;
      $69 = $58&255;
      $70 = $69 >>> 1;
      $71 = $68;$72 = $70;
     } else {
      $66 = HEAP32[$20>>2]|0;
      $71 = $66;$72 = $66;
     }
     $73 = $72 << 1;
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($73|0),0);
     $74 = __THREW__; __THREW__ = 0;
     $75 = $74&1;
     if ($75) {
      label = 37;
      break;
     }
     $76 = HEAP8[$this2$i$i$i]|0;
     $77 = $76 & 1;
     $78 = ($77<<24>>24)==(0);
     if ($78) {
      $81 = 10;
     } else {
      $79 = HEAP32[$19>>2]|0;
      $80 = $79 & -2;
      $phitmp$i19 = (($80) + -1)|0;
      $81 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($81|0),0);
     $82 = __THREW__; __THREW__ = 0;
     $83 = $82&1;
     if ($83) {
      label = 37;
      break;
     }
     $84 = HEAP8[$this2$i$i$i]|0;
     $85 = $84 & 1;
     $86 = ($85<<24>>24)==(0);
     if ($86) {
      $88 = $$pre$phi32Z2D;
     } else {
      $87 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $88 = $87;
     }
     $89 = (($88) + ($71)|0);
     HEAP32[$__a_end>>2] = $89;
     $__a$1 = $88;
    } else {
     $__a$1 = $__a$0;
    }
    $94 = (($36) + 12|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($36) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95|0)==($97|0);
    if ($98) {
     $99 = $36;
     $100 = HEAP32[$99>>2]|0;
     $101 = (($100) + 36|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     $103 = (invoke_ii($102|0,($36|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 37;
      break;
     } else {
      $$0$i$i = $103;
     }
    } else {
     $106 = HEAP8[$95]|0;
     $107 = $106&255;
     $$0$i$i = $107;
    }
    $108 = $$0$i$i&255;
    $109 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($108,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$16,$__g_end,$4)|0);
    $110 = ($109|0)==(0);
    if (!($110)) {
     $$pre$i2$i$i = $53;$__a$2 = $__a$1;
     break;
    }
    $111 = HEAP32[$94>>2]|0;
    $112 = HEAP32[$96>>2]|0;
    $113 = ($111|0)==($112|0);
    if ($113) {
     $114 = $36;
     $115 = HEAP32[$114>>2]|0;
     $116 = (($115) + 40|0);
     $117 = HEAP32[$116>>2]|0;
     __THREW__ = 0;
     (invoke_ii($117|0,($36|0))|0);
     $118 = __THREW__; __THREW__ = 0;
     $119 = $118&1;
     if ($119) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $36;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $120 = (($111) + 1|0);
     HEAP32[$94>>2] = $120;
     $$pre$i$i$i4 = $36;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $90 = ___cxa_find_matching_catch(-1,-1)|0;
    $91 = tempRet0;
    $lpad$phi$index = $90;$lpad$phi$index2 = $91;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $121 = $__grouping;
   $122 = HEAP8[$121]|0;
   $123 = $122 & 1;
   $124 = ($123<<24>>24)==(0);
   if ($124) {
    $127 = $122&255;
    $128 = $127 >>> 1;
    $129 = $128;
   } else {
    $125 = (($__grouping) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $129 = $126;
   }
   $130 = ($129|0)==(0);
   do {
    if (!($130)) {
     $131 = HEAP32[$__g_end>>2]|0;
     $132 = $131;
     $133 = $__g;
     $134 = (($132) - ($133))|0;
     $135 = ($134|0)<(160);
     if (!($135)) {
      break;
     }
     $136 = HEAP32[$__dc>>2]|0;
     $137 = (($131) + 4|0);
     HEAP32[$__g_end>>2] = $137;
     HEAP32[$131>>2] = $136;
    }
   } while(0);
   $138 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $139 = (invoke_iiiii(10,($__a$2|0),($138|0),($__err|0),($$0$i|0))|0);
   $140 = __THREW__; __THREW__ = 0;
   $141 = $140&1;
   if ($141) {
    break;
   }
   HEAP32[$__v>>2] = $139;
   $142 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$16,$142,$__err);
   $143 = ($36|0)==(0|0);
   do {
    if ($143) {
     $157 = 0;
    } else {
     $144 = (($36) + 12|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = (($36) + 16|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = ($145|0)==($147|0);
     if (!($148)) {
      $157 = $36;
      break;
     }
     $149 = $36;
     $150 = HEAP32[$149>>2]|0;
     $151 = (($150) + 36|0);
     $152 = HEAP32[$151>>2]|0;
     __THREW__ = 0;
     $153 = (invoke_ii($152|0,($36|0))|0);
     $154 = __THREW__; __THREW__ = 0;
     $155 = $154&1;
     if ($155) {
      break L6;
     }
     $156 = ($153|0)==(-1);
     if (!($156)) {
      $157 = $36;
      break;
     }
     HEAP32[$17>>2] = 0;
     $157 = 0;
    }
   } while(0);
   $158 = ($157|0)==(0|0);
   $159 = ($$pre$i2$i$i|0)==(0|0);
   do {
    if ($159) {
     label = 65;
    } else {
     $160 = (($$pre$i2$i$i) + 12|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = (($$pre$i2$i$i) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($161|0)==($163|0);
     if (!($164)) {
      if (!($158)) {
       break;
      }
      $176 = ($agg$result);
      HEAP32[$176>>2] = $157;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
     $165 = $$pre$i2$i$i;
     $166 = HEAP32[$165>>2]|0;
     $167 = (($166) + 36|0);
     $168 = HEAP32[$167>>2]|0;
     __THREW__ = 0;
     $169 = (invoke_ii($168|0,($$pre$i2$i$i|0))|0);
     $170 = __THREW__; __THREW__ = 0;
     $171 = $170&1;
     if ($171) {
      break L6;
     }
     $172 = ($169|0)==(-1);
     if ($172) {
      HEAP32[$18>>2] = 0;
      label = 65;
      break;
     }
     $173 = ($$pre$i2$i$i|0)==(0|0);
     $tmp$i$i = $158 ^ $173;
     if (!($tmp$i$i)) {
      break;
     }
     $176 = ($agg$result);
     HEAP32[$176>>2] = $157;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 65) {
     if ($158) {
      break;
     }
     $176 = ($agg$result);
     HEAP32[$176>>2] = $157;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $174 = HEAP32[$__err>>2]|0;
   $175 = $174 | 2;
   HEAP32[$__err>>2] = $175;
   $176 = ($agg$result);
   HEAP32[$176>>2] = $157;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $92 = ___cxa_find_matching_catch(-1,-1)|0;
 $93 = tempRet0;
 $lpad$phi$index = $92;$lpad$phi$index2 = $93;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $3 = ($__b);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1);
 HEAP32[$5>>2] = $4;
 $6 = ($__e);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($2);
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 $16 = $$byval_copy;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre30 = 0, $$pre31 = 0, $$pre33 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0;
 var $this2$i$i$i = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $__atoms = sp;
 $__thousands_sep = sp + 32|0;
 $__grouping = sp + 40|0;
 $__buf = sp + 56|0;
 $__a_end = sp + 72|0;
 $__g = sp + 80|0;
 $__g_end = sp + 240|0;
 $__dc = sp + 248|0;
 $1 = (($__iob) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 if ((($3|0) == 64)) {
  $$0$i = 8;
 } else if ((($3|0) == 0)) {
  $$0$i = 0;
 } else if ((($3|0) == 8)) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 $4 = ($__atoms);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$4,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(13,($__buf|0),10,0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L6: do {
  if (!($6)) {
   $7 = HEAP8[$this2$i$i$i]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = $__buf;
    $13 = (($12) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $13;$$pre$phi34Z2D = $$pre33;$14 = $13;
   } else {
    $10 = (($__buf) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre30 = $__buf;
    $$pre31 = (($$pre30) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $10;$14 = $11;
   }
   HEAP32[$__a_end>>2] = $14;
   $15 = $__g;
   $16 = ($__g);
   HEAP32[$__g_end>>2] = $16;
   HEAP32[$__dc>>2] = 0;
   $17 = ($__b);
   $18 = ($__e);
   $19 = ($__buf);
   $20 = (($__buf) + 4|0);
   $21 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$17>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $14;
   L12: while(1) {
    $22 = ($$pre$i$i$i4|0)==(0|0);
    do {
     if ($22) {
      $36 = 0;
     } else {
      $23 = (($$pre$i$i$i4) + 12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (($$pre$i$i$i4) + 16|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($24|0)==($26|0);
      if (!($27)) {
       $36 = $$pre$i$i$i4;
       break;
      }
      $28 = $$pre$i$i$i4;
      $29 = HEAP32[$28>>2]|0;
      $30 = (($29) + 36|0);
      $31 = HEAP32[$30>>2]|0;
      __THREW__ = 0;
      $32 = (invoke_ii($31|0,($$pre$i$i$i4|0))|0);
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       label = 37;
       break L12;
      }
      $35 = ($32|0)==(-1);
      if (!($35)) {
       $36 = $$pre$i$i$i4;
       break;
      }
      HEAP32[$17>>2] = 0;
      $36 = 0;
     }
    } while(0);
    $37 = ($36|0)==(0|0);
    $38 = HEAP32[$18>>2]|0;
    $39 = ($38|0)==(0|0);
    do {
     if ($39) {
      label = 21;
     } else {
      $40 = (($38) + 12|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (($38) + 16|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($41|0)==($43|0);
      if (!($44)) {
       if ($37) {
        $53 = $38;
        break;
       } else {
        $$pre$i2$i$i = $38;$__a$2 = $__a$0;
        break L12;
       }
      }
      $45 = $38;
      $46 = HEAP32[$45>>2]|0;
      $47 = (($46) + 36|0);
      $48 = HEAP32[$47>>2]|0;
      __THREW__ = 0;
      $49 = (invoke_ii($48|0,($38|0))|0);
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      if ($51) {
       label = 37;
       break L12;
      }
      $52 = ($49|0)==(-1);
      if ($52) {
       HEAP32[$18>>2] = 0;
       label = 21;
       break;
      } else {
       if ($37) {
        $53 = $38;
        break;
       } else {
        $$pre$i2$i$i = $38;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     if ($37) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $53 = 0;
     }
    }
    $54 = HEAP32[$__a_end>>2]|0;
    $55 = $54;
    $56 = $__a$0;
    $57 = (($55) - ($56))|0;
    $58 = HEAP8[$this2$i$i$i]|0;
    $59 = $58 & 1;
    $60 = ($59<<24>>24)==(0);
    if ($60) {
     $62 = $58&255;
     $63 = $62 >>> 1;
     $64 = $63;
    } else {
     $61 = HEAP32[$20>>2]|0;
     $64 = $61;
    }
    $65 = ($57|0)==($64|0);
    if ($65) {
     if ($60) {
      $67 = $58&255;
      $68 = $67 >>> 1;
      $69 = $58&255;
      $70 = $69 >>> 1;
      $71 = $68;$72 = $70;
     } else {
      $66 = HEAP32[$20>>2]|0;
      $71 = $66;$72 = $66;
     }
     $73 = $72 << 1;
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($73|0),0);
     $74 = __THREW__; __THREW__ = 0;
     $75 = $74&1;
     if ($75) {
      label = 37;
      break;
     }
     $76 = HEAP8[$this2$i$i$i]|0;
     $77 = $76 & 1;
     $78 = ($77<<24>>24)==(0);
     if ($78) {
      $81 = 10;
     } else {
      $79 = HEAP32[$19>>2]|0;
      $80 = $79 & -2;
      $phitmp$i19 = (($80) + -1)|0;
      $81 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($81|0),0);
     $82 = __THREW__; __THREW__ = 0;
     $83 = $82&1;
     if ($83) {
      label = 37;
      break;
     }
     $84 = HEAP8[$this2$i$i$i]|0;
     $85 = $84 & 1;
     $86 = ($85<<24>>24)==(0);
     if ($86) {
      $88 = $$pre$phi32Z2D;
     } else {
      $87 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $88 = $87;
     }
     $89 = (($88) + ($71)|0);
     HEAP32[$__a_end>>2] = $89;
     $__a$1 = $88;
    } else {
     $__a$1 = $__a$0;
    }
    $94 = (($36) + 12|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($36) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95|0)==($97|0);
    if ($98) {
     $99 = $36;
     $100 = HEAP32[$99>>2]|0;
     $101 = (($100) + 36|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     $103 = (invoke_ii($102|0,($36|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 37;
      break;
     } else {
      $$0$i$i = $103;
     }
    } else {
     $106 = HEAP8[$95]|0;
     $107 = $106&255;
     $$0$i$i = $107;
    }
    $108 = $$0$i$i&255;
    $109 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($108,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$16,$__g_end,$4)|0);
    $110 = ($109|0)==(0);
    if (!($110)) {
     $$pre$i2$i$i = $53;$__a$2 = $__a$1;
     break;
    }
    $111 = HEAP32[$94>>2]|0;
    $112 = HEAP32[$96>>2]|0;
    $113 = ($111|0)==($112|0);
    if ($113) {
     $114 = $36;
     $115 = HEAP32[$114>>2]|0;
     $116 = (($115) + 40|0);
     $117 = HEAP32[$116>>2]|0;
     __THREW__ = 0;
     (invoke_ii($117|0,($36|0))|0);
     $118 = __THREW__; __THREW__ = 0;
     $119 = $118&1;
     if ($119) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $36;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $120 = (($111) + 1|0);
     HEAP32[$94>>2] = $120;
     $$pre$i$i$i4 = $36;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $90 = ___cxa_find_matching_catch(-1,-1)|0;
    $91 = tempRet0;
    $lpad$phi$index = $90;$lpad$phi$index2 = $91;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $121 = $__grouping;
   $122 = HEAP8[$121]|0;
   $123 = $122 & 1;
   $124 = ($123<<24>>24)==(0);
   if ($124) {
    $127 = $122&255;
    $128 = $127 >>> 1;
    $129 = $128;
   } else {
    $125 = (($__grouping) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $129 = $126;
   }
   $130 = ($129|0)==(0);
   do {
    if (!($130)) {
     $131 = HEAP32[$__g_end>>2]|0;
     $132 = $131;
     $133 = $__g;
     $134 = (($132) - ($133))|0;
     $135 = ($134|0)<(160);
     if (!($135)) {
      break;
     }
     $136 = HEAP32[$__dc>>2]|0;
     $137 = (($131) + 4|0);
     HEAP32[$__g_end>>2] = $137;
     HEAP32[$131>>2] = $136;
    }
   } while(0);
   $138 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $139 = (invoke_iiiii(11,($__a$2|0),($138|0),($__err|0),($$0$i|0))|0);
   $140 = __THREW__; __THREW__ = 0;
   $141 = $140&1;
   if ($141) {
    break;
   }
   HEAP32[$__v>>2] = $139;
   $142 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$16,$142,$__err);
   $143 = ($36|0)==(0|0);
   do {
    if ($143) {
     $157 = 0;
    } else {
     $144 = (($36) + 12|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = (($36) + 16|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = ($145|0)==($147|0);
     if (!($148)) {
      $157 = $36;
      break;
     }
     $149 = $36;
     $150 = HEAP32[$149>>2]|0;
     $151 = (($150) + 36|0);
     $152 = HEAP32[$151>>2]|0;
     __THREW__ = 0;
     $153 = (invoke_ii($152|0,($36|0))|0);
     $154 = __THREW__; __THREW__ = 0;
     $155 = $154&1;
     if ($155) {
      break L6;
     }
     $156 = ($153|0)==(-1);
     if (!($156)) {
      $157 = $36;
      break;
     }
     HEAP32[$17>>2] = 0;
     $157 = 0;
    }
   } while(0);
   $158 = ($157|0)==(0|0);
   $159 = ($$pre$i2$i$i|0)==(0|0);
   do {
    if ($159) {
     label = 65;
    } else {
     $160 = (($$pre$i2$i$i) + 12|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = (($$pre$i2$i$i) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($161|0)==($163|0);
     if (!($164)) {
      if (!($158)) {
       break;
      }
      $176 = ($agg$result);
      HEAP32[$176>>2] = $157;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
     $165 = $$pre$i2$i$i;
     $166 = HEAP32[$165>>2]|0;
     $167 = (($166) + 36|0);
     $168 = HEAP32[$167>>2]|0;
     __THREW__ = 0;
     $169 = (invoke_ii($168|0,($$pre$i2$i$i|0))|0);
     $170 = __THREW__; __THREW__ = 0;
     $171 = $170&1;
     if ($171) {
      break L6;
     }
     $172 = ($169|0)==(-1);
     if ($172) {
      HEAP32[$18>>2] = 0;
      label = 65;
      break;
     }
     $173 = ($$pre$i2$i$i|0)==(0|0);
     $tmp$i$i = $158 ^ $173;
     if (!($tmp$i$i)) {
      break;
     }
     $176 = ($agg$result);
     HEAP32[$176>>2] = $157;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 65) {
     if ($158) {
      break;
     }
     $176 = ($agg$result);
     HEAP32[$176>>2] = $157;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $174 = HEAP32[$__err>>2]|0;
   $175 = $174 | 2;
   HEAP32[$__err>>2] = $175;
   $176 = ($agg$result);
   HEAP32[$176>>2] = $157;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $92 = ___cxa_find_matching_catch(-1,-1)|0;
 $93 = tempRet0;
 $lpad$phi$index = $92;$lpad$phi$index2 = $93;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $3 = ($__b);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1);
 HEAP32[$5>>2] = $4;
 $6 = ($__e);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($2);
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 $16 = $$byval_copy;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi32Z2D = 0, $$pre$phi34Z2D = 0, $$pre30 = 0, $$pre31 = 0, $$pre33 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0;
 var $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $this2$i$i$i = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $__atoms = sp;
 $__thousands_sep = sp + 32|0;
 $__grouping = sp + 40|0;
 $__buf = sp + 56|0;
 $__a_end = sp + 72|0;
 $__g = sp + 80|0;
 $__g_end = sp + 240|0;
 $__dc = sp + 248|0;
 $1 = (($__iob) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 if ((($3|0) == 64)) {
  $$0$i = 8;
 } else if ((($3|0) == 8)) {
  $$0$i = 16;
 } else if ((($3|0) == 0)) {
  $$0$i = 0;
 } else {
  $$0$i = 10;
 }
 $4 = ($__atoms);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$4,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(13,($__buf|0),10,0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 L6: do {
  if (!($6)) {
   $7 = HEAP8[$this2$i$i$i]|0;
   $8 = $7 & 1;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $12 = $__buf;
    $13 = (($12) + 1|0);
    $$pre33 = (($__buf) + 8|0);
    $$pre$phi32Z2D = $13;$$pre$phi34Z2D = $$pre33;$14 = $13;
   } else {
    $10 = (($__buf) + 8|0);
    $11 = HEAP32[$10>>2]|0;
    $$pre30 = $__buf;
    $$pre31 = (($$pre30) + 1|0);
    $$pre$phi32Z2D = $$pre31;$$pre$phi34Z2D = $10;$14 = $11;
   }
   HEAP32[$__a_end>>2] = $14;
   $15 = $__g;
   $16 = ($__g);
   HEAP32[$__g_end>>2] = $16;
   HEAP32[$__dc>>2] = 0;
   $17 = ($__b);
   $18 = ($__e);
   $19 = ($__buf);
   $20 = (($__buf) + 4|0);
   $21 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$17>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $14;
   L12: while(1) {
    $22 = ($$pre$i$i$i4|0)==(0|0);
    do {
     if ($22) {
      $36 = 0;
     } else {
      $23 = (($$pre$i$i$i4) + 12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (($$pre$i$i$i4) + 16|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($24|0)==($26|0);
      if (!($27)) {
       $36 = $$pre$i$i$i4;
       break;
      }
      $28 = $$pre$i$i$i4;
      $29 = HEAP32[$28>>2]|0;
      $30 = (($29) + 36|0);
      $31 = HEAP32[$30>>2]|0;
      __THREW__ = 0;
      $32 = (invoke_ii($31|0,($$pre$i$i$i4|0))|0);
      $33 = __THREW__; __THREW__ = 0;
      $34 = $33&1;
      if ($34) {
       label = 37;
       break L12;
      }
      $35 = ($32|0)==(-1);
      if (!($35)) {
       $36 = $$pre$i$i$i4;
       break;
      }
      HEAP32[$17>>2] = 0;
      $36 = 0;
     }
    } while(0);
    $37 = ($36|0)==(0|0);
    $38 = HEAP32[$18>>2]|0;
    $39 = ($38|0)==(0|0);
    do {
     if ($39) {
      label = 21;
     } else {
      $40 = (($38) + 12|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (($38) + 16|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($41|0)==($43|0);
      if (!($44)) {
       if ($37) {
        $53 = $38;
        break;
       } else {
        $$pre$i2$i$i = $38;$__a$2 = $__a$0;
        break L12;
       }
      }
      $45 = $38;
      $46 = HEAP32[$45>>2]|0;
      $47 = (($46) + 36|0);
      $48 = HEAP32[$47>>2]|0;
      __THREW__ = 0;
      $49 = (invoke_ii($48|0,($38|0))|0);
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      if ($51) {
       label = 37;
       break L12;
      }
      $52 = ($49|0)==(-1);
      if ($52) {
       HEAP32[$18>>2] = 0;
       label = 21;
       break;
      } else {
       if ($37) {
        $53 = $38;
        break;
       } else {
        $$pre$i2$i$i = $38;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     if ($37) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $53 = 0;
     }
    }
    $54 = HEAP32[$__a_end>>2]|0;
    $55 = $54;
    $56 = $__a$0;
    $57 = (($55) - ($56))|0;
    $58 = HEAP8[$this2$i$i$i]|0;
    $59 = $58 & 1;
    $60 = ($59<<24>>24)==(0);
    if ($60) {
     $62 = $58&255;
     $63 = $62 >>> 1;
     $64 = $63;
    } else {
     $61 = HEAP32[$20>>2]|0;
     $64 = $61;
    }
    $65 = ($57|0)==($64|0);
    if ($65) {
     if ($60) {
      $67 = $58&255;
      $68 = $67 >>> 1;
      $69 = $58&255;
      $70 = $69 >>> 1;
      $71 = $68;$72 = $70;
     } else {
      $66 = HEAP32[$20>>2]|0;
      $71 = $66;$72 = $66;
     }
     $73 = $72 << 1;
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($73|0),0);
     $74 = __THREW__; __THREW__ = 0;
     $75 = $74&1;
     if ($75) {
      label = 37;
      break;
     }
     $76 = HEAP8[$this2$i$i$i]|0;
     $77 = $76 & 1;
     $78 = ($77<<24>>24)==(0);
     if ($78) {
      $81 = 10;
     } else {
      $79 = HEAP32[$19>>2]|0;
      $80 = $79 & -2;
      $phitmp$i19 = (($80) + -1)|0;
      $81 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($81|0),0);
     $82 = __THREW__; __THREW__ = 0;
     $83 = $82&1;
     if ($83) {
      label = 37;
      break;
     }
     $84 = HEAP8[$this2$i$i$i]|0;
     $85 = $84 & 1;
     $86 = ($85<<24>>24)==(0);
     if ($86) {
      $88 = $$pre$phi32Z2D;
     } else {
      $87 = HEAP32[$$pre$phi34Z2D>>2]|0;
      $88 = $87;
     }
     $89 = (($88) + ($71)|0);
     HEAP32[$__a_end>>2] = $89;
     $__a$1 = $88;
    } else {
     $__a$1 = $__a$0;
    }
    $94 = (($36) + 12|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($36) + 16|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($95|0)==($97|0);
    if ($98) {
     $99 = $36;
     $100 = HEAP32[$99>>2]|0;
     $101 = (($100) + 36|0);
     $102 = HEAP32[$101>>2]|0;
     __THREW__ = 0;
     $103 = (invoke_ii($102|0,($36|0))|0);
     $104 = __THREW__; __THREW__ = 0;
     $105 = $104&1;
     if ($105) {
      label = 37;
      break;
     } else {
      $$0$i$i = $103;
     }
    } else {
     $106 = HEAP8[$95]|0;
     $107 = $106&255;
     $$0$i$i = $107;
    }
    $108 = $$0$i$i&255;
    $109 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($108,$$0$i,$__a$1,$__a_end,$__dc,$21,$__grouping,$16,$__g_end,$4)|0);
    $110 = ($109|0)==(0);
    if (!($110)) {
     $$pre$i2$i$i = $53;$__a$2 = $__a$1;
     break;
    }
    $111 = HEAP32[$94>>2]|0;
    $112 = HEAP32[$96>>2]|0;
    $113 = ($111|0)==($112|0);
    if ($113) {
     $114 = $36;
     $115 = HEAP32[$114>>2]|0;
     $116 = (($115) + 40|0);
     $117 = HEAP32[$116>>2]|0;
     __THREW__ = 0;
     (invoke_ii($117|0,($36|0))|0);
     $118 = __THREW__; __THREW__ = 0;
     $119 = $118&1;
     if ($119) {
      label = 37;
      break;
     } else {
      $$pre$i$i$i4 = $36;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $120 = (($111) + 1|0);
     HEAP32[$94>>2] = $120;
     $$pre$i$i$i4 = $36;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 37) {
    $90 = ___cxa_find_matching_catch(-1,-1)|0;
    $91 = tempRet0;
    $lpad$phi$index = $90;$lpad$phi$index2 = $91;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $121 = $__grouping;
   $122 = HEAP8[$121]|0;
   $123 = $122 & 1;
   $124 = ($123<<24>>24)==(0);
   if ($124) {
    $127 = $122&255;
    $128 = $127 >>> 1;
    $129 = $128;
   } else {
    $125 = (($__grouping) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $129 = $126;
   }
   $130 = ($129|0)==(0);
   do {
    if (!($130)) {
     $131 = HEAP32[$__g_end>>2]|0;
     $132 = $131;
     $133 = $__g;
     $134 = (($132) - ($133))|0;
     $135 = ($134|0)<(160);
     if (!($135)) {
      break;
     }
     $136 = HEAP32[$__dc>>2]|0;
     $137 = (($131) + 4|0);
     HEAP32[$__g_end>>2] = $137;
     HEAP32[$131>>2] = $136;
    }
   } while(0);
   $138 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $139 = (invoke_iiiii(12,($__a$2|0),($138|0),($__err|0),($$0$i|0))|0);
   $140 = tempRet0;
   $141 = __THREW__; __THREW__ = 0;
   $142 = $141&1;
   if ($142) {
    break;
   }
   $143 = $__v;
   $144 = $143;
   HEAP32[$144>>2] = $139;
   $145 = (($143) + 4)|0;
   $146 = $145;
   HEAP32[$146>>2] = $140;
   $147 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$16,$147,$__err);
   $148 = ($36|0)==(0|0);
   do {
    if ($148) {
     $162 = 0;
    } else {
     $149 = (($36) + 12|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = (($36) + 16|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($150|0)==($152|0);
     if (!($153)) {
      $162 = $36;
      break;
     }
     $154 = $36;
     $155 = HEAP32[$154>>2]|0;
     $156 = (($155) + 36|0);
     $157 = HEAP32[$156>>2]|0;
     __THREW__ = 0;
     $158 = (invoke_ii($157|0,($36|0))|0);
     $159 = __THREW__; __THREW__ = 0;
     $160 = $159&1;
     if ($160) {
      break L6;
     }
     $161 = ($158|0)==(-1);
     if (!($161)) {
      $162 = $36;
      break;
     }
     HEAP32[$17>>2] = 0;
     $162 = 0;
    }
   } while(0);
   $163 = ($162|0)==(0|0);
   $164 = ($$pre$i2$i$i|0)==(0|0);
   do {
    if ($164) {
     label = 65;
    } else {
     $165 = (($$pre$i2$i$i) + 12|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = (($$pre$i2$i$i) + 16|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($166|0)==($168|0);
     if (!($169)) {
      if (!($163)) {
       break;
      }
      $181 = ($agg$result);
      HEAP32[$181>>2] = $162;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
     $170 = $$pre$i2$i$i;
     $171 = HEAP32[$170>>2]|0;
     $172 = (($171) + 36|0);
     $173 = HEAP32[$172>>2]|0;
     __THREW__ = 0;
     $174 = (invoke_ii($173|0,($$pre$i2$i$i|0))|0);
     $175 = __THREW__; __THREW__ = 0;
     $176 = $175&1;
     if ($176) {
      break L6;
     }
     $177 = ($174|0)==(-1);
     if ($177) {
      HEAP32[$18>>2] = 0;
      label = 65;
      break;
     }
     $178 = ($$pre$i2$i$i|0)==(0|0);
     $tmp$i$i = $163 ^ $178;
     if (!($tmp$i$i)) {
      break;
     }
     $181 = ($agg$result);
     HEAP32[$181>>2] = $162;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 65) {
     if ($163) {
      break;
     }
     $181 = ($agg$result);
     HEAP32[$181>>2] = $162;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $179 = HEAP32[$__err>>2]|0;
   $180 = $179 | 2;
   HEAP32[$__err>>2] = $180;
   $181 = ($agg$result);
   HEAP32[$181>>2] = $162;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $92 = ___cxa_find_matching_catch(-1,-1)|0;
 $93 = tempRet0;
 $lpad$phi$index = $92;$lpad$phi$index2 = $93;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $3 = ($__b);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1);
 HEAP32[$5>>2] = $4;
 $6 = ($__e);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($2);
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 $16 = $$byval_copy;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre31 = 0, $$pre32 = 0, $$pre34 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i19 = 0, $this2$i$i$i = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 280|0;
 $__atoms = sp;
 $__decimal_point = sp + 32|0;
 $__thousands_sep = sp + 40|0;
 $__grouping = sp + 48|0;
 $__buf = sp + 64|0;
 $__a_end = sp + 80|0;
 $__g = sp + 88|0;
 $__g_end = sp + 248|0;
 $__dc = sp + 256|0;
 $__in_units = sp + 264|0;
 $__exp = sp + 272|0;
 $1 = ($__atoms);
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(13,($__buf|0),10,0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 L1: do {
  if (!($3)) {
   $4 = HEAP8[$this2$i$i$i]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = $__buf;
    $10 = (($9) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $10;$$pre$phi35Z2D = $$pre34;$11 = $10;
   } else {
    $7 = (($__buf) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $$pre31 = $__buf;
    $$pre32 = (($$pre31) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $7;$11 = $8;
   }
   HEAP32[$__a_end>>2] = $11;
   $12 = $__g;
   $13 = ($__g);
   HEAP32[$__g_end>>2] = $13;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units] = 1;
   HEAP8[$__exp] = 69;
   $14 = ($__b);
   $15 = ($__e);
   $16 = ($__buf);
   $17 = (($__buf) + 4|0);
   $18 = HEAP8[$__decimal_point]|0;
   $19 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$14>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $11;
   L7: while(1) {
    $20 = ($$pre$i$i$i4|0)==(0|0);
    do {
     if ($20) {
      $34 = 0;
     } else {
      $21 = (($$pre$i$i$i4) + 12|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = (($$pre$i$i$i4) + 16|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($22|0)==($24|0);
      if (!($25)) {
       $34 = $$pre$i$i$i4;
       break;
      }
      $26 = $$pre$i$i$i4;
      $27 = HEAP32[$26>>2]|0;
      $28 = (($27) + 36|0);
      $29 = HEAP32[$28>>2]|0;
      __THREW__ = 0;
      $30 = (invoke_ii($29|0,($$pre$i$i$i4|0))|0);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       label = 33;
       break L7;
      }
      $33 = ($30|0)==(-1);
      if (!($33)) {
       $34 = $$pre$i$i$i4;
       break;
      }
      HEAP32[$14>>2] = 0;
      $34 = 0;
     }
    } while(0);
    $35 = ($34|0)==(0|0);
    $36 = HEAP32[$15>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 17;
     } else {
      $38 = (($36) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = (($36) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if (!($42)) {
       if ($35) {
        $51 = $36;
        break;
       } else {
        $$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L7;
       }
      }
      $43 = $36;
      $44 = HEAP32[$43>>2]|0;
      $45 = (($44) + 36|0);
      $46 = HEAP32[$45>>2]|0;
      __THREW__ = 0;
      $47 = (invoke_ii($46|0,($36|0))|0);
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      if ($49) {
       label = 33;
       break L7;
      }
      $50 = ($47|0)==(-1);
      if ($50) {
       HEAP32[$15>>2] = 0;
       label = 17;
       break;
      } else {
       if ($35) {
        $51 = $36;
        break;
       } else {
        $$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($35) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $51 = 0;
     }
    }
    $52 = HEAP32[$__a_end>>2]|0;
    $53 = $52;
    $54 = $__a$0;
    $55 = (($53) - ($54))|0;
    $56 = HEAP8[$this2$i$i$i]|0;
    $57 = $56 & 1;
    $58 = ($57<<24>>24)==(0);
    if ($58) {
     $60 = $56&255;
     $61 = $60 >>> 1;
     $62 = $61;
    } else {
     $59 = HEAP32[$17>>2]|0;
     $62 = $59;
    }
    $63 = ($55|0)==($62|0);
    if ($63) {
     if ($58) {
      $65 = $56&255;
      $66 = $65 >>> 1;
      $67 = $56&255;
      $68 = $67 >>> 1;
      $69 = $66;$70 = $68;
     } else {
      $64 = HEAP32[$17>>2]|0;
      $69 = $64;$70 = $64;
     }
     $71 = $70 << 1;
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($71|0),0);
     $72 = __THREW__; __THREW__ = 0;
     $73 = $72&1;
     if ($73) {
      label = 33;
      break;
     }
     $74 = HEAP8[$this2$i$i$i]|0;
     $75 = $74 & 1;
     $76 = ($75<<24>>24)==(0);
     if ($76) {
      $79 = 10;
     } else {
      $77 = HEAP32[$16>>2]|0;
      $78 = $77 & -2;
      $phitmp$i19 = (($78) + -1)|0;
      $79 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($79|0),0);
     $80 = __THREW__; __THREW__ = 0;
     $81 = $80&1;
     if ($81) {
      label = 33;
      break;
     }
     $82 = HEAP8[$this2$i$i$i]|0;
     $83 = $82 & 1;
     $84 = ($83<<24>>24)==(0);
     if ($84) {
      $86 = $$pre$phi33Z2D;
     } else {
      $85 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $86 = $85;
     }
     $87 = (($86) + ($69)|0);
     HEAP32[$__a_end>>2] = $87;
     $__a$1 = $86;
    } else {
     $__a$1 = $__a$0;
    }
    $92 = (($34) + 12|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (($34) + 16|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($93|0)==($95|0);
    if ($96) {
     $97 = $34;
     $98 = HEAP32[$97>>2]|0;
     $99 = (($98) + 36|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     $101 = (invoke_ii($100|0,($34|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 33;
      break;
     } else {
      $$0$i$i = $101;
     }
    } else {
     $104 = HEAP8[$93]|0;
     $105 = $104&255;
     $$0$i$i = $105;
    }
    $106 = $$0$i$i&255;
    $107 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($106,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$13,$__g_end,$__dc,$1)|0);
    $108 = ($107|0)==(0);
    if (!($108)) {
     $$pre$i2$i$i = $51;$__a$2 = $__a$1;
     break;
    }
    $109 = HEAP32[$92>>2]|0;
    $110 = HEAP32[$94>>2]|0;
    $111 = ($109|0)==($110|0);
    if ($111) {
     $112 = $34;
     $113 = HEAP32[$112>>2]|0;
     $114 = (($113) + 40|0);
     $115 = HEAP32[$114>>2]|0;
     __THREW__ = 0;
     (invoke_ii($115|0,($34|0))|0);
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if ($117) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $34;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $118 = (($109) + 1|0);
     HEAP32[$92>>2] = $118;
     $$pre$i$i$i4 = $34;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $88 = ___cxa_find_matching_catch(-1,-1)|0;
    $89 = tempRet0;
    $lpad$phi$index = $88;$lpad$phi$index2 = $89;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $119 = $__grouping;
   $120 = HEAP8[$119]|0;
   $121 = $120 & 1;
   $122 = ($121<<24>>24)==(0);
   if ($122) {
    $125 = $120&255;
    $126 = $125 >>> 1;
    $127 = $126;
   } else {
    $123 = (($__grouping) + 4|0);
    $124 = HEAP32[$123>>2]|0;
    $127 = $124;
   }
   $128 = ($127|0)==(0);
   do {
    if (!($128)) {
     $129 = HEAP8[$__in_units]|0;
     $130 = ($129<<24>>24)==(0);
     if ($130) {
      break;
     }
     $131 = HEAP32[$__g_end>>2]|0;
     $132 = $131;
     $133 = $__g;
     $134 = (($132) - ($133))|0;
     $135 = ($134|0)<(160);
     if (!($135)) {
      break;
     }
     $136 = HEAP32[$__dc>>2]|0;
     $137 = (($131) + 4|0);
     HEAP32[$__g_end>>2] = $137;
     HEAP32[$131>>2] = $136;
    }
   } while(0);
   $138 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $139 = (+invoke_diii(1,($__a$2|0),($138|0),($__err|0)));
   $140 = __THREW__; __THREW__ = 0;
   $141 = $140&1;
   if ($141) {
    break;
   }
   HEAPF32[$__v>>2] = $139;
   $142 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$13,$142,$__err);
   $143 = ($34|0)==(0|0);
   do {
    if ($143) {
     $157 = 0;
    } else {
     $144 = (($34) + 12|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = (($34) + 16|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = ($145|0)==($147|0);
     if (!($148)) {
      $157 = $34;
      break;
     }
     $149 = $34;
     $150 = HEAP32[$149>>2]|0;
     $151 = (($150) + 36|0);
     $152 = HEAP32[$151>>2]|0;
     __THREW__ = 0;
     $153 = (invoke_ii($152|0,($34|0))|0);
     $154 = __THREW__; __THREW__ = 0;
     $155 = $154&1;
     if ($155) {
      break L1;
     }
     $156 = ($153|0)==(-1);
     if (!($156)) {
      $157 = $34;
      break;
     }
     HEAP32[$14>>2] = 0;
     $157 = 0;
    }
   } while(0);
   $158 = ($157|0)==(0|0);
   $159 = ($$pre$i2$i$i|0)==(0|0);
   do {
    if ($159) {
     label = 62;
    } else {
     $160 = (($$pre$i2$i$i) + 12|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = (($$pre$i2$i$i) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($161|0)==($163|0);
     if (!($164)) {
      if (!($158)) {
       break;
      }
      $176 = ($agg$result);
      HEAP32[$176>>2] = $157;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
     $165 = $$pre$i2$i$i;
     $166 = HEAP32[$165>>2]|0;
     $167 = (($166) + 36|0);
     $168 = HEAP32[$167>>2]|0;
     __THREW__ = 0;
     $169 = (invoke_ii($168|0,($$pre$i2$i$i|0))|0);
     $170 = __THREW__; __THREW__ = 0;
     $171 = $170&1;
     if ($171) {
      break L1;
     }
     $172 = ($169|0)==(-1);
     if ($172) {
      HEAP32[$15>>2] = 0;
      label = 62;
      break;
     }
     $173 = ($$pre$i2$i$i|0)==(0|0);
     $tmp$i$i = $158 ^ $173;
     if (!($tmp$i$i)) {
      break;
     }
     $176 = ($agg$result);
     HEAP32[$176>>2] = $157;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 62) {
     if ($158) {
      break;
     }
     $176 = ($agg$result);
     HEAP32[$176>>2] = $157;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $174 = HEAP32[$__err>>2]|0;
   $175 = $174 | 2;
   HEAP32[$__err>>2] = $175;
   $176 = ($agg$result);
   HEAP32[$176>>2] = $157;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $90 = ___cxa_find_matching_catch(-1,-1)|0;
 $91 = tempRet0;
 $lpad$phi$index = $90;$lpad$phi$index2 = $91;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $3 = ($__b);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1);
 HEAP32[$5>>2] = $4;
 $6 = ($__e);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($2);
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 $16 = $$byval_copy;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre31 = 0, $$pre32 = 0, $$pre34 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i19 = 0, $this2$i$i$i = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 280|0;
 $__atoms = sp;
 $__decimal_point = sp + 32|0;
 $__thousands_sep = sp + 40|0;
 $__grouping = sp + 48|0;
 $__buf = sp + 64|0;
 $__a_end = sp + 80|0;
 $__g = sp + 88|0;
 $__g_end = sp + 248|0;
 $__dc = sp + 256|0;
 $__in_units = sp + 264|0;
 $__exp = sp + 272|0;
 $1 = ($__atoms);
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(13,($__buf|0),10,0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 L1: do {
  if (!($3)) {
   $4 = HEAP8[$this2$i$i$i]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = $__buf;
    $10 = (($9) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $10;$$pre$phi35Z2D = $$pre34;$11 = $10;
   } else {
    $7 = (($__buf) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $$pre31 = $__buf;
    $$pre32 = (($$pre31) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $7;$11 = $8;
   }
   HEAP32[$__a_end>>2] = $11;
   $12 = $__g;
   $13 = ($__g);
   HEAP32[$__g_end>>2] = $13;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units] = 1;
   HEAP8[$__exp] = 69;
   $14 = ($__b);
   $15 = ($__e);
   $16 = ($__buf);
   $17 = (($__buf) + 4|0);
   $18 = HEAP8[$__decimal_point]|0;
   $19 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$14>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $11;
   L7: while(1) {
    $20 = ($$pre$i$i$i4|0)==(0|0);
    do {
     if ($20) {
      $34 = 0;
     } else {
      $21 = (($$pre$i$i$i4) + 12|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = (($$pre$i$i$i4) + 16|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($22|0)==($24|0);
      if (!($25)) {
       $34 = $$pre$i$i$i4;
       break;
      }
      $26 = $$pre$i$i$i4;
      $27 = HEAP32[$26>>2]|0;
      $28 = (($27) + 36|0);
      $29 = HEAP32[$28>>2]|0;
      __THREW__ = 0;
      $30 = (invoke_ii($29|0,($$pre$i$i$i4|0))|0);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       label = 33;
       break L7;
      }
      $33 = ($30|0)==(-1);
      if (!($33)) {
       $34 = $$pre$i$i$i4;
       break;
      }
      HEAP32[$14>>2] = 0;
      $34 = 0;
     }
    } while(0);
    $35 = ($34|0)==(0|0);
    $36 = HEAP32[$15>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 17;
     } else {
      $38 = (($36) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = (($36) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if (!($42)) {
       if ($35) {
        $51 = $36;
        break;
       } else {
        $$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L7;
       }
      }
      $43 = $36;
      $44 = HEAP32[$43>>2]|0;
      $45 = (($44) + 36|0);
      $46 = HEAP32[$45>>2]|0;
      __THREW__ = 0;
      $47 = (invoke_ii($46|0,($36|0))|0);
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      if ($49) {
       label = 33;
       break L7;
      }
      $50 = ($47|0)==(-1);
      if ($50) {
       HEAP32[$15>>2] = 0;
       label = 17;
       break;
      } else {
       if ($35) {
        $51 = $36;
        break;
       } else {
        $$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($35) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $51 = 0;
     }
    }
    $52 = HEAP32[$__a_end>>2]|0;
    $53 = $52;
    $54 = $__a$0;
    $55 = (($53) - ($54))|0;
    $56 = HEAP8[$this2$i$i$i]|0;
    $57 = $56 & 1;
    $58 = ($57<<24>>24)==(0);
    if ($58) {
     $60 = $56&255;
     $61 = $60 >>> 1;
     $62 = $61;
    } else {
     $59 = HEAP32[$17>>2]|0;
     $62 = $59;
    }
    $63 = ($55|0)==($62|0);
    if ($63) {
     if ($58) {
      $65 = $56&255;
      $66 = $65 >>> 1;
      $67 = $56&255;
      $68 = $67 >>> 1;
      $69 = $66;$70 = $68;
     } else {
      $64 = HEAP32[$17>>2]|0;
      $69 = $64;$70 = $64;
     }
     $71 = $70 << 1;
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($71|0),0);
     $72 = __THREW__; __THREW__ = 0;
     $73 = $72&1;
     if ($73) {
      label = 33;
      break;
     }
     $74 = HEAP8[$this2$i$i$i]|0;
     $75 = $74 & 1;
     $76 = ($75<<24>>24)==(0);
     if ($76) {
      $79 = 10;
     } else {
      $77 = HEAP32[$16>>2]|0;
      $78 = $77 & -2;
      $phitmp$i19 = (($78) + -1)|0;
      $79 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($79|0),0);
     $80 = __THREW__; __THREW__ = 0;
     $81 = $80&1;
     if ($81) {
      label = 33;
      break;
     }
     $82 = HEAP8[$this2$i$i$i]|0;
     $83 = $82 & 1;
     $84 = ($83<<24>>24)==(0);
     if ($84) {
      $86 = $$pre$phi33Z2D;
     } else {
      $85 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $86 = $85;
     }
     $87 = (($86) + ($69)|0);
     HEAP32[$__a_end>>2] = $87;
     $__a$1 = $86;
    } else {
     $__a$1 = $__a$0;
    }
    $92 = (($34) + 12|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (($34) + 16|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($93|0)==($95|0);
    if ($96) {
     $97 = $34;
     $98 = HEAP32[$97>>2]|0;
     $99 = (($98) + 36|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     $101 = (invoke_ii($100|0,($34|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 33;
      break;
     } else {
      $$0$i$i = $101;
     }
    } else {
     $104 = HEAP8[$93]|0;
     $105 = $104&255;
     $$0$i$i = $105;
    }
    $106 = $$0$i$i&255;
    $107 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($106,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$13,$__g_end,$__dc,$1)|0);
    $108 = ($107|0)==(0);
    if (!($108)) {
     $$pre$i2$i$i = $51;$__a$2 = $__a$1;
     break;
    }
    $109 = HEAP32[$92>>2]|0;
    $110 = HEAP32[$94>>2]|0;
    $111 = ($109|0)==($110|0);
    if ($111) {
     $112 = $34;
     $113 = HEAP32[$112>>2]|0;
     $114 = (($113) + 40|0);
     $115 = HEAP32[$114>>2]|0;
     __THREW__ = 0;
     (invoke_ii($115|0,($34|0))|0);
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if ($117) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $34;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $118 = (($109) + 1|0);
     HEAP32[$92>>2] = $118;
     $$pre$i$i$i4 = $34;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $88 = ___cxa_find_matching_catch(-1,-1)|0;
    $89 = tempRet0;
    $lpad$phi$index = $88;$lpad$phi$index2 = $89;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $119 = $__grouping;
   $120 = HEAP8[$119]|0;
   $121 = $120 & 1;
   $122 = ($121<<24>>24)==(0);
   if ($122) {
    $125 = $120&255;
    $126 = $125 >>> 1;
    $127 = $126;
   } else {
    $123 = (($__grouping) + 4|0);
    $124 = HEAP32[$123>>2]|0;
    $127 = $124;
   }
   $128 = ($127|0)==(0);
   do {
    if (!($128)) {
     $129 = HEAP8[$__in_units]|0;
     $130 = ($129<<24>>24)==(0);
     if ($130) {
      break;
     }
     $131 = HEAP32[$__g_end>>2]|0;
     $132 = $131;
     $133 = $__g;
     $134 = (($132) - ($133))|0;
     $135 = ($134|0)<(160);
     if (!($135)) {
      break;
     }
     $136 = HEAP32[$__dc>>2]|0;
     $137 = (($131) + 4|0);
     HEAP32[$__g_end>>2] = $137;
     HEAP32[$131>>2] = $136;
    }
   } while(0);
   $138 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $139 = (+invoke_diii(2,($__a$2|0),($138|0),($__err|0)));
   $140 = __THREW__; __THREW__ = 0;
   $141 = $140&1;
   if ($141) {
    break;
   }
   HEAPF64[$__v>>3] = $139;
   $142 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$13,$142,$__err);
   $143 = ($34|0)==(0|0);
   do {
    if ($143) {
     $157 = 0;
    } else {
     $144 = (($34) + 12|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = (($34) + 16|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = ($145|0)==($147|0);
     if (!($148)) {
      $157 = $34;
      break;
     }
     $149 = $34;
     $150 = HEAP32[$149>>2]|0;
     $151 = (($150) + 36|0);
     $152 = HEAP32[$151>>2]|0;
     __THREW__ = 0;
     $153 = (invoke_ii($152|0,($34|0))|0);
     $154 = __THREW__; __THREW__ = 0;
     $155 = $154&1;
     if ($155) {
      break L1;
     }
     $156 = ($153|0)==(-1);
     if (!($156)) {
      $157 = $34;
      break;
     }
     HEAP32[$14>>2] = 0;
     $157 = 0;
    }
   } while(0);
   $158 = ($157|0)==(0|0);
   $159 = ($$pre$i2$i$i|0)==(0|0);
   do {
    if ($159) {
     label = 62;
    } else {
     $160 = (($$pre$i2$i$i) + 12|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = (($$pre$i2$i$i) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($161|0)==($163|0);
     if (!($164)) {
      if (!($158)) {
       break;
      }
      $176 = ($agg$result);
      HEAP32[$176>>2] = $157;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
     $165 = $$pre$i2$i$i;
     $166 = HEAP32[$165>>2]|0;
     $167 = (($166) + 36|0);
     $168 = HEAP32[$167>>2]|0;
     __THREW__ = 0;
     $169 = (invoke_ii($168|0,($$pre$i2$i$i|0))|0);
     $170 = __THREW__; __THREW__ = 0;
     $171 = $170&1;
     if ($171) {
      break L1;
     }
     $172 = ($169|0)==(-1);
     if ($172) {
      HEAP32[$15>>2] = 0;
      label = 62;
      break;
     }
     $173 = ($$pre$i2$i$i|0)==(0|0);
     $tmp$i$i = $158 ^ $173;
     if (!($tmp$i$i)) {
      break;
     }
     $176 = ($agg$result);
     HEAP32[$176>>2] = $157;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 62) {
     if ($158) {
      break;
     }
     $176 = ($agg$result);
     HEAP32[$176>>2] = $157;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $174 = HEAP32[$__err>>2]|0;
   $175 = $174 | 2;
   HEAP32[$__err>>2] = $175;
   $176 = ($agg$result);
   HEAP32[$176>>2] = $157;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $90 = ___cxa_find_matching_catch(-1,-1)|0;
 $91 = tempRet0;
 $lpad$phi$index = $90;$lpad$phi$index2 = $91;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $3 = ($__b);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1);
 HEAP32[$5>>2] = $4;
 $6 = ($__e);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($2);
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 $16 = $$byval_copy;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre31 = 0, $$pre32 = 0, $$pre34 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0;
 var $lpad$phi$index2 = 0, $phitmp$i19 = 0, $this2$i$i$i = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 280|0;
 $__atoms = sp;
 $__decimal_point = sp + 32|0;
 $__thousands_sep = sp + 40|0;
 $__grouping = sp + 48|0;
 $__buf = sp + 64|0;
 $__a_end = sp + 80|0;
 $__g = sp + 88|0;
 $__g_end = sp + 248|0;
 $__dc = sp + 256|0;
 $__in_units = sp + 264|0;
 $__exp = sp + 272|0;
 $1 = ($__atoms);
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$1,$__decimal_point,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(13,($__buf|0),10,0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 L1: do {
  if (!($3)) {
   $4 = HEAP8[$this2$i$i$i]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = $__buf;
    $10 = (($9) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $10;$$pre$phi35Z2D = $$pre34;$11 = $10;
   } else {
    $7 = (($__buf) + 8|0);
    $8 = HEAP32[$7>>2]|0;
    $$pre31 = $__buf;
    $$pre32 = (($$pre31) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $7;$11 = $8;
   }
   HEAP32[$__a_end>>2] = $11;
   $12 = $__g;
   $13 = ($__g);
   HEAP32[$__g_end>>2] = $13;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units] = 1;
   HEAP8[$__exp] = 69;
   $14 = ($__b);
   $15 = ($__e);
   $16 = ($__buf);
   $17 = (($__buf) + 4|0);
   $18 = HEAP8[$__decimal_point]|0;
   $19 = HEAP8[$__thousands_sep]|0;
   $$pre = HEAP32[$14>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $11;
   L7: while(1) {
    $20 = ($$pre$i$i$i4|0)==(0|0);
    do {
     if ($20) {
      $34 = 0;
     } else {
      $21 = (($$pre$i$i$i4) + 12|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = (($$pre$i$i$i4) + 16|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($22|0)==($24|0);
      if (!($25)) {
       $34 = $$pre$i$i$i4;
       break;
      }
      $26 = $$pre$i$i$i4;
      $27 = HEAP32[$26>>2]|0;
      $28 = (($27) + 36|0);
      $29 = HEAP32[$28>>2]|0;
      __THREW__ = 0;
      $30 = (invoke_ii($29|0,($$pre$i$i$i4|0))|0);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       label = 33;
       break L7;
      }
      $33 = ($30|0)==(-1);
      if (!($33)) {
       $34 = $$pre$i$i$i4;
       break;
      }
      HEAP32[$14>>2] = 0;
      $34 = 0;
     }
    } while(0);
    $35 = ($34|0)==(0|0);
    $36 = HEAP32[$15>>2]|0;
    $37 = ($36|0)==(0|0);
    do {
     if ($37) {
      label = 17;
     } else {
      $38 = (($36) + 12|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = (($36) + 16|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = ($39|0)==($41|0);
      if (!($42)) {
       if ($35) {
        $51 = $36;
        break;
       } else {
        $$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L7;
       }
      }
      $43 = $36;
      $44 = HEAP32[$43>>2]|0;
      $45 = (($44) + 36|0);
      $46 = HEAP32[$45>>2]|0;
      __THREW__ = 0;
      $47 = (invoke_ii($46|0,($36|0))|0);
      $48 = __THREW__; __THREW__ = 0;
      $49 = $48&1;
      if ($49) {
       label = 33;
       break L7;
      }
      $50 = ($47|0)==(-1);
      if ($50) {
       HEAP32[$15>>2] = 0;
       label = 17;
       break;
      } else {
       if ($35) {
        $51 = $36;
        break;
       } else {
        $$pre$i2$i$i = $36;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($35) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $51 = 0;
     }
    }
    $52 = HEAP32[$__a_end>>2]|0;
    $53 = $52;
    $54 = $__a$0;
    $55 = (($53) - ($54))|0;
    $56 = HEAP8[$this2$i$i$i]|0;
    $57 = $56 & 1;
    $58 = ($57<<24>>24)==(0);
    if ($58) {
     $60 = $56&255;
     $61 = $60 >>> 1;
     $62 = $61;
    } else {
     $59 = HEAP32[$17>>2]|0;
     $62 = $59;
    }
    $63 = ($55|0)==($62|0);
    if ($63) {
     if ($58) {
      $65 = $56&255;
      $66 = $65 >>> 1;
      $67 = $56&255;
      $68 = $67 >>> 1;
      $69 = $66;$70 = $68;
     } else {
      $64 = HEAP32[$17>>2]|0;
      $69 = $64;$70 = $64;
     }
     $71 = $70 << 1;
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($71|0),0);
     $72 = __THREW__; __THREW__ = 0;
     $73 = $72&1;
     if ($73) {
      label = 33;
      break;
     }
     $74 = HEAP8[$this2$i$i$i]|0;
     $75 = $74 & 1;
     $76 = ($75<<24>>24)==(0);
     if ($76) {
      $79 = 10;
     } else {
      $77 = HEAP32[$16>>2]|0;
      $78 = $77 & -2;
      $phitmp$i19 = (($78) + -1)|0;
      $79 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($79|0),0);
     $80 = __THREW__; __THREW__ = 0;
     $81 = $80&1;
     if ($81) {
      label = 33;
      break;
     }
     $82 = HEAP8[$this2$i$i$i]|0;
     $83 = $82 & 1;
     $84 = ($83<<24>>24)==(0);
     if ($84) {
      $86 = $$pre$phi33Z2D;
     } else {
      $85 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $86 = $85;
     }
     $87 = (($86) + ($69)|0);
     HEAP32[$__a_end>>2] = $87;
     $__a$1 = $86;
    } else {
     $__a$1 = $__a$0;
    }
    $92 = (($34) + 12|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = (($34) + 16|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($93|0)==($95|0);
    if ($96) {
     $97 = $34;
     $98 = HEAP32[$97>>2]|0;
     $99 = (($98) + 36|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     $101 = (invoke_ii($100|0,($34|0))|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 33;
      break;
     } else {
      $$0$i$i = $101;
     }
    } else {
     $104 = HEAP8[$93]|0;
     $105 = $104&255;
     $$0$i$i = $105;
    }
    $106 = $$0$i$i&255;
    $107 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($106,$__in_units,$__exp,$__a$1,$__a_end,$18,$19,$__grouping,$13,$__g_end,$__dc,$1)|0);
    $108 = ($107|0)==(0);
    if (!($108)) {
     $$pre$i2$i$i = $51;$__a$2 = $__a$1;
     break;
    }
    $109 = HEAP32[$92>>2]|0;
    $110 = HEAP32[$94>>2]|0;
    $111 = ($109|0)==($110|0);
    if ($111) {
     $112 = $34;
     $113 = HEAP32[$112>>2]|0;
     $114 = (($113) + 40|0);
     $115 = HEAP32[$114>>2]|0;
     __THREW__ = 0;
     (invoke_ii($115|0,($34|0))|0);
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if ($117) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $34;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $118 = (($109) + 1|0);
     HEAP32[$92>>2] = $118;
     $$pre$i$i$i4 = $34;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $88 = ___cxa_find_matching_catch(-1,-1)|0;
    $89 = tempRet0;
    $lpad$phi$index = $88;$lpad$phi$index2 = $89;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $119 = $__grouping;
   $120 = HEAP8[$119]|0;
   $121 = $120 & 1;
   $122 = ($121<<24>>24)==(0);
   if ($122) {
    $125 = $120&255;
    $126 = $125 >>> 1;
    $127 = $126;
   } else {
    $123 = (($__grouping) + 4|0);
    $124 = HEAP32[$123>>2]|0;
    $127 = $124;
   }
   $128 = ($127|0)==(0);
   do {
    if (!($128)) {
     $129 = HEAP8[$__in_units]|0;
     $130 = ($129<<24>>24)==(0);
     if ($130) {
      break;
     }
     $131 = HEAP32[$__g_end>>2]|0;
     $132 = $131;
     $133 = $__g;
     $134 = (($132) - ($133))|0;
     $135 = ($134|0)<(160);
     if (!($135)) {
      break;
     }
     $136 = HEAP32[$__dc>>2]|0;
     $137 = (($131) + 4|0);
     HEAP32[$__g_end>>2] = $137;
     HEAP32[$131>>2] = $136;
    }
   } while(0);
   $138 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $139 = (+invoke_diii(3,($__a$2|0),($138|0),($__err|0)));
   $140 = __THREW__; __THREW__ = 0;
   $141 = $140&1;
   if ($141) {
    break;
   }
   HEAPF64[$__v>>3] = $139;
   $142 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$13,$142,$__err);
   $143 = ($34|0)==(0|0);
   do {
    if ($143) {
     $157 = 0;
    } else {
     $144 = (($34) + 12|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = (($34) + 16|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = ($145|0)==($147|0);
     if (!($148)) {
      $157 = $34;
      break;
     }
     $149 = $34;
     $150 = HEAP32[$149>>2]|0;
     $151 = (($150) + 36|0);
     $152 = HEAP32[$151>>2]|0;
     __THREW__ = 0;
     $153 = (invoke_ii($152|0,($34|0))|0);
     $154 = __THREW__; __THREW__ = 0;
     $155 = $154&1;
     if ($155) {
      break L1;
     }
     $156 = ($153|0)==(-1);
     if (!($156)) {
      $157 = $34;
      break;
     }
     HEAP32[$14>>2] = 0;
     $157 = 0;
    }
   } while(0);
   $158 = ($157|0)==(0|0);
   $159 = ($$pre$i2$i$i|0)==(0|0);
   do {
    if ($159) {
     label = 62;
    } else {
     $160 = (($$pre$i2$i$i) + 12|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = (($$pre$i2$i$i) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($161|0)==($163|0);
     if (!($164)) {
      if (!($158)) {
       break;
      }
      $176 = ($agg$result);
      HEAP32[$176>>2] = $157;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
     $165 = $$pre$i2$i$i;
     $166 = HEAP32[$165>>2]|0;
     $167 = (($166) + 36|0);
     $168 = HEAP32[$167>>2]|0;
     __THREW__ = 0;
     $169 = (invoke_ii($168|0,($$pre$i2$i$i|0))|0);
     $170 = __THREW__; __THREW__ = 0;
     $171 = $170&1;
     if ($171) {
      break L1;
     }
     $172 = ($169|0)==(-1);
     if ($172) {
      HEAP32[$15>>2] = 0;
      label = 62;
      break;
     }
     $173 = ($$pre$i2$i$i|0)==(0|0);
     $tmp$i$i = $158 ^ $173;
     if (!($tmp$i$i)) {
      break;
     }
     $176 = ($agg$result);
     HEAP32[$176>>2] = $157;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 62) {
     if ($158) {
      break;
     }
     $176 = ($agg$result);
     HEAP32[$176>>2] = $157;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $174 = HEAP32[$__err>>2]|0;
   $175 = $174 | 2;
   HEAP32[$__err>>2] = $175;
   $176 = ($agg$result);
   HEAP32[$176>>2] = $157;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $90 = ___cxa_find_matching_catch(-1,-1)|0;
 $91 = tempRet0;
 $lpad$phi$index = $90;$lpad$phi$index2 = $91;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$0$lcssa$i$i = 0, $$01 = 0, $$01$i$i = 0, $$01$i$i$phi = 0, $$ph = 0, $$ph31 = 0, $$ph32 = 0, $$pre = 0, $$pre$i$i$i9 = 0, $$pre$phi39Z2D = 0, $$pre$phi41Z2D = 0, $$pre37 = 0, $$pre38 = 0, $$pre40 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__atoms = 0, $__buf = 0, $__g = 0, $__grouping = 0, $__p$i$i$i$i = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0, $phitmp$i22 = 0, $this2$i$i$i = 0, $this2$i$i$i6 = 0, $tmp$i$i = 0, $vararg_buffer = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $vararg_buffer = sp;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__p$i$i$i$i = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__atoms = STACKTOP; STACKTOP = STACKTOP + 32|0;
 $__grouping = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__buf = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__g = STACKTOP; STACKTOP = STACKTOP + 160|0;
 $this2$i$i$i = $__grouping;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(49,($1|0),($__iob|0));
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $133 = ___cxa_find_matching_catch(-1,-1)|0;
  $134 = tempRet0;
  $$0 = $133;$$01 = $134;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($$0|0);
  // unreachable;
 }
 $4 = ($1);
 $5 = HEAP32[$4>>2]|0;
 $6 = $__p$i$i$i$i;
 $7 = HEAP32[((9136))>>2]|0;
 $8 = ($7|0)==(-1);
 if ($8) {
  label = 4;
 } else {
  $9 = ($__p$i$i$i$i);
  HEAP32[$9>>2] = (9136);
  $10 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$10>>2] = (183);
  $11 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$11>>2] = 0;
  __THREW__ = 0;
  invoke_viii(25,(((9136))|0),($6|0),(184|0));
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if (!($13)) {
   label = 4;
  }
 }
 L7: do {
  if ((label|0) == 4) {
   $14 = HEAP32[(((9136) + 4|0))>>2]|0;
   $15 = (($14) + -1)|0;
   $16 = (($5) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($5) + 8|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $17;
   $21 = $19;
   $22 = (($20) - ($21))|0;
   $23 = $22 >> 2;
   $24 = ($23>>>0)>($15>>>0);
   do {
    if ($24) {
     $25 = (($19) + ($15<<2)|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==(0|0);
     if ($27) {
      break;
     }
     $32 = $26;
     $33 = ($__atoms);
     $34 = $26;
     $35 = HEAP32[$34>>2]|0;
     $36 = (($35) + 32|0);
     $37 = HEAP32[$36>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($37|0,($32|0),((7680)|0),(((7680 + 26|0))|0),($33|0))|0);
     $38 = __THREW__; __THREW__ = 0;
     $39 = $38&1;
     if ($39) {
      break L7;
     }
     $40 = HEAP32[$4>>2]|0;
     $41 = ($40);
     (__ZNSt3__114__shared_count16__release_sharedEv($41)|0);
     $this2$i$i$i6 = $__buf;
     ;HEAP32[$this2$i$i$i6+0>>2]=0|0;HEAP32[$this2$i$i$i6+4>>2]=0|0;HEAP32[$this2$i$i$i6+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),10,0);
     $42 = __THREW__; __THREW__ = 0;
     $43 = $42&1;
     L13: do {
      if ($43) {
       label = 44;
      } else {
       $44 = HEAP8[$this2$i$i$i6]|0;
       $45 = $44 & 1;
       $46 = ($45<<24>>24)==(0);
       if ($46) {
        $49 = $__buf;
        $50 = (($49) + 1|0);
        $$pre40 = (($__buf) + 8|0);
        $$pre$phi39Z2D = $50;$$pre$phi41Z2D = $$pre40;$51 = $50;
       } else {
        $47 = (($__buf) + 8|0);
        $48 = HEAP32[$47>>2]|0;
        $$pre37 = $__buf;
        $$pre38 = (($$pre37) + 1|0);
        $$pre$phi39Z2D = $$pre38;$$pre$phi41Z2D = $47;$51 = $48;
       }
       $52 = $__g;
       $53 = ($__g);
       $54 = ($__b);
       $55 = ($__e);
       $56 = ($__buf);
       $57 = (($__buf) + 4|0);
       $58 = (($__atoms) + 24|0);
       $59 = (($__atoms) + 25|0);
       $60 = $__g;
       $61 = (($__atoms) + 26|0);
       $62 = $__atoms;
       $63 = (($__grouping) + 4|0);
       $$pre = HEAP32[$54>>2]|0;
       $$pre$i$i$i9 = $$pre;$64 = $51;$65 = $53;$66 = 0;$__a$0 = $51;
       L19: while(1) {
        $67 = ($$pre$i$i$i9|0)==(0|0);
        do {
         if ($67) {
          $81 = 0;
         } else {
          $68 = (($$pre$i$i$i9) + 12|0);
          $69 = HEAP32[$68>>2]|0;
          $70 = (($$pre$i$i$i9) + 16|0);
          $71 = HEAP32[$70>>2]|0;
          $72 = ($69|0)==($71|0);
          if (!($72)) {
           $81 = $$pre$i$i$i9;
           break;
          }
          $73 = $$pre$i$i$i9;
          $74 = HEAP32[$73>>2]|0;
          $75 = (($74) + 36|0);
          $76 = HEAP32[$75>>2]|0;
          __THREW__ = 0;
          $77 = (invoke_ii($76|0,($$pre$i$i$i9|0))|0);
          $78 = __THREW__; __THREW__ = 0;
          $79 = $78&1;
          if ($79) {
           label = 43;
           break L19;
          }
          $80 = ($77|0)==(-1);
          if (!($80)) {
           $81 = $$pre$i$i$i9;
           break;
          }
          HEAP32[$54>>2] = 0;
          $81 = 0;
         }
        } while(0);
        $82 = ($81|0)==(0|0);
        $83 = HEAP32[$55>>2]|0;
        $84 = ($83|0)==(0|0);
        do {
         if ($84) {
          label = 25;
         } else {
          $85 = (($83) + 12|0);
          $86 = HEAP32[$85>>2]|0;
          $87 = (($83) + 16|0);
          $88 = HEAP32[$87>>2]|0;
          $89 = ($86|0)==($88|0);
          if (!($89)) {
           if ($82) {
            break;
           } else {
            $__a$2 = $__a$0;
            break L19;
           }
          }
          $90 = $83;
          $91 = HEAP32[$90>>2]|0;
          $92 = (($91) + 36|0);
          $93 = HEAP32[$92>>2]|0;
          __THREW__ = 0;
          $94 = (invoke_ii($93|0,($83|0))|0);
          $95 = __THREW__; __THREW__ = 0;
          $96 = $95&1;
          if ($96) {
           label = 43;
           break L19;
          }
          $97 = ($94|0)==(-1);
          if ($97) {
           HEAP32[$55>>2] = 0;
           label = 25;
           break;
          } else {
           if ($82) {
            break;
           } else {
            $__a$2 = $__a$0;
            break L19;
           }
          }
         }
        } while(0);
        if ((label|0) == 25) {
         label = 0;
         if ($82) {
          $__a$2 = $__a$0;
          break;
         }
        }
        $98 = $64;
        $99 = $__a$0;
        $100 = (($98) - ($99))|0;
        $101 = HEAP8[$this2$i$i$i6]|0;
        $102 = $101 & 1;
        $103 = ($102<<24>>24)==(0);
        if ($103) {
         $105 = $101&255;
         $106 = $105 >>> 1;
         $107 = $106;
        } else {
         $104 = HEAP32[$57>>2]|0;
         $107 = $104;
        }
        $108 = ($100|0)==($107|0);
        if ($108) {
         if ($103) {
          $110 = $101&255;
          $111 = $110 >>> 1;
          $112 = $101&255;
          $113 = $112 >>> 1;
          $114 = $111;$115 = $113;
         } else {
          $109 = HEAP32[$57>>2]|0;
          $114 = $109;$115 = $109;
         }
         $116 = $115 << 1;
         __THREW__ = 0;
         invoke_viii(13,($__buf|0),($116|0),0);
         $117 = __THREW__; __THREW__ = 0;
         $118 = $117&1;
         if ($118) {
          label = 43;
          break;
         }
         $119 = HEAP8[$this2$i$i$i6]|0;
         $120 = $119 & 1;
         $121 = ($120<<24>>24)==(0);
         if ($121) {
          $124 = 10;
         } else {
          $122 = HEAP32[$56>>2]|0;
          $123 = $122 & -2;
          $phitmp$i22 = (($123) + -1)|0;
          $124 = $phitmp$i22;
         }
         __THREW__ = 0;
         invoke_viii(13,($__buf|0),($124|0),0);
         $125 = __THREW__; __THREW__ = 0;
         $126 = $125&1;
         if ($126) {
          label = 43;
          break;
         }
         $127 = HEAP8[$this2$i$i$i6]|0;
         $128 = $127 & 1;
         $129 = ($128<<24>>24)==(0);
         if ($129) {
          $131 = $$pre$phi39Z2D;
         } else {
          $130 = HEAP32[$$pre$phi41Z2D>>2]|0;
          $131 = $130;
         }
         $132 = (($131) + ($114)|0);
         $143 = $132;$__a$1 = $131;
        } else {
         $143 = $64;$__a$1 = $__a$0;
        }
        $144 = (($81) + 12|0);
        $145 = HEAP32[$144>>2]|0;
        $146 = (($81) + 16|0);
        $147 = HEAP32[$146>>2]|0;
        $148 = ($145|0)==($147|0);
        if ($148) {
         $149 = $81;
         $150 = HEAP32[$149>>2]|0;
         $151 = (($150) + 36|0);
         $152 = HEAP32[$151>>2]|0;
         __THREW__ = 0;
         $153 = (invoke_ii($152|0,($81|0))|0);
         $154 = __THREW__; __THREW__ = 0;
         $155 = $154&1;
         if ($155) {
          label = 43;
          break;
         } else {
          $$0$i$i = $153;
         }
        } else {
         $156 = HEAP8[$145]|0;
         $157 = $156&255;
         $$0$i$i = $157;
        }
        $158 = $$0$i$i&255;
        $159 = ($143|0)==($__a$1|0);
        do {
         if ($159) {
          $160 = HEAP8[$58]|0;
          $161 = ($160<<24>>24)==($158<<24>>24);
          if (!($161)) {
           $162 = HEAP8[$59]|0;
           $163 = ($162<<24>>24)==($158<<24>>24);
           if (!($163)) {
            label = 53;
            break;
           }
          }
          $164 = $161 ? 43 : 45;
          $165 = (($143) + 1|0);
          HEAP8[$143] = $164;
          $$ph = $165;$$ph31 = $65;$$ph32 = 0;
         } else {
          label = 53;
         }
        } while(0);
        do {
         if ((label|0) == 53) {
          label = 0;
          $166 = HEAP8[$this2$i$i$i]|0;
          $167 = $166 & 1;
          $168 = ($167<<24>>24)==(0);
          if ($168) {
           $170 = $166&255;
           $171 = $170 >>> 1;
           $172 = $171;
          } else {
           $169 = HEAP32[$63>>2]|0;
           $172 = $169;
          }
          $173 = ($172|0)!=(0);
          $174 = ($158<<24>>24)==(0);
          $or$cond$i = $173 & $174;
          if ($or$cond$i) {
           $175 = $65;
           $176 = (($175) - ($60))|0;
           $177 = ($176|0)<(160);
           if (!($177)) {
            $$ph = $143;$$ph31 = $65;$$ph32 = $66;
            break;
           }
           $178 = (($65) + 4|0);
           HEAP32[$65>>2] = $66;
           $$ph = $143;$$ph31 = $178;$$ph32 = 0;
           break;
          } else {
           $$01$i$i = $33;
          }
          while(1) {
           $180 = HEAP8[$$01$i$i]|0;
           $181 = ($180<<24>>24)==($158<<24>>24);
           $182 = (($$01$i$i) + 1|0);
           if ($181) {
            $$0$lcssa$i$i = $$01$i$i;
            break;
           }
           $179 = ($182|0)==($61|0);
           if ($179) {
            $$0$lcssa$i$i = $61;
            break;
           } else {
            $$01$i$i$phi = $182;$$01$i$i = $$01$i$i$phi;
           }
          }
          $183 = $$0$lcssa$i$i;
          $184 = (($183) - ($62))|0;
          $185 = ($184|0)>(23);
          if ($185) {
           $__a$2 = $__a$1;
           break L19;
          }
          $186 = ($184|0)<(22);
          if ($186) {
           $197 = (7680 + ($184)|0);
           $198 = HEAP8[$197]|0;
           $199 = (($143) + 1|0);
           HEAP8[$143] = $198;
           $200 = (($66) + 1)|0;
           $$ph = $199;$$ph31 = $65;$$ph32 = $200;
           break;
          }
          if ($159) {
           $__a$2 = $143;
           break L19;
          }
          $187 = $143;
          $188 = $__a$1;
          $189 = (($187) - ($188))|0;
          $190 = ($189|0)<(3);
          if (!($190)) {
           $__a$2 = $__a$1;
           break L19;
          }
          $191 = (($143) + -1|0);
          $192 = HEAP8[$191]|0;
          $193 = ($192<<24>>24)==(48);
          if (!($193)) {
           $__a$2 = $__a$1;
           break L19;
          }
          $194 = (7680 + ($184)|0);
          $195 = HEAP8[$194]|0;
          $196 = (($143) + 1|0);
          HEAP8[$143] = $195;
          $$ph = $196;$$ph31 = $65;$$ph32 = 0;
         }
        } while(0);
        $201 = HEAP32[$54>>2]|0;
        $202 = (($201) + 12|0);
        $203 = HEAP32[$202>>2]|0;
        $204 = (($201) + 16|0);
        $205 = HEAP32[$204>>2]|0;
        $206 = ($203|0)==($205|0);
        if ($206) {
         $207 = $201;
         $208 = HEAP32[$207>>2]|0;
         $209 = (($208) + 40|0);
         $210 = HEAP32[$209>>2]|0;
         __THREW__ = 0;
         (invoke_ii($210|0,($201|0))|0);
         $211 = __THREW__; __THREW__ = 0;
         $212 = $211&1;
         if ($212) {
          label = 43;
          break;
         } else {
          $$pre$i$i$i9 = $201;$64 = $$ph;$65 = $$ph31;$66 = $$ph32;$__a$0 = $__a$1;
          continue;
         }
        } else {
         $213 = (($203) + 1|0);
         HEAP32[$202>>2] = $213;
         $$pre$i$i$i9 = $201;$64 = $$ph;$65 = $$ph31;$66 = $$ph32;$__a$0 = $__a$1;
         continue;
        }
       }
       if ((label|0) == 43) {
        $139 = ___cxa_find_matching_catch(-1,-1)|0;
        $140 = tempRet0;
        $eh$lpad$body$index3Z2D = $140;$eh$lpad$body$indexZ2D = $139;
        break;
       }
       $214 = (($__a$2) + 3|0);
       HEAP8[$214] = 0;
       $215 = HEAP8[(9032)]|0;
       $216 = ($215<<24>>24)==(0);
       do {
        if ($216) {
         $217 = (___cxa_guard_acquire(((9032)|0))|0);
         $218 = ($217|0)==(0);
         if ($218) {
          break;
         }
         __THREW__ = 0;
         $219 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
         $220 = __THREW__; __THREW__ = 0;
         $221 = $220&1;
         if ($221) {
          $222 = ___cxa_find_matching_catch(-1,-1)|0;
          $223 = tempRet0;
          ___cxa_guard_abort(((9032)|0));
          $eh$lpad$body$index3Z2D = $223;$eh$lpad$body$indexZ2D = $222;
          break L13;
         } else {
          HEAP32[(9024)>>2] = $219;
          ___cxa_guard_release(((9032)|0));
          break;
         }
        }
       } while(0);
       $224 = HEAP32[(9024)>>2]|0;
       __THREW__ = 0;
       $vararg_ptr = ($vararg_buffer);
       HEAP32[$vararg_ptr>>2] = $__v;
       $225 = (invoke_iiiii(13,($__a$2|0),($224|0),((7720)|0),($vararg_buffer|0))|0);
       $226 = __THREW__; __THREW__ = 0;
       $227 = $226&1;
       if ($227) {
        label = 44;
        break;
       }
       $228 = ($225|0)==(1);
       if (!($228)) {
        HEAP32[$__err>>2] = 4;
       }
       $229 = HEAP32[$54>>2]|0;
       $230 = ($229|0)==(0|0);
       do {
        if ($230) {
         $244 = 0;
        } else {
         $231 = (($229) + 12|0);
         $232 = HEAP32[$231>>2]|0;
         $233 = (($229) + 16|0);
         $234 = HEAP32[$233>>2]|0;
         $235 = ($232|0)==($234|0);
         if (!($235)) {
          $244 = $229;
          break;
         }
         $236 = $229;
         $237 = HEAP32[$236>>2]|0;
         $238 = (($237) + 36|0);
         $239 = HEAP32[$238>>2]|0;
         __THREW__ = 0;
         $240 = (invoke_ii($239|0,($229|0))|0);
         $241 = __THREW__; __THREW__ = 0;
         $242 = $241&1;
         if ($242) {
          label = 44;
          break L13;
         }
         $243 = ($240|0)==(-1);
         if (!($243)) {
          $244 = $229;
          break;
         }
         HEAP32[$54>>2] = 0;
         $244 = 0;
        }
       } while(0);
       $245 = ($244|0)==(0|0);
       $246 = HEAP32[$55>>2]|0;
       $247 = ($246|0)==(0|0);
       do {
        if ($247) {
         label = 90;
        } else {
         $248 = (($246) + 12|0);
         $249 = HEAP32[$248>>2]|0;
         $250 = (($246) + 16|0);
         $251 = HEAP32[$250>>2]|0;
         $252 = ($249|0)==($251|0);
         if (!($252)) {
          if (!($245)) {
           break;
          }
          $264 = ($agg$result);
          HEAP32[$264>>2] = $244;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
          STACKTOP = sp;return;
         }
         $253 = $246;
         $254 = HEAP32[$253>>2]|0;
         $255 = (($254) + 36|0);
         $256 = HEAP32[$255>>2]|0;
         __THREW__ = 0;
         $257 = (invoke_ii($256|0,($246|0))|0);
         $258 = __THREW__; __THREW__ = 0;
         $259 = $258&1;
         if ($259) {
          label = 44;
          break L13;
         }
         $260 = ($257|0)==(-1);
         if ($260) {
          HEAP32[$55>>2] = 0;
          label = 90;
          break;
         }
         $261 = ($246|0)==(0|0);
         $tmp$i$i = $245 ^ $261;
         if (!($tmp$i$i)) {
          break;
         }
         $264 = ($agg$result);
         HEAP32[$264>>2] = $244;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
         STACKTOP = sp;return;
        }
       } while(0);
       do {
        if ((label|0) == 90) {
         if ($245) {
          break;
         }
         $264 = ($agg$result);
         HEAP32[$264>>2] = $244;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
         STACKTOP = sp;return;
        }
       } while(0);
       $262 = HEAP32[$__err>>2]|0;
       $263 = $262 | 2;
       HEAP32[$__err>>2] = $263;
       $264 = ($agg$result);
       HEAP32[$264>>2] = $244;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     } while(0);
     if ((label|0) == 44) {
      $141 = ___cxa_find_matching_catch(-1,-1)|0;
      $142 = tempRet0;
      $eh$lpad$body$index3Z2D = $142;$eh$lpad$body$indexZ2D = $141;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index3Z2D;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     ___resumeException($$0|0);
     // unreachable;
    }
   } while(0);
   $28 = (___cxa_allocate_exception(4)|0);
   $29 = $28;
   __ZNSt8bad_castC2Ev($29);
   __THREW__ = 0;
   invoke_viii(12,($28|0),((17096)|0),((143)|0));
   $30 = __THREW__; __THREW__ = 0;
   $31 = $30&1;
   if ($31) {
    break;
   }
   // unreachable;
  }
 } while(0);
 $135 = ___cxa_find_matching_catch(-1,-1)|0;
 $136 = tempRet0;
 $137 = HEAP32[$4>>2]|0;
 $138 = ($137);
 (__ZNSt3__114__shared_count16__release_sharedEv($138)|0);
 $$0 = $135;$$01 = $136;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $$01$i$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$__a_end>>2]|0;
 $2 = ($1|0)==($__a|0);
 do {
  if ($2) {
   $3 = (($__atoms) + 24|0);
   $4 = HEAP8[$3]|0;
   $5 = ($4<<24>>24)==($__ct<<24>>24);
   if (!($5)) {
    $6 = (($__atoms) + 25|0);
    $7 = HEAP8[$6]|0;
    $8 = ($7<<24>>24)==($__ct<<24>>24);
    if (!($8)) {
     break;
    }
   }
   $9 = $5 ? 43 : 45;
   $10 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $10;
   HEAP8[$__a] = $9;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $11 = $__grouping;
 $12 = HEAP8[$11]|0;
 $13 = $12 & 1;
 $14 = ($13<<24>>24)==(0);
 if ($14) {
  $17 = $12&255;
  $18 = $17 >>> 1;
  $19 = $18;
 } else {
  $15 = (($__grouping) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $19 = $16;
 }
 $20 = ($19|0)!=(0);
 $21 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 $or$cond = $20 & $21;
 if ($or$cond) {
  $22 = HEAP32[$__g_end>>2]|0;
  $23 = $22;
  $24 = $__g;
  $25 = (($23) - ($24))|0;
  $26 = ($25|0)<(160);
  if (!($26)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $27 = HEAP32[$__dc>>2]|0;
  $28 = (($22) + 4|0);
  HEAP32[$__g_end>>2] = $28;
  HEAP32[$22>>2] = $27;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $29 = (($__atoms) + 26|0);
 $$01$i = $__atoms;
 while(1) {
  $31 = HEAP8[$$01$i]|0;
  $32 = ($31<<24>>24)==($__ct<<24>>24);
  $33 = (($$01$i) + 1|0);
  if ($32) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $30 = ($33|0)==($29|0);
  if ($30) {
   $$0$lcssa$i = $29;
   break;
  } else {
   $$01$i$phi = $33;$$01$i = $$01$i$phi;
  }
 }
 $34 = $$0$lcssa$i;
 $35 = $__atoms;
 $36 = (($34) - ($35))|0;
 $37 = ($36|0)>(23);
 if ($37) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 do {
  if ((($__base|0) == 10) | (($__base|0) == 8)) {
   $38 = ($36|0)<($__base|0);
   if ($38) {
    break;
   } else {
    $$0 = -1;
   }
   STACKTOP = sp;return ($$0|0);
  } else if ((($__base|0) == 16)) {
   $39 = ($36|0)<(22);
   if ($39) {
    break;
   }
   if ($2) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $40 = $1;
   $41 = $__a;
   $42 = (($40) - ($41))|0;
   $43 = ($42|0)<(3);
   if (!($43)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $44 = (($1) + -1|0);
   $45 = HEAP8[$44]|0;
   $46 = ($45<<24>>24)==(48);
   if (!($46)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $47 = (7680 + ($36)|0);
   $48 = HEAP8[$47]|0;
   $49 = (($1) + 1|0);
   HEAP32[$__a_end>>2] = $49;
   HEAP8[$1] = $48;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $50 = (7680 + ($36)|0);
 $51 = HEAP8[$50]|0;
 $52 = (($1) + 1|0);
 HEAP32[$__a_end>>2] = $52;
 HEAP8[$1] = $51;
 $53 = HEAP32[$__dc>>2]|0;
 $54 = (($53) + 1)|0;
 HEAP32[$__dc>>2] = $54;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__va = 0, $arglist = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 $1 = ($__va);
 $2 = $__va;
 $arglist = $2;
 HEAP32[$arglist>>2] = $varargs;
 $3 = (_uselocale(($__l|0))|0);
 $4 = (_vsscanf(($__s|0),($__format|0),($1|0))|0);
 $5 = ($3|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return ($4|0);
 }
 __THREW__ = 0;
 (invoke_ii(93,($3|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable;
 } else {
  STACKTOP = sp;return ($4|0);
 }
 return 0|0;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $137$phi = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lv = 0, $__names = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 136|0;
 $$byval_copy2 = sp;
 $$byval_copy1 = sp + 8|0;
 $$byval_copy = sp + 16|0;
 $__p$i$i$i$i4 = sp + 24|0;
 $__p$i$i$i$i = sp + 40|0;
 $__lv = sp + 56|0;
 $1 = sp + 64|0;
 $2 = sp + 72|0;
 $3 = sp + 80|0;
 $4 = sp + 88|0;
 $5 = sp + 96|0;
 $__names = sp + 104|0;
 $6 = sp + 128|0;
 $7 = (($__iob) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  HEAP32[$__lv>>2] = -1;
  $11 = $this;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($__b);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($2);
  HEAP32[$17>>2] = $16;
  $18 = ($__e);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($3);
  HEAP32[$20>>2] = $19;
  $21 = $$byval_copy;
  $22 = $$byval_copy;
  $23 = $2;
  ;HEAP32[$22+0>>2]=HEAP32[$23+0>>2]|0;
  $24 = $$byval_copy1;
  $25 = $$byval_copy1;
  $26 = $3;
  ;HEAP32[$25+0>>2]=HEAP32[$26+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$14 & 63]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv);
  $27 = $$byval_copy1;
  $28 = $$byval_copy;
  $29 = ($1);
  $30 = HEAP32[$29>>2]|0;
  HEAP32[$15>>2] = $30;
  $31 = HEAP32[$__lv>>2]|0;
  if ((($31|0) == 1)) {
   HEAP8[$__v] = 1;
  } else if ((($31|0) == 0)) {
   HEAP8[$__v] = 0;
  } else {
   HEAP8[$__v] = 1;
   HEAP32[$__err>>2] = 4;
  }
  $32 = ($agg$result);
  HEAP32[$32>>2] = $30;
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($4,$__iob);
 $33 = ($4);
 $34 = HEAP32[$33>>2]|0;
 $35 = $__p$i$i$i$i;
 $36 = HEAP32[((9128))>>2]|0;
 $37 = ($36|0)==(-1);
 if ($37) {
  label = 9;
 } else {
  $38 = ($__p$i$i$i$i);
  HEAP32[$38>>2] = (9128);
  $39 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$39>>2] = (183);
  $40 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$40>>2] = 0;
  __THREW__ = 0;
  invoke_viii(25,(((9128))|0),($35|0),(184|0));
  $41 = __THREW__; __THREW__ = 0;
  $42 = $41&1;
  if (!($42)) {
   label = 9;
  }
 }
 do {
  if ((label|0) == 9) {
   $43 = HEAP32[(((9128) + 4|0))>>2]|0;
   $44 = (($43) + -1)|0;
   $45 = (($34) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($34) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $46;
   $50 = $48;
   $51 = (($49) - ($50))|0;
   $52 = $51 >> 2;
   $53 = ($52>>>0)>($44>>>0);
   do {
    if ($53) {
     $54 = (($48) + ($44<<2)|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==(0|0);
     if ($56) {
      break;
     }
     $61 = $55;
     $62 = HEAP32[$33>>2]|0;
     $63 = ($62);
     (__ZNSt3__114__shared_count16__release_sharedEv($63)|0);
     __ZNKSt3__18ios_base6getlocEv($5,$__iob);
     $64 = ($5);
     $65 = HEAP32[$64>>2]|0;
     $66 = $__p$i$i$i$i4;
     $67 = HEAP32[((9288))>>2]|0;
     $68 = ($67|0)==(-1);
     if ($68) {
      label = 15;
     } else {
      $69 = ($__p$i$i$i$i4);
      HEAP32[$69>>2] = (9288);
      $70 = (($__p$i$i$i$i4) + 4|0);
      HEAP32[$70>>2] = (183);
      $71 = (($__p$i$i$i$i4) + 8|0);
      HEAP32[$71>>2] = 0;
      __THREW__ = 0;
      invoke_viii(25,(((9288))|0),($66|0),(184|0));
      $72 = __THREW__; __THREW__ = 0;
      $73 = $72&1;
      if (!($73)) {
       label = 15;
      }
     }
     do {
      if ((label|0) == 15) {
       $74 = HEAP32[(((9288) + 4|0))>>2]|0;
       $75 = (($74) + -1)|0;
       $76 = (($65) + 12|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = (($65) + 8|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = $77;
       $81 = $79;
       $82 = (($80) - ($81))|0;
       $83 = $82 >> 2;
       $84 = ($83>>>0)>($75>>>0);
       do {
        if ($84) {
         $85 = (($79) + ($75<<2)|0);
         $86 = HEAP32[$85>>2]|0;
         $87 = ($86|0)==(0|0);
         if ($87) {
          break;
         }
         $92 = $86;
         $93 = HEAP32[$64>>2]|0;
         $94 = ($93);
         (__ZNSt3__114__shared_count16__release_sharedEv($94)|0);
         $95 = ($__names);
         $96 = $86;
         $97 = HEAP32[$96>>2]|0;
         $98 = (($97) + 24|0);
         $99 = HEAP32[$98>>2]|0;
         __THREW__ = 0;
         invoke_vii($99|0,($95|0),($92|0));
         $100 = __THREW__; __THREW__ = 0;
         $101 = $100&1;
         do {
          if ($101) {
           $$02 = $95;
          } else {
           $102 = (($__names) + 12|0);
           $103 = HEAP32[$96>>2]|0;
           $104 = (($103) + 28|0);
           $105 = HEAP32[$104>>2]|0;
           __THREW__ = 0;
           invoke_vii($105|0,($102|0),($92|0));
           $106 = __THREW__; __THREW__ = 0;
           $107 = $106&1;
           if ($107) {
            $$02 = $102;
            break;
           }
           $108 = ($__e);
           $109 = HEAP32[$108>>2]|0;
           $110 = ($6);
           HEAP32[$110>>2] = $109;
           $111 = (($__names) + 24|0);
           __THREW__ = 0;
           $112 = $$byval_copy2;
           $113 = $$byval_copy2;
           $114 = $6;
           ;HEAP32[$113+0>>2]=HEAP32[$114+0>>2]|0;
           $115 = (invoke_iiiiiiii(3,($__b|0),($$byval_copy2|0),($95|0),($111|0),($61|0),($__err|0),1)|0);
           $116 = $$byval_copy2;
           $117 = __THREW__; __THREW__ = 0;
           $118 = $117&1;
           if ($118) {
            $140 = ___cxa_find_matching_catch(-1,-1)|0;
            $141 = tempRet0;
            $142 = (($__names) + 12|0);
            __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($142);
            $143 = ($__names);
            __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($143);
            $$0 = $140;$$01 = $141;
            ___resumeException($$0|0);
            // unreachable;
           } else {
            $119 = ($115|0)==($95|0);
            $120 = $119&1;
            HEAP8[$__v] = $120;
            $121 = ($__b);
            $122 = HEAP32[$121>>2]|0;
            $123 = ($agg$result);
            HEAP32[$123>>2] = $122;
            $124 = (($__names) + 12|0);
            __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($124);
            $125 = ($__names);
            __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($125);
            STACKTOP = sp;return;
           }
          }
         } while(0);
         $134 = ___cxa_find_matching_catch(-1,-1)|0;
         $135 = tempRet0;
         $136 = ($95|0)==($$02|0);
         if ($136) {
          $$0 = $134;$$01 = $135;
          ___resumeException($$0|0);
          // unreachable;
         } else {
          $137 = $$02;
         }
         while(1) {
          $138 = (($137) + -12|0);
          __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($138);
          $139 = ($138|0)==($95|0);
          if ($139) {
           $$0 = $134;$$01 = $135;
           break;
          } else {
           $137$phi = $138;$137 = $137$phi;
          }
         }
         ___resumeException($$0|0);
         // unreachable;
        }
       } while(0);
       $88 = (___cxa_allocate_exception(4)|0);
       $89 = $88;
       __ZNSt8bad_castC2Ev($89);
       __THREW__ = 0;
       invoke_viii(12,($88|0),((17096)|0),((143)|0));
       $90 = __THREW__; __THREW__ = 0;
       $91 = $90&1;
       if ($91) {
        break;
       }
       // unreachable;
      }
     } while(0);
     $130 = ___cxa_find_matching_catch(-1,-1)|0;
     $131 = tempRet0;
     $132 = HEAP32[$64>>2]|0;
     $133 = ($132);
     (__ZNSt3__114__shared_count16__release_sharedEv($133)|0);
     $$0 = $130;$$01 = $131;
     ___resumeException($$0|0);
     // unreachable;
    }
   } while(0);
   $57 = (___cxa_allocate_exception(4)|0);
   $58 = $57;
   __ZNSt8bad_castC2Ev($58);
   __THREW__ = 0;
   invoke_viii(12,($57|0),((17096)|0),((143)|0));
   $59 = __THREW__; __THREW__ = 0;
   $60 = $59&1;
   if ($60) {
    break;
   }
   // unreachable;
  }
 } while(0);
 $126 = ___cxa_find_matching_catch(-1,-1)|0;
 $127 = tempRet0;
 $128 = HEAP32[$33>>2]|0;
 $129 = ($128);
 (__ZNSt3__114__shared_count16__release_sharedEv($129)|0);
 $$0 = $126;$$01 = $127;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$ = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i17 = 0, $$028 = 0, $$03082 = 0, $$03082$phi = 0, $$index = 0, $$index10 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i13 = 0, $$pre$i3$i$i19 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off0$lcssa = 0, $__consume$0$off039 = 0, $__consume$0$off039$us = 0, $__consume$1$off0 = 0, $__consume$1$off0$us = 0, $__indx$0 = 0, $__ky$068 = 0, $__ky1$040 = 0, $__ky1$040$us = 0, $__ky2$051 = 0, $__n_does_match$0$lcssa = 0;
 var $__n_does_match$066 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$phi = 0, $__n_does_match$3$lcssa = 0, $__n_does_match$336 = 0, $__n_does_match$336$us = 0, $__n_does_match$4 = 0, $__n_does_match$4$us = 0, $__n_does_match$549 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$065 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$2$phi = 0, $__n_might_match$3$lcssa = 0, $__n_might_match$335 = 0, $__n_might_match$335$us = 0, $__n_might_match$4 = 0;
 var $__n_might_match$4$us = 0, $__st$067 = 0, $__st$137 = 0, $__st$137$us = 0, $__st$250 = 0, $__st$32983 = 0, $__st$32983$phi = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i14 = 0, $tmp$i$i = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 104|0;
 $__statbuf = sp;
 $1 = $__ke;
 $2 = $__kb;
 $3 = (($1) - ($2))|0;
 $4 = (($3|0) / 12)&-1;
 $5 = ($__statbuf);
 $6 = ($4>>>0)>(100);
 do {
  if ($6) {
   $7 = (_malloc($4)|0);
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    $23 = $7;$__status$0 = $7;
    break;
   }
   __THREW__ = 0;
   invoke_v(7);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $23 = 0;$__status$0 = 0;
    break;
   }
   $11 = ___cxa_find_matching_catch(-1,-1)|0;
   $12 = tempRet0;
   $$index = $11;$$index10 = $12;
   ___resumeException($$index|0);
   // unreachable;
  } else {
   $23 = 0;$__status$0 = $5;
  }
 } while(0);
 $24 = ($__kb|0)==($__ke|0);
 if ($24) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $4;
 } else {
  $__ky$068 = $__kb;$__n_does_match$066 = 0;$__n_might_match$065 = $4;$__st$067 = $__status$0;
  while(1) {
   $28 = $__ky$068;
   $29 = HEAP8[$28]|0;
   $30 = $29 & 1;
   $31 = ($30<<24>>24)==(0);
   if ($31) {
    $34 = $29&255;
    $35 = $34 >>> 1;
    $36 = $35;
   } else {
    $32 = (($__ky$068) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $36 = $33;
   }
   $37 = ($36|0)==(0);
   if ($37) {
    HEAP8[$__st$067] = 2;
    $38 = (($__n_might_match$065) + -1)|0;
    $39 = (($__n_does_match$066) + 1)|0;
    $__n_does_match$1 = $39;$__n_might_match$1 = $38;
   } else {
    HEAP8[$__st$067] = 1;
    $__n_does_match$1 = $__n_does_match$066;$__n_might_match$1 = $__n_might_match$065;
   }
   $40 = (($__ky$068) + 12|0);
   $41 = (($__st$067) + 1|0);
   $42 = ($40|0)==($__ke|0);
   if ($42) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$068 = $40;$__n_does_match$066 = $__n_does_match$1;$__n_might_match$065 = $__n_might_match$1;$__st$067 = $41;
   }
  }
 }
 $25 = ($__b);
 $26 = ($__e);
 $27 = $__ct;
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L19: while(1) {
  $43 = HEAP32[$25>>2]|0;
  $44 = ($43|0)==(0|0);
  do {
   if ($44) {
    $59 = 1;
   } else {
    $45 = (($43) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (($43) + 16|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($46|0)==($48|0);
    if ($49) {
     $50 = $43;
     $51 = HEAP32[$50>>2]|0;
     $52 = (($51) + 36|0);
     $53 = HEAP32[$52>>2]|0;
     __THREW__ = 0;
     $54 = (invoke_ii($53|0,($43|0))|0);
     $55 = __THREW__; __THREW__ = 0;
     $56 = $55&1;
     if ($56) {
      label = 6;
      break L19;
     } else {
      $$0$i$i$i$i = $54;
     }
    } else {
     $57 = HEAP32[$46>>2]|0;
     $$0$i$i$i$i = $57;
    }
    $58 = ($$0$i$i$i$i|0)==(-1);
    if ($58) {
     HEAP32[$25>>2] = 0;
     $59 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$25>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $59 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $60 = HEAP32[$26>>2]|0;
  $61 = ($60|0)==(0|0);
  do {
   if ($61) {
    $$pre$i3$i$i19 = 0;$76 = 1;
   } else {
    $62 = (($60) + 12|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($60) + 16|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($63|0)==($65|0);
    if ($66) {
     $67 = $60;
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 36|0);
     $70 = HEAP32[$69>>2]|0;
     __THREW__ = 0;
     $71 = (invoke_ii($70|0,($60|0))|0);
     $72 = __THREW__; __THREW__ = 0;
     $73 = $72&1;
     if ($73) {
      label = 6;
      break L19;
     } else {
      $$0$i$i1$i$i = $71;
     }
    } else {
     $74 = HEAP32[$63>>2]|0;
     $$0$i$i1$i$i = $74;
    }
    $75 = ($$0$i$i1$i$i|0)==(-1);
    if (!($75)) {
     $$pre$i3$i$i19 = $60;$76 = 0;
     break;
    }
    HEAP32[$26>>2] = 0;
    $$pre$i3$i$i19 = 0;$76 = 1;
   }
  } while(0);
  $tmp$i$i = $59 ^ $76;
  $77 = ($__n_might_match$2|0)!=(0);
  $$ = $tmp$i$i & $77;
  $78 = HEAP32[$25>>2]|0;
  if (!($$)) {
   label = 81;
   break;
  }
  $79 = (($78) + 12|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($78) + 16|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($80|0)==($82|0);
  if ($83) {
   $84 = $78;
   $85 = HEAP32[$84>>2]|0;
   $86 = (($85) + 36|0);
   $87 = HEAP32[$86>>2]|0;
   __THREW__ = 0;
   $88 = (invoke_ii($87|0,($78|0))|0);
   $89 = __THREW__; __THREW__ = 0;
   $90 = $89&1;
   if ($90) {
    label = 6;
    break;
   } else {
    $$0$i$i = $88;
   }
  } else {
   $91 = HEAP32[$80>>2]|0;
   $$0$i$i = $91;
  }
  if ($__case_sensitive) {
   $__c$0 = $$0$i$i;
  } else {
   $92 = HEAP32[$27>>2]|0;
   $93 = (($92) + 28|0);
   $94 = HEAP32[$93>>2]|0;
   __THREW__ = 0;
   $95 = (invoke_iii($94|0,($__ct|0),($$0$i$i|0))|0);
   $96 = __THREW__; __THREW__ = 0;
   $97 = $96&1;
   if ($97) {
    label = 6;
    break;
   } else {
    $__c$0 = $95;
   }
  }
  $$pre = (($__indx$0) + 1)|0;
  if ($24) {
   $__n_might_match$2$phi = $__n_might_match$2;$__n_does_match$2$phi = $__n_does_match$2;$__indx$0 = $$pre;$__n_might_match$2 = $__n_might_match$2$phi;$__n_does_match$2 = $__n_does_match$2$phi;
   continue;
  }
  L48: do {
   if ($__case_sensitive) {
    $__consume$0$off039$us = 0;$__ky1$040$us = $__kb;$__n_does_match$336$us = $__n_does_match$2;$__n_might_match$335$us = $__n_might_match$2;$__st$137$us = $__status$0;
    while(1) {
     $98 = HEAP8[$__st$137$us]|0;
     $99 = ($98<<24>>24)==(1);
     do {
      if ($99) {
       $100 = $__ky1$040$us;
       $101 = HEAP8[$100]|0;
       $102 = $101 & 1;
       $103 = ($102<<24>>24)==(0);
       if ($103) {
        $106 = (($__ky1$040$us) + 4|0);
        $107 = $106;
       } else {
        $104 = (($__ky1$040$us) + 8|0);
        $105 = HEAP32[$104>>2]|0;
        $107 = $105;
       }
       $108 = (($107) + ($__indx$0<<2)|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = ($__c$0|0)==($109|0);
       if (!($110)) {
        HEAP8[$__st$137$us] = 0;
        $111 = (($__n_might_match$335$us) + -1)|0;
        $__consume$1$off0$us = $__consume$0$off039$us;$__n_does_match$4$us = $__n_does_match$336$us;$__n_might_match$4$us = $111;
        break;
       }
       if ($103) {
        $114 = $101&255;
        $115 = $114 >>> 1;
        $116 = $115;
       } else {
        $112 = (($__ky1$040$us) + 4|0);
        $113 = HEAP32[$112>>2]|0;
        $116 = $113;
       }
       $117 = ($116|0)==($$pre|0);
       if (!($117)) {
        $__consume$1$off0$us = 1;$__n_does_match$4$us = $__n_does_match$336$us;$__n_might_match$4$us = $__n_might_match$335$us;
        break;
       }
       HEAP8[$__st$137$us] = 2;
       $118 = (($__n_might_match$335$us) + -1)|0;
       $119 = (($__n_does_match$336$us) + 1)|0;
       $__consume$1$off0$us = 1;$__n_does_match$4$us = $119;$__n_might_match$4$us = $118;
      } else {
       $__consume$1$off0$us = $__consume$0$off039$us;$__n_does_match$4$us = $__n_does_match$336$us;$__n_might_match$4$us = $__n_might_match$335$us;
      }
     } while(0);
     $120 = (($__ky1$040$us) + 12|0);
     $121 = ($120|0)==($__ke|0);
     if ($121) {
      $__consume$0$off0$lcssa = $__consume$1$off0$us;$__n_does_match$3$lcssa = $__n_does_match$4$us;$__n_might_match$3$lcssa = $__n_might_match$4$us;
      break L48;
     }
     $122 = (($__st$137$us) + 1|0);
     $__consume$0$off039$us = $__consume$1$off0$us;$__ky1$040$us = $120;$__n_does_match$336$us = $__n_does_match$4$us;$__n_might_match$335$us = $__n_might_match$4$us;$__st$137$us = $122;
    }
   } else {
    $__consume$0$off039 = 0;$__ky1$040 = $__kb;$__n_does_match$336 = $__n_does_match$2;$__n_might_match$335 = $__n_might_match$2;$__st$137 = $__status$0;
    while(1) {
     $123 = HEAP8[$__st$137]|0;
     $124 = ($123<<24>>24)==(1);
     do {
      if ($124) {
       $125 = $__ky1$040;
       $126 = HEAP8[$125]|0;
       $127 = $126 & 1;
       $128 = ($127<<24>>24)==(0);
       if ($128) {
        $131 = (($__ky1$040) + 4|0);
        $132 = $131;
       } else {
        $129 = (($__ky1$040) + 8|0);
        $130 = HEAP32[$129>>2]|0;
        $132 = $130;
       }
       $133 = (($132) + ($__indx$0<<2)|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = HEAP32[$27>>2]|0;
       $136 = (($135) + 28|0);
       $137 = HEAP32[$136>>2]|0;
       __THREW__ = 0;
       $138 = (invoke_iii($137|0,($__ct|0),($134|0))|0);
       $139 = __THREW__; __THREW__ = 0;
       $140 = $139&1;
       if ($140) {
        label = 5;
        break L19;
       }
       $141 = ($__c$0|0)==($138|0);
       if (!($141)) {
        HEAP8[$__st$137] = 0;
        $153 = (($__n_might_match$335) + -1)|0;
        $__consume$1$off0 = $__consume$0$off039;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $153;
        break;
       }
       $142 = HEAP8[$125]|0;
       $143 = $142 & 1;
       $144 = ($143<<24>>24)==(0);
       if ($144) {
        $147 = $142&255;
        $148 = $147 >>> 1;
        $149 = $148;
       } else {
        $145 = (($__ky1$040) + 4|0);
        $146 = HEAP32[$145>>2]|0;
        $149 = $146;
       }
       $150 = ($149|0)==($$pre|0);
       if (!($150)) {
        $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $__n_might_match$335;
        break;
       }
       HEAP8[$__st$137] = 2;
       $151 = (($__n_might_match$335) + -1)|0;
       $152 = (($__n_does_match$336) + 1)|0;
       $__consume$1$off0 = 1;$__n_does_match$4 = $152;$__n_might_match$4 = $151;
      } else {
       $__consume$1$off0 = $__consume$0$off039;$__n_does_match$4 = $__n_does_match$336;$__n_might_match$4 = $__n_might_match$335;
      }
     } while(0);
     $154 = (($__ky1$040) + 12|0);
     $155 = ($154|0)==($__ke|0);
     if ($155) {
      $__consume$0$off0$lcssa = $__consume$1$off0;$__n_does_match$3$lcssa = $__n_does_match$4;$__n_might_match$3$lcssa = $__n_might_match$4;
      break L48;
     }
     $156 = (($__st$137) + 1|0);
     $__consume$0$off039 = $__consume$1$off0;$__ky1$040 = $154;$__n_does_match$336 = $__n_does_match$4;$__n_might_match$335 = $__n_might_match$4;$__st$137 = $156;
    }
   }
  } while(0);
  if (!($__consume$0$off0$lcssa)) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  }
  $157 = HEAP32[$25>>2]|0;
  $158 = (($157) + 12|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = (($157) + 16|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = ($159|0)==($161|0);
  if ($162) {
   $163 = $157;
   $164 = HEAP32[$163>>2]|0;
   $165 = (($164) + 40|0);
   $166 = HEAP32[$165>>2]|0;
   __THREW__ = 0;
   (invoke_ii($166|0,($157|0))|0);
   $167 = __THREW__; __THREW__ = 0;
   $168 = $167&1;
   if ($168) {
    label = 6;
    break;
   }
  } else {
   $169 = (($159) + 4|0);
   HEAP32[$158>>2] = $169;
  }
  $170 = (($__n_might_match$3$lcssa) + ($__n_does_match$3$lcssa))|0;
  $$not = ($170>>>0)<(2);
  if ($$not) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$3$lcssa;$__n_might_match$2 = $__n_might_match$3$lcssa;
   continue;
  } else {
   $__ky2$051 = $__kb;$__n_does_match$549 = $__n_does_match$3$lcssa;$__st$250 = $__status$0;
  }
  while(1) {
   $171 = HEAP8[$__st$250]|0;
   $172 = ($171<<24>>24)==(2);
   do {
    if ($172) {
     $173 = $__ky2$051;
     $174 = HEAP8[$173]|0;
     $175 = $174 & 1;
     $176 = ($175<<24>>24)==(0);
     if ($176) {
      $179 = $174&255;
      $180 = $179 >>> 1;
      $181 = $180;
     } else {
      $177 = (($__ky2$051) + 4|0);
      $178 = HEAP32[$177>>2]|0;
      $181 = $178;
     }
     $182 = ($181|0)==($$pre|0);
     if ($182) {
      $__n_does_match$6 = $__n_does_match$549;
      break;
     }
     HEAP8[$__st$250] = 0;
     $183 = (($__n_does_match$549) + -1)|0;
     $__n_does_match$6 = $183;
    } else {
     $__n_does_match$6 = $__n_does_match$549;
    }
   } while(0);
   $184 = (($__ky2$051) + 12|0);
   $185 = (($__st$250) + 1|0);
   $186 = ($184|0)==($__ke|0);
   if ($186) {
    $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$3$lcssa;
    continue L19;
   } else {
    $__ky2$051 = $184;$__n_does_match$549 = $__n_does_match$6;$__st$250 = $185;
   }
  }
 }
 if ((label|0) == 5) {
  $13 = ___cxa_find_matching_catch(-1,-1)|0;
  $14 = tempRet0;
  $lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 else if ((label|0) == 6) {
  $15 = ___cxa_find_matching_catch(-1,-1)|0;
  $16 = tempRet0;
  $lpad$phi$index = $15;$lpad$phi$index3 = $16;
 }
 else if ((label|0) == 81) {
  $187 = ($78|0)==(0|0);
  do {
   if ($187) {
    $202 = 1;
    label = 88;
   } else {
    $188 = (($78) + 12|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = (($78) + 16|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = ($189|0)==($191|0);
    if ($192) {
     $193 = $78;
     $194 = HEAP32[$193>>2]|0;
     $195 = (($194) + 36|0);
     $196 = HEAP32[$195>>2]|0;
     __THREW__ = 0;
     $197 = (invoke_ii($196|0,($78|0))|0);
     $198 = __THREW__; __THREW__ = 0;
     $199 = $198&1;
     if ($199) {
      break;
     } else {
      $$0$i$i$i$i11 = $197;
     }
    } else {
     $200 = HEAP32[$189>>2]|0;
     $$0$i$i$i$i11 = $200;
    }
    $201 = ($$0$i$i$i$i11|0)==(-1);
    if ($201) {
     HEAP32[$25>>2] = 0;
     $202 = 1;
     label = 88;
     break;
    } else {
     $$pre$i$i$i13 = HEAP32[$25>>2]|0;
     $phitmp$i$i$i14 = ($$pre$i$i$i13|0)==(0|0);
     $202 = $phitmp$i$i$i14;
     label = 88;
     break;
    }
   }
  } while(0);
  L114: do {
   if ((label|0) == 88) {
    $203 = ($$pre$i3$i$i19|0)==(0|0);
    do {
     if ($203) {
      label = 94;
     } else {
      $204 = (($$pre$i3$i$i19) + 12|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = (($$pre$i3$i$i19) + 16|0);
      $207 = HEAP32[$206>>2]|0;
      $208 = ($205|0)==($207|0);
      if ($208) {
       $209 = $$pre$i3$i$i19;
       $210 = HEAP32[$209>>2]|0;
       $211 = (($210) + 36|0);
       $212 = HEAP32[$211>>2]|0;
       __THREW__ = 0;
       $213 = (invoke_ii($212|0,($$pre$i3$i$i19|0))|0);
       $214 = __THREW__; __THREW__ = 0;
       $215 = $214&1;
       if ($215) {
        break L114;
       } else {
        $$0$i$i1$i$i17 = $213;
       }
      } else {
       $216 = HEAP32[$205>>2]|0;
       $$0$i$i1$i$i17 = $216;
      }
      $217 = ($$0$i$i1$i$i17|0)==(-1);
      if ($217) {
       HEAP32[$26>>2] = 0;
       label = 94;
       break;
      } else {
       if ($202) {
        break;
       } else {
        label = 96;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 94) {
     if ($202) {
      label = 96;
     }
    }
    if ((label|0) == 96) {
     $218 = HEAP32[$__err>>2]|0;
     $219 = $218 | 2;
     HEAP32[$__err>>2] = $219;
    }
    L130: do {
     if ($24) {
      label = 101;
     } else {
      $220 = HEAP8[$__status$0]|0;
      $221 = ($220<<24>>24)==(2);
      if ($221) {
       $$028 = $__kb;
       break;
      } else {
       $$03082 = $__kb;$__st$32983 = $__status$0;
      }
      while(1) {
       $224 = (($$03082) + 12|0);
       $225 = ($224|0)==($__ke|0);
       $226 = (($__st$32983) + 1|0);
       if ($225) {
        label = 101;
        break L130;
       }
       $222 = HEAP8[$226]|0;
       $223 = ($222<<24>>24)==(2);
       if ($223) {
        $$028 = $224;
        break;
       } else {
        $__st$32983$phi = $226;$$03082$phi = $224;$__st$32983 = $__st$32983$phi;$$03082 = $$03082$phi;
       }
      }
     }
    } while(0);
    if ((label|0) == 101) {
     $227 = HEAP32[$__err>>2]|0;
     $228 = $227 | 4;
     HEAP32[$__err>>2] = $228;
     $$028 = $__ke;
    }
    $229 = ($23|0)==(0|0);
    if ($229) {
     STACKTOP = sp;return ($$028|0);
    }
    __THREW__ = 0;
    invoke_vi(185,($23|0));
    $230 = __THREW__; __THREW__ = 0;
    $231 = $230&1;
    if ($231) {
     $232 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$1 = tempRet0;
     ___clang_call_terminate($232);
     // unreachable;
    } else {
     STACKTOP = sp;return ($$028|0);
    }
   }
  } while(0);
  $17 = ___cxa_find_matching_catch(-1,-1)|0;
  $18 = tempRet0;
  $lpad$phi$index = $17;$lpad$phi$index3 = $18;
 }
 $19 = ($23|0)==(0|0);
 if ($19) {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(185,($23|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 } else {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $3 = ($__b);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1);
 HEAP32[$5>>2] = $4;
 $6 = ($__e);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($2);
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 $16 = $$byval_copy;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre32 = 0, $$pre33 = 0, $$pre35 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 328|0;
 $__atoms = sp;
 $__thousands_sep = sp + 104|0;
 $__grouping = sp + 112|0;
 $__buf = sp + 128|0;
 $__a_end = sp + 144|0;
 $__g = sp + 152|0;
 $__g_end = sp + 312|0;
 $__dc = sp + 320|0;
 $1 = (($__iob) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 if ((($3|0) == 8)) {
  $$0$i = 16;
 } else if ((($3|0) == 0)) {
  $$0$i = 0;
 } else if ((($3|0) == 64)) {
  $$0$i = 8;
 } else {
  $$0$i = 10;
 }
 $4 = $__atoms;
 $5 = ($__atoms);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$5,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(13,($__buf|0),10,0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L6: do {
  if (!($7)) {
   $8 = HEAP8[$this2$i$i$i]|0;
   $9 = $8 & 1;
   $10 = ($9<<24>>24)==(0);
   if ($10) {
    $13 = $__buf;
    $14 = (($13) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $14;$$pre$phi36Z2D = $$pre35;$15 = $14;
   } else {
    $11 = (($__buf) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $$pre32 = $__buf;
    $$pre33 = (($$pre32) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $11;$15 = $12;
   }
   HEAP32[$__a_end>>2] = $15;
   $16 = $__g;
   $17 = ($__g);
   HEAP32[$__g_end>>2] = $17;
   HEAP32[$__dc>>2] = 0;
   $18 = ($__b);
   $19 = ($__e);
   $20 = ($__buf);
   $21 = (($__buf) + 4|0);
   $22 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$18>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $15;
   L12: while(1) {
    $23 = ($$pre$i$i$i5|0)==(0|0);
    do {
     if ($23) {
      $38 = 0;$39 = 1;
     } else {
      $24 = (($$pre$i$i$i5) + 12|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = (($$pre$i$i$i5) + 16|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($25|0)==($27|0);
      if ($28) {
       $29 = $$pre$i$i$i5;
       $30 = HEAP32[$29>>2]|0;
       $31 = (($30) + 36|0);
       $32 = HEAP32[$31>>2]|0;
       __THREW__ = 0;
       $33 = (invoke_ii($32|0,($$pre$i$i$i5|0))|0);
       $34 = __THREW__; __THREW__ = 0;
       $35 = $34&1;
       if ($35) {
        label = 38;
        break L12;
       } else {
        $$0$i$i$i$i3 = $33;
       }
      } else {
       $36 = HEAP32[$25>>2]|0;
       $$0$i$i$i$i3 = $36;
      }
      $37 = ($$0$i$i$i$i3|0)==(-1);
      if (!($37)) {
       $38 = $$pre$i$i$i5;$39 = 0;
       break;
      }
      HEAP32[$18>>2] = 0;
      $38 = 0;$39 = 1;
     }
    } while(0);
    $40 = HEAP32[$19>>2]|0;
    $41 = ($40|0)==(0|0);
    do {
     if ($41) {
      label = 22;
     } else {
      $42 = (($40) + 12|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = (($40) + 16|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = ($43|0)==($45|0);
      if ($46) {
       $47 = $40;
       $48 = HEAP32[$47>>2]|0;
       $49 = (($48) + 36|0);
       $50 = HEAP32[$49>>2]|0;
       __THREW__ = 0;
       $51 = (invoke_ii($50|0,($40|0))|0);
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if ($53) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $51;
       }
      } else {
       $54 = HEAP32[$43>>2]|0;
       $$0$i$i1$i$i9 = $54;
      }
      $55 = ($$0$i$i1$i$i9|0)==(-1);
      if ($55) {
       HEAP32[$19>>2] = 0;
       label = 22;
       break;
      } else {
       if ($39) {
        $56 = $40;
        break;
       } else {
        $$pre$i3$i$i = $40;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     if ($39) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $56 = 0;
     }
    }
    $57 = HEAP32[$__a_end>>2]|0;
    $58 = $57;
    $59 = $__a$0;
    $60 = (($58) - ($59))|0;
    $61 = HEAP8[$this2$i$i$i]|0;
    $62 = $61 & 1;
    $63 = ($62<<24>>24)==(0);
    if ($63) {
     $65 = $61&255;
     $66 = $65 >>> 1;
     $67 = $66;
    } else {
     $64 = HEAP32[$21>>2]|0;
     $67 = $64;
    }
    $68 = ($60|0)==($67|0);
    if ($68) {
     if ($63) {
      $70 = $61&255;
      $71 = $70 >>> 1;
      $72 = $61&255;
      $73 = $72 >>> 1;
      $74 = $71;$75 = $73;
     } else {
      $69 = HEAP32[$21>>2]|0;
      $74 = $69;$75 = $69;
     }
     $76 = $75 << 1;
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($76|0),0);
     $77 = __THREW__; __THREW__ = 0;
     $78 = $77&1;
     if ($78) {
      label = 38;
      break;
     }
     $79 = HEAP8[$this2$i$i$i]|0;
     $80 = $79 & 1;
     $81 = ($80<<24>>24)==(0);
     if ($81) {
      $84 = 10;
     } else {
      $82 = HEAP32[$20>>2]|0;
      $83 = $82 & -2;
      $phitmp$i23 = (($83) + -1)|0;
      $84 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($84|0),0);
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     if ($86) {
      label = 38;
      break;
     }
     $87 = HEAP8[$this2$i$i$i]|0;
     $88 = $87 & 1;
     $89 = ($88<<24>>24)==(0);
     if ($89) {
      $91 = $$pre$phi34Z2D;
     } else {
      $90 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $91 = $90;
     }
     $92 = (($91) + ($74)|0);
     HEAP32[$__a_end>>2] = $92;
     $__a$1 = $91;
    } else {
     $__a$1 = $__a$0;
    }
    $97 = (($38) + 12|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (($38) + 16|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = ($98|0)==($100|0);
    if ($101) {
     $102 = $38;
     $103 = HEAP32[$102>>2]|0;
     $104 = (($103) + 36|0);
     $105 = HEAP32[$104>>2]|0;
     __THREW__ = 0;
     $106 = (invoke_ii($105|0,($38|0))|0);
     $107 = __THREW__; __THREW__ = 0;
     $108 = $107&1;
     if ($108) {
      label = 38;
      break;
     } else {
      $$0$i$i = $106;
     }
    } else {
     $109 = HEAP32[$98>>2]|0;
     $$0$i$i = $109;
    }
    $110 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$22,$__grouping,$17,$__g_end,$5)|0);
    $111 = ($110|0)==(0);
    if (!($111)) {
     $$pre$i3$i$i = $56;$__a$2 = $__a$1;
     break;
    }
    $112 = HEAP32[$97>>2]|0;
    $113 = HEAP32[$99>>2]|0;
    $114 = ($112|0)==($113|0);
    if ($114) {
     $115 = $38;
     $116 = HEAP32[$115>>2]|0;
     $117 = (($116) + 40|0);
     $118 = HEAP32[$117>>2]|0;
     __THREW__ = 0;
     (invoke_ii($118|0,($38|0))|0);
     $119 = __THREW__; __THREW__ = 0;
     $120 = $119&1;
     if ($120) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $38;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $121 = (($112) + 4|0);
     HEAP32[$97>>2] = $121;
     $$pre$i$i$i5 = $38;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $93 = ___cxa_find_matching_catch(-1,-1)|0;
    $94 = tempRet0;
    $lpad$phi$index = $93;$lpad$phi$index2 = $94;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $122 = $__grouping;
   $123 = HEAP8[$122]|0;
   $124 = $123 & 1;
   $125 = ($124<<24>>24)==(0);
   if ($125) {
    $128 = $123&255;
    $129 = $128 >>> 1;
    $130 = $129;
   } else {
    $126 = (($__grouping) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $130 = $127;
   }
   $131 = ($130|0)==(0);
   do {
    if (!($131)) {
     $132 = HEAP32[$__g_end>>2]|0;
     $133 = $132;
     $134 = $__g;
     $135 = (($133) - ($134))|0;
     $136 = ($135|0)<(160);
     if (!($136)) {
      break;
     }
     $137 = HEAP32[$__dc>>2]|0;
     $138 = (($132) + 4|0);
     HEAP32[$__g_end>>2] = $138;
     HEAP32[$132>>2] = $137;
    }
   } while(0);
   $139 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $140 = (invoke_iiiii(7,($__a$2|0),($139|0),($__err|0),($$0$i|0))|0);
   $141 = __THREW__; __THREW__ = 0;
   $142 = $141&1;
   if ($142) {
    break;
   }
   HEAP32[$__v>>2] = $140;
   $143 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$17,$143,$__err);
   $144 = ($38|0)==(0|0);
   do {
    if ($144) {
     $159 = 0;$160 = 1;
    } else {
     $145 = (($38) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (($38) + 16|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($146|0)==($148|0);
     if ($149) {
      $150 = $38;
      $151 = HEAP32[$150>>2]|0;
      $152 = (($151) + 36|0);
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = (invoke_ii($153|0,($38|0))|0);
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      if ($156) {
       break L6;
      } else {
       $$0$i$i$i$i = $154;
      }
     } else {
      $157 = HEAP32[$146>>2]|0;
      $$0$i$i$i$i = $157;
     }
     $158 = ($$0$i$i$i$i|0)==(-1);
     if (!($158)) {
      $159 = $38;$160 = 0;
      break;
     }
     HEAP32[$18>>2] = 0;
     $159 = 0;$160 = 1;
    }
   } while(0);
   $161 = ($$pre$i3$i$i|0)==(0|0);
   do {
    if ($161) {
     label = 67;
    } else {
     $162 = (($$pre$i3$i$i) + 12|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = (($$pre$i3$i$i) + 16|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($163|0)==($165|0);
     if ($166) {
      $167 = $$pre$i3$i$i;
      $168 = HEAP32[$167>>2]|0;
      $169 = (($168) + 36|0);
      $170 = HEAP32[$169>>2]|0;
      __THREW__ = 0;
      $171 = (invoke_ii($170|0,($$pre$i3$i$i|0))|0);
      $172 = __THREW__; __THREW__ = 0;
      $173 = $172&1;
      if ($173) {
       break L6;
      } else {
       $$0$i$i1$i$i = $171;
      }
     } else {
      $174 = HEAP32[$163>>2]|0;
      $$0$i$i1$i$i = $174;
     }
     $175 = ($$0$i$i1$i$i|0)==(-1);
     if ($175) {
      HEAP32[$19>>2] = 0;
      label = 67;
      break;
     }
     if (!($160)) {
      break;
     }
     $178 = ($agg$result);
     HEAP32[$178>>2] = $159;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 67) {
     if ($160) {
      break;
     }
     $178 = ($agg$result);
     HEAP32[$178>>2] = $159;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $176 = HEAP32[$__err>>2]|0;
   $177 = $176 | 2;
   HEAP32[$__err>>2] = $177;
   $178 = ($agg$result);
   HEAP32[$178>>2] = $159;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $95 = ___cxa_find_matching_catch(-1,-1)|0;
 $96 = tempRet0;
 $lpad$phi$index = $95;$lpad$phi$index2 = $96;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $3 = ($__b);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1);
 HEAP32[$5>>2] = $4;
 $6 = ($__e);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($2);
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 $16 = $$byval_copy;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre32 = 0, $$pre33 = 0, $$pre35 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0;
 var $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 328|0;
 $__atoms = sp;
 $__thousands_sep = sp + 104|0;
 $__grouping = sp + 112|0;
 $__buf = sp + 128|0;
 $__a_end = sp + 144|0;
 $__g = sp + 152|0;
 $__g_end = sp + 312|0;
 $__dc = sp + 320|0;
 $1 = (($__iob) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 if ((($3|0) == 0)) {
  $$0$i = 0;
 } else if ((($3|0) == 8)) {
  $$0$i = 16;
 } else if ((($3|0) == 64)) {
  $$0$i = 8;
 } else {
  $$0$i = 10;
 }
 $4 = $__atoms;
 $5 = ($__atoms);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$5,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(13,($__buf|0),10,0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L6: do {
  if (!($7)) {
   $8 = HEAP8[$this2$i$i$i]|0;
   $9 = $8 & 1;
   $10 = ($9<<24>>24)==(0);
   if ($10) {
    $13 = $__buf;
    $14 = (($13) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $14;$$pre$phi36Z2D = $$pre35;$15 = $14;
   } else {
    $11 = (($__buf) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $$pre32 = $__buf;
    $$pre33 = (($$pre32) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $11;$15 = $12;
   }
   HEAP32[$__a_end>>2] = $15;
   $16 = $__g;
   $17 = ($__g);
   HEAP32[$__g_end>>2] = $17;
   HEAP32[$__dc>>2] = 0;
   $18 = ($__b);
   $19 = ($__e);
   $20 = ($__buf);
   $21 = (($__buf) + 4|0);
   $22 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$18>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $15;
   L12: while(1) {
    $23 = ($$pre$i$i$i5|0)==(0|0);
    do {
     if ($23) {
      $38 = 0;$39 = 1;
     } else {
      $24 = (($$pre$i$i$i5) + 12|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = (($$pre$i$i$i5) + 16|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($25|0)==($27|0);
      if ($28) {
       $29 = $$pre$i$i$i5;
       $30 = HEAP32[$29>>2]|0;
       $31 = (($30) + 36|0);
       $32 = HEAP32[$31>>2]|0;
       __THREW__ = 0;
       $33 = (invoke_ii($32|0,($$pre$i$i$i5|0))|0);
       $34 = __THREW__; __THREW__ = 0;
       $35 = $34&1;
       if ($35) {
        label = 38;
        break L12;
       } else {
        $$0$i$i$i$i3 = $33;
       }
      } else {
       $36 = HEAP32[$25>>2]|0;
       $$0$i$i$i$i3 = $36;
      }
      $37 = ($$0$i$i$i$i3|0)==(-1);
      if (!($37)) {
       $38 = $$pre$i$i$i5;$39 = 0;
       break;
      }
      HEAP32[$18>>2] = 0;
      $38 = 0;$39 = 1;
     }
    } while(0);
    $40 = HEAP32[$19>>2]|0;
    $41 = ($40|0)==(0|0);
    do {
     if ($41) {
      label = 22;
     } else {
      $42 = (($40) + 12|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = (($40) + 16|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = ($43|0)==($45|0);
      if ($46) {
       $47 = $40;
       $48 = HEAP32[$47>>2]|0;
       $49 = (($48) + 36|0);
       $50 = HEAP32[$49>>2]|0;
       __THREW__ = 0;
       $51 = (invoke_ii($50|0,($40|0))|0);
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if ($53) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $51;
       }
      } else {
       $54 = HEAP32[$43>>2]|0;
       $$0$i$i1$i$i9 = $54;
      }
      $55 = ($$0$i$i1$i$i9|0)==(-1);
      if ($55) {
       HEAP32[$19>>2] = 0;
       label = 22;
       break;
      } else {
       if ($39) {
        $56 = $40;
        break;
       } else {
        $$pre$i3$i$i = $40;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     if ($39) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $56 = 0;
     }
    }
    $57 = HEAP32[$__a_end>>2]|0;
    $58 = $57;
    $59 = $__a$0;
    $60 = (($58) - ($59))|0;
    $61 = HEAP8[$this2$i$i$i]|0;
    $62 = $61 & 1;
    $63 = ($62<<24>>24)==(0);
    if ($63) {
     $65 = $61&255;
     $66 = $65 >>> 1;
     $67 = $66;
    } else {
     $64 = HEAP32[$21>>2]|0;
     $67 = $64;
    }
    $68 = ($60|0)==($67|0);
    if ($68) {
     if ($63) {
      $70 = $61&255;
      $71 = $70 >>> 1;
      $72 = $61&255;
      $73 = $72 >>> 1;
      $74 = $71;$75 = $73;
     } else {
      $69 = HEAP32[$21>>2]|0;
      $74 = $69;$75 = $69;
     }
     $76 = $75 << 1;
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($76|0),0);
     $77 = __THREW__; __THREW__ = 0;
     $78 = $77&1;
     if ($78) {
      label = 38;
      break;
     }
     $79 = HEAP8[$this2$i$i$i]|0;
     $80 = $79 & 1;
     $81 = ($80<<24>>24)==(0);
     if ($81) {
      $84 = 10;
     } else {
      $82 = HEAP32[$20>>2]|0;
      $83 = $82 & -2;
      $phitmp$i23 = (($83) + -1)|0;
      $84 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($84|0),0);
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     if ($86) {
      label = 38;
      break;
     }
     $87 = HEAP8[$this2$i$i$i]|0;
     $88 = $87 & 1;
     $89 = ($88<<24>>24)==(0);
     if ($89) {
      $91 = $$pre$phi34Z2D;
     } else {
      $90 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $91 = $90;
     }
     $92 = (($91) + ($74)|0);
     HEAP32[$__a_end>>2] = $92;
     $__a$1 = $91;
    } else {
     $__a$1 = $__a$0;
    }
    $97 = (($38) + 12|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (($38) + 16|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = ($98|0)==($100|0);
    if ($101) {
     $102 = $38;
     $103 = HEAP32[$102>>2]|0;
     $104 = (($103) + 36|0);
     $105 = HEAP32[$104>>2]|0;
     __THREW__ = 0;
     $106 = (invoke_ii($105|0,($38|0))|0);
     $107 = __THREW__; __THREW__ = 0;
     $108 = $107&1;
     if ($108) {
      label = 38;
      break;
     } else {
      $$0$i$i = $106;
     }
    } else {
     $109 = HEAP32[$98>>2]|0;
     $$0$i$i = $109;
    }
    $110 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$22,$__grouping,$17,$__g_end,$5)|0);
    $111 = ($110|0)==(0);
    if (!($111)) {
     $$pre$i3$i$i = $56;$__a$2 = $__a$1;
     break;
    }
    $112 = HEAP32[$97>>2]|0;
    $113 = HEAP32[$99>>2]|0;
    $114 = ($112|0)==($113|0);
    if ($114) {
     $115 = $38;
     $116 = HEAP32[$115>>2]|0;
     $117 = (($116) + 40|0);
     $118 = HEAP32[$117>>2]|0;
     __THREW__ = 0;
     (invoke_ii($118|0,($38|0))|0);
     $119 = __THREW__; __THREW__ = 0;
     $120 = $119&1;
     if ($120) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $38;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $121 = (($112) + 4|0);
     HEAP32[$97>>2] = $121;
     $$pre$i$i$i5 = $38;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $93 = ___cxa_find_matching_catch(-1,-1)|0;
    $94 = tempRet0;
    $lpad$phi$index = $93;$lpad$phi$index2 = $94;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $122 = $__grouping;
   $123 = HEAP8[$122]|0;
   $124 = $123 & 1;
   $125 = ($124<<24>>24)==(0);
   if ($125) {
    $128 = $123&255;
    $129 = $128 >>> 1;
    $130 = $129;
   } else {
    $126 = (($__grouping) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $130 = $127;
   }
   $131 = ($130|0)==(0);
   do {
    if (!($131)) {
     $132 = HEAP32[$__g_end>>2]|0;
     $133 = $132;
     $134 = $__g;
     $135 = (($133) - ($134))|0;
     $136 = ($135|0)<(160);
     if (!($136)) {
      break;
     }
     $137 = HEAP32[$__dc>>2]|0;
     $138 = (($132) + 4|0);
     HEAP32[$__g_end>>2] = $138;
     HEAP32[$132>>2] = $137;
    }
   } while(0);
   $139 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $140 = (invoke_iiiii(8,($__a$2|0),($139|0),($__err|0),($$0$i|0))|0);
   $141 = tempRet0;
   $142 = __THREW__; __THREW__ = 0;
   $143 = $142&1;
   if ($143) {
    break;
   }
   $144 = $__v;
   $145 = $144;
   HEAP32[$145>>2] = $140;
   $146 = (($144) + 4)|0;
   $147 = $146;
   HEAP32[$147>>2] = $141;
   $148 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$17,$148,$__err);
   $149 = ($38|0)==(0|0);
   do {
    if ($149) {
     $164 = 0;$165 = 1;
    } else {
     $150 = (($38) + 12|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = (($38) + 16|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($151|0)==($153|0);
     if ($154) {
      $155 = $38;
      $156 = HEAP32[$155>>2]|0;
      $157 = (($156) + 36|0);
      $158 = HEAP32[$157>>2]|0;
      __THREW__ = 0;
      $159 = (invoke_ii($158|0,($38|0))|0);
      $160 = __THREW__; __THREW__ = 0;
      $161 = $160&1;
      if ($161) {
       break L6;
      } else {
       $$0$i$i$i$i = $159;
      }
     } else {
      $162 = HEAP32[$151>>2]|0;
      $$0$i$i$i$i = $162;
     }
     $163 = ($$0$i$i$i$i|0)==(-1);
     if (!($163)) {
      $164 = $38;$165 = 0;
      break;
     }
     HEAP32[$18>>2] = 0;
     $164 = 0;$165 = 1;
    }
   } while(0);
   $166 = ($$pre$i3$i$i|0)==(0|0);
   do {
    if ($166) {
     label = 67;
    } else {
     $167 = (($$pre$i3$i$i) + 12|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = (($$pre$i3$i$i) + 16|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = ($168|0)==($170|0);
     if ($171) {
      $172 = $$pre$i3$i$i;
      $173 = HEAP32[$172>>2]|0;
      $174 = (($173) + 36|0);
      $175 = HEAP32[$174>>2]|0;
      __THREW__ = 0;
      $176 = (invoke_ii($175|0,($$pre$i3$i$i|0))|0);
      $177 = __THREW__; __THREW__ = 0;
      $178 = $177&1;
      if ($178) {
       break L6;
      } else {
       $$0$i$i1$i$i = $176;
      }
     } else {
      $179 = HEAP32[$168>>2]|0;
      $$0$i$i1$i$i = $179;
     }
     $180 = ($$0$i$i1$i$i|0)==(-1);
     if ($180) {
      HEAP32[$19>>2] = 0;
      label = 67;
      break;
     }
     if (!($165)) {
      break;
     }
     $183 = ($agg$result);
     HEAP32[$183>>2] = $164;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 67) {
     if ($165) {
      break;
     }
     $183 = ($agg$result);
     HEAP32[$183>>2] = $164;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $181 = HEAP32[$__err>>2]|0;
   $182 = $181 | 2;
   HEAP32[$__err>>2] = $182;
   $183 = ($agg$result);
   HEAP32[$183>>2] = $164;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $95 = ___cxa_find_matching_catch(-1,-1)|0;
 $96 = tempRet0;
 $lpad$phi$index = $95;$lpad$phi$index2 = $96;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $3 = ($__b);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1);
 HEAP32[$5>>2] = $4;
 $6 = ($__e);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($2);
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 $16 = $$byval_copy;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre32 = 0, $$pre33 = 0, $$pre35 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 328|0;
 $__atoms = sp;
 $__thousands_sep = sp + 104|0;
 $__grouping = sp + 112|0;
 $__buf = sp + 128|0;
 $__a_end = sp + 144|0;
 $__g = sp + 152|0;
 $__g_end = sp + 312|0;
 $__dc = sp + 320|0;
 $1 = (($__iob) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 if ((($3|0) == 0)) {
  $$0$i = 0;
 } else if ((($3|0) == 64)) {
  $$0$i = 8;
 } else if ((($3|0) == 8)) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 $4 = $__atoms;
 $5 = ($__atoms);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$5,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(13,($__buf|0),10,0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L6: do {
  if (!($7)) {
   $8 = HEAP8[$this2$i$i$i]|0;
   $9 = $8 & 1;
   $10 = ($9<<24>>24)==(0);
   if ($10) {
    $13 = $__buf;
    $14 = (($13) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $14;$$pre$phi36Z2D = $$pre35;$15 = $14;
   } else {
    $11 = (($__buf) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $$pre32 = $__buf;
    $$pre33 = (($$pre32) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $11;$15 = $12;
   }
   HEAP32[$__a_end>>2] = $15;
   $16 = $__g;
   $17 = ($__g);
   HEAP32[$__g_end>>2] = $17;
   HEAP32[$__dc>>2] = 0;
   $18 = ($__b);
   $19 = ($__e);
   $20 = ($__buf);
   $21 = (($__buf) + 4|0);
   $22 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$18>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $15;
   L12: while(1) {
    $23 = ($$pre$i$i$i5|0)==(0|0);
    do {
     if ($23) {
      $38 = 0;$39 = 1;
     } else {
      $24 = (($$pre$i$i$i5) + 12|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = (($$pre$i$i$i5) + 16|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($25|0)==($27|0);
      if ($28) {
       $29 = $$pre$i$i$i5;
       $30 = HEAP32[$29>>2]|0;
       $31 = (($30) + 36|0);
       $32 = HEAP32[$31>>2]|0;
       __THREW__ = 0;
       $33 = (invoke_ii($32|0,($$pre$i$i$i5|0))|0);
       $34 = __THREW__; __THREW__ = 0;
       $35 = $34&1;
       if ($35) {
        label = 38;
        break L12;
       } else {
        $$0$i$i$i$i3 = $33;
       }
      } else {
       $36 = HEAP32[$25>>2]|0;
       $$0$i$i$i$i3 = $36;
      }
      $37 = ($$0$i$i$i$i3|0)==(-1);
      if (!($37)) {
       $38 = $$pre$i$i$i5;$39 = 0;
       break;
      }
      HEAP32[$18>>2] = 0;
      $38 = 0;$39 = 1;
     }
    } while(0);
    $40 = HEAP32[$19>>2]|0;
    $41 = ($40|0)==(0|0);
    do {
     if ($41) {
      label = 22;
     } else {
      $42 = (($40) + 12|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = (($40) + 16|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = ($43|0)==($45|0);
      if ($46) {
       $47 = $40;
       $48 = HEAP32[$47>>2]|0;
       $49 = (($48) + 36|0);
       $50 = HEAP32[$49>>2]|0;
       __THREW__ = 0;
       $51 = (invoke_ii($50|0,($40|0))|0);
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if ($53) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $51;
       }
      } else {
       $54 = HEAP32[$43>>2]|0;
       $$0$i$i1$i$i9 = $54;
      }
      $55 = ($$0$i$i1$i$i9|0)==(-1);
      if ($55) {
       HEAP32[$19>>2] = 0;
       label = 22;
       break;
      } else {
       if ($39) {
        $56 = $40;
        break;
       } else {
        $$pre$i3$i$i = $40;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     if ($39) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $56 = 0;
     }
    }
    $57 = HEAP32[$__a_end>>2]|0;
    $58 = $57;
    $59 = $__a$0;
    $60 = (($58) - ($59))|0;
    $61 = HEAP8[$this2$i$i$i]|0;
    $62 = $61 & 1;
    $63 = ($62<<24>>24)==(0);
    if ($63) {
     $65 = $61&255;
     $66 = $65 >>> 1;
     $67 = $66;
    } else {
     $64 = HEAP32[$21>>2]|0;
     $67 = $64;
    }
    $68 = ($60|0)==($67|0);
    if ($68) {
     if ($63) {
      $70 = $61&255;
      $71 = $70 >>> 1;
      $72 = $61&255;
      $73 = $72 >>> 1;
      $74 = $71;$75 = $73;
     } else {
      $69 = HEAP32[$21>>2]|0;
      $74 = $69;$75 = $69;
     }
     $76 = $75 << 1;
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($76|0),0);
     $77 = __THREW__; __THREW__ = 0;
     $78 = $77&1;
     if ($78) {
      label = 38;
      break;
     }
     $79 = HEAP8[$this2$i$i$i]|0;
     $80 = $79 & 1;
     $81 = ($80<<24>>24)==(0);
     if ($81) {
      $84 = 10;
     } else {
      $82 = HEAP32[$20>>2]|0;
      $83 = $82 & -2;
      $phitmp$i23 = (($83) + -1)|0;
      $84 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($84|0),0);
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     if ($86) {
      label = 38;
      break;
     }
     $87 = HEAP8[$this2$i$i$i]|0;
     $88 = $87 & 1;
     $89 = ($88<<24>>24)==(0);
     if ($89) {
      $91 = $$pre$phi34Z2D;
     } else {
      $90 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $91 = $90;
     }
     $92 = (($91) + ($74)|0);
     HEAP32[$__a_end>>2] = $92;
     $__a$1 = $91;
    } else {
     $__a$1 = $__a$0;
    }
    $97 = (($38) + 12|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (($38) + 16|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = ($98|0)==($100|0);
    if ($101) {
     $102 = $38;
     $103 = HEAP32[$102>>2]|0;
     $104 = (($103) + 36|0);
     $105 = HEAP32[$104>>2]|0;
     __THREW__ = 0;
     $106 = (invoke_ii($105|0,($38|0))|0);
     $107 = __THREW__; __THREW__ = 0;
     $108 = $107&1;
     if ($108) {
      label = 38;
      break;
     } else {
      $$0$i$i = $106;
     }
    } else {
     $109 = HEAP32[$98>>2]|0;
     $$0$i$i = $109;
    }
    $110 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$22,$__grouping,$17,$__g_end,$5)|0);
    $111 = ($110|0)==(0);
    if (!($111)) {
     $$pre$i3$i$i = $56;$__a$2 = $__a$1;
     break;
    }
    $112 = HEAP32[$97>>2]|0;
    $113 = HEAP32[$99>>2]|0;
    $114 = ($112|0)==($113|0);
    if ($114) {
     $115 = $38;
     $116 = HEAP32[$115>>2]|0;
     $117 = (($116) + 40|0);
     $118 = HEAP32[$117>>2]|0;
     __THREW__ = 0;
     (invoke_ii($118|0,($38|0))|0);
     $119 = __THREW__; __THREW__ = 0;
     $120 = $119&1;
     if ($120) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $38;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $121 = (($112) + 4|0);
     HEAP32[$97>>2] = $121;
     $$pre$i$i$i5 = $38;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $93 = ___cxa_find_matching_catch(-1,-1)|0;
    $94 = tempRet0;
    $lpad$phi$index = $93;$lpad$phi$index2 = $94;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $122 = $__grouping;
   $123 = HEAP8[$122]|0;
   $124 = $123 & 1;
   $125 = ($124<<24>>24)==(0);
   if ($125) {
    $128 = $123&255;
    $129 = $128 >>> 1;
    $130 = $129;
   } else {
    $126 = (($__grouping) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $130 = $127;
   }
   $131 = ($130|0)==(0);
   do {
    if (!($131)) {
     $132 = HEAP32[$__g_end>>2]|0;
     $133 = $132;
     $134 = $__g;
     $135 = (($133) - ($134))|0;
     $136 = ($135|0)<(160);
     if (!($136)) {
      break;
     }
     $137 = HEAP32[$__dc>>2]|0;
     $138 = (($132) + 4|0);
     HEAP32[$__g_end>>2] = $138;
     HEAP32[$132>>2] = $137;
    }
   } while(0);
   $139 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $140 = (invoke_iiiii(9,($__a$2|0),($139|0),($__err|0),($$0$i|0))|0);
   $141 = __THREW__; __THREW__ = 0;
   $142 = $141&1;
   if ($142) {
    break;
   }
   HEAP16[$__v>>1] = $140;
   $143 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$17,$143,$__err);
   $144 = ($38|0)==(0|0);
   do {
    if ($144) {
     $159 = 0;$160 = 1;
    } else {
     $145 = (($38) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (($38) + 16|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($146|0)==($148|0);
     if ($149) {
      $150 = $38;
      $151 = HEAP32[$150>>2]|0;
      $152 = (($151) + 36|0);
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = (invoke_ii($153|0,($38|0))|0);
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      if ($156) {
       break L6;
      } else {
       $$0$i$i$i$i = $154;
      }
     } else {
      $157 = HEAP32[$146>>2]|0;
      $$0$i$i$i$i = $157;
     }
     $158 = ($$0$i$i$i$i|0)==(-1);
     if (!($158)) {
      $159 = $38;$160 = 0;
      break;
     }
     HEAP32[$18>>2] = 0;
     $159 = 0;$160 = 1;
    }
   } while(0);
   $161 = ($$pre$i3$i$i|0)==(0|0);
   do {
    if ($161) {
     label = 67;
    } else {
     $162 = (($$pre$i3$i$i) + 12|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = (($$pre$i3$i$i) + 16|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($163|0)==($165|0);
     if ($166) {
      $167 = $$pre$i3$i$i;
      $168 = HEAP32[$167>>2]|0;
      $169 = (($168) + 36|0);
      $170 = HEAP32[$169>>2]|0;
      __THREW__ = 0;
      $171 = (invoke_ii($170|0,($$pre$i3$i$i|0))|0);
      $172 = __THREW__; __THREW__ = 0;
      $173 = $172&1;
      if ($173) {
       break L6;
      } else {
       $$0$i$i1$i$i = $171;
      }
     } else {
      $174 = HEAP32[$163>>2]|0;
      $$0$i$i1$i$i = $174;
     }
     $175 = ($$0$i$i1$i$i|0)==(-1);
     if ($175) {
      HEAP32[$19>>2] = 0;
      label = 67;
      break;
     }
     if (!($160)) {
      break;
     }
     $178 = ($agg$result);
     HEAP32[$178>>2] = $159;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 67) {
     if ($160) {
      break;
     }
     $178 = ($agg$result);
     HEAP32[$178>>2] = $159;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $176 = HEAP32[$__err>>2]|0;
   $177 = $176 | 2;
   HEAP32[$__err>>2] = $177;
   $178 = ($agg$result);
   HEAP32[$178>>2] = $159;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $95 = ___cxa_find_matching_catch(-1,-1)|0;
 $96 = tempRet0;
 $lpad$phi$index = $95;$lpad$phi$index2 = $96;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $3 = ($__b);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1);
 HEAP32[$5>>2] = $4;
 $6 = ($__e);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($2);
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 $16 = $$byval_copy;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre32 = 0, $$pre33 = 0, $$pre35 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 328|0;
 $__atoms = sp;
 $__thousands_sep = sp + 104|0;
 $__grouping = sp + 112|0;
 $__buf = sp + 128|0;
 $__a_end = sp + 144|0;
 $__g = sp + 152|0;
 $__g_end = sp + 312|0;
 $__dc = sp + 320|0;
 $1 = (($__iob) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 if ((($3|0) == 0)) {
  $$0$i = 0;
 } else if ((($3|0) == 8)) {
  $$0$i = 16;
 } else if ((($3|0) == 64)) {
  $$0$i = 8;
 } else {
  $$0$i = 10;
 }
 $4 = $__atoms;
 $5 = ($__atoms);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$5,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(13,($__buf|0),10,0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L6: do {
  if (!($7)) {
   $8 = HEAP8[$this2$i$i$i]|0;
   $9 = $8 & 1;
   $10 = ($9<<24>>24)==(0);
   if ($10) {
    $13 = $__buf;
    $14 = (($13) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $14;$$pre$phi36Z2D = $$pre35;$15 = $14;
   } else {
    $11 = (($__buf) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $$pre32 = $__buf;
    $$pre33 = (($$pre32) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $11;$15 = $12;
   }
   HEAP32[$__a_end>>2] = $15;
   $16 = $__g;
   $17 = ($__g);
   HEAP32[$__g_end>>2] = $17;
   HEAP32[$__dc>>2] = 0;
   $18 = ($__b);
   $19 = ($__e);
   $20 = ($__buf);
   $21 = (($__buf) + 4|0);
   $22 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$18>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $15;
   L12: while(1) {
    $23 = ($$pre$i$i$i5|0)==(0|0);
    do {
     if ($23) {
      $38 = 0;$39 = 1;
     } else {
      $24 = (($$pre$i$i$i5) + 12|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = (($$pre$i$i$i5) + 16|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($25|0)==($27|0);
      if ($28) {
       $29 = $$pre$i$i$i5;
       $30 = HEAP32[$29>>2]|0;
       $31 = (($30) + 36|0);
       $32 = HEAP32[$31>>2]|0;
       __THREW__ = 0;
       $33 = (invoke_ii($32|0,($$pre$i$i$i5|0))|0);
       $34 = __THREW__; __THREW__ = 0;
       $35 = $34&1;
       if ($35) {
        label = 38;
        break L12;
       } else {
        $$0$i$i$i$i3 = $33;
       }
      } else {
       $36 = HEAP32[$25>>2]|0;
       $$0$i$i$i$i3 = $36;
      }
      $37 = ($$0$i$i$i$i3|0)==(-1);
      if (!($37)) {
       $38 = $$pre$i$i$i5;$39 = 0;
       break;
      }
      HEAP32[$18>>2] = 0;
      $38 = 0;$39 = 1;
     }
    } while(0);
    $40 = HEAP32[$19>>2]|0;
    $41 = ($40|0)==(0|0);
    do {
     if ($41) {
      label = 22;
     } else {
      $42 = (($40) + 12|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = (($40) + 16|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = ($43|0)==($45|0);
      if ($46) {
       $47 = $40;
       $48 = HEAP32[$47>>2]|0;
       $49 = (($48) + 36|0);
       $50 = HEAP32[$49>>2]|0;
       __THREW__ = 0;
       $51 = (invoke_ii($50|0,($40|0))|0);
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if ($53) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $51;
       }
      } else {
       $54 = HEAP32[$43>>2]|0;
       $$0$i$i1$i$i9 = $54;
      }
      $55 = ($$0$i$i1$i$i9|0)==(-1);
      if ($55) {
       HEAP32[$19>>2] = 0;
       label = 22;
       break;
      } else {
       if ($39) {
        $56 = $40;
        break;
       } else {
        $$pre$i3$i$i = $40;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     if ($39) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $56 = 0;
     }
    }
    $57 = HEAP32[$__a_end>>2]|0;
    $58 = $57;
    $59 = $__a$0;
    $60 = (($58) - ($59))|0;
    $61 = HEAP8[$this2$i$i$i]|0;
    $62 = $61 & 1;
    $63 = ($62<<24>>24)==(0);
    if ($63) {
     $65 = $61&255;
     $66 = $65 >>> 1;
     $67 = $66;
    } else {
     $64 = HEAP32[$21>>2]|0;
     $67 = $64;
    }
    $68 = ($60|0)==($67|0);
    if ($68) {
     if ($63) {
      $70 = $61&255;
      $71 = $70 >>> 1;
      $72 = $61&255;
      $73 = $72 >>> 1;
      $74 = $71;$75 = $73;
     } else {
      $69 = HEAP32[$21>>2]|0;
      $74 = $69;$75 = $69;
     }
     $76 = $75 << 1;
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($76|0),0);
     $77 = __THREW__; __THREW__ = 0;
     $78 = $77&1;
     if ($78) {
      label = 38;
      break;
     }
     $79 = HEAP8[$this2$i$i$i]|0;
     $80 = $79 & 1;
     $81 = ($80<<24>>24)==(0);
     if ($81) {
      $84 = 10;
     } else {
      $82 = HEAP32[$20>>2]|0;
      $83 = $82 & -2;
      $phitmp$i23 = (($83) + -1)|0;
      $84 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($84|0),0);
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     if ($86) {
      label = 38;
      break;
     }
     $87 = HEAP8[$this2$i$i$i]|0;
     $88 = $87 & 1;
     $89 = ($88<<24>>24)==(0);
     if ($89) {
      $91 = $$pre$phi34Z2D;
     } else {
      $90 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $91 = $90;
     }
     $92 = (($91) + ($74)|0);
     HEAP32[$__a_end>>2] = $92;
     $__a$1 = $91;
    } else {
     $__a$1 = $__a$0;
    }
    $97 = (($38) + 12|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (($38) + 16|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = ($98|0)==($100|0);
    if ($101) {
     $102 = $38;
     $103 = HEAP32[$102>>2]|0;
     $104 = (($103) + 36|0);
     $105 = HEAP32[$104>>2]|0;
     __THREW__ = 0;
     $106 = (invoke_ii($105|0,($38|0))|0);
     $107 = __THREW__; __THREW__ = 0;
     $108 = $107&1;
     if ($108) {
      label = 38;
      break;
     } else {
      $$0$i$i = $106;
     }
    } else {
     $109 = HEAP32[$98>>2]|0;
     $$0$i$i = $109;
    }
    $110 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$22,$__grouping,$17,$__g_end,$5)|0);
    $111 = ($110|0)==(0);
    if (!($111)) {
     $$pre$i3$i$i = $56;$__a$2 = $__a$1;
     break;
    }
    $112 = HEAP32[$97>>2]|0;
    $113 = HEAP32[$99>>2]|0;
    $114 = ($112|0)==($113|0);
    if ($114) {
     $115 = $38;
     $116 = HEAP32[$115>>2]|0;
     $117 = (($116) + 40|0);
     $118 = HEAP32[$117>>2]|0;
     __THREW__ = 0;
     (invoke_ii($118|0,($38|0))|0);
     $119 = __THREW__; __THREW__ = 0;
     $120 = $119&1;
     if ($120) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $38;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $121 = (($112) + 4|0);
     HEAP32[$97>>2] = $121;
     $$pre$i$i$i5 = $38;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $93 = ___cxa_find_matching_catch(-1,-1)|0;
    $94 = tempRet0;
    $lpad$phi$index = $93;$lpad$phi$index2 = $94;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $122 = $__grouping;
   $123 = HEAP8[$122]|0;
   $124 = $123 & 1;
   $125 = ($124<<24>>24)==(0);
   if ($125) {
    $128 = $123&255;
    $129 = $128 >>> 1;
    $130 = $129;
   } else {
    $126 = (($__grouping) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $130 = $127;
   }
   $131 = ($130|0)==(0);
   do {
    if (!($131)) {
     $132 = HEAP32[$__g_end>>2]|0;
     $133 = $132;
     $134 = $__g;
     $135 = (($133) - ($134))|0;
     $136 = ($135|0)<(160);
     if (!($136)) {
      break;
     }
     $137 = HEAP32[$__dc>>2]|0;
     $138 = (($132) + 4|0);
     HEAP32[$__g_end>>2] = $138;
     HEAP32[$132>>2] = $137;
    }
   } while(0);
   $139 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $140 = (invoke_iiiii(10,($__a$2|0),($139|0),($__err|0),($$0$i|0))|0);
   $141 = __THREW__; __THREW__ = 0;
   $142 = $141&1;
   if ($142) {
    break;
   }
   HEAP32[$__v>>2] = $140;
   $143 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$17,$143,$__err);
   $144 = ($38|0)==(0|0);
   do {
    if ($144) {
     $159 = 0;$160 = 1;
    } else {
     $145 = (($38) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (($38) + 16|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($146|0)==($148|0);
     if ($149) {
      $150 = $38;
      $151 = HEAP32[$150>>2]|0;
      $152 = (($151) + 36|0);
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = (invoke_ii($153|0,($38|0))|0);
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      if ($156) {
       break L6;
      } else {
       $$0$i$i$i$i = $154;
      }
     } else {
      $157 = HEAP32[$146>>2]|0;
      $$0$i$i$i$i = $157;
     }
     $158 = ($$0$i$i$i$i|0)==(-1);
     if (!($158)) {
      $159 = $38;$160 = 0;
      break;
     }
     HEAP32[$18>>2] = 0;
     $159 = 0;$160 = 1;
    }
   } while(0);
   $161 = ($$pre$i3$i$i|0)==(0|0);
   do {
    if ($161) {
     label = 67;
    } else {
     $162 = (($$pre$i3$i$i) + 12|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = (($$pre$i3$i$i) + 16|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($163|0)==($165|0);
     if ($166) {
      $167 = $$pre$i3$i$i;
      $168 = HEAP32[$167>>2]|0;
      $169 = (($168) + 36|0);
      $170 = HEAP32[$169>>2]|0;
      __THREW__ = 0;
      $171 = (invoke_ii($170|0,($$pre$i3$i$i|0))|0);
      $172 = __THREW__; __THREW__ = 0;
      $173 = $172&1;
      if ($173) {
       break L6;
      } else {
       $$0$i$i1$i$i = $171;
      }
     } else {
      $174 = HEAP32[$163>>2]|0;
      $$0$i$i1$i$i = $174;
     }
     $175 = ($$0$i$i1$i$i|0)==(-1);
     if ($175) {
      HEAP32[$19>>2] = 0;
      label = 67;
      break;
     }
     if (!($160)) {
      break;
     }
     $178 = ($agg$result);
     HEAP32[$178>>2] = $159;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 67) {
     if ($160) {
      break;
     }
     $178 = ($agg$result);
     HEAP32[$178>>2] = $159;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $176 = HEAP32[$__err>>2]|0;
   $177 = $176 | 2;
   HEAP32[$__err>>2] = $177;
   $178 = ($agg$result);
   HEAP32[$178>>2] = $159;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $95 = ___cxa_find_matching_catch(-1,-1)|0;
 $96 = tempRet0;
 $lpad$phi$index = $95;$lpad$phi$index2 = $96;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $3 = ($__b);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1);
 HEAP32[$5>>2] = $4;
 $6 = ($__e);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($2);
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 $16 = $$byval_copy;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre32 = 0, $$pre33 = 0, $$pre35 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0;
 var $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 328|0;
 $__atoms = sp;
 $__thousands_sep = sp + 104|0;
 $__grouping = sp + 112|0;
 $__buf = sp + 128|0;
 $__a_end = sp + 144|0;
 $__g = sp + 152|0;
 $__g_end = sp + 312|0;
 $__dc = sp + 320|0;
 $1 = (($__iob) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 if ((($3|0) == 0)) {
  $$0$i = 0;
 } else if ((($3|0) == 64)) {
  $$0$i = 8;
 } else if ((($3|0) == 8)) {
  $$0$i = 16;
 } else {
  $$0$i = 10;
 }
 $4 = $__atoms;
 $5 = ($__atoms);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$5,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(13,($__buf|0),10,0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L6: do {
  if (!($7)) {
   $8 = HEAP8[$this2$i$i$i]|0;
   $9 = $8 & 1;
   $10 = ($9<<24>>24)==(0);
   if ($10) {
    $13 = $__buf;
    $14 = (($13) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $14;$$pre$phi36Z2D = $$pre35;$15 = $14;
   } else {
    $11 = (($__buf) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $$pre32 = $__buf;
    $$pre33 = (($$pre32) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $11;$15 = $12;
   }
   HEAP32[$__a_end>>2] = $15;
   $16 = $__g;
   $17 = ($__g);
   HEAP32[$__g_end>>2] = $17;
   HEAP32[$__dc>>2] = 0;
   $18 = ($__b);
   $19 = ($__e);
   $20 = ($__buf);
   $21 = (($__buf) + 4|0);
   $22 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$18>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $15;
   L12: while(1) {
    $23 = ($$pre$i$i$i5|0)==(0|0);
    do {
     if ($23) {
      $38 = 0;$39 = 1;
     } else {
      $24 = (($$pre$i$i$i5) + 12|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = (($$pre$i$i$i5) + 16|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($25|0)==($27|0);
      if ($28) {
       $29 = $$pre$i$i$i5;
       $30 = HEAP32[$29>>2]|0;
       $31 = (($30) + 36|0);
       $32 = HEAP32[$31>>2]|0;
       __THREW__ = 0;
       $33 = (invoke_ii($32|0,($$pre$i$i$i5|0))|0);
       $34 = __THREW__; __THREW__ = 0;
       $35 = $34&1;
       if ($35) {
        label = 38;
        break L12;
       } else {
        $$0$i$i$i$i3 = $33;
       }
      } else {
       $36 = HEAP32[$25>>2]|0;
       $$0$i$i$i$i3 = $36;
      }
      $37 = ($$0$i$i$i$i3|0)==(-1);
      if (!($37)) {
       $38 = $$pre$i$i$i5;$39 = 0;
       break;
      }
      HEAP32[$18>>2] = 0;
      $38 = 0;$39 = 1;
     }
    } while(0);
    $40 = HEAP32[$19>>2]|0;
    $41 = ($40|0)==(0|0);
    do {
     if ($41) {
      label = 22;
     } else {
      $42 = (($40) + 12|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = (($40) + 16|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = ($43|0)==($45|0);
      if ($46) {
       $47 = $40;
       $48 = HEAP32[$47>>2]|0;
       $49 = (($48) + 36|0);
       $50 = HEAP32[$49>>2]|0;
       __THREW__ = 0;
       $51 = (invoke_ii($50|0,($40|0))|0);
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if ($53) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $51;
       }
      } else {
       $54 = HEAP32[$43>>2]|0;
       $$0$i$i1$i$i9 = $54;
      }
      $55 = ($$0$i$i1$i$i9|0)==(-1);
      if ($55) {
       HEAP32[$19>>2] = 0;
       label = 22;
       break;
      } else {
       if ($39) {
        $56 = $40;
        break;
       } else {
        $$pre$i3$i$i = $40;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     if ($39) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $56 = 0;
     }
    }
    $57 = HEAP32[$__a_end>>2]|0;
    $58 = $57;
    $59 = $__a$0;
    $60 = (($58) - ($59))|0;
    $61 = HEAP8[$this2$i$i$i]|0;
    $62 = $61 & 1;
    $63 = ($62<<24>>24)==(0);
    if ($63) {
     $65 = $61&255;
     $66 = $65 >>> 1;
     $67 = $66;
    } else {
     $64 = HEAP32[$21>>2]|0;
     $67 = $64;
    }
    $68 = ($60|0)==($67|0);
    if ($68) {
     if ($63) {
      $70 = $61&255;
      $71 = $70 >>> 1;
      $72 = $61&255;
      $73 = $72 >>> 1;
      $74 = $71;$75 = $73;
     } else {
      $69 = HEAP32[$21>>2]|0;
      $74 = $69;$75 = $69;
     }
     $76 = $75 << 1;
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($76|0),0);
     $77 = __THREW__; __THREW__ = 0;
     $78 = $77&1;
     if ($78) {
      label = 38;
      break;
     }
     $79 = HEAP8[$this2$i$i$i]|0;
     $80 = $79 & 1;
     $81 = ($80<<24>>24)==(0);
     if ($81) {
      $84 = 10;
     } else {
      $82 = HEAP32[$20>>2]|0;
      $83 = $82 & -2;
      $phitmp$i23 = (($83) + -1)|0;
      $84 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($84|0),0);
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     if ($86) {
      label = 38;
      break;
     }
     $87 = HEAP8[$this2$i$i$i]|0;
     $88 = $87 & 1;
     $89 = ($88<<24>>24)==(0);
     if ($89) {
      $91 = $$pre$phi34Z2D;
     } else {
      $90 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $91 = $90;
     }
     $92 = (($91) + ($74)|0);
     HEAP32[$__a_end>>2] = $92;
     $__a$1 = $91;
    } else {
     $__a$1 = $__a$0;
    }
    $97 = (($38) + 12|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (($38) + 16|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = ($98|0)==($100|0);
    if ($101) {
     $102 = $38;
     $103 = HEAP32[$102>>2]|0;
     $104 = (($103) + 36|0);
     $105 = HEAP32[$104>>2]|0;
     __THREW__ = 0;
     $106 = (invoke_ii($105|0,($38|0))|0);
     $107 = __THREW__; __THREW__ = 0;
     $108 = $107&1;
     if ($108) {
      label = 38;
      break;
     } else {
      $$0$i$i = $106;
     }
    } else {
     $109 = HEAP32[$98>>2]|0;
     $$0$i$i = $109;
    }
    $110 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$22,$__grouping,$17,$__g_end,$5)|0);
    $111 = ($110|0)==(0);
    if (!($111)) {
     $$pre$i3$i$i = $56;$__a$2 = $__a$1;
     break;
    }
    $112 = HEAP32[$97>>2]|0;
    $113 = HEAP32[$99>>2]|0;
    $114 = ($112|0)==($113|0);
    if ($114) {
     $115 = $38;
     $116 = HEAP32[$115>>2]|0;
     $117 = (($116) + 40|0);
     $118 = HEAP32[$117>>2]|0;
     __THREW__ = 0;
     (invoke_ii($118|0,($38|0))|0);
     $119 = __THREW__; __THREW__ = 0;
     $120 = $119&1;
     if ($120) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $38;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $121 = (($112) + 4|0);
     HEAP32[$97>>2] = $121;
     $$pre$i$i$i5 = $38;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $93 = ___cxa_find_matching_catch(-1,-1)|0;
    $94 = tempRet0;
    $lpad$phi$index = $93;$lpad$phi$index2 = $94;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $122 = $__grouping;
   $123 = HEAP8[$122]|0;
   $124 = $123 & 1;
   $125 = ($124<<24>>24)==(0);
   if ($125) {
    $128 = $123&255;
    $129 = $128 >>> 1;
    $130 = $129;
   } else {
    $126 = (($__grouping) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $130 = $127;
   }
   $131 = ($130|0)==(0);
   do {
    if (!($131)) {
     $132 = HEAP32[$__g_end>>2]|0;
     $133 = $132;
     $134 = $__g;
     $135 = (($133) - ($134))|0;
     $136 = ($135|0)<(160);
     if (!($136)) {
      break;
     }
     $137 = HEAP32[$__dc>>2]|0;
     $138 = (($132) + 4|0);
     HEAP32[$__g_end>>2] = $138;
     HEAP32[$132>>2] = $137;
    }
   } while(0);
   $139 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $140 = (invoke_iiiii(11,($__a$2|0),($139|0),($__err|0),($$0$i|0))|0);
   $141 = __THREW__; __THREW__ = 0;
   $142 = $141&1;
   if ($142) {
    break;
   }
   HEAP32[$__v>>2] = $140;
   $143 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$17,$143,$__err);
   $144 = ($38|0)==(0|0);
   do {
    if ($144) {
     $159 = 0;$160 = 1;
    } else {
     $145 = (($38) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (($38) + 16|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($146|0)==($148|0);
     if ($149) {
      $150 = $38;
      $151 = HEAP32[$150>>2]|0;
      $152 = (($151) + 36|0);
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = (invoke_ii($153|0,($38|0))|0);
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      if ($156) {
       break L6;
      } else {
       $$0$i$i$i$i = $154;
      }
     } else {
      $157 = HEAP32[$146>>2]|0;
      $$0$i$i$i$i = $157;
     }
     $158 = ($$0$i$i$i$i|0)==(-1);
     if (!($158)) {
      $159 = $38;$160 = 0;
      break;
     }
     HEAP32[$18>>2] = 0;
     $159 = 0;$160 = 1;
    }
   } while(0);
   $161 = ($$pre$i3$i$i|0)==(0|0);
   do {
    if ($161) {
     label = 67;
    } else {
     $162 = (($$pre$i3$i$i) + 12|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = (($$pre$i3$i$i) + 16|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($163|0)==($165|0);
     if ($166) {
      $167 = $$pre$i3$i$i;
      $168 = HEAP32[$167>>2]|0;
      $169 = (($168) + 36|0);
      $170 = HEAP32[$169>>2]|0;
      __THREW__ = 0;
      $171 = (invoke_ii($170|0,($$pre$i3$i$i|0))|0);
      $172 = __THREW__; __THREW__ = 0;
      $173 = $172&1;
      if ($173) {
       break L6;
      } else {
       $$0$i$i1$i$i = $171;
      }
     } else {
      $174 = HEAP32[$163>>2]|0;
      $$0$i$i1$i$i = $174;
     }
     $175 = ($$0$i$i1$i$i|0)==(-1);
     if ($175) {
      HEAP32[$19>>2] = 0;
      label = 67;
      break;
     }
     if (!($160)) {
      break;
     }
     $178 = ($agg$result);
     HEAP32[$178>>2] = $159;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 67) {
     if ($160) {
      break;
     }
     $178 = ($agg$result);
     HEAP32[$178>>2] = $159;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $176 = HEAP32[$__err>>2]|0;
   $177 = $176 | 2;
   HEAP32[$__err>>2] = $177;
   $178 = ($agg$result);
   HEAP32[$178>>2] = $159;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $95 = ___cxa_find_matching_catch(-1,-1)|0;
 $96 = tempRet0;
 $lpad$phi$index = $95;$lpad$phi$index2 = $96;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $3 = ($__b);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1);
 HEAP32[$5>>2] = $4;
 $6 = ($__e);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($2);
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 $16 = $$byval_copy;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre32 = 0, $$pre33 = 0, $$pre35 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0;
 var $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 328|0;
 $__atoms = sp;
 $__thousands_sep = sp + 104|0;
 $__grouping = sp + 112|0;
 $__buf = sp + 128|0;
 $__a_end = sp + 144|0;
 $__g = sp + 152|0;
 $__g_end = sp + 312|0;
 $__dc = sp + 320|0;
 $1 = (($__iob) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 74;
 if ((($3|0) == 0)) {
  $$0$i = 0;
 } else if ((($3|0) == 8)) {
  $$0$i = 16;
 } else if ((($3|0) == 64)) {
  $$0$i = 8;
 } else {
  $$0$i = 10;
 }
 $4 = $__atoms;
 $5 = ($__atoms);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$5,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(13,($__buf|0),10,0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L6: do {
  if (!($7)) {
   $8 = HEAP8[$this2$i$i$i]|0;
   $9 = $8 & 1;
   $10 = ($9<<24>>24)==(0);
   if ($10) {
    $13 = $__buf;
    $14 = (($13) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $14;$$pre$phi36Z2D = $$pre35;$15 = $14;
   } else {
    $11 = (($__buf) + 8|0);
    $12 = HEAP32[$11>>2]|0;
    $$pre32 = $__buf;
    $$pre33 = (($$pre32) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $11;$15 = $12;
   }
   HEAP32[$__a_end>>2] = $15;
   $16 = $__g;
   $17 = ($__g);
   HEAP32[$__g_end>>2] = $17;
   HEAP32[$__dc>>2] = 0;
   $18 = ($__b);
   $19 = ($__e);
   $20 = ($__buf);
   $21 = (($__buf) + 4|0);
   $22 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$18>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $15;
   L12: while(1) {
    $23 = ($$pre$i$i$i5|0)==(0|0);
    do {
     if ($23) {
      $38 = 0;$39 = 1;
     } else {
      $24 = (($$pre$i$i$i5) + 12|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = (($$pre$i$i$i5) + 16|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($25|0)==($27|0);
      if ($28) {
       $29 = $$pre$i$i$i5;
       $30 = HEAP32[$29>>2]|0;
       $31 = (($30) + 36|0);
       $32 = HEAP32[$31>>2]|0;
       __THREW__ = 0;
       $33 = (invoke_ii($32|0,($$pre$i$i$i5|0))|0);
       $34 = __THREW__; __THREW__ = 0;
       $35 = $34&1;
       if ($35) {
        label = 38;
        break L12;
       } else {
        $$0$i$i$i$i3 = $33;
       }
      } else {
       $36 = HEAP32[$25>>2]|0;
       $$0$i$i$i$i3 = $36;
      }
      $37 = ($$0$i$i$i$i3|0)==(-1);
      if (!($37)) {
       $38 = $$pre$i$i$i5;$39 = 0;
       break;
      }
      HEAP32[$18>>2] = 0;
      $38 = 0;$39 = 1;
     }
    } while(0);
    $40 = HEAP32[$19>>2]|0;
    $41 = ($40|0)==(0|0);
    do {
     if ($41) {
      label = 22;
     } else {
      $42 = (($40) + 12|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = (($40) + 16|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = ($43|0)==($45|0);
      if ($46) {
       $47 = $40;
       $48 = HEAP32[$47>>2]|0;
       $49 = (($48) + 36|0);
       $50 = HEAP32[$49>>2]|0;
       __THREW__ = 0;
       $51 = (invoke_ii($50|0,($40|0))|0);
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if ($53) {
        label = 38;
        break L12;
       } else {
        $$0$i$i1$i$i9 = $51;
       }
      } else {
       $54 = HEAP32[$43>>2]|0;
       $$0$i$i1$i$i9 = $54;
      }
      $55 = ($$0$i$i1$i$i9|0)==(-1);
      if ($55) {
       HEAP32[$19>>2] = 0;
       label = 22;
       break;
      } else {
       if ($39) {
        $56 = $40;
        break;
       } else {
        $$pre$i3$i$i = $40;$__a$2 = $__a$0;
        break L12;
       }
      }
     }
    } while(0);
    if ((label|0) == 22) {
     label = 0;
     if ($39) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $56 = 0;
     }
    }
    $57 = HEAP32[$__a_end>>2]|0;
    $58 = $57;
    $59 = $__a$0;
    $60 = (($58) - ($59))|0;
    $61 = HEAP8[$this2$i$i$i]|0;
    $62 = $61 & 1;
    $63 = ($62<<24>>24)==(0);
    if ($63) {
     $65 = $61&255;
     $66 = $65 >>> 1;
     $67 = $66;
    } else {
     $64 = HEAP32[$21>>2]|0;
     $67 = $64;
    }
    $68 = ($60|0)==($67|0);
    if ($68) {
     if ($63) {
      $70 = $61&255;
      $71 = $70 >>> 1;
      $72 = $61&255;
      $73 = $72 >>> 1;
      $74 = $71;$75 = $73;
     } else {
      $69 = HEAP32[$21>>2]|0;
      $74 = $69;$75 = $69;
     }
     $76 = $75 << 1;
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($76|0),0);
     $77 = __THREW__; __THREW__ = 0;
     $78 = $77&1;
     if ($78) {
      label = 38;
      break;
     }
     $79 = HEAP8[$this2$i$i$i]|0;
     $80 = $79 & 1;
     $81 = ($80<<24>>24)==(0);
     if ($81) {
      $84 = 10;
     } else {
      $82 = HEAP32[$20>>2]|0;
      $83 = $82 & -2;
      $phitmp$i23 = (($83) + -1)|0;
      $84 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($84|0),0);
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     if ($86) {
      label = 38;
      break;
     }
     $87 = HEAP8[$this2$i$i$i]|0;
     $88 = $87 & 1;
     $89 = ($88<<24>>24)==(0);
     if ($89) {
      $91 = $$pre$phi34Z2D;
     } else {
      $90 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $91 = $90;
     }
     $92 = (($91) + ($74)|0);
     HEAP32[$__a_end>>2] = $92;
     $__a$1 = $91;
    } else {
     $__a$1 = $__a$0;
    }
    $97 = (($38) + 12|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (($38) + 16|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = ($98|0)==($100|0);
    if ($101) {
     $102 = $38;
     $103 = HEAP32[$102>>2]|0;
     $104 = (($103) + 36|0);
     $105 = HEAP32[$104>>2]|0;
     __THREW__ = 0;
     $106 = (invoke_ii($105|0,($38|0))|0);
     $107 = __THREW__; __THREW__ = 0;
     $108 = $107&1;
     if ($108) {
      label = 38;
      break;
     } else {
      $$0$i$i = $106;
     }
    } else {
     $109 = HEAP32[$98>>2]|0;
     $$0$i$i = $109;
    }
    $110 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$$0$i,$__a$1,$__a_end,$__dc,$22,$__grouping,$17,$__g_end,$5)|0);
    $111 = ($110|0)==(0);
    if (!($111)) {
     $$pre$i3$i$i = $56;$__a$2 = $__a$1;
     break;
    }
    $112 = HEAP32[$97>>2]|0;
    $113 = HEAP32[$99>>2]|0;
    $114 = ($112|0)==($113|0);
    if ($114) {
     $115 = $38;
     $116 = HEAP32[$115>>2]|0;
     $117 = (($116) + 40|0);
     $118 = HEAP32[$117>>2]|0;
     __THREW__ = 0;
     (invoke_ii($118|0,($38|0))|0);
     $119 = __THREW__; __THREW__ = 0;
     $120 = $119&1;
     if ($120) {
      label = 38;
      break;
     } else {
      $$pre$i$i$i5 = $38;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $121 = (($112) + 4|0);
     HEAP32[$97>>2] = $121;
     $$pre$i$i$i5 = $38;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 38) {
    $93 = ___cxa_find_matching_catch(-1,-1)|0;
    $94 = tempRet0;
    $lpad$phi$index = $93;$lpad$phi$index2 = $94;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $122 = $__grouping;
   $123 = HEAP8[$122]|0;
   $124 = $123 & 1;
   $125 = ($124<<24>>24)==(0);
   if ($125) {
    $128 = $123&255;
    $129 = $128 >>> 1;
    $130 = $129;
   } else {
    $126 = (($__grouping) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $130 = $127;
   }
   $131 = ($130|0)==(0);
   do {
    if (!($131)) {
     $132 = HEAP32[$__g_end>>2]|0;
     $133 = $132;
     $134 = $__g;
     $135 = (($133) - ($134))|0;
     $136 = ($135|0)<(160);
     if (!($136)) {
      break;
     }
     $137 = HEAP32[$__dc>>2]|0;
     $138 = (($132) + 4|0);
     HEAP32[$__g_end>>2] = $138;
     HEAP32[$132>>2] = $137;
    }
   } while(0);
   $139 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $140 = (invoke_iiiii(12,($__a$2|0),($139|0),($__err|0),($$0$i|0))|0);
   $141 = tempRet0;
   $142 = __THREW__; __THREW__ = 0;
   $143 = $142&1;
   if ($143) {
    break;
   }
   $144 = $__v;
   $145 = $144;
   HEAP32[$145>>2] = $140;
   $146 = (($144) + 4)|0;
   $147 = $146;
   HEAP32[$147>>2] = $141;
   $148 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$17,$148,$__err);
   $149 = ($38|0)==(0|0);
   do {
    if ($149) {
     $164 = 0;$165 = 1;
    } else {
     $150 = (($38) + 12|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = (($38) + 16|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($151|0)==($153|0);
     if ($154) {
      $155 = $38;
      $156 = HEAP32[$155>>2]|0;
      $157 = (($156) + 36|0);
      $158 = HEAP32[$157>>2]|0;
      __THREW__ = 0;
      $159 = (invoke_ii($158|0,($38|0))|0);
      $160 = __THREW__; __THREW__ = 0;
      $161 = $160&1;
      if ($161) {
       break L6;
      } else {
       $$0$i$i$i$i = $159;
      }
     } else {
      $162 = HEAP32[$151>>2]|0;
      $$0$i$i$i$i = $162;
     }
     $163 = ($$0$i$i$i$i|0)==(-1);
     if (!($163)) {
      $164 = $38;$165 = 0;
      break;
     }
     HEAP32[$18>>2] = 0;
     $164 = 0;$165 = 1;
    }
   } while(0);
   $166 = ($$pre$i3$i$i|0)==(0|0);
   do {
    if ($166) {
     label = 67;
    } else {
     $167 = (($$pre$i3$i$i) + 12|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = (($$pre$i3$i$i) + 16|0);
     $170 = HEAP32[$169>>2]|0;
     $171 = ($168|0)==($170|0);
     if ($171) {
      $172 = $$pre$i3$i$i;
      $173 = HEAP32[$172>>2]|0;
      $174 = (($173) + 36|0);
      $175 = HEAP32[$174>>2]|0;
      __THREW__ = 0;
      $176 = (invoke_ii($175|0,($$pre$i3$i$i|0))|0);
      $177 = __THREW__; __THREW__ = 0;
      $178 = $177&1;
      if ($178) {
       break L6;
      } else {
       $$0$i$i1$i$i = $176;
      }
     } else {
      $179 = HEAP32[$168>>2]|0;
      $$0$i$i1$i$i = $179;
     }
     $180 = ($$0$i$i1$i$i|0)==(-1);
     if ($180) {
      HEAP32[$19>>2] = 0;
      label = 67;
      break;
     }
     if (!($165)) {
      break;
     }
     $183 = ($agg$result);
     HEAP32[$183>>2] = $164;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 67) {
     if ($165) {
      break;
     }
     $183 = ($agg$result);
     HEAP32[$183>>2] = $164;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $181 = HEAP32[$__err>>2]|0;
   $182 = $181 | 2;
   HEAP32[$__err>>2] = $182;
   $183 = ($agg$result);
   HEAP32[$183>>2] = $164;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $95 = ___cxa_find_matching_catch(-1,-1)|0;
 $96 = tempRet0;
 $lpad$phi$index = $95;$lpad$phi$index2 = $96;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $3 = ($__b);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1);
 HEAP32[$5>>2] = $4;
 $6 = ($__e);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($2);
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 $16 = $$byval_copy;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre33 = 0, $$pre34 = 0, $$pre36 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0;
 var $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 376|0;
 $__atoms = sp;
 $__decimal_point = sp + 128|0;
 $__thousands_sep = sp + 136|0;
 $__grouping = sp + 144|0;
 $__buf = sp + 160|0;
 $__a_end = sp + 176|0;
 $__g = sp + 184|0;
 $__g_end = sp + 344|0;
 $__dc = sp + 352|0;
 $__in_units = sp + 360|0;
 $__exp = sp + 368|0;
 $1 = $__atoms;
 $2 = ($__atoms);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$2,$__decimal_point,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(13,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if (!($4)) {
   $5 = HEAP8[$this2$i$i$i]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = $__buf;
    $11 = (($10) + 1|0);
    $$pre36 = (($__buf) + 8|0);
    $$pre$phi35Z2D = $11;$$pre$phi37Z2D = $$pre36;$12 = $11;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre33 = $__buf;
    $$pre34 = (($$pre33) + 1|0);
    $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $8;$12 = $9;
   }
   HEAP32[$__a_end>>2] = $12;
   $13 = $__g;
   $14 = ($__g);
   HEAP32[$__g_end>>2] = $14;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units] = 1;
   HEAP8[$__exp] = 69;
   $15 = ($__b);
   $16 = ($__e);
   $17 = ($__buf);
   $18 = (($__buf) + 4|0);
   $19 = HEAP32[$__decimal_point>>2]|0;
   $20 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$15>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $12;
   L7: while(1) {
    $21 = ($$pre$i$i$i5|0)==(0|0);
    do {
     if ($21) {
      $36 = 0;$37 = 1;
     } else {
      $22 = (($$pre$i$i$i5) + 12|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = (($$pre$i$i$i5) + 16|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($23|0)==($25|0);
      if ($26) {
       $27 = $$pre$i$i$i5;
       $28 = HEAP32[$27>>2]|0;
       $29 = (($28) + 36|0);
       $30 = HEAP32[$29>>2]|0;
       __THREW__ = 0;
       $31 = (invoke_ii($30|0,($$pre$i$i$i5|0))|0);
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       if ($33) {
        label = 34;
        break L7;
       } else {
        $$0$i$i$i$i3 = $31;
       }
      } else {
       $34 = HEAP32[$23>>2]|0;
       $$0$i$i$i$i3 = $34;
      }
      $35 = ($$0$i$i$i$i3|0)==(-1);
      if (!($35)) {
       $36 = $$pre$i$i$i5;$37 = 0;
       break;
      }
      HEAP32[$15>>2] = 0;
      $36 = 0;$37 = 1;
     }
    } while(0);
    $38 = HEAP32[$16>>2]|0;
    $39 = ($38|0)==(0|0);
    do {
     if ($39) {
      label = 18;
     } else {
      $40 = (($38) + 12|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (($38) + 16|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($41|0)==($43|0);
      if ($44) {
       $45 = $38;
       $46 = HEAP32[$45>>2]|0;
       $47 = (($46) + 36|0);
       $48 = HEAP32[$47>>2]|0;
       __THREW__ = 0;
       $49 = (invoke_ii($48|0,($38|0))|0);
       $50 = __THREW__; __THREW__ = 0;
       $51 = $50&1;
       if ($51) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $49;
       }
      } else {
       $52 = HEAP32[$41>>2]|0;
       $$0$i$i1$i$i9 = $52;
      }
      $53 = ($$0$i$i1$i$i9|0)==(-1);
      if ($53) {
       HEAP32[$16>>2] = 0;
       label = 18;
       break;
      } else {
       if ($37) {
        $54 = $38;
        break;
       } else {
        $$pre$i3$i$i = $38;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($37) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $54 = 0;
     }
    }
    $55 = HEAP32[$__a_end>>2]|0;
    $56 = $55;
    $57 = $__a$0;
    $58 = (($56) - ($57))|0;
    $59 = HEAP8[$this2$i$i$i]|0;
    $60 = $59 & 1;
    $61 = ($60<<24>>24)==(0);
    if ($61) {
     $63 = $59&255;
     $64 = $63 >>> 1;
     $65 = $64;
    } else {
     $62 = HEAP32[$18>>2]|0;
     $65 = $62;
    }
    $66 = ($58|0)==($65|0);
    if ($66) {
     if ($61) {
      $68 = $59&255;
      $69 = $68 >>> 1;
      $70 = $59&255;
      $71 = $70 >>> 1;
      $72 = $69;$73 = $71;
     } else {
      $67 = HEAP32[$18>>2]|0;
      $72 = $67;$73 = $67;
     }
     $74 = $73 << 1;
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($74|0),0);
     $75 = __THREW__; __THREW__ = 0;
     $76 = $75&1;
     if ($76) {
      label = 34;
      break;
     }
     $77 = HEAP8[$this2$i$i$i]|0;
     $78 = $77 & 1;
     $79 = ($78<<24>>24)==(0);
     if ($79) {
      $82 = 10;
     } else {
      $80 = HEAP32[$17>>2]|0;
      $81 = $80 & -2;
      $phitmp$i23 = (($81) + -1)|0;
      $82 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($82|0),0);
     $83 = __THREW__; __THREW__ = 0;
     $84 = $83&1;
     if ($84) {
      label = 34;
      break;
     }
     $85 = HEAP8[$this2$i$i$i]|0;
     $86 = $85 & 1;
     $87 = ($86<<24>>24)==(0);
     if ($87) {
      $89 = $$pre$phi35Z2D;
     } else {
      $88 = HEAP32[$$pre$phi37Z2D>>2]|0;
      $89 = $88;
     }
     $90 = (($89) + ($72)|0);
     HEAP32[$__a_end>>2] = $90;
     $__a$1 = $89;
    } else {
     $__a$1 = $__a$0;
    }
    $95 = (($36) + 12|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (($36) + 16|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($96|0)==($98|0);
    if ($99) {
     $100 = $36;
     $101 = HEAP32[$100>>2]|0;
     $102 = (($101) + 36|0);
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     $104 = (invoke_ii($103|0,($36|0))|0);
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 34;
      break;
     } else {
      $$0$i$i = $104;
     }
    } else {
     $107 = HEAP32[$96>>2]|0;
     $$0$i$i = $107;
    }
    $108 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$19,$20,$__grouping,$14,$__g_end,$__dc,$2)|0);
    $109 = ($108|0)==(0);
    if (!($109)) {
     $$pre$i3$i$i = $54;$__a$2 = $__a$1;
     break;
    }
    $110 = HEAP32[$95>>2]|0;
    $111 = HEAP32[$97>>2]|0;
    $112 = ($110|0)==($111|0);
    if ($112) {
     $113 = $36;
     $114 = HEAP32[$113>>2]|0;
     $115 = (($114) + 40|0);
     $116 = HEAP32[$115>>2]|0;
     __THREW__ = 0;
     (invoke_ii($116|0,($36|0))|0);
     $117 = __THREW__; __THREW__ = 0;
     $118 = $117&1;
     if ($118) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $36;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $119 = (($110) + 4|0);
     HEAP32[$95>>2] = $119;
     $$pre$i$i$i5 = $36;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $91 = ___cxa_find_matching_catch(-1,-1)|0;
    $92 = tempRet0;
    $lpad$phi$index = $91;$lpad$phi$index2 = $92;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $120 = $__grouping;
   $121 = HEAP8[$120]|0;
   $122 = $121 & 1;
   $123 = ($122<<24>>24)==(0);
   if ($123) {
    $126 = $121&255;
    $127 = $126 >>> 1;
    $128 = $127;
   } else {
    $124 = (($__grouping) + 4|0);
    $125 = HEAP32[$124>>2]|0;
    $128 = $125;
   }
   $129 = ($128|0)==(0);
   do {
    if (!($129)) {
     $130 = HEAP8[$__in_units]|0;
     $131 = ($130<<24>>24)==(0);
     if ($131) {
      break;
     }
     $132 = HEAP32[$__g_end>>2]|0;
     $133 = $132;
     $134 = $__g;
     $135 = (($133) - ($134))|0;
     $136 = ($135|0)<(160);
     if (!($136)) {
      break;
     }
     $137 = HEAP32[$__dc>>2]|0;
     $138 = (($132) + 4|0);
     HEAP32[$__g_end>>2] = $138;
     HEAP32[$132>>2] = $137;
    }
   } while(0);
   $139 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $140 = (+invoke_diii(1,($__a$2|0),($139|0),($__err|0)));
   $141 = __THREW__; __THREW__ = 0;
   $142 = $141&1;
   if ($142) {
    break;
   }
   HEAPF32[$__v>>2] = $140;
   $143 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$14,$143,$__err);
   $144 = ($36|0)==(0|0);
   do {
    if ($144) {
     $159 = 0;$160 = 1;
    } else {
     $145 = (($36) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (($36) + 16|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($146|0)==($148|0);
     if ($149) {
      $150 = $36;
      $151 = HEAP32[$150>>2]|0;
      $152 = (($151) + 36|0);
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = (invoke_ii($153|0,($36|0))|0);
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      if ($156) {
       break L1;
      } else {
       $$0$i$i$i$i = $154;
      }
     } else {
      $157 = HEAP32[$146>>2]|0;
      $$0$i$i$i$i = $157;
     }
     $158 = ($$0$i$i$i$i|0)==(-1);
     if (!($158)) {
      $159 = $36;$160 = 0;
      break;
     }
     HEAP32[$15>>2] = 0;
     $159 = 0;$160 = 1;
    }
   } while(0);
   $161 = ($$pre$i3$i$i|0)==(0|0);
   do {
    if ($161) {
     label = 64;
    } else {
     $162 = (($$pre$i3$i$i) + 12|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = (($$pre$i3$i$i) + 16|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($163|0)==($165|0);
     if ($166) {
      $167 = $$pre$i3$i$i;
      $168 = HEAP32[$167>>2]|0;
      $169 = (($168) + 36|0);
      $170 = HEAP32[$169>>2]|0;
      __THREW__ = 0;
      $171 = (invoke_ii($170|0,($$pre$i3$i$i|0))|0);
      $172 = __THREW__; __THREW__ = 0;
      $173 = $172&1;
      if ($173) {
       break L1;
      } else {
       $$0$i$i1$i$i = $171;
      }
     } else {
      $174 = HEAP32[$163>>2]|0;
      $$0$i$i1$i$i = $174;
     }
     $175 = ($$0$i$i1$i$i|0)==(-1);
     if ($175) {
      HEAP32[$16>>2] = 0;
      label = 64;
      break;
     }
     if (!($160)) {
      break;
     }
     $178 = ($agg$result);
     HEAP32[$178>>2] = $159;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 64) {
     if ($160) {
      break;
     }
     $178 = ($agg$result);
     HEAP32[$178>>2] = $159;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $176 = HEAP32[$__err>>2]|0;
   $177 = $176 | 2;
   HEAP32[$__err>>2] = $177;
   $178 = ($agg$result);
   HEAP32[$178>>2] = $159;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $93 = ___cxa_find_matching_catch(-1,-1)|0;
 $94 = tempRet0;
 $lpad$phi$index = $93;$lpad$phi$index2 = $94;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $3 = ($__b);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1);
 HEAP32[$5>>2] = $4;
 $6 = ($__e);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($2);
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 $16 = $$byval_copy;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre33 = 0, $$pre34 = 0, $$pre36 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0;
 var $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 376|0;
 $__atoms = sp;
 $__decimal_point = sp + 128|0;
 $__thousands_sep = sp + 136|0;
 $__grouping = sp + 144|0;
 $__buf = sp + 160|0;
 $__a_end = sp + 176|0;
 $__g = sp + 184|0;
 $__g_end = sp + 344|0;
 $__dc = sp + 352|0;
 $__in_units = sp + 360|0;
 $__exp = sp + 368|0;
 $1 = $__atoms;
 $2 = ($__atoms);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$2,$__decimal_point,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(13,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if (!($4)) {
   $5 = HEAP8[$this2$i$i$i]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = $__buf;
    $11 = (($10) + 1|0);
    $$pre36 = (($__buf) + 8|0);
    $$pre$phi35Z2D = $11;$$pre$phi37Z2D = $$pre36;$12 = $11;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre33 = $__buf;
    $$pre34 = (($$pre33) + 1|0);
    $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $8;$12 = $9;
   }
   HEAP32[$__a_end>>2] = $12;
   $13 = $__g;
   $14 = ($__g);
   HEAP32[$__g_end>>2] = $14;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units] = 1;
   HEAP8[$__exp] = 69;
   $15 = ($__b);
   $16 = ($__e);
   $17 = ($__buf);
   $18 = (($__buf) + 4|0);
   $19 = HEAP32[$__decimal_point>>2]|0;
   $20 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$15>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $12;
   L7: while(1) {
    $21 = ($$pre$i$i$i5|0)==(0|0);
    do {
     if ($21) {
      $36 = 0;$37 = 1;
     } else {
      $22 = (($$pre$i$i$i5) + 12|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = (($$pre$i$i$i5) + 16|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($23|0)==($25|0);
      if ($26) {
       $27 = $$pre$i$i$i5;
       $28 = HEAP32[$27>>2]|0;
       $29 = (($28) + 36|0);
       $30 = HEAP32[$29>>2]|0;
       __THREW__ = 0;
       $31 = (invoke_ii($30|0,($$pre$i$i$i5|0))|0);
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       if ($33) {
        label = 34;
        break L7;
       } else {
        $$0$i$i$i$i3 = $31;
       }
      } else {
       $34 = HEAP32[$23>>2]|0;
       $$0$i$i$i$i3 = $34;
      }
      $35 = ($$0$i$i$i$i3|0)==(-1);
      if (!($35)) {
       $36 = $$pre$i$i$i5;$37 = 0;
       break;
      }
      HEAP32[$15>>2] = 0;
      $36 = 0;$37 = 1;
     }
    } while(0);
    $38 = HEAP32[$16>>2]|0;
    $39 = ($38|0)==(0|0);
    do {
     if ($39) {
      label = 18;
     } else {
      $40 = (($38) + 12|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (($38) + 16|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($41|0)==($43|0);
      if ($44) {
       $45 = $38;
       $46 = HEAP32[$45>>2]|0;
       $47 = (($46) + 36|0);
       $48 = HEAP32[$47>>2]|0;
       __THREW__ = 0;
       $49 = (invoke_ii($48|0,($38|0))|0);
       $50 = __THREW__; __THREW__ = 0;
       $51 = $50&1;
       if ($51) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $49;
       }
      } else {
       $52 = HEAP32[$41>>2]|0;
       $$0$i$i1$i$i9 = $52;
      }
      $53 = ($$0$i$i1$i$i9|0)==(-1);
      if ($53) {
       HEAP32[$16>>2] = 0;
       label = 18;
       break;
      } else {
       if ($37) {
        $54 = $38;
        break;
       } else {
        $$pre$i3$i$i = $38;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($37) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $54 = 0;
     }
    }
    $55 = HEAP32[$__a_end>>2]|0;
    $56 = $55;
    $57 = $__a$0;
    $58 = (($56) - ($57))|0;
    $59 = HEAP8[$this2$i$i$i]|0;
    $60 = $59 & 1;
    $61 = ($60<<24>>24)==(0);
    if ($61) {
     $63 = $59&255;
     $64 = $63 >>> 1;
     $65 = $64;
    } else {
     $62 = HEAP32[$18>>2]|0;
     $65 = $62;
    }
    $66 = ($58|0)==($65|0);
    if ($66) {
     if ($61) {
      $68 = $59&255;
      $69 = $68 >>> 1;
      $70 = $59&255;
      $71 = $70 >>> 1;
      $72 = $69;$73 = $71;
     } else {
      $67 = HEAP32[$18>>2]|0;
      $72 = $67;$73 = $67;
     }
     $74 = $73 << 1;
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($74|0),0);
     $75 = __THREW__; __THREW__ = 0;
     $76 = $75&1;
     if ($76) {
      label = 34;
      break;
     }
     $77 = HEAP8[$this2$i$i$i]|0;
     $78 = $77 & 1;
     $79 = ($78<<24>>24)==(0);
     if ($79) {
      $82 = 10;
     } else {
      $80 = HEAP32[$17>>2]|0;
      $81 = $80 & -2;
      $phitmp$i23 = (($81) + -1)|0;
      $82 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($82|0),0);
     $83 = __THREW__; __THREW__ = 0;
     $84 = $83&1;
     if ($84) {
      label = 34;
      break;
     }
     $85 = HEAP8[$this2$i$i$i]|0;
     $86 = $85 & 1;
     $87 = ($86<<24>>24)==(0);
     if ($87) {
      $89 = $$pre$phi35Z2D;
     } else {
      $88 = HEAP32[$$pre$phi37Z2D>>2]|0;
      $89 = $88;
     }
     $90 = (($89) + ($72)|0);
     HEAP32[$__a_end>>2] = $90;
     $__a$1 = $89;
    } else {
     $__a$1 = $__a$0;
    }
    $95 = (($36) + 12|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (($36) + 16|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($96|0)==($98|0);
    if ($99) {
     $100 = $36;
     $101 = HEAP32[$100>>2]|0;
     $102 = (($101) + 36|0);
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     $104 = (invoke_ii($103|0,($36|0))|0);
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 34;
      break;
     } else {
      $$0$i$i = $104;
     }
    } else {
     $107 = HEAP32[$96>>2]|0;
     $$0$i$i = $107;
    }
    $108 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$19,$20,$__grouping,$14,$__g_end,$__dc,$2)|0);
    $109 = ($108|0)==(0);
    if (!($109)) {
     $$pre$i3$i$i = $54;$__a$2 = $__a$1;
     break;
    }
    $110 = HEAP32[$95>>2]|0;
    $111 = HEAP32[$97>>2]|0;
    $112 = ($110|0)==($111|0);
    if ($112) {
     $113 = $36;
     $114 = HEAP32[$113>>2]|0;
     $115 = (($114) + 40|0);
     $116 = HEAP32[$115>>2]|0;
     __THREW__ = 0;
     (invoke_ii($116|0,($36|0))|0);
     $117 = __THREW__; __THREW__ = 0;
     $118 = $117&1;
     if ($118) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $36;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $119 = (($110) + 4|0);
     HEAP32[$95>>2] = $119;
     $$pre$i$i$i5 = $36;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $91 = ___cxa_find_matching_catch(-1,-1)|0;
    $92 = tempRet0;
    $lpad$phi$index = $91;$lpad$phi$index2 = $92;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $120 = $__grouping;
   $121 = HEAP8[$120]|0;
   $122 = $121 & 1;
   $123 = ($122<<24>>24)==(0);
   if ($123) {
    $126 = $121&255;
    $127 = $126 >>> 1;
    $128 = $127;
   } else {
    $124 = (($__grouping) + 4|0);
    $125 = HEAP32[$124>>2]|0;
    $128 = $125;
   }
   $129 = ($128|0)==(0);
   do {
    if (!($129)) {
     $130 = HEAP8[$__in_units]|0;
     $131 = ($130<<24>>24)==(0);
     if ($131) {
      break;
     }
     $132 = HEAP32[$__g_end>>2]|0;
     $133 = $132;
     $134 = $__g;
     $135 = (($133) - ($134))|0;
     $136 = ($135|0)<(160);
     if (!($136)) {
      break;
     }
     $137 = HEAP32[$__dc>>2]|0;
     $138 = (($132) + 4|0);
     HEAP32[$__g_end>>2] = $138;
     HEAP32[$132>>2] = $137;
    }
   } while(0);
   $139 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $140 = (+invoke_diii(2,($__a$2|0),($139|0),($__err|0)));
   $141 = __THREW__; __THREW__ = 0;
   $142 = $141&1;
   if ($142) {
    break;
   }
   HEAPF64[$__v>>3] = $140;
   $143 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$14,$143,$__err);
   $144 = ($36|0)==(0|0);
   do {
    if ($144) {
     $159 = 0;$160 = 1;
    } else {
     $145 = (($36) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (($36) + 16|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($146|0)==($148|0);
     if ($149) {
      $150 = $36;
      $151 = HEAP32[$150>>2]|0;
      $152 = (($151) + 36|0);
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = (invoke_ii($153|0,($36|0))|0);
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      if ($156) {
       break L1;
      } else {
       $$0$i$i$i$i = $154;
      }
     } else {
      $157 = HEAP32[$146>>2]|0;
      $$0$i$i$i$i = $157;
     }
     $158 = ($$0$i$i$i$i|0)==(-1);
     if (!($158)) {
      $159 = $36;$160 = 0;
      break;
     }
     HEAP32[$15>>2] = 0;
     $159 = 0;$160 = 1;
    }
   } while(0);
   $161 = ($$pre$i3$i$i|0)==(0|0);
   do {
    if ($161) {
     label = 64;
    } else {
     $162 = (($$pre$i3$i$i) + 12|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = (($$pre$i3$i$i) + 16|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($163|0)==($165|0);
     if ($166) {
      $167 = $$pre$i3$i$i;
      $168 = HEAP32[$167>>2]|0;
      $169 = (($168) + 36|0);
      $170 = HEAP32[$169>>2]|0;
      __THREW__ = 0;
      $171 = (invoke_ii($170|0,($$pre$i3$i$i|0))|0);
      $172 = __THREW__; __THREW__ = 0;
      $173 = $172&1;
      if ($173) {
       break L1;
      } else {
       $$0$i$i1$i$i = $171;
      }
     } else {
      $174 = HEAP32[$163>>2]|0;
      $$0$i$i1$i$i = $174;
     }
     $175 = ($$0$i$i1$i$i|0)==(-1);
     if ($175) {
      HEAP32[$16>>2] = 0;
      label = 64;
      break;
     }
     if (!($160)) {
      break;
     }
     $178 = ($agg$result);
     HEAP32[$178>>2] = $159;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 64) {
     if ($160) {
      break;
     }
     $178 = ($agg$result);
     HEAP32[$178>>2] = $159;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $176 = HEAP32[$__err>>2]|0;
   $177 = $176 | 2;
   HEAP32[$__err>>2] = $177;
   $178 = ($agg$result);
   HEAP32[$178>>2] = $159;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $93 = ___cxa_find_matching_catch(-1,-1)|0;
 $94 = tempRet0;
 $lpad$phi$index = $93;$lpad$phi$index2 = $94;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $3 = ($__b);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1);
 HEAP32[$5>>2] = $4;
 $6 = ($__e);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($2);
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,0,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 $15 = $$byval_copy1;
 $16 = $$byval_copy;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre33 = 0, $$pre34 = 0, $$pre36 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0;
 var $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 376|0;
 $__atoms = sp;
 $__decimal_point = sp + 128|0;
 $__thousands_sep = sp + 136|0;
 $__grouping = sp + 144|0;
 $__buf = sp + 160|0;
 $__a_end = sp + 176|0;
 $__g = sp + 184|0;
 $__g_end = sp + 344|0;
 $__dc = sp + 352|0;
 $__in_units = sp + 360|0;
 $__exp = sp + 368|0;
 $1 = $__atoms;
 $2 = ($__atoms);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$2,$__decimal_point,$__thousands_sep);
 $this2$i$i$i = $__buf;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(13,($__buf|0),10,0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if (!($4)) {
   $5 = HEAP8[$this2$i$i$i]|0;
   $6 = $5 & 1;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $10 = $__buf;
    $11 = (($10) + 1|0);
    $$pre36 = (($__buf) + 8|0);
    $$pre$phi35Z2D = $11;$$pre$phi37Z2D = $$pre36;$12 = $11;
   } else {
    $8 = (($__buf) + 8|0);
    $9 = HEAP32[$8>>2]|0;
    $$pre33 = $__buf;
    $$pre34 = (($$pre33) + 1|0);
    $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $8;$12 = $9;
   }
   HEAP32[$__a_end>>2] = $12;
   $13 = $__g;
   $14 = ($__g);
   HEAP32[$__g_end>>2] = $14;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units] = 1;
   HEAP8[$__exp] = 69;
   $15 = ($__b);
   $16 = ($__e);
   $17 = ($__buf);
   $18 = (($__buf) + 4|0);
   $19 = HEAP32[$__decimal_point>>2]|0;
   $20 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$15>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $12;
   L7: while(1) {
    $21 = ($$pre$i$i$i5|0)==(0|0);
    do {
     if ($21) {
      $36 = 0;$37 = 1;
     } else {
      $22 = (($$pre$i$i$i5) + 12|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = (($$pre$i$i$i5) + 16|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($23|0)==($25|0);
      if ($26) {
       $27 = $$pre$i$i$i5;
       $28 = HEAP32[$27>>2]|0;
       $29 = (($28) + 36|0);
       $30 = HEAP32[$29>>2]|0;
       __THREW__ = 0;
       $31 = (invoke_ii($30|0,($$pre$i$i$i5|0))|0);
       $32 = __THREW__; __THREW__ = 0;
       $33 = $32&1;
       if ($33) {
        label = 34;
        break L7;
       } else {
        $$0$i$i$i$i3 = $31;
       }
      } else {
       $34 = HEAP32[$23>>2]|0;
       $$0$i$i$i$i3 = $34;
      }
      $35 = ($$0$i$i$i$i3|0)==(-1);
      if (!($35)) {
       $36 = $$pre$i$i$i5;$37 = 0;
       break;
      }
      HEAP32[$15>>2] = 0;
      $36 = 0;$37 = 1;
     }
    } while(0);
    $38 = HEAP32[$16>>2]|0;
    $39 = ($38|0)==(0|0);
    do {
     if ($39) {
      label = 18;
     } else {
      $40 = (($38) + 12|0);
      $41 = HEAP32[$40>>2]|0;
      $42 = (($38) + 16|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ($41|0)==($43|0);
      if ($44) {
       $45 = $38;
       $46 = HEAP32[$45>>2]|0;
       $47 = (($46) + 36|0);
       $48 = HEAP32[$47>>2]|0;
       __THREW__ = 0;
       $49 = (invoke_ii($48|0,($38|0))|0);
       $50 = __THREW__; __THREW__ = 0;
       $51 = $50&1;
       if ($51) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $49;
       }
      } else {
       $52 = HEAP32[$41>>2]|0;
       $$0$i$i1$i$i9 = $52;
      }
      $53 = ($$0$i$i1$i$i9|0)==(-1);
      if ($53) {
       HEAP32[$16>>2] = 0;
       label = 18;
       break;
      } else {
       if ($37) {
        $54 = $38;
        break;
       } else {
        $$pre$i3$i$i = $38;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($37) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $54 = 0;
     }
    }
    $55 = HEAP32[$__a_end>>2]|0;
    $56 = $55;
    $57 = $__a$0;
    $58 = (($56) - ($57))|0;
    $59 = HEAP8[$this2$i$i$i]|0;
    $60 = $59 & 1;
    $61 = ($60<<24>>24)==(0);
    if ($61) {
     $63 = $59&255;
     $64 = $63 >>> 1;
     $65 = $64;
    } else {
     $62 = HEAP32[$18>>2]|0;
     $65 = $62;
    }
    $66 = ($58|0)==($65|0);
    if ($66) {
     if ($61) {
      $68 = $59&255;
      $69 = $68 >>> 1;
      $70 = $59&255;
      $71 = $70 >>> 1;
      $72 = $69;$73 = $71;
     } else {
      $67 = HEAP32[$18>>2]|0;
      $72 = $67;$73 = $67;
     }
     $74 = $73 << 1;
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($74|0),0);
     $75 = __THREW__; __THREW__ = 0;
     $76 = $75&1;
     if ($76) {
      label = 34;
      break;
     }
     $77 = HEAP8[$this2$i$i$i]|0;
     $78 = $77 & 1;
     $79 = ($78<<24>>24)==(0);
     if ($79) {
      $82 = 10;
     } else {
      $80 = HEAP32[$17>>2]|0;
      $81 = $80 & -2;
      $phitmp$i23 = (($81) + -1)|0;
      $82 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),($82|0),0);
     $83 = __THREW__; __THREW__ = 0;
     $84 = $83&1;
     if ($84) {
      label = 34;
      break;
     }
     $85 = HEAP8[$this2$i$i$i]|0;
     $86 = $85 & 1;
     $87 = ($86<<24>>24)==(0);
     if ($87) {
      $89 = $$pre$phi35Z2D;
     } else {
      $88 = HEAP32[$$pre$phi37Z2D>>2]|0;
      $89 = $88;
     }
     $90 = (($89) + ($72)|0);
     HEAP32[$__a_end>>2] = $90;
     $__a$1 = $89;
    } else {
     $__a$1 = $__a$0;
    }
    $95 = (($36) + 12|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (($36) + 16|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($96|0)==($98|0);
    if ($99) {
     $100 = $36;
     $101 = HEAP32[$100>>2]|0;
     $102 = (($101) + 36|0);
     $103 = HEAP32[$102>>2]|0;
     __THREW__ = 0;
     $104 = (invoke_ii($103|0,($36|0))|0);
     $105 = __THREW__; __THREW__ = 0;
     $106 = $105&1;
     if ($106) {
      label = 34;
      break;
     } else {
      $$0$i$i = $104;
     }
    } else {
     $107 = HEAP32[$96>>2]|0;
     $$0$i$i = $107;
    }
    $108 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$19,$20,$__grouping,$14,$__g_end,$__dc,$2)|0);
    $109 = ($108|0)==(0);
    if (!($109)) {
     $$pre$i3$i$i = $54;$__a$2 = $__a$1;
     break;
    }
    $110 = HEAP32[$95>>2]|0;
    $111 = HEAP32[$97>>2]|0;
    $112 = ($110|0)==($111|0);
    if ($112) {
     $113 = $36;
     $114 = HEAP32[$113>>2]|0;
     $115 = (($114) + 40|0);
     $116 = HEAP32[$115>>2]|0;
     __THREW__ = 0;
     (invoke_ii($116|0,($36|0))|0);
     $117 = __THREW__; __THREW__ = 0;
     $118 = $117&1;
     if ($118) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $36;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $119 = (($110) + 4|0);
     HEAP32[$95>>2] = $119;
     $$pre$i$i$i5 = $36;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $91 = ___cxa_find_matching_catch(-1,-1)|0;
    $92 = tempRet0;
    $lpad$phi$index = $91;$lpad$phi$index2 = $92;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $120 = $__grouping;
   $121 = HEAP8[$120]|0;
   $122 = $121 & 1;
   $123 = ($122<<24>>24)==(0);
   if ($123) {
    $126 = $121&255;
    $127 = $126 >>> 1;
    $128 = $127;
   } else {
    $124 = (($__grouping) + 4|0);
    $125 = HEAP32[$124>>2]|0;
    $128 = $125;
   }
   $129 = ($128|0)==(0);
   do {
    if (!($129)) {
     $130 = HEAP8[$__in_units]|0;
     $131 = ($130<<24>>24)==(0);
     if ($131) {
      break;
     }
     $132 = HEAP32[$__g_end>>2]|0;
     $133 = $132;
     $134 = $__g;
     $135 = (($133) - ($134))|0;
     $136 = ($135|0)<(160);
     if (!($136)) {
      break;
     }
     $137 = HEAP32[$__dc>>2]|0;
     $138 = (($132) + 4|0);
     HEAP32[$__g_end>>2] = $138;
     HEAP32[$132>>2] = $137;
    }
   } while(0);
   $139 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $140 = (+invoke_diii(3,($__a$2|0),($139|0),($__err|0)));
   $141 = __THREW__; __THREW__ = 0;
   $142 = $141&1;
   if ($142) {
    break;
   }
   HEAPF64[$__v>>3] = $140;
   $143 = HEAP32[$__g_end>>2]|0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$14,$143,$__err);
   $144 = ($36|0)==(0|0);
   do {
    if ($144) {
     $159 = 0;$160 = 1;
    } else {
     $145 = (($36) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (($36) + 16|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($146|0)==($148|0);
     if ($149) {
      $150 = $36;
      $151 = HEAP32[$150>>2]|0;
      $152 = (($151) + 36|0);
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = (invoke_ii($153|0,($36|0))|0);
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      if ($156) {
       break L1;
      } else {
       $$0$i$i$i$i = $154;
      }
     } else {
      $157 = HEAP32[$146>>2]|0;
      $$0$i$i$i$i = $157;
     }
     $158 = ($$0$i$i$i$i|0)==(-1);
     if (!($158)) {
      $159 = $36;$160 = 0;
      break;
     }
     HEAP32[$15>>2] = 0;
     $159 = 0;$160 = 1;
    }
   } while(0);
   $161 = ($$pre$i3$i$i|0)==(0|0);
   do {
    if ($161) {
     label = 64;
    } else {
     $162 = (($$pre$i3$i$i) + 12|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = (($$pre$i3$i$i) + 16|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($163|0)==($165|0);
     if ($166) {
      $167 = $$pre$i3$i$i;
      $168 = HEAP32[$167>>2]|0;
      $169 = (($168) + 36|0);
      $170 = HEAP32[$169>>2]|0;
      __THREW__ = 0;
      $171 = (invoke_ii($170|0,($$pre$i3$i$i|0))|0);
      $172 = __THREW__; __THREW__ = 0;
      $173 = $172&1;
      if ($173) {
       break L1;
      } else {
       $$0$i$i1$i$i = $171;
      }
     } else {
      $174 = HEAP32[$163>>2]|0;
      $$0$i$i1$i$i = $174;
     }
     $175 = ($$0$i$i1$i$i|0)==(-1);
     if ($175) {
      HEAP32[$16>>2] = 0;
      label = 64;
      break;
     }
     if (!($160)) {
      break;
     }
     $178 = ($agg$result);
     HEAP32[$178>>2] = $159;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 64) {
     if ($160) {
      break;
     }
     $178 = ($agg$result);
     HEAP32[$178>>2] = $159;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
   } while(0);
   $176 = HEAP32[$__err>>2]|0;
   $177 = $176 | 2;
   HEAP32[$__err>>2] = $177;
   $178 = ($agg$result);
   HEAP32[$178>>2] = $159;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $93 = ___cxa_find_matching_catch(-1,-1)|0;
 $94 = tempRet0;
 $lpad$phi$index = $93;$lpad$phi$index2 = $94;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i8 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i14 = 0, $$0$lcssa$i$i = 0, $$01 = 0, $$01$i$i = 0, $$01$i$i$phi = 0, $$ph = 0, $$ph34 = 0, $$ph35 = 0, $$pre = 0, $$pre$i$i$i10 = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre39 = 0, $$pre40 = 0, $$pre42 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__atoms = 0, $__buf = 0, $__g = 0, $__grouping = 0, $__p$i$i$i$i = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0, $phitmp$i26 = 0, $this2$i$i$i = 0;
 var $this2$i$i$i6 = 0, $vararg_buffer = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $vararg_buffer = sp;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__p$i$i$i$i = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__atoms = STACKTOP; STACKTOP = STACKTOP + 104|0;
 $__grouping = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__buf = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__g = STACKTOP; STACKTOP = STACKTOP + 160|0;
 $2 = $__atoms;
 $this2$i$i$i = $__grouping;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(49,($1|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $136 = ___cxa_find_matching_catch(-1,-1)|0;
  $137 = tempRet0;
  $$0 = $136;$$01 = $137;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($$0|0);
  // unreachable;
 }
 $5 = ($1);
 $6 = HEAP32[$5>>2]|0;
 $7 = $__p$i$i$i$i;
 $8 = HEAP32[((9128))>>2]|0;
 $9 = ($8|0)==(-1);
 if ($9) {
  label = 4;
 } else {
  $10 = ($__p$i$i$i$i);
  HEAP32[$10>>2] = (9128);
  $11 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$11>>2] = (183);
  $12 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$12>>2] = 0;
  __THREW__ = 0;
  invoke_viii(25,(((9128))|0),($7|0),(184|0));
  $13 = __THREW__; __THREW__ = 0;
  $14 = $13&1;
  if (!($14)) {
   label = 4;
  }
 }
 L7: do {
  if ((label|0) == 4) {
   $15 = HEAP32[(((9128) + 4|0))>>2]|0;
   $16 = (($15) + -1)|0;
   $17 = (($6) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (($6) + 8|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $18;
   $22 = $20;
   $23 = (($21) - ($22))|0;
   $24 = $23 >> 2;
   $25 = ($24>>>0)>($16>>>0);
   do {
    if ($25) {
     $26 = (($20) + ($16<<2)|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($27|0)==(0|0);
     if ($28) {
      break;
     }
     $33 = $27;
     $34 = ($__atoms);
     $35 = $27;
     $36 = HEAP32[$35>>2]|0;
     $37 = (($36) + 48|0);
     $38 = HEAP32[$37>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($38|0,($33|0),((7680)|0),(((7680 + 26|0))|0),($34|0))|0);
     $39 = __THREW__; __THREW__ = 0;
     $40 = $39&1;
     if ($40) {
      break L7;
     }
     $41 = HEAP32[$5>>2]|0;
     $42 = ($41);
     (__ZNSt3__114__shared_count16__release_sharedEv($42)|0);
     $this2$i$i$i6 = $__buf;
     ;HEAP32[$this2$i$i$i6+0>>2]=0|0;HEAP32[$this2$i$i$i6+4>>2]=0|0;HEAP32[$this2$i$i$i6+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viii(13,($__buf|0),10,0);
     $43 = __THREW__; __THREW__ = 0;
     $44 = $43&1;
     L13: do {
      if ($44) {
       label = 45;
      } else {
       $45 = HEAP8[$this2$i$i$i6]|0;
       $46 = $45 & 1;
       $47 = ($46<<24>>24)==(0);
       if ($47) {
        $50 = $__buf;
        $51 = (($50) + 1|0);
        $$pre42 = (($__buf) + 8|0);
        $$pre$phi41Z2D = $51;$$pre$phi43Z2D = $$pre42;$52 = $51;
       } else {
        $48 = (($__buf) + 8|0);
        $49 = HEAP32[$48>>2]|0;
        $$pre39 = $__buf;
        $$pre40 = (($$pre39) + 1|0);
        $$pre$phi41Z2D = $$pre40;$$pre$phi43Z2D = $48;$52 = $49;
       }
       $53 = $__g;
       $54 = ($__g);
       $55 = ($__b);
       $56 = ($__e);
       $57 = ($__buf);
       $58 = (($__buf) + 4|0);
       $59 = (($__atoms) + 96|0);
       $60 = (($__atoms) + 100|0);
       $61 = $__g;
       $62 = (($__atoms) + 104|0);
       $63 = $__atoms;
       $64 = (($__grouping) + 4|0);
       $$pre = HEAP32[$55>>2]|0;
       $$pre$i$i$i10 = $$pre;$65 = $52;$66 = $54;$67 = 0;$__a$0 = $52;
       L19: while(1) {
        $68 = ($$pre$i$i$i10|0)==(0|0);
        do {
         if ($68) {
          $83 = 0;$84 = 1;
         } else {
          $69 = (($$pre$i$i$i10) + 12|0);
          $70 = HEAP32[$69>>2]|0;
          $71 = (($$pre$i$i$i10) + 16|0);
          $72 = HEAP32[$71>>2]|0;
          $73 = ($70|0)==($72|0);
          if ($73) {
           $74 = $$pre$i$i$i10;
           $75 = HEAP32[$74>>2]|0;
           $76 = (($75) + 36|0);
           $77 = HEAP32[$76>>2]|0;
           __THREW__ = 0;
           $78 = (invoke_ii($77|0,($$pre$i$i$i10|0))|0);
           $79 = __THREW__; __THREW__ = 0;
           $80 = $79&1;
           if ($80) {
            label = 44;
            break L19;
           } else {
            $$0$i$i$i$i8 = $78;
           }
          } else {
           $81 = HEAP32[$70>>2]|0;
           $$0$i$i$i$i8 = $81;
          }
          $82 = ($$0$i$i$i$i8|0)==(-1);
          if (!($82)) {
           $83 = $$pre$i$i$i10;$84 = 0;
           break;
          }
          HEAP32[$55>>2] = 0;
          $83 = 0;$84 = 1;
         }
        } while(0);
        $85 = HEAP32[$56>>2]|0;
        $86 = ($85|0)==(0|0);
        do {
         if ($86) {
          label = 26;
         } else {
          $87 = (($85) + 12|0);
          $88 = HEAP32[$87>>2]|0;
          $89 = (($85) + 16|0);
          $90 = HEAP32[$89>>2]|0;
          $91 = ($88|0)==($90|0);
          if ($91) {
           $92 = $85;
           $93 = HEAP32[$92>>2]|0;
           $94 = (($93) + 36|0);
           $95 = HEAP32[$94>>2]|0;
           __THREW__ = 0;
           $96 = (invoke_ii($95|0,($85|0))|0);
           $97 = __THREW__; __THREW__ = 0;
           $98 = $97&1;
           if ($98) {
            label = 44;
            break L19;
           } else {
            $$0$i$i1$i$i14 = $96;
           }
          } else {
           $99 = HEAP32[$88>>2]|0;
           $$0$i$i1$i$i14 = $99;
          }
          $100 = ($$0$i$i1$i$i14|0)==(-1);
          if ($100) {
           HEAP32[$56>>2] = 0;
           label = 26;
           break;
          } else {
           if ($84) {
            break;
           } else {
            $__a$2 = $__a$0;
            break L19;
           }
          }
         }
        } while(0);
        if ((label|0) == 26) {
         label = 0;
         if ($84) {
          $__a$2 = $__a$0;
          break;
         }
        }
        $101 = $65;
        $102 = $__a$0;
        $103 = (($101) - ($102))|0;
        $104 = HEAP8[$this2$i$i$i6]|0;
        $105 = $104 & 1;
        $106 = ($105<<24>>24)==(0);
        if ($106) {
         $108 = $104&255;
         $109 = $108 >>> 1;
         $110 = $109;
        } else {
         $107 = HEAP32[$58>>2]|0;
         $110 = $107;
        }
        $111 = ($103|0)==($110|0);
        if ($111) {
         if ($106) {
          $113 = $104&255;
          $114 = $113 >>> 1;
          $115 = $104&255;
          $116 = $115 >>> 1;
          $117 = $114;$118 = $116;
         } else {
          $112 = HEAP32[$58>>2]|0;
          $117 = $112;$118 = $112;
         }
         $119 = $118 << 1;
         __THREW__ = 0;
         invoke_viii(13,($__buf|0),($119|0),0);
         $120 = __THREW__; __THREW__ = 0;
         $121 = $120&1;
         if ($121) {
          label = 44;
          break;
         }
         $122 = HEAP8[$this2$i$i$i6]|0;
         $123 = $122 & 1;
         $124 = ($123<<24>>24)==(0);
         if ($124) {
          $127 = 10;
         } else {
          $125 = HEAP32[$57>>2]|0;
          $126 = $125 & -2;
          $phitmp$i26 = (($126) + -1)|0;
          $127 = $phitmp$i26;
         }
         __THREW__ = 0;
         invoke_viii(13,($__buf|0),($127|0),0);
         $128 = __THREW__; __THREW__ = 0;
         $129 = $128&1;
         if ($129) {
          label = 44;
          break;
         }
         $130 = HEAP8[$this2$i$i$i6]|0;
         $131 = $130 & 1;
         $132 = ($131<<24>>24)==(0);
         if ($132) {
          $134 = $$pre$phi41Z2D;
         } else {
          $133 = HEAP32[$$pre$phi43Z2D>>2]|0;
          $134 = $133;
         }
         $135 = (($134) + ($117)|0);
         $146 = $135;$__a$1 = $134;
        } else {
         $146 = $65;$__a$1 = $__a$0;
        }
        $147 = (($83) + 12|0);
        $148 = HEAP32[$147>>2]|0;
        $149 = (($83) + 16|0);
        $150 = HEAP32[$149>>2]|0;
        $151 = ($148|0)==($150|0);
        if ($151) {
         $152 = $83;
         $153 = HEAP32[$152>>2]|0;
         $154 = (($153) + 36|0);
         $155 = HEAP32[$154>>2]|0;
         __THREW__ = 0;
         $156 = (invoke_ii($155|0,($83|0))|0);
         $157 = __THREW__; __THREW__ = 0;
         $158 = $157&1;
         if ($158) {
          label = 44;
          break;
         } else {
          $$0$i$i = $156;
         }
        } else {
         $159 = HEAP32[$148>>2]|0;
         $$0$i$i = $159;
        }
        $160 = ($146|0)==($__a$1|0);
        do {
         if ($160) {
          $161 = HEAP32[$59>>2]|0;
          $162 = ($161|0)==($$0$i$i|0);
          if (!($162)) {
           $163 = HEAP32[$60>>2]|0;
           $164 = ($163|0)==($$0$i$i|0);
           if (!($164)) {
            label = 54;
            break;
           }
          }
          $165 = $162 ? 43 : 45;
          $166 = (($146) + 1|0);
          HEAP8[$146] = $165;
          $$ph = $166;$$ph34 = $66;$$ph35 = 0;
         } else {
          label = 54;
         }
        } while(0);
        do {
         if ((label|0) == 54) {
          label = 0;
          $167 = HEAP8[$this2$i$i$i]|0;
          $168 = $167 & 1;
          $169 = ($168<<24>>24)==(0);
          if ($169) {
           $171 = $167&255;
           $172 = $171 >>> 1;
           $173 = $172;
          } else {
           $170 = HEAP32[$64>>2]|0;
           $173 = $170;
          }
          $174 = ($173|0)!=(0);
          $175 = ($$0$i$i|0)==(0);
          $or$cond$i = $174 & $175;
          if ($or$cond$i) {
           $176 = $66;
           $177 = (($176) - ($61))|0;
           $178 = ($177|0)<(160);
           if (!($178)) {
            $$ph = $146;$$ph34 = $66;$$ph35 = $67;
            break;
           }
           $179 = (($66) + 4|0);
           HEAP32[$66>>2] = $67;
           $$ph = $146;$$ph34 = $179;$$ph35 = 0;
           break;
          } else {
           $$01$i$i = $34;
          }
          while(1) {
           $181 = HEAP32[$$01$i$i>>2]|0;
           $182 = ($181|0)==($$0$i$i|0);
           $183 = (($$01$i$i) + 4|0);
           if ($182) {
            $$0$lcssa$i$i = $$01$i$i;
            break;
           }
           $180 = ($183|0)==($62|0);
           if ($180) {
            $$0$lcssa$i$i = $62;
            break;
           } else {
            $$01$i$i$phi = $183;$$01$i$i = $$01$i$i$phi;
           }
          }
          $184 = $$0$lcssa$i$i;
          $185 = (($184) - ($63))|0;
          $186 = $185 >> 2;
          $187 = ($185|0)>(92);
          if ($187) {
           $__a$2 = $__a$1;
           break L19;
          }
          $188 = ($185|0)<(88);
          if ($188) {
           $199 = (7680 + ($186)|0);
           $200 = HEAP8[$199]|0;
           $201 = (($146) + 1|0);
           HEAP8[$146] = $200;
           $202 = (($67) + 1)|0;
           $$ph = $201;$$ph34 = $66;$$ph35 = $202;
           break;
          }
          if ($160) {
           $__a$2 = $146;
           break L19;
          }
          $189 = $146;
          $190 = $__a$1;
          $191 = (($189) - ($190))|0;
          $192 = ($191|0)<(3);
          if (!($192)) {
           $__a$2 = $__a$1;
           break L19;
          }
          $193 = (($146) + -1|0);
          $194 = HEAP8[$193]|0;
          $195 = ($194<<24>>24)==(48);
          if (!($195)) {
           $__a$2 = $__a$1;
           break L19;
          }
          $196 = (7680 + ($186)|0);
          $197 = HEAP8[$196]|0;
          $198 = (($146) + 1|0);
          HEAP8[$146] = $197;
          $$ph = $198;$$ph34 = $66;$$ph35 = 0;
         }
        } while(0);
        $203 = HEAP32[$55>>2]|0;
        $204 = (($203) + 12|0);
        $205 = HEAP32[$204>>2]|0;
        $206 = (($203) + 16|0);
        $207 = HEAP32[$206>>2]|0;
        $208 = ($205|0)==($207|0);
        if ($208) {
         $209 = $203;
         $210 = HEAP32[$209>>2]|0;
         $211 = (($210) + 40|0);
         $212 = HEAP32[$211>>2]|0;
         __THREW__ = 0;
         (invoke_ii($212|0,($203|0))|0);
         $213 = __THREW__; __THREW__ = 0;
         $214 = $213&1;
         if ($214) {
          label = 44;
          break;
         } else {
          $$pre$i$i$i10 = $203;$65 = $$ph;$66 = $$ph34;$67 = $$ph35;$__a$0 = $__a$1;
          continue;
         }
        } else {
         $215 = (($205) + 4|0);
         HEAP32[$204>>2] = $215;
         $$pre$i$i$i10 = $203;$65 = $$ph;$66 = $$ph34;$67 = $$ph35;$__a$0 = $__a$1;
         continue;
        }
       }
       if ((label|0) == 44) {
        $142 = ___cxa_find_matching_catch(-1,-1)|0;
        $143 = tempRet0;
        $eh$lpad$body$index3Z2D = $143;$eh$lpad$body$indexZ2D = $142;
        break;
       }
       $216 = (($__a$2) + 3|0);
       HEAP8[$216] = 0;
       $217 = HEAP8[(9032)]|0;
       $218 = ($217<<24>>24)==(0);
       do {
        if ($218) {
         $219 = (___cxa_guard_acquire(((9032)|0))|0);
         $220 = ($219|0)==(0);
         if ($220) {
          break;
         }
         __THREW__ = 0;
         $221 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
         $222 = __THREW__; __THREW__ = 0;
         $223 = $222&1;
         if ($223) {
          $224 = ___cxa_find_matching_catch(-1,-1)|0;
          $225 = tempRet0;
          ___cxa_guard_abort(((9032)|0));
          $eh$lpad$body$index3Z2D = $225;$eh$lpad$body$indexZ2D = $224;
          break L13;
         } else {
          HEAP32[(9024)>>2] = $221;
          ___cxa_guard_release(((9032)|0));
          break;
         }
        }
       } while(0);
       $226 = HEAP32[(9024)>>2]|0;
       __THREW__ = 0;
       $vararg_ptr = ($vararg_buffer);
       HEAP32[$vararg_ptr>>2] = $__v;
       $227 = (invoke_iiiii(13,($__a$2|0),($226|0),((7720)|0),($vararg_buffer|0))|0);
       $228 = __THREW__; __THREW__ = 0;
       $229 = $228&1;
       if ($229) {
        label = 45;
        break;
       }
       $230 = ($227|0)==(1);
       if (!($230)) {
        HEAP32[$__err>>2] = 4;
       }
       $231 = HEAP32[$55>>2]|0;
       $232 = ($231|0)==(0|0);
       do {
        if ($232) {
         $247 = 0;$248 = 1;
        } else {
         $233 = (($231) + 12|0);
         $234 = HEAP32[$233>>2]|0;
         $235 = (($231) + 16|0);
         $236 = HEAP32[$235>>2]|0;
         $237 = ($234|0)==($236|0);
         if ($237) {
          $238 = $231;
          $239 = HEAP32[$238>>2]|0;
          $240 = (($239) + 36|0);
          $241 = HEAP32[$240>>2]|0;
          __THREW__ = 0;
          $242 = (invoke_ii($241|0,($231|0))|0);
          $243 = __THREW__; __THREW__ = 0;
          $244 = $243&1;
          if ($244) {
           label = 45;
           break L13;
          } else {
           $$0$i$i$i$i = $242;
          }
         } else {
          $245 = HEAP32[$234>>2]|0;
          $$0$i$i$i$i = $245;
         }
         $246 = ($$0$i$i$i$i|0)==(-1);
         if (!($246)) {
          $247 = $231;$248 = 0;
          break;
         }
         HEAP32[$55>>2] = 0;
         $247 = 0;$248 = 1;
        }
       } while(0);
       $249 = HEAP32[$56>>2]|0;
       $250 = ($249|0)==(0|0);
       do {
        if ($250) {
         label = 92;
        } else {
         $251 = (($249) + 12|0);
         $252 = HEAP32[$251>>2]|0;
         $253 = (($249) + 16|0);
         $254 = HEAP32[$253>>2]|0;
         $255 = ($252|0)==($254|0);
         if ($255) {
          $256 = $249;
          $257 = HEAP32[$256>>2]|0;
          $258 = (($257) + 36|0);
          $259 = HEAP32[$258>>2]|0;
          __THREW__ = 0;
          $260 = (invoke_ii($259|0,($249|0))|0);
          $261 = __THREW__; __THREW__ = 0;
          $262 = $261&1;
          if ($262) {
           label = 45;
           break L13;
          } else {
           $$0$i$i1$i$i = $260;
          }
         } else {
          $263 = HEAP32[$252>>2]|0;
          $$0$i$i1$i$i = $263;
         }
         $264 = ($$0$i$i1$i$i|0)==(-1);
         if ($264) {
          HEAP32[$56>>2] = 0;
          label = 92;
          break;
         }
         if (!($248)) {
          break;
         }
         $267 = ($agg$result);
         HEAP32[$267>>2] = $247;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
         STACKTOP = sp;return;
        }
       } while(0);
       do {
        if ((label|0) == 92) {
         if ($248) {
          break;
         }
         $267 = ($agg$result);
         HEAP32[$267>>2] = $247;
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
         STACKTOP = sp;return;
        }
       } while(0);
       $265 = HEAP32[$__err>>2]|0;
       $266 = $265 | 2;
       HEAP32[$__err>>2] = $266;
       $267 = ($agg$result);
       HEAP32[$267>>2] = $247;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     } while(0);
     if ((label|0) == 45) {
      $144 = ___cxa_find_matching_catch(-1,-1)|0;
      $145 = tempRet0;
      $eh$lpad$body$index3Z2D = $145;$eh$lpad$body$indexZ2D = $144;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
     $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index3Z2D;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     ___resumeException($$0|0);
     // unreachable;
    }
   } while(0);
   $29 = (___cxa_allocate_exception(4)|0);
   $30 = $29;
   __ZNSt8bad_castC2Ev($30);
   __THREW__ = 0;
   invoke_viii(12,($29|0),((17096)|0),((143)|0));
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    break;
   }
   // unreachable;
  }
 } while(0);
 $138 = ___cxa_find_matching_catch(-1,-1)|0;
 $139 = tempRet0;
 $140 = HEAP32[$5>>2]|0;
 $141 = ($140);
 (__ZNSt3__114__shared_count16__release_sharedEv($141)|0);
 $$0 = $138;$$01 = $139;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $$01$i$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$__a_end>>2]|0;
 $2 = ($1|0)==($__a|0);
 do {
  if ($2) {
   $3 = (($__atoms) + 96|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($__ct|0);
   if (!($5)) {
    $6 = (($__atoms) + 100|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==($__ct|0);
    if (!($8)) {
     break;
    }
   }
   $9 = $5 ? 43 : 45;
   $10 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $10;
   HEAP8[$__a] = $9;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $11 = $__grouping;
 $12 = HEAP8[$11]|0;
 $13 = $12 & 1;
 $14 = ($13<<24>>24)==(0);
 if ($14) {
  $17 = $12&255;
  $18 = $17 >>> 1;
  $19 = $18;
 } else {
  $15 = (($__grouping) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $19 = $16;
 }
 $20 = ($19|0)!=(0);
 $21 = ($__ct|0)==($__thousands_sep|0);
 $or$cond = $20 & $21;
 if ($or$cond) {
  $22 = HEAP32[$__g_end>>2]|0;
  $23 = $22;
  $24 = $__g;
  $25 = (($23) - ($24))|0;
  $26 = ($25|0)<(160);
  if (!($26)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $27 = HEAP32[$__dc>>2]|0;
  $28 = (($22) + 4|0);
  HEAP32[$__g_end>>2] = $28;
  HEAP32[$22>>2] = $27;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $29 = (($__atoms) + 104|0);
 $$01$i = $__atoms;
 while(1) {
  $31 = HEAP32[$$01$i>>2]|0;
  $32 = ($31|0)==($__ct|0);
  $33 = (($$01$i) + 4|0);
  if ($32) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $30 = ($33|0)==($29|0);
  if ($30) {
   $$0$lcssa$i = $29;
   break;
  } else {
   $$01$i$phi = $33;$$01$i = $$01$i$phi;
  }
 }
 $34 = $$0$lcssa$i;
 $35 = $__atoms;
 $36 = (($34) - ($35))|0;
 $37 = $36 >> 2;
 $38 = ($36|0)>(92);
 if ($38) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 do {
  if ((($__base|0) == 16)) {
   $40 = ($36|0)<(88);
   if ($40) {
    break;
   }
   if ($2) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $41 = $1;
   $42 = $__a;
   $43 = (($41) - ($42))|0;
   $44 = ($43|0)<(3);
   if (!($44)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $45 = (($1) + -1|0);
   $46 = HEAP8[$45]|0;
   $47 = ($46<<24>>24)==(48);
   if (!($47)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $48 = (7680 + ($37)|0);
   $49 = HEAP8[$48]|0;
   $50 = (($1) + 1|0);
   HEAP32[$__a_end>>2] = $50;
   HEAP8[$1] = $49;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else if ((($__base|0) == 10) | (($__base|0) == 8)) {
   $39 = ($37|0)<($__base|0);
   if ($39) {
    break;
   } else {
    $$0 = -1;
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $51 = (7680 + ($37)|0);
 $52 = HEAP8[$51]|0;
 $53 = (($1) + 1|0);
 HEAP32[$__a_end>>2] = $53;
 HEAP8[$1] = $52;
 $54 = HEAP32[$__dc>>2]|0;
 $55 = (($54) + 1)|0;
 HEAP32[$__dc>>2] = $55;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $9 = 0, $__loc = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $__p$i$i$i$i3 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $__loc = sp + 32|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $1 = ($__loc);
 $2 = HEAP32[$1>>2]|0;
 $3 = $__p$i$i$i$i;
 $4 = HEAP32[((9136))>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  label = 3;
 } else {
  $6 = ($__p$i$i$i$i);
  HEAP32[$6>>2] = (9136);
  $7 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$7>>2] = (183);
  $8 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$8>>2] = 0;
  __THREW__ = 0;
  invoke_viii(25,(((9136))|0),($3|0),(184|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   label = 3;
  }
 }
 L3: do {
  if ((label|0) == 3) {
   $11 = HEAP32[(((9136) + 4|0))>>2]|0;
   $12 = (($11) + -1)|0;
   $13 = (($2) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($2) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $14;
   $18 = $16;
   $19 = (($17) - ($18))|0;
   $20 = $19 >> 2;
   $21 = ($20>>>0)>($12>>>0);
   do {
    if ($21) {
     $22 = (($16) + ($12<<2)|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ($23|0)==(0|0);
     if ($24) {
      break;
     }
     $29 = $23;
     $30 = $23;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($31) + 32|0);
     $33 = HEAP32[$32>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($33|0,($29|0),((7680)|0),(((7680 + 26|0))|0),($__atoms|0))|0);
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if ($35) {
      break L3;
     }
     $36 = HEAP32[$1>>2]|0;
     $37 = $__p$i$i$i$i3;
     $38 = HEAP32[((9280))>>2]|0;
     $39 = ($38|0)==(-1);
     if (!($39)) {
      $40 = ($__p$i$i$i$i3);
      HEAP32[$40>>2] = (9280);
      $41 = (($__p$i$i$i$i3) + 4|0);
      HEAP32[$41>>2] = (183);
      $42 = (($__p$i$i$i$i3) + 8|0);
      HEAP32[$42>>2] = 0;
      __THREW__ = 0;
      invoke_viii(25,(((9280))|0),($37|0),(184|0));
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       break L3;
      }
     }
     $45 = HEAP32[(((9280) + 4|0))>>2]|0;
     $46 = (($45) + -1)|0;
     $47 = (($36) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (($36) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $48;
     $52 = $50;
     $53 = (($51) - ($52))|0;
     $54 = $53 >> 2;
     $55 = ($54>>>0)>($46>>>0);
     do {
      if ($55) {
       $56 = (($50) + ($46<<2)|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = ($57|0)==(0|0);
       if ($58) {
        break;
       }
       $63 = $57;
       $64 = $57;
       $65 = HEAP32[$64>>2]|0;
       $66 = (($65) + 16|0);
       $67 = HEAP32[$66>>2]|0;
       __THREW__ = 0;
       $68 = (invoke_ii($67|0,($63|0))|0);
       $69 = __THREW__; __THREW__ = 0;
       $70 = $69&1;
       if ($70) {
        break L3;
       }
       HEAP8[$__thousands_sep] = $68;
       $71 = $57;
       $72 = HEAP32[$71>>2]|0;
       $73 = (($72) + 20|0);
       $74 = HEAP32[$73>>2]|0;
       __THREW__ = 0;
       invoke_vii($74|0,($agg$result|0),($63|0));
       $75 = __THREW__; __THREW__ = 0;
       $76 = $75&1;
       if ($76) {
        break L3;
       }
       $77 = HEAP32[$1>>2]|0;
       $78 = ($77);
       (__ZNSt3__114__shared_count16__release_sharedEv($78)|0);
       STACKTOP = sp;return;
      }
     } while(0);
     $59 = (___cxa_allocate_exception(4)|0);
     $60 = $59;
     __ZNSt8bad_castC2Ev($60);
     __THREW__ = 0;
     invoke_viii(12,($59|0),((17096)|0),((143)|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      break L3;
     }
     // unreachable;
    }
   } while(0);
   $25 = (___cxa_allocate_exception(4)|0);
   $26 = $25;
   __ZNSt8bad_castC2Ev($26);
   __THREW__ = 0;
   invoke_viii(12,($25|0),((17096)|0),((143)|0));
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    break;
   }
   // unreachable;
  }
 } while(0);
 $79 = ___cxa_find_matching_catch(-1,-1)|0;
 $80 = tempRet0;
 $81 = HEAP32[$1>>2]|0;
 $82 = ($81);
 (__ZNSt3__114__shared_count16__release_sharedEv($82)|0);
 ___resumeException($79|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $__loc = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $__p$i$i$i$i3 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $__loc = sp + 32|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $1 = ($__loc);
 $2 = HEAP32[$1>>2]|0;
 $3 = $__p$i$i$i$i;
 $4 = HEAP32[((9136))>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  label = 3;
 } else {
  $6 = ($__p$i$i$i$i);
  HEAP32[$6>>2] = (9136);
  $7 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$7>>2] = (183);
  $8 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$8>>2] = 0;
  __THREW__ = 0;
  invoke_viii(25,(((9136))|0),($3|0),(184|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   label = 3;
  }
 }
 L3: do {
  if ((label|0) == 3) {
   $11 = HEAP32[(((9136) + 4|0))>>2]|0;
   $12 = (($11) + -1)|0;
   $13 = (($2) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($2) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $14;
   $18 = $16;
   $19 = (($17) - ($18))|0;
   $20 = $19 >> 2;
   $21 = ($20>>>0)>($12>>>0);
   do {
    if ($21) {
     $22 = (($16) + ($12<<2)|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ($23|0)==(0|0);
     if ($24) {
      break;
     }
     $29 = $23;
     $30 = $23;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($31) + 32|0);
     $33 = HEAP32[$32>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($33|0,($29|0),((7680)|0),(((7680 + 32|0))|0),($__atoms|0))|0);
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if ($35) {
      break L3;
     }
     $36 = HEAP32[$1>>2]|0;
     $37 = $__p$i$i$i$i3;
     $38 = HEAP32[((9280))>>2]|0;
     $39 = ($38|0)==(-1);
     if (!($39)) {
      $40 = ($__p$i$i$i$i3);
      HEAP32[$40>>2] = (9280);
      $41 = (($__p$i$i$i$i3) + 4|0);
      HEAP32[$41>>2] = (183);
      $42 = (($__p$i$i$i$i3) + 8|0);
      HEAP32[$42>>2] = 0;
      __THREW__ = 0;
      invoke_viii(25,(((9280))|0),($37|0),(184|0));
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       break L3;
      }
     }
     $45 = HEAP32[(((9280) + 4|0))>>2]|0;
     $46 = (($45) + -1)|0;
     $47 = (($36) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (($36) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $48;
     $52 = $50;
     $53 = (($51) - ($52))|0;
     $54 = $53 >> 2;
     $55 = ($54>>>0)>($46>>>0);
     do {
      if ($55) {
       $56 = (($50) + ($46<<2)|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = ($57|0)==(0|0);
       if ($58) {
        break;
       }
       $63 = $57;
       $64 = $57;
       $65 = HEAP32[$64>>2]|0;
       $66 = (($65) + 12|0);
       $67 = HEAP32[$66>>2]|0;
       __THREW__ = 0;
       $68 = (invoke_ii($67|0,($63|0))|0);
       $69 = __THREW__; __THREW__ = 0;
       $70 = $69&1;
       if ($70) {
        break L3;
       }
       HEAP8[$__decimal_point] = $68;
       $71 = HEAP32[$64>>2]|0;
       $72 = (($71) + 16|0);
       $73 = HEAP32[$72>>2]|0;
       __THREW__ = 0;
       $74 = (invoke_ii($73|0,($63|0))|0);
       $75 = __THREW__; __THREW__ = 0;
       $76 = $75&1;
       if ($76) {
        break L3;
       }
       HEAP8[$__thousands_sep] = $74;
       $77 = $57;
       $78 = HEAP32[$77>>2]|0;
       $79 = (($78) + 20|0);
       $80 = HEAP32[$79>>2]|0;
       __THREW__ = 0;
       invoke_vii($80|0,($agg$result|0),($63|0));
       $81 = __THREW__; __THREW__ = 0;
       $82 = $81&1;
       if ($82) {
        break L3;
       }
       $83 = HEAP32[$1>>2]|0;
       $84 = ($83);
       (__ZNSt3__114__shared_count16__release_sharedEv($84)|0);
       STACKTOP = sp;return;
      }
     } while(0);
     $59 = (___cxa_allocate_exception(4)|0);
     $60 = $59;
     __ZNSt8bad_castC2Ev($60);
     __THREW__ = 0;
     invoke_viii(12,($59|0),((17096)|0),((143)|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      break L3;
     }
     // unreachable;
    }
   } while(0);
   $25 = (___cxa_allocate_exception(4)|0);
   $26 = $25;
   __ZNSt8bad_castC2Ev($26);
   __THREW__ = 0;
   invoke_viii(12,($25|0),((17096)|0),((143)|0));
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    break;
   }
   // unreachable;
  }
 } while(0);
 $85 = ___cxa_find_matching_catch(-1,-1)|0;
 $86 = tempRet0;
 $87 = HEAP32[$1>>2]|0;
 $88 = ($87);
 (__ZNSt3__114__shared_count16__release_sharedEv($88)|0);
 ___resumeException($85|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $$01$i$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 if ($1) {
  $2 = HEAP8[$__in_units]|0;
  $3 = ($2<<24>>24)==(0);
  if ($3) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units] = 0;
  $4 = HEAP32[$__a_end>>2]|0;
  $5 = (($4) + 1|0);
  HEAP32[$__a_end>>2] = $5;
  HEAP8[$4] = 46;
  $6 = $__grouping;
  $7 = HEAP8[$6]|0;
  $8 = $7 & 1;
  $9 = ($8<<24>>24)==(0);
  if ($9) {
   $12 = $7&255;
   $13 = $12 >>> 1;
   $14 = $13;
  } else {
   $10 = (($__grouping) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $14 = $11;
  }
  $15 = ($14|0)==(0);
  if ($15) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $16 = HEAP32[$__g_end>>2]|0;
  $17 = $16;
  $18 = $__g;
  $19 = (($17) - ($18))|0;
  $20 = ($19|0)<(160);
  if (!($20)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $21 = HEAP32[$__dc>>2]|0;
  $22 = (($16) + 4|0);
  HEAP32[$__g_end>>2] = $22;
  HEAP32[$16>>2] = $21;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 do {
  if ($23) {
   $24 = $__grouping;
   $25 = HEAP8[$24]|0;
   $26 = $25 & 1;
   $27 = ($26<<24>>24)==(0);
   if ($27) {
    $30 = $25&255;
    $31 = $30 >>> 1;
    $32 = $31;
   } else {
    $28 = (($__grouping) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    $32 = $29;
   }
   $33 = ($32|0)==(0);
   if ($33) {
    break;
   }
   $34 = HEAP8[$__in_units]|0;
   $35 = ($34<<24>>24)==(0);
   if ($35) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $36 = HEAP32[$__g_end>>2]|0;
   $37 = $36;
   $38 = $__g;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)<(160);
   if (!($40)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $41 = HEAP32[$__dc>>2]|0;
   $42 = (($36) + 4|0);
   HEAP32[$__g_end>>2] = $42;
   HEAP32[$36>>2] = $41;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $43 = (($__atoms) + 32|0);
 $$01$i = $__atoms;
 while(1) {
  $45 = HEAP8[$$01$i]|0;
  $46 = ($45<<24>>24)==($__ct<<24>>24);
  $47 = (($$01$i) + 1|0);
  if ($46) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $44 = ($47|0)==($43|0);
  if ($44) {
   $$0$lcssa$i = $43;
   break;
  } else {
   $$01$i$phi = $47;$$01$i = $$01$i$phi;
  }
 }
 $48 = $$0$lcssa$i;
 $49 = $__atoms;
 $50 = (($48) - ($49))|0;
 $51 = ($50|0)>(31);
 if ($51) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $52 = (7680 + ($50)|0);
 $53 = HEAP8[$52]|0;
 if ((($50|0) == 24) | (($50|0) == 25)) {
  $54 = HEAP32[$__a_end>>2]|0;
  $55 = ($54|0)==($__a|0);
  do {
   if (!($55)) {
    $56 = (($54) + -1|0);
    $57 = HEAP8[$56]|0;
    $58 = $57&255;
    $59 = $58 & 95;
    $60 = HEAP8[$__exp]|0;
    $61 = $60&255;
    $62 = $61 & 127;
    $63 = ($59|0)==($62|0);
    if ($63) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
  } while(0);
  $64 = (($54) + 1|0);
  HEAP32[$__a_end>>2] = $64;
  HEAP8[$54] = $53;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else if ((($50|0) == 23) | (($50|0) == 22)) {
  HEAP8[$__exp] = 80;
  $65 = HEAP32[$__a_end>>2]|0;
  $66 = (($65) + 1|0);
  HEAP32[$__a_end>>2] = $66;
  HEAP8[$65] = $53;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $67 = $53&255;
  $68 = $67 & 95;
  $69 = HEAP8[$__exp]|0;
  $70 = $69 << 24 >> 24;
  $71 = ($68|0)==($70|0);
  do {
   if ($71) {
    $72 = $68 | 128;
    $73 = $72&255;
    HEAP8[$__exp] = $73;
    $74 = HEAP8[$__in_units]|0;
    $75 = ($74<<24>>24)==(0);
    if ($75) {
     break;
    }
    HEAP8[$__in_units] = 0;
    $76 = $__grouping;
    $77 = HEAP8[$76]|0;
    $78 = $77 & 1;
    $79 = ($78<<24>>24)==(0);
    if ($79) {
     $82 = $77&255;
     $83 = $82 >>> 1;
     $84 = $83;
    } else {
     $80 = (($__grouping) + 4|0);
     $81 = HEAP32[$80>>2]|0;
     $84 = $81;
    }
    $85 = ($84|0)==(0);
    if ($85) {
     break;
    }
    $86 = HEAP32[$__g_end>>2]|0;
    $87 = $86;
    $88 = $__g;
    $89 = (($87) - ($88))|0;
    $90 = ($89|0)<(160);
    if (!($90)) {
     break;
    }
    $91 = HEAP32[$__dc>>2]|0;
    $92 = (($86) + 4|0);
    HEAP32[$__g_end>>2] = $92;
    HEAP32[$86>>2] = $91;
   }
  } while(0);
  $93 = HEAP32[$__a_end>>2]|0;
  $94 = (($93) + 1|0);
  HEAP32[$__a_end>>2] = $94;
  HEAP8[$93] = $53;
  $95 = ($50|0)>(21);
  if ($95) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $96 = HEAP32[$__dc>>2]|0;
  $97 = (($96) + 1)|0;
  HEAP32[$__dc>>2] = $97;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $9 = 0, $__loc = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $__p$i$i$i$i3 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $__loc = sp + 32|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $1 = ($__loc);
 $2 = HEAP32[$1>>2]|0;
 $3 = $__p$i$i$i$i;
 $4 = HEAP32[((9128))>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  label = 3;
 } else {
  $6 = ($__p$i$i$i$i);
  HEAP32[$6>>2] = (9128);
  $7 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$7>>2] = (183);
  $8 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$8>>2] = 0;
  __THREW__ = 0;
  invoke_viii(25,(((9128))|0),($3|0),(184|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   label = 3;
  }
 }
 L3: do {
  if ((label|0) == 3) {
   $11 = HEAP32[(((9128) + 4|0))>>2]|0;
   $12 = (($11) + -1)|0;
   $13 = (($2) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($2) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $14;
   $18 = $16;
   $19 = (($17) - ($18))|0;
   $20 = $19 >> 2;
   $21 = ($20>>>0)>($12>>>0);
   do {
    if ($21) {
     $22 = (($16) + ($12<<2)|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ($23|0)==(0|0);
     if ($24) {
      break;
     }
     $29 = $23;
     $30 = $23;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($31) + 48|0);
     $33 = HEAP32[$32>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($33|0,($29|0),((7680)|0),(((7680 + 26|0))|0),($__atoms|0))|0);
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if ($35) {
      break L3;
     }
     $36 = HEAP32[$1>>2]|0;
     $37 = $__p$i$i$i$i3;
     $38 = HEAP32[((9288))>>2]|0;
     $39 = ($38|0)==(-1);
     if (!($39)) {
      $40 = ($__p$i$i$i$i3);
      HEAP32[$40>>2] = (9288);
      $41 = (($__p$i$i$i$i3) + 4|0);
      HEAP32[$41>>2] = (183);
      $42 = (($__p$i$i$i$i3) + 8|0);
      HEAP32[$42>>2] = 0;
      __THREW__ = 0;
      invoke_viii(25,(((9288))|0),($37|0),(184|0));
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       break L3;
      }
     }
     $45 = HEAP32[(((9288) + 4|0))>>2]|0;
     $46 = (($45) + -1)|0;
     $47 = (($36) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (($36) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $48;
     $52 = $50;
     $53 = (($51) - ($52))|0;
     $54 = $53 >> 2;
     $55 = ($54>>>0)>($46>>>0);
     do {
      if ($55) {
       $56 = (($50) + ($46<<2)|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = ($57|0)==(0|0);
       if ($58) {
        break;
       }
       $63 = $57;
       $64 = $57;
       $65 = HEAP32[$64>>2]|0;
       $66 = (($65) + 16|0);
       $67 = HEAP32[$66>>2]|0;
       __THREW__ = 0;
       $68 = (invoke_ii($67|0,($63|0))|0);
       $69 = __THREW__; __THREW__ = 0;
       $70 = $69&1;
       if ($70) {
        break L3;
       }
       HEAP32[$__thousands_sep>>2] = $68;
       $71 = $57;
       $72 = HEAP32[$71>>2]|0;
       $73 = (($72) + 20|0);
       $74 = HEAP32[$73>>2]|0;
       __THREW__ = 0;
       invoke_vii($74|0,($agg$result|0),($63|0));
       $75 = __THREW__; __THREW__ = 0;
       $76 = $75&1;
       if ($76) {
        break L3;
       }
       $77 = HEAP32[$1>>2]|0;
       $78 = ($77);
       (__ZNSt3__114__shared_count16__release_sharedEv($78)|0);
       STACKTOP = sp;return;
      }
     } while(0);
     $59 = (___cxa_allocate_exception(4)|0);
     $60 = $59;
     __ZNSt8bad_castC2Ev($60);
     __THREW__ = 0;
     invoke_viii(12,($59|0),((17096)|0),((143)|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      break L3;
     }
     // unreachable;
    }
   } while(0);
   $25 = (___cxa_allocate_exception(4)|0);
   $26 = $25;
   __ZNSt8bad_castC2Ev($26);
   __THREW__ = 0;
   invoke_viii(12,($25|0),((17096)|0),((143)|0));
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    break;
   }
   // unreachable;
  }
 } while(0);
 $79 = ___cxa_find_matching_catch(-1,-1)|0;
 $80 = tempRet0;
 $81 = HEAP32[$1>>2]|0;
 $82 = ($81);
 (__ZNSt3__114__shared_count16__release_sharedEv($82)|0);
 ___resumeException($79|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $__loc = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $__p$i$i$i$i3 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $__loc = sp + 32|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $1 = ($__loc);
 $2 = HEAP32[$1>>2]|0;
 $3 = $__p$i$i$i$i;
 $4 = HEAP32[((9128))>>2]|0;
 $5 = ($4|0)==(-1);
 if ($5) {
  label = 3;
 } else {
  $6 = ($__p$i$i$i$i);
  HEAP32[$6>>2] = (9128);
  $7 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$7>>2] = (183);
  $8 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$8>>2] = 0;
  __THREW__ = 0;
  invoke_viii(25,(((9128))|0),($3|0),(184|0));
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   label = 3;
  }
 }
 L3: do {
  if ((label|0) == 3) {
   $11 = HEAP32[(((9128) + 4|0))>>2]|0;
   $12 = (($11) + -1)|0;
   $13 = (($2) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($2) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $14;
   $18 = $16;
   $19 = (($17) - ($18))|0;
   $20 = $19 >> 2;
   $21 = ($20>>>0)>($12>>>0);
   do {
    if ($21) {
     $22 = (($16) + ($12<<2)|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ($23|0)==(0|0);
     if ($24) {
      break;
     }
     $29 = $23;
     $30 = $23;
     $31 = HEAP32[$30>>2]|0;
     $32 = (($31) + 48|0);
     $33 = HEAP32[$32>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($33|0,($29|0),((7680)|0),(((7680 + 32|0))|0),($__atoms|0))|0);
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if ($35) {
      break L3;
     }
     $36 = HEAP32[$1>>2]|0;
     $37 = $__p$i$i$i$i3;
     $38 = HEAP32[((9288))>>2]|0;
     $39 = ($38|0)==(-1);
     if (!($39)) {
      $40 = ($__p$i$i$i$i3);
      HEAP32[$40>>2] = (9288);
      $41 = (($__p$i$i$i$i3) + 4|0);
      HEAP32[$41>>2] = (183);
      $42 = (($__p$i$i$i$i3) + 8|0);
      HEAP32[$42>>2] = 0;
      __THREW__ = 0;
      invoke_viii(25,(((9288))|0),($37|0),(184|0));
      $43 = __THREW__; __THREW__ = 0;
      $44 = $43&1;
      if ($44) {
       break L3;
      }
     }
     $45 = HEAP32[(((9288) + 4|0))>>2]|0;
     $46 = (($45) + -1)|0;
     $47 = (($36) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (($36) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = $48;
     $52 = $50;
     $53 = (($51) - ($52))|0;
     $54 = $53 >> 2;
     $55 = ($54>>>0)>($46>>>0);
     do {
      if ($55) {
       $56 = (($50) + ($46<<2)|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = ($57|0)==(0|0);
       if ($58) {
        break;
       }
       $63 = $57;
       $64 = $57;
       $65 = HEAP32[$64>>2]|0;
       $66 = (($65) + 12|0);
       $67 = HEAP32[$66>>2]|0;
       __THREW__ = 0;
       $68 = (invoke_ii($67|0,($63|0))|0);
       $69 = __THREW__; __THREW__ = 0;
       $70 = $69&1;
       if ($70) {
        break L3;
       }
       HEAP32[$__decimal_point>>2] = $68;
       $71 = HEAP32[$64>>2]|0;
       $72 = (($71) + 16|0);
       $73 = HEAP32[$72>>2]|0;
       __THREW__ = 0;
       $74 = (invoke_ii($73|0,($63|0))|0);
       $75 = __THREW__; __THREW__ = 0;
       $76 = $75&1;
       if ($76) {
        break L3;
       }
       HEAP32[$__thousands_sep>>2] = $74;
       $77 = $57;
       $78 = HEAP32[$77>>2]|0;
       $79 = (($78) + 20|0);
       $80 = HEAP32[$79>>2]|0;
       __THREW__ = 0;
       invoke_vii($80|0,($agg$result|0),($63|0));
       $81 = __THREW__; __THREW__ = 0;
       $82 = $81&1;
       if ($82) {
        break L3;
       }
       $83 = HEAP32[$1>>2]|0;
       $84 = ($83);
       (__ZNSt3__114__shared_count16__release_sharedEv($84)|0);
       STACKTOP = sp;return;
      }
     } while(0);
     $59 = (___cxa_allocate_exception(4)|0);
     $60 = $59;
     __ZNSt8bad_castC2Ev($60);
     __THREW__ = 0;
     invoke_viii(12,($59|0),((17096)|0),((143)|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      break L3;
     }
     // unreachable;
    }
   } while(0);
   $25 = (___cxa_allocate_exception(4)|0);
   $26 = $25;
   __ZNSt8bad_castC2Ev($26);
   __THREW__ = 0;
   invoke_viii(12,($25|0),((17096)|0),((143)|0));
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    break;
   }
   // unreachable;
  }
 } while(0);
 $85 = ___cxa_find_matching_catch(-1,-1)|0;
 $86 = tempRet0;
 $87 = HEAP32[$1>>2]|0;
 $88 = ($87);
 (__ZNSt3__114__shared_count16__release_sharedEv($88)|0);
 ___resumeException($85|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $$01$i$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__ct|0)==($__decimal_point|0);
 if ($1) {
  $2 = HEAP8[$__in_units]|0;
  $3 = ($2<<24>>24)==(0);
  if ($3) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units] = 0;
  $4 = HEAP32[$__a_end>>2]|0;
  $5 = (($4) + 1|0);
  HEAP32[$__a_end>>2] = $5;
  HEAP8[$4] = 46;
  $6 = $__grouping;
  $7 = HEAP8[$6]|0;
  $8 = $7 & 1;
  $9 = ($8<<24>>24)==(0);
  if ($9) {
   $12 = $7&255;
   $13 = $12 >>> 1;
   $14 = $13;
  } else {
   $10 = (($__grouping) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $14 = $11;
  }
  $15 = ($14|0)==(0);
  if ($15) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $16 = HEAP32[$__g_end>>2]|0;
  $17 = $16;
  $18 = $__g;
  $19 = (($17) - ($18))|0;
  $20 = ($19|0)<(160);
  if (!($20)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $21 = HEAP32[$__dc>>2]|0;
  $22 = (($16) + 4|0);
  HEAP32[$__g_end>>2] = $22;
  HEAP32[$16>>2] = $21;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = ($__ct|0)==($__thousands_sep|0);
 do {
  if ($23) {
   $24 = $__grouping;
   $25 = HEAP8[$24]|0;
   $26 = $25 & 1;
   $27 = ($26<<24>>24)==(0);
   if ($27) {
    $30 = $25&255;
    $31 = $30 >>> 1;
    $32 = $31;
   } else {
    $28 = (($__grouping) + 4|0);
    $29 = HEAP32[$28>>2]|0;
    $32 = $29;
   }
   $33 = ($32|0)==(0);
   if ($33) {
    break;
   }
   $34 = HEAP8[$__in_units]|0;
   $35 = ($34<<24>>24)==(0);
   if ($35) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $36 = HEAP32[$__g_end>>2]|0;
   $37 = $36;
   $38 = $__g;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)<(160);
   if (!($40)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $41 = HEAP32[$__dc>>2]|0;
   $42 = (($36) + 4|0);
   HEAP32[$__g_end>>2] = $42;
   HEAP32[$36>>2] = $41;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $43 = (($__atoms) + 128|0);
 $$01$i = $__atoms;
 while(1) {
  $45 = HEAP32[$$01$i>>2]|0;
  $46 = ($45|0)==($__ct|0);
  $47 = (($$01$i) + 4|0);
  if ($46) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $44 = ($47|0)==($43|0);
  if ($44) {
   $$0$lcssa$i = $43;
   break;
  } else {
   $$01$i$phi = $47;$$01$i = $$01$i$phi;
  }
 }
 $48 = $$0$lcssa$i;
 $49 = $__atoms;
 $50 = (($48) - ($49))|0;
 $51 = $50 >> 2;
 $52 = ($50|0)>(124);
 if ($52) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $53 = (7680 + ($51)|0);
 $54 = HEAP8[$53]|0;
 do {
  if ((($51|0) == 24) | (($51|0) == 25)) {
   $55 = HEAP32[$__a_end>>2]|0;
   $56 = ($55|0)==($__a|0);
   do {
    if (!($56)) {
     $57 = (($55) + -1|0);
     $58 = HEAP8[$57]|0;
     $59 = $58&255;
     $60 = $59 & 95;
     $61 = HEAP8[$__exp]|0;
     $62 = $61&255;
     $63 = $62 & 127;
     $64 = ($60|0)==($63|0);
     if ($64) {
      break;
     } else {
      $$0 = -1;
     }
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   $65 = (($55) + 1|0);
   HEAP32[$__a_end>>2] = $65;
   HEAP8[$55] = $54;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else if ((($51|0) == 23) | (($51|0) == 22)) {
   HEAP8[$__exp] = 80;
  } else {
   $66 = $54&255;
   $67 = $66 & 95;
   $68 = HEAP8[$__exp]|0;
   $69 = $68 << 24 >> 24;
   $70 = ($67|0)==($69|0);
   if (!($70)) {
    break;
   }
   $71 = $67 | 128;
   $72 = $71&255;
   HEAP8[$__exp] = $72;
   $73 = HEAP8[$__in_units]|0;
   $74 = ($73<<24>>24)==(0);
   if ($74) {
    break;
   }
   HEAP8[$__in_units] = 0;
   $75 = $__grouping;
   $76 = HEAP8[$75]|0;
   $77 = $76 & 1;
   $78 = ($77<<24>>24)==(0);
   if ($78) {
    $81 = $76&255;
    $82 = $81 >>> 1;
    $83 = $82;
   } else {
    $79 = (($__grouping) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $83 = $80;
   }
   $84 = ($83|0)==(0);
   if ($84) {
    break;
   }
   $85 = HEAP32[$__g_end>>2]|0;
   $86 = $85;
   $87 = $__g;
   $88 = (($86) - ($87))|0;
   $89 = ($88|0)<(160);
   if (!($89)) {
    break;
   }
   $90 = HEAP32[$__dc>>2]|0;
   $91 = (($85) + 4|0);
   HEAP32[$__g_end>>2] = $91;
   HEAP32[$85>>2] = $90;
  }
 } while(0);
 $92 = HEAP32[$__a_end>>2]|0;
 $93 = (($92) + 1|0);
 HEAP32[$__a_end>>2] = $93;
 HEAP8[$92] = $54;
 $94 = ($50|0)>(84);
 if ($94) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $95 = HEAP32[$__dc>>2]|0;
 $96 = (($95) + 1)|0;
 HEAP32[$__dc>>2] = $96;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre$phi8Z2D = 0, $$pre4 = 0, $$pre5 = 0, $$pre7 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__nm = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 56|0;
 $$byval_copy = sp;
 $__p$i$i$i$i = sp + 8|0;
 $1 = sp + 24|0;
 $2 = sp + 32|0;
 $__nm = sp + 40|0;
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = $this;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($__s);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($1);
  HEAP32[$13>>2] = $12;
  $14 = $__v&1;
  $15 = $$byval_copy;
  $16 = $$byval_copy;
  $17 = $1;
  ;HEAP32[$16+0>>2]=HEAP32[$17+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$10 & 31]($agg$result,$this,$$byval_copy,$__iob,$__fl,$14);
  $18 = $$byval_copy;
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 $19 = ($2);
 $20 = HEAP32[$19>>2]|0;
 $21 = $__p$i$i$i$i;
 $22 = HEAP32[((9280))>>2]|0;
 $23 = ($22|0)==(-1);
 if ($23) {
  label = 5;
 } else {
  $24 = ($__p$i$i$i$i);
  HEAP32[$24>>2] = (9280);
  $25 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$25>>2] = (183);
  $26 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$26>>2] = 0;
  __THREW__ = 0;
  invoke_viii(25,(((9280))|0),($21|0),(184|0));
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if (!($28)) {
   label = 5;
  }
 }
 do {
  if ((label|0) == 5) {
   $29 = HEAP32[(((9280) + 4|0))>>2]|0;
   $30 = (($29) + -1)|0;
   $31 = (($20) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($20) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $32;
   $36 = $34;
   $37 = (($35) - ($36))|0;
   $38 = $37 >> 2;
   $39 = ($38>>>0)>($30>>>0);
   do {
    if ($39) {
     $40 = (($34) + ($30<<2)|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==(0|0);
     if ($42) {
      break;
     }
     $47 = $41;
     $48 = HEAP32[$19>>2]|0;
     $49 = ($48);
     (__ZNSt3__114__shared_count16__release_sharedEv($49)|0);
     $50 = $41;
     $51 = HEAP32[$50>>2]|0;
     if ($__v) {
      $52 = (($51) + 24|0);
      $53 = HEAP32[$52>>2]|0;
      FUNCTION_TABLE_vii[$53 & 127]($__nm,$47);
     } else {
      $54 = (($51) + 28|0);
      $55 = HEAP32[$54>>2]|0;
      FUNCTION_TABLE_vii[$55 & 127]($__nm,$47);
     }
     $56 = $__nm;
     $57 = HEAP8[$56]|0;
     $58 = $57 & 1;
     $59 = ($58<<24>>24)==(0);
     if ($59) {
      $62 = $__nm;
      $63 = (($62) + 1|0);
      $$pre7 = (($__nm) + 8|0);
      $$ph = $63;$$pre$phi6Z2D = $63;$$pre$phi8Z2D = $$pre7;
     } else {
      $60 = (($__nm) + 8|0);
      $61 = HEAP32[$60>>2]|0;
      $$pre4 = $__nm;
      $$pre5 = (($$pre4) + 1|0);
      $$ph = $61;$$pre$phi6Z2D = $$pre5;$$pre$phi8Z2D = $60;
     }
     $64 = ($__s);
     $65 = (($__nm) + 4|0);
     $66 = $57;$67 = $$ph;
     L20: while(1) {
      $68 = $66 & 1;
      $69 = ($68<<24>>24)==(0);
      if ($69) {
       $72 = $66&255;
       $73 = $72 >>> 1;
       $74 = $$pre$phi6Z2D;$75 = $73;
      } else {
       $70 = HEAP32[$$pre$phi8Z2D>>2]|0;
       $71 = HEAP32[$65>>2]|0;
       $74 = $70;$75 = $71;
      }
      $76 = (($74) + ($75)|0);
      $77 = ($67|0)==($76|0);
      if ($77) {
       label = 29;
       break;
      }
      $78 = HEAP8[$67]|0;
      $79 = HEAP32[$64>>2]|0;
      $80 = ($79|0)==(0|0);
      do {
       if (!($80)) {
        $81 = (($79) + 24|0);
        $82 = HEAP32[$81>>2]|0;
        $83 = (($79) + 28|0);
        $84 = HEAP32[$83>>2]|0;
        $85 = ($82|0)==($84|0);
        if (!($85)) {
         $86 = (($82) + 1|0);
         HEAP32[$81>>2] = $86;
         HEAP8[$82] = $78;
         break;
        }
        $87 = $79;
        $88 = HEAP32[$87>>2]|0;
        $89 = (($88) + 52|0);
        $90 = HEAP32[$89>>2]|0;
        $91 = $78&255;
        __THREW__ = 0;
        $92 = (invoke_iii($90|0,($79|0),($91|0))|0);
        $93 = __THREW__; __THREW__ = 0;
        $94 = $93&1;
        if ($94) {
         label = 28;
         break L20;
        }
        $95 = ($92|0)==(-1);
        if (!($95)) {
         break;
        }
        HEAP32[$64>>2] = 0;
       }
      } while(0);
      $96 = (($67) + 1|0);
      $$pre = HEAP8[$56]|0;
      $66 = $$pre;$67 = $96;
     }
     if ((label|0) == 28) {
      $101 = ___cxa_find_matching_catch(-1,-1)|0;
      $102 = tempRet0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
      $$0 = $101;$$01 = $102;
      ___resumeException($$0|0);
      // unreachable;
     }
     else if ((label|0) == 29) {
      $103 = HEAP32[$64>>2]|0;
      $104 = ($agg$result);
      HEAP32[$104>>2] = $103;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   $43 = (___cxa_allocate_exception(4)|0);
   $44 = $43;
   __ZNSt8bad_castC2Ev($44);
   __THREW__ = 0;
   invoke_viii(12,($43|0),((17096)|0),((143)|0));
   $45 = __THREW__; __THREW__ = 0;
   $46 = $45&1;
   if ($46) {
    break;
   }
   // unreachable;
  }
 } while(0);
 $97 = ___cxa_find_matching_catch(-1,-1)|0;
 $98 = tempRet0;
 $99 = HEAP32[$19>>2]|0;
 $100 = ($99);
 (__ZNSt3__114__shared_count16__release_sharedEv($100)|0);
 $$0 = $97;$$01 = $98;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer = sp + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 24|0;
 $__op = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__oe = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $2 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $3 = ($__fmt);
 ;HEAP8[$3+0|0]=HEAP8[(7928)+0|0]|0;HEAP8[$3+1|0]=HEAP8[(7928)+1|0]|0;HEAP8[$3+2|0]=HEAP8[(7928)+2|0]|0;HEAP8[$3+3|0]=HEAP8[(7928)+3|0]|0;HEAP8[$3+4|0]=HEAP8[(7928)+4|0]|0;HEAP8[$3+5|0]=HEAP8[(7928)+5|0]|0;
 $4 = (($__fmt) + 1|0);
 $5 = (($__iob) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 2048;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0$i = $4;
 } else {
  $9 = (($__fmt) + 2|0);
  HEAP8[$4] = 43;
  $$0$i = $9;
 }
 $10 = $6 & 512;
 $11 = ($10|0)==(0);
 if ($11) {
  $$13$i$ph = $$0$i;
 } else {
  $12 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $12;
 }
 HEAP8[$$13$i$ph] = 108;
 $scevgep = (($$13$i$ph) + 1|0);
 $13 = $6 & 74;
 do {
  if ((($13|0) == 64)) {
   HEAP8[$scevgep] = 111;
  } else if ((($13|0) == 8)) {
   $14 = $6 & 16384;
   $15 = ($14|0)==(0);
   if ($15) {
    HEAP8[$scevgep] = 120;
    break;
   } else {
    HEAP8[$scevgep] = 88;
    break;
   }
  } else {
   HEAP8[$scevgep] = 100;
  }
 } while(0);
 $16 = ($__nar);
 $17 = HEAP8[(9032)]|0;
 $18 = ($17<<24>>24)==(0);
 do {
  if ($18) {
   $19 = (___cxa_guard_acquire(((9032)|0))|0);
   $20 = ($19|0)==(0);
   if ($20) {
    break;
   }
   __THREW__ = 0;
   $21 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $24 = ___cxa_find_matching_catch(-1,-1)|0;
    $25 = tempRet0;
    ___cxa_guard_abort(((9032)|0));
    ___resumeException($24|0);
    // unreachable;
   } else {
    HEAP32[(9024)>>2] = $21;
    ___cxa_guard_release(((9032)|0));
    break;
   }
  }
 } while(0);
 $26 = HEAP32[(9024)>>2]|0;
 $vararg_ptr = ($vararg_buffer);
 HEAP32[$vararg_ptr>>2] = $__v;
 $27 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($16,12,$26,$3,$vararg_buffer)|0);
 $28 = (($__nar) + ($27)|0);
 $29 = HEAP32[$5>>2]|0;
 $30 = $29 & 176;
 do {
  if ((($30|0) == 32)) {
   $$0$i1 = $28;
  } else if ((($30|0) == 16)) {
   $31 = HEAP8[$16]|0;
   if ((($31<<24>>24) == 43) | (($31<<24>>24) == 45)) {
    $32 = (($__nar) + 1|0);
    $$0$i1 = $32;
    break;
   }
   $33 = ($27|0)>(1);
   $34 = ($31<<24>>24)==(48);
   $or$cond$i = $33 & $34;
   if (!($or$cond$i)) {
    label = 22;
    break;
   }
   $35 = (($__nar) + 1|0);
   $36 = HEAP8[$35]|0;
   if (!((($36<<24>>24) == 88) | (($36<<24>>24) == 120))) {
    label = 22;
    break;
   }
   $37 = (($__nar) + 2|0);
   $$0$i1 = $37;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $16;
 }
 $38 = ($__o);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(42,($16|0),($$0$i1|0),($28|0),($38|0),($__op|0),($__oe|0),($1|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if ($40) {
  $53 = ___cxa_find_matching_catch(-1,-1)|0;
  $54 = tempRet0;
  $55 = ($1);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56);
  (__ZNSt3__114__shared_count16__release_sharedEv($57)|0);
  ___resumeException($53|0);
  // unreachable;
 } else {
  $41 = ($1);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42);
  (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
  $44 = ($__s);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($2);
  HEAP32[$46>>2] = $45;
  $47 = HEAP32[$__op>>2]|0;
  $48 = HEAP32[$__oe>>2]|0;
  $49 = $$byval_copy;
  $50 = $$byval_copy;
  $51 = $2;
  ;HEAP32[$50+0>>2]=HEAP32[$51+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$38,$47,$48,$__iob,$__fl);
  $52 = $$byval_copy;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $__va = 0, $arglist = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 $1 = ($__va);
 $2 = $__va;
 $arglist = $2;
 HEAP32[$arglist>>2] = $varargs;
 $3 = (_uselocale(($__l|0))|0);
 $4 = (_vsnprintf(($__s|0),($__n|0),($__format|0),($1|0))|0);
 $5 = ($3|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return ($4|0);
 }
 __THREW__ = 0;
 (invoke_ii(93,($3|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable;
 } else {
  STACKTOP = sp;return ($4|0);
 }
 return 0|0;
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i$phi = 0, $$012$i$i10 = 0, $$012$i$i10$phi = 0, $$16 = 0, $$__dg$0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $119$phi = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $182$phi = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__dc$013 = 0, $__dc$1 = 0, $__dg$014 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$015 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $__p$i$i$i$i1 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $__grouping = sp + 32|0;
 $1 = ($__loc);
 $2 = HEAP32[$1>>2]|0;
 $3 = $__p$i$i$i$i;
 $4 = HEAP32[((9136))>>2]|0;
 $5 = ($4|0)==(-1);
 if (!($5)) {
  $6 = ($__p$i$i$i$i);
  HEAP32[$6>>2] = (9136);
  $7 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$7>>2] = (183);
  $8 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$8>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(((9136)),$3,184);
 }
 $9 = HEAP32[(((9136) + 4|0))>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = (($2) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($2) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 if (!($19)) {
  $23 = (___cxa_allocate_exception(4)|0);
  $24 = $23;
  __ZNSt8bad_castC2Ev($24);
  ___cxa_throw(($23|0),((17096)|0),((143)|0));
  // unreachable;
 }
 $20 = (($14) + ($10<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $23 = (___cxa_allocate_exception(4)|0);
  $24 = $23;
  __ZNSt8bad_castC2Ev($24);
  ___cxa_throw(($23|0),((17096)|0),((143)|0));
  // unreachable;
 }
 $25 = $21;
 $26 = HEAP32[$1>>2]|0;
 $27 = $__p$i$i$i$i1;
 $28 = HEAP32[((9280))>>2]|0;
 $29 = ($28|0)==(-1);
 if (!($29)) {
  $30 = ($__p$i$i$i$i1);
  HEAP32[$30>>2] = (9280);
  $31 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$31>>2] = (183);
  $32 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$32>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(((9280)),$27,184);
 }
 $33 = HEAP32[(((9280) + 4|0))>>2]|0;
 $34 = (($33) + -1)|0;
 $35 = (($26) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($26) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $36;
 $40 = $38;
 $41 = (($39) - ($40))|0;
 $42 = $41 >> 2;
 $43 = ($42>>>0)>($34>>>0);
 if (!($43)) {
  $47 = (___cxa_allocate_exception(4)|0);
  $48 = $47;
  __ZNSt8bad_castC2Ev($48);
  ___cxa_throw(($47|0),((17096)|0),((143)|0));
  // unreachable;
 }
 $44 = (($38) + ($34<<2)|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0|0);
 if ($46) {
  $47 = (___cxa_allocate_exception(4)|0);
  $48 = $47;
  __ZNSt8bad_castC2Ev($48);
  ___cxa_throw(($47|0),((17096)|0),((143)|0));
  // unreachable;
 }
 $49 = $45;
 $50 = $45;
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + 20|0);
 $53 = HEAP32[$52>>2]|0;
 FUNCTION_TABLE_vii[$53 & 127]($__grouping,$49);
 $54 = $__grouping;
 $55 = HEAP8[$54]|0;
 $56 = $55 & 1;
 $57 = ($56<<24>>24)==(0);
 if ($57) {
  $60 = $55&255;
  $61 = $60 >>> 1;
  $62 = $61;
 } else {
  $58 = (($__grouping) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $62 = $59;
 }
 $63 = ($62|0)==(0);
 L23: do {
  if ($63) {
   $64 = $21;
   $65 = HEAP32[$64>>2]|0;
   $66 = (($65) + 32|0);
   $67 = HEAP32[$66>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($67|0,($25|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $68 = __THREW__; __THREW__ = 0;
   $69 = $68&1;
   if ($69) {
    label = 18;
    break;
   }
   $70 = $__ne;
   $71 = $__nb;
   $72 = (($70) - ($71))|0;
   $73 = (($__ob) + ($72)|0);
   HEAP32[$__oe>>2] = $73;
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $78 = HEAP8[$__nb]|0;
   if ((($78<<24>>24) == 43) | (($78<<24>>24) == 45)) {
    $79 = $21;
    $80 = HEAP32[$79>>2]|0;
    $81 = (($80) + 28|0);
    $82 = HEAP32[$81>>2]|0;
    __THREW__ = 0;
    $83 = (invoke_iii($82|0,($25|0),($78|0))|0);
    $84 = __THREW__; __THREW__ = 0;
    $85 = $84&1;
    if ($85) {
     label = 18;
     break;
    }
    $86 = (($__nb) + 1|0);
    $87 = HEAP32[$__oe>>2]|0;
    $88 = (($87) + 1|0);
    HEAP32[$__oe>>2] = $88;
    HEAP8[$87] = $83;
    $__nf$0 = $86;
   } else {
    $__nf$0 = $__nb;
   }
   $89 = $__ne;
   $90 = $__nf$0;
   $91 = (($89) - ($90))|0;
   $92 = ($91|0)>(1);
   do {
    if ($92) {
     $93 = HEAP8[$__nf$0]|0;
     $94 = ($93<<24>>24)==(48);
     if (!($94)) {
      $__nf$1 = $__nf$0;
      break;
     }
     $95 = (($__nf$0) + 1|0);
     $96 = HEAP8[$95]|0;
     if (!((($96<<24>>24) == 88) | (($96<<24>>24) == 120))) {
      $__nf$1 = $__nf$0;
      break;
     }
     $97 = $21;
     $98 = HEAP32[$97>>2]|0;
     $99 = (($98) + 28|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     $101 = (invoke_iii($100|0,($25|0),48)|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 18;
      break L23;
     }
     $104 = HEAP32[$__oe>>2]|0;
     $105 = (($104) + 1|0);
     HEAP32[$__oe>>2] = $105;
     HEAP8[$104] = $101;
     $106 = HEAP8[$95]|0;
     $107 = HEAP32[$97>>2]|0;
     $108 = (($107) + 28|0);
     $109 = HEAP32[$108>>2]|0;
     __THREW__ = 0;
     $110 = (invoke_iii($109|0,($25|0),($106|0))|0);
     $111 = __THREW__; __THREW__ = 0;
     $112 = $111&1;
     if ($112) {
      label = 18;
      break L23;
     }
     $113 = (($__nf$0) + 2|0);
     $114 = HEAP32[$__oe>>2]|0;
     $115 = (($114) + 1|0);
     HEAP32[$__oe>>2] = $115;
     HEAP8[$114] = $110;
     $__nf$1 = $113;
    } else {
     $__nf$1 = $__nf$0;
    }
   } while(0);
   $116 = ($__nf$1|0)==($__ne|0);
   do {
    if (!($116)) {
     $117 = (($__ne) + -1|0);
     $118 = ($117>>>0)>($__nf$1>>>0);
     if ($118) {
      $$012$i$i = $__nf$1;$119 = $117;
     } else {
      break;
     }
     while(1) {
      $120 = HEAP8[$$012$i$i]|0;
      $121 = HEAP8[$119]|0;
      HEAP8[$$012$i$i] = $121;
      HEAP8[$119] = $120;
      $122 = (($$012$i$i) + 1|0);
      $123 = (($119) + -1|0);
      $124 = ($122>>>0)<($123>>>0);
      if ($124) {
       $119$phi = $123;$$012$i$i$phi = $122;$119 = $119$phi;$$012$i$i = $$012$i$i$phi;
      } else {
       break;
      }
     }
    }
   } while(0);
   $125 = $45;
   $126 = HEAP32[$125>>2]|0;
   $127 = (($126) + 16|0);
   $128 = HEAP32[$127>>2]|0;
   __THREW__ = 0;
   $129 = (invoke_ii($128|0,($49|0))|0);
   $130 = __THREW__; __THREW__ = 0;
   $131 = $130&1;
   if ($131) {
    label = 18;
    break;
   }
   $132 = ($__nf$1>>>0)<($__ne>>>0);
   L44: do {
    if ($132) {
     $133 = $__grouping;
     $134 = (($133) + 1|0);
     $135 = $21;
     $136 = (($__grouping) + 4|0);
     $137 = (($__grouping) + 8|0);
     $__dc$013 = 0;$__dg$014 = 0;$__p$015 = $__nf$1;
     while(1) {
      $138 = HEAP8[$54]|0;
      $139 = $138 & 1;
      $140 = ($139<<24>>24)==(0);
      $141 = HEAP32[$137>>2]|0;
      $$ = $140 ? $134 : $141;
      $142 = (($$) + ($__dg$014)|0);
      $143 = HEAP8[$142]|0;
      $144 = ($143<<24>>24)==(0);
      do {
       if ($144) {
        $__dc$1 = $__dc$013;$__dg$1 = $__dg$014;
       } else {
        $145 = HEAP32[$137>>2]|0;
        $$16 = $140 ? $134 : $145;
        $146 = (($$16) + ($__dg$014)|0);
        $147 = HEAP8[$146]|0;
        $148 = $147 << 24 >> 24;
        $149 = ($__dc$013|0)==($148|0);
        if (!($149)) {
         $__dc$1 = $__dc$013;$__dg$1 = $__dg$014;
         break;
        }
        $150 = HEAP32[$__oe>>2]|0;
        $151 = (($150) + 1|0);
        HEAP32[$__oe>>2] = $151;
        HEAP8[$150] = $129;
        $152 = HEAP8[$54]|0;
        $153 = $152 & 1;
        $154 = ($153<<24>>24)==(0);
        if ($154) {
         $156 = $152&255;
         $157 = $156 >>> 1;
         $158 = $157;
        } else {
         $155 = HEAP32[$136>>2]|0;
         $158 = $155;
        }
        $159 = (($158) + -1)|0;
        $160 = ($__dg$014>>>0)<($159>>>0);
        $161 = $160&1;
        $$__dg$0 = (($161) + ($__dg$014))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       }
      } while(0);
      $162 = HEAP8[$__p$015]|0;
      $163 = HEAP32[$135>>2]|0;
      $164 = (($163) + 28|0);
      $165 = HEAP32[$164>>2]|0;
      __THREW__ = 0;
      $166 = (invoke_iii($165|0,($25|0),($162|0))|0);
      $167 = __THREW__; __THREW__ = 0;
      $168 = $167&1;
      if ($168) {
       break;
      }
      $169 = HEAP32[$__oe>>2]|0;
      $170 = (($169) + 1|0);
      HEAP32[$__oe>>2] = $170;
      HEAP8[$169] = $166;
      $171 = (($__dc$1) + 1)|0;
      $172 = (($__p$015) + 1|0);
      $173 = ($172>>>0)<($__ne>>>0);
      if ($173) {
       $__dc$013 = $171;$__dg$014 = $__dg$1;$__p$015 = $172;
      } else {
       break L44;
      }
     }
     $74 = ___cxa_find_matching_catch(-1,-1)|0;
     $75 = tempRet0;
     $lpad$phi$index = $74;$lpad$phi$index2 = $75;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     ___resumeException($lpad$phi$index|0);
     // unreachable;
    }
   } while(0);
   $174 = $__nf$1;
   $175 = $__nb;
   $176 = (($174) - ($175))|0;
   $177 = (($__ob) + ($176)|0);
   $178 = HEAP32[$__oe>>2]|0;
   $179 = ($177|0)==($178|0);
   if ($179) {
    break;
   }
   $180 = (($178) + -1|0);
   $181 = ($180>>>0)>($177>>>0);
   if ($181) {
    $$012$i$i10 = $177;$182 = $180;
   } else {
    break;
   }
   while(1) {
    $183 = HEAP8[$$012$i$i10]|0;
    $184 = HEAP8[$182]|0;
    HEAP8[$$012$i$i10] = $184;
    HEAP8[$182] = $183;
    $185 = (($$012$i$i10) + 1|0);
    $186 = (($182) + -1|0);
    $187 = ($185>>>0)<($186>>>0);
    if ($187) {
     $182$phi = $186;$$012$i$i10$phi = $185;$182 = $182$phi;$$012$i$i10 = $$012$i$i10$phi;
    } else {
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 18) {
  $76 = ___cxa_find_matching_catch(-1,-1)|0;
  $77 = tempRet0;
  $lpad$phi$index = $76;$lpad$phi$index2 = $77;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $188 = ($__np|0)==($__ne|0);
 if ($188) {
  $189 = HEAP32[$__oe>>2]|0;
  $storemerge = $189;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 } else {
  $190 = $__np;
  $191 = $__nb;
  $192 = (($190) - ($191))|0;
  $193 = (($__ob) + ($192)|0);
  $storemerge = $193;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg$result,$this,$__s,$__iob,$__fl,$1,$2) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $lftr$limit = 0, $or$cond$i = 0, $vararg_buffer = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer = sp + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 24|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 48|0;
 $__op = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__oe = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $3 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $4 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $5 = $__fmt;
 $6 = $5;
 HEAP32[$6>>2] = 37;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = $__fmt;
 $10 = (($9) + 1|0);
 $11 = (($__iob) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 2048;
 $14 = ($13|0)==(0);
 if ($14) {
  $$0$i = $10;
 } else {
  $15 = (($9) + 2|0);
  HEAP8[$10] = 43;
  $$0$i = $15;
 }
 $16 = $12 & 512;
 $17 = ($16|0)==(0);
 if ($17) {
  $$13$i$ph = $$0$i;
 } else {
  $18 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $18;
 }
 $lftr$limit = (($$13$i$ph) + 2|0);
 $19 = (($$13$i$ph) + 1|0);
 HEAP8[$$13$i$ph] = 108;
 HEAP8[$19] = 108;
 $20 = $12 & 74;
 do {
  if ((($20|0) == 64)) {
   HEAP8[$lftr$limit] = 111;
  } else if ((($20|0) == 8)) {
   $21 = $12 & 16384;
   $22 = ($21|0)==(0);
   if ($22) {
    HEAP8[$lftr$limit] = 120;
    break;
   } else {
    HEAP8[$lftr$limit] = 88;
    break;
   }
  } else {
   HEAP8[$lftr$limit] = 100;
  }
 } while(0);
 $23 = ($__nar);
 $24 = HEAP8[(9032)]|0;
 $25 = ($24<<24>>24)==(0);
 do {
  if ($25) {
   $26 = (___cxa_guard_acquire(((9032)|0))|0);
   $27 = ($26|0)==(0);
   if ($27) {
    break;
   }
   __THREW__ = 0;
   $28 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if ($30) {
    $31 = ___cxa_find_matching_catch(-1,-1)|0;
    $32 = tempRet0;
    ___cxa_guard_abort(((9032)|0));
    ___resumeException($31|0);
    // unreachable;
   } else {
    HEAP32[(9024)>>2] = $28;
    ___cxa_guard_release(((9032)|0));
    break;
   }
  }
 } while(0);
 $33 = HEAP32[(9024)>>2]|0;
 $vararg_ptr = ($vararg_buffer);
 $34 = $vararg_ptr;
 $35 = $34;
 HEAP32[$35>>2] = $1;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $2;
 $38 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($23,22,$33,$9,$vararg_buffer)|0);
 $39 = (($__nar) + ($38)|0);
 $40 = HEAP32[$11>>2]|0;
 $41 = $40 & 176;
 do {
  if ((($41|0) == 16)) {
   $42 = HEAP8[$23]|0;
   if ((($42<<24>>24) == 43) | (($42<<24>>24) == 45)) {
    $43 = (($__nar) + 1|0);
    $$0$i1 = $43;
    break;
   }
   $44 = ($38|0)>(1);
   $45 = ($42<<24>>24)==(48);
   $or$cond$i = $44 & $45;
   if (!($or$cond$i)) {
    label = 22;
    break;
   }
   $46 = (($__nar) + 1|0);
   $47 = HEAP8[$46]|0;
   if (!((($47<<24>>24) == 88) | (($47<<24>>24) == 120))) {
    label = 22;
    break;
   }
   $48 = (($__nar) + 2|0);
   $$0$i1 = $48;
  } else if ((($41|0) == 32)) {
   $$0$i1 = $39;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $23;
 }
 $49 = ($__o);
 __ZNKSt3__18ios_base6getlocEv($3,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(42,($23|0),($$0$i1|0),($39|0),($49|0),($__op|0),($__oe|0),($3|0));
 $50 = __THREW__; __THREW__ = 0;
 $51 = $50&1;
 if ($51) {
  $64 = ___cxa_find_matching_catch(-1,-1)|0;
  $65 = tempRet0;
  $66 = ($3);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($67);
  (__ZNSt3__114__shared_count16__release_sharedEv($68)|0);
  ___resumeException($64|0);
  // unreachable;
 } else {
  $52 = ($3);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53);
  (__ZNSt3__114__shared_count16__release_sharedEv($54)|0);
  $55 = ($__s);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($4);
  HEAP32[$57>>2] = $56;
  $58 = HEAP32[$__op>>2]|0;
  $59 = HEAP32[$__oe>>2]|0;
  $60 = $$byval_copy;
  $61 = $$byval_copy;
  $62 = $4;
  ;HEAP32[$61+0>>2]=HEAP32[$62+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$49,$58,$59,$__iob,$__fl);
  $63 = $$byval_copy;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer = sp + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 24|0;
 $__op = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__oe = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $2 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $3 = ($__fmt);
 ;HEAP8[$3+0|0]=HEAP8[(7928)+0|0]|0;HEAP8[$3+1|0]=HEAP8[(7928)+1|0]|0;HEAP8[$3+2|0]=HEAP8[(7928)+2|0]|0;HEAP8[$3+3|0]=HEAP8[(7928)+3|0]|0;HEAP8[$3+4|0]=HEAP8[(7928)+4|0]|0;HEAP8[$3+5|0]=HEAP8[(7928)+5|0]|0;
 $4 = (($__fmt) + 1|0);
 $5 = (($__iob) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 2048;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0$i = $4;
 } else {
  $9 = (($__fmt) + 2|0);
  HEAP8[$4] = 43;
  $$0$i = $9;
 }
 $10 = $6 & 512;
 $11 = ($10|0)==(0);
 if ($11) {
  $$13$i$ph = $$0$i;
 } else {
  $12 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $12;
 }
 HEAP8[$$13$i$ph] = 108;
 $scevgep = (($$13$i$ph) + 1|0);
 $13 = $6 & 74;
 do {
  if ((($13|0) == 64)) {
   HEAP8[$scevgep] = 111;
  } else if ((($13|0) == 8)) {
   $14 = $6 & 16384;
   $15 = ($14|0)==(0);
   if ($15) {
    HEAP8[$scevgep] = 120;
    break;
   } else {
    HEAP8[$scevgep] = 88;
    break;
   }
  } else {
   HEAP8[$scevgep] = 117;
  }
 } while(0);
 $16 = ($__nar);
 $17 = HEAP8[(9032)]|0;
 $18 = ($17<<24>>24)==(0);
 do {
  if ($18) {
   $19 = (___cxa_guard_acquire(((9032)|0))|0);
   $20 = ($19|0)==(0);
   if ($20) {
    break;
   }
   __THREW__ = 0;
   $21 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $24 = ___cxa_find_matching_catch(-1,-1)|0;
    $25 = tempRet0;
    ___cxa_guard_abort(((9032)|0));
    ___resumeException($24|0);
    // unreachable;
   } else {
    HEAP32[(9024)>>2] = $21;
    ___cxa_guard_release(((9032)|0));
    break;
   }
  }
 } while(0);
 $26 = HEAP32[(9024)>>2]|0;
 $vararg_ptr = ($vararg_buffer);
 HEAP32[$vararg_ptr>>2] = $__v;
 $27 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($16,12,$26,$3,$vararg_buffer)|0);
 $28 = (($__nar) + ($27)|0);
 $29 = HEAP32[$5>>2]|0;
 $30 = $29 & 176;
 do {
  if ((($30|0) == 16)) {
   $31 = HEAP8[$16]|0;
   if ((($31<<24>>24) == 43) | (($31<<24>>24) == 45)) {
    $32 = (($__nar) + 1|0);
    $$0$i1 = $32;
    break;
   }
   $33 = ($27|0)>(1);
   $34 = ($31<<24>>24)==(48);
   $or$cond$i = $33 & $34;
   if (!($or$cond$i)) {
    label = 22;
    break;
   }
   $35 = (($__nar) + 1|0);
   $36 = HEAP8[$35]|0;
   if (!((($36<<24>>24) == 88) | (($36<<24>>24) == 120))) {
    label = 22;
    break;
   }
   $37 = (($__nar) + 2|0);
   $$0$i1 = $37;
  } else if ((($30|0) == 32)) {
   $$0$i1 = $28;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $16;
 }
 $38 = ($__o);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(42,($16|0),($$0$i1|0),($28|0),($38|0),($__op|0),($__oe|0),($1|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if ($40) {
  $53 = ___cxa_find_matching_catch(-1,-1)|0;
  $54 = tempRet0;
  $55 = ($1);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56);
  (__ZNSt3__114__shared_count16__release_sharedEv($57)|0);
  ___resumeException($53|0);
  // unreachable;
 } else {
  $41 = ($1);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42);
  (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
  $44 = ($__s);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($2);
  HEAP32[$46>>2] = $45;
  $47 = HEAP32[$__op>>2]|0;
  $48 = HEAP32[$__oe>>2]|0;
  $49 = $$byval_copy;
  $50 = $$byval_copy;
  $51 = $2;
  ;HEAP32[$50+0>>2]=HEAP32[$51+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$38,$47,$48,$__iob,$__fl);
  $52 = $$byval_copy;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg$result,$this,$__s,$__iob,$__fl,$1,$2) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $lftr$limit = 0, $or$cond$i = 0, $vararg_buffer = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer = sp + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 24|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 48|0;
 $__op = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__oe = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $3 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $4 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $5 = $__fmt;
 $6 = $5;
 HEAP32[$6>>2] = 37;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = $__fmt;
 $10 = (($9) + 1|0);
 $11 = (($__iob) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 2048;
 $14 = ($13|0)==(0);
 if ($14) {
  $$0$i = $10;
 } else {
  $15 = (($9) + 2|0);
  HEAP8[$10] = 43;
  $$0$i = $15;
 }
 $16 = $12 & 512;
 $17 = ($16|0)==(0);
 if ($17) {
  $$13$i$ph = $$0$i;
 } else {
  $18 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $18;
 }
 $lftr$limit = (($$13$i$ph) + 2|0);
 $19 = (($$13$i$ph) + 1|0);
 HEAP8[$$13$i$ph] = 108;
 HEAP8[$19] = 108;
 $20 = $12 & 74;
 do {
  if ((($20|0) == 64)) {
   HEAP8[$lftr$limit] = 111;
  } else if ((($20|0) == 8)) {
   $21 = $12 & 16384;
   $22 = ($21|0)==(0);
   if ($22) {
    HEAP8[$lftr$limit] = 120;
    break;
   } else {
    HEAP8[$lftr$limit] = 88;
    break;
   }
  } else {
   HEAP8[$lftr$limit] = 117;
  }
 } while(0);
 $23 = ($__nar);
 $24 = HEAP8[(9032)]|0;
 $25 = ($24<<24>>24)==(0);
 do {
  if ($25) {
   $26 = (___cxa_guard_acquire(((9032)|0))|0);
   $27 = ($26|0)==(0);
   if ($27) {
    break;
   }
   __THREW__ = 0;
   $28 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if ($30) {
    $31 = ___cxa_find_matching_catch(-1,-1)|0;
    $32 = tempRet0;
    ___cxa_guard_abort(((9032)|0));
    ___resumeException($31|0);
    // unreachable;
   } else {
    HEAP32[(9024)>>2] = $28;
    ___cxa_guard_release(((9032)|0));
    break;
   }
  }
 } while(0);
 $33 = HEAP32[(9024)>>2]|0;
 $vararg_ptr = ($vararg_buffer);
 $34 = $vararg_ptr;
 $35 = $34;
 HEAP32[$35>>2] = $1;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $2;
 $38 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($23,23,$33,$9,$vararg_buffer)|0);
 $39 = (($__nar) + ($38)|0);
 $40 = HEAP32[$11>>2]|0;
 $41 = $40 & 176;
 do {
  if ((($41|0) == 16)) {
   $42 = HEAP8[$23]|0;
   if ((($42<<24>>24) == 43) | (($42<<24>>24) == 45)) {
    $43 = (($__nar) + 1|0);
    $$0$i1 = $43;
    break;
   }
   $44 = ($38|0)>(1);
   $45 = ($42<<24>>24)==(48);
   $or$cond$i = $44 & $45;
   if (!($or$cond$i)) {
    label = 22;
    break;
   }
   $46 = (($__nar) + 1|0);
   $47 = HEAP8[$46]|0;
   if (!((($47<<24>>24) == 88) | (($47<<24>>24) == 120))) {
    label = 22;
    break;
   }
   $48 = (($__nar) + 2|0);
   $$0$i1 = $48;
  } else if ((($41|0) == 32)) {
   $$0$i1 = $39;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $23;
 }
 $49 = ($__o);
 __ZNKSt3__18ios_base6getlocEv($3,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(42,($23|0),($$0$i1|0),($39|0),($49|0),($__op|0),($__oe|0),($3|0));
 $50 = __THREW__; __THREW__ = 0;
 $51 = $50&1;
 if ($51) {
  $64 = ___cxa_find_matching_catch(-1,-1)|0;
  $65 = tempRet0;
  $66 = ($3);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($67);
  (__ZNSt3__114__shared_count16__release_sharedEv($68)|0);
  ___resumeException($64|0);
  // unreachable;
 } else {
  $52 = ($3);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53);
  (__ZNSt3__114__shared_count16__release_sharedEv($54)|0);
  $55 = ($__s);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($4);
  HEAP32[$57>>2] = $56;
  $58 = HEAP32[$__op>>2]|0;
  $59 = HEAP32[$__oe>>2]|0;
  $60 = $$byval_copy;
  $61 = $$byval_copy;
  $62 = $4;
  ;HEAP32[$61+0>>2]=HEAP32[$62+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$49,$58,$59,$__iob,$__fl);
  $63 = $$byval_copy;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$0$i7 = 0, $$01 = 0, $$1$i = 0, $$118 = 0, $$1217 = 0, $$byval_copy = 0, $$pre = 0, $$pre19 = 0, $$pre20 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__fmt = 0, $__nar = 0;
 var $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0, $specify_precision$0$off0$ph$i12 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer9 = 0, $vararg_lifetime_bitcast = 0, $vararg_lifetime_bitcast10 = 0, $vararg_lifetime_bitcast13 = 0, $vararg_lifetime_bitcast17 = 0;
 var $vararg_ptr = 0, $vararg_ptr11 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr8 = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0, u$2 = 0, u$3 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 $$byval_copy = sp;
 $vararg_buffer16 = sp + 8|0;
 $vararg_lifetime_bitcast17 = $vararg_buffer16;
 $vararg_buffer12 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $vararg_lifetime_bitcast13 = $vararg_buffer12;
 $vararg_buffer9 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $vararg_lifetime_bitcast10 = $vararg_buffer9;
 $vararg_buffer = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 32|0;
 $__nb = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 64|0;
 $__op = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__oe = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $2 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $3 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = $__fmt;
 $9 = (($8) + 1|0);
 $10 = (($__iob) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 2048;
 $13 = ($12|0)==(0);
 if ($13) {
  $$0$i = $9;
 } else {
  $14 = (($8) + 2|0);
  HEAP8[$9] = 43;
  $$0$i = $14;
 }
 $15 = $11 & 1024;
 $16 = ($15|0)==(0);
 if ($16) {
  $$1$i = $$0$i;
 } else {
  $17 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$1$i = $17;
 }
 $18 = $11 & 260;
 $19 = $11 >>> 14;
 $20 = ($18|0)==(260);
 do {
  if ($20) {
   $27 = $19 & 1;
   $28 = ($27|0)==(0);
   if ($28) {
    HEAP8[$$1$i] = 97;
    $specify_precision$0$off0$ph$i12 = 0;
    break;
   } else {
    HEAP8[$$1$i] = 65;
    $specify_precision$0$off0$ph$i12 = 0;
    break;
   }
  } else {
   $21 = (($$1$i) + 1|0);
   HEAP8[$$1$i] = 46;
   $22 = (($$1$i) + 2|0);
   HEAP8[$21] = 42;
   if ((($18|0) == 256)) {
    $25 = $19 & 1;
    $26 = ($25|0)==(0);
    if ($26) {
     HEAP8[$22] = 101;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    } else {
     HEAP8[$22] = 69;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    }
   } else if ((($18|0) == 4)) {
    $23 = $19 & 1;
    $24 = ($23|0)==(0);
    if ($24) {
     HEAP8[$22] = 102;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    } else {
     HEAP8[$22] = 70;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    }
   } else {
    $29 = $19 & 1;
    $30 = ($29|0)==(0);
    if ($30) {
     HEAP8[$22] = 103;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    } else {
     HEAP8[$22] = 71;
     $specify_precision$0$off0$ph$i12 = 1;
     break;
    }
   }
  }
 } while(0);
 $31 = ($__nar);
 HEAP32[$__nb>>2] = $31;
 $32 = HEAP8[(9032)]|0;
 $33 = ($32<<24>>24)==(0);
 do {
  if ($33) {
   $34 = (___cxa_guard_acquire(((9032)|0))|0);
   $35 = ($34|0)==(0);
   if ($35) {
    break;
   }
   __THREW__ = 0;
   $36 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   if ($38) {
    $39 = ___cxa_find_matching_catch(-1,-1)|0;
    $40 = tempRet0;
    ___cxa_guard_abort(((9032)|0));
    ___resumeException($39|0);
    // unreachable;
   } else {
    HEAP32[(9024)>>2] = $36;
    ___cxa_guard_release(((9032)|0));
    break;
   }
  }
 } while(0);
 $41 = HEAP32[(9024)>>2]|0;
 if ($specify_precision$0$off0$ph$i12) {
  $42 = (($__iob) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $vararg_ptr = ($vararg_buffer);
  HEAP32[$vararg_ptr>>2] = $43;
  $vararg_ptr8 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $44 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($31,30,$41,$8,$vararg_buffer)|0);
  $__nc$0 = $44;
 } else {
  $vararg_ptr11 = ($vararg_buffer9);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr11>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr11+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $45 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($31,30,$41,$8,$vararg_buffer9)|0);
  $__nc$0 = $45;
 }
 $46 = ($__nc$0|0)>(29);
 L38: do {
  if ($46) {
   $47 = HEAP8[(9032)]|0;
   $48 = ($47<<24>>24)==(0);
   L41: do {
    if ($specify_precision$0$off0$ph$i12) {
     do {
      if ($48) {
       $49 = (___cxa_guard_acquire(((9032)|0))|0);
       $50 = ($49|0)==(0);
       if ($50) {
        break;
       }
       __THREW__ = 0;
       $51 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if ($53) {
        $54 = ___cxa_find_matching_catch(-1,-1)|0;
        $55 = tempRet0;
        ___cxa_guard_abort(((9032)|0));
        $eh$lpad$body$index3Z2D = $55;$eh$lpad$body$indexZ2D = $54;
        break L41;
       } else {
        HEAP32[(9024)>>2] = $51;
        ___cxa_guard_release(((9032)|0));
        break;
       }
      }
     } while(0);
     $56 = HEAP32[(9024)>>2]|0;
     $57 = (($__iob) + 8|0);
     $58 = HEAP32[$57>>2]|0;
     __THREW__ = 0;
     $vararg_ptr14 = ($vararg_buffer12);
     HEAP32[$vararg_ptr14>>2] = $58;
     $vararg_ptr15 = (($vararg_buffer12) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr15>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr15+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $59 = (invoke_iiiii(14,($__nb|0),($56|0),($8|0),($vararg_buffer12|0))|0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 36;
     } else {
      $__nc$1 = $59;
      label = 44;
     }
    } else {
     do {
      if ($48) {
       $64 = (___cxa_guard_acquire(((9032)|0))|0);
       $65 = ($64|0)==(0);
       if ($65) {
        break;
       }
       __THREW__ = 0;
       $66 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
       $67 = __THREW__; __THREW__ = 0;
       $68 = $67&1;
       if ($68) {
        $69 = ___cxa_find_matching_catch(-1,-1)|0;
        $70 = tempRet0;
        ___cxa_guard_abort(((9032)|0));
        $eh$lpad$body$index3Z2D = $70;$eh$lpad$body$indexZ2D = $69;
        break L41;
       } else {
        HEAP32[(9024)>>2] = $66;
        ___cxa_guard_release(((9032)|0));
        break;
       }
      }
     } while(0);
     $71 = HEAP32[(9024)>>2]|0;
     $72 = (($__iob) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     __THREW__ = 0;
     $vararg_ptr18 = ($vararg_buffer16);
     HEAP32[$vararg_ptr18>>2] = $73;
     $vararg_ptr19 = (($vararg_buffer16) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr19+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $74 = (invoke_iiiii(14,($__nb|0),($71|0),($8|0),($vararg_buffer16|0))|0);
     $75 = __THREW__; __THREW__ = 0;
     $76 = $75&1;
     if ($76) {
      label = 36;
     } else {
      $__nc$1 = $74;
      label = 44;
     }
    }
   } while(0);
   do {
    if ((label|0) == 44) {
     $77 = HEAP32[$__nb>>2]|0;
     $78 = ($77|0)==(0|0);
     if (!($78)) {
      $81 = $77;$82 = $77;$__nc$2 = $__nc$1;
      break L38;
     }
     __THREW__ = 0;
     invoke_v(7);
     $79 = __THREW__; __THREW__ = 0;
     $80 = $79&1;
     if ($80) {
      label = 36;
      break;
     }
     $$pre = HEAP32[$__nb>>2]|0;
     $81 = $$pre;$82 = $$pre;$__nc$2 = $__nc$1;
     break L38;
    }
   } while(0);
   if ((label|0) == 36) {
    $62 = ___cxa_find_matching_catch(-1,-1)|0;
    $63 = tempRet0;
    $eh$lpad$body$index3Z2D = $63;$eh$lpad$body$indexZ2D = $62;
   }
   $$118 = $eh$lpad$body$indexZ2D;$$1217 = $eh$lpad$body$index3Z2D;
   ___resumeException($$118|0);
   // unreachable;
  } else {
   $$pre19 = HEAP32[$__nb>>2]|0;
   $81 = $$pre19;$82 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $83 = (($81) + ($__nc$2)|0);
 $84 = HEAP32[$10>>2]|0;
 $85 = $84 & 176;
 do {
  if ((($85|0) == 32)) {
   $$0$i7 = $83;
  } else if ((($85|0) == 16)) {
   $86 = HEAP8[$81]|0;
   if ((($86<<24>>24) == 43) | (($86<<24>>24) == 45)) {
    $87 = (($81) + 1|0);
    $$0$i7 = $87;
    break;
   }
   $88 = ($__nc$2|0)>(1);
   $89 = ($86<<24>>24)==(48);
   $or$cond$i = $88 & $89;
   if (!($or$cond$i)) {
    label = 53;
    break;
   }
   $90 = (($81) + 1|0);
   $91 = HEAP8[$90]|0;
   if (!((($91<<24>>24) == 88) | (($91<<24>>24) == 120))) {
    label = 53;
    break;
   }
   $92 = (($81) + 2|0);
   $$0$i7 = $92;
  } else {
   label = 53;
  }
 } while(0);
 if ((label|0) == 53) {
  $$0$i7 = $81;
 }
 $93 = ($__o);
 $94 = ($81|0)==($31|0);
 do {
  if ($94) {
   $103 = $31;$104 = 0;$__ob$0 = $93;
   label = 59;
  } else {
   $95 = $__nc$2 << 1;
   $96 = (_malloc($95)|0);
   $97 = ($96|0)==(0|0);
   if (!($97)) {
    $103 = $81;$104 = $96;$__ob$0 = $96;
    label = 59;
    break;
   }
   __THREW__ = 0;
   invoke_v(7);
   $98 = __THREW__; __THREW__ = 0;
   $99 = $98&1;
   if ($99) {
    $100 = 0;
    label = 58;
    break;
   }
   $$pre20 = HEAP32[$__nb>>2]|0;
   $103 = $$pre20;$104 = 0;$__ob$0 = 0;
   label = 59;
  }
 } while(0);
 do {
  if ((label|0) == 59) {
   __THREW__ = 0;
   invoke_vii(49,($1|0),($__iob|0));
   $105 = __THREW__; __THREW__ = 0;
   $106 = $105&1;
   if ($106) {
    $100 = $104;
    label = 58;
    break;
   }
   __THREW__ = 0;
   invoke_viiiiiii(43,($103|0),($$0$i7|0),($83|0),($__ob$0|0),($__op|0),($__oe|0),($1|0));
   $107 = __THREW__; __THREW__ = 0;
   $108 = $107&1;
   if ($108) {
    $134 = ___cxa_find_matching_catch(-1,-1)|0;
    $135 = tempRet0;
    $136 = ($1);
    $137 = HEAP32[$136>>2]|0;
    $138 = ($137);
    (__ZNSt3__114__shared_count16__release_sharedEv($138)|0);
    $$0 = $134;$$01 = $135;$139 = $104;
    break;
   }
   $109 = ($1);
   $110 = HEAP32[$109>>2]|0;
   $111 = ($110);
   (__ZNSt3__114__shared_count16__release_sharedEv($111)|0);
   $112 = ($__s);
   $113 = HEAP32[$112>>2]|0;
   $114 = ($3);
   HEAP32[$114>>2] = $113;
   $115 = HEAP32[$__op>>2]|0;
   $116 = HEAP32[$__oe>>2]|0;
   __THREW__ = 0;
   $117 = $$byval_copy;
   $118 = $$byval_copy;
   $119 = $3;
   ;HEAP32[$118+0>>2]=HEAP32[$119+0>>2]|0;
   invoke_viiiiiii(39,($2|0),($$byval_copy|0),($__ob$0|0),($115|0),($116|0),($__iob|0),($__fl|0));
   $120 = $$byval_copy;
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    $100 = $104;
    label = 58;
    break;
   }
   $123 = ($2);
   $124 = HEAP32[$123>>2]|0;
   HEAP32[$112>>2] = $124;
   $125 = ($agg$result);
   HEAP32[$125>>2] = $124;
   $126 = ($104|0)==(0|0);
   do {
    if (!($126)) {
     __THREW__ = 0;
     invoke_vi(185,($104|0));
     $127 = __THREW__; __THREW__ = 0;
     $128 = $127&1;
     if (!($128)) {
      break;
     }
     $129 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$0 = tempRet0;
     ___clang_call_terminate($129);
     // unreachable;
    }
   } while(0);
   $130 = ($82|0)==(0|0);
   if ($130) {
    STACKTOP = sp;return;
   }
   __THREW__ = 0;
   invoke_vi(185,($82|0));
   $131 = __THREW__; __THREW__ = 0;
   $132 = $131&1;
   if ($132) {
    $133 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    u$1 = tempRet0;
    ___clang_call_terminate($133);
    // unreachable;
   } else {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 58) {
  $101 = ___cxa_find_matching_catch(-1,-1)|0;
  $102 = tempRet0;
  $$0 = $101;$$01 = $102;$139 = $100;
 }
 $140 = ($139|0)==(0|0);
 do {
  if (!($140)) {
   __THREW__ = 0;
   invoke_vi(185,($139|0));
   $141 = __THREW__; __THREW__ = 0;
   $142 = $141&1;
   if (!($142)) {
    break;
   }
   $143 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$2 = tempRet0;
   ___clang_call_terminate($143);
   // unreachable;
  }
 } while(0);
 $144 = ($82|0)==(0|0);
 if ($144) {
  $$118 = $$0;$$1217 = $$01;
  ___resumeException($$118|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(185,($82|0));
 $145 = __THREW__; __THREW__ = 0;
 $146 = $145&1;
 if ($146) {
  $147 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$3 = tempRet0;
  ___clang_call_terminate($147);
  // unreachable;
 } else {
  $$118 = $$0;$$1217 = $$01;
  ___resumeException($$118|0);
  // unreachable;
 }
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__va = 0, $arglist = 0, label = 0, sp = 0;
 var u$0 = 0, u$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__va = sp;
 $1 = ($__va);
 $2 = $__va;
 $arglist = $2;
 HEAP32[$arglist>>2] = $varargs;
 $3 = (_uselocale(($__l|0))|0);
 __THREW__ = 0;
 $4 = (invoke_iiii(35,($__s|0),($__format|0),($1|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $11 = ___cxa_find_matching_catch(-1,-1)|0;
  $12 = tempRet0;
  $13 = ($3|0)==(0|0);
  if ($13) {
   ___resumeException($11|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(93,($3|0))|0);
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$1 = tempRet0;
   ___clang_call_terminate($16);
   // unreachable;
  } else {
   ___resumeException($11|0);
   // unreachable;
  }
 } else {
  $7 = ($3|0)==(0|0);
  if ($7) {
   STACKTOP = sp;return ($4|0);
  }
  __THREW__ = 0;
  (invoke_ii(93,($3|0))|0);
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if ($9) {
   $10 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$0 = tempRet0;
   ___clang_call_terminate($10);
   // unreachable;
  } else {
   STACKTOP = sp;return ($4|0);
  }
 }
 return 0|0;
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i$phi = 0, $$012$i$i13 = 0, $$012$i$i13$phi = 0, $$58 = 0, $$__dg$0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $165$phi = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $228$phi = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__dc$025 = 0, $__dc$1 = 0, $__dg$026 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$221 = 0, $__nf$3 = 0, $__ns$043 = 0, $__ns$134 = 0, $__ns$2 = 0, $__p$027 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $eh$lpad$body$index7Z2D = 0, $eh$lpad$body$indexZ2D = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $__p$i$i$i$i1 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $__grouping = sp + 32|0;
 $1 = ($__loc);
 $2 = HEAP32[$1>>2]|0;
 $3 = $__p$i$i$i$i;
 $4 = HEAP32[((9136))>>2]|0;
 $5 = ($4|0)==(-1);
 if (!($5)) {
  $6 = ($__p$i$i$i$i);
  HEAP32[$6>>2] = (9136);
  $7 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$7>>2] = (183);
  $8 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$8>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(((9136)),$3,184);
 }
 $9 = HEAP32[(((9136) + 4|0))>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = (($2) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($2) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 if (!($19)) {
  $23 = (___cxa_allocate_exception(4)|0);
  $24 = $23;
  __ZNSt8bad_castC2Ev($24);
  ___cxa_throw(($23|0),((17096)|0),((143)|0));
  // unreachable;
 }
 $20 = (($14) + ($10<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $23 = (___cxa_allocate_exception(4)|0);
  $24 = $23;
  __ZNSt8bad_castC2Ev($24);
  ___cxa_throw(($23|0),((17096)|0),((143)|0));
  // unreachable;
 }
 $25 = $21;
 $26 = HEAP32[$1>>2]|0;
 $27 = $__p$i$i$i$i1;
 $28 = HEAP32[((9280))>>2]|0;
 $29 = ($28|0)==(-1);
 if (!($29)) {
  $30 = ($__p$i$i$i$i1);
  HEAP32[$30>>2] = (9280);
  $31 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$31>>2] = (183);
  $32 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$32>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(((9280)),$27,184);
 }
 $33 = HEAP32[(((9280) + 4|0))>>2]|0;
 $34 = (($33) + -1)|0;
 $35 = (($26) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($26) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $36;
 $40 = $38;
 $41 = (($39) - ($40))|0;
 $42 = $41 >> 2;
 $43 = ($42>>>0)>($34>>>0);
 if (!($43)) {
  $47 = (___cxa_allocate_exception(4)|0);
  $48 = $47;
  __ZNSt8bad_castC2Ev($48);
  ___cxa_throw(($47|0),((17096)|0),((143)|0));
  // unreachable;
 }
 $44 = (($38) + ($34<<2)|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0|0);
 if ($46) {
  $47 = (___cxa_allocate_exception(4)|0);
  $48 = $47;
  __ZNSt8bad_castC2Ev($48);
  ___cxa_throw(($47|0),((17096)|0),((143)|0));
  // unreachable;
 }
 $49 = $45;
 $50 = $45;
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + 20|0);
 $53 = HEAP32[$52>>2]|0;
 FUNCTION_TABLE_vii[$53 & 127]($__grouping,$49);
 HEAP32[$__oe>>2] = $__ob;
 $54 = HEAP8[$__nb]|0;
 do {
  if ((($54<<24>>24) == 43) | (($54<<24>>24) == 45)) {
   $55 = $21;
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) + 28|0);
   $58 = HEAP32[$57>>2]|0;
   __THREW__ = 0;
   $59 = (invoke_iii($58|0,($25|0),($54|0))|0);
   $60 = __THREW__; __THREW__ = 0;
   $61 = $60&1;
   if ($61) {
    break;
   }
   $62 = (($__nb) + 1|0);
   $63 = HEAP32[$__oe>>2]|0;
   $64 = (($63) + 1|0);
   HEAP32[$__oe>>2] = $64;
   HEAP8[$63] = $59;
   $__nf$0 = $62;
   label = 20;
  } else {
   $__nf$0 = $__nb;
   label = 20;
  }
 } while(0);
 L22: do {
  if ((label|0) == 20) {
   $75 = $__ne;
   $76 = $__nf$0;
   $77 = (($75) - ($76))|0;
   $78 = ($77|0)>(1);
   L24: do {
    if ($78) {
     $80 = HEAP8[$__nf$0]|0;
     $81 = ($80<<24>>24)==(48);
     if (!($81)) {
      label = 21;
      break;
     }
     $82 = (($__nf$0) + 1|0);
     $83 = HEAP8[$82]|0;
     if (!((($83<<24>>24) == 88) | (($83<<24>>24) == 120))) {
      label = 21;
      break;
     }
     $84 = $21;
     $85 = HEAP32[$84>>2]|0;
     $86 = (($85) + 28|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_iii($87|0,($25|0),48)|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      break L22;
     }
     $91 = HEAP32[$__oe>>2]|0;
     $92 = (($91) + 1|0);
     HEAP32[$__oe>>2] = $92;
     HEAP8[$91] = $88;
     $93 = (($__nf$0) + 2|0);
     $94 = HEAP8[$82]|0;
     $95 = HEAP32[$84>>2]|0;
     $96 = (($95) + 28|0);
     $97 = HEAP32[$96>>2]|0;
     __THREW__ = 0;
     $98 = (invoke_iii($97|0,($25|0),($94|0))|0);
     $99 = __THREW__; __THREW__ = 0;
     $100 = $99&1;
     if ($100) {
      break L22;
     }
     $101 = HEAP32[$__oe>>2]|0;
     $102 = (($101) + 1|0);
     HEAP32[$__oe>>2] = $102;
     HEAP8[$101] = $98;
     $103 = ($93>>>0)<($__ne>>>0);
     if ($103) {
      $__ns$043 = $93;
     } else {
      $__nf$1 = $93;$__ns$2 = $93;
      break;
     }
     L30: while(1) {
      $105 = HEAP8[$__ns$043]|0;
      $106 = HEAP8[(9032)]|0;
      $107 = ($106<<24>>24)==(0);
      do {
       if ($107) {
        $108 = (___cxa_guard_acquire(((9032)|0))|0);
        $109 = ($108|0)==(0);
        if ($109) {
         break;
        }
        __THREW__ = 0;
        $110 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
        $111 = __THREW__; __THREW__ = 0;
        $112 = $111&1;
        if ($112) {
         label = 32;
         break L30;
        }
        HEAP32[(9024)>>2] = $110;
        ___cxa_guard_release(((9032)|0));
       }
      } while(0);
      $115 = HEAP32[(9024)>>2]|0;
      $116 = $105 << 24 >> 24;
      __THREW__ = 0;
      $117 = (invoke_iii(35,($116|0),($115|0))|0);
      $118 = __THREW__; __THREW__ = 0;
      $119 = $118&1;
      if ($119) {
       label = 17;
       break;
      }
      $120 = ($117|0)==(0);
      $121 = (($__ns$043) + 1|0);
      if ($120) {
       $__nf$1 = $93;$__ns$2 = $__ns$043;
       break L24;
      }
      $104 = ($121>>>0)<($__ne>>>0);
      if ($104) {
       $__ns$043 = $121;
      } else {
       $__nf$1 = $93;$__ns$2 = $121;
       break L24;
      }
     }
     if ((label|0) == 17) {
      $71 = ___cxa_find_matching_catch(-1,-1)|0;
      $72 = tempRet0;
      $eh$lpad$body$index7Z2D = $72;$eh$lpad$body$indexZ2D = $71;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
     else if ((label|0) == 32) {
      $113 = ___cxa_find_matching_catch(-1,-1)|0;
      $114 = tempRet0;
      ___cxa_guard_abort(((9032)|0));
      $eh$lpad$body$index7Z2D = $114;$eh$lpad$body$indexZ2D = $113;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
    } else {
     label = 21;
    }
   } while(0);
   L44: do {
    if ((label|0) == 21) {
     $79 = ($__nf$0>>>0)<($__ne>>>0);
     if ($79) {
      $__ns$134 = $__nf$0;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
      break;
     }
     L46: while(1) {
      $123 = HEAP8[$__ns$134]|0;
      $124 = HEAP8[(9032)]|0;
      $125 = ($124<<24>>24)==(0);
      do {
       if ($125) {
        $126 = (___cxa_guard_acquire(((9032)|0))|0);
        $127 = ($126|0)==(0);
        if ($127) {
         break;
        }
        __THREW__ = 0;
        $128 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
        $129 = __THREW__; __THREW__ = 0;
        $130 = $129&1;
        if ($130) {
         label = 40;
         break L46;
        }
        HEAP32[(9024)>>2] = $128;
        ___cxa_guard_release(((9032)|0));
       }
      } while(0);
      $133 = HEAP32[(9024)>>2]|0;
      $134 = $123 << 24 >> 24;
      __THREW__ = 0;
      $135 = (invoke_iii(36,($134|0),($133|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 16;
       break;
      }
      $138 = ($135|0)==(0);
      $139 = (($__ns$134) + 1|0);
      if ($138) {
       $__nf$1 = $__nf$0;$__ns$2 = $__ns$134;
       break L44;
      }
      $122 = ($139>>>0)<($__ne>>>0);
      if ($122) {
       $__ns$134 = $139;
      } else {
       $__nf$1 = $__nf$0;$__ns$2 = $139;
       break L44;
      }
     }
     if ((label|0) == 16) {
      $69 = ___cxa_find_matching_catch(-1,-1)|0;
      $70 = tempRet0;
      $eh$lpad$body$index7Z2D = $70;$eh$lpad$body$indexZ2D = $69;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
     else if ((label|0) == 40) {
      $131 = ___cxa_find_matching_catch(-1,-1)|0;
      $132 = tempRet0;
      ___cxa_guard_abort(((9032)|0));
      $eh$lpad$body$index7Z2D = $132;$eh$lpad$body$indexZ2D = $131;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
    }
   } while(0);
   $140 = $__grouping;
   $141 = HEAP8[$140]|0;
   $142 = $141 & 1;
   $143 = ($142<<24>>24)==(0);
   if ($143) {
    $146 = $141&255;
    $147 = $146 >>> 1;
    $148 = $147;
   } else {
    $144 = (($__grouping) + 4|0);
    $145 = HEAP32[$144>>2]|0;
    $148 = $145;
   }
   $149 = ($148|0)==(0);
   do {
    if ($149) {
     $150 = HEAP32[$__oe>>2]|0;
     $151 = $21;
     $152 = HEAP32[$151>>2]|0;
     $153 = (($152) + 32|0);
     $154 = HEAP32[$153>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($154|0,($25|0),($__nf$1|0),($__ns$2|0),($150|0))|0);
     $155 = __THREW__; __THREW__ = 0;
     $156 = $155&1;
     if ($156) {
      break L22;
     }
     $157 = $__ns$2;
     $158 = $__nf$1;
     $159 = (($157) - ($158))|0;
     $160 = HEAP32[$__oe>>2]|0;
     $161 = (($160) + ($159)|0);
     HEAP32[$__oe>>2] = $161;
    } else {
     $162 = ($__nf$1|0)==($__ns$2|0);
     do {
      if (!($162)) {
       $163 = (($__ns$2) + -1|0);
       $164 = ($163>>>0)>($__nf$1>>>0);
       if ($164) {
        $$012$i$i = $__nf$1;$165 = $163;
       } else {
        break;
       }
       while(1) {
        $166 = HEAP8[$$012$i$i]|0;
        $167 = HEAP8[$165]|0;
        HEAP8[$$012$i$i] = $167;
        HEAP8[$165] = $166;
        $168 = (($$012$i$i) + 1|0);
        $169 = (($165) + -1|0);
        $170 = ($168>>>0)<($169>>>0);
        if ($170) {
         $165$phi = $169;$$012$i$i$phi = $168;$165 = $165$phi;$$012$i$i = $$012$i$i$phi;
        } else {
         break;
        }
       }
      }
     } while(0);
     $171 = $45;
     $172 = HEAP32[$171>>2]|0;
     $173 = (($172) + 16|0);
     $174 = HEAP32[$173>>2]|0;
     __THREW__ = 0;
     $175 = (invoke_ii($174|0,($49|0))|0);
     $176 = __THREW__; __THREW__ = 0;
     $177 = $176&1;
     if ($177) {
      break L22;
     }
     $178 = ($__nf$1>>>0)<($__ns$2>>>0);
     L73: do {
      if ($178) {
       $179 = $__grouping;
       $180 = (($179) + 1|0);
       $181 = (($__grouping) + 4|0);
       $182 = (($__grouping) + 8|0);
       $183 = $21;
       $__dc$025 = 0;$__dg$026 = 0;$__p$027 = $__nf$1;
       while(1) {
        $184 = HEAP8[$140]|0;
        $185 = $184 & 1;
        $186 = ($185<<24>>24)==(0);
        $187 = HEAP32[$182>>2]|0;
        $$ = $186 ? $180 : $187;
        $188 = (($$) + ($__dg$026)|0);
        $189 = HEAP8[$188]|0;
        $190 = ($189<<24>>24)>(0);
        do {
         if ($190) {
          $191 = HEAP32[$182>>2]|0;
          $$58 = $186 ? $180 : $191;
          $192 = (($$58) + ($__dg$026)|0);
          $193 = HEAP8[$192]|0;
          $194 = $193 << 24 >> 24;
          $195 = ($__dc$025|0)==($194|0);
          if (!($195)) {
           $__dc$1 = $__dc$025;$__dg$1 = $__dg$026;
           break;
          }
          $196 = HEAP32[$__oe>>2]|0;
          $197 = (($196) + 1|0);
          HEAP32[$__oe>>2] = $197;
          HEAP8[$196] = $175;
          $198 = HEAP8[$140]|0;
          $199 = $198 & 1;
          $200 = ($199<<24>>24)==(0);
          if ($200) {
           $202 = $198&255;
           $203 = $202 >>> 1;
           $204 = $203;
          } else {
           $201 = HEAP32[$181>>2]|0;
           $204 = $201;
          }
          $205 = (($204) + -1)|0;
          $206 = ($__dg$026>>>0)<($205>>>0);
          $207 = $206&1;
          $$__dg$0 = (($207) + ($__dg$026))|0;
          $__dc$1 = 0;$__dg$1 = $$__dg$0;
         } else {
          $__dc$1 = $__dc$025;$__dg$1 = $__dg$026;
         }
        } while(0);
        $208 = HEAP8[$__p$027]|0;
        $209 = HEAP32[$183>>2]|0;
        $210 = (($209) + 28|0);
        $211 = HEAP32[$210>>2]|0;
        __THREW__ = 0;
        $212 = (invoke_iii($211|0,($25|0),($208|0))|0);
        $213 = __THREW__; __THREW__ = 0;
        $214 = $213&1;
        if ($214) {
         break;
        }
        $215 = HEAP32[$__oe>>2]|0;
        $216 = (($215) + 1|0);
        HEAP32[$__oe>>2] = $216;
        HEAP8[$215] = $212;
        $217 = (($__dc$1) + 1)|0;
        $218 = (($__p$027) + 1|0);
        $219 = ($218>>>0)<($__ns$2>>>0);
        if ($219) {
         $__dc$025 = $217;$__dg$026 = $__dg$1;$__p$027 = $218;
        } else {
         break L73;
        }
       }
       $67 = ___cxa_find_matching_catch(-1,-1)|0;
       $68 = tempRet0;
       $eh$lpad$body$index7Z2D = $68;$eh$lpad$body$indexZ2D = $67;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       ___resumeException($eh$lpad$body$indexZ2D|0);
       // unreachable;
      }
     } while(0);
     $220 = $__nf$1;
     $221 = $__nb;
     $222 = (($220) - ($221))|0;
     $223 = (($__ob) + ($222)|0);
     $224 = HEAP32[$__oe>>2]|0;
     $225 = ($223|0)==($224|0);
     if ($225) {
      break;
     }
     $226 = (($224) + -1|0);
     $227 = ($226>>>0)>($223>>>0);
     if ($227) {
      $$012$i$i13 = $223;$228 = $226;
     } else {
      break;
     }
     while(1) {
      $229 = HEAP8[$$012$i$i13]|0;
      $230 = HEAP8[$228]|0;
      HEAP8[$$012$i$i13] = $230;
      HEAP8[$228] = $229;
      $231 = (($$012$i$i13) + 1|0);
      $232 = (($228) + -1|0);
      $233 = ($231>>>0)<($232>>>0);
      if ($233) {
       $228$phi = $232;$$012$i$i13$phi = $231;$228 = $228$phi;$$012$i$i13 = $$012$i$i13$phi;
      } else {
       break;
      }
     }
    }
   } while(0);
   $234 = ($__ns$2>>>0)<($__ne>>>0);
   L95: do {
    if ($234) {
     $235 = $21;
     $__nf$221 = $__ns$2;
     while(1) {
      $236 = HEAP8[$__nf$221]|0;
      $237 = ($236<<24>>24)==(46);
      if ($237) {
       label = 69;
       break;
      }
      $248 = HEAP32[$235>>2]|0;
      $249 = (($248) + 28|0);
      $250 = HEAP32[$249>>2]|0;
      __THREW__ = 0;
      $251 = (invoke_iii($250|0,($25|0),($236|0))|0);
      $252 = __THREW__; __THREW__ = 0;
      $253 = $252&1;
      if ($253) {
       label = 14;
       break;
      }
      $254 = HEAP32[$__oe>>2]|0;
      $255 = (($254) + 1|0);
      HEAP32[$__oe>>2] = $255;
      HEAP8[$254] = $251;
      $256 = (($__nf$221) + 1|0);
      $257 = ($256>>>0)<($__ne>>>0);
      if ($257) {
       $__nf$221 = $256;
      } else {
       $__nf$3 = $256;
       break L95;
      }
     }
     if ((label|0) == 14) {
      $65 = ___cxa_find_matching_catch(-1,-1)|0;
      $66 = tempRet0;
      $eh$lpad$body$index7Z2D = $66;$eh$lpad$body$indexZ2D = $65;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
     else if ((label|0) == 69) {
      $238 = $45;
      $239 = HEAP32[$238>>2]|0;
      $240 = (($239) + 12|0);
      $241 = HEAP32[$240>>2]|0;
      __THREW__ = 0;
      $242 = (invoke_ii($241|0,($49|0))|0);
      $243 = __THREW__; __THREW__ = 0;
      $244 = $243&1;
      if ($244) {
       break L22;
      }
      $245 = HEAP32[$__oe>>2]|0;
      $246 = (($245) + 1|0);
      HEAP32[$__oe>>2] = $246;
      HEAP8[$245] = $242;
      $247 = (($__nf$221) + 1|0);
      $__nf$3 = $247;
      break;
     }
    } else {
     $__nf$3 = $__ns$2;
    }
   } while(0);
   $258 = HEAP32[$__oe>>2]|0;
   $259 = $21;
   $260 = HEAP32[$259>>2]|0;
   $261 = (($260) + 32|0);
   $262 = HEAP32[$261>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($262|0,($25|0),($__nf$3|0),($__ne|0),($258|0))|0);
   $263 = __THREW__; __THREW__ = 0;
   $264 = $263&1;
   if ($264) {
    break;
   }
   $265 = $__nf$3;
   $266 = (($75) - ($265))|0;
   $267 = HEAP32[$__oe>>2]|0;
   $268 = (($267) + ($266)|0);
   HEAP32[$__oe>>2] = $268;
   $269 = ($__np|0)==($__ne|0);
   if ($269) {
    $storemerge = $268;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
   $270 = $__np;
   $271 = $__nb;
   $272 = (($270) - ($271))|0;
   $273 = (($__ob) + ($272)|0);
   $storemerge = $273;
   HEAP32[$__op>>2] = $storemerge;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $73 = ___cxa_find_matching_catch(-1,-1)|0;
 $74 = tempRet0;
 $eh$lpad$body$index7Z2D = $74;$eh$lpad$body$indexZ2D = $73;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$0$i7 = 0, $$01 = 0, $$1$i = 0, $$113 = 0, $$1212 = 0, $$byval_copy = 0, $$pre = 0, $$pre14 = 0, $$pre15 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0, $scevgep = 0, $scevgep16 = 0, $specify_precision$0$off0$ph$i17 = 0;
 var $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer9 = 0, $vararg_lifetime_bitcast = 0, $vararg_lifetime_bitcast10 = 0, $vararg_lifetime_bitcast13 = 0, $vararg_lifetime_bitcast17 = 0, $vararg_ptr = 0, $vararg_ptr11 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr18 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer16 = sp + 8|0;
 $vararg_lifetime_bitcast17 = $vararg_buffer16;
 $vararg_buffer12 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $vararg_lifetime_bitcast13 = $vararg_buffer12;
 $vararg_buffer9 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $vararg_lifetime_bitcast10 = $vararg_buffer9;
 $vararg_buffer = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 32|0;
 $__nb = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 64|0;
 $__op = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__oe = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $2 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $3 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = $__fmt;
 $9 = (($8) + 1|0);
 $10 = (($__iob) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 2048;
 $13 = ($12|0)==(0);
 if ($13) {
  $$0$i = $9;
 } else {
  $14 = (($8) + 2|0);
  HEAP8[$9] = 43;
  $$0$i = $14;
 }
 $15 = $11 & 1024;
 $16 = ($15|0)==(0);
 if ($16) {
  $$1$i = $$0$i;
 } else {
  $17 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$1$i = $17;
 }
 $18 = $11 & 260;
 $19 = $11 >>> 14;
 $20 = ($18|0)==(260);
 do {
  if ($20) {
   HEAP8[$$1$i] = 76;
   $scevgep16 = (($$1$i) + 1|0);
   $27 = $19 & 1;
   $28 = ($27|0)==(0);
   if ($28) {
    HEAP8[$scevgep16] = 97;
    $specify_precision$0$off0$ph$i17 = 0;
    break;
   } else {
    HEAP8[$scevgep16] = 65;
    $specify_precision$0$off0$ph$i17 = 0;
    break;
   }
  } else {
   $21 = (($$1$i) + 1|0);
   HEAP8[$$1$i] = 46;
   $22 = (($$1$i) + 2|0);
   HEAP8[$21] = 42;
   HEAP8[$22] = 76;
   $scevgep = (($$1$i) + 3|0);
   if ((($18|0) == 256)) {
    $25 = $19 & 1;
    $26 = ($25|0)==(0);
    if ($26) {
     HEAP8[$scevgep] = 101;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 69;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    }
   } else if ((($18|0) == 4)) {
    $23 = $19 & 1;
    $24 = ($23|0)==(0);
    if ($24) {
     HEAP8[$scevgep] = 102;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 70;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    }
   } else {
    $29 = $19 & 1;
    $30 = ($29|0)==(0);
    if ($30) {
     HEAP8[$scevgep] = 103;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 71;
     $specify_precision$0$off0$ph$i17 = 1;
     break;
    }
   }
  }
 } while(0);
 $31 = ($__nar);
 HEAP32[$__nb>>2] = $31;
 $32 = HEAP8[(9032)]|0;
 $33 = ($32<<24>>24)==(0);
 do {
  if ($33) {
   $34 = (___cxa_guard_acquire(((9032)|0))|0);
   $35 = ($34|0)==(0);
   if ($35) {
    break;
   }
   __THREW__ = 0;
   $36 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   if ($38) {
    $39 = ___cxa_find_matching_catch(-1,-1)|0;
    $40 = tempRet0;
    ___cxa_guard_abort(((9032)|0));
    ___resumeException($39|0);
    // unreachable;
   } else {
    HEAP32[(9024)>>2] = $36;
    ___cxa_guard_release(((9032)|0));
    break;
   }
  }
 } while(0);
 $41 = HEAP32[(9024)>>2]|0;
 if ($specify_precision$0$off0$ph$i17) {
  $42 = (($__iob) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $vararg_ptr = ($vararg_buffer);
  HEAP32[$vararg_ptr>>2] = $43;
  $vararg_ptr8 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $44 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($31,30,$41,$8,$vararg_buffer)|0);
  $__nc$0 = $44;
 } else {
  $vararg_ptr11 = ($vararg_buffer9);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr11>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr11+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $45 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($31,30,$41,$8,$vararg_buffer9)|0);
  $__nc$0 = $45;
 }
 $46 = ($__nc$0|0)>(29);
 L38: do {
  if ($46) {
   $47 = HEAP8[(9032)]|0;
   $48 = ($47<<24>>24)==(0);
   L41: do {
    if ($specify_precision$0$off0$ph$i17) {
     do {
      if ($48) {
       $49 = (___cxa_guard_acquire(((9032)|0))|0);
       $50 = ($49|0)==(0);
       if ($50) {
        break;
       }
       __THREW__ = 0;
       $51 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if ($53) {
        $54 = ___cxa_find_matching_catch(-1,-1)|0;
        $55 = tempRet0;
        ___cxa_guard_abort(((9032)|0));
        $eh$lpad$body$index3Z2D = $55;$eh$lpad$body$indexZ2D = $54;
        break L41;
       } else {
        HEAP32[(9024)>>2] = $51;
        ___cxa_guard_release(((9032)|0));
        break;
       }
      }
     } while(0);
     $56 = HEAP32[(9024)>>2]|0;
     $57 = (($__iob) + 8|0);
     $58 = HEAP32[$57>>2]|0;
     __THREW__ = 0;
     $vararg_ptr14 = ($vararg_buffer12);
     HEAP32[$vararg_ptr14>>2] = $58;
     $vararg_ptr15 = (($vararg_buffer12) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr15>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr15+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $59 = (invoke_iiiii(14,($__nb|0),($56|0),($8|0),($vararg_buffer12|0))|0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 36;
     } else {
      $__nc$1 = $59;
      label = 44;
     }
    } else {
     do {
      if ($48) {
       $64 = (___cxa_guard_acquire(((9032)|0))|0);
       $65 = ($64|0)==(0);
       if ($65) {
        break;
       }
       __THREW__ = 0;
       $66 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
       $67 = __THREW__; __THREW__ = 0;
       $68 = $67&1;
       if ($68) {
        $69 = ___cxa_find_matching_catch(-1,-1)|0;
        $70 = tempRet0;
        ___cxa_guard_abort(((9032)|0));
        $eh$lpad$body$index3Z2D = $70;$eh$lpad$body$indexZ2D = $69;
        break L41;
       } else {
        HEAP32[(9024)>>2] = $66;
        ___cxa_guard_release(((9032)|0));
        break;
       }
      }
     } while(0);
     $71 = HEAP32[(9024)>>2]|0;
     __THREW__ = 0;
     $vararg_ptr18 = ($vararg_buffer16);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr18>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr18+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $72 = (invoke_iiiii(14,($__nb|0),($71|0),($8|0),($vararg_buffer16|0))|0);
     $73 = __THREW__; __THREW__ = 0;
     $74 = $73&1;
     if ($74) {
      label = 36;
     } else {
      $__nc$1 = $72;
      label = 44;
     }
    }
   } while(0);
   do {
    if ((label|0) == 44) {
     $75 = HEAP32[$__nb>>2]|0;
     $76 = ($75|0)==(0|0);
     if (!($76)) {
      $79 = $75;$80 = $75;$__nc$2 = $__nc$1;
      break L38;
     }
     __THREW__ = 0;
     invoke_v(7);
     $77 = __THREW__; __THREW__ = 0;
     $78 = $77&1;
     if ($78) {
      label = 36;
      break;
     }
     $$pre = HEAP32[$__nb>>2]|0;
     $79 = $$pre;$80 = $$pre;$__nc$2 = $__nc$1;
     break L38;
    }
   } while(0);
   if ((label|0) == 36) {
    $62 = ___cxa_find_matching_catch(-1,-1)|0;
    $63 = tempRet0;
    $eh$lpad$body$index3Z2D = $63;$eh$lpad$body$indexZ2D = $62;
   }
   $$113 = $eh$lpad$body$indexZ2D;$$1212 = $eh$lpad$body$index3Z2D;
   ___resumeException($$113|0);
   // unreachable;
  } else {
   $$pre14 = HEAP32[$__nb>>2]|0;
   $79 = $$pre14;$80 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $81 = (($79) + ($__nc$2)|0);
 $82 = HEAP32[$10>>2]|0;
 $83 = $82 & 176;
 do {
  if ((($83|0) == 16)) {
   $84 = HEAP8[$79]|0;
   if ((($84<<24>>24) == 43) | (($84<<24>>24) == 45)) {
    $85 = (($79) + 1|0);
    $$0$i7 = $85;
    break;
   }
   $86 = ($__nc$2|0)>(1);
   $87 = ($84<<24>>24)==(48);
   $or$cond$i = $86 & $87;
   if (!($or$cond$i)) {
    label = 53;
    break;
   }
   $88 = (($79) + 1|0);
   $89 = HEAP8[$88]|0;
   if (!((($89<<24>>24) == 88) | (($89<<24>>24) == 120))) {
    label = 53;
    break;
   }
   $90 = (($79) + 2|0);
   $$0$i7 = $90;
  } else if ((($83|0) == 32)) {
   $$0$i7 = $81;
  } else {
   label = 53;
  }
 } while(0);
 if ((label|0) == 53) {
  $$0$i7 = $79;
 }
 $91 = ($__o);
 $92 = ($79|0)==($31|0);
 do {
  if ($92) {
   $101 = $31;$102 = 0;$__ob$0 = $91;
   label = 59;
  } else {
   $93 = $__nc$2 << 1;
   $94 = (_malloc($93)|0);
   $95 = ($94|0)==(0|0);
   if (!($95)) {
    $101 = $79;$102 = $94;$__ob$0 = $94;
    label = 59;
    break;
   }
   __THREW__ = 0;
   invoke_v(7);
   $96 = __THREW__; __THREW__ = 0;
   $97 = $96&1;
   if ($97) {
    $98 = 0;
    label = 58;
    break;
   }
   $$pre15 = HEAP32[$__nb>>2]|0;
   $101 = $$pre15;$102 = 0;$__ob$0 = 0;
   label = 59;
  }
 } while(0);
 do {
  if ((label|0) == 59) {
   __THREW__ = 0;
   invoke_vii(49,($1|0),($__iob|0));
   $103 = __THREW__; __THREW__ = 0;
   $104 = $103&1;
   if ($104) {
    $98 = $102;
    label = 58;
    break;
   }
   __THREW__ = 0;
   invoke_viiiiiii(43,($101|0),($$0$i7|0),($81|0),($__ob$0|0),($__op|0),($__oe|0),($1|0));
   $105 = __THREW__; __THREW__ = 0;
   $106 = $105&1;
   if ($106) {
    $126 = ___cxa_find_matching_catch(-1,-1)|0;
    $127 = tempRet0;
    $128 = ($1);
    $129 = HEAP32[$128>>2]|0;
    $130 = ($129);
    (__ZNSt3__114__shared_count16__release_sharedEv($130)|0);
    $$0 = $126;$$01 = $127;$131 = $102;
    break;
   }
   $107 = ($1);
   $108 = HEAP32[$107>>2]|0;
   $109 = ($108);
   (__ZNSt3__114__shared_count16__release_sharedEv($109)|0);
   $110 = ($__s);
   $111 = HEAP32[$110>>2]|0;
   $112 = ($3);
   HEAP32[$112>>2] = $111;
   $113 = HEAP32[$__op>>2]|0;
   $114 = HEAP32[$__oe>>2]|0;
   __THREW__ = 0;
   $115 = $$byval_copy;
   $116 = $$byval_copy;
   $117 = $3;
   ;HEAP32[$116+0>>2]=HEAP32[$117+0>>2]|0;
   invoke_viiiiiii(39,($2|0),($$byval_copy|0),($__ob$0|0),($113|0),($114|0),($__iob|0),($__fl|0));
   $118 = $$byval_copy;
   $119 = __THREW__; __THREW__ = 0;
   $120 = $119&1;
   if ($120) {
    $98 = $102;
    label = 58;
    break;
   }
   $121 = ($2);
   $122 = HEAP32[$121>>2]|0;
   HEAP32[$110>>2] = $122;
   $123 = ($agg$result);
   HEAP32[$123>>2] = $122;
   $124 = ($102|0)==(0|0);
   if (!($124)) {
    _free($102);
   }
   $125 = ($80|0)==(0|0);
   if ($125) {
    STACKTOP = sp;return;
   }
   _free($80);
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 58) {
  $99 = ___cxa_find_matching_catch(-1,-1)|0;
  $100 = tempRet0;
  $$0 = $99;$$01 = $100;$131 = $98;
 }
 $132 = ($131|0)==(0|0);
 if (!($132)) {
  _free($131);
 }
 $133 = ($80|0)==(0|0);
 if ($133) {
  $$113 = $$0;$$1212 = $$01;
  ___resumeException($$113|0);
  // unreachable;
 }
 _free($80);
 $$113 = $$0;$$1212 = $$01;
 ___resumeException($$113|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $__p$i$i$i$i = 0, $or$cond$i = 0, $vararg_buffer = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer = sp + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__p$i$i$i$i = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 24|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 40|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $2 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $3 = ($__fmt);
 ;HEAP8[$3+0|0]=HEAP8[(7936)+0|0]|0;HEAP8[$3+1|0]=HEAP8[(7936)+1|0]|0;HEAP8[$3+2|0]=HEAP8[(7936)+2|0]|0;HEAP8[$3+3|0]=HEAP8[(7936)+3|0]|0;HEAP8[$3+4|0]=HEAP8[(7936)+4|0]|0;HEAP8[$3+5|0]=HEAP8[(7936)+5|0]|0;
 $4 = ($__nar);
 $5 = HEAP8[(9032)]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire(((9032)|0))|0);
   $8 = ($7|0)==(0);
   if ($8) {
    break;
   }
   __THREW__ = 0;
   $9 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $12 = ___cxa_find_matching_catch(-1,-1)|0;
    $13 = tempRet0;
    ___cxa_guard_abort(((9032)|0));
    ___resumeException($12|0);
    // unreachable;
   } else {
    HEAP32[(9024)>>2] = $9;
    ___cxa_guard_release(((9032)|0));
    break;
   }
  }
 } while(0);
 $14 = HEAP32[(9024)>>2]|0;
 $vararg_ptr = ($vararg_buffer);
 HEAP32[$vararg_ptr>>2] = $__v;
 $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($4,20,$14,$3,$vararg_buffer)|0);
 $16 = (($__nar) + ($15)|0);
 $17 = (($__iob) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 & 176;
 do {
  if ((($19|0) == 16)) {
   $20 = HEAP8[$4]|0;
   if ((($20<<24>>24) == 43) | (($20<<24>>24) == 45)) {
    $21 = (($__nar) + 1|0);
    $$0$i = $21;
    break;
   }
   $22 = ($15|0)>(1);
   $23 = ($20<<24>>24)==(48);
   $or$cond$i = $22 & $23;
   if (!($or$cond$i)) {
    label = 12;
    break;
   }
   $24 = (($__nar) + 1|0);
   $25 = HEAP8[$24]|0;
   if (!((($25<<24>>24) == 88) | (($25<<24>>24) == 120))) {
    label = 12;
    break;
   }
   $26 = (($__nar) + 2|0);
   $$0$i = $26;
  } else if ((($19|0) == 32)) {
   $$0$i = $16;
  } else {
   label = 12;
  }
 } while(0);
 if ((label|0) == 12) {
  $$0$i = $4;
 }
 $27 = ($__o);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $28 = ($1);
 $29 = HEAP32[$28>>2]|0;
 $30 = $__p$i$i$i$i;
 $31 = HEAP32[((9136))>>2]|0;
 $32 = ($31|0)==(-1);
 do {
  if (!($32)) {
   $33 = ($__p$i$i$i$i);
   HEAP32[$33>>2] = (9136);
   $34 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$34>>2] = (183);
   $35 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$35>>2] = 0;
   __THREW__ = 0;
   invoke_viii(25,(((9136))|0),($30|0),(184|0));
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if (!($37)) {
    break;
   }
   $65 = ___cxa_find_matching_catch(-1,-1)|0;
   $66 = tempRet0;
   $67 = HEAP32[$28>>2]|0;
   $68 = ($67);
   (__ZNSt3__114__shared_count16__release_sharedEv($68)|0);
   ___resumeException($65|0);
   // unreachable;
  }
 } while(0);
 $38 = HEAP32[(((9136) + 4|0))>>2]|0;
 $39 = (($38) + -1)|0;
 $40 = (($29) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($29) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $41;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = $46 >> 2;
 $48 = ($47>>>0)>($39>>>0);
 do {
  if ($48) {
   $49 = (($43) + ($39<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)==(0|0);
   if ($51) {
    break;
   }
   $56 = $50;
   $57 = HEAP32[$28>>2]|0;
   $58 = ($57);
   (__ZNSt3__114__shared_count16__release_sharedEv($58)|0);
   $59 = $50;
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + 32|0);
   $62 = HEAP32[$61>>2]|0;
   (FUNCTION_TABLE_iiiii[$62 & 31]($56,$4,$16,$27)|0);
   $63 = (($__o) + ($15)|0);
   $64 = ($$0$i|0)==($16|0);
   if ($64) {
    $__op$0 = $63;
    $73 = ($__s);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($2);
    HEAP32[$75>>2] = $74;
    $76 = $$byval_copy;
    $77 = $$byval_copy;
    $78 = $2;
    ;HEAP32[$77+0>>2]=HEAP32[$78+0>>2]|0;
    __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$27,$__op$0,$63,$__iob,$__fl);
    $79 = $$byval_copy;
    STACKTOP = sp;return;
   }
   $69 = $__nar;
   $70 = $$0$i;
   $71 = (($70) - ($69))|0;
   $72 = (($__o) + ($71)|0);
   $__op$0 = $72;
   $73 = ($__s);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($2);
   HEAP32[$75>>2] = $74;
   $76 = $$byval_copy;
   $77 = $$byval_copy;
   $78 = $2;
   ;HEAP32[$77+0>>2]=HEAP32[$78+0>>2]|0;
   __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$27,$__op$0,$63,$__iob,$__fl);
   $79 = $$byval_copy;
   STACKTOP = sp;return;
  }
 } while(0);
 $52 = (___cxa_allocate_exception(4)|0);
 $53 = $52;
 __ZNSt8bad_castC2Ev($53);
 __THREW__ = 0;
 invoke_viii(12,($52|0),((17096)|0),((143)|0));
 $54 = __THREW__; __THREW__ = 0;
 $55 = $54&1;
 if ($55) {
  $65 = ___cxa_find_matching_catch(-1,-1)|0;
  $66 = tempRet0;
  $67 = HEAP32[$28>>2]|0;
  $68 = ($67);
  (__ZNSt3__114__shared_count16__release_sharedEv($68)|0);
  ___resumeException($65|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $$pre4 = 0, $$pre5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__nm = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 56|0;
 $$byval_copy = sp;
 $__p$i$i$i$i = sp + 8|0;
 $1 = sp + 24|0;
 $2 = sp + 32|0;
 $__nm = sp + 40|0;
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  $7 = $this;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($__s);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($1);
  HEAP32[$13>>2] = $12;
  $14 = $__v&1;
  $15 = $$byval_copy;
  $16 = $$byval_copy;
  $17 = $1;
  ;HEAP32[$16+0>>2]=HEAP32[$17+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$10 & 31]($agg$result,$this,$$byval_copy,$__iob,$__fl,$14);
  $18 = $$byval_copy;
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 $19 = ($2);
 $20 = HEAP32[$19>>2]|0;
 $21 = $__p$i$i$i$i;
 $22 = HEAP32[((9288))>>2]|0;
 $23 = ($22|0)==(-1);
 if ($23) {
  label = 5;
 } else {
  $24 = ($__p$i$i$i$i);
  HEAP32[$24>>2] = (9288);
  $25 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$25>>2] = (183);
  $26 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$26>>2] = 0;
  __THREW__ = 0;
  invoke_viii(25,(((9288))|0),($21|0),(184|0));
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if (!($28)) {
   label = 5;
  }
 }
 do {
  if ((label|0) == 5) {
   $29 = HEAP32[(((9288) + 4|0))>>2]|0;
   $30 = (($29) + -1)|0;
   $31 = (($20) + 12|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($20) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $32;
   $36 = $34;
   $37 = (($35) - ($36))|0;
   $38 = $37 >> 2;
   $39 = ($38>>>0)>($30>>>0);
   do {
    if ($39) {
     $40 = (($34) + ($30<<2)|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==(0|0);
     if ($42) {
      break;
     }
     $47 = $41;
     $48 = HEAP32[$19>>2]|0;
     $49 = ($48);
     (__ZNSt3__114__shared_count16__release_sharedEv($49)|0);
     $50 = $41;
     $51 = HEAP32[$50>>2]|0;
     if ($__v) {
      $52 = (($51) + 24|0);
      $53 = HEAP32[$52>>2]|0;
      FUNCTION_TABLE_vii[$53 & 127]($__nm,$47);
     } else {
      $54 = (($51) + 28|0);
      $55 = HEAP32[$54>>2]|0;
      FUNCTION_TABLE_vii[$55 & 127]($__nm,$47);
     }
     $56 = $__nm;
     $57 = HEAP8[$56]|0;
     $58 = $57 & 1;
     $59 = ($58<<24>>24)==(0);
     if ($59) {
      $62 = (($__nm) + 4|0);
      $$pre5 = (($__nm) + 8|0);
      $$ph = $62;$$pre$phi6Z2D = $$pre5;$$pre$phiZ2D = $62;
     } else {
      $60 = (($__nm) + 8|0);
      $61 = HEAP32[$60>>2]|0;
      $$pre4 = (($__nm) + 4|0);
      $$ph = $61;$$pre$phi6Z2D = $60;$$pre$phiZ2D = $$pre4;
     }
     $63 = ($__s);
     $64 = $57;$65 = $$ph;
     L20: while(1) {
      $66 = $64 & 1;
      $67 = ($66<<24>>24)==(0);
      if ($67) {
       $70 = $64&255;
       $71 = $70 >>> 1;
       $72 = $$pre$phiZ2D;$73 = $71;
      } else {
       $68 = HEAP32[$$pre$phi6Z2D>>2]|0;
       $69 = HEAP32[$$pre$phiZ2D>>2]|0;
       $72 = $68;$73 = $69;
      }
      $74 = (($72) + ($73<<2)|0);
      $75 = ($65|0)==($74|0);
      if ($75) {
       label = 29;
       break;
      }
      $76 = HEAP32[$65>>2]|0;
      $77 = HEAP32[$63>>2]|0;
      $78 = ($77|0)==(0|0);
      do {
       if (!($78)) {
        $79 = (($77) + 24|0);
        $80 = HEAP32[$79>>2]|0;
        $81 = (($77) + 28|0);
        $82 = HEAP32[$81>>2]|0;
        $83 = ($80|0)==($82|0);
        if ($83) {
         $84 = $77;
         $85 = HEAP32[$84>>2]|0;
         $86 = (($85) + 52|0);
         $87 = HEAP32[$86>>2]|0;
         __THREW__ = 0;
         $88 = (invoke_iii($87|0,($77|0),($76|0))|0);
         $89 = __THREW__; __THREW__ = 0;
         $90 = $89&1;
         if ($90) {
          label = 28;
          break L20;
         } else {
          $$0$i$i = $88;
         }
        } else {
         $91 = (($80) + 4|0);
         HEAP32[$79>>2] = $91;
         HEAP32[$80>>2] = $76;
         $$0$i$i = $76;
        }
        $92 = ($$0$i$i|0)==(-1);
        if (!($92)) {
         break;
        }
        HEAP32[$63>>2] = 0;
       }
      } while(0);
      $93 = (($65) + 4|0);
      $$pre = HEAP8[$56]|0;
      $64 = $$pre;$65 = $93;
     }
     if ((label|0) == 28) {
      $98 = ___cxa_find_matching_catch(-1,-1)|0;
      $99 = tempRet0;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
      $$0 = $98;$$01 = $99;
      ___resumeException($$0|0);
      // unreachable;
     }
     else if ((label|0) == 29) {
      $100 = HEAP32[$63>>2]|0;
      $101 = ($agg$result);
      HEAP32[$101>>2] = $100;
      __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
      STACKTOP = sp;return;
     }
    }
   } while(0);
   $43 = (___cxa_allocate_exception(4)|0);
   $44 = $43;
   __ZNSt8bad_castC2Ev($44);
   __THREW__ = 0;
   invoke_viii(12,($43|0),((17096)|0),((143)|0));
   $45 = __THREW__; __THREW__ = 0;
   $46 = $45&1;
   if ($46) {
    break;
   }
   // unreachable;
  }
 } while(0);
 $94 = ___cxa_find_matching_catch(-1,-1)|0;
 $95 = tempRet0;
 $96 = HEAP32[$19>>2]|0;
 $97 = ($96);
 (__ZNSt3__114__shared_count16__release_sharedEv($97)|0);
 $$0 = $94;$$01 = $95;
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer = sp + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 88|0;
 $__op = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__oe = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $2 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $3 = ($__fmt);
 ;HEAP8[$3+0|0]=HEAP8[(7928)+0|0]|0;HEAP8[$3+1|0]=HEAP8[(7928)+1|0]|0;HEAP8[$3+2|0]=HEAP8[(7928)+2|0]|0;HEAP8[$3+3|0]=HEAP8[(7928)+3|0]|0;HEAP8[$3+4|0]=HEAP8[(7928)+4|0]|0;HEAP8[$3+5|0]=HEAP8[(7928)+5|0]|0;
 $4 = (($__fmt) + 1|0);
 $5 = (($__iob) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 2048;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0$i = $4;
 } else {
  $9 = (($__fmt) + 2|0);
  HEAP8[$4] = 43;
  $$0$i = $9;
 }
 $10 = $6 & 512;
 $11 = ($10|0)==(0);
 if ($11) {
  $$13$i$ph = $$0$i;
 } else {
  $12 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $12;
 }
 HEAP8[$$13$i$ph] = 108;
 $scevgep = (($$13$i$ph) + 1|0);
 $13 = $6 & 74;
 do {
  if ((($13|0) == 8)) {
   $14 = $6 & 16384;
   $15 = ($14|0)==(0);
   if ($15) {
    HEAP8[$scevgep] = 120;
    break;
   } else {
    HEAP8[$scevgep] = 88;
    break;
   }
  } else if ((($13|0) == 64)) {
   HEAP8[$scevgep] = 111;
  } else {
   HEAP8[$scevgep] = 100;
  }
 } while(0);
 $16 = ($__nar);
 $17 = HEAP8[(9032)]|0;
 $18 = ($17<<24>>24)==(0);
 do {
  if ($18) {
   $19 = (___cxa_guard_acquire(((9032)|0))|0);
   $20 = ($19|0)==(0);
   if ($20) {
    break;
   }
   __THREW__ = 0;
   $21 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $24 = ___cxa_find_matching_catch(-1,-1)|0;
    $25 = tempRet0;
    ___cxa_guard_abort(((9032)|0));
    ___resumeException($24|0);
    // unreachable;
   } else {
    HEAP32[(9024)>>2] = $21;
    ___cxa_guard_release(((9032)|0));
    break;
   }
  }
 } while(0);
 $26 = HEAP32[(9024)>>2]|0;
 $vararg_ptr = ($vararg_buffer);
 HEAP32[$vararg_ptr>>2] = $__v;
 $27 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($16,12,$26,$3,$vararg_buffer)|0);
 $28 = (($__nar) + ($27)|0);
 $29 = HEAP32[$5>>2]|0;
 $30 = $29 & 176;
 do {
  if ((($30|0) == 32)) {
   $$0$i1 = $28;
  } else if ((($30|0) == 16)) {
   $31 = HEAP8[$16]|0;
   if ((($31<<24>>24) == 43) | (($31<<24>>24) == 45)) {
    $32 = (($__nar) + 1|0);
    $$0$i1 = $32;
    break;
   }
   $33 = ($27|0)>(1);
   $34 = ($31<<24>>24)==(48);
   $or$cond$i = $33 & $34;
   if (!($or$cond$i)) {
    label = 22;
    break;
   }
   $35 = (($__nar) + 1|0);
   $36 = HEAP8[$35]|0;
   if (!((($36<<24>>24) == 88) | (($36<<24>>24) == 120))) {
    label = 22;
    break;
   }
   $37 = (($__nar) + 2|0);
   $$0$i1 = $37;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $16;
 }
 $38 = $__o;
 $39 = ($__o);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(44,($16|0),($$0$i1|0),($28|0),($39|0),($__op|0),($__oe|0),($1|0));
 $40 = __THREW__; __THREW__ = 0;
 $41 = $40&1;
 if ($41) {
  $54 = ___cxa_find_matching_catch(-1,-1)|0;
  $55 = tempRet0;
  $56 = ($1);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57);
  (__ZNSt3__114__shared_count16__release_sharedEv($58)|0);
  ___resumeException($54|0);
  // unreachable;
 } else {
  $42 = ($1);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43);
  (__ZNSt3__114__shared_count16__release_sharedEv($44)|0);
  $45 = ($__s);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($2);
  HEAP32[$47>>2] = $46;
  $48 = HEAP32[$__op>>2]|0;
  $49 = HEAP32[$__oe>>2]|0;
  $50 = $$byval_copy;
  $51 = $$byval_copy;
  $52 = $2;
  ;HEAP32[$51+0>>2]=HEAP32[$52+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$39,$48,$49,$__iob,$__fl);
  $53 = $$byval_copy;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i$phi = 0, $$012$i$i10 = 0, $$012$i$i10$phi = 0, $$15 = 0, $$__dg$0 = 0, $$pre = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $119$phi = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $182$phi = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__dc$012 = 0, $__dc$1 = 0, $__dg$013 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$014 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $__p$i$i$i$i1 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $__grouping = sp + 32|0;
 $1 = ($__loc);
 $2 = HEAP32[$1>>2]|0;
 $3 = $__p$i$i$i$i;
 $4 = HEAP32[((9128))>>2]|0;
 $5 = ($4|0)==(-1);
 if (!($5)) {
  $6 = ($__p$i$i$i$i);
  HEAP32[$6>>2] = (9128);
  $7 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$7>>2] = (183);
  $8 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$8>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(((9128)),$3,184);
 }
 $9 = HEAP32[(((9128) + 4|0))>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = (($2) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($2) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 if (!($19)) {
  $23 = (___cxa_allocate_exception(4)|0);
  $24 = $23;
  __ZNSt8bad_castC2Ev($24);
  ___cxa_throw(($23|0),((17096)|0),((143)|0));
  // unreachable;
 }
 $20 = (($14) + ($10<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $23 = (___cxa_allocate_exception(4)|0);
  $24 = $23;
  __ZNSt8bad_castC2Ev($24);
  ___cxa_throw(($23|0),((17096)|0),((143)|0));
  // unreachable;
 }
 $25 = $21;
 $26 = HEAP32[$1>>2]|0;
 $27 = $__p$i$i$i$i1;
 $28 = HEAP32[((9288))>>2]|0;
 $29 = ($28|0)==(-1);
 if (!($29)) {
  $30 = ($__p$i$i$i$i1);
  HEAP32[$30>>2] = (9288);
  $31 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$31>>2] = (183);
  $32 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$32>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(((9288)),$27,184);
 }
 $33 = HEAP32[(((9288) + 4|0))>>2]|0;
 $34 = (($33) + -1)|0;
 $35 = (($26) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($26) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $36;
 $40 = $38;
 $41 = (($39) - ($40))|0;
 $42 = $41 >> 2;
 $43 = ($42>>>0)>($34>>>0);
 if (!($43)) {
  $47 = (___cxa_allocate_exception(4)|0);
  $48 = $47;
  __ZNSt8bad_castC2Ev($48);
  ___cxa_throw(($47|0),((17096)|0),((143)|0));
  // unreachable;
 }
 $44 = (($38) + ($34<<2)|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0|0);
 if ($46) {
  $47 = (___cxa_allocate_exception(4)|0);
  $48 = $47;
  __ZNSt8bad_castC2Ev($48);
  ___cxa_throw(($47|0),((17096)|0),((143)|0));
  // unreachable;
 }
 $49 = $45;
 $50 = $45;
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + 20|0);
 $53 = HEAP32[$52>>2]|0;
 FUNCTION_TABLE_vii[$53 & 127]($__grouping,$49);
 $54 = $__grouping;
 $55 = HEAP8[$54]|0;
 $56 = $55 & 1;
 $57 = ($56<<24>>24)==(0);
 if ($57) {
  $60 = $55&255;
  $61 = $60 >>> 1;
  $62 = $61;
 } else {
  $58 = (($__grouping) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $62 = $59;
 }
 $63 = ($62|0)==(0);
 L23: do {
  if ($63) {
   $64 = $21;
   $65 = HEAP32[$64>>2]|0;
   $66 = (($65) + 48|0);
   $67 = HEAP32[$66>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($67|0,($25|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $68 = __THREW__; __THREW__ = 0;
   $69 = $68&1;
   if ($69) {
    label = 18;
    break;
   }
   $70 = $__ne;
   $71 = $__nb;
   $72 = (($70) - ($71))|0;
   $73 = (($__ob) + ($72<<2)|0);
   HEAP32[$__oe>>2] = $73;
   $188 = $73;
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $78 = HEAP8[$__nb]|0;
   if ((($78<<24>>24) == 43) | (($78<<24>>24) == 45)) {
    $79 = $21;
    $80 = HEAP32[$79>>2]|0;
    $81 = (($80) + 44|0);
    $82 = HEAP32[$81>>2]|0;
    __THREW__ = 0;
    $83 = (invoke_iii($82|0,($25|0),($78|0))|0);
    $84 = __THREW__; __THREW__ = 0;
    $85 = $84&1;
    if ($85) {
     label = 18;
     break;
    }
    $86 = (($__nb) + 1|0);
    $87 = HEAP32[$__oe>>2]|0;
    $88 = (($87) + 4|0);
    HEAP32[$__oe>>2] = $88;
    HEAP32[$87>>2] = $83;
    $__nf$0 = $86;
   } else {
    $__nf$0 = $__nb;
   }
   $89 = $__ne;
   $90 = $__nf$0;
   $91 = (($89) - ($90))|0;
   $92 = ($91|0)>(1);
   do {
    if ($92) {
     $93 = HEAP8[$__nf$0]|0;
     $94 = ($93<<24>>24)==(48);
     if (!($94)) {
      $__nf$1 = $__nf$0;
      break;
     }
     $95 = (($__nf$0) + 1|0);
     $96 = HEAP8[$95]|0;
     if (!((($96<<24>>24) == 88) | (($96<<24>>24) == 120))) {
      $__nf$1 = $__nf$0;
      break;
     }
     $97 = $21;
     $98 = HEAP32[$97>>2]|0;
     $99 = (($98) + 44|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     $101 = (invoke_iii($100|0,($25|0),48)|0);
     $102 = __THREW__; __THREW__ = 0;
     $103 = $102&1;
     if ($103) {
      label = 18;
      break L23;
     }
     $104 = HEAP32[$__oe>>2]|0;
     $105 = (($104) + 4|0);
     HEAP32[$__oe>>2] = $105;
     HEAP32[$104>>2] = $101;
     $106 = HEAP8[$95]|0;
     $107 = HEAP32[$97>>2]|0;
     $108 = (($107) + 44|0);
     $109 = HEAP32[$108>>2]|0;
     __THREW__ = 0;
     $110 = (invoke_iii($109|0,($25|0),($106|0))|0);
     $111 = __THREW__; __THREW__ = 0;
     $112 = $111&1;
     if ($112) {
      label = 18;
      break L23;
     }
     $113 = (($__nf$0) + 2|0);
     $114 = HEAP32[$__oe>>2]|0;
     $115 = (($114) + 4|0);
     HEAP32[$__oe>>2] = $115;
     HEAP32[$114>>2] = $110;
     $__nf$1 = $113;
    } else {
     $__nf$1 = $__nf$0;
    }
   } while(0);
   $116 = ($__nf$1|0)==($__ne|0);
   do {
    if (!($116)) {
     $117 = (($__ne) + -1|0);
     $118 = ($117>>>0)>($__nf$1>>>0);
     if ($118) {
      $$012$i$i = $__nf$1;$119 = $117;
     } else {
      break;
     }
     while(1) {
      $120 = HEAP8[$$012$i$i]|0;
      $121 = HEAP8[$119]|0;
      HEAP8[$$012$i$i] = $121;
      HEAP8[$119] = $120;
      $122 = (($$012$i$i) + 1|0);
      $123 = (($119) + -1|0);
      $124 = ($122>>>0)<($123>>>0);
      if ($124) {
       $119$phi = $123;$$012$i$i$phi = $122;$119 = $119$phi;$$012$i$i = $$012$i$i$phi;
      } else {
       break;
      }
     }
    }
   } while(0);
   $125 = $45;
   $126 = HEAP32[$125>>2]|0;
   $127 = (($126) + 16|0);
   $128 = HEAP32[$127>>2]|0;
   __THREW__ = 0;
   $129 = (invoke_ii($128|0,($49|0))|0);
   $130 = __THREW__; __THREW__ = 0;
   $131 = $130&1;
   if ($131) {
    label = 18;
    break;
   }
   $132 = ($__nf$1>>>0)<($__ne>>>0);
   L42: do {
    if ($132) {
     $133 = $__grouping;
     $134 = (($133) + 1|0);
     $135 = $21;
     $136 = (($__grouping) + 4|0);
     $137 = (($__grouping) + 8|0);
     $__dc$012 = 0;$__dg$013 = 0;$__p$014 = $__nf$1;
     while(1) {
      $138 = HEAP8[$54]|0;
      $139 = $138 & 1;
      $140 = ($139<<24>>24)==(0);
      $141 = HEAP32[$137>>2]|0;
      $$ = $140 ? $134 : $141;
      $142 = (($$) + ($__dg$013)|0);
      $143 = HEAP8[$142]|0;
      $144 = ($143<<24>>24)==(0);
      do {
       if ($144) {
        $__dc$1 = $__dc$012;$__dg$1 = $__dg$013;
       } else {
        $145 = HEAP32[$137>>2]|0;
        $$15 = $140 ? $134 : $145;
        $146 = (($$15) + ($__dg$013)|0);
        $147 = HEAP8[$146]|0;
        $148 = $147 << 24 >> 24;
        $149 = ($__dc$012|0)==($148|0);
        if (!($149)) {
         $__dc$1 = $__dc$012;$__dg$1 = $__dg$013;
         break;
        }
        $150 = HEAP32[$__oe>>2]|0;
        $151 = (($150) + 4|0);
        HEAP32[$__oe>>2] = $151;
        HEAP32[$150>>2] = $129;
        $152 = HEAP8[$54]|0;
        $153 = $152 & 1;
        $154 = ($153<<24>>24)==(0);
        if ($154) {
         $156 = $152&255;
         $157 = $156 >>> 1;
         $158 = $157;
        } else {
         $155 = HEAP32[$136>>2]|0;
         $158 = $155;
        }
        $159 = (($158) + -1)|0;
        $160 = ($__dg$013>>>0)<($159>>>0);
        $161 = $160&1;
        $$__dg$0 = (($161) + ($__dg$013))|0;
        $__dc$1 = 0;$__dg$1 = $$__dg$0;
       }
      } while(0);
      $162 = HEAP8[$__p$014]|0;
      $163 = HEAP32[$135>>2]|0;
      $164 = (($163) + 44|0);
      $165 = HEAP32[$164>>2]|0;
      __THREW__ = 0;
      $166 = (invoke_iii($165|0,($25|0),($162|0))|0);
      $167 = __THREW__; __THREW__ = 0;
      $168 = $167&1;
      if ($168) {
       break;
      }
      $169 = HEAP32[$__oe>>2]|0;
      $170 = (($169) + 4|0);
      HEAP32[$__oe>>2] = $170;
      HEAP32[$169>>2] = $166;
      $171 = (($__dc$1) + 1)|0;
      $172 = (($__p$014) + 1|0);
      $173 = ($172>>>0)<($__ne>>>0);
      if ($173) {
       $__dc$012 = $171;$__dg$013 = $__dg$1;$__p$014 = $172;
      } else {
       $174 = $170;
       break L42;
      }
     }
     $74 = ___cxa_find_matching_catch(-1,-1)|0;
     $75 = tempRet0;
     $lpad$phi$index = $74;$lpad$phi$index2 = $75;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     ___resumeException($lpad$phi$index|0);
     // unreachable;
    } else {
     $$pre = HEAP32[$__oe>>2]|0;
     $174 = $$pre;
    }
   } while(0);
   $175 = $__nf$1;
   $176 = $__nb;
   $177 = (($175) - ($176))|0;
   $178 = (($__ob) + ($177<<2)|0);
   $179 = ($178|0)==($174|0);
   if ($179) {
    $188 = $174;
    break;
   }
   $180 = (($174) + -4|0);
   $181 = ($180>>>0)>($178>>>0);
   if ($181) {
    $$012$i$i10 = $178;$182 = $180;
   } else {
    $188 = $174;
    break;
   }
   while(1) {
    $183 = HEAP32[$$012$i$i10>>2]|0;
    $184 = HEAP32[$182>>2]|0;
    HEAP32[$$012$i$i10>>2] = $184;
    HEAP32[$182>>2] = $183;
    $185 = (($$012$i$i10) + 4|0);
    $186 = (($182) + -4|0);
    $187 = ($185>>>0)<($186>>>0);
    if ($187) {
     $182$phi = $186;$$012$i$i10$phi = $185;$182 = $182$phi;$$012$i$i10 = $$012$i$i10$phi;
    } else {
     $188 = $174;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 18) {
  $76 = ___cxa_find_matching_catch(-1,-1)|0;
  $77 = tempRet0;
  $lpad$phi$index = $76;$lpad$phi$index2 = $77;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $189 = ($__np|0)==($__ne|0);
 if ($189) {
  $storemerge = $188;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
 $190 = $__np;
 $191 = $__nb;
 $192 = (($190) - ($191))|0;
 $193 = (($__ob) + ($192<<2)|0);
 $storemerge = $193;
 HEAP32[$__op>>2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__sp = sp;
 $1 = ($__s);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = ($agg$result);
  HEAP32[$4>>2] = 0;
  STACKTOP = sp;return;
 }
 $5 = $__oe;
 $6 = $__ob;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 2;
 $9 = (($__iob) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)>($8|0);
 $12 = (($10) - ($8))|0;
 $__ns$0 = $11 ? $12 : 0;
 $13 = $__op;
 $14 = (($13) - ($6))|0;
 $15 = $14 >> 2;
 $16 = ($14|0)>(0);
 do {
  if ($16) {
   $17 = $2;
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 63]($2,$__ob,$15)|0);
   $22 = ($21|0)==($15|0);
   if ($22) {
    break;
   }
   HEAP32[$1>>2] = 0;
   $23 = ($agg$result);
   HEAP32[$23>>2] = 0;
   STACKTOP = sp;return;
  }
 } while(0);
 $24 = ($__ns$0|0)>(0);
 do {
  if ($24) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns$0,$__fl);
   $25 = $__sp;
   $26 = HEAP8[$25]|0;
   $27 = $26 & 1;
   $28 = ($27<<24>>24)==(0);
   if ($28) {
    $31 = (($__sp) + 4|0);
    $32 = $31;
   } else {
    $29 = (($__sp) + 8|0);
    $30 = HEAP32[$29>>2]|0;
    $32 = $30;
   }
   $33 = $2;
   $34 = HEAP32[$33>>2]|0;
   $35 = (($34) + 48|0);
   $36 = HEAP32[$35>>2]|0;
   __THREW__ = 0;
   $37 = (invoke_iiii($36|0,($2|0),($32|0),($__ns$0|0))|0);
   $38 = __THREW__; __THREW__ = 0;
   $39 = $38&1;
   if ($39) {
    $42 = ___cxa_find_matching_catch(-1,-1)|0;
    $43 = tempRet0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
    ___resumeException($42|0);
    // unreachable;
   }
   $40 = ($37|0)==($__ns$0|0);
   if ($40) {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
    break;
   }
   HEAP32[$1>>2] = 0;
   $41 = ($agg$result);
   HEAP32[$41>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
   STACKTOP = sp;return;
  }
 } while(0);
 $44 = (($5) - ($13))|0;
 $45 = $44 >> 2;
 $46 = ($44|0)>(0);
 do {
  if ($46) {
   $47 = $2;
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + 48|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (FUNCTION_TABLE_iiii[$50 & 63]($2,$__op,$45)|0);
   $52 = ($51|0)==($45|0);
   if ($52) {
    break;
   }
   HEAP32[$1>>2] = 0;
   $53 = ($agg$result);
   HEAP32[$53>>2] = 0;
   STACKTOP = sp;return;
  }
 } while(0);
 HEAP32[$9>>2] = 0;
 $54 = ($agg$result);
 HEAP32[$54>>2] = $2;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg$result,$this,$__s,$__iob,$__fl,$1,$2) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $lftr$limit = 0, $or$cond$i = 0, $vararg_buffer = 0, $vararg_lifetime_bitcast = 0;
 var $vararg_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer = sp + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 24|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 168|0;
 $__op = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__oe = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $3 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $4 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $5 = $__fmt;
 $6 = $5;
 HEAP32[$6>>2] = 37;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = $__fmt;
 $10 = (($9) + 1|0);
 $11 = (($__iob) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 2048;
 $14 = ($13|0)==(0);
 if ($14) {
  $$0$i = $10;
 } else {
  $15 = (($9) + 2|0);
  HEAP8[$10] = 43;
  $$0$i = $15;
 }
 $16 = $12 & 512;
 $17 = ($16|0)==(0);
 if ($17) {
  $$13$i$ph = $$0$i;
 } else {
  $18 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $18;
 }
 $lftr$limit = (($$13$i$ph) + 2|0);
 $19 = (($$13$i$ph) + 1|0);
 HEAP8[$$13$i$ph] = 108;
 HEAP8[$19] = 108;
 $20 = $12 & 74;
 do {
  if ((($20|0) == 8)) {
   $21 = $12 & 16384;
   $22 = ($21|0)==(0);
   if ($22) {
    HEAP8[$lftr$limit] = 120;
    break;
   } else {
    HEAP8[$lftr$limit] = 88;
    break;
   }
  } else if ((($20|0) == 64)) {
   HEAP8[$lftr$limit] = 111;
  } else {
   HEAP8[$lftr$limit] = 100;
  }
 } while(0);
 $23 = ($__nar);
 $24 = HEAP8[(9032)]|0;
 $25 = ($24<<24>>24)==(0);
 do {
  if ($25) {
   $26 = (___cxa_guard_acquire(((9032)|0))|0);
   $27 = ($26|0)==(0);
   if ($27) {
    break;
   }
   __THREW__ = 0;
   $28 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if ($30) {
    $31 = ___cxa_find_matching_catch(-1,-1)|0;
    $32 = tempRet0;
    ___cxa_guard_abort(((9032)|0));
    ___resumeException($31|0);
    // unreachable;
   } else {
    HEAP32[(9024)>>2] = $28;
    ___cxa_guard_release(((9032)|0));
    break;
   }
  }
 } while(0);
 $33 = HEAP32[(9024)>>2]|0;
 $vararg_ptr = ($vararg_buffer);
 $34 = $vararg_ptr;
 $35 = $34;
 HEAP32[$35>>2] = $1;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $2;
 $38 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($23,22,$33,$9,$vararg_buffer)|0);
 $39 = (($__nar) + ($38)|0);
 $40 = HEAP32[$11>>2]|0;
 $41 = $40 & 176;
 do {
  if ((($41|0) == 16)) {
   $42 = HEAP8[$23]|0;
   if ((($42<<24>>24) == 43) | (($42<<24>>24) == 45)) {
    $43 = (($__nar) + 1|0);
    $$0$i1 = $43;
    break;
   }
   $44 = ($38|0)>(1);
   $45 = ($42<<24>>24)==(48);
   $or$cond$i = $44 & $45;
   if (!($or$cond$i)) {
    label = 22;
    break;
   }
   $46 = (($__nar) + 1|0);
   $47 = HEAP8[$46]|0;
   if (!((($47<<24>>24) == 88) | (($47<<24>>24) == 120))) {
    label = 22;
    break;
   }
   $48 = (($__nar) + 2|0);
   $$0$i1 = $48;
  } else if ((($41|0) == 32)) {
   $$0$i1 = $39;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $23;
 }
 $49 = $__o;
 $50 = ($__o);
 __ZNKSt3__18ios_base6getlocEv($3,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(44,($23|0),($$0$i1|0),($39|0),($50|0),($__op|0),($__oe|0),($3|0));
 $51 = __THREW__; __THREW__ = 0;
 $52 = $51&1;
 if ($52) {
  $65 = ___cxa_find_matching_catch(-1,-1)|0;
  $66 = tempRet0;
  $67 = ($3);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($68);
  (__ZNSt3__114__shared_count16__release_sharedEv($69)|0);
  ___resumeException($65|0);
  // unreachable;
 } else {
  $53 = ($3);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54);
  (__ZNSt3__114__shared_count16__release_sharedEv($55)|0);
  $56 = ($__s);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($4);
  HEAP32[$58>>2] = $57;
  $59 = HEAP32[$__op>>2]|0;
  $60 = HEAP32[$__oe>>2]|0;
  $61 = $$byval_copy;
  $62 = $$byval_copy;
  $63 = $4;
  ;HEAP32[$62+0>>2]=HEAP32[$63+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$50,$59,$60,$__iob,$__fl);
  $64 = $$byval_copy;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $or$cond$i = 0, $scevgep = 0, $vararg_buffer = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer = sp + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 88|0;
 $__op = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__oe = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $2 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $3 = ($__fmt);
 ;HEAP8[$3+0|0]=HEAP8[(7928)+0|0]|0;HEAP8[$3+1|0]=HEAP8[(7928)+1|0]|0;HEAP8[$3+2|0]=HEAP8[(7928)+2|0]|0;HEAP8[$3+3|0]=HEAP8[(7928)+3|0]|0;HEAP8[$3+4|0]=HEAP8[(7928)+4|0]|0;HEAP8[$3+5|0]=HEAP8[(7928)+5|0]|0;
 $4 = (($__fmt) + 1|0);
 $5 = (($__iob) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 2048;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0$i = $4;
 } else {
  $9 = (($__fmt) + 2|0);
  HEAP8[$4] = 43;
  $$0$i = $9;
 }
 $10 = $6 & 512;
 $11 = ($10|0)==(0);
 if ($11) {
  $$13$i$ph = $$0$i;
 } else {
  $12 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $12;
 }
 HEAP8[$$13$i$ph] = 108;
 $scevgep = (($$13$i$ph) + 1|0);
 $13 = $6 & 74;
 do {
  if ((($13|0) == 8)) {
   $14 = $6 & 16384;
   $15 = ($14|0)==(0);
   if ($15) {
    HEAP8[$scevgep] = 120;
    break;
   } else {
    HEAP8[$scevgep] = 88;
    break;
   }
  } else if ((($13|0) == 64)) {
   HEAP8[$scevgep] = 111;
  } else {
   HEAP8[$scevgep] = 117;
  }
 } while(0);
 $16 = ($__nar);
 $17 = HEAP8[(9032)]|0;
 $18 = ($17<<24>>24)==(0);
 do {
  if ($18) {
   $19 = (___cxa_guard_acquire(((9032)|0))|0);
   $20 = ($19|0)==(0);
   if ($20) {
    break;
   }
   __THREW__ = 0;
   $21 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $24 = ___cxa_find_matching_catch(-1,-1)|0;
    $25 = tempRet0;
    ___cxa_guard_abort(((9032)|0));
    ___resumeException($24|0);
    // unreachable;
   } else {
    HEAP32[(9024)>>2] = $21;
    ___cxa_guard_release(((9032)|0));
    break;
   }
  }
 } while(0);
 $26 = HEAP32[(9024)>>2]|0;
 $vararg_ptr = ($vararg_buffer);
 HEAP32[$vararg_ptr>>2] = $__v;
 $27 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($16,12,$26,$3,$vararg_buffer)|0);
 $28 = (($__nar) + ($27)|0);
 $29 = HEAP32[$5>>2]|0;
 $30 = $29 & 176;
 do {
  if ((($30|0) == 16)) {
   $31 = HEAP8[$16]|0;
   if ((($31<<24>>24) == 43) | (($31<<24>>24) == 45)) {
    $32 = (($__nar) + 1|0);
    $$0$i1 = $32;
    break;
   }
   $33 = ($27|0)>(1);
   $34 = ($31<<24>>24)==(48);
   $or$cond$i = $33 & $34;
   if (!($or$cond$i)) {
    label = 22;
    break;
   }
   $35 = (($__nar) + 1|0);
   $36 = HEAP8[$35]|0;
   if (!((($36<<24>>24) == 88) | (($36<<24>>24) == 120))) {
    label = 22;
    break;
   }
   $37 = (($__nar) + 2|0);
   $$0$i1 = $37;
  } else if ((($30|0) == 32)) {
   $$0$i1 = $28;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $16;
 }
 $38 = $__o;
 $39 = ($__o);
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(44,($16|0),($$0$i1|0),($28|0),($39|0),($__op|0),($__oe|0),($1|0));
 $40 = __THREW__; __THREW__ = 0;
 $41 = $40&1;
 if ($41) {
  $54 = ___cxa_find_matching_catch(-1,-1)|0;
  $55 = tempRet0;
  $56 = ($1);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57);
  (__ZNSt3__114__shared_count16__release_sharedEv($58)|0);
  ___resumeException($54|0);
  // unreachable;
 } else {
  $42 = ($1);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43);
  (__ZNSt3__114__shared_count16__release_sharedEv($44)|0);
  $45 = ($__s);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($2);
  HEAP32[$47>>2] = $46;
  $48 = HEAP32[$__op>>2]|0;
  $49 = HEAP32[$__oe>>2]|0;
  $50 = $$byval_copy;
  $51 = $$byval_copy;
  $52 = $2;
  ;HEAP32[$51+0>>2]=HEAP32[$52+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$39,$48,$49,$__iob,$__fl);
  $53 = $$byval_copy;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg$result,$this,$__s,$__iob,$__fl,$1,$2) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$0$i1 = 0, $$13$i$ph = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $lftr$limit = 0, $or$cond$i = 0, $vararg_buffer = 0, $vararg_lifetime_bitcast = 0;
 var $vararg_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer = sp + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 24|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 176|0;
 $__op = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__oe = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $3 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $4 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $5 = $__fmt;
 $6 = $5;
 HEAP32[$6>>2] = 37;
 $7 = (($5) + 4)|0;
 $8 = $7;
 HEAP32[$8>>2] = 0;
 $9 = $__fmt;
 $10 = (($9) + 1|0);
 $11 = (($__iob) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 2048;
 $14 = ($13|0)==(0);
 if ($14) {
  $$0$i = $10;
 } else {
  $15 = (($9) + 2|0);
  HEAP8[$10] = 43;
  $$0$i = $15;
 }
 $16 = $12 & 512;
 $17 = ($16|0)==(0);
 if ($17) {
  $$13$i$ph = $$0$i;
 } else {
  $18 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$13$i$ph = $18;
 }
 $lftr$limit = (($$13$i$ph) + 2|0);
 $19 = (($$13$i$ph) + 1|0);
 HEAP8[$$13$i$ph] = 108;
 HEAP8[$19] = 108;
 $20 = $12 & 74;
 do {
  if ((($20|0) == 64)) {
   HEAP8[$lftr$limit] = 111;
  } else if ((($20|0) == 8)) {
   $21 = $12 & 16384;
   $22 = ($21|0)==(0);
   if ($22) {
    HEAP8[$lftr$limit] = 120;
    break;
   } else {
    HEAP8[$lftr$limit] = 88;
    break;
   }
  } else {
   HEAP8[$lftr$limit] = 117;
  }
 } while(0);
 $23 = ($__nar);
 $24 = HEAP8[(9032)]|0;
 $25 = ($24<<24>>24)==(0);
 do {
  if ($25) {
   $26 = (___cxa_guard_acquire(((9032)|0))|0);
   $27 = ($26|0)==(0);
   if ($27) {
    break;
   }
   __THREW__ = 0;
   $28 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if ($30) {
    $31 = ___cxa_find_matching_catch(-1,-1)|0;
    $32 = tempRet0;
    ___cxa_guard_abort(((9032)|0));
    ___resumeException($31|0);
    // unreachable;
   } else {
    HEAP32[(9024)>>2] = $28;
    ___cxa_guard_release(((9032)|0));
    break;
   }
  }
 } while(0);
 $33 = HEAP32[(9024)>>2]|0;
 $vararg_ptr = ($vararg_buffer);
 $34 = $vararg_ptr;
 $35 = $34;
 HEAP32[$35>>2] = $1;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $2;
 $38 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($23,23,$33,$9,$vararg_buffer)|0);
 $39 = (($__nar) + ($38)|0);
 $40 = HEAP32[$11>>2]|0;
 $41 = $40 & 176;
 do {
  if ((($41|0) == 16)) {
   $42 = HEAP8[$23]|0;
   if ((($42<<24>>24) == 43) | (($42<<24>>24) == 45)) {
    $43 = (($__nar) + 1|0);
    $$0$i1 = $43;
    break;
   }
   $44 = ($38|0)>(1);
   $45 = ($42<<24>>24)==(48);
   $or$cond$i = $44 & $45;
   if (!($or$cond$i)) {
    label = 22;
    break;
   }
   $46 = (($__nar) + 1|0);
   $47 = HEAP8[$46]|0;
   if (!((($47<<24>>24) == 88) | (($47<<24>>24) == 120))) {
    label = 22;
    break;
   }
   $48 = (($__nar) + 2|0);
   $$0$i1 = $48;
  } else if ((($41|0) == 32)) {
   $$0$i1 = $39;
  } else {
   label = 22;
  }
 } while(0);
 if ((label|0) == 22) {
  $$0$i1 = $23;
 }
 $49 = $__o;
 $50 = ($__o);
 __ZNKSt3__18ios_base6getlocEv($3,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(44,($23|0),($$0$i1|0),($39|0),($50|0),($__op|0),($__oe|0),($3|0));
 $51 = __THREW__; __THREW__ = 0;
 $52 = $51&1;
 if ($52) {
  $65 = ___cxa_find_matching_catch(-1,-1)|0;
  $66 = tempRet0;
  $67 = ($3);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($68);
  (__ZNSt3__114__shared_count16__release_sharedEv($69)|0);
  ___resumeException($65|0);
  // unreachable;
 } else {
  $53 = ($3);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($54);
  (__ZNSt3__114__shared_count16__release_sharedEv($55)|0);
  $56 = ($__s);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($4);
  HEAP32[$58>>2] = $57;
  $59 = HEAP32[$__op>>2]|0;
  $60 = HEAP32[$__oe>>2]|0;
  $61 = $$byval_copy;
  $62 = $$byval_copy;
  $63 = $4;
  ;HEAP32[$62+0>>2]=HEAP32[$63+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$50,$59,$60,$__iob,$__fl);
  $64 = $$byval_copy;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$0$i7 = 0, $$01 = 0, $$1$i = 0, $$116 = 0, $$1215 = 0, $$byval_copy = 0, $$pre = 0, $$pre17 = 0, $$pre18 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0;
 var $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $or$cond$i = 0, $specify_precision$0$off0$ph$i10 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer9 = 0, $vararg_lifetime_bitcast = 0, $vararg_lifetime_bitcast10 = 0, $vararg_lifetime_bitcast13 = 0, $vararg_lifetime_bitcast17 = 0, $vararg_ptr = 0, $vararg_ptr11 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr18 = 0, $vararg_ptr19 = 0, $vararg_ptr8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24|0;
 $$byval_copy = sp;
 $vararg_buffer16 = sp + 8|0;
 $vararg_lifetime_bitcast17 = $vararg_buffer16;
 $vararg_buffer12 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $vararg_lifetime_bitcast13 = $vararg_buffer12;
 $vararg_buffer9 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $vararg_lifetime_bitcast10 = $vararg_buffer9;
 $vararg_buffer = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 32|0;
 $__nb = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 232|0;
 $__op = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__oe = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $2 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $3 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = $__fmt;
 $9 = (($8) + 1|0);
 $10 = (($__iob) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 2048;
 $13 = ($12|0)==(0);
 if ($13) {
  $$0$i = $9;
 } else {
  $14 = (($8) + 2|0);
  HEAP8[$9] = 43;
  $$0$i = $14;
 }
 $15 = $11 & 1024;
 $16 = ($15|0)==(0);
 if ($16) {
  $$1$i = $$0$i;
 } else {
  $17 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$1$i = $17;
 }
 $18 = $11 & 260;
 $19 = $11 >>> 14;
 $20 = ($18|0)==(260);
 do {
  if ($20) {
   $27 = $19 & 1;
   $28 = ($27|0)==(0);
   if ($28) {
    HEAP8[$$1$i] = 97;
    $specify_precision$0$off0$ph$i10 = 0;
    break;
   } else {
    HEAP8[$$1$i] = 65;
    $specify_precision$0$off0$ph$i10 = 0;
    break;
   }
  } else {
   $21 = (($$1$i) + 1|0);
   HEAP8[$$1$i] = 46;
   $22 = (($$1$i) + 2|0);
   HEAP8[$21] = 42;
   if ((($18|0) == 4)) {
    $23 = $19 & 1;
    $24 = ($23|0)==(0);
    if ($24) {
     HEAP8[$22] = 102;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    } else {
     HEAP8[$22] = 70;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    }
   } else if ((($18|0) == 256)) {
    $25 = $19 & 1;
    $26 = ($25|0)==(0);
    if ($26) {
     HEAP8[$22] = 101;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    } else {
     HEAP8[$22] = 69;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    }
   } else {
    $29 = $19 & 1;
    $30 = ($29|0)==(0);
    if ($30) {
     HEAP8[$22] = 103;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    } else {
     HEAP8[$22] = 71;
     $specify_precision$0$off0$ph$i10 = 1;
     break;
    }
   }
  }
 } while(0);
 $31 = ($__nar);
 HEAP32[$__nb>>2] = $31;
 $32 = HEAP8[(9032)]|0;
 $33 = ($32<<24>>24)==(0);
 do {
  if ($33) {
   $34 = (___cxa_guard_acquire(((9032)|0))|0);
   $35 = ($34|0)==(0);
   if ($35) {
    break;
   }
   __THREW__ = 0;
   $36 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   if ($38) {
    $39 = ___cxa_find_matching_catch(-1,-1)|0;
    $40 = tempRet0;
    ___cxa_guard_abort(((9032)|0));
    ___resumeException($39|0);
    // unreachable;
   } else {
    HEAP32[(9024)>>2] = $36;
    ___cxa_guard_release(((9032)|0));
    break;
   }
  }
 } while(0);
 $41 = HEAP32[(9024)>>2]|0;
 if ($specify_precision$0$off0$ph$i10) {
  $42 = (($__iob) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $vararg_ptr = ($vararg_buffer);
  HEAP32[$vararg_ptr>>2] = $43;
  $vararg_ptr8 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $44 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($31,30,$41,$8,$vararg_buffer)|0);
  $__nc$0 = $44;
 } else {
  $vararg_ptr11 = ($vararg_buffer9);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr11>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr11+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $45 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($31,30,$41,$8,$vararg_buffer9)|0);
  $__nc$0 = $45;
 }
 $46 = ($__nc$0|0)>(29);
 L38: do {
  if ($46) {
   $47 = HEAP8[(9032)]|0;
   $48 = ($47<<24>>24)==(0);
   L40: do {
    if ($specify_precision$0$off0$ph$i10) {
     do {
      if ($48) {
       $49 = (___cxa_guard_acquire(((9032)|0))|0);
       $50 = ($49|0)==(0);
       if ($50) {
        break;
       }
       __THREW__ = 0;
       $51 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if ($53) {
        $54 = ___cxa_find_matching_catch(-1,-1)|0;
        $55 = tempRet0;
        ___cxa_guard_abort(((9032)|0));
        $eh$lpad$body$index3Z2D = $55;$eh$lpad$body$indexZ2D = $54;
        break L40;
       } else {
        HEAP32[(9024)>>2] = $51;
        ___cxa_guard_release(((9032)|0));
        break;
       }
      }
     } while(0);
     $56 = HEAP32[(9024)>>2]|0;
     $57 = (($__iob) + 8|0);
     $58 = HEAP32[$57>>2]|0;
     __THREW__ = 0;
     $vararg_ptr14 = ($vararg_buffer12);
     HEAP32[$vararg_ptr14>>2] = $58;
     $vararg_ptr15 = (($vararg_buffer12) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr15>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr15+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $59 = (invoke_iiiii(14,($__nb|0),($56|0),($8|0),($vararg_buffer12|0))|0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 36;
     } else {
      $__nc$1 = $59;
      label = 44;
     }
    } else {
     do {
      if ($48) {
       $64 = (___cxa_guard_acquire(((9032)|0))|0);
       $65 = ($64|0)==(0);
       if ($65) {
        break;
       }
       __THREW__ = 0;
       $66 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
       $67 = __THREW__; __THREW__ = 0;
       $68 = $67&1;
       if ($68) {
        $69 = ___cxa_find_matching_catch(-1,-1)|0;
        $70 = tempRet0;
        ___cxa_guard_abort(((9032)|0));
        $eh$lpad$body$index3Z2D = $70;$eh$lpad$body$indexZ2D = $69;
        break L40;
       } else {
        HEAP32[(9024)>>2] = $66;
        ___cxa_guard_release(((9032)|0));
        break;
       }
      }
     } while(0);
     $71 = HEAP32[(9024)>>2]|0;
     $72 = (($__iob) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     __THREW__ = 0;
     $vararg_ptr18 = ($vararg_buffer16);
     HEAP32[$vararg_ptr18>>2] = $73;
     $vararg_ptr19 = (($vararg_buffer16) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr19>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr19+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $74 = (invoke_iiiii(14,($__nb|0),($71|0),($8|0),($vararg_buffer16|0))|0);
     $75 = __THREW__; __THREW__ = 0;
     $76 = $75&1;
     if ($76) {
      label = 36;
     } else {
      $__nc$1 = $74;
      label = 44;
     }
    }
   } while(0);
   do {
    if ((label|0) == 44) {
     $77 = HEAP32[$__nb>>2]|0;
     $78 = ($77|0)==(0|0);
     if (!($78)) {
      $81 = $77;$82 = $77;$__nc$2 = $__nc$1;
      break L38;
     }
     __THREW__ = 0;
     invoke_v(7);
     $79 = __THREW__; __THREW__ = 0;
     $80 = $79&1;
     if ($80) {
      label = 36;
      break;
     }
     $$pre = HEAP32[$__nb>>2]|0;
     $81 = $$pre;$82 = $$pre;$__nc$2 = $__nc$1;
     break L38;
    }
   } while(0);
   if ((label|0) == 36) {
    $62 = ___cxa_find_matching_catch(-1,-1)|0;
    $63 = tempRet0;
    $eh$lpad$body$index3Z2D = $63;$eh$lpad$body$indexZ2D = $62;
   }
   $$116 = $eh$lpad$body$indexZ2D;$$1215 = $eh$lpad$body$index3Z2D;
   ___resumeException($$116|0);
   // unreachable;
  } else {
   $$pre17 = HEAP32[$__nb>>2]|0;
   $81 = $$pre17;$82 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $83 = (($81) + ($__nc$2)|0);
 $84 = HEAP32[$10>>2]|0;
 $85 = $84 & 176;
 do {
  if ((($85|0) == 16)) {
   $86 = HEAP8[$81]|0;
   if ((($86<<24>>24) == 43) | (($86<<24>>24) == 45)) {
    $87 = (($81) + 1|0);
    $$0$i7 = $87;
    break;
   }
   $88 = ($__nc$2|0)>(1);
   $89 = ($86<<24>>24)==(48);
   $or$cond$i = $88 & $89;
   if (!($or$cond$i)) {
    label = 53;
    break;
   }
   $90 = (($81) + 1|0);
   $91 = HEAP8[$90]|0;
   if (!((($91<<24>>24) == 88) | (($91<<24>>24) == 120))) {
    label = 53;
    break;
   }
   $92 = (($81) + 2|0);
   $$0$i7 = $92;
  } else if ((($85|0) == 32)) {
   $$0$i7 = $83;
  } else {
   label = 53;
  }
 } while(0);
 if ((label|0) == 53) {
  $$0$i7 = $81;
 }
 $93 = $__o;
 $94 = ($__o);
 $95 = ($81|0)==($31|0);
 do {
  if ($95) {
   $105 = $31;$106 = 0;$__ob$0 = $94;
   label = 59;
  } else {
   $96 = $__nc$2 << 3;
   $97 = (_malloc($96)|0);
   $98 = $97;
   $99 = ($97|0)==(0|0);
   if (!($99)) {
    $105 = $81;$106 = $98;$__ob$0 = $98;
    label = 59;
    break;
   }
   __THREW__ = 0;
   invoke_v(7);
   $100 = __THREW__; __THREW__ = 0;
   $101 = $100&1;
   if ($101) {
    $102 = 0;
    label = 58;
    break;
   }
   $$pre18 = HEAP32[$__nb>>2]|0;
   $105 = $$pre18;$106 = $98;$__ob$0 = $98;
   label = 59;
  }
 } while(0);
 do {
  if ((label|0) == 59) {
   __THREW__ = 0;
   invoke_vii(49,($1|0),($__iob|0));
   $107 = __THREW__; __THREW__ = 0;
   $108 = $107&1;
   if ($108) {
    $102 = $106;
    label = 58;
    break;
   }
   __THREW__ = 0;
   invoke_viiiiiii(45,($105|0),($$0$i7|0),($83|0),($__ob$0|0),($__op|0),($__oe|0),($1|0));
   $109 = __THREW__; __THREW__ = 0;
   $110 = $109&1;
   if ($110) {
    $131 = ___cxa_find_matching_catch(-1,-1)|0;
    $132 = tempRet0;
    $133 = ($1);
    $134 = HEAP32[$133>>2]|0;
    $135 = ($134);
    (__ZNSt3__114__shared_count16__release_sharedEv($135)|0);
    $$0 = $131;$$01 = $132;$136 = $106;
    break;
   }
   $111 = ($1);
   $112 = HEAP32[$111>>2]|0;
   $113 = ($112);
   (__ZNSt3__114__shared_count16__release_sharedEv($113)|0);
   $114 = ($__s);
   $115 = HEAP32[$114>>2]|0;
   $116 = ($3);
   HEAP32[$116>>2] = $115;
   $117 = HEAP32[$__op>>2]|0;
   $118 = HEAP32[$__oe>>2]|0;
   __THREW__ = 0;
   $119 = $$byval_copy;
   $120 = $$byval_copy;
   $121 = $3;
   ;HEAP32[$120+0>>2]=HEAP32[$121+0>>2]|0;
   invoke_viiiiiii(46,($2|0),($$byval_copy|0),($__ob$0|0),($117|0),($118|0),($__iob|0),($__fl|0));
   $122 = $$byval_copy;
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if ($124) {
    $102 = $106;
    label = 58;
    break;
   }
   $125 = ($2);
   $126 = HEAP32[$125>>2]|0;
   HEAP32[$114>>2] = $126;
   $127 = ($agg$result);
   HEAP32[$127>>2] = $126;
   $128 = ($106|0)==(0|0);
   if (!($128)) {
    $129 = $106;
    _free($129);
   }
   $130 = ($82|0)==(0|0);
   if ($130) {
    STACKTOP = sp;return;
   }
   _free($82);
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 58) {
  $103 = ___cxa_find_matching_catch(-1,-1)|0;
  $104 = tempRet0;
  $$0 = $103;$$01 = $104;$136 = $102;
 }
 $137 = ($136|0)==(0|0);
 if (!($137)) {
  $138 = $136;
  _free($138);
 }
 $139 = ($82|0)==(0|0);
 if ($139) {
  $$116 = $$0;$$1215 = $$01;
  ___resumeException($$116|0);
  // unreachable;
 }
 _free($82);
 $$116 = $$0;$$1215 = $$01;
 ___resumeException($$116|0);
 // unreachable;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i$phi = 0, $$012$i$i13 = 0, $$012$i$i13$phi = 0, $$57 = 0, $$__dg$0 = 0, $$pre = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $165$phi = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $228$phi = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$024 = 0, $__dc$1 = 0, $__dg$025 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$220 = 0, $__nf$3 = 0, $__ns$042 = 0, $__ns$133 = 0, $__ns$2 = 0, $__p$026 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i1 = 0, $eh$lpad$body$index7Z2D = 0;
 var $eh$lpad$body$indexZ2D = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $__p$i$i$i$i1 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $__grouping = sp + 32|0;
 $1 = ($__loc);
 $2 = HEAP32[$1>>2]|0;
 $3 = $__p$i$i$i$i;
 $4 = HEAP32[((9128))>>2]|0;
 $5 = ($4|0)==(-1);
 if (!($5)) {
  $6 = ($__p$i$i$i$i);
  HEAP32[$6>>2] = (9128);
  $7 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$7>>2] = (183);
  $8 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$8>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(((9128)),$3,184);
 }
 $9 = HEAP32[(((9128) + 4|0))>>2]|0;
 $10 = (($9) + -1)|0;
 $11 = (($2) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($2) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = $17 >> 2;
 $19 = ($18>>>0)>($10>>>0);
 if (!($19)) {
  $23 = (___cxa_allocate_exception(4)|0);
  $24 = $23;
  __ZNSt8bad_castC2Ev($24);
  ___cxa_throw(($23|0),((17096)|0),((143)|0));
  // unreachable;
 }
 $20 = (($14) + ($10<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(0|0);
 if ($22) {
  $23 = (___cxa_allocate_exception(4)|0);
  $24 = $23;
  __ZNSt8bad_castC2Ev($24);
  ___cxa_throw(($23|0),((17096)|0),((143)|0));
  // unreachable;
 }
 $25 = $21;
 $26 = HEAP32[$1>>2]|0;
 $27 = $__p$i$i$i$i1;
 $28 = HEAP32[((9288))>>2]|0;
 $29 = ($28|0)==(-1);
 if (!($29)) {
  $30 = ($__p$i$i$i$i1);
  HEAP32[$30>>2] = (9288);
  $31 = (($__p$i$i$i$i1) + 4|0);
  HEAP32[$31>>2] = (183);
  $32 = (($__p$i$i$i$i1) + 8|0);
  HEAP32[$32>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E(((9288)),$27,184);
 }
 $33 = HEAP32[(((9288) + 4|0))>>2]|0;
 $34 = (($33) + -1)|0;
 $35 = (($26) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($26) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $36;
 $40 = $38;
 $41 = (($39) - ($40))|0;
 $42 = $41 >> 2;
 $43 = ($42>>>0)>($34>>>0);
 if (!($43)) {
  $47 = (___cxa_allocate_exception(4)|0);
  $48 = $47;
  __ZNSt8bad_castC2Ev($48);
  ___cxa_throw(($47|0),((17096)|0),((143)|0));
  // unreachable;
 }
 $44 = (($38) + ($34<<2)|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = ($45|0)==(0|0);
 if ($46) {
  $47 = (___cxa_allocate_exception(4)|0);
  $48 = $47;
  __ZNSt8bad_castC2Ev($48);
  ___cxa_throw(($47|0),((17096)|0),((143)|0));
  // unreachable;
 }
 $49 = $45;
 $50 = $45;
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + 20|0);
 $53 = HEAP32[$52>>2]|0;
 FUNCTION_TABLE_vii[$53 & 127]($__grouping,$49);
 HEAP32[$__oe>>2] = $__ob;
 $54 = HEAP8[$__nb]|0;
 do {
  if ((($54<<24>>24) == 43) | (($54<<24>>24) == 45)) {
   $55 = $21;
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) + 44|0);
   $58 = HEAP32[$57>>2]|0;
   __THREW__ = 0;
   $59 = (invoke_iii($58|0,($25|0),($54|0))|0);
   $60 = __THREW__; __THREW__ = 0;
   $61 = $60&1;
   if ($61) {
    break;
   }
   $62 = (($__nb) + 1|0);
   $63 = HEAP32[$__oe>>2]|0;
   $64 = (($63) + 4|0);
   HEAP32[$__oe>>2] = $64;
   HEAP32[$63>>2] = $59;
   $__nf$0 = $62;
   label = 20;
  } else {
   $__nf$0 = $__nb;
   label = 20;
  }
 } while(0);
 L22: do {
  if ((label|0) == 20) {
   $75 = $__ne;
   $76 = $__nf$0;
   $77 = (($75) - ($76))|0;
   $78 = ($77|0)>(1);
   L24: do {
    if ($78) {
     $80 = HEAP8[$__nf$0]|0;
     $81 = ($80<<24>>24)==(48);
     if (!($81)) {
      label = 21;
      break;
     }
     $82 = (($__nf$0) + 1|0);
     $83 = HEAP8[$82]|0;
     if (!((($83<<24>>24) == 88) | (($83<<24>>24) == 120))) {
      label = 21;
      break;
     }
     $84 = $21;
     $85 = HEAP32[$84>>2]|0;
     $86 = (($85) + 44|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_iii($87|0,($25|0),48)|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      break L22;
     }
     $91 = HEAP32[$__oe>>2]|0;
     $92 = (($91) + 4|0);
     HEAP32[$__oe>>2] = $92;
     HEAP32[$91>>2] = $88;
     $93 = (($__nf$0) + 2|0);
     $94 = HEAP8[$82]|0;
     $95 = HEAP32[$84>>2]|0;
     $96 = (($95) + 44|0);
     $97 = HEAP32[$96>>2]|0;
     __THREW__ = 0;
     $98 = (invoke_iii($97|0,($25|0),($94|0))|0);
     $99 = __THREW__; __THREW__ = 0;
     $100 = $99&1;
     if ($100) {
      break L22;
     }
     $101 = HEAP32[$__oe>>2]|0;
     $102 = (($101) + 4|0);
     HEAP32[$__oe>>2] = $102;
     HEAP32[$101>>2] = $98;
     $103 = ($93>>>0)<($__ne>>>0);
     if ($103) {
      $__ns$042 = $93;
     } else {
      $__nf$1 = $93;$__ns$2 = $93;
      break;
     }
     L30: while(1) {
      $105 = HEAP8[$__ns$042]|0;
      $106 = HEAP8[(9032)]|0;
      $107 = ($106<<24>>24)==(0);
      do {
       if ($107) {
        $108 = (___cxa_guard_acquire(((9032)|0))|0);
        $109 = ($108|0)==(0);
        if ($109) {
         break;
        }
        __THREW__ = 0;
        $110 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
        $111 = __THREW__; __THREW__ = 0;
        $112 = $111&1;
        if ($112) {
         label = 32;
         break L30;
        }
        HEAP32[(9024)>>2] = $110;
        ___cxa_guard_release(((9032)|0));
       }
      } while(0);
      $115 = HEAP32[(9024)>>2]|0;
      $116 = $105 << 24 >> 24;
      __THREW__ = 0;
      $117 = (invoke_iii(35,($116|0),($115|0))|0);
      $118 = __THREW__; __THREW__ = 0;
      $119 = $118&1;
      if ($119) {
       label = 17;
       break;
      }
      $120 = ($117|0)==(0);
      $121 = (($__ns$042) + 1|0);
      if ($120) {
       $__nf$1 = $93;$__ns$2 = $__ns$042;
       break L24;
      }
      $104 = ($121>>>0)<($__ne>>>0);
      if ($104) {
       $__ns$042 = $121;
      } else {
       $__nf$1 = $93;$__ns$2 = $121;
       break L24;
      }
     }
     if ((label|0) == 17) {
      $71 = ___cxa_find_matching_catch(-1,-1)|0;
      $72 = tempRet0;
      $eh$lpad$body$index7Z2D = $72;$eh$lpad$body$indexZ2D = $71;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
     else if ((label|0) == 32) {
      $113 = ___cxa_find_matching_catch(-1,-1)|0;
      $114 = tempRet0;
      ___cxa_guard_abort(((9032)|0));
      $eh$lpad$body$index7Z2D = $114;$eh$lpad$body$indexZ2D = $113;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
    } else {
     label = 21;
    }
   } while(0);
   L44: do {
    if ((label|0) == 21) {
     $79 = ($__nf$0>>>0)<($__ne>>>0);
     if ($79) {
      $__ns$133 = $__nf$0;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
      break;
     }
     L46: while(1) {
      $123 = HEAP8[$__ns$133]|0;
      $124 = HEAP8[(9032)]|0;
      $125 = ($124<<24>>24)==(0);
      do {
       if ($125) {
        $126 = (___cxa_guard_acquire(((9032)|0))|0);
        $127 = ($126|0)==(0);
        if ($127) {
         break;
        }
        __THREW__ = 0;
        $128 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
        $129 = __THREW__; __THREW__ = 0;
        $130 = $129&1;
        if ($130) {
         label = 40;
         break L46;
        }
        HEAP32[(9024)>>2] = $128;
        ___cxa_guard_release(((9032)|0));
       }
      } while(0);
      $133 = HEAP32[(9024)>>2]|0;
      $134 = $123 << 24 >> 24;
      __THREW__ = 0;
      $135 = (invoke_iii(36,($134|0),($133|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       label = 16;
       break;
      }
      $138 = ($135|0)==(0);
      $139 = (($__ns$133) + 1|0);
      if ($138) {
       $__nf$1 = $__nf$0;$__ns$2 = $__ns$133;
       break L44;
      }
      $122 = ($139>>>0)<($__ne>>>0);
      if ($122) {
       $__ns$133 = $139;
      } else {
       $__nf$1 = $__nf$0;$__ns$2 = $139;
       break L44;
      }
     }
     if ((label|0) == 16) {
      $69 = ___cxa_find_matching_catch(-1,-1)|0;
      $70 = tempRet0;
      $eh$lpad$body$index7Z2D = $70;$eh$lpad$body$indexZ2D = $69;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
     else if ((label|0) == 40) {
      $131 = ___cxa_find_matching_catch(-1,-1)|0;
      $132 = tempRet0;
      ___cxa_guard_abort(((9032)|0));
      $eh$lpad$body$index7Z2D = $132;$eh$lpad$body$indexZ2D = $131;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
    }
   } while(0);
   $140 = $__grouping;
   $141 = HEAP8[$140]|0;
   $142 = $141 & 1;
   $143 = ($142<<24>>24)==(0);
   if ($143) {
    $146 = $141&255;
    $147 = $146 >>> 1;
    $148 = $147;
   } else {
    $144 = (($__grouping) + 4|0);
    $145 = HEAP32[$144>>2]|0;
    $148 = $145;
   }
   $149 = ($148|0)==(0);
   do {
    if ($149) {
     $150 = HEAP32[$__oe>>2]|0;
     $151 = $21;
     $152 = HEAP32[$151>>2]|0;
     $153 = (($152) + 48|0);
     $154 = HEAP32[$153>>2]|0;
     __THREW__ = 0;
     (invoke_iiiii($154|0,($25|0),($__nf$1|0),($__ns$2|0),($150|0))|0);
     $155 = __THREW__; __THREW__ = 0;
     $156 = $155&1;
     if ($156) {
      break L22;
     }
     $157 = $__ns$2;
     $158 = $__nf$1;
     $159 = (($157) - ($158))|0;
     $160 = HEAP32[$__oe>>2]|0;
     $161 = (($160) + ($159<<2)|0);
     HEAP32[$__oe>>2] = $161;
     $234 = $161;
    } else {
     $162 = ($__nf$1|0)==($__ns$2|0);
     do {
      if (!($162)) {
       $163 = (($__ns$2) + -1|0);
       $164 = ($163>>>0)>($__nf$1>>>0);
       if ($164) {
        $$012$i$i = $__nf$1;$165 = $163;
       } else {
        break;
       }
       while(1) {
        $166 = HEAP8[$$012$i$i]|0;
        $167 = HEAP8[$165]|0;
        HEAP8[$$012$i$i] = $167;
        HEAP8[$165] = $166;
        $168 = (($$012$i$i) + 1|0);
        $169 = (($165) + -1|0);
        $170 = ($168>>>0)<($169>>>0);
        if ($170) {
         $165$phi = $169;$$012$i$i$phi = $168;$165 = $165$phi;$$012$i$i = $$012$i$i$phi;
        } else {
         break;
        }
       }
      }
     } while(0);
     $171 = $45;
     $172 = HEAP32[$171>>2]|0;
     $173 = (($172) + 16|0);
     $174 = HEAP32[$173>>2]|0;
     __THREW__ = 0;
     $175 = (invoke_ii($174|0,($49|0))|0);
     $176 = __THREW__; __THREW__ = 0;
     $177 = $176&1;
     if ($177) {
      break L22;
     }
     $178 = ($__nf$1>>>0)<($__ns$2>>>0);
     L75: do {
      if ($178) {
       $179 = $__grouping;
       $180 = (($179) + 1|0);
       $181 = (($__grouping) + 4|0);
       $182 = (($__grouping) + 8|0);
       $183 = $21;
       $__dc$024 = 0;$__dg$025 = 0;$__p$026 = $__nf$1;
       while(1) {
        $184 = HEAP8[$140]|0;
        $185 = $184 & 1;
        $186 = ($185<<24>>24)==(0);
        $187 = HEAP32[$182>>2]|0;
        $$ = $186 ? $180 : $187;
        $188 = (($$) + ($__dg$025)|0);
        $189 = HEAP8[$188]|0;
        $190 = ($189<<24>>24)>(0);
        do {
         if ($190) {
          $191 = HEAP32[$182>>2]|0;
          $$57 = $186 ? $180 : $191;
          $192 = (($$57) + ($__dg$025)|0);
          $193 = HEAP8[$192]|0;
          $194 = $193 << 24 >> 24;
          $195 = ($__dc$024|0)==($194|0);
          if (!($195)) {
           $__dc$1 = $__dc$024;$__dg$1 = $__dg$025;
           break;
          }
          $196 = HEAP32[$__oe>>2]|0;
          $197 = (($196) + 4|0);
          HEAP32[$__oe>>2] = $197;
          HEAP32[$196>>2] = $175;
          $198 = HEAP8[$140]|0;
          $199 = $198 & 1;
          $200 = ($199<<24>>24)==(0);
          if ($200) {
           $202 = $198&255;
           $203 = $202 >>> 1;
           $204 = $203;
          } else {
           $201 = HEAP32[$181>>2]|0;
           $204 = $201;
          }
          $205 = (($204) + -1)|0;
          $206 = ($__dg$025>>>0)<($205>>>0);
          $207 = $206&1;
          $$__dg$0 = (($207) + ($__dg$025))|0;
          $__dc$1 = 0;$__dg$1 = $$__dg$0;
         } else {
          $__dc$1 = $__dc$024;$__dg$1 = $__dg$025;
         }
        } while(0);
        $208 = HEAP8[$__p$026]|0;
        $209 = HEAP32[$183>>2]|0;
        $210 = (($209) + 44|0);
        $211 = HEAP32[$210>>2]|0;
        __THREW__ = 0;
        $212 = (invoke_iii($211|0,($25|0),($208|0))|0);
        $213 = __THREW__; __THREW__ = 0;
        $214 = $213&1;
        if ($214) {
         break;
        }
        $215 = HEAP32[$__oe>>2]|0;
        $216 = (($215) + 4|0);
        HEAP32[$__oe>>2] = $216;
        HEAP32[$215>>2] = $212;
        $217 = (($__dc$1) + 1)|0;
        $218 = (($__p$026) + 1|0);
        $219 = ($218>>>0)<($__ns$2>>>0);
        if ($219) {
         $__dc$024 = $217;$__dg$025 = $__dg$1;$__p$026 = $218;
        } else {
         $220 = $216;
         break L75;
        }
       }
       $67 = ___cxa_find_matching_catch(-1,-1)|0;
       $68 = tempRet0;
       $eh$lpad$body$index7Z2D = $68;$eh$lpad$body$indexZ2D = $67;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       ___resumeException($eh$lpad$body$indexZ2D|0);
       // unreachable;
      } else {
       $$pre = HEAP32[$__oe>>2]|0;
       $220 = $$pre;
      }
     } while(0);
     $221 = $__nf$1;
     $222 = $__nb;
     $223 = (($221) - ($222))|0;
     $224 = (($__ob) + ($223<<2)|0);
     $225 = ($224|0)==($220|0);
     if ($225) {
      $234 = $220;
      break;
     }
     $226 = (($220) + -4|0);
     $227 = ($226>>>0)>($224>>>0);
     if ($227) {
      $$012$i$i13 = $224;$228 = $226;
     } else {
      $234 = $220;
      break;
     }
     while(1) {
      $229 = HEAP32[$$012$i$i13>>2]|0;
      $230 = HEAP32[$228>>2]|0;
      HEAP32[$$012$i$i13>>2] = $230;
      HEAP32[$228>>2] = $229;
      $231 = (($$012$i$i13) + 4|0);
      $232 = (($228) + -4|0);
      $233 = ($231>>>0)<($232>>>0);
      if ($233) {
       $228$phi = $232;$$012$i$i13$phi = $231;$228 = $228$phi;$$012$i$i13 = $$012$i$i13$phi;
      } else {
       $234 = $220;
       break;
      }
     }
    }
   } while(0);
   $235 = ($__ns$2>>>0)<($__ne>>>0);
   L96: do {
    if ($235) {
     $236 = $21;
     $__nf$220 = $__ns$2;
     while(1) {
      $237 = HEAP8[$__nf$220]|0;
      $238 = ($237<<24>>24)==(46);
      if ($238) {
       label = 70;
       break;
      }
      $249 = HEAP32[$236>>2]|0;
      $250 = (($249) + 44|0);
      $251 = HEAP32[$250>>2]|0;
      __THREW__ = 0;
      $252 = (invoke_iii($251|0,($25|0),($237|0))|0);
      $253 = __THREW__; __THREW__ = 0;
      $254 = $253&1;
      if ($254) {
       label = 14;
       break;
      }
      $255 = HEAP32[$__oe>>2]|0;
      $256 = (($255) + 4|0);
      HEAP32[$__oe>>2] = $256;
      HEAP32[$255>>2] = $252;
      $257 = (($__nf$220) + 1|0);
      $258 = ($257>>>0)<($__ne>>>0);
      if ($258) {
       $__nf$220 = $257;
      } else {
       $259 = $256;$__nf$3 = $257;
       break L96;
      }
     }
     if ((label|0) == 14) {
      $65 = ___cxa_find_matching_catch(-1,-1)|0;
      $66 = tempRet0;
      $eh$lpad$body$index7Z2D = $66;$eh$lpad$body$indexZ2D = $65;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($eh$lpad$body$indexZ2D|0);
      // unreachable;
     }
     else if ((label|0) == 70) {
      $239 = $45;
      $240 = HEAP32[$239>>2]|0;
      $241 = (($240) + 12|0);
      $242 = HEAP32[$241>>2]|0;
      __THREW__ = 0;
      $243 = (invoke_ii($242|0,($49|0))|0);
      $244 = __THREW__; __THREW__ = 0;
      $245 = $244&1;
      if ($245) {
       break L22;
      }
      $246 = HEAP32[$__oe>>2]|0;
      $247 = (($246) + 4|0);
      HEAP32[$__oe>>2] = $247;
      HEAP32[$246>>2] = $243;
      $248 = (($__nf$220) + 1|0);
      $259 = $247;$__nf$3 = $248;
      break;
     }
    } else {
     $259 = $234;$__nf$3 = $__ns$2;
    }
   } while(0);
   $260 = $21;
   $261 = HEAP32[$260>>2]|0;
   $262 = (($261) + 48|0);
   $263 = HEAP32[$262>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($263|0,($25|0),($__nf$3|0),($__ne|0),($259|0))|0);
   $264 = __THREW__; __THREW__ = 0;
   $265 = $264&1;
   if ($265) {
    break;
   }
   $266 = $__nf$3;
   $267 = (($75) - ($266))|0;
   $268 = HEAP32[$__oe>>2]|0;
   $269 = (($268) + ($267<<2)|0);
   HEAP32[$__oe>>2] = $269;
   $270 = ($__np|0)==($__ne|0);
   if ($270) {
    $storemerge = $269;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
   $271 = $__np;
   $272 = $__nb;
   $273 = (($271) - ($272))|0;
   $274 = (($__ob) + ($273<<2)|0);
   $storemerge = $274;
   HEAP32[$__op>>2] = $storemerge;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   STACKTOP = sp;return;
  }
 } while(0);
 $73 = ___cxa_find_matching_catch(-1,-1)|0;
 $74 = tempRet0;
 $eh$lpad$body$index7Z2D = $74;$eh$lpad$body$indexZ2D = $73;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($eh$lpad$body$indexZ2D|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$0$i = 0, $$0$i7 = 0, $$01 = 0, $$1$i = 0, $$111 = 0, $$1210 = 0, $$byval_copy = 0, $$pre = 0, $$pre12 = 0, $$pre13 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0;
 var $or$cond$i = 0, $scevgep = 0, $scevgep14 = 0, $specify_precision$0$off0$ph$i15 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer9 = 0, $vararg_lifetime_bitcast = 0, $vararg_lifetime_bitcast10 = 0, $vararg_lifetime_bitcast13 = 0, $vararg_lifetime_bitcast17 = 0, $vararg_ptr = 0, $vararg_ptr11 = 0, $vararg_ptr14 = 0, $vararg_ptr15 = 0, $vararg_ptr18 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer16 = sp + 8|0;
 $vararg_lifetime_bitcast17 = $vararg_buffer16;
 $vararg_buffer12 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $vararg_lifetime_bitcast13 = $vararg_buffer12;
 $vararg_buffer9 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $vararg_lifetime_bitcast10 = $vararg_buffer9;
 $vararg_buffer = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 32|0;
 $__nb = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 232|0;
 $__op = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__oe = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $2 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $3 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = $__fmt;
 $9 = (($8) + 1|0);
 $10 = (($__iob) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 2048;
 $13 = ($12|0)==(0);
 if ($13) {
  $$0$i = $9;
 } else {
  $14 = (($8) + 2|0);
  HEAP8[$9] = 43;
  $$0$i = $14;
 }
 $15 = $11 & 1024;
 $16 = ($15|0)==(0);
 if ($16) {
  $$1$i = $$0$i;
 } else {
  $17 = (($$0$i) + 1|0);
  HEAP8[$$0$i] = 35;
  $$1$i = $17;
 }
 $18 = $11 & 260;
 $19 = $11 >>> 14;
 $20 = ($18|0)==(260);
 do {
  if ($20) {
   HEAP8[$$1$i] = 76;
   $scevgep14 = (($$1$i) + 1|0);
   $27 = $19 & 1;
   $28 = ($27|0)==(0);
   if ($28) {
    HEAP8[$scevgep14] = 97;
    $specify_precision$0$off0$ph$i15 = 0;
    break;
   } else {
    HEAP8[$scevgep14] = 65;
    $specify_precision$0$off0$ph$i15 = 0;
    break;
   }
  } else {
   $21 = (($$1$i) + 1|0);
   HEAP8[$$1$i] = 46;
   $22 = (($$1$i) + 2|0);
   HEAP8[$21] = 42;
   HEAP8[$22] = 76;
   $scevgep = (($$1$i) + 3|0);
   if ((($18|0) == 4)) {
    $23 = $19 & 1;
    $24 = ($23|0)==(0);
    if ($24) {
     HEAP8[$scevgep] = 102;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 70;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    }
   } else if ((($18|0) == 256)) {
    $25 = $19 & 1;
    $26 = ($25|0)==(0);
    if ($26) {
     HEAP8[$scevgep] = 101;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 69;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    }
   } else {
    $29 = $19 & 1;
    $30 = ($29|0)==(0);
    if ($30) {
     HEAP8[$scevgep] = 103;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    } else {
     HEAP8[$scevgep] = 71;
     $specify_precision$0$off0$ph$i15 = 1;
     break;
    }
   }
  }
 } while(0);
 $31 = ($__nar);
 HEAP32[$__nb>>2] = $31;
 $32 = HEAP8[(9032)]|0;
 $33 = ($32<<24>>24)==(0);
 do {
  if ($33) {
   $34 = (___cxa_guard_acquire(((9032)|0))|0);
   $35 = ($34|0)==(0);
   if ($35) {
    break;
   }
   __THREW__ = 0;
   $36 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   if ($38) {
    $39 = ___cxa_find_matching_catch(-1,-1)|0;
    $40 = tempRet0;
    ___cxa_guard_abort(((9032)|0));
    ___resumeException($39|0);
    // unreachable;
   } else {
    HEAP32[(9024)>>2] = $36;
    ___cxa_guard_release(((9032)|0));
    break;
   }
  }
 } while(0);
 $41 = HEAP32[(9024)>>2]|0;
 if ($specify_precision$0$off0$ph$i15) {
  $42 = (($__iob) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $vararg_ptr = ($vararg_buffer);
  HEAP32[$vararg_ptr>>2] = $43;
  $vararg_ptr8 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $44 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($31,30,$41,$8,$vararg_buffer)|0);
  $__nc$0 = $44;
 } else {
  $vararg_ptr11 = ($vararg_buffer9);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr11>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr11+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $45 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($31,30,$41,$8,$vararg_buffer9)|0);
  $__nc$0 = $45;
 }
 $46 = ($__nc$0|0)>(29);
 L38: do {
  if ($46) {
   $47 = HEAP8[(9032)]|0;
   $48 = ($47<<24>>24)==(0);
   L41: do {
    if ($specify_precision$0$off0$ph$i15) {
     do {
      if ($48) {
       $49 = (___cxa_guard_acquire(((9032)|0))|0);
       $50 = ($49|0)==(0);
       if ($50) {
        break;
       }
       __THREW__ = 0;
       $51 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
       $52 = __THREW__; __THREW__ = 0;
       $53 = $52&1;
       if ($53) {
        $54 = ___cxa_find_matching_catch(-1,-1)|0;
        $55 = tempRet0;
        ___cxa_guard_abort(((9032)|0));
        $eh$lpad$body$index3Z2D = $55;$eh$lpad$body$indexZ2D = $54;
        break L41;
       } else {
        HEAP32[(9024)>>2] = $51;
        ___cxa_guard_release(((9032)|0));
        break;
       }
      }
     } while(0);
     $56 = HEAP32[(9024)>>2]|0;
     $57 = (($__iob) + 8|0);
     $58 = HEAP32[$57>>2]|0;
     __THREW__ = 0;
     $vararg_ptr14 = ($vararg_buffer12);
     HEAP32[$vararg_ptr14>>2] = $58;
     $vararg_ptr15 = (($vararg_buffer12) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr15>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr15+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $59 = (invoke_iiiii(14,($__nb|0),($56|0),($8|0),($vararg_buffer12|0))|0);
     $60 = __THREW__; __THREW__ = 0;
     $61 = $60&1;
     if ($61) {
      label = 36;
     } else {
      $__nc$1 = $59;
      label = 44;
     }
    } else {
     do {
      if ($48) {
       $64 = (___cxa_guard_acquire(((9032)|0))|0);
       $65 = ($64|0)==(0);
       if ($65) {
        break;
       }
       __THREW__ = 0;
       $66 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
       $67 = __THREW__; __THREW__ = 0;
       $68 = $67&1;
       if ($68) {
        $69 = ___cxa_find_matching_catch(-1,-1)|0;
        $70 = tempRet0;
        ___cxa_guard_abort(((9032)|0));
        $eh$lpad$body$index3Z2D = $70;$eh$lpad$body$indexZ2D = $69;
        break L41;
       } else {
        HEAP32[(9024)>>2] = $66;
        ___cxa_guard_release(((9032)|0));
        break;
       }
      }
     } while(0);
     $71 = HEAP32[(9024)>>2]|0;
     __THREW__ = 0;
     $vararg_ptr18 = ($vararg_buffer16);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr18>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr18+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $72 = (invoke_iiiii(14,($__nb|0),($71|0),($8|0),($vararg_buffer16|0))|0);
     $73 = __THREW__; __THREW__ = 0;
     $74 = $73&1;
     if ($74) {
      label = 36;
     } else {
      $__nc$1 = $72;
      label = 44;
     }
    }
   } while(0);
   do {
    if ((label|0) == 44) {
     $75 = HEAP32[$__nb>>2]|0;
     $76 = ($75|0)==(0|0);
     if (!($76)) {
      $79 = $75;$80 = $75;$__nc$2 = $__nc$1;
      break L38;
     }
     __THREW__ = 0;
     invoke_v(7);
     $77 = __THREW__; __THREW__ = 0;
     $78 = $77&1;
     if ($78) {
      label = 36;
      break;
     }
     $$pre = HEAP32[$__nb>>2]|0;
     $79 = $$pre;$80 = $$pre;$__nc$2 = $__nc$1;
     break L38;
    }
   } while(0);
   if ((label|0) == 36) {
    $62 = ___cxa_find_matching_catch(-1,-1)|0;
    $63 = tempRet0;
    $eh$lpad$body$index3Z2D = $63;$eh$lpad$body$indexZ2D = $62;
   }
   $$111 = $eh$lpad$body$indexZ2D;$$1210 = $eh$lpad$body$index3Z2D;
   ___resumeException($$111|0);
   // unreachable;
  } else {
   $$pre12 = HEAP32[$__nb>>2]|0;
   $79 = $$pre12;$80 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $81 = (($79) + ($__nc$2)|0);
 $82 = HEAP32[$10>>2]|0;
 $83 = $82 & 176;
 do {
  if ((($83|0) == 32)) {
   $$0$i7 = $81;
  } else if ((($83|0) == 16)) {
   $84 = HEAP8[$79]|0;
   if ((($84<<24>>24) == 43) | (($84<<24>>24) == 45)) {
    $85 = (($79) + 1|0);
    $$0$i7 = $85;
    break;
   }
   $86 = ($__nc$2|0)>(1);
   $87 = ($84<<24>>24)==(48);
   $or$cond$i = $86 & $87;
   if (!($or$cond$i)) {
    label = 53;
    break;
   }
   $88 = (($79) + 1|0);
   $89 = HEAP8[$88]|0;
   if (!((($89<<24>>24) == 88) | (($89<<24>>24) == 120))) {
    label = 53;
    break;
   }
   $90 = (($79) + 2|0);
   $$0$i7 = $90;
  } else {
   label = 53;
  }
 } while(0);
 if ((label|0) == 53) {
  $$0$i7 = $79;
 }
 $91 = $__o;
 $92 = ($__o);
 $93 = ($79|0)==($31|0);
 do {
  if ($93) {
   $103 = $31;$104 = 0;$__ob$0 = $92;
   label = 59;
  } else {
   $94 = $__nc$2 << 3;
   $95 = (_malloc($94)|0);
   $96 = $95;
   $97 = ($95|0)==(0|0);
   if (!($97)) {
    $103 = $79;$104 = $96;$__ob$0 = $96;
    label = 59;
    break;
   }
   __THREW__ = 0;
   invoke_v(7);
   $98 = __THREW__; __THREW__ = 0;
   $99 = $98&1;
   if ($99) {
    $100 = 0;
    label = 58;
    break;
   }
   $$pre13 = HEAP32[$__nb>>2]|0;
   $103 = $$pre13;$104 = $96;$__ob$0 = $96;
   label = 59;
  }
 } while(0);
 do {
  if ((label|0) == 59) {
   __THREW__ = 0;
   invoke_vii(49,($1|0),($__iob|0));
   $105 = __THREW__; __THREW__ = 0;
   $106 = $105&1;
   if ($106) {
    $100 = $104;
    label = 58;
    break;
   }
   __THREW__ = 0;
   invoke_viiiiiii(45,($103|0),($$0$i7|0),($81|0),($__ob$0|0),($__op|0),($__oe|0),($1|0));
   $107 = __THREW__; __THREW__ = 0;
   $108 = $107&1;
   if ($108) {
    $129 = ___cxa_find_matching_catch(-1,-1)|0;
    $130 = tempRet0;
    $131 = ($1);
    $132 = HEAP32[$131>>2]|0;
    $133 = ($132);
    (__ZNSt3__114__shared_count16__release_sharedEv($133)|0);
    $$0 = $129;$$01 = $130;$134 = $104;
    break;
   }
   $109 = ($1);
   $110 = HEAP32[$109>>2]|0;
   $111 = ($110);
   (__ZNSt3__114__shared_count16__release_sharedEv($111)|0);
   $112 = ($__s);
   $113 = HEAP32[$112>>2]|0;
   $114 = ($3);
   HEAP32[$114>>2] = $113;
   $115 = HEAP32[$__op>>2]|0;
   $116 = HEAP32[$__oe>>2]|0;
   __THREW__ = 0;
   $117 = $$byval_copy;
   $118 = $$byval_copy;
   $119 = $3;
   ;HEAP32[$118+0>>2]=HEAP32[$119+0>>2]|0;
   invoke_viiiiiii(46,($2|0),($$byval_copy|0),($__ob$0|0),($115|0),($116|0),($__iob|0),($__fl|0));
   $120 = $$byval_copy;
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if ($122) {
    $100 = $104;
    label = 58;
    break;
   }
   $123 = ($2);
   $124 = HEAP32[$123>>2]|0;
   HEAP32[$112>>2] = $124;
   $125 = ($agg$result);
   HEAP32[$125>>2] = $124;
   $126 = ($104|0)==(0|0);
   if (!($126)) {
    $127 = $104;
    _free($127);
   }
   $128 = ($80|0)==(0|0);
   if ($128) {
    STACKTOP = sp;return;
   }
   _free($80);
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 58) {
  $101 = ___cxa_find_matching_catch(-1,-1)|0;
  $102 = tempRet0;
  $$0 = $101;$$01 = $102;$134 = $100;
 }
 $135 = ($134|0)==(0|0);
 if (!($135)) {
  $136 = $134;
  _free($136);
 }
 $137 = ($80|0)==(0|0);
 if ($137) {
  $$111 = $$0;$$1210 = $$01;
  ___resumeException($$111|0);
  // unreachable;
 }
 _free($80);
 $$111 = $$0;$$1210 = $$01;
 ___resumeException($$111|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0$i = 0, $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $__p$i$i$i$i = 0, $or$cond$i = 0, $vararg_buffer = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer = sp + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__p$i$i$i$i = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__fmt = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__nar = STACKTOP; STACKTOP = STACKTOP + 24|0;
 $__o = STACKTOP; STACKTOP = STACKTOP + 152|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $2 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $3 = ($__fmt);
 ;HEAP8[$3+0|0]=HEAP8[(7936)+0|0]|0;HEAP8[$3+1|0]=HEAP8[(7936)+1|0]|0;HEAP8[$3+2|0]=HEAP8[(7936)+2|0]|0;HEAP8[$3+3|0]=HEAP8[(7936)+3|0]|0;HEAP8[$3+4|0]=HEAP8[(7936)+4|0]|0;HEAP8[$3+5|0]=HEAP8[(7936)+5|0]|0;
 $4 = ($__nar);
 $5 = HEAP8[(9032)]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire(((9032)|0))|0);
   $8 = ($7|0)==(0);
   if ($8) {
    break;
   }
   __THREW__ = 0;
   $9 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $12 = ___cxa_find_matching_catch(-1,-1)|0;
    $13 = tempRet0;
    ___cxa_guard_abort(((9032)|0));
    ___resumeException($12|0);
    // unreachable;
   } else {
    HEAP32[(9024)>>2] = $9;
    ___cxa_guard_release(((9032)|0));
    break;
   }
  }
 } while(0);
 $14 = HEAP32[(9024)>>2]|0;
 $vararg_ptr = ($vararg_buffer);
 HEAP32[$vararg_ptr>>2] = $__v;
 $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($4,20,$14,$3,$vararg_buffer)|0);
 $16 = (($__nar) + ($15)|0);
 $17 = (($__iob) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 & 176;
 do {
  if ((($19|0) == 32)) {
   $$0$i = $16;
  } else if ((($19|0) == 16)) {
   $20 = HEAP8[$4]|0;
   if ((($20<<24>>24) == 43) | (($20<<24>>24) == 45)) {
    $21 = (($__nar) + 1|0);
    $$0$i = $21;
    break;
   }
   $22 = ($15|0)>(1);
   $23 = ($20<<24>>24)==(48);
   $or$cond$i = $22 & $23;
   if (!($or$cond$i)) {
    label = 12;
    break;
   }
   $24 = (($__nar) + 1|0);
   $25 = HEAP8[$24]|0;
   if (!((($25<<24>>24) == 88) | (($25<<24>>24) == 120))) {
    label = 12;
    break;
   }
   $26 = (($__nar) + 2|0);
   $$0$i = $26;
  } else {
   label = 12;
  }
 } while(0);
 if ((label|0) == 12) {
  $$0$i = $4;
 }
 $27 = $__o;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $28 = ($1);
 $29 = HEAP32[$28>>2]|0;
 $30 = $__p$i$i$i$i;
 $31 = HEAP32[((9128))>>2]|0;
 $32 = ($31|0)==(-1);
 do {
  if (!($32)) {
   $33 = ($__p$i$i$i$i);
   HEAP32[$33>>2] = (9128);
   $34 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$34>>2] = (183);
   $35 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$35>>2] = 0;
   __THREW__ = 0;
   invoke_viii(25,(((9128))|0),($30|0),(184|0));
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if (!($37)) {
    break;
   }
   $66 = ___cxa_find_matching_catch(-1,-1)|0;
   $67 = tempRet0;
   $68 = HEAP32[$28>>2]|0;
   $69 = ($68);
   (__ZNSt3__114__shared_count16__release_sharedEv($69)|0);
   ___resumeException($66|0);
   // unreachable;
  }
 } while(0);
 $38 = HEAP32[(((9128) + 4|0))>>2]|0;
 $39 = (($38) + -1)|0;
 $40 = (($29) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($29) + 8|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $41;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = $46 >> 2;
 $48 = ($47>>>0)>($39>>>0);
 do {
  if ($48) {
   $49 = (($43) + ($39<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ($50|0)==(0|0);
   if ($51) {
    break;
   }
   $56 = $50;
   $57 = HEAP32[$28>>2]|0;
   $58 = ($57);
   (__ZNSt3__114__shared_count16__release_sharedEv($58)|0);
   $59 = ($__o);
   $60 = $50;
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + 48|0);
   $63 = HEAP32[$62>>2]|0;
   (FUNCTION_TABLE_iiiii[$63 & 31]($56,$4,$16,$59)|0);
   $64 = (($__o) + ($15<<2)|0);
   $65 = ($$0$i|0)==($16|0);
   if ($65) {
    $__op$0 = $64;
    $74 = ($__s);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($2);
    HEAP32[$76>>2] = $75;
    $77 = $$byval_copy;
    $78 = $$byval_copy;
    $79 = $2;
    ;HEAP32[$78+0>>2]=HEAP32[$79+0>>2]|0;
    __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$59,$__op$0,$64,$__iob,$__fl);
    $80 = $$byval_copy;
    STACKTOP = sp;return;
   }
   $70 = $__nar;
   $71 = $$0$i;
   $72 = (($71) - ($70))|0;
   $73 = (($__o) + ($72<<2)|0);
   $__op$0 = $73;
   $74 = ($__s);
   $75 = HEAP32[$74>>2]|0;
   $76 = ($2);
   HEAP32[$76>>2] = $75;
   $77 = $$byval_copy;
   $78 = $$byval_copy;
   $79 = $2;
   ;HEAP32[$78+0>>2]=HEAP32[$79+0>>2]|0;
   __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$59,$__op$0,$64,$__iob,$__fl);
   $80 = $$byval_copy;
   STACKTOP = sp;return;
  }
 } while(0);
 $52 = (___cxa_allocate_exception(4)|0);
 $53 = $52;
 __ZNSt8bad_castC2Ev($53);
 __THREW__ = 0;
 invoke_viii(12,($52|0),((17096)|0),((143)|0));
 $54 = __THREW__; __THREW__ = 0;
 $55 = $54&1;
 if ($55) {
  $66 = ___cxa_find_matching_catch(-1,-1)|0;
  $67 = tempRet0;
  $68 = HEAP32[$28>>2]|0;
  $69 = ($68);
  (__ZNSt3__114__shared_count16__release_sharedEv($69)|0);
  ___resumeException($66|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i16 = 0, $$0$ph$be = 0, $$0$ph38 = 0, $$0$pn = 0, $$0$pn$phi = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$phi$trans$insert$pre$pre = 0, $$pre = 0, $$pre$i$i$i20 = 0, $$pre$i$i$i7 = 0, $$pre$i2$i$i11 = 0, $$pre$i2$i$i1140 = 0, $$pre$i2$i$i1141 = 0, $$pre39 = 0, $$pre39$pre = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $__p$i$i$i$i = 0, $isascii1$i = 0, $isascii1$i14 = 0, $isascii1$i4 = 0, $sext = 0, $tmp$i$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $__p$i$i$i$i = sp + 16|0;
 $1 = sp + 32|0;
 $2 = sp + 40|0;
 $3 = sp + 48|0;
 $4 = sp + 56|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $5 = ($1);
 $6 = HEAP32[$5>>2]|0;
 $7 = $__p$i$i$i$i;
 $8 = HEAP32[((9136))>>2]|0;
 $9 = ($8|0)==(-1);
 do {
  if (!($9)) {
   $10 = ($__p$i$i$i$i);
   HEAP32[$10>>2] = (9136);
   $11 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$11>>2] = (183);
   $12 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$12>>2] = 0;
   __THREW__ = 0;
   invoke_viii(25,(((9136))|0),($7|0),(184|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if (!($14)) {
    break;
   }
   $76 = ___cxa_find_matching_catch(-1,-1)|0;
   $77 = tempRet0;
   $78 = HEAP32[$5>>2]|0;
   $79 = ($78);
   (__ZNSt3__114__shared_count16__release_sharedEv($79)|0);
   ___resumeException($76|0);
   // unreachable;
  }
 } while(0);
 $15 = HEAP32[(((9136) + 4|0))>>2]|0;
 $16 = (($15) + -1)|0;
 $17 = (($6) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($6) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $18;
 $22 = $20;
 $23 = (($21) - ($22))|0;
 $24 = $23 >> 2;
 $25 = ($24>>>0)>($16>>>0);
 do {
  if ($25) {
   $26 = (($20) + ($16<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0|0);
   if ($28) {
    break;
   }
   $33 = $27;
   $34 = HEAP32[$5>>2]|0;
   $35 = ($34);
   (__ZNSt3__114__shared_count16__release_sharedEv($35)|0);
   HEAP32[$__err>>2] = 0;
   $36 = ($__fmtb|0)==($__fmte|0);
   $$phi$trans$insert$pre$pre = ($__b);
   L8: do {
    if ($36) {
     label = 67;
    } else {
     $37 = ($__e);
     $38 = $27;
     $39 = (($27) + 8|0);
     $40 = $39;
     $41 = $27;
     $42 = $this;
     $43 = ($3);
     $44 = ($4);
     $45 = ($2);
     $$0$ph38 = $__fmtb;$$pre39 = 0;
     L10: while(1) {
      $46 = $$pre39;
      while(1) {
       $47 = ($46|0)==(0);
       if (!($47)) {
        label = 67;
        break L8;
       }
       $48 = HEAP32[$$phi$trans$insert$pre$pre>>2]|0;
       $49 = ($48|0)==(0|0);
       do {
        if ($49) {
         $61 = 0;
        } else {
         $50 = (($48) + 12|0);
         $51 = HEAP32[$50>>2]|0;
         $52 = (($48) + 16|0);
         $53 = HEAP32[$52>>2]|0;
         $54 = ($51|0)==($53|0);
         if (!($54)) {
          $61 = $48;
          break;
         }
         $55 = $48;
         $56 = HEAP32[$55>>2]|0;
         $57 = (($56) + 36|0);
         $58 = HEAP32[$57>>2]|0;
         $59 = (FUNCTION_TABLE_ii[$58 & 127]($48)|0);
         $60 = ($59|0)==(-1);
         if (!($60)) {
          $61 = $48;
          break;
         }
         HEAP32[$$phi$trans$insert$pre$pre>>2] = 0;
         $61 = 0;
        }
       } while(0);
       $62 = ($61|0)==(0|0);
       $63 = HEAP32[$37>>2]|0;
       $64 = ($63|0)==(0|0);
       L20: do {
        if ($64) {
         label = 20;
        } else {
         $65 = (($63) + 12|0);
         $66 = HEAP32[$65>>2]|0;
         $67 = (($63) + 16|0);
         $68 = HEAP32[$67>>2]|0;
         $69 = ($66|0)==($68|0);
         do {
          if ($69) {
           $70 = $63;
           $71 = HEAP32[$70>>2]|0;
           $72 = (($71) + 36|0);
           $73 = HEAP32[$72>>2]|0;
           $74 = (FUNCTION_TABLE_ii[$73 & 127]($63)|0);
           $75 = ($74|0)==(-1);
           if (!($75)) {
            break;
           }
           HEAP32[$37>>2] = 0;
           label = 20;
           break L20;
          }
         } while(0);
         if ($62) {
          $80 = $63;
         } else {
          label = 21;
          break L10;
         }
        }
       } while(0);
       if ((label|0) == 20) {
        label = 0;
        if ($62) {
         label = 21;
         break L10;
        } else {
         $80 = 0;
        }
       }
       $81 = HEAP8[$$0$ph38]|0;
       $82 = HEAP32[$38>>2]|0;
       $83 = (($82) + 36|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = (FUNCTION_TABLE_iiii[$84 & 63]($33,$81,0)|0);
       $86 = ($85<<24>>24)==(37);
       if ($86) {
        label = 24;
        break;
       }
       $115 = HEAP8[$$0$ph38]|0;
       $isascii1$i = ($115<<24>>24)>(-1);
       if ($isascii1$i) {
        $116 = $115 << 24 >> 24;
        $117 = HEAP32[$40>>2]|0;
        $118 = (($117) + ($116<<1)|0);
        $119 = HEAP16[$118>>1]|0;
        $120 = $119 & 8192;
        $121 = ($120<<16>>16)==(0);
        if (!($121)) {
         $$0$pn = $$0$ph38;
         label = 35;
         break;
        }
       }
       $185 = (($61) + 12|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = (($61) + 16|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($186|0)==($188|0);
       if ($189) {
        $190 = $61;
        $191 = HEAP32[$190>>2]|0;
        $192 = (($191) + 36|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = (FUNCTION_TABLE_ii[$193 & 127]($61)|0);
        $$0$i$i16 = $194;
       } else {
        $195 = HEAP8[$186]|0;
        $196 = $195&255;
        $$0$i$i16 = $196;
       }
       $197 = $$0$i$i16&255;
       $198 = HEAP32[$41>>2]|0;
       $199 = (($198) + 12|0);
       $200 = HEAP32[$199>>2]|0;
       $201 = (FUNCTION_TABLE_iii[$200 & 63]($33,$197)|0);
       $202 = HEAP8[$$0$ph38]|0;
       $203 = HEAP32[$41>>2]|0;
       $204 = (($203) + 12|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = (FUNCTION_TABLE_iii[$205 & 63]($33,$202)|0);
       $207 = ($201<<24>>24)==($206<<24>>24);
       if ($207) {
        label = 62;
        break;
       }
       HEAP32[$__err>>2] = 4;
       $46 = 4;
      }
      L38: do {
       if ((label|0) == 24) {
        label = 0;
        $87 = (($$0$ph38) + 1|0);
        $88 = ($87|0)==($__fmte|0);
        if ($88) {
         label = 25;
         break L10;
        }
        $89 = HEAP8[$87]|0;
        $90 = HEAP32[$38>>2]|0;
        $91 = (($90) + 36|0);
        $92 = HEAP32[$91>>2]|0;
        $93 = (FUNCTION_TABLE_iiii[$92 & 63]($33,$89,0)|0);
        if ((($93<<24>>24) == 48) | (($93<<24>>24) == 69)) {
         $94 = (($$0$ph38) + 2|0);
         $95 = ($94|0)==($__fmte|0);
         if ($95) {
          label = 28;
          break L10;
         }
         $96 = HEAP8[$94]|0;
         $97 = HEAP32[$38>>2]|0;
         $98 = (($97) + 36|0);
         $99 = HEAP32[$98>>2]|0;
         $100 = (FUNCTION_TABLE_iiii[$99 & 63]($33,$96,0)|0);
         $$1 = $94;$__cmd$0 = $100;$__opt$0 = $93;
        } else {
         $$1 = $87;$__cmd$0 = $93;$__opt$0 = 0;
        }
        $101 = HEAP32[$42>>2]|0;
        $102 = (($101) + 36|0);
        $103 = HEAP32[$102>>2]|0;
        HEAP32[$43>>2] = $61;
        HEAP32[$44>>2] = $80;
        $104 = $$byval_copy;
        $105 = $$byval_copy;
        $106 = $3;
        ;HEAP32[$105+0>>2]=HEAP32[$106+0>>2]|0;
        $107 = $$byval_copy1;
        $108 = $$byval_copy1;
        $109 = $4;
        ;HEAP32[$108+0>>2]=HEAP32[$109+0>>2]|0;
        FUNCTION_TABLE_viiiiiiiii[$103 & 3]($2,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
        $110 = $$byval_copy1;
        $111 = $$byval_copy;
        $112 = HEAP32[$45>>2]|0;
        HEAP32[$$phi$trans$insert$pre$pre>>2] = $112;
        $113 = (($$1) + 1|0);
        $$0$ph$be = $113;
       }
       else if ((label|0) == 35) {
        while(1) {
         label = 0;
         $$2 = (($$0$pn) + 1|0);
         $122 = ($$2|0)==($__fmte|0);
         if ($122) {
          $$2$lcssa = $__fmte;
          break;
         }
         $123 = HEAP8[$$2]|0;
         $isascii1$i4 = ($123<<24>>24)>(-1);
         if (!($isascii1$i4)) {
          $$2$lcssa = $$2;
          break;
         }
         $124 = $123 << 24 >> 24;
         $125 = (($117) + ($124<<1)|0);
         $126 = HEAP16[$125>>1]|0;
         $127 = $126 & 8192;
         $128 = ($127<<16>>16)==(0);
         if ($128) {
          $$2$lcssa = $$2;
          break;
         } else {
          $$0$pn$phi = $$2;$$0$pn = $$0$pn$phi;
          label = 35;
         }
        }
        $$pre$i$i$i7 = $61;$$pre$i2$i$i11 = $80;$129 = $80;
        while(1) {
         $130 = ($$pre$i$i$i7|0)==(0|0);
         do {
          if ($130) {
           $142 = 0;
          } else {
           $131 = (($$pre$i$i$i7) + 12|0);
           $132 = HEAP32[$131>>2]|0;
           $133 = (($$pre$i$i$i7) + 16|0);
           $134 = HEAP32[$133>>2]|0;
           $135 = ($132|0)==($134|0);
           if (!($135)) {
            $142 = $$pre$i$i$i7;
            break;
           }
           $136 = $$pre$i$i$i7;
           $137 = HEAP32[$136>>2]|0;
           $138 = (($137) + 36|0);
           $139 = HEAP32[$138>>2]|0;
           $140 = (FUNCTION_TABLE_ii[$139 & 127]($$pre$i$i$i7)|0);
           $141 = ($140|0)==(-1);
           if (!($141)) {
            $142 = $$pre$i$i$i7;
            break;
           }
           HEAP32[$$phi$trans$insert$pre$pre>>2] = 0;
           $142 = 0;
          }
         } while(0);
         $143 = ($142|0)==(0|0);
         $144 = ($129|0)==(0|0);
         do {
          if ($144) {
           $$pre$i2$i$i1141 = $$pre$i2$i$i11;
           label = 48;
          } else {
           $145 = (($129) + 12|0);
           $146 = HEAP32[$145>>2]|0;
           $147 = (($129) + 16|0);
           $148 = HEAP32[$147>>2]|0;
           $149 = ($146|0)==($148|0);
           if (!($149)) {
            if ($143) {
             $$pre$i2$i$i1140 = $$pre$i2$i$i11;$157 = $129;
             break;
            } else {
             $$0$ph$be = $$2$lcssa;
             break L38;
            }
           }
           $150 = $129;
           $151 = HEAP32[$150>>2]|0;
           $152 = (($151) + 36|0);
           $153 = HEAP32[$152>>2]|0;
           $154 = (FUNCTION_TABLE_ii[$153 & 127]($129)|0);
           $155 = ($154|0)==(-1);
           if ($155) {
            HEAP32[$37>>2] = 0;
            $$pre$i2$i$i1141 = 0;
            label = 48;
            break;
           } else {
            $156 = ($$pre$i2$i$i11|0)==(0|0);
            $tmp$i$i13 = $143 ^ $156;
            if ($tmp$i$i13) {
             $$pre$i2$i$i1140 = $$pre$i2$i$i11;$157 = $$pre$i2$i$i11;
             break;
            } else {
             $$0$ph$be = $$2$lcssa;
             break L38;
            }
           }
          }
         } while(0);
         if ((label|0) == 48) {
          label = 0;
          if ($143) {
           $$0$ph$be = $$2$lcssa;
           break L38;
          } else {
           $$pre$i2$i$i1140 = $$pre$i2$i$i1141;$157 = 0;
          }
         }
         $158 = (($142) + 12|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = (($142) + 16|0);
         $161 = HEAP32[$160>>2]|0;
         $162 = ($159|0)==($161|0);
         if ($162) {
          $163 = $142;
          $164 = HEAP32[$163>>2]|0;
          $165 = (($164) + 36|0);
          $166 = HEAP32[$165>>2]|0;
          $167 = (FUNCTION_TABLE_ii[$166 & 127]($142)|0);
          $$0$i$i = $167;
         } else {
          $168 = HEAP8[$159]|0;
          $169 = $168&255;
          $$0$i$i = $169;
         }
         $170 = $$0$i$i&255;
         $isascii1$i14 = ($170<<24>>24)>(-1);
         if (!($isascii1$i14)) {
          $$0$ph$be = $$2$lcssa;
          break L38;
         }
         $sext = $$0$i$i << 24;
         $171 = $sext >> 24;
         $172 = HEAP32[$40>>2]|0;
         $173 = (($172) + ($171<<1)|0);
         $174 = HEAP16[$173>>1]|0;
         $175 = $174 & 8192;
         $176 = ($175<<16>>16)==(0);
         if ($176) {
          $$0$ph$be = $$2$lcssa;
          break L38;
         }
         $177 = HEAP32[$158>>2]|0;
         $178 = HEAP32[$160>>2]|0;
         $179 = ($177|0)==($178|0);
         if ($179) {
          $180 = $142;
          $181 = HEAP32[$180>>2]|0;
          $182 = (($181) + 40|0);
          $183 = HEAP32[$182>>2]|0;
          (FUNCTION_TABLE_ii[$183 & 127]($142)|0);
          $$pre$i$i$i7 = $142;$$pre$i2$i$i11 = $$pre$i2$i$i1140;$129 = $157;
          continue;
         } else {
          $184 = (($177) + 1|0);
          HEAP32[$158>>2] = $184;
          $$pre$i$i$i7 = $142;$$pre$i2$i$i11 = $$pre$i2$i$i1140;$129 = $157;
          continue;
         }
        }
       }
       else if ((label|0) == 62) {
        label = 0;
        $208 = HEAP32[$185>>2]|0;
        $209 = HEAP32[$187>>2]|0;
        $210 = ($208|0)==($209|0);
        if ($210) {
         $211 = $61;
         $212 = HEAP32[$211>>2]|0;
         $213 = (($212) + 40|0);
         $214 = HEAP32[$213>>2]|0;
         (FUNCTION_TABLE_ii[$214 & 127]($61)|0);
        } else {
         $215 = (($208) + 1|0);
         HEAP32[$185>>2] = $215;
        }
        $216 = (($$0$ph38) + 1|0);
        $$0$ph$be = $216;
       }
      } while(0);
      $114 = ($$0$ph$be|0)==($__fmte|0);
      if ($114) {
       label = 67;
       break L8;
      }
      $$pre39$pre = HEAP32[$__err>>2]|0;
      $$0$ph38 = $$0$ph$be;$$pre39 = $$pre39$pre;
     }
     if ((label|0) == 21) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i20 = $61;
      break;
     }
     else if ((label|0) == 25) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i20 = $61;
      break;
     }
     else if ((label|0) == 28) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i20 = $61;
      break;
     }
    }
   } while(0);
   if ((label|0) == 67) {
    $$pre = HEAP32[$$phi$trans$insert$pre$pre>>2]|0;
    $$pre$i$i$i20 = $$pre;
   }
   $217 = ($__b);
   $218 = ($$pre$i$i$i20|0)==(0|0);
   do {
    if ($218) {
     $230 = 0;
    } else {
     $219 = (($$pre$i$i$i20) + 12|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = (($$pre$i$i$i20) + 16|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = ($220|0)==($222|0);
     if (!($223)) {
      $230 = $$pre$i$i$i20;
      break;
     }
     $224 = $$pre$i$i$i20;
     $225 = HEAP32[$224>>2]|0;
     $226 = (($225) + 36|0);
     $227 = HEAP32[$226>>2]|0;
     $228 = (FUNCTION_TABLE_ii[$227 & 127]($$pre$i$i$i20)|0);
     $229 = ($228|0)==(-1);
     if (!($229)) {
      $230 = $$pre$i$i$i20;
      break;
     }
     HEAP32[$217>>2] = 0;
     $230 = 0;
    }
   } while(0);
   $231 = ($230|0)==(0|0);
   $232 = ($__e);
   $233 = HEAP32[$232>>2]|0;
   $234 = ($233|0)==(0|0);
   L96: do {
    if ($234) {
     label = 77;
    } else {
     $235 = (($233) + 12|0);
     $236 = HEAP32[$235>>2]|0;
     $237 = (($233) + 16|0);
     $238 = HEAP32[$237>>2]|0;
     $239 = ($236|0)==($238|0);
     do {
      if ($239) {
       $240 = $233;
       $241 = HEAP32[$240>>2]|0;
       $242 = (($241) + 36|0);
       $243 = HEAP32[$242>>2]|0;
       $244 = (FUNCTION_TABLE_ii[$243 & 127]($233)|0);
       $245 = ($244|0)==(-1);
       if (!($245)) {
        break;
       }
       HEAP32[$232>>2] = 0;
       label = 77;
       break L96;
      }
     } while(0);
     if (!($231)) {
      break;
     }
     $248 = ($agg$result);
     HEAP32[$248>>2] = $230;
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 77) {
     if ($231) {
      break;
     }
     $248 = ($agg$result);
     HEAP32[$248>>2] = $230;
     STACKTOP = sp;return;
    }
   } while(0);
   $246 = HEAP32[$__err>>2]|0;
   $247 = $246 | 2;
   HEAP32[$__err>>2] = $247;
   $248 = ($agg$result);
   HEAP32[$248>>2] = $230;
   STACKTOP = sp;return;
  }
 } while(0);
 $29 = (___cxa_allocate_exception(4)|0);
 $30 = $29;
 __ZNSt8bad_castC2Ev($30);
 __THREW__ = 0;
 invoke_viii(12,($29|0),((17096)|0),((143)|0));
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $76 = ___cxa_find_matching_catch(-1,-1)|0;
  $77 = tempRet0;
  $78 = HEAP32[$5>>2]|0;
  $79 = ($78);
  (__ZNSt3__114__shared_count16__release_sharedEv($79)|0);
  ___resumeException($76|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $3 = ($__b);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1);
 HEAP32[$5>>2] = $4;
 $6 = ($__e);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($2);
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,(8040),((8040 + 8|0)));
 $15 = $$byval_copy1;
 $16 = $$byval_copy;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $3 = (($this) + 8|0);
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 127]($3)|0);
 $9 = ($__b);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($1);
 HEAP32[$11>>2] = $10;
 $12 = ($__e);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($2);
 HEAP32[$14>>2] = $13;
 $15 = $8;
 $16 = HEAP8[$15]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  $23 = $8;
  $24 = (($23) + 1|0);
  $25 = $8;
  $26 = (($25) + 1|0);
  $27 = $16&255;
  $28 = $27 >>> 1;
  $29 = $26;$30 = $24;$31 = $28;
 } else {
  $19 = (($8) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($8) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $29 = $20;$30 = $20;$31 = $22;
 }
 $32 = (($29) + ($31)|0);
 $33 = $$byval_copy;
 $34 = $$byval_copy;
 $35 = $1;
 ;HEAP32[$34+0>>2]=HEAP32[$35+0>>2]|0;
 $36 = $$byval_copy1;
 $37 = $$byval_copy1;
 $38 = $2;
 ;HEAP32[$37+0>>2]=HEAP32[$38+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$30,$32);
 $39 = $$byval_copy1;
 $40 = $$byval_copy;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $$byval_copy = sp;
 $1 = sp + 8|0;
 $__p$i$i$i$i = sp + 16|0;
 $2 = sp + 32|0;
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = $__p$i$i$i$i;
 $6 = HEAP32[((9136))>>2]|0;
 $7 = ($6|0)==(-1);
 do {
  if (!($7)) {
   $8 = ($__p$i$i$i$i);
   HEAP32[$8>>2] = (9136);
   $9 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$9>>2] = (183);
   $10 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$10>>2] = 0;
   __THREW__ = 0;
   invoke_viii(25,(((9136))|0),($5|0),(184|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if (!($12)) {
    break;
   }
   $59 = ___cxa_find_matching_catch(-1,-1)|0;
   $60 = tempRet0;
   $61 = HEAP32[$3>>2]|0;
   $62 = ($61);
   (__ZNSt3__114__shared_count16__release_sharedEv($62)|0);
   ___resumeException($59|0);
   // unreachable;
  }
 } while(0);
 $13 = HEAP32[(((9136) + 4|0))>>2]|0;
 $14 = (($13) + -1)|0;
 $15 = (($4) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($4) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $16;
 $20 = $18;
 $21 = (($19) - ($20))|0;
 $22 = $21 >> 2;
 $23 = ($22>>>0)>($14>>>0);
 do {
  if ($23) {
   $24 = (($18) + ($14<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    break;
   }
   $31 = $25;
   $32 = HEAP32[$3>>2]|0;
   $33 = ($32);
   (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
   $34 = ($__e);
   $35 = HEAP32[$34>>2]|0;
   $36 = $1;
   $37 = (($this) + 8|0);
   $38 = $37;
   $39 = HEAP32[$38>>2]|0;
   $40 = HEAP32[$39>>2]|0;
   $41 = (FUNCTION_TABLE_ii[$40 & 127]($37)|0);
   $42 = ($1);
   HEAP32[$42>>2] = $35;
   $43 = (($41) + 168|0);
   $44 = $$byval_copy;
   $45 = $$byval_copy;
   $46 = $1;
   ;HEAP32[$45+0>>2]=HEAP32[$46+0>>2]|0;
   $47 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$41,$43,$31,$__err,0)|0);
   $48 = $$byval_copy;
   $49 = $47;
   $50 = $41;
   $51 = (($49) - ($50))|0;
   $52 = ($51|0)<(168);
   if (!($52)) {
    $56 = ($__b);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($agg$result);
    HEAP32[$58>>2] = $57;
    STACKTOP = sp;return;
   }
   $53 = (($__tm) + 24|0);
   $54 = (($51|0) / 12)&-1;
   $55 = (($54|0) % 7)&-1;
   HEAP32[$53>>2] = $55;
   $56 = ($__b);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($agg$result);
   HEAP32[$58>>2] = $57;
   STACKTOP = sp;return;
  }
 } while(0);
 $27 = (___cxa_allocate_exception(4)|0);
 $28 = $27;
 __ZNSt8bad_castC2Ev($28);
 __THREW__ = 0;
 invoke_viii(12,($27|0),((17096)|0),((143)|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $59 = ___cxa_find_matching_catch(-1,-1)|0;
  $60 = tempRet0;
  $61 = HEAP32[$3>>2]|0;
  $62 = ($61);
  (__ZNSt3__114__shared_count16__release_sharedEv($62)|0);
  ___resumeException($59|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $$byval_copy = sp;
 $1 = sp + 8|0;
 $__p$i$i$i$i = sp + 16|0;
 $2 = sp + 32|0;
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = $__p$i$i$i$i;
 $6 = HEAP32[((9136))>>2]|0;
 $7 = ($6|0)==(-1);
 do {
  if (!($7)) {
   $8 = ($__p$i$i$i$i);
   HEAP32[$8>>2] = (9136);
   $9 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$9>>2] = (183);
   $10 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$10>>2] = 0;
   __THREW__ = 0;
   invoke_viii(25,(((9136))|0),($5|0),(184|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if (!($12)) {
    break;
   }
   $60 = ___cxa_find_matching_catch(-1,-1)|0;
   $61 = tempRet0;
   $62 = HEAP32[$3>>2]|0;
   $63 = ($62);
   (__ZNSt3__114__shared_count16__release_sharedEv($63)|0);
   ___resumeException($60|0);
   // unreachable;
  }
 } while(0);
 $13 = HEAP32[(((9136) + 4|0))>>2]|0;
 $14 = (($13) + -1)|0;
 $15 = (($4) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($4) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $16;
 $20 = $18;
 $21 = (($19) - ($20))|0;
 $22 = $21 >> 2;
 $23 = ($22>>>0)>($14>>>0);
 do {
  if ($23) {
   $24 = (($18) + ($14<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    break;
   }
   $31 = $25;
   $32 = HEAP32[$3>>2]|0;
   $33 = ($32);
   (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
   $34 = ($__e);
   $35 = HEAP32[$34>>2]|0;
   $36 = $1;
   $37 = (($this) + 8|0);
   $38 = $37;
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (FUNCTION_TABLE_ii[$41 & 127]($37)|0);
   $43 = ($1);
   HEAP32[$43>>2] = $35;
   $44 = (($42) + 288|0);
   $45 = $$byval_copy;
   $46 = $$byval_copy;
   $47 = $1;
   ;HEAP32[$46+0>>2]=HEAP32[$47+0>>2]|0;
   $48 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$42,$44,$31,$__err,0)|0);
   $49 = $$byval_copy;
   $50 = $48;
   $51 = $42;
   $52 = (($50) - ($51))|0;
   $53 = ($52|0)<(288);
   if (!($53)) {
    $57 = ($__b);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($agg$result);
    HEAP32[$59>>2] = $58;
    STACKTOP = sp;return;
   }
   $54 = (($__tm) + 16|0);
   $55 = (($52|0) / 12)&-1;
   $56 = (($55|0) % 12)&-1;
   HEAP32[$54>>2] = $56;
   $57 = ($__b);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($agg$result);
   HEAP32[$59>>2] = $58;
   STACKTOP = sp;return;
  }
 } while(0);
 $27 = (___cxa_allocate_exception(4)|0);
 $28 = $27;
 __ZNSt8bad_castC2Ev($28);
 __THREW__ = 0;
 invoke_viii(12,($27|0),((17096)|0),((143)|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $60 = ___cxa_find_matching_catch(-1,-1)|0;
  $61 = tempRet0;
  $62 = HEAP32[$3>>2]|0;
  $63 = ($62);
  (__ZNSt3__114__shared_count16__release_sharedEv($63)|0);
  ___resumeException($60|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$$i = 0, $$byval_copy = 0, $$off$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $$byval_copy = sp;
 $1 = sp + 8|0;
 $__p$i$i$i$i = sp + 16|0;
 $2 = sp + 32|0;
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = $__p$i$i$i$i;
 $6 = HEAP32[((9136))>>2]|0;
 $7 = ($6|0)==(-1);
 do {
  if (!($7)) {
   $8 = ($__p$i$i$i$i);
   HEAP32[$8>>2] = (9136);
   $9 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$9>>2] = (183);
   $10 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$10>>2] = 0;
   __THREW__ = 0;
   invoke_viii(25,(((9136))|0),($5|0),(184|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if (!($12)) {
    break;
   }
   $55 = ___cxa_find_matching_catch(-1,-1)|0;
   $56 = tempRet0;
   $57 = HEAP32[$3>>2]|0;
   $58 = ($57);
   (__ZNSt3__114__shared_count16__release_sharedEv($58)|0);
   ___resumeException($55|0);
   // unreachable;
  }
 } while(0);
 $13 = HEAP32[(((9136) + 4|0))>>2]|0;
 $14 = (($13) + -1)|0;
 $15 = (($4) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($4) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $16;
 $20 = $18;
 $21 = (($19) - ($20))|0;
 $22 = $21 >> 2;
 $23 = ($22>>>0)>($14>>>0);
 do {
  if ($23) {
   $24 = (($18) + ($14<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    break;
   }
   $31 = $25;
   $32 = HEAP32[$3>>2]|0;
   $33 = ($32);
   (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
   $34 = (($__tm) + 20|0);
   $35 = ($__e);
   $36 = HEAP32[$35>>2]|0;
   $37 = $1;
   $38 = ($1);
   HEAP32[$38>>2] = $36;
   $39 = $$byval_copy;
   $40 = $$byval_copy;
   $41 = $1;
   ;HEAP32[$40+0>>2]=HEAP32[$41+0>>2]|0;
   $42 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$31,4)|0);
   $43 = $$byval_copy;
   $44 = HEAP32[$__err>>2]|0;
   $45 = $44 & 4;
   $46 = ($45|0)==(0);
   if (!($46)) {
    $52 = ($__b);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($agg$result);
    HEAP32[$54>>2] = $53;
    STACKTOP = sp;return;
   }
   $47 = ($42|0)<(69);
   if ($47) {
    $48 = (($42) + 2000)|0;
    $__t$0$i = $48;
   } else {
    $$off$i = (($42) + -69)|0;
    $49 = ($$off$i>>>0)<(31);
    $50 = (($42) + 1900)|0;
    $$$i = $49 ? $50 : $42;
    $__t$0$i = $$$i;
   }
   $51 = (($__t$0$i) + -1900)|0;
   HEAP32[$34>>2] = $51;
   $52 = ($__b);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($agg$result);
   HEAP32[$54>>2] = $53;
   STACKTOP = sp;return;
  }
 } while(0);
 $27 = (___cxa_allocate_exception(4)|0);
 $28 = $27;
 __ZNSt8bad_castC2Ev($28);
 __THREW__ = 0;
 invoke_viii(12,($27|0),((17096)|0),((143)|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $55 = ___cxa_find_matching_catch(-1,-1)|0;
  $56 = tempRet0;
  $57 = HEAP32[$3>>2]|0;
  $58 = ($57);
  (__ZNSt3__114__shared_count16__release_sharedEv($58)|0);
  ___resumeException($55|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,u$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 u$0 = u$0|0;
 var $$$i = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0;
 var $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$off$i = 0, $$off$i12 = 0, $$off$i35 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, $or$cond$i = 0, $or$cond$i15 = 0, $or$cond$i18 = 0;
 var $or$cond$i21 = 0, $or$cond$i26 = 0, $or$cond$i29 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0;
 $$byval_copy30 = sp;
 $$byval_copy29 = sp + 8|0;
 $$byval_copy28 = sp + 16|0;
 $$byval_copy27 = sp + 24|0;
 $$byval_copy26 = sp + 32|0;
 $$byval_copy25 = sp + 40|0;
 $$byval_copy24 = sp + 48|0;
 $$byval_copy23 = sp + 56|0;
 $$byval_copy22 = sp + 64|0;
 $$byval_copy21 = sp + 72|0;
 $$byval_copy20 = sp + 80|0;
 $$byval_copy19 = sp + 88|0;
 $$byval_copy18 = sp + 96|0;
 $$byval_copy17 = sp + 104|0;
 $$byval_copy16 = sp + 112|0;
 $$byval_copy15 = sp + 120|0;
 $$byval_copy14 = sp + 128|0;
 $$byval_copy13 = sp + 136|0;
 $$byval_copy12 = sp + 144|0;
 $$byval_copy11 = sp + 152|0;
 $$byval_copy10 = sp + 160|0;
 $$byval_copy9 = sp + 168|0;
 $$byval_copy8 = sp + 176|0;
 $$byval_copy7 = sp + 184|0;
 $$byval_copy6 = sp + 192|0;
 $$byval_copy5 = sp + 200|0;
 $$byval_copy4 = sp + 208|0;
 $$byval_copy3 = sp + 216|0;
 $$byval_copy2 = sp + 224|0;
 $$byval_copy1 = sp + 232|0;
 $$byval_copy = sp + 240|0;
 $1 = sp + 248|0;
 $2 = sp + 256|0;
 $3 = sp + 264|0;
 $4 = sp + 272|0;
 $5 = sp + 280|0;
 $6 = sp + 288|0;
 $7 = sp + 296|0;
 $8 = sp + 304|0;
 $9 = sp + 312|0;
 $10 = sp + 320|0;
 $11 = sp + 328|0;
 $12 = sp + 336|0;
 $13 = sp + 344|0;
 $__p$i$i$i$i = sp + 352|0;
 $14 = sp + 368|0;
 $15 = sp + 376|0;
 $16 = sp + 384|0;
 $17 = sp + 392|0;
 $18 = sp + 400|0;
 $19 = sp + 408|0;
 $20 = sp + 416|0;
 $21 = sp + 424|0;
 $22 = sp + 432|0;
 $23 = sp + 440|0;
 $24 = sp + 448|0;
 $25 = sp + 456|0;
 $26 = sp + 464|0;
 $27 = sp + 472|0;
 $28 = sp + 480|0;
 $29 = sp + 488|0;
 $30 = sp + 496|0;
 $31 = sp + 504|0;
 $32 = sp + 512|0;
 $33 = sp + 520|0;
 $34 = sp + 528|0;
 $35 = sp + 536|0;
 $36 = sp + 544|0;
 $37 = sp + 552|0;
 $38 = sp + 560|0;
 $39 = sp + 568|0;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($14,$__iob);
 $40 = ($14);
 $41 = HEAP32[$40>>2]|0;
 $42 = $__p$i$i$i$i;
 $43 = HEAP32[((9136))>>2]|0;
 $44 = ($43|0)==(-1);
 do {
  if (!($44)) {
   $45 = ($__p$i$i$i$i);
   HEAP32[$45>>2] = (9136);
   $46 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$46>>2] = (183);
   $47 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$47>>2] = 0;
   __THREW__ = 0;
   invoke_viii(25,(((9136))|0),($42|0),(184|0));
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   if (!($49)) {
    break;
   }
   $72 = ___cxa_find_matching_catch(-1,-1)|0;
   $73 = tempRet0;
   $74 = HEAP32[$40>>2]|0;
   $75 = ($74);
   (__ZNSt3__114__shared_count16__release_sharedEv($75)|0);
   ___resumeException($72|0);
   // unreachable;
  }
 } while(0);
 $50 = HEAP32[(((9136) + 4|0))>>2]|0;
 $51 = (($50) + -1)|0;
 $52 = (($41) + 12|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($41) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $53;
 $57 = $55;
 $58 = (($56) - ($57))|0;
 $59 = $58 >> 2;
 $60 = ($59>>>0)>($51>>>0);
 do {
  if ($60) {
   $61 = (($55) + ($51<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)==(0|0);
   if ($63) {
    break;
   }
   $68 = $62;
   $69 = HEAP32[$40>>2]|0;
   $70 = ($69);
   (__ZNSt3__114__shared_count16__release_sharedEv($70)|0);
   $71 = $__fmt << 24 >> 24;
   L8: do {
    switch ($71|0) {
    case 65: case 97:  {
     $76 = ($__e);
     $77 = HEAP32[$76>>2]|0;
     $78 = $13;
     $79 = (($this) + 8|0);
     $80 = $79;
     $81 = HEAP32[$80>>2]|0;
     $82 = HEAP32[$81>>2]|0;
     $83 = (FUNCTION_TABLE_ii[$82 & 127]($79)|0);
     $84 = ($13);
     HEAP32[$84>>2] = $77;
     $85 = (($83) + 168|0);
     $86 = $$byval_copy;
     $87 = $$byval_copy;
     $88 = $13;
     ;HEAP32[$87+0>>2]=HEAP32[$88+0>>2]|0;
     $89 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$83,$85,$68,$__err,0)|0);
     $90 = $$byval_copy;
     $91 = $89;
     $92 = $83;
     $93 = (($91) - ($92))|0;
     $94 = ($93|0)<(168);
     if (!($94)) {
      break L8;
     }
     $95 = (($__tm) + 24|0);
     $96 = (($93|0) / 12)&-1;
     $97 = (($96|0) % 7)&-1;
     HEAP32[$95>>2] = $97;
     break;
    }
    case 114:  {
     $341 = ($__b);
     $342 = HEAP32[$341>>2]|0;
     $343 = ($26);
     HEAP32[$343>>2] = $342;
     $344 = ($__e);
     $345 = HEAP32[$344>>2]|0;
     $346 = ($27);
     HEAP32[$346>>2] = $345;
     $347 = $$byval_copy16;
     $348 = $$byval_copy16;
     $349 = $26;
     ;HEAP32[$348+0>>2]=HEAP32[$349+0>>2]|0;
     $350 = $$byval_copy17;
     $351 = $$byval_copy17;
     $352 = $27;
     ;HEAP32[$351+0>>2]=HEAP32[$352+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($25,$this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,(8064),((8064 + 11|0)));
     $353 = $$byval_copy17;
     $354 = $$byval_copy16;
     $355 = ($25);
     $356 = HEAP32[$355>>2]|0;
     HEAP32[$341>>2] = $356;
     break;
    }
    case 82:  {
     $357 = ($__b);
     $358 = HEAP32[$357>>2]|0;
     $359 = ($29);
     HEAP32[$359>>2] = $358;
     $360 = ($__e);
     $361 = HEAP32[$360>>2]|0;
     $362 = ($30);
     HEAP32[$362>>2] = $361;
     $363 = $$byval_copy18;
     $364 = $$byval_copy18;
     $365 = $29;
     ;HEAP32[$364+0>>2]=HEAP32[$365+0>>2]|0;
     $366 = $$byval_copy19;
     $367 = $$byval_copy19;
     $368 = $30;
     ;HEAP32[$367+0>>2]=HEAP32[$368+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($28,$this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,(8080),((8080 + 5|0)));
     $369 = $$byval_copy19;
     $370 = $$byval_copy18;
     $371 = ($28);
     $372 = HEAP32[$371>>2]|0;
     HEAP32[$357>>2] = $372;
     break;
    }
    case 112:  {
     $291 = (($__tm) + 8|0);
     $292 = ($__e);
     $293 = HEAP32[$292>>2]|0;
     $294 = $5;
     $295 = (($this) + 8|0);
     $296 = $295;
     $297 = HEAP32[$296>>2]|0;
     $298 = (($297) + 8|0);
     $299 = HEAP32[$298>>2]|0;
     $300 = (FUNCTION_TABLE_ii[$299 & 127]($295)|0);
     $301 = $300;
     $302 = HEAP8[$301]|0;
     $303 = $302 & 1;
     $304 = ($303<<24>>24)==(0);
     if ($304) {
      $307 = $302&255;
      $308 = $307 >>> 1;
      $309 = $308;
     } else {
      $305 = (($300) + 4|0);
      $306 = HEAP32[$305>>2]|0;
      $309 = $306;
     }
     $310 = (($300) + 12|0);
     $311 = $310;
     $312 = HEAP8[$311]|0;
     $313 = $312 & 1;
     $314 = ($313<<24>>24)==(0);
     if ($314) {
      $317 = $312&255;
      $318 = $317 >>> 1;
      $319 = $318;
     } else {
      $315 = (($300) + 16|0);
      $316 = HEAP32[$315>>2]|0;
      $319 = $316;
     }
     $320 = (0 - ($319))|0;
     $321 = ($309|0)==($320|0);
     if ($321) {
      $322 = HEAP32[$__err>>2]|0;
      $323 = $322 | 4;
      HEAP32[$__err>>2] = $323;
      break L8;
     }
     $324 = ($5);
     HEAP32[$324>>2] = $293;
     $325 = (($300) + 24|0);
     $326 = $$byval_copy15;
     $327 = $$byval_copy15;
     $328 = $5;
     ;HEAP32[$327+0>>2]=HEAP32[$328+0>>2]|0;
     $329 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy15,$300,$325,$68,$__err,0)|0);
     $330 = $$byval_copy15;
     $331 = $329;
     $332 = $300;
     $333 = (($331) - ($332))|0;
     $334 = ($329|0)==($300|0);
     do {
      if ($334) {
       $335 = HEAP32[$291>>2]|0;
       $336 = ($335|0)==(12);
       if (!($336)) {
        break;
       }
       HEAP32[$291>>2] = 0;
       break L8;
      }
     } while(0);
     $337 = ($333|0)==(12);
     if (!($337)) {
      break L8;
     }
     $338 = HEAP32[$291>>2]|0;
     $339 = ($338|0)<(12);
     if (!($339)) {
      break L8;
     }
     $340 = (($338) + 12)|0;
     HEAP32[$291>>2] = $340;
     break;
    }
    case 84:  {
     $388 = ($__b);
     $389 = HEAP32[$388>>2]|0;
     $390 = ($32);
     HEAP32[$390>>2] = $389;
     $391 = ($__e);
     $392 = HEAP32[$391>>2]|0;
     $393 = ($33);
     HEAP32[$393>>2] = $392;
     $394 = $$byval_copy21;
     $395 = $$byval_copy21;
     $396 = $32;
     ;HEAP32[$395+0>>2]=HEAP32[$396+0>>2]|0;
     $397 = $$byval_copy22;
     $398 = $$byval_copy22;
     $399 = $33;
     ;HEAP32[$398+0>>2]=HEAP32[$399+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($31,$this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,(8088),((8088 + 8|0)));
     $400 = $$byval_copy22;
     $401 = $$byval_copy21;
     $402 = ($31);
     $403 = HEAP32[$402>>2]|0;
     HEAP32[$388>>2] = $403;
     break;
    }
    case 119:  {
     $404 = ($__e);
     $405 = HEAP32[$404>>2]|0;
     $406 = $3;
     $407 = ($3);
     HEAP32[$407>>2] = $405;
     $408 = $$byval_copy23;
     $409 = $$byval_copy23;
     $410 = $3;
     ;HEAP32[$409+0>>2]=HEAP32[$410+0>>2]|0;
     $411 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy23,$__err,$68,1)|0);
     $412 = $$byval_copy23;
     $413 = HEAP32[$__err>>2]|0;
     $414 = $413 & 4;
     $415 = ($414|0)==(0);
     $416 = ($411|0)<(7);
     $or$cond$i29 = $415 & $416;
     if ($or$cond$i29) {
      $417 = (($__tm) + 24|0);
      HEAP32[$417>>2] = $411;
      break L8;
     } else {
      $418 = $413 | 4;
      HEAP32[$__err>>2] = $418;
      break L8;
     }
     break;
    }
    case 120:  {
     $419 = $this;
     $420 = HEAP32[$419>>2]|0;
     $421 = (($420) + 20|0);
     $422 = HEAP32[$421>>2]|0;
     $423 = ($__b);
     $424 = HEAP32[$423>>2]|0;
     $425 = ($34);
     HEAP32[$425>>2] = $424;
     $426 = ($__e);
     $427 = HEAP32[$426>>2]|0;
     $428 = ($35);
     HEAP32[$428>>2] = $427;
     $429 = $$byval_copy24;
     $430 = $$byval_copy24;
     $431 = $34;
     ;HEAP32[$430+0>>2]=HEAP32[$431+0>>2]|0;
     $432 = $$byval_copy25;
     $433 = $$byval_copy25;
     $434 = $35;
     ;HEAP32[$433+0>>2]=HEAP32[$434+0>>2]|0;
     FUNCTION_TABLE_viiiiiii[$422 & 63]($agg$result,$this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm);
     $435 = $$byval_copy25;
     $436 = $$byval_copy24;
     STACKTOP = sp;return;
     break;
    }
    case 88:  {
     $437 = (($this) + 8|0);
     $438 = $437;
     $439 = HEAP32[$438>>2]|0;
     $440 = (($439) + 24|0);
     $441 = HEAP32[$440>>2]|0;
     $442 = (FUNCTION_TABLE_ii[$441 & 127]($437)|0);
     $443 = ($__b);
     $444 = HEAP32[$443>>2]|0;
     $445 = ($37);
     HEAP32[$445>>2] = $444;
     $446 = ($__e);
     $447 = HEAP32[$446>>2]|0;
     $448 = ($38);
     HEAP32[$448>>2] = $447;
     $449 = $442;
     $450 = HEAP8[$449]|0;
     $451 = $450 & 1;
     $452 = ($451<<24>>24)==(0);
     if ($452) {
      $457 = $442;
      $458 = (($457) + 1|0);
      $459 = $442;
      $460 = (($459) + 1|0);
      $461 = $450&255;
      $462 = $461 >>> 1;
      $463 = $460;$464 = $458;$465 = $462;
     } else {
      $453 = (($442) + 8|0);
      $454 = HEAP32[$453>>2]|0;
      $455 = (($442) + 4|0);
      $456 = HEAP32[$455>>2]|0;
      $463 = $454;$464 = $454;$465 = $456;
     }
     $466 = (($463) + ($465)|0);
     $467 = $$byval_copy26;
     $468 = $$byval_copy26;
     $469 = $37;
     ;HEAP32[$468+0>>2]=HEAP32[$469+0>>2]|0;
     $470 = $$byval_copy27;
     $471 = $$byval_copy27;
     $472 = $38;
     ;HEAP32[$471+0>>2]=HEAP32[$472+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($36,$this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$464,$466);
     $473 = $$byval_copy27;
     $474 = $$byval_copy26;
     $475 = ($36);
     $476 = HEAP32[$475>>2]|0;
     HEAP32[$443>>2] = $476;
     break;
    }
    case 121:  {
     $477 = (($__tm) + 20|0);
     $478 = ($__e);
     $479 = HEAP32[$478>>2]|0;
     $480 = $2;
     $481 = ($2);
     HEAP32[$481>>2] = $479;
     $482 = $$byval_copy28;
     $483 = $$byval_copy28;
     $484 = $2;
     ;HEAP32[$483+0>>2]=HEAP32[$484+0>>2]|0;
     $485 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy28,$__err,$68,4)|0);
     $486 = $$byval_copy28;
     $487 = HEAP32[$__err>>2]|0;
     $488 = $487 & 4;
     $489 = ($488|0)==(0);
     if (!($489)) {
      break L8;
     }
     $490 = ($485|0)<(69);
     if ($490) {
      $491 = (($485) + 2000)|0;
      $__t$0$i = $491;
     } else {
      $$off$i35 = (($485) + -69)|0;
      $492 = ($$off$i35>>>0)<(31);
      $493 = (($485) + 1900)|0;
      $$$i = $492 ? $493 : $485;
      $__t$0$i = $$$i;
     }
     $494 = (($__t$0$i) + -1900)|0;
     HEAP32[$477>>2] = $494;
     break;
    }
    case 106:  {
     $238 = ($__e);
     $239 = HEAP32[$238>>2]|0;
     $240 = $8;
     $241 = ($8);
     HEAP32[$241>>2] = $239;
     $242 = $$byval_copy11;
     $243 = $$byval_copy11;
     $244 = $8;
     ;HEAP32[$243+0>>2]=HEAP32[$244+0>>2]|0;
     $245 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy11,$__err,$68,3)|0);
     $246 = $$byval_copy11;
     $247 = HEAP32[$__err>>2]|0;
     $248 = $247 & 4;
     $249 = ($248|0)==(0);
     $250 = ($245|0)<(366);
     $or$cond$i15 = $249 & $250;
     if ($or$cond$i15) {
      $251 = (($__tm) + 28|0);
      HEAP32[$251>>2] = $245;
      break L8;
     } else {
      $252 = $247 | 4;
      HEAP32[$__err>>2] = $252;
      break L8;
     }
     break;
    }
    case 109:  {
     $253 = ($__e);
     $254 = HEAP32[$253>>2]|0;
     $255 = $7;
     $256 = ($7);
     HEAP32[$256>>2] = $254;
     $257 = $$byval_copy12;
     $258 = $$byval_copy12;
     $259 = $7;
     ;HEAP32[$258+0>>2]=HEAP32[$259+0>>2]|0;
     $260 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy12,$__err,$68,2)|0);
     $261 = $$byval_copy12;
     $262 = HEAP32[$__err>>2]|0;
     $263 = $262 & 4;
     $264 = ($263|0)==(0);
     $265 = ($260|0)<(13);
     $or$cond$i18 = $264 & $265;
     if ($or$cond$i18) {
      $266 = (($__tm) + 16|0);
      $267 = (($260) + -1)|0;
      HEAP32[$266>>2] = $267;
      break L8;
     } else {
      $268 = $262 | 4;
      HEAP32[$__err>>2] = $268;
      break L8;
     }
     break;
    }
    case 70:  {
     $192 = ($__b);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($22);
     HEAP32[$194>>2] = $193;
     $195 = ($__e);
     $196 = HEAP32[$195>>2]|0;
     $197 = ($23);
     HEAP32[$197>>2] = $196;
     $198 = $$byval_copy7;
     $199 = $$byval_copy7;
     $200 = $22;
     ;HEAP32[$199+0>>2]=HEAP32[$200+0>>2]|0;
     $201 = $$byval_copy8;
     $202 = $$byval_copy8;
     $203 = $23;
     ;HEAP32[$202+0>>2]=HEAP32[$203+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($21,$this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,(8056),((8056 + 8|0)));
     $204 = $$byval_copy8;
     $205 = $$byval_copy7;
     $206 = ($21);
     $207 = HEAP32[$206>>2]|0;
     HEAP32[$192>>2] = $207;
     break;
    }
    case 77:  {
     $269 = ($__e);
     $270 = HEAP32[$269>>2]|0;
     $271 = $6;
     $272 = ($6);
     HEAP32[$272>>2] = $270;
     $273 = $$byval_copy13;
     $274 = $$byval_copy13;
     $275 = $6;
     ;HEAP32[$274+0>>2]=HEAP32[$275+0>>2]|0;
     $276 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy13,$__err,$68,2)|0);
     $277 = $$byval_copy13;
     $278 = HEAP32[$__err>>2]|0;
     $279 = $278 & 4;
     $280 = ($279|0)==(0);
     $281 = ($276|0)<(60);
     $or$cond$i21 = $280 & $281;
     if ($or$cond$i21) {
      $282 = (($__tm) + 4|0);
      HEAP32[$282>>2] = $276;
      break L8;
     } else {
      $283 = $278 | 4;
      HEAP32[$__err>>2] = $283;
      break L8;
     }
     break;
    }
    case 116: case 110:  {
     $284 = ($__e);
     $285 = HEAP32[$284>>2]|0;
     $286 = ($24);
     HEAP32[$286>>2] = $285;
     $287 = $$byval_copy14;
     $288 = $$byval_copy14;
     $289 = $24;
     ;HEAP32[$288+0>>2]=HEAP32[$289+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$$byval_copy14,$__err,$68);
     $290 = $$byval_copy14;
     break;
    }
    case 83:  {
     $373 = ($__e);
     $374 = HEAP32[$373>>2]|0;
     $375 = $4;
     $376 = ($4);
     HEAP32[$376>>2] = $374;
     $377 = $$byval_copy20;
     $378 = $$byval_copy20;
     $379 = $4;
     ;HEAP32[$378+0>>2]=HEAP32[$379+0>>2]|0;
     $380 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy20,$__err,$68,2)|0);
     $381 = $$byval_copy20;
     $382 = HEAP32[$__err>>2]|0;
     $383 = $382 & 4;
     $384 = ($383|0)==(0);
     $385 = ($380|0)<(61);
     $or$cond$i26 = $384 & $385;
     if ($or$cond$i26) {
      $386 = ($__tm);
      HEAP32[$386>>2] = $380;
      break L8;
     } else {
      $387 = $382 | 4;
      HEAP32[$__err>>2] = $387;
      break L8;
     }
     break;
    }
    case 104: case 66: case 98:  {
     $98 = ($__e);
     $99 = HEAP32[$98>>2]|0;
     $100 = $12;
     $101 = (($this) + 8|0);
     $102 = $101;
     $103 = HEAP32[$102>>2]|0;
     $104 = (($103) + 4|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = (FUNCTION_TABLE_ii[$105 & 127]($101)|0);
     $107 = ($12);
     HEAP32[$107>>2] = $99;
     $108 = (($106) + 288|0);
     $109 = $$byval_copy1;
     $110 = $$byval_copy1;
     $111 = $12;
     ;HEAP32[$110+0>>2]=HEAP32[$111+0>>2]|0;
     $112 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy1,$106,$108,$68,$__err,0)|0);
     $113 = $$byval_copy1;
     $114 = $112;
     $115 = $106;
     $116 = (($114) - ($115))|0;
     $117 = ($116|0)<(288);
     if (!($117)) {
      break L8;
     }
     $118 = (($__tm) + 16|0);
     $119 = (($116|0) / 12)&-1;
     $120 = (($119|0) % 12)&-1;
     HEAP32[$118>>2] = $120;
     break;
    }
    case 72:  {
     $208 = ($__e);
     $209 = HEAP32[$208>>2]|0;
     $210 = $10;
     $211 = ($10);
     HEAP32[$211>>2] = $209;
     $212 = $$byval_copy9;
     $213 = $$byval_copy9;
     $214 = $10;
     ;HEAP32[$213+0>>2]=HEAP32[$214+0>>2]|0;
     $215 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy9,$__err,$68,2)|0);
     $216 = $$byval_copy9;
     $217 = HEAP32[$__err>>2]|0;
     $218 = $217 & 4;
     $219 = ($218|0)==(0);
     $220 = ($215|0)<(24);
     $or$cond$i = $219 & $220;
     if ($or$cond$i) {
      $221 = (($__tm) + 8|0);
      HEAP32[$221>>2] = $215;
      break L8;
     } else {
      $222 = $217 | 4;
      HEAP32[$__err>>2] = $222;
      break L8;
     }
     break;
    }
    case 73:  {
     $223 = (($__tm) + 8|0);
     $224 = ($__e);
     $225 = HEAP32[$224>>2]|0;
     $226 = $9;
     $227 = ($9);
     HEAP32[$227>>2] = $225;
     $228 = $$byval_copy10;
     $229 = $$byval_copy10;
     $230 = $9;
     ;HEAP32[$229+0>>2]=HEAP32[$230+0>>2]|0;
     $231 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy10,$__err,$68,2)|0);
     $232 = $$byval_copy10;
     $233 = HEAP32[$__err>>2]|0;
     $234 = $233 & 4;
     $235 = ($234|0)==(0);
     do {
      if ($235) {
       $$off$i12 = (($231) + -1)|0;
       $236 = ($$off$i12>>>0)<(12);
       if (!($236)) {
        break;
       }
       HEAP32[$223>>2] = $231;
       break L8;
      }
     } while(0);
     $237 = $233 | 4;
     HEAP32[$__err>>2] = $237;
     break;
    }
    case 89:  {
     $495 = ($__e);
     $496 = HEAP32[$495>>2]|0;
     $497 = $1;
     $498 = ($1);
     HEAP32[$498>>2] = $496;
     $499 = $$byval_copy29;
     $500 = $$byval_copy29;
     $501 = $1;
     ;HEAP32[$500+0>>2]=HEAP32[$501+0>>2]|0;
     $502 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy29,$__err,$68,4)|0);
     $503 = $$byval_copy29;
     $504 = HEAP32[$__err>>2]|0;
     $505 = $504 & 4;
     $506 = ($505|0)==(0);
     if (!($506)) {
      break L8;
     }
     $507 = (($__tm) + 20|0);
     $508 = (($502) + -1900)|0;
     HEAP32[$507>>2] = $508;
     break;
    }
    case 37:  {
     $509 = ($__e);
     $510 = HEAP32[$509>>2]|0;
     $511 = ($39);
     HEAP32[$511>>2] = $510;
     $512 = $$byval_copy30;
     $513 = $$byval_copy30;
     $514 = $39;
     ;HEAP32[$513+0>>2]=HEAP32[$514+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE(0,$__b,$$byval_copy30,$__err,$68);
     $515 = $$byval_copy30;
     break;
    }
    case 68:  {
     $176 = ($__b);
     $177 = HEAP32[$176>>2]|0;
     $178 = ($19);
     HEAP32[$178>>2] = $177;
     $179 = ($__e);
     $180 = HEAP32[$179>>2]|0;
     $181 = ($20);
     HEAP32[$181>>2] = $180;
     $182 = $$byval_copy5;
     $183 = $$byval_copy5;
     $184 = $19;
     ;HEAP32[$183+0>>2]=HEAP32[$184+0>>2]|0;
     $185 = $$byval_copy6;
     $186 = $$byval_copy6;
     $187 = $20;
     ;HEAP32[$186+0>>2]=HEAP32[$187+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($18,$this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,(8048),((8048 + 8|0)));
     $188 = $$byval_copy6;
     $189 = $$byval_copy5;
     $190 = ($18);
     $191 = HEAP32[$190>>2]|0;
     HEAP32[$176>>2] = $191;
     break;
    }
    case 101: case 100:  {
     $161 = (($__tm) + 12|0);
     $162 = ($__e);
     $163 = HEAP32[$162>>2]|0;
     $164 = $11;
     $165 = ($11);
     HEAP32[$165>>2] = $163;
     $166 = $$byval_copy4;
     $167 = $$byval_copy4;
     $168 = $11;
     ;HEAP32[$167+0>>2]=HEAP32[$168+0>>2]|0;
     $169 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy4,$__err,$68,2)|0);
     $170 = $$byval_copy4;
     $171 = HEAP32[$__err>>2]|0;
     $172 = $171 & 4;
     $173 = ($172|0)==(0);
     do {
      if ($173) {
       $$off$i = (($169) + -1)|0;
       $174 = ($$off$i>>>0)<(31);
       if (!($174)) {
        break;
       }
       HEAP32[$161>>2] = $169;
       break L8;
      }
     } while(0);
     $175 = $171 | 4;
     HEAP32[$__err>>2] = $175;
     break;
    }
    case 99:  {
     $121 = (($this) + 8|0);
     $122 = $121;
     $123 = HEAP32[$122>>2]|0;
     $124 = (($123) + 12|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = (FUNCTION_TABLE_ii[$125 & 127]($121)|0);
     $127 = ($__b);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($16);
     HEAP32[$129>>2] = $128;
     $130 = ($__e);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($17);
     HEAP32[$132>>2] = $131;
     $133 = $126;
     $134 = HEAP8[$133]|0;
     $135 = $134 & 1;
     $136 = ($135<<24>>24)==(0);
     if ($136) {
      $141 = $126;
      $142 = (($141) + 1|0);
      $143 = $126;
      $144 = (($143) + 1|0);
      $145 = $134&255;
      $146 = $145 >>> 1;
      $147 = $144;$148 = $142;$149 = $146;
     } else {
      $137 = (($126) + 8|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = (($126) + 4|0);
      $140 = HEAP32[$139>>2]|0;
      $147 = $138;$148 = $138;$149 = $140;
     }
     $150 = (($147) + ($149)|0);
     $151 = $$byval_copy2;
     $152 = $$byval_copy2;
     $153 = $16;
     ;HEAP32[$152+0>>2]=HEAP32[$153+0>>2]|0;
     $154 = $$byval_copy3;
     $155 = $$byval_copy3;
     $156 = $17;
     ;HEAP32[$155+0>>2]=HEAP32[$156+0>>2]|0;
     __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($15,$this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$148,$150);
     $157 = $$byval_copy3;
     $158 = $$byval_copy2;
     $159 = ($15);
     $160 = HEAP32[$159>>2]|0;
     HEAP32[$127>>2] = $160;
     break;
    }
    default: {
     $516 = HEAP32[$__err>>2]|0;
     $517 = $516 | 4;
     HEAP32[$__err>>2] = $517;
    }
    }
   } while(0);
   $518 = ($__b);
   $519 = HEAP32[$518>>2]|0;
   $520 = ($agg$result);
   HEAP32[$520>>2] = $519;
   STACKTOP = sp;return;
  }
 } while(0);
 $64 = (___cxa_allocate_exception(4)|0);
 $65 = $64;
 __ZNSt8bad_castC2Ev($65);
 __THREW__ = 0;
 invoke_viii(12,($64|0),((17096)|0),((143)|0));
 $66 = __THREW__; __THREW__ = 0;
 $67 = $66&1;
 if ($67) {
  $72 = ___cxa_find_matching_catch(-1,-1)|0;
  $73 = tempRet0;
  $74 = HEAP32[$40>>2]|0;
  $75 = ($74);
  (__ZNSt3__114__shared_count16__release_sharedEv($75)|0);
  ___resumeException($72|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i6 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__b);
 $2 = ($__e);
 $3 = (($__ct) + 8|0);
 L1: while(1) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ($4|0)==(0|0);
  do {
   if ($5) {
    $17 = 0;
   } else {
    $6 = (($4) + 12|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = (($4) + 16|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($7|0)==($9|0);
    if (!($10)) {
     $17 = $4;
     break;
    }
    $11 = $4;
    $12 = HEAP32[$11>>2]|0;
    $13 = (($12) + 36|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (FUNCTION_TABLE_ii[$14 & 127]($4)|0);
    $16 = ($15|0)==(-1);
    if ($16) {
     HEAP32[$1>>2] = 0;
     $17 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$1>>2]|0;
     $17 = $$pre$i$i$i;
     break;
    }
   }
  } while(0);
  $18 = ($17|0)==(0|0);
  $19 = HEAP32[$2>>2]|0;
  $20 = ($19|0)==(0|0);
  do {
   if ($20) {
    label = 12;
   } else {
    $21 = (($19) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($19) + 16|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($22|0)==($24|0);
    if (!($25)) {
     if ($18) {
      $32 = $19;
      break;
     } else {
      $$pre$i2$i$i6 = $19;
      break L1;
     }
    }
    $26 = $19;
    $27 = HEAP32[$26>>2]|0;
    $28 = (($27) + 36|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (FUNCTION_TABLE_ii[$29 & 127]($19)|0);
    $31 = ($30|0)==(-1);
    if ($31) {
     HEAP32[$2>>2] = 0;
     label = 12;
     break;
    } else {
     if ($18) {
      $32 = $19;
      break;
     } else {
      $$pre$i2$i$i6 = $19;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   if ($18) {
    $$pre$i2$i$i6 = 0;
    break;
   } else {
    $32 = 0;
   }
  }
  $33 = HEAP32[$1>>2]|0;
  $34 = (($33) + 12|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($33) + 16|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($35|0)==($37|0);
  if ($38) {
   $39 = $33;
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + 36|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (FUNCTION_TABLE_ii[$42 & 127]($33)|0);
   $$0$i$i = $43;
  } else {
   $44 = HEAP8[$35]|0;
   $45 = $44&255;
   $$0$i$i = $45;
  }
  $46 = $$0$i$i&255;
  $isascii1$i = ($46<<24>>24)>(-1);
  if (!($isascii1$i)) {
   $$pre$i2$i$i6 = $32;
   break;
  }
  $sext = $$0$i$i << 24;
  $47 = $sext >> 24;
  $48 = HEAP32[$3>>2]|0;
  $49 = (($48) + ($47<<1)|0);
  $50 = HEAP16[$49>>1]|0;
  $51 = $50 & 8192;
  $52 = ($51<<16>>16)==(0);
  if ($52) {
   $$pre$i2$i$i6 = $32;
   break;
  }
  $53 = HEAP32[$1>>2]|0;
  $54 = (($53) + 12|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($53) + 16|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($55|0)==($57|0);
  if ($58) {
   $59 = $53;
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + 40|0);
   $62 = HEAP32[$61>>2]|0;
   (FUNCTION_TABLE_ii[$62 & 127]($53)|0);
   continue;
  } else {
   $63 = (($55) + 1|0);
   HEAP32[$54>>2] = $63;
   continue;
  }
 }
 $64 = HEAP32[$1>>2]|0;
 $65 = ($64|0)==(0|0);
 do {
  if ($65) {
   $77 = 0;
  } else {
   $66 = (($64) + 12|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($64) + 16|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = ($67|0)==($69|0);
   if (!($70)) {
    $77 = $64;
    break;
   }
   $71 = $64;
   $72 = HEAP32[$71>>2]|0;
   $73 = (($72) + 36|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (FUNCTION_TABLE_ii[$74 & 127]($64)|0);
   $76 = ($75|0)==(-1);
   if ($76) {
    HEAP32[$1>>2] = 0;
    $77 = 0;
    break;
   } else {
    $$pre$i$i$i2 = HEAP32[$1>>2]|0;
    $77 = $$pre$i$i$i2;
    break;
   }
  }
 } while(0);
 $78 = ($77|0)==(0|0);
 $79 = ($$pre$i2$i$i6|0)==(0|0);
 L38: do {
  if ($79) {
   label = 32;
  } else {
   $80 = (($$pre$i2$i$i6) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (($$pre$i2$i$i6) + 16|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = ($81|0)==($83|0);
   do {
    if ($84) {
     $85 = $$pre$i2$i$i6;
     $86 = HEAP32[$85>>2]|0;
     $87 = (($86) + 36|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = (FUNCTION_TABLE_ii[$88 & 127]($$pre$i2$i$i6)|0);
     $90 = ($89|0)==(-1);
     if (!($90)) {
      break;
     }
     HEAP32[$2>>2] = 0;
     label = 32;
     break L38;
    }
   } while(0);
   if (!($78)) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 do {
  if ((label|0) == 32) {
   if ($78) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $91 = HEAP32[$__err>>2]|0;
 $92 = $91 | 2;
 HEAP32[$__err>>2] = $92;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i611 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__b);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   $15 = 0;
  } else {
   $4 = (($2) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($2) + 16|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($5|0)==($7|0);
   if (!($8)) {
    $15 = $2;
    break;
   }
   $9 = $2;
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + 36|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (FUNCTION_TABLE_ii[$12 & 127]($2)|0);
   $14 = ($13|0)==(-1);
   if ($14) {
    HEAP32[$1>>2] = 0;
    $15 = 0;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $15 = $$pre$i$i$i;
    break;
   }
  }
 } while(0);
 $16 = ($15|0)==(0|0);
 $17 = ($__e);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 L8: do {
  if ($19) {
   label = 11;
  } else {
   $20 = (($18) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($18) + 16|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($21|0)==($23|0);
   do {
    if ($24) {
     $25 = $18;
     $26 = HEAP32[$25>>2]|0;
     $27 = (($26) + 36|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (FUNCTION_TABLE_ii[$28 & 127]($18)|0);
     $30 = ($29|0)==(-1);
     if (!($30)) {
      break;
     }
     HEAP32[$17>>2] = 0;
     label = 11;
     break L8;
    }
   } while(0);
   if ($16) {
    $$pre$i2$i$i611 = $18;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($16) {
   label = 12;
  } else {
   $$pre$i2$i$i611 = 0;
  }
 }
 if ((label|0) == 12) {
  $31 = HEAP32[$__err>>2]|0;
  $32 = $31 | 6;
  HEAP32[$__err>>2] = $32;
  STACKTOP = sp;return;
 }
 $33 = HEAP32[$1>>2]|0;
 $34 = (($33) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 16|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35|0)==($37|0);
 if ($38) {
  $39 = $33;
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + 36|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (FUNCTION_TABLE_ii[$42 & 127]($33)|0);
  $$0$i$i = $43;
 } else {
  $44 = HEAP8[$35]|0;
  $45 = $44&255;
  $$0$i$i = $45;
 }
 $46 = $$0$i$i&255;
 $47 = $__ct;
 $48 = HEAP32[$47>>2]|0;
 $49 = (($48) + 36|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (FUNCTION_TABLE_iiii[$50 & 63]($__ct,$46,0)|0);
 $52 = ($51<<24>>24)==(37);
 if (!($52)) {
  $53 = HEAP32[$__err>>2]|0;
  $54 = $53 | 4;
  HEAP32[$__err>>2] = $54;
  STACKTOP = sp;return;
 }
 $55 = HEAP32[$1>>2]|0;
 $56 = (($55) + 12|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($55) + 16|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($57|0)==($59|0);
 if ($60) {
  $61 = $55;
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + 40|0);
  $64 = HEAP32[$63>>2]|0;
  (FUNCTION_TABLE_ii[$64 & 127]($55)|0);
 } else {
  $65 = (($57) + 1|0);
  HEAP32[$56>>2] = $65;
 }
 $66 = HEAP32[$1>>2]|0;
 $67 = ($66|0)==(0|0);
 do {
  if ($67) {
   $79 = 0;
  } else {
   $68 = (($66) + 12|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = (($66) + 16|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($69|0)==($71|0);
   if (!($72)) {
    $79 = $66;
    break;
   }
   $73 = $66;
   $74 = HEAP32[$73>>2]|0;
   $75 = (($74) + 36|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (FUNCTION_TABLE_ii[$76 & 127]($66)|0);
   $78 = ($77|0)==(-1);
   if ($78) {
    HEAP32[$1>>2] = 0;
    $79 = 0;
    break;
   } else {
    $$pre$i$i$i2 = HEAP32[$1>>2]|0;
    $79 = $$pre$i$i$i2;
    break;
   }
  }
 } while(0);
 $80 = ($79|0)==(0|0);
 $81 = ($$pre$i2$i$i611|0)==(0|0);
 L39: do {
  if ($81) {
   label = 31;
  } else {
   $82 = (($$pre$i2$i$i611) + 12|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($$pre$i2$i$i611) + 16|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ($83|0)==($85|0);
   do {
    if ($86) {
     $87 = $$pre$i2$i$i611;
     $88 = HEAP32[$87>>2]|0;
     $89 = (($88) + 36|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = (FUNCTION_TABLE_ii[$90 & 127]($$pre$i2$i$i611)|0);
     $92 = ($91|0)==(-1);
     if (!($92)) {
      break;
     }
     HEAP32[$17>>2] = 0;
     label = 31;
     break L39;
    }
   } while(0);
   if (!($80)) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 do {
  if ((label|0) == 31) {
   if ($80) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $93 = HEAP32[$__err>>2]|0;
 $94 = $93 | 2;
 HEAP32[$__err>>2] = $94;
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i10 = 0, $$0$in = 0, $$0$in$phi = 0, $$01 = 0, $$pre$i$i$i = 0, $$pre$i$i$i16 = 0, $$pre$i$i$i3 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i7 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $isascii1$i = 0, $isascii1$i12 = 0, $sext = 0, $sext24 = 0, $tmp$i$i9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__b);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   $15 = 0;
  } else {
   $4 = (($2) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($2) + 16|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($5|0)==($7|0);
   if (!($8)) {
    $15 = $2;
    break;
   }
   $9 = $2;
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + 36|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (FUNCTION_TABLE_ii[$12 & 127]($2)|0);
   $14 = ($13|0)==(-1);
   if ($14) {
    HEAP32[$1>>2] = 0;
    $15 = 0;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $15 = $$pre$i$i$i;
    break;
   }
  }
 } while(0);
 $16 = ($15|0)==(0|0);
 $17 = ($__e);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 L8: do {
  if ($19) {
   label = 11;
  } else {
   $20 = (($18) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($18) + 16|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($21|0)==($23|0);
   do {
    if ($24) {
     $25 = $18;
     $26 = HEAP32[$25>>2]|0;
     $27 = (($26) + 36|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (FUNCTION_TABLE_ii[$28 & 127]($18)|0);
     $30 = ($29|0)==(-1);
     if (!($30)) {
      break;
     }
     HEAP32[$17>>2] = 0;
     label = 11;
     break L8;
    }
   } while(0);
   if ($16) {
    $33 = $18;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($16) {
   label = 12;
  } else {
   $33 = 0;
  }
 }
 if ((label|0) == 12) {
  $31 = HEAP32[$__err>>2]|0;
  $32 = $31 | 6;
  HEAP32[$__err>>2] = $32;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $34 = HEAP32[$1>>2]|0;
 $35 = (($34) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($36|0)==($38|0);
 if ($39) {
  $40 = $34;
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 36|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (FUNCTION_TABLE_ii[$43 & 127]($34)|0);
  $$0$i$i = $44;
 } else {
  $45 = HEAP8[$36]|0;
  $46 = $45&255;
  $$0$i$i = $46;
 }
 $47 = $$0$i$i&255;
 $isascii1$i = ($47<<24>>24)>(-1);
 do {
  if ($isascii1$i) {
   $sext = $$0$i$i << 24;
   $48 = $sext >> 24;
   $49 = (($__ct) + 8|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + ($48<<1)|0);
   $52 = HEAP16[$51>>1]|0;
   $53 = $52 & 2048;
   $54 = ($53<<16>>16)==(0);
   if ($54) {
    break;
   }
   $57 = $__ct;
   $58 = HEAP32[$57>>2]|0;
   $59 = (($58) + 36|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = (FUNCTION_TABLE_iiii[$60 & 63]($__ct,$47,0)|0);
   $62 = $61 << 24 >> 24;
   $63 = HEAP32[$1>>2]|0;
   $64 = (($63) + 12|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (($63) + 16|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ($65|0)==($67|0);
   if ($68) {
    $69 = $63;
    $70 = HEAP32[$69>>2]|0;
    $71 = (($70) + 40|0);
    $72 = HEAP32[$71>>2]|0;
    (FUNCTION_TABLE_ii[$72 & 127]($63)|0);
    $$0$in = $__n;$$pre$i2$i$i7 = $33;$74 = $33;$__r$0$in = $62;
   } else {
    $73 = (($65) + 1|0);
    HEAP32[$64>>2] = $73;
    $$0$in = $__n;$$pre$i2$i$i7 = $33;$74 = $33;$__r$0$in = $62;
   }
   while(1) {
    $__r$0 = (($__r$0$in) + -48)|0;
    $$0 = (($$0$in) + -1)|0;
    $75 = HEAP32[$1>>2]|0;
    $76 = ($75|0)==(0|0);
    do {
     if ($76) {
      $88 = 0;
     } else {
      $77 = (($75) + 12|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = (($75) + 16|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ($78|0)==($80|0);
      if (!($81)) {
       $88 = $75;
       break;
      }
      $82 = $75;
      $83 = HEAP32[$82>>2]|0;
      $84 = (($83) + 36|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = (FUNCTION_TABLE_ii[$85 & 127]($75)|0);
      $87 = ($86|0)==(-1);
      if ($87) {
       HEAP32[$1>>2] = 0;
       $88 = 0;
       break;
      } else {
       $$pre$i$i$i3 = HEAP32[$1>>2]|0;
       $88 = $$pre$i$i$i3;
       break;
      }
     }
    } while(0);
    $89 = ($88|0)==(0|0);
    $90 = ($74|0)==(0|0);
    do {
     if ($90) {
      $$pre$i2$i$i20 = $$pre$i2$i$i7;$102 = 0;
     } else {
      $91 = (($74) + 12|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = (($74) + 16|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = ($92|0)==($94|0);
      if (!($95)) {
       $$pre$i2$i$i20 = $$pre$i2$i$i7;$102 = $74;
       break;
      }
      $96 = $74;
      $97 = HEAP32[$96>>2]|0;
      $98 = (($97) + 36|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = (FUNCTION_TABLE_ii[$99 & 127]($74)|0);
      $101 = ($100|0)==(-1);
      if (!($101)) {
       $$pre$i2$i$i20 = $$pre$i2$i$i7;$102 = $$pre$i2$i$i7;
       break;
      }
      HEAP32[$17>>2] = 0;
      $$pre$i2$i$i20 = 0;$102 = 0;
     }
    } while(0);
    $103 = ($102|0)==(0|0);
    $tmp$i$i9 = $89 ^ $103;
    $104 = ($$0|0)>(0);
    $$ = $tmp$i$i9 & $104;
    $105 = HEAP32[$1>>2]|0;
    if (!($$)) {
     label = 40;
     break;
    }
    $106 = (($105) + 12|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (($105) + 16|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($107|0)==($109|0);
    if ($110) {
     $111 = $105;
     $112 = HEAP32[$111>>2]|0;
     $113 = (($112) + 36|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = (FUNCTION_TABLE_ii[$114 & 127]($105)|0);
     $$0$i$i10 = $115;
    } else {
     $116 = HEAP8[$107]|0;
     $117 = $116&255;
     $$0$i$i10 = $117;
    }
    $118 = $$0$i$i10&255;
    $isascii1$i12 = ($118<<24>>24)>(-1);
    if (!($isascii1$i12)) {
     $$01 = $__r$0;
     label = 52;
     break;
    }
    $sext24 = $$0$i$i10 << 24;
    $119 = $sext24 >> 24;
    $120 = HEAP32[$49>>2]|0;
    $121 = (($120) + ($119<<1)|0);
    $122 = HEAP16[$121>>1]|0;
    $123 = $122 & 2048;
    $124 = ($123<<16>>16)==(0);
    if ($124) {
     $$01 = $__r$0;
     label = 52;
     break;
    }
    $125 = ($__r$0*10)|0;
    $126 = HEAP32[$57>>2]|0;
    $127 = (($126) + 36|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = (FUNCTION_TABLE_iiii[$128 & 63]($__ct,$118,0)|0);
    $130 = $129 << 24 >> 24;
    $131 = (($130) + ($125))|0;
    $132 = HEAP32[$1>>2]|0;
    $133 = (($132) + 12|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = (($132) + 16|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = ($134|0)==($136|0);
    if ($137) {
     $138 = $132;
     $139 = HEAP32[$138>>2]|0;
     $140 = (($139) + 40|0);
     $141 = HEAP32[$140>>2]|0;
     (FUNCTION_TABLE_ii[$141 & 127]($132)|0);
     $$0$in$phi = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$74 = $102;$__r$0$in = $131;$$0$in = $$0$in$phi;
     continue;
    } else {
     $142 = (($134) + 1|0);
     HEAP32[$133>>2] = $142;
     $$0$in$phi = $$0;$$pre$i2$i$i7 = $$pre$i2$i$i20;$74 = $102;$__r$0$in = $131;$$0$in = $$0$in$phi;
     continue;
    }
   }
   if ((label|0) == 40) {
    $143 = ($105|0)==(0|0);
    do {
     if ($143) {
      $155 = 0;
     } else {
      $144 = (($105) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (($105) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if (!($148)) {
       $155 = $105;
       break;
      }
      $149 = $105;
      $150 = HEAP32[$149>>2]|0;
      $151 = (($150) + 36|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = (FUNCTION_TABLE_ii[$152 & 127]($105)|0);
      $154 = ($153|0)==(-1);
      if ($154) {
       HEAP32[$1>>2] = 0;
       $155 = 0;
       break;
      } else {
       $$pre$i$i$i16 = HEAP32[$1>>2]|0;
       $155 = $$pre$i$i$i16;
       break;
      }
     }
    } while(0);
    $156 = ($155|0)==(0|0);
    $157 = ($$pre$i2$i$i20|0)==(0|0);
    L63: do {
     if ($157) {
      label = 50;
     } else {
      $158 = (($$pre$i2$i$i20) + 12|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = (($$pre$i2$i$i20) + 16|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($159|0)==($161|0);
      do {
       if ($162) {
        $163 = $$pre$i2$i$i20;
        $164 = HEAP32[$163>>2]|0;
        $165 = (($164) + 36|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = (FUNCTION_TABLE_ii[$166 & 127]($$pre$i2$i$i20)|0);
        $168 = ($167|0)==(-1);
        if (!($168)) {
         break;
        }
        HEAP32[$17>>2] = 0;
        label = 50;
        break L63;
       }
      } while(0);
      if ($156) {
       $$01 = $__r$0;
      } else {
       break;
      }
      STACKTOP = sp;return ($$01|0);
     }
    } while(0);
    do {
     if ((label|0) == 50) {
      if ($156) {
       break;
      } else {
       $$01 = $__r$0;
      }
      STACKTOP = sp;return ($$01|0);
     }
    } while(0);
    $169 = HEAP32[$__err>>2]|0;
    $170 = $169 | 2;
    HEAP32[$__err>>2] = $170;
    $$01 = $__r$0;
    STACKTOP = sp;return ($$01|0);
   }
   else if ((label|0) == 52) {
    STACKTOP = sp;return ($$01|0);
   }
  }
 } while(0);
 $55 = HEAP32[$__err>>2]|0;
 $56 = $55 | 4;
 HEAP32[$__err>>2] = $56;
 $$01 = 0;
 STACKTOP = sp;return ($$01|0);
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$0$i$i1$i$i25 = 0, $$0$i$i16 = 0, $$0$ph$be = 0, $$0$ph43 = 0, $$0$pn = 0, $$0$pn$phi = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$phi$trans$insert$pre$pre = 0, $$pre = 0, $$pre$i$i$i21 = 0;
 var $$pre$i$i$i6 = 0, $$pre$i3$i$i12 = 0, $$pre$i3$i$i1245 = 0, $$pre$i3$i$i1246 = 0, $$pre44 = 0, $$pre44$pre = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $__p$i$i$i$i = 0, $phitmp$i4$i$i13 = 0, $tmp$i$i15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $__p$i$i$i$i = sp + 16|0;
 $1 = sp + 32|0;
 $2 = sp + 40|0;
 $3 = sp + 48|0;
 $4 = sp + 56|0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 $5 = ($1);
 $6 = HEAP32[$5>>2]|0;
 $7 = $__p$i$i$i$i;
 $8 = HEAP32[((9128))>>2]|0;
 $9 = ($8|0)==(-1);
 do {
  if (!($9)) {
   $10 = ($__p$i$i$i$i);
   HEAP32[$10>>2] = (9128);
   $11 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$11>>2] = (183);
   $12 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$12>>2] = 0;
   __THREW__ = 0;
   invoke_viii(25,(((9128))|0),($7|0),(184|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if (!($14)) {
    break;
   }
   $77 = ___cxa_find_matching_catch(-1,-1)|0;
   $78 = tempRet0;
   $79 = HEAP32[$5>>2]|0;
   $80 = ($79);
   (__ZNSt3__114__shared_count16__release_sharedEv($80)|0);
   ___resumeException($77|0);
   // unreachable;
  }
 } while(0);
 $15 = HEAP32[(((9128) + 4|0))>>2]|0;
 $16 = (($15) + -1)|0;
 $17 = (($6) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($6) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $18;
 $22 = $20;
 $23 = (($21) - ($22))|0;
 $24 = $23 >> 2;
 $25 = ($24>>>0)>($16>>>0);
 do {
  if ($25) {
   $26 = (($20) + ($16<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0|0);
   if ($28) {
    break;
   }
   $33 = $27;
   $34 = HEAP32[$5>>2]|0;
   $35 = ($34);
   (__ZNSt3__114__shared_count16__release_sharedEv($35)|0);
   HEAP32[$__err>>2] = 0;
   $36 = ($__fmtb|0)==($__fmte|0);
   $$phi$trans$insert$pre$pre = ($__b);
   L8: do {
    if ($36) {
     label = 71;
    } else {
     $37 = ($__e);
     $38 = $27;
     $39 = $27;
     $40 = $27;
     $41 = $this;
     $42 = ($3);
     $43 = ($4);
     $44 = ($2);
     $$0$ph43 = $__fmtb;$$pre44 = 0;
     L10: while(1) {
      $45 = $$pre44;
      while(1) {
       $46 = ($45|0)==(0);
       if (!($46)) {
        label = 71;
        break L8;
       }
       $47 = HEAP32[$$phi$trans$insert$pre$pre>>2]|0;
       $48 = ($47|0)==(0|0);
       do {
        if ($48) {
         $61 = 0;$62 = 1;
        } else {
         $49 = (($47) + 12|0);
         $50 = HEAP32[$49>>2]|0;
         $51 = (($47) + 16|0);
         $52 = HEAP32[$51>>2]|0;
         $53 = ($50|0)==($52|0);
         if ($53) {
          $54 = $47;
          $55 = HEAP32[$54>>2]|0;
          $56 = (($55) + 36|0);
          $57 = HEAP32[$56>>2]|0;
          $58 = (FUNCTION_TABLE_ii[$57 & 127]($47)|0);
          $$0$i$i$i$i = $58;
         } else {
          $59 = HEAP32[$50>>2]|0;
          $$0$i$i$i$i = $59;
         }
         $60 = ($$0$i$i$i$i|0)==(-1);
         if (!($60)) {
          $61 = $47;$62 = 0;
          break;
         }
         HEAP32[$$phi$trans$insert$pre$pre>>2] = 0;
         $61 = 0;$62 = 1;
        }
       } while(0);
       $63 = HEAP32[$37>>2]|0;
       $64 = ($63|0)==(0|0);
       do {
        if ($64) {
         label = 23;
        } else {
         $65 = (($63) + 12|0);
         $66 = HEAP32[$65>>2]|0;
         $67 = (($63) + 16|0);
         $68 = HEAP32[$67>>2]|0;
         $69 = ($66|0)==($68|0);
         if ($69) {
          $70 = $63;
          $71 = HEAP32[$70>>2]|0;
          $72 = (($71) + 36|0);
          $73 = HEAP32[$72>>2]|0;
          $74 = (FUNCTION_TABLE_ii[$73 & 127]($63)|0);
          $$0$i$i1$i$i = $74;
         } else {
          $75 = HEAP32[$66>>2]|0;
          $$0$i$i1$i$i = $75;
         }
         $76 = ($$0$i$i1$i$i|0)==(-1);
         if ($76) {
          HEAP32[$37>>2] = 0;
          label = 23;
          break;
         } else {
          if ($62) {
           $81 = $63;
           break;
          } else {
           label = 25;
           break L10;
          }
         }
        }
       } while(0);
       if ((label|0) == 23) {
        label = 0;
        if ($62) {
         label = 25;
         break L10;
        } else {
         $81 = 0;
        }
       }
       $82 = HEAP32[$$0$ph43>>2]|0;
       $83 = HEAP32[$38>>2]|0;
       $84 = (($83) + 52|0);
       $85 = HEAP32[$84>>2]|0;
       $86 = (FUNCTION_TABLE_iiii[$85 & 63]($33,$82,0)|0);
       $87 = ($86<<24>>24)==(37);
       if ($87) {
        label = 28;
        break;
       }
       $116 = HEAP32[$$0$ph43>>2]|0;
       $117 = HEAP32[$39>>2]|0;
       $118 = (($117) + 12|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = (FUNCTION_TABLE_iiii[$119 & 63]($33,8192,$116)|0);
       if ($120) {
        $$0$pn = $$0$ph43;
        label = 38;
        break;
       }
       $180 = (($61) + 12|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = (($61) + 16|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = ($181|0)==($183|0);
       if ($184) {
        $185 = $61;
        $186 = HEAP32[$185>>2]|0;
        $187 = (($186) + 36|0);
        $188 = HEAP32[$187>>2]|0;
        $189 = (FUNCTION_TABLE_ii[$188 & 127]($61)|0);
        $$0$i$i16 = $189;
       } else {
        $190 = HEAP32[$181>>2]|0;
        $$0$i$i16 = $190;
       }
       $191 = HEAP32[$40>>2]|0;
       $192 = (($191) + 28|0);
       $193 = HEAP32[$192>>2]|0;
       $194 = (FUNCTION_TABLE_iii[$193 & 63]($33,$$0$i$i16)|0);
       $195 = HEAP32[$$0$ph43>>2]|0;
       $196 = HEAP32[$40>>2]|0;
       $197 = (($196) + 28|0);
       $198 = HEAP32[$197>>2]|0;
       $199 = (FUNCTION_TABLE_iii[$198 & 63]($33,$195)|0);
       $200 = ($194|0)==($199|0);
       if ($200) {
        label = 66;
        break;
       }
       HEAP32[$__err>>2] = 4;
       $45 = 4;
      }
      L42: do {
       if ((label|0) == 28) {
        label = 0;
        $88 = (($$0$ph43) + 4|0);
        $89 = ($88|0)==($__fmte|0);
        if ($89) {
         label = 29;
         break L10;
        }
        $90 = HEAP32[$88>>2]|0;
        $91 = HEAP32[$38>>2]|0;
        $92 = (($91) + 52|0);
        $93 = HEAP32[$92>>2]|0;
        $94 = (FUNCTION_TABLE_iiii[$93 & 63]($33,$90,0)|0);
        if ((($94<<24>>24) == 48) | (($94<<24>>24) == 69)) {
         $95 = (($$0$ph43) + 8|0);
         $96 = ($95|0)==($__fmte|0);
         if ($96) {
          label = 32;
          break L10;
         }
         $97 = HEAP32[$95>>2]|0;
         $98 = HEAP32[$38>>2]|0;
         $99 = (($98) + 52|0);
         $100 = HEAP32[$99>>2]|0;
         $101 = (FUNCTION_TABLE_iiii[$100 & 63]($33,$97,0)|0);
         $$1 = $95;$__cmd$0 = $101;$__opt$0 = $94;
        } else {
         $$1 = $88;$__cmd$0 = $94;$__opt$0 = 0;
        }
        $102 = HEAP32[$41>>2]|0;
        $103 = (($102) + 36|0);
        $104 = HEAP32[$103>>2]|0;
        HEAP32[$42>>2] = $61;
        HEAP32[$43>>2] = $81;
        $105 = $$byval_copy;
        $106 = $$byval_copy;
        $107 = $3;
        ;HEAP32[$106+0>>2]=HEAP32[$107+0>>2]|0;
        $108 = $$byval_copy1;
        $109 = $$byval_copy1;
        $110 = $4;
        ;HEAP32[$109+0>>2]=HEAP32[$110+0>>2]|0;
        FUNCTION_TABLE_viiiiiiiii[$104 & 3]($2,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
        $111 = $$byval_copy1;
        $112 = $$byval_copy;
        $113 = HEAP32[$44>>2]|0;
        HEAP32[$$phi$trans$insert$pre$pre>>2] = $113;
        $114 = (($$1) + 4|0);
        $$0$ph$be = $114;
       }
       else if ((label|0) == 38) {
        while(1) {
         label = 0;
         $$2 = (($$0$pn) + 4|0);
         $121 = ($$2|0)==($__fmte|0);
         if ($121) {
          $$2$lcssa = $__fmte;
          break;
         }
         $122 = HEAP32[$$2>>2]|0;
         $123 = HEAP32[$39>>2]|0;
         $124 = (($123) + 12|0);
         $125 = HEAP32[$124>>2]|0;
         $126 = (FUNCTION_TABLE_iiii[$125 & 63]($33,8192,$122)|0);
         if ($126) {
          $$0$pn$phi = $$2;$$0$pn = $$0$pn$phi;
          label = 38;
         } else {
          $$2$lcssa = $$2;
          break;
         }
        }
        $$pre$i$i$i6 = $61;$$pre$i3$i$i12 = $81;$127 = $81;
        while(1) {
         $128 = ($$pre$i$i$i6|0)==(0|0);
         do {
          if ($128) {
           $141 = 0;$142 = 1;
          } else {
           $129 = (($$pre$i$i$i6) + 12|0);
           $130 = HEAP32[$129>>2]|0;
           $131 = (($$pre$i$i$i6) + 16|0);
           $132 = HEAP32[$131>>2]|0;
           $133 = ($130|0)==($132|0);
           if ($133) {
            $134 = $$pre$i$i$i6;
            $135 = HEAP32[$134>>2]|0;
            $136 = (($135) + 36|0);
            $137 = HEAP32[$136>>2]|0;
            $138 = (FUNCTION_TABLE_ii[$137 & 127]($$pre$i$i$i6)|0);
            $$0$i$i$i$i4 = $138;
           } else {
            $139 = HEAP32[$130>>2]|0;
            $$0$i$i$i$i4 = $139;
           }
           $140 = ($$0$i$i$i$i4|0)==(-1);
           if (!($140)) {
            $141 = $$pre$i$i$i6;$142 = 0;
            break;
           }
           HEAP32[$$phi$trans$insert$pre$pre>>2] = 0;
           $141 = 0;$142 = 1;
          }
         } while(0);
         $143 = ($127|0)==(0|0);
         do {
          if ($143) {
           $$pre$i3$i$i1246 = $$pre$i3$i$i12;
           label = 53;
          } else {
           $144 = (($127) + 12|0);
           $145 = HEAP32[$144>>2]|0;
           $146 = (($127) + 16|0);
           $147 = HEAP32[$146>>2]|0;
           $148 = ($145|0)==($147|0);
           if ($148) {
            $149 = $127;
            $150 = HEAP32[$149>>2]|0;
            $151 = (($150) + 36|0);
            $152 = HEAP32[$151>>2]|0;
            $153 = (FUNCTION_TABLE_ii[$152 & 127]($127)|0);
            $$0$i$i1$i$i10 = $153;
           } else {
            $154 = HEAP32[$145>>2]|0;
            $$0$i$i1$i$i10 = $154;
           }
           $155 = ($$0$i$i1$i$i10|0)==(-1);
           if ($155) {
            HEAP32[$37>>2] = 0;
            $$pre$i3$i$i1246 = 0;
            label = 53;
            break;
           } else {
            $phitmp$i4$i$i13 = ($$pre$i3$i$i12|0)==(0|0);
            $tmp$i$i15 = $142 ^ $phitmp$i4$i$i13;
            if ($tmp$i$i15) {
             $$pre$i3$i$i1245 = $$pre$i3$i$i12;$156 = $$pre$i3$i$i12;
             break;
            } else {
             $$0$ph$be = $$2$lcssa;
             break L42;
            }
           }
          }
         } while(0);
         if ((label|0) == 53) {
          label = 0;
          if ($142) {
           $$0$ph$be = $$2$lcssa;
           break L42;
          } else {
           $$pre$i3$i$i1245 = $$pre$i3$i$i1246;$156 = 0;
          }
         }
         $157 = (($141) + 12|0);
         $158 = HEAP32[$157>>2]|0;
         $159 = (($141) + 16|0);
         $160 = HEAP32[$159>>2]|0;
         $161 = ($158|0)==($160|0);
         if ($161) {
          $162 = $141;
          $163 = HEAP32[$162>>2]|0;
          $164 = (($163) + 36|0);
          $165 = HEAP32[$164>>2]|0;
          $166 = (FUNCTION_TABLE_ii[$165 & 127]($141)|0);
          $$0$i$i = $166;
         } else {
          $167 = HEAP32[$158>>2]|0;
          $$0$i$i = $167;
         }
         $168 = HEAP32[$39>>2]|0;
         $169 = (($168) + 12|0);
         $170 = HEAP32[$169>>2]|0;
         $171 = (FUNCTION_TABLE_iiii[$170 & 63]($33,8192,$$0$i$i)|0);
         if (!($171)) {
          $$0$ph$be = $$2$lcssa;
          break L42;
         }
         $172 = HEAP32[$157>>2]|0;
         $173 = HEAP32[$159>>2]|0;
         $174 = ($172|0)==($173|0);
         if ($174) {
          $175 = $141;
          $176 = HEAP32[$175>>2]|0;
          $177 = (($176) + 40|0);
          $178 = HEAP32[$177>>2]|0;
          (FUNCTION_TABLE_ii[$178 & 127]($141)|0);
          $$pre$i$i$i6 = $141;$$pre$i3$i$i12 = $$pre$i3$i$i1245;$127 = $156;
          continue;
         } else {
          $179 = (($172) + 4|0);
          HEAP32[$157>>2] = $179;
          $$pre$i$i$i6 = $141;$$pre$i3$i$i12 = $$pre$i3$i$i1245;$127 = $156;
          continue;
         }
        }
       }
       else if ((label|0) == 66) {
        label = 0;
        $201 = HEAP32[$180>>2]|0;
        $202 = HEAP32[$182>>2]|0;
        $203 = ($201|0)==($202|0);
        if ($203) {
         $204 = $61;
         $205 = HEAP32[$204>>2]|0;
         $206 = (($205) + 40|0);
         $207 = HEAP32[$206>>2]|0;
         (FUNCTION_TABLE_ii[$207 & 127]($61)|0);
        } else {
         $208 = (($201) + 4|0);
         HEAP32[$180>>2] = $208;
        }
        $209 = (($$0$ph43) + 4|0);
        $$0$ph$be = $209;
       }
      } while(0);
      $115 = ($$0$ph$be|0)==($__fmte|0);
      if ($115) {
       label = 71;
       break L8;
      }
      $$pre44$pre = HEAP32[$__err>>2]|0;
      $$0$ph43 = $$0$ph$be;$$pre44 = $$pre44$pre;
     }
     if ((label|0) == 25) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i21 = $61;
      break;
     }
     else if ((label|0) == 29) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i21 = $61;
      break;
     }
     else if ((label|0) == 32) {
      HEAP32[$__err>>2] = 4;
      $$pre$i$i$i21 = $61;
      break;
     }
    }
   } while(0);
   if ((label|0) == 71) {
    $$pre = HEAP32[$$phi$trans$insert$pre$pre>>2]|0;
    $$pre$i$i$i21 = $$pre;
   }
   $210 = ($__b);
   $211 = ($$pre$i$i$i21|0)==(0|0);
   do {
    if ($211) {
     $224 = 0;$225 = 1;
    } else {
     $212 = (($$pre$i$i$i21) + 12|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = (($$pre$i$i$i21) + 16|0);
     $215 = HEAP32[$214>>2]|0;
     $216 = ($213|0)==($215|0);
     if ($216) {
      $217 = $$pre$i$i$i21;
      $218 = HEAP32[$217>>2]|0;
      $219 = (($218) + 36|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = (FUNCTION_TABLE_ii[$220 & 127]($$pre$i$i$i21)|0);
      $$0$i$i$i$i19 = $221;
     } else {
      $222 = HEAP32[$213>>2]|0;
      $$0$i$i$i$i19 = $222;
     }
     $223 = ($$0$i$i$i$i19|0)==(-1);
     if (!($223)) {
      $224 = $$pre$i$i$i21;$225 = 0;
      break;
     }
     HEAP32[$210>>2] = 0;
     $224 = 0;$225 = 1;
    }
   } while(0);
   $226 = ($__e);
   $227 = HEAP32[$226>>2]|0;
   $228 = ($227|0)==(0|0);
   do {
    if ($228) {
     label = 84;
    } else {
     $229 = (($227) + 12|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = (($227) + 16|0);
     $232 = HEAP32[$231>>2]|0;
     $233 = ($230|0)==($232|0);
     if ($233) {
      $234 = $227;
      $235 = HEAP32[$234>>2]|0;
      $236 = (($235) + 36|0);
      $237 = HEAP32[$236>>2]|0;
      $238 = (FUNCTION_TABLE_ii[$237 & 127]($227)|0);
      $$0$i$i1$i$i25 = $238;
     } else {
      $239 = HEAP32[$230>>2]|0;
      $$0$i$i1$i$i25 = $239;
     }
     $240 = ($$0$i$i1$i$i25|0)==(-1);
     if ($240) {
      HEAP32[$226>>2] = 0;
      label = 84;
      break;
     }
     if (!($225)) {
      break;
     }
     $243 = ($agg$result);
     HEAP32[$243>>2] = $224;
     STACKTOP = sp;return;
    }
   } while(0);
   do {
    if ((label|0) == 84) {
     if ($225) {
      break;
     }
     $243 = ($agg$result);
     HEAP32[$243>>2] = $224;
     STACKTOP = sp;return;
    }
   } while(0);
   $241 = HEAP32[$__err>>2]|0;
   $242 = $241 | 2;
   HEAP32[$__err>>2] = $242;
   $243 = ($agg$result);
   HEAP32[$243>>2] = $224;
   STACKTOP = sp;return;
  }
 } while(0);
 $29 = (___cxa_allocate_exception(4)|0);
 $30 = $29;
 __ZNSt8bad_castC2Ev($30);
 __THREW__ = 0;
 invoke_viii(12,($29|0),((17096)|0),((143)|0));
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 if ($32) {
  $77 = ___cxa_find_matching_catch(-1,-1)|0;
  $78 = tempRet0;
  $79 = HEAP32[$5>>2]|0;
  $80 = ($79);
  (__ZNSt3__114__shared_count16__release_sharedEv($80)|0);
  ___resumeException($77|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $3 = ($__b);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($1);
 HEAP32[$5>>2] = $4;
 $6 = ($__e);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($2);
 HEAP32[$8>>2] = $7;
 $9 = $$byval_copy;
 $10 = $$byval_copy;
 $11 = $1;
 ;HEAP32[$10+0>>2]=HEAP32[$11+0>>2]|0;
 $12 = $$byval_copy1;
 $13 = $$byval_copy1;
 $14 = $2;
 ;HEAP32[$13+0>>2]=HEAP32[$14+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,((8192)),(((8192) + 32|0)));
 $15 = $$byval_copy1;
 $16 = $$byval_copy;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $$byval_copy1 = sp;
 $$byval_copy = sp + 8|0;
 $1 = sp + 16|0;
 $2 = sp + 24|0;
 $3 = (($this) + 8|0);
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 127]($3)|0);
 $9 = ($__b);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($1);
 HEAP32[$11>>2] = $10;
 $12 = ($__e);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($2);
 HEAP32[$14>>2] = $13;
 $15 = $8;
 $16 = HEAP8[$15]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  $23 = (($8) + 4|0);
  $24 = (($8) + 4|0);
  $25 = $16&255;
  $26 = $25 >>> 1;
  $27 = $24;$28 = $23;$29 = $26;
 } else {
  $19 = (($8) + 8|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($8) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $27 = $20;$28 = $20;$29 = $22;
 }
 $30 = (($27) + ($29<<2)|0);
 $31 = $$byval_copy;
 $32 = $$byval_copy;
 $33 = $1;
 ;HEAP32[$32+0>>2]=HEAP32[$33+0>>2]|0;
 $34 = $$byval_copy1;
 $35 = $$byval_copy1;
 $36 = $2;
 ;HEAP32[$35+0>>2]=HEAP32[$36+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$28,$30);
 $37 = $$byval_copy1;
 $38 = $$byval_copy;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $$byval_copy = sp;
 $1 = sp + 8|0;
 $__p$i$i$i$i = sp + 16|0;
 $2 = sp + 32|0;
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = $__p$i$i$i$i;
 $6 = HEAP32[((9128))>>2]|0;
 $7 = ($6|0)==(-1);
 do {
  if (!($7)) {
   $8 = ($__p$i$i$i$i);
   HEAP32[$8>>2] = (9128);
   $9 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$9>>2] = (183);
   $10 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$10>>2] = 0;
   __THREW__ = 0;
   invoke_viii(25,(((9128))|0),($5|0),(184|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if (!($12)) {
    break;
   }
   $59 = ___cxa_find_matching_catch(-1,-1)|0;
   $60 = tempRet0;
   $61 = HEAP32[$3>>2]|0;
   $62 = ($61);
   (__ZNSt3__114__shared_count16__release_sharedEv($62)|0);
   ___resumeException($59|0);
   // unreachable;
  }
 } while(0);
 $13 = HEAP32[(((9128) + 4|0))>>2]|0;
 $14 = (($13) + -1)|0;
 $15 = (($4) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($4) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $16;
 $20 = $18;
 $21 = (($19) - ($20))|0;
 $22 = $21 >> 2;
 $23 = ($22>>>0)>($14>>>0);
 do {
  if ($23) {
   $24 = (($18) + ($14<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    break;
   }
   $31 = $25;
   $32 = HEAP32[$3>>2]|0;
   $33 = ($32);
   (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
   $34 = ($__e);
   $35 = HEAP32[$34>>2]|0;
   $36 = $1;
   $37 = (($this) + 8|0);
   $38 = $37;
   $39 = HEAP32[$38>>2]|0;
   $40 = HEAP32[$39>>2]|0;
   $41 = (FUNCTION_TABLE_ii[$40 & 127]($37)|0);
   $42 = ($1);
   HEAP32[$42>>2] = $35;
   $43 = (($41) + 168|0);
   $44 = $$byval_copy;
   $45 = $$byval_copy;
   $46 = $1;
   ;HEAP32[$45+0>>2]=HEAP32[$46+0>>2]|0;
   $47 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$41,$43,$31,$__err,0)|0);
   $48 = $$byval_copy;
   $49 = $47;
   $50 = $41;
   $51 = (($49) - ($50))|0;
   $52 = ($51|0)<(168);
   if (!($52)) {
    $56 = ($__b);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($agg$result);
    HEAP32[$58>>2] = $57;
    STACKTOP = sp;return;
   }
   $53 = (($__tm) + 24|0);
   $54 = (($51|0) / 12)&-1;
   $55 = (($54|0) % 7)&-1;
   HEAP32[$53>>2] = $55;
   $56 = ($__b);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($agg$result);
   HEAP32[$58>>2] = $57;
   STACKTOP = sp;return;
  }
 } while(0);
 $27 = (___cxa_allocate_exception(4)|0);
 $28 = $27;
 __ZNSt8bad_castC2Ev($28);
 __THREW__ = 0;
 invoke_viii(12,($27|0),((17096)|0),((143)|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $59 = ___cxa_find_matching_catch(-1,-1)|0;
  $60 = tempRet0;
  $61 = HEAP32[$3>>2]|0;
  $62 = ($61);
  (__ZNSt3__114__shared_count16__release_sharedEv($62)|0);
  ___resumeException($59|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $$byval_copy = sp;
 $1 = sp + 8|0;
 $__p$i$i$i$i = sp + 16|0;
 $2 = sp + 32|0;
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = $__p$i$i$i$i;
 $6 = HEAP32[((9128))>>2]|0;
 $7 = ($6|0)==(-1);
 do {
  if (!($7)) {
   $8 = ($__p$i$i$i$i);
   HEAP32[$8>>2] = (9128);
   $9 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$9>>2] = (183);
   $10 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$10>>2] = 0;
   __THREW__ = 0;
   invoke_viii(25,(((9128))|0),($5|0),(184|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if (!($12)) {
    break;
   }
   $60 = ___cxa_find_matching_catch(-1,-1)|0;
   $61 = tempRet0;
   $62 = HEAP32[$3>>2]|0;
   $63 = ($62);
   (__ZNSt3__114__shared_count16__release_sharedEv($63)|0);
   ___resumeException($60|0);
   // unreachable;
  }
 } while(0);
 $13 = HEAP32[(((9128) + 4|0))>>2]|0;
 $14 = (($13) + -1)|0;
 $15 = (($4) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($4) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $16;
 $20 = $18;
 $21 = (($19) - ($20))|0;
 $22 = $21 >> 2;
 $23 = ($22>>>0)>($14>>>0);
 do {
  if ($23) {
   $24 = (($18) + ($14<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    break;
   }
   $31 = $25;
   $32 = HEAP32[$3>>2]|0;
   $33 = ($32);
   (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
   $34 = ($__e);
   $35 = HEAP32[$34>>2]|0;
   $36 = $1;
   $37 = (($this) + 8|0);
   $38 = $37;
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (FUNCTION_TABLE_ii[$41 & 127]($37)|0);
   $43 = ($1);
   HEAP32[$43>>2] = $35;
   $44 = (($42) + 288|0);
   $45 = $$byval_copy;
   $46 = $$byval_copy;
   $47 = $1;
   ;HEAP32[$46+0>>2]=HEAP32[$47+0>>2]|0;
   $48 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$42,$44,$31,$__err,0)|0);
   $49 = $$byval_copy;
   $50 = $48;
   $51 = $42;
   $52 = (($50) - ($51))|0;
   $53 = ($52|0)<(288);
   if (!($53)) {
    $57 = ($__b);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($agg$result);
    HEAP32[$59>>2] = $58;
    STACKTOP = sp;return;
   }
   $54 = (($__tm) + 16|0);
   $55 = (($52|0) / 12)&-1;
   $56 = (($55|0) % 12)&-1;
   HEAP32[$54>>2] = $56;
   $57 = ($__b);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($agg$result);
   HEAP32[$59>>2] = $58;
   STACKTOP = sp;return;
  }
 } while(0);
 $27 = (___cxa_allocate_exception(4)|0);
 $28 = $27;
 __ZNSt8bad_castC2Ev($28);
 __THREW__ = 0;
 invoke_viii(12,($27|0),((17096)|0),((143)|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $60 = ___cxa_find_matching_catch(-1,-1)|0;
  $61 = tempRet0;
  $62 = HEAP32[$3>>2]|0;
  $63 = ($62);
  (__ZNSt3__114__shared_count16__release_sharedEv($63)|0);
  ___resumeException($60|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$$i = 0, $$byval_copy = 0, $$off$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $$byval_copy = sp;
 $1 = sp + 8|0;
 $__p$i$i$i$i = sp + 16|0;
 $2 = sp + 32|0;
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 $3 = ($2);
 $4 = HEAP32[$3>>2]|0;
 $5 = $__p$i$i$i$i;
 $6 = HEAP32[((9128))>>2]|0;
 $7 = ($6|0)==(-1);
 do {
  if (!($7)) {
   $8 = ($__p$i$i$i$i);
   HEAP32[$8>>2] = (9128);
   $9 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$9>>2] = (183);
   $10 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$10>>2] = 0;
   __THREW__ = 0;
   invoke_viii(25,(((9128))|0),($5|0),(184|0));
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if (!($12)) {
    break;
   }
   $55 = ___cxa_find_matching_catch(-1,-1)|0;
   $56 = tempRet0;
   $57 = HEAP32[$3>>2]|0;
   $58 = ($57);
   (__ZNSt3__114__shared_count16__release_sharedEv($58)|0);
   ___resumeException($55|0);
   // unreachable;
  }
 } while(0);
 $13 = HEAP32[(((9128) + 4|0))>>2]|0;
 $14 = (($13) + -1)|0;
 $15 = (($4) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($4) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $16;
 $20 = $18;
 $21 = (($19) - ($20))|0;
 $22 = $21 >> 2;
 $23 = ($22>>>0)>($14>>>0);
 do {
  if ($23) {
   $24 = (($18) + ($14<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    break;
   }
   $31 = $25;
   $32 = HEAP32[$3>>2]|0;
   $33 = ($32);
   (__ZNSt3__114__shared_count16__release_sharedEv($33)|0);
   $34 = (($__tm) + 20|0);
   $35 = ($__e);
   $36 = HEAP32[$35>>2]|0;
   $37 = $1;
   $38 = ($1);
   HEAP32[$38>>2] = $36;
   $39 = $$byval_copy;
   $40 = $$byval_copy;
   $41 = $1;
   ;HEAP32[$40+0>>2]=HEAP32[$41+0>>2]|0;
   $42 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$31,4)|0);
   $43 = $$byval_copy;
   $44 = HEAP32[$__err>>2]|0;
   $45 = $44 & 4;
   $46 = ($45|0)==(0);
   if (!($46)) {
    $52 = ($__b);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($agg$result);
    HEAP32[$54>>2] = $53;
    STACKTOP = sp;return;
   }
   $47 = ($42|0)<(69);
   if ($47) {
    $48 = (($42) + 2000)|0;
    $__t$0$i = $48;
   } else {
    $$off$i = (($42) + -69)|0;
    $49 = ($$off$i>>>0)<(31);
    $50 = (($42) + 1900)|0;
    $$$i = $49 ? $50 : $42;
    $__t$0$i = $$$i;
   }
   $51 = (($__t$0$i) + -1900)|0;
   HEAP32[$34>>2] = $51;
   $52 = ($__b);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($agg$result);
   HEAP32[$54>>2] = $53;
   STACKTOP = sp;return;
  }
 } while(0);
 $27 = (___cxa_allocate_exception(4)|0);
 $28 = $27;
 __ZNSt8bad_castC2Ev($28);
 __THREW__ = 0;
 invoke_viii(12,($27|0),((17096)|0),((143)|0));
 $29 = __THREW__; __THREW__ = 0;
 $30 = $29&1;
 if ($30) {
  $55 = ___cxa_find_matching_catch(-1,-1)|0;
  $56 = tempRet0;
  $57 = HEAP32[$3>>2]|0;
  $58 = ($57);
  (__ZNSt3__114__shared_count16__release_sharedEv($58)|0);
  ___resumeException($55|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,u$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 u$0 = u$0|0;
 var $$$i = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0;
 var $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$off$i = 0, $$off$i12 = 0, $$off$i35 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__t$0$i = 0, $or$cond$i = 0, $or$cond$i15 = 0, $or$cond$i18 = 0, $or$cond$i21 = 0, $or$cond$i26 = 0, $or$cond$i29 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0;
 $$byval_copy30 = sp;
 $$byval_copy29 = sp + 8|0;
 $$byval_copy28 = sp + 16|0;
 $$byval_copy27 = sp + 24|0;
 $$byval_copy26 = sp + 32|0;
 $$byval_copy25 = sp + 40|0;
 $$byval_copy24 = sp + 48|0;
 $$byval_copy23 = sp + 56|0;
 $$byval_copy22 = sp + 64|0;
 $$byval_copy21 = sp + 72|0;
 $$byval_copy20 = sp + 80|0;
 $$byval_copy19 = sp + 88|0;
 $$byval_copy18 = sp + 96|0;
 $$byval_copy17 = sp + 104|0;
 $$byval_copy16 = sp + 112|0;
 $$byval_copy15 = sp + 120|0;
 $$byval_copy14 = sp + 128|0;
 $$byval_copy13 = sp + 136|0;
 $$byval_copy12 = sp + 144|0;
 $$byval_copy11 = sp + 152|0;
 $$byval_copy10 = sp + 160|0;
 $$byval_copy9 = sp + 168|0;
 $$byval_copy8 = sp + 176|0;
 $$byval_copy7 = sp + 184|0;
 $$byval_copy6 = sp + 192|0;
 $$byval_copy5 = sp + 200|0;
 $$byval_copy4 = sp + 208|0;
 $$byval_copy3 = sp + 216|0;
 $$byval_copy2 = sp + 224|0;
 $$byval_copy1 = sp + 232|0;
 $$byval_copy = sp + 240|0;
 $1 = sp + 248|0;
 $2 = sp + 256|0;
 $3 = sp + 264|0;
 $4 = sp + 272|0;
 $5 = sp + 280|0;
 $6 = sp + 288|0;
 $7 = sp + 296|0;
 $8 = sp + 304|0;
 $9 = sp + 312|0;
 $10 = sp + 320|0;
 $11 = sp + 328|0;
 $12 = sp + 336|0;
 $13 = sp + 344|0;
 $__p$i$i$i$i = sp + 352|0;
 $14 = sp + 368|0;
 $15 = sp + 376|0;
 $16 = sp + 384|0;
 $17 = sp + 392|0;
 $18 = sp + 400|0;
 $19 = sp + 408|0;
 $20 = sp + 416|0;
 $21 = sp + 424|0;
 $22 = sp + 432|0;
 $23 = sp + 440|0;
 $24 = sp + 448|0;
 $25 = sp + 456|0;
 $26 = sp + 464|0;
 $27 = sp + 472|0;
 $28 = sp + 480|0;
 $29 = sp + 488|0;
 $30 = sp + 496|0;
 $31 = sp + 504|0;
 $32 = sp + 512|0;
 $33 = sp + 520|0;
 $34 = sp + 528|0;
 $35 = sp + 536|0;
 $36 = sp + 544|0;
 $37 = sp + 552|0;
 $38 = sp + 560|0;
 $39 = sp + 568|0;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($14,$__iob);
 $40 = ($14);
 $41 = HEAP32[$40>>2]|0;
 $42 = $__p$i$i$i$i;
 $43 = HEAP32[((9128))>>2]|0;
 $44 = ($43|0)==(-1);
 do {
  if (!($44)) {
   $45 = ($__p$i$i$i$i);
   HEAP32[$45>>2] = (9128);
   $46 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$46>>2] = (183);
   $47 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$47>>2] = 0;
   __THREW__ = 0;
   invoke_viii(25,(((9128))|0),($42|0),(184|0));
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   if (!($49)) {
    break;
   }
   $72 = ___cxa_find_matching_catch(-1,-1)|0;
   $73 = tempRet0;
   $74 = HEAP32[$40>>2]|0;
   $75 = ($74);
   (__ZNSt3__114__shared_count16__release_sharedEv($75)|0);
   ___resumeException($72|0);
   // unreachable;
  }
 } while(0);
 $50 = HEAP32[(((9128) + 4|0))>>2]|0;
 $51 = (($50) + -1)|0;
 $52 = (($41) + 12|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = (($41) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $53;
 $57 = $55;
 $58 = (($56) - ($57))|0;
 $59 = $58 >> 2;
 $60 = ($59>>>0)>($51>>>0);
 do {
  if ($60) {
   $61 = (($55) + ($51<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)==(0|0);
   if ($63) {
    break;
   }
   $68 = $62;
   $69 = HEAP32[$40>>2]|0;
   $70 = ($69);
   (__ZNSt3__114__shared_count16__release_sharedEv($70)|0);
   $71 = $__fmt << 24 >> 24;
   L8: do {
    switch ($71|0) {
    case 116: case 110:  {
     $282 = ($__e);
     $283 = HEAP32[$282>>2]|0;
     $284 = ($24);
     HEAP32[$284>>2] = $283;
     $285 = $$byval_copy14;
     $286 = $$byval_copy14;
     $287 = $24;
     ;HEAP32[$286+0>>2]=HEAP32[$287+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$$byval_copy14,$__err,$68);
     $288 = $$byval_copy14;
     break;
    }
    case 112:  {
     $289 = (($__tm) + 8|0);
     $290 = ($__e);
     $291 = HEAP32[$290>>2]|0;
     $292 = $5;
     $293 = (($this) + 8|0);
     $294 = $293;
     $295 = HEAP32[$294>>2]|0;
     $296 = (($295) + 8|0);
     $297 = HEAP32[$296>>2]|0;
     $298 = (FUNCTION_TABLE_ii[$297 & 127]($293)|0);
     $299 = $298;
     $300 = HEAP8[$299]|0;
     $301 = $300 & 1;
     $302 = ($301<<24>>24)==(0);
     if ($302) {
      $305 = $300&255;
      $306 = $305 >>> 1;
      $307 = $306;
     } else {
      $303 = (($298) + 4|0);
      $304 = HEAP32[$303>>2]|0;
      $307 = $304;
     }
     $308 = (($298) + 12|0);
     $309 = $308;
     $310 = HEAP8[$309]|0;
     $311 = $310 & 1;
     $312 = ($311<<24>>24)==(0);
     if ($312) {
      $315 = $310&255;
      $316 = $315 >>> 1;
      $317 = $316;
     } else {
      $313 = (($298) + 16|0);
      $314 = HEAP32[$313>>2]|0;
      $317 = $314;
     }
     $318 = (0 - ($317))|0;
     $319 = ($307|0)==($318|0);
     if ($319) {
      $320 = HEAP32[$__err>>2]|0;
      $321 = $320 | 4;
      HEAP32[$__err>>2] = $321;
      break L8;
     }
     $322 = ($5);
     HEAP32[$322>>2] = $291;
     $323 = (($298) + 24|0);
     $324 = $$byval_copy15;
     $325 = $$byval_copy15;
     $326 = $5;
     ;HEAP32[$325+0>>2]=HEAP32[$326+0>>2]|0;
     $327 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy15,$298,$323,$68,$__err,0)|0);
     $328 = $$byval_copy15;
     $329 = $327;
     $330 = $298;
     $331 = (($329) - ($330))|0;
     $332 = ($327|0)==($298|0);
     do {
      if ($332) {
       $333 = HEAP32[$289>>2]|0;
       $334 = ($333|0)==(12);
       if (!($334)) {
        break;
       }
       HEAP32[$289>>2] = 0;
       break L8;
      }
     } while(0);
     $335 = ($331|0)==(12);
     if (!($335)) {
      break L8;
     }
     $336 = HEAP32[$289>>2]|0;
     $337 = ($336|0)<(12);
     if (!($337)) {
      break L8;
     }
     $338 = (($336) + 12)|0;
     HEAP32[$289>>2] = $338;
     break;
    }
    case 120:  {
     $417 = $this;
     $418 = HEAP32[$417>>2]|0;
     $419 = (($418) + 20|0);
     $420 = HEAP32[$419>>2]|0;
     $421 = ($__b);
     $422 = HEAP32[$421>>2]|0;
     $423 = ($34);
     HEAP32[$423>>2] = $422;
     $424 = ($__e);
     $425 = HEAP32[$424>>2]|0;
     $426 = ($35);
     HEAP32[$426>>2] = $425;
     $427 = $$byval_copy24;
     $428 = $$byval_copy24;
     $429 = $34;
     ;HEAP32[$428+0>>2]=HEAP32[$429+0>>2]|0;
     $430 = $$byval_copy25;
     $431 = $$byval_copy25;
     $432 = $35;
     ;HEAP32[$431+0>>2]=HEAP32[$432+0>>2]|0;
     FUNCTION_TABLE_viiiiiii[$420 & 63]($agg$result,$this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm);
     $433 = $$byval_copy25;
     $434 = $$byval_copy24;
     STACKTOP = sp;return;
     break;
    }
    case 88:  {
     $435 = (($this) + 8|0);
     $436 = $435;
     $437 = HEAP32[$436>>2]|0;
     $438 = (($437) + 24|0);
     $439 = HEAP32[$438>>2]|0;
     $440 = (FUNCTION_TABLE_ii[$439 & 127]($435)|0);
     $441 = ($__b);
     $442 = HEAP32[$441>>2]|0;
     $443 = ($37);
     HEAP32[$443>>2] = $442;
     $444 = ($__e);
     $445 = HEAP32[$444>>2]|0;
     $446 = ($38);
     HEAP32[$446>>2] = $445;
     $447 = $440;
     $448 = HEAP8[$447]|0;
     $449 = $448 & 1;
     $450 = ($449<<24>>24)==(0);
     if ($450) {
      $455 = (($440) + 4|0);
      $456 = (($440) + 4|0);
      $457 = $448&255;
      $458 = $457 >>> 1;
      $459 = $456;$460 = $455;$461 = $458;
     } else {
      $451 = (($440) + 8|0);
      $452 = HEAP32[$451>>2]|0;
      $453 = (($440) + 4|0);
      $454 = HEAP32[$453>>2]|0;
      $459 = $452;$460 = $452;$461 = $454;
     }
     $462 = (($459) + ($461<<2)|0);
     $463 = $$byval_copy26;
     $464 = $$byval_copy26;
     $465 = $37;
     ;HEAP32[$464+0>>2]=HEAP32[$465+0>>2]|0;
     $466 = $$byval_copy27;
     $467 = $$byval_copy27;
     $468 = $38;
     ;HEAP32[$467+0>>2]=HEAP32[$468+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($36,$this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$460,$462);
     $469 = $$byval_copy27;
     $470 = $$byval_copy26;
     $471 = ($36);
     $472 = HEAP32[$471>>2]|0;
     HEAP32[$441>>2] = $472;
     break;
    }
    case 114:  {
     $339 = ($__b);
     $340 = HEAP32[$339>>2]|0;
     $341 = ($26);
     HEAP32[$341>>2] = $340;
     $342 = ($__e);
     $343 = HEAP32[$342>>2]|0;
     $344 = ($27);
     HEAP32[$344>>2] = $343;
     $345 = $$byval_copy16;
     $346 = $$byval_copy16;
     $347 = $26;
     ;HEAP32[$346+0>>2]=HEAP32[$347+0>>2]|0;
     $348 = $$byval_copy17;
     $349 = $$byval_copy17;
     $350 = $27;
     ;HEAP32[$349+0>>2]=HEAP32[$350+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($25,$this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,((8288)),(((8288) + 44|0)));
     $351 = $$byval_copy17;
     $352 = $$byval_copy16;
     $353 = ($25);
     $354 = HEAP32[$353>>2]|0;
     HEAP32[$339>>2] = $354;
     break;
    }
    case 82:  {
     $355 = ($__b);
     $356 = HEAP32[$355>>2]|0;
     $357 = ($29);
     HEAP32[$357>>2] = $356;
     $358 = ($__e);
     $359 = HEAP32[$358>>2]|0;
     $360 = ($30);
     HEAP32[$360>>2] = $359;
     $361 = $$byval_copy18;
     $362 = $$byval_copy18;
     $363 = $29;
     ;HEAP32[$362+0>>2]=HEAP32[$363+0>>2]|0;
     $364 = $$byval_copy19;
     $365 = $$byval_copy19;
     $366 = $30;
     ;HEAP32[$365+0>>2]=HEAP32[$366+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($28,$this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,((8336)),(((8336) + 20|0)));
     $367 = $$byval_copy19;
     $368 = $$byval_copy18;
     $369 = ($28);
     $370 = HEAP32[$369>>2]|0;
     HEAP32[$355>>2] = $370;
     break;
    }
    case 83:  {
     $371 = ($__e);
     $372 = HEAP32[$371>>2]|0;
     $373 = $4;
     $374 = ($4);
     HEAP32[$374>>2] = $372;
     $375 = $$byval_copy20;
     $376 = $$byval_copy20;
     $377 = $4;
     ;HEAP32[$376+0>>2]=HEAP32[$377+0>>2]|0;
     $378 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy20,$__err,$68,2)|0);
     $379 = $$byval_copy20;
     $380 = HEAP32[$__err>>2]|0;
     $381 = $380 & 4;
     $382 = ($381|0)==(0);
     $383 = ($378|0)<(61);
     $or$cond$i26 = $382 & $383;
     if ($or$cond$i26) {
      $384 = ($__tm);
      HEAP32[$384>>2] = $378;
      break L8;
     } else {
      $385 = $380 | 4;
      HEAP32[$__err>>2] = $385;
      break L8;
     }
     break;
    }
    case 84:  {
     $386 = ($__b);
     $387 = HEAP32[$386>>2]|0;
     $388 = ($32);
     HEAP32[$388>>2] = $387;
     $389 = ($__e);
     $390 = HEAP32[$389>>2]|0;
     $391 = ($33);
     HEAP32[$391>>2] = $390;
     $392 = $$byval_copy21;
     $393 = $$byval_copy21;
     $394 = $32;
     ;HEAP32[$393+0>>2]=HEAP32[$394+0>>2]|0;
     $395 = $$byval_copy22;
     $396 = $$byval_copy22;
     $397 = $33;
     ;HEAP32[$396+0>>2]=HEAP32[$397+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($31,$this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,((8360)),(((8360) + 32|0)));
     $398 = $$byval_copy22;
     $399 = $$byval_copy21;
     $400 = ($31);
     $401 = HEAP32[$400>>2]|0;
     HEAP32[$386>>2] = $401;
     break;
    }
    case 119:  {
     $402 = ($__e);
     $403 = HEAP32[$402>>2]|0;
     $404 = $3;
     $405 = ($3);
     HEAP32[$405>>2] = $403;
     $406 = $$byval_copy23;
     $407 = $$byval_copy23;
     $408 = $3;
     ;HEAP32[$407+0>>2]=HEAP32[$408+0>>2]|0;
     $409 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy23,$__err,$68,1)|0);
     $410 = $$byval_copy23;
     $411 = HEAP32[$__err>>2]|0;
     $412 = $411 & 4;
     $413 = ($412|0)==(0);
     $414 = ($409|0)<(7);
     $or$cond$i29 = $413 & $414;
     if ($or$cond$i29) {
      $415 = (($__tm) + 24|0);
      HEAP32[$415>>2] = $409;
      break L8;
     } else {
      $416 = $411 | 4;
      HEAP32[$__err>>2] = $416;
      break L8;
     }
     break;
    }
    case 70:  {
     $190 = ($__b);
     $191 = HEAP32[$190>>2]|0;
     $192 = ($22);
     HEAP32[$192>>2] = $191;
     $193 = ($__e);
     $194 = HEAP32[$193>>2]|0;
     $195 = ($23);
     HEAP32[$195>>2] = $194;
     $196 = $$byval_copy7;
     $197 = $$byval_copy7;
     $198 = $22;
     ;HEAP32[$197+0>>2]=HEAP32[$198+0>>2]|0;
     $199 = $$byval_copy8;
     $200 = $$byval_copy8;
     $201 = $23;
     ;HEAP32[$200+0>>2]=HEAP32[$201+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($21,$this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,((8256)),(((8256) + 32|0)));
     $202 = $$byval_copy8;
     $203 = $$byval_copy7;
     $204 = ($21);
     $205 = HEAP32[$204>>2]|0;
     HEAP32[$190>>2] = $205;
     break;
    }
    case 72:  {
     $206 = ($__e);
     $207 = HEAP32[$206>>2]|0;
     $208 = $10;
     $209 = ($10);
     HEAP32[$209>>2] = $207;
     $210 = $$byval_copy9;
     $211 = $$byval_copy9;
     $212 = $10;
     ;HEAP32[$211+0>>2]=HEAP32[$212+0>>2]|0;
     $213 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy9,$__err,$68,2)|0);
     $214 = $$byval_copy9;
     $215 = HEAP32[$__err>>2]|0;
     $216 = $215 & 4;
     $217 = ($216|0)==(0);
     $218 = ($213|0)<(24);
     $or$cond$i = $217 & $218;
     if ($or$cond$i) {
      $219 = (($__tm) + 8|0);
      HEAP32[$219>>2] = $213;
      break L8;
     } else {
      $220 = $215 | 4;
      HEAP32[$__err>>2] = $220;
      break L8;
     }
     break;
    }
    case 73:  {
     $221 = (($__tm) + 8|0);
     $222 = ($__e);
     $223 = HEAP32[$222>>2]|0;
     $224 = $9;
     $225 = ($9);
     HEAP32[$225>>2] = $223;
     $226 = $$byval_copy10;
     $227 = $$byval_copy10;
     $228 = $9;
     ;HEAP32[$227+0>>2]=HEAP32[$228+0>>2]|0;
     $229 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy10,$__err,$68,2)|0);
     $230 = $$byval_copy10;
     $231 = HEAP32[$__err>>2]|0;
     $232 = $231 & 4;
     $233 = ($232|0)==(0);
     do {
      if ($233) {
       $$off$i12 = (($229) + -1)|0;
       $234 = ($$off$i12>>>0)<(12);
       if (!($234)) {
        break;
       }
       HEAP32[$221>>2] = $229;
       break L8;
      }
     } while(0);
     $235 = $231 | 4;
     HEAP32[$__err>>2] = $235;
     break;
    }
    case 68:  {
     $174 = ($__b);
     $175 = HEAP32[$174>>2]|0;
     $176 = ($19);
     HEAP32[$176>>2] = $175;
     $177 = ($__e);
     $178 = HEAP32[$177>>2]|0;
     $179 = ($20);
     HEAP32[$179>>2] = $178;
     $180 = $$byval_copy5;
     $181 = $$byval_copy5;
     $182 = $19;
     ;HEAP32[$181+0>>2]=HEAP32[$182+0>>2]|0;
     $183 = $$byval_copy6;
     $184 = $$byval_copy6;
     $185 = $20;
     ;HEAP32[$184+0>>2]=HEAP32[$185+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($18,$this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,((8224)),(((8224) + 32|0)));
     $186 = $$byval_copy6;
     $187 = $$byval_copy5;
     $188 = ($18);
     $189 = HEAP32[$188>>2]|0;
     HEAP32[$174>>2] = $189;
     break;
    }
    case 121:  {
     $473 = (($__tm) + 20|0);
     $474 = ($__e);
     $475 = HEAP32[$474>>2]|0;
     $476 = $2;
     $477 = ($2);
     HEAP32[$477>>2] = $475;
     $478 = $$byval_copy28;
     $479 = $$byval_copy28;
     $480 = $2;
     ;HEAP32[$479+0>>2]=HEAP32[$480+0>>2]|0;
     $481 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy28,$__err,$68,4)|0);
     $482 = $$byval_copy28;
     $483 = HEAP32[$__err>>2]|0;
     $484 = $483 & 4;
     $485 = ($484|0)==(0);
     if (!($485)) {
      break L8;
     }
     $486 = ($481|0)<(69);
     if ($486) {
      $487 = (($481) + 2000)|0;
      $__t$0$i = $487;
     } else {
      $$off$i35 = (($481) + -69)|0;
      $488 = ($$off$i35>>>0)<(31);
      $489 = (($481) + 1900)|0;
      $$$i = $488 ? $489 : $481;
      $__t$0$i = $$$i;
     }
     $490 = (($__t$0$i) + -1900)|0;
     HEAP32[$473>>2] = $490;
     break;
    }
    case 37:  {
     $505 = ($__e);
     $506 = HEAP32[$505>>2]|0;
     $507 = ($39);
     HEAP32[$507>>2] = $506;
     $508 = $$byval_copy30;
     $509 = $$byval_copy30;
     $510 = $39;
     ;HEAP32[$509+0>>2]=HEAP32[$510+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE(0,$__b,$$byval_copy30,$__err,$68);
     $511 = $$byval_copy30;
     break;
    }
    case 89:  {
     $491 = ($__e);
     $492 = HEAP32[$491>>2]|0;
     $493 = $1;
     $494 = ($1);
     HEAP32[$494>>2] = $492;
     $495 = $$byval_copy29;
     $496 = $$byval_copy29;
     $497 = $1;
     ;HEAP32[$496+0>>2]=HEAP32[$497+0>>2]|0;
     $498 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy29,$__err,$68,4)|0);
     $499 = $$byval_copy29;
     $500 = HEAP32[$__err>>2]|0;
     $501 = $500 & 4;
     $502 = ($501|0)==(0);
     if (!($502)) {
      break L8;
     }
     $503 = (($__tm) + 20|0);
     $504 = (($498) + -1900)|0;
     HEAP32[$503>>2] = $504;
     break;
    }
    case 109:  {
     $251 = ($__e);
     $252 = HEAP32[$251>>2]|0;
     $253 = $7;
     $254 = ($7);
     HEAP32[$254>>2] = $252;
     $255 = $$byval_copy12;
     $256 = $$byval_copy12;
     $257 = $7;
     ;HEAP32[$256+0>>2]=HEAP32[$257+0>>2]|0;
     $258 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy12,$__err,$68,2)|0);
     $259 = $$byval_copy12;
     $260 = HEAP32[$__err>>2]|0;
     $261 = $260 & 4;
     $262 = ($261|0)==(0);
     $263 = ($258|0)<(13);
     $or$cond$i18 = $262 & $263;
     if ($or$cond$i18) {
      $264 = (($__tm) + 16|0);
      $265 = (($258) + -1)|0;
      HEAP32[$264>>2] = $265;
      break L8;
     } else {
      $266 = $260 | 4;
      HEAP32[$__err>>2] = $266;
      break L8;
     }
     break;
    }
    case 77:  {
     $267 = ($__e);
     $268 = HEAP32[$267>>2]|0;
     $269 = $6;
     $270 = ($6);
     HEAP32[$270>>2] = $268;
     $271 = $$byval_copy13;
     $272 = $$byval_copy13;
     $273 = $6;
     ;HEAP32[$272+0>>2]=HEAP32[$273+0>>2]|0;
     $274 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy13,$__err,$68,2)|0);
     $275 = $$byval_copy13;
     $276 = HEAP32[$__err>>2]|0;
     $277 = $276 & 4;
     $278 = ($277|0)==(0);
     $279 = ($274|0)<(60);
     $or$cond$i21 = $278 & $279;
     if ($or$cond$i21) {
      $280 = (($__tm) + 4|0);
      HEAP32[$280>>2] = $274;
      break L8;
     } else {
      $281 = $276 | 4;
      HEAP32[$__err>>2] = $281;
      break L8;
     }
     break;
    }
    case 106:  {
     $236 = ($__e);
     $237 = HEAP32[$236>>2]|0;
     $238 = $8;
     $239 = ($8);
     HEAP32[$239>>2] = $237;
     $240 = $$byval_copy11;
     $241 = $$byval_copy11;
     $242 = $8;
     ;HEAP32[$241+0>>2]=HEAP32[$242+0>>2]|0;
     $243 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy11,$__err,$68,3)|0);
     $244 = $$byval_copy11;
     $245 = HEAP32[$__err>>2]|0;
     $246 = $245 & 4;
     $247 = ($246|0)==(0);
     $248 = ($243|0)<(366);
     $or$cond$i15 = $247 & $248;
     if ($or$cond$i15) {
      $249 = (($__tm) + 28|0);
      HEAP32[$249>>2] = $243;
      break L8;
     } else {
      $250 = $245 | 4;
      HEAP32[$__err>>2] = $250;
      break L8;
     }
     break;
    }
    case 65: case 97:  {
     $76 = ($__e);
     $77 = HEAP32[$76>>2]|0;
     $78 = $13;
     $79 = (($this) + 8|0);
     $80 = $79;
     $81 = HEAP32[$80>>2]|0;
     $82 = HEAP32[$81>>2]|0;
     $83 = (FUNCTION_TABLE_ii[$82 & 127]($79)|0);
     $84 = ($13);
     HEAP32[$84>>2] = $77;
     $85 = (($83) + 168|0);
     $86 = $$byval_copy;
     $87 = $$byval_copy;
     $88 = $13;
     ;HEAP32[$87+0>>2]=HEAP32[$88+0>>2]|0;
     $89 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$83,$85,$68,$__err,0)|0);
     $90 = $$byval_copy;
     $91 = $89;
     $92 = $83;
     $93 = (($91) - ($92))|0;
     $94 = ($93|0)<(168);
     if (!($94)) {
      break L8;
     }
     $95 = (($__tm) + 24|0);
     $96 = (($93|0) / 12)&-1;
     $97 = (($96|0) % 7)&-1;
     HEAP32[$95>>2] = $97;
     break;
    }
    case 104: case 66: case 98:  {
     $98 = ($__e);
     $99 = HEAP32[$98>>2]|0;
     $100 = $12;
     $101 = (($this) + 8|0);
     $102 = $101;
     $103 = HEAP32[$102>>2]|0;
     $104 = (($103) + 4|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = (FUNCTION_TABLE_ii[$105 & 127]($101)|0);
     $107 = ($12);
     HEAP32[$107>>2] = $99;
     $108 = (($106) + 288|0);
     $109 = $$byval_copy1;
     $110 = $$byval_copy1;
     $111 = $12;
     ;HEAP32[$110+0>>2]=HEAP32[$111+0>>2]|0;
     $112 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy1,$106,$108,$68,$__err,0)|0);
     $113 = $$byval_copy1;
     $114 = $112;
     $115 = $106;
     $116 = (($114) - ($115))|0;
     $117 = ($116|0)<(288);
     if (!($117)) {
      break L8;
     }
     $118 = (($__tm) + 16|0);
     $119 = (($116|0) / 12)&-1;
     $120 = (($119|0) % 12)&-1;
     HEAP32[$118>>2] = $120;
     break;
    }
    case 101: case 100:  {
     $159 = (($__tm) + 12|0);
     $160 = ($__e);
     $161 = HEAP32[$160>>2]|0;
     $162 = $11;
     $163 = ($11);
     HEAP32[$163>>2] = $161;
     $164 = $$byval_copy4;
     $165 = $$byval_copy4;
     $166 = $11;
     ;HEAP32[$165+0>>2]=HEAP32[$166+0>>2]|0;
     $167 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy4,$__err,$68,2)|0);
     $168 = $$byval_copy4;
     $169 = HEAP32[$__err>>2]|0;
     $170 = $169 & 4;
     $171 = ($170|0)==(0);
     do {
      if ($171) {
       $$off$i = (($167) + -1)|0;
       $172 = ($$off$i>>>0)<(31);
       if (!($172)) {
        break;
       }
       HEAP32[$159>>2] = $167;
       break L8;
      }
     } while(0);
     $173 = $169 | 4;
     HEAP32[$__err>>2] = $173;
     break;
    }
    case 99:  {
     $121 = (($this) + 8|0);
     $122 = $121;
     $123 = HEAP32[$122>>2]|0;
     $124 = (($123) + 12|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = (FUNCTION_TABLE_ii[$125 & 127]($121)|0);
     $127 = ($__b);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($16);
     HEAP32[$129>>2] = $128;
     $130 = ($__e);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($17);
     HEAP32[$132>>2] = $131;
     $133 = $126;
     $134 = HEAP8[$133]|0;
     $135 = $134 & 1;
     $136 = ($135<<24>>24)==(0);
     if ($136) {
      $141 = (($126) + 4|0);
      $142 = (($126) + 4|0);
      $143 = $134&255;
      $144 = $143 >>> 1;
      $145 = $142;$146 = $141;$147 = $144;
     } else {
      $137 = (($126) + 8|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = (($126) + 4|0);
      $140 = HEAP32[$139>>2]|0;
      $145 = $138;$146 = $138;$147 = $140;
     }
     $148 = (($145) + ($147<<2)|0);
     $149 = $$byval_copy2;
     $150 = $$byval_copy2;
     $151 = $16;
     ;HEAP32[$150+0>>2]=HEAP32[$151+0>>2]|0;
     $152 = $$byval_copy3;
     $153 = $$byval_copy3;
     $154 = $17;
     ;HEAP32[$153+0>>2]=HEAP32[$154+0>>2]|0;
     __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($15,$this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$146,$148);
     $155 = $$byval_copy3;
     $156 = $$byval_copy2;
     $157 = ($15);
     $158 = HEAP32[$157>>2]|0;
     HEAP32[$127>>2] = $158;
     break;
    }
    default: {
     $512 = HEAP32[$__err>>2]|0;
     $513 = $512 | 4;
     HEAP32[$__err>>2] = $513;
    }
    }
   } while(0);
   $514 = ($__b);
   $515 = HEAP32[$514>>2]|0;
   $516 = ($agg$result);
   HEAP32[$516>>2] = $515;
   STACKTOP = sp;return;
  }
 } while(0);
 $64 = (___cxa_allocate_exception(4)|0);
 $65 = $64;
 __ZNSt8bad_castC2Ev($65);
 __THREW__ = 0;
 invoke_viii(12,($64|0),((17096)|0),((143)|0));
 $66 = __THREW__; __THREW__ = 0;
 $67 = $66&1;
 if ($67) {
  $72 = ___cxa_find_matching_catch(-1,-1)|0;
  $73 = tempRet0;
  $74 = HEAP32[$40>>2]|0;
  $75 = ($74);
  (__ZNSt3__114__shared_count16__release_sharedEv($75)|0);
  ___resumeException($72|0);
  // unreachable;
 } else {
  // unreachable;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i9 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__b);
 $2 = ($__e);
 $3 = $__ct;
 L1: while(1) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ($4|0)==(0|0);
  do {
   if ($5) {
    $18 = 1;
   } else {
    $6 = (($4) + 12|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = (($4) + 16|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = ($7|0)==($9|0);
    if ($10) {
     $11 = $4;
     $12 = HEAP32[$11>>2]|0;
     $13 = (($12) + 36|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (FUNCTION_TABLE_ii[$14 & 127]($4)|0);
     $$0$i$i$i$i = $15;
    } else {
     $16 = HEAP32[$7>>2]|0;
     $$0$i$i$i$i = $16;
    }
    $17 = ($$0$i$i$i$i|0)==(-1);
    if ($17) {
     HEAP32[$1>>2] = 0;
     $18 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$1>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $18 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $19 = HEAP32[$2>>2]|0;
  $20 = ($19|0)==(0|0);
  do {
   if ($20) {
    label = 15;
   } else {
    $21 = (($19) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (($19) + 16|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($22|0)==($24|0);
    if ($25) {
     $26 = $19;
     $27 = HEAP32[$26>>2]|0;
     $28 = (($27) + 36|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = (FUNCTION_TABLE_ii[$29 & 127]($19)|0);
     $$0$i$i1$i$i = $30;
    } else {
     $31 = HEAP32[$22>>2]|0;
     $$0$i$i1$i$i = $31;
    }
    $32 = ($$0$i$i1$i$i|0)==(-1);
    if ($32) {
     HEAP32[$2>>2] = 0;
     label = 15;
     break;
    } else {
     if ($18) {
      $33 = $19;
      break;
     } else {
      $$pre$i3$i$i9 = $19;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($18) {
    $$pre$i3$i$i9 = 0;
    break;
   } else {
    $33 = 0;
   }
  }
  $34 = HEAP32[$1>>2]|0;
  $35 = (($34) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($34) + 16|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)==($38|0);
  if ($39) {
   $40 = $34;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + 36|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (FUNCTION_TABLE_ii[$43 & 127]($34)|0);
   $$0$i$i = $44;
  } else {
   $45 = HEAP32[$36>>2]|0;
   $$0$i$i = $45;
  }
  $46 = HEAP32[$3>>2]|0;
  $47 = (($46) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (FUNCTION_TABLE_iiii[$48 & 63]($__ct,8192,$$0$i$i)|0);
  if (!($49)) {
   $$pre$i3$i$i9 = $33;
   break;
  }
  $50 = HEAP32[$1>>2]|0;
  $51 = (($50) + 12|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($50) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)==($54|0);
  if ($55) {
   $56 = $50;
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + 40|0);
   $59 = HEAP32[$58>>2]|0;
   (FUNCTION_TABLE_ii[$59 & 127]($50)|0);
   continue;
  } else {
   $60 = (($52) + 4|0);
   HEAP32[$51>>2] = $60;
   continue;
  }
 }
 $61 = HEAP32[$1>>2]|0;
 $62 = ($61|0)==(0|0);
 do {
  if ($62) {
   $75 = 1;
  } else {
   $63 = (($61) + 12|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($61) + 16|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($64|0)==($66|0);
   if ($67) {
    $68 = $61;
    $69 = HEAP32[$68>>2]|0;
    $70 = (($69) + 36|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = (FUNCTION_TABLE_ii[$71 & 127]($61)|0);
    $$0$i$i$i$i1 = $72;
   } else {
    $73 = HEAP32[$64>>2]|0;
    $$0$i$i$i$i1 = $73;
   }
   $74 = ($$0$i$i$i$i1|0)==(-1);
   if ($74) {
    HEAP32[$1>>2] = 0;
    $75 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$1>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $75 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $76 = ($$pre$i3$i$i9|0)==(0|0);
 do {
  if ($76) {
   label = 37;
  } else {
   $77 = (($$pre$i3$i$i9) + 12|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (($$pre$i3$i$i9) + 16|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ($78|0)==($80|0);
   if ($81) {
    $82 = $$pre$i3$i$i9;
    $83 = HEAP32[$82>>2]|0;
    $84 = (($83) + 36|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = (FUNCTION_TABLE_ii[$85 & 127]($$pre$i3$i$i9)|0);
    $$0$i$i1$i$i7 = $86;
   } else {
    $87 = HEAP32[$78>>2]|0;
    $$0$i$i1$i$i7 = $87;
   }
   $88 = ($$0$i$i1$i$i7|0)==(-1);
   if ($88) {
    HEAP32[$2>>2] = 0;
    label = 37;
    break;
   }
   if (!($75)) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 do {
  if ((label|0) == 37) {
   if ($75) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $89 = HEAP32[$__err>>2]|0;
 $90 = $89 | 2;
 HEAP32[$__err>>2] = $90;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i915 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__b);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   $16 = 1;
  } else {
   $4 = (($2) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($2) + 16|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($5|0)==($7|0);
   if ($8) {
    $9 = $2;
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 36|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (FUNCTION_TABLE_ii[$12 & 127]($2)|0);
    $$0$i$i$i$i = $13;
   } else {
    $14 = HEAP32[$5>>2]|0;
    $$0$i$i$i$i = $14;
   }
   $15 = ($$0$i$i$i$i|0)==(-1);
   if ($15) {
    HEAP32[$1>>2] = 0;
    $16 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $16 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $17 = ($__e);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 do {
  if ($19) {
   label = 14;
  } else {
   $20 = (($18) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($18) + 16|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($21|0)==($23|0);
   if ($24) {
    $25 = $18;
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 36|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (FUNCTION_TABLE_ii[$28 & 127]($18)|0);
    $$0$i$i1$i$i = $29;
   } else {
    $30 = HEAP32[$21>>2]|0;
    $$0$i$i1$i$i = $30;
   }
   $31 = ($$0$i$i1$i$i|0)==(-1);
   if ($31) {
    HEAP32[$17>>2] = 0;
    label = 14;
    break;
   } else {
    if ($16) {
     $$pre$i3$i$i915 = $18;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($16) {
   label = 16;
  } else {
   $$pre$i3$i$i915 = 0;
  }
 }
 if ((label|0) == 16) {
  $32 = HEAP32[$__err>>2]|0;
  $33 = $32 | 6;
  HEAP32[$__err>>2] = $33;
  STACKTOP = sp;return;
 }
 $34 = HEAP32[$1>>2]|0;
 $35 = (($34) + 12|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 16|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($36|0)==($38|0);
 if ($39) {
  $40 = $34;
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 36|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (FUNCTION_TABLE_ii[$43 & 127]($34)|0);
  $$0$i$i = $44;
 } else {
  $45 = HEAP32[$36>>2]|0;
  $$0$i$i = $45;
 }
 $46 = $__ct;
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + 52|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (FUNCTION_TABLE_iiii[$49 & 63]($__ct,$$0$i$i,0)|0);
 $51 = ($50<<24>>24)==(37);
 if (!($51)) {
  $52 = HEAP32[$__err>>2]|0;
  $53 = $52 | 4;
  HEAP32[$__err>>2] = $53;
  STACKTOP = sp;return;
 }
 $54 = HEAP32[$1>>2]|0;
 $55 = (($54) + 12|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($54) + 16|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($56|0)==($58|0);
 if ($59) {
  $60 = $54;
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + 40|0);
  $63 = HEAP32[$62>>2]|0;
  (FUNCTION_TABLE_ii[$63 & 127]($54)|0);
 } else {
  $64 = (($56) + 4|0);
  HEAP32[$55>>2] = $64;
 }
 $65 = HEAP32[$1>>2]|0;
 $66 = ($65|0)==(0|0);
 do {
  if ($66) {
   $79 = 1;
  } else {
   $67 = (($65) + 12|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (($65) + 16|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($68|0)==($70|0);
   if ($71) {
    $72 = $65;
    $73 = HEAP32[$72>>2]|0;
    $74 = (($73) + 36|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (FUNCTION_TABLE_ii[$75 & 127]($65)|0);
    $$0$i$i$i$i1 = $76;
   } else {
    $77 = HEAP32[$68>>2]|0;
    $$0$i$i$i$i1 = $77;
   }
   $78 = ($$0$i$i$i$i1|0)==(-1);
   if ($78) {
    HEAP32[$1>>2] = 0;
    $79 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$1>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $79 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $80 = ($$pre$i3$i$i915|0)==(0|0);
 do {
  if ($80) {
   label = 38;
  } else {
   $81 = (($$pre$i3$i$i915) + 12|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (($$pre$i3$i$i915) + 16|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = ($82|0)==($84|0);
   if ($85) {
    $86 = $$pre$i3$i$i915;
    $87 = HEAP32[$86>>2]|0;
    $88 = (($87) + 36|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (FUNCTION_TABLE_ii[$89 & 127]($$pre$i3$i$i915)|0);
    $$0$i$i1$i$i7 = $90;
   } else {
    $91 = HEAP32[$82>>2]|0;
    $$0$i$i1$i$i7 = $91;
   }
   $92 = ($$0$i$i1$i$i7|0)==(-1);
   if ($92) {
    HEAP32[$17>>2] = 0;
    label = 38;
    break;
   }
   if (!($79)) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 do {
  if ((label|0) == 38) {
   if ($79) {
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $93 = HEAP32[$__err>>2]|0;
 $94 = $93 | 2;
 HEAP32[$__err>>2] = $94;
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i17 = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i23 = 0, $$0$i$i1$i$i8 = 0, $$0$i$i14 = 0, $$0$in = 0, $$0$in$phi = 0, $$01 = 0, $$pre$i$i$i = 0, $$pre$i$i$i19 = 0, $$pre$i$i$i4 = 0, $$pre$i3$i$i10 = 0, $$pre$i3$i$i25 = 0, $1 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i20 = 0, $phitmp$i$i$i5 = 0, $phitmp$i4$i$i11 = 0, $tmp$i$i13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__b);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 do {
  if ($3) {
   $16 = 1;
  } else {
   $4 = (($2) + 12|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = (($2) + 16|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($5|0)==($7|0);
   if ($8) {
    $9 = $2;
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 36|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = (FUNCTION_TABLE_ii[$12 & 127]($2)|0);
    $$0$i$i$i$i = $13;
   } else {
    $14 = HEAP32[$5>>2]|0;
    $$0$i$i$i$i = $14;
   }
   $15 = ($$0$i$i$i$i|0)==(-1);
   if ($15) {
    HEAP32[$1>>2] = 0;
    $16 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$1>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $16 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $17 = ($__e);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 do {
  if ($19) {
   label = 14;
  } else {
   $20 = (($18) + 12|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($18) + 16|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($21|0)==($23|0);
   if ($24) {
    $25 = $18;
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 36|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (FUNCTION_TABLE_ii[$28 & 127]($18)|0);
    $$0$i$i1$i$i = $29;
   } else {
    $30 = HEAP32[$21>>2]|0;
    $$0$i$i1$i$i = $30;
   }
   $31 = ($$0$i$i1$i$i|0)==(-1);
   if ($31) {
    HEAP32[$17>>2] = 0;
    label = 14;
    break;
   } else {
    if ($16) {
     $34 = $18;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($16) {
   label = 16;
  } else {
   $34 = 0;
  }
 }
 if ((label|0) == 16) {
  $32 = HEAP32[$__err>>2]|0;
  $33 = $32 | 6;
  HEAP32[$__err>>2] = $33;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $35 = HEAP32[$1>>2]|0;
 $36 = (($35) + 12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($35) + 16|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($37|0)==($39|0);
 if ($40) {
  $41 = $35;
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + 36|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (FUNCTION_TABLE_ii[$44 & 127]($35)|0);
  $$0$i$i = $45;
 } else {
  $46 = HEAP32[$37>>2]|0;
  $$0$i$i = $46;
 }
 $47 = $__ct;
 $48 = HEAP32[$47>>2]|0;
 $49 = (($48) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (FUNCTION_TABLE_iiii[$50 & 63]($__ct,2048,$$0$i$i)|0);
 if (!($51)) {
  $52 = HEAP32[$__err>>2]|0;
  $53 = $52 | 4;
  HEAP32[$__err>>2] = $53;
  $$01 = 0;
  STACKTOP = sp;return ($$01|0);
 }
 $54 = $__ct;
 $55 = HEAP32[$54>>2]|0;
 $56 = (($55) + 52|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (FUNCTION_TABLE_iiii[$57 & 63]($__ct,$$0$i$i,0)|0);
 $59 = $58 << 24 >> 24;
 $60 = HEAP32[$1>>2]|0;
 $61 = (($60) + 12|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = (($60) + 16|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($62|0)==($64|0);
 if ($65) {
  $66 = $60;
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + 40|0);
  $69 = HEAP32[$68>>2]|0;
  (FUNCTION_TABLE_ii[$69 & 127]($60)|0);
  $$0$in = $__n;$$pre$i3$i$i10 = $34;$71 = $34;$__r$0$in = $59;
 } else {
  $70 = (($62) + 4|0);
  HEAP32[$61>>2] = $70;
  $$0$in = $__n;$$pre$i3$i$i10 = $34;$71 = $34;$__r$0$in = $59;
 }
 while(1) {
  $__r$0 = (($__r$0$in) + -48)|0;
  $$0 = (($$0$in) + -1)|0;
  $72 = HEAP32[$1>>2]|0;
  $73 = ($72|0)==(0|0);
  do {
   if ($73) {
    $86 = 1;
   } else {
    $74 = (($72) + 12|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (($72) + 16|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($75|0)==($77|0);
    if ($78) {
     $79 = $72;
     $80 = HEAP32[$79>>2]|0;
     $81 = (($80) + 36|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (FUNCTION_TABLE_ii[$82 & 127]($72)|0);
     $$0$i$i$i$i2 = $83;
    } else {
     $84 = HEAP32[$75>>2]|0;
     $$0$i$i$i$i2 = $84;
    }
    $85 = ($$0$i$i$i$i2|0)==(-1);
    if ($85) {
     HEAP32[$1>>2] = 0;
     $86 = 1;
     break;
    } else {
     $$pre$i$i$i4 = HEAP32[$1>>2]|0;
     $phitmp$i$i$i5 = ($$pre$i$i$i4|0)==(0|0);
     $86 = $phitmp$i$i$i5;
     break;
    }
   }
  } while(0);
  $87 = ($71|0)==(0|0);
  do {
   if ($87) {
    $$pre$i3$i$i25 = $$pre$i3$i$i10;$100 = 0;$101 = 1;
   } else {
    $88 = (($71) + 12|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (($71) + 16|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($89|0)==($91|0);
    if ($92) {
     $93 = $71;
     $94 = HEAP32[$93>>2]|0;
     $95 = (($94) + 36|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = (FUNCTION_TABLE_ii[$96 & 127]($71)|0);
     $$0$i$i1$i$i8 = $97;
    } else {
     $98 = HEAP32[$89>>2]|0;
     $$0$i$i1$i$i8 = $98;
    }
    $99 = ($$0$i$i1$i$i8|0)==(-1);
    if ($99) {
     HEAP32[$17>>2] = 0;
     $$pre$i3$i$i25 = 0;$100 = 0;$101 = 1;
     break;
    } else {
     $phitmp$i4$i$i11 = ($$pre$i3$i$i10|0)==(0|0);
     $$pre$i3$i$i25 = $$pre$i3$i$i10;$100 = $$pre$i3$i$i10;$101 = $phitmp$i4$i$i11;
     break;
    }
   }
  } while(0);
  $tmp$i$i13 = $86 ^ $101;
  $102 = ($$0|0)>(0);
  $$ = $tmp$i$i13 & $102;
  $103 = HEAP32[$1>>2]|0;
  if (!($$)) {
   break;
  }
  $104 = (($103) + 12|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($103) + 16|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ($105|0)==($107|0);
  if ($108) {
   $109 = $103;
   $110 = HEAP32[$109>>2]|0;
   $111 = (($110) + 36|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = (FUNCTION_TABLE_ii[$112 & 127]($103)|0);
   $$0$i$i14 = $113;
  } else {
   $114 = HEAP32[$105>>2]|0;
   $$0$i$i14 = $114;
  }
  $115 = HEAP32[$47>>2]|0;
  $116 = (($115) + 12|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = (FUNCTION_TABLE_iiii[$117 & 63]($__ct,2048,$$0$i$i14)|0);
  if (!($118)) {
   $$01 = $__r$0;
   label = 63;
   break;
  }
  $119 = ($__r$0*10)|0;
  $120 = HEAP32[$54>>2]|0;
  $121 = (($120) + 52|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (FUNCTION_TABLE_iiii[$122 & 63]($__ct,$$0$i$i14,0)|0);
  $124 = $123 << 24 >> 24;
  $125 = (($124) + ($119))|0;
  $126 = HEAP32[$1>>2]|0;
  $127 = (($126) + 12|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = (($126) + 16|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = ($128|0)==($130|0);
  if ($131) {
   $132 = $126;
   $133 = HEAP32[$132>>2]|0;
   $134 = (($133) + 40|0);
   $135 = HEAP32[$134>>2]|0;
   (FUNCTION_TABLE_ii[$135 & 127]($126)|0);
   $$0$in$phi = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$71 = $100;$__r$0$in = $125;$$0$in = $$0$in$phi;
   continue;
  } else {
   $136 = (($128) + 4|0);
   HEAP32[$127>>2] = $136;
   $$0$in$phi = $$0;$$pre$i3$i$i10 = $$pre$i3$i$i25;$71 = $100;$__r$0$in = $125;$$0$in = $$0$in$phi;
   continue;
  }
 }
 if ((label|0) == 63) {
  STACKTOP = sp;return ($$01|0);
 }
 $137 = ($103|0)==(0|0);
 do {
  if ($137) {
   $150 = 1;
  } else {
   $138 = (($103) + 12|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = (($103) + 16|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ($139|0)==($141|0);
   if ($142) {
    $143 = $103;
    $144 = HEAP32[$143>>2]|0;
    $145 = (($144) + 36|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = (FUNCTION_TABLE_ii[$146 & 127]($103)|0);
    $$0$i$i$i$i17 = $147;
   } else {
    $148 = HEAP32[$139>>2]|0;
    $$0$i$i$i$i17 = $148;
   }
   $149 = ($$0$i$i$i$i17|0)==(-1);
   if ($149) {
    HEAP32[$1>>2] = 0;
    $150 = 1;
    break;
   } else {
    $$pre$i$i$i19 = HEAP32[$1>>2]|0;
    $phitmp$i$i$i20 = ($$pre$i$i$i19|0)==(0|0);
    $150 = $phitmp$i$i$i20;
    break;
   }
  }
 } while(0);
 $151 = ($$pre$i3$i$i25|0)==(0|0);
 do {
  if ($151) {
   label = 60;
  } else {
   $152 = (($$pre$i3$i$i25) + 12|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = (($$pre$i3$i$i25) + 16|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = ($153|0)==($155|0);
   if ($156) {
    $157 = $$pre$i3$i$i25;
    $158 = HEAP32[$157>>2]|0;
    $159 = (($158) + 36|0);
    $160 = HEAP32[$159>>2]|0;
    $161 = (FUNCTION_TABLE_ii[$160 & 127]($$pre$i3$i$i25)|0);
    $$0$i$i1$i$i23 = $161;
   } else {
    $162 = HEAP32[$153>>2]|0;
    $$0$i$i1$i$i23 = $162;
   }
   $163 = ($$0$i$i1$i$i23|0)==(-1);
   if ($163) {
    HEAP32[$17>>2] = 0;
    label = 60;
    break;
   }
   if ($150) {
    $$01 = $__r$0;
   } else {
    break;
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 do {
  if ((label|0) == 60) {
   if ($150) {
    break;
   } else {
    $$01 = $__r$0;
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 $164 = HEAP32[$__err>>2]|0;
 $165 = $164 | 2;
 HEAP32[$__err>>2] = $165;
 $$01 = $__r$0;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$i$i$indexZ2D = 0, label = 0, sp = 0;
 var u$0 = 0, u$1 = 0;
 sp = STACKTOP;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP8[(9032)]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (___cxa_guard_acquire(((9032)|0))|0);
   $6 = ($5|0)==(0);
   if ($6) {
    break;
   }
   __THREW__ = 0;
   $7 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if (!($9)) {
    HEAP32[(9024)>>2] = $7;
    ___cxa_guard_release(((9032)|0));
    break;
   }
   $10 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$0 = tempRet0;
   ___cxa_guard_abort(((9032)|0));
   $eh$lpad$body$i$i$i$indexZ2D = $10;
   ___clang_call_terminate($eh$lpad$body$i$i$i$indexZ2D);
   // unreachable;
  }
 } while(0);
 $11 = HEAP32[(9024)>>2]|0;
 $12 = ($2|0)==($11|0);
 if ($12) {
  $17 = $this;
  __ZdlPv($17);
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi(186,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  $17 = $this;
  __ZdlPv($17);
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 u$1 = tempRet0;
 $eh$lpad$body$i$i$i$indexZ2D = $16;
 ___clang_call_terminate($eh$lpad$body$i$i$i$indexZ2D);
 // unreachable;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$i$indexZ2D = 0, label = 0, sp = 0, u$0 = 0;
 var u$1 = 0;
 sp = STACKTOP;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP8[(9032)]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (___cxa_guard_acquire(((9032)|0))|0);
   $6 = ($5|0)==(0);
   if ($6) {
    break;
   }
   __THREW__ = 0;
   $7 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if (!($9)) {
    HEAP32[(9024)>>2] = $7;
    ___cxa_guard_release(((9032)|0));
    break;
   }
   $10 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$0 = tempRet0;
   ___cxa_guard_abort(((9032)|0));
   $eh$lpad$body$i$i$indexZ2D = $10;
   ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
   // unreachable;
  }
 } while(0);
 $11 = HEAP32[(9024)>>2]|0;
 $12 = ($2|0)==($11|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi(186,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 u$1 = tempRet0;
 $eh$lpad$body$i$i$indexZ2D = $16;
 ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
 // unreachable;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg$result,$this,$__s,u$0,u$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 u$0 = u$0|0;
 u$1 = u$1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$01$i$i = 0, $$7$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0;
 var $fmt$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $fmt$i = sp;
 $__nar = sp + 8|0;
 $1 = ($__nar);
 $2 = ($fmt$i);
 HEAP8[$2] = 37;
 $3 = (($fmt$i) + 1|0);
 HEAP8[$3] = $__fmt;
 $4 = (($fmt$i) + 2|0);
 HEAP8[$4] = $__mod;
 $5 = (($fmt$i) + 3|0);
 HEAP8[$5] = 0;
 $6 = ($__mod<<24>>24)==(0);
 if (!($6)) {
  HEAP8[$3] = $__mod;
  HEAP8[$4] = $__fmt;
 }
 $7 = (($this) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_strftime_l(($1|0),100,($2|0),($__tm|0),($8|0))|0);
 $10 = (($__nar) + ($9)|0);
 $11 = ($__s);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($9|0)==(0);
 if ($13) {
  $35 = $12;
  $36 = ($agg$result);
  HEAP32[$36>>2] = $35;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $1;$14 = $12;$15 = $12;
 }
 while(1) {
  $16 = HEAP8[$$01$i$i]|0;
  $17 = ($15|0)==(0|0);
  do {
   if ($17) {
    $31 = $14;$32 = 0;
   } else {
    $18 = (($15) + 24|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($15) + 28|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19|0)==($21|0);
    if ($22) {
     $24 = $15;
     $25 = HEAP32[$24>>2]|0;
     $26 = (($25) + 52|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = $16&255;
     $29 = (FUNCTION_TABLE_iii[$27 & 63]($15,$28)|0);
     $30 = ($29|0)==(-1);
     $$$i = $30 ? 0 : $14;
     $$7$i = $30 ? 0 : $15;
     $31 = $$$i;$32 = $$7$i;
     break;
    } else {
     $23 = (($19) + 1|0);
     HEAP32[$18>>2] = $23;
     HEAP8[$19] = $16;
     $31 = $14;$32 = $15;
     break;
    }
   }
  } while(0);
  $33 = (($$01$i$i) + 1|0);
  $34 = ($33|0)==($10|0);
  if ($34) {
   $35 = $31;
   break;
  } else {
   $$01$i$i = $33;$14 = $31;$15 = $32;
  }
 }
 $36 = ($agg$result);
 HEAP32[$36>>2] = $35;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$i$i$indexZ2D = 0, label = 0, sp = 0;
 var u$0 = 0, u$1 = 0;
 sp = STACKTOP;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP8[(9032)]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (___cxa_guard_acquire(((9032)|0))|0);
   $6 = ($5|0)==(0);
   if ($6) {
    break;
   }
   __THREW__ = 0;
   $7 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if (!($9)) {
    HEAP32[(9024)>>2] = $7;
    ___cxa_guard_release(((9032)|0));
    break;
   }
   $10 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$0 = tempRet0;
   ___cxa_guard_abort(((9032)|0));
   $eh$lpad$body$i$i$i$indexZ2D = $10;
   ___clang_call_terminate($eh$lpad$body$i$i$i$indexZ2D);
   // unreachable;
  }
 } while(0);
 $11 = HEAP32[(9024)>>2]|0;
 $12 = ($2|0)==($11|0);
 if ($12) {
  $17 = $this;
  __ZdlPv($17);
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi(186,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  $17 = $this;
  __ZdlPv($17);
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 u$1 = tempRet0;
 $eh$lpad$body$i$i$i$indexZ2D = $16;
 ___clang_call_terminate($eh$lpad$body$i$i$i$indexZ2D);
 // unreachable;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$i$i$indexZ2D = 0, label = 0, sp = 0, u$0 = 0;
 var u$1 = 0;
 sp = STACKTOP;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP8[(9032)]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $5 = (___cxa_guard_acquire(((9032)|0))|0);
   $6 = ($5|0)==(0);
   if ($6) {
    break;
   }
   __THREW__ = 0;
   $7 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if (!($9)) {
    HEAP32[(9024)>>2] = $7;
    ___cxa_guard_release(((9032)|0));
    break;
   }
   $10 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$0 = tempRet0;
   ___cxa_guard_abort(((9032)|0));
   $eh$lpad$body$i$i$indexZ2D = $10;
   ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
   // unreachable;
  }
 } while(0);
 $11 = HEAP32[(9024)>>2]|0;
 $12 = ($2|0)==($11|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi(186,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 u$1 = tempRet0;
 $eh$lpad$body$i$i$indexZ2D = $16;
 ___clang_call_terminate($eh$lpad$body$i$i$indexZ2D);
 // unreachable;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg$result,$this,$__s,u$0,u$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 u$0 = u$0|0;
 u$1 = u$1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i$i$i = 0, $$01$i$i = 0, $$7$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 408|0;
 $__nar = sp;
 $__ne = sp + 400|0;
 $1 = $__nar;
 $2 = ($__nar);
 $3 = (($__nar) + 400|0);
 HEAP32[$__ne>>2] = $3;
 $4 = (($this) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($4,$2,$__ne,$__tm,$__fmt,$__mod);
 $5 = HEAP32[$__ne>>2]|0;
 $6 = ($__s);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($2|0)==($5|0);
 if ($8) {
  $29 = $7;
  $30 = ($agg$result);
  HEAP32[$30>>2] = $29;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $2;$10 = $7;$9 = $7;
 }
 while(1) {
  $11 = HEAP32[$$01$i$i>>2]|0;
  $12 = ($10|0)==(0|0);
  if ($12) {
   $25 = $9;$26 = 0;
  } else {
   $13 = (($10) + 24|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($10) + 28|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($14|0)==($16|0);
   if ($17) {
    $18 = $10;
    $19 = HEAP32[$18>>2]|0;
    $20 = (($19) + 52|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (FUNCTION_TABLE_iii[$21 & 63]($10,$11)|0);
    $$0$i$i$i$i = $22;
   } else {
    $23 = (($14) + 4|0);
    HEAP32[$13>>2] = $23;
    HEAP32[$14>>2] = $11;
    $$0$i$i$i$i = $11;
   }
   $24 = ($$0$i$i$i$i|0)==(-1);
   $$$i = $24 ? 0 : $9;
   $$7$i = $24 ? 0 : $10;
   $25 = $$$i;$26 = $$7$i;
  }
  $27 = (($$01$i$i) + 4|0);
  $28 = ($27|0)==($5|0);
  if ($28) {
   $29 = $25;
   break;
  } else {
   $$01$i$i = $27;$10 = $26;$9 = $25;
  }
 }
 $30 = ($agg$result);
 HEAP32[$30>>2] = $29;
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__wb = $__wb|0;
 $__we = $__we|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__nb = 0, $fmt$i = 0, $mb = 0, $tmpcast = 0, label = 0;
 var sp = 0, u$0 = 0, u$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 120|0;
 $fmt$i = sp;
 $__nar = sp + 8|0;
 $mb = sp + 112|0;
 $tmpcast = $mb;
 $__nb = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = ($__nar);
 $2 = ($fmt$i);
 HEAP8[$2] = 37;
 $3 = (($fmt$i) + 1|0);
 HEAP8[$3] = $__fmt;
 $4 = (($fmt$i) + 2|0);
 HEAP8[$4] = $__mod;
 $5 = (($fmt$i) + 3|0);
 HEAP8[$5] = 0;
 $6 = ($__mod<<24>>24)==(0);
 if (!($6)) {
  HEAP8[$3] = $__mod;
  HEAP8[$4] = $__fmt;
 }
 $7 = ($this);
 $8 = HEAP32[$7>>2]|0;
 (_strftime_l(($1|0),100,($2|0),($__tm|0),($8|0))|0);
 $9 = $mb;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = 0;
 HEAP32[$__nb>>2] = $1;
 $13 = HEAP32[$__we>>2]|0;
 $14 = $13;
 $15 = $__wb;
 $16 = (($14) - ($15))|0;
 $17 = $16 >> 2;
 $18 = HEAP32[$7>>2]|0;
 $19 = (_uselocale(($18|0))|0);
 __THREW__ = 0;
 $20 = (invoke_iiiii(15,($__wb|0),($__nb|0),($17|0),($tmpcast|0))|0);
 $21 = __THREW__; __THREW__ = 0;
 $22 = $21&1;
 if ($22) {
  $27 = ___cxa_find_matching_catch(-1,-1)|0;
  $28 = tempRet0;
  $29 = ($19|0)==(0|0);
  if ($29) {
   ___resumeException($27|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(93,($19|0))|0);
  $30 = __THREW__; __THREW__ = 0;
  $31 = $30&1;
  if ($31) {
   $32 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$1 = tempRet0;
   ___clang_call_terminate($32);
   // unreachable;
  } else {
   ___resumeException($27|0);
   // unreachable;
  }
 }
 $23 = ($19|0)==(0|0);
 do {
  if (!($23)) {
   __THREW__ = 0;
   (invoke_ii(93,($19|0))|0);
   $24 = __THREW__; __THREW__ = 0;
   $25 = $24&1;
   if (!($25)) {
    break;
   }
   $26 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$0 = tempRet0;
   ___clang_call_terminate($26);
   // unreachable;
  }
 } while(0);
 $33 = ($20|0)==(-1);
 if ($33) {
  __ZNSt3__121__throw_runtime_errorEPKc((10016));
  // unreachable;
 } else {
  $34 = (($__wb) + ($20<<2)|0);
  HEAP32[$__we>>2] = $34;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $this2$i$i$i = $agg$result;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $this2$i$i$i = $agg$result;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $this2$i$i$i = $agg$result;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $agg$result;
 HEAP8[$1]=67109634&255;HEAP8[$1+1|0]=(67109634>>8)&255;HEAP8[$1+2|0]=(67109634>>16)&255;HEAP8[$1+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $agg$result;
 HEAP8[$1]=67109634&255;HEAP8[$1+1|0]=(67109634>>8)&255;HEAP8[$1+2|0]=(67109634>>16)&255;HEAP8[$1+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $this2$i$i$i = $agg$result;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $this2$i$i$i = $agg$result;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $this2$i$i$i = $agg$result;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $agg$result;
 HEAP8[$1]=67109634&255;HEAP8[$1+1|0]=(67109634>>8)&255;HEAP8[$1+2|0]=(67109634>>16)&255;HEAP8[$1+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $agg$result;
 HEAP8[$1]=67109634&255;HEAP8[$1+1|0]=(67109634>>8)&255;HEAP8[$1+2|0]=(67109634>>16)&255;HEAP8[$1+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $this2$i$i$i = $agg$result;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $this2$i$i$i = $agg$result;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $this2$i$i$i = $agg$result;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $agg$result;
 HEAP8[$1]=67109634&255;HEAP8[$1+1|0]=(67109634>>8)&255;HEAP8[$1+2|0]=(67109634>>16)&255;HEAP8[$1+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $agg$result;
 HEAP8[$1]=67109634&255;HEAP8[$1+1|0]=(67109634>>8)&255;HEAP8[$1+2|0]=(67109634>>16)&255;HEAP8[$1+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $this2$i$i$i = $agg$result;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $this2$i$i$i = $agg$result;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $this2$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $this2$i$i$i = $agg$result;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $agg$result;
 HEAP8[$1]=67109634&255;HEAP8[$1+1|0]=(67109634>>8)&255;HEAP8[$1+2|0]=(67109634>>16)&255;HEAP8[$1+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $agg$result;
 HEAP8[$1]=67109634&255;HEAP8[$1+1|0]=(67109634>>8)&255;HEAP8[$1+2|0]=(67109634>>16)&255;HEAP8[$1+3|0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$01$i$phi = 0, $$117 = 0, $$118 = 0, $$1215 = 0, $$1216 = 0, $$byval_copy = 0, $$pre = 0, $$pre20 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$211 = 0, $__neg = 0, $__p$i$i$i$i = 0;
 var $__w$012 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $vararg_buffer = 0, $vararg_lifetime_bitcast = 0, $vararg_ptr = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer = sp + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__p$i$i$i$i = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__wbuf = STACKTOP; STACKTOP = STACKTOP + 104|0;
 $__wb = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__wn = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__loc = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__neg = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__atoms = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__nbuf = STACKTOP; STACKTOP = STACKTOP + 104|0;
 $2 = ($__wbuf);
 $3 = ($__wb);
 HEAP32[$3>>2] = $2;
 $4 = (($__wb) + 4|0);
 HEAP32[$4>>2] = 187;
 $5 = (($__wbuf) + 100|0);
 __THREW__ = 0;
 invoke_vii(49,($__loc|0),($__iob|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $68 = ___cxa_find_matching_catch(-1,-1)|0;
   $69 = tempRet0;
   HEAP32[$3>>2] = 0;
   $$117 = $68;$$1215 = $69;$155 = 187;$156 = $2;
  } else {
   $8 = ($__loc);
   $9 = HEAP32[$8>>2]|0;
   $10 = $__p$i$i$i$i;
   $11 = HEAP32[((9136))>>2]|0;
   $12 = ($11|0)==(-1);
   if ($12) {
    label = 4;
   } else {
    $13 = ($__p$i$i$i$i);
    HEAP32[$13>>2] = (9136);
    $14 = (($__p$i$i$i$i) + 4|0);
    HEAP32[$14>>2] = (183);
    $15 = (($__p$i$i$i$i) + 8|0);
    HEAP32[$15>>2] = 0;
    __THREW__ = 0;
    invoke_viii(25,(((9136))|0),($10|0),(184|0));
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if ($17) {
     label = 15;
    } else {
     label = 4;
    }
   }
   L6: do {
    if ((label|0) == 4) {
     $18 = HEAP32[(((9136) + 4|0))>>2]|0;
     $19 = (($18) + -1)|0;
     $20 = (($9) + 12|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (($9) + 8|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = $21;
     $25 = $23;
     $26 = (($24) - ($25))|0;
     $27 = $26 >> 2;
     $28 = ($27>>>0)>($19>>>0);
     do {
      if ($28) {
       $29 = (($23) + ($19<<2)|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = ($30|0)==(0|0);
       if ($31) {
        break;
       }
       $36 = $30;
       HEAP8[$__neg] = 0;
       $37 = ($__e);
       $38 = HEAP32[$37>>2]|0;
       $39 = ($1);
       HEAP32[$39>>2] = $38;
       $40 = (($__iob) + 4|0);
       $41 = HEAP32[$40>>2]|0;
       __THREW__ = 0;
       $42 = $$byval_copy;
       $43 = $$byval_copy;
       $44 = $1;
       ;HEAP32[$43+0>>2]=HEAP32[$44+0>>2]|0;
       $45 = (invoke_iiiiiiiiiiii(1,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($41|0),($__err|0),($__neg|0),($36|0),($__wb|0),($__wn|0),($5|0))|0);
       $46 = $$byval_copy;
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        label = 15;
        break L6;
       }
       L12: do {
        if ($45) {
         $49 = ($__atoms);
         $50 = $30;
         $51 = HEAP32[$50>>2]|0;
         $52 = (($51) + 32|0);
         $53 = HEAP32[$52>>2]|0;
         __THREW__ = 0;
         (invoke_iiiii($53|0,($36|0),((8752)|0),(((8752 + 10|0))|0),($49|0))|0);
         $54 = __THREW__; __THREW__ = 0;
         $55 = $54&1;
         if ($55) {
          label = 15;
          break L6;
         }
         $56 = ($__nbuf);
         $57 = HEAP32[$__wn>>2]|0;
         $58 = HEAP32[$3>>2]|0;
         $59 = $57;
         $60 = $58;
         $61 = (($59) - ($60))|0;
         $62 = ($61|0)>(98);
         do {
          if ($62) {
           $63 = (($61) + 2)|0;
           $64 = (_malloc($63)|0);
           $65 = ($64|0)==(0|0);
           if (!($65)) {
            $77 = $64;$__nc$0 = $64;
            label = 19;
            break;
           }
           __THREW__ = 0;
           invoke_v(7);
           $66 = __THREW__; __THREW__ = 0;
           $67 = $66&1;
           if ($67) {
            $72 = 0;
            label = 16;
           } else {
            $77 = 0;$__nc$0 = 0;
            label = 19;
           }
          } else {
           $77 = 0;$__nc$0 = $56;
           label = 19;
          }
         } while(0);
         do {
          if ((label|0) == 19) {
           $78 = HEAP8[$__neg]|0;
           $79 = ($78<<24>>24)==(0);
           if ($79) {
            $__nc$1 = $__nc$0;
           } else {
            $80 = (($__nc$0) + 1|0);
            HEAP8[$__nc$0] = 45;
            $__nc$1 = $80;
           }
           $81 = ($58>>>0)<($57>>>0);
           if ($81) {
            $82 = (($__atoms) + 10|0);
            $83 = $__atoms;
            $__nc$211 = $__nc$1;$__w$012 = $58;
            while(1) {
             $84 = HEAP8[$__w$012]|0;
             $$01$i = $49;
             while(1) {
              $86 = HEAP8[$$01$i]|0;
              $87 = ($86<<24>>24)==($84<<24>>24);
              $88 = (($$01$i) + 1|0);
              if ($87) {
               $$0$lcssa$i = $$01$i;
               break;
              }
              $85 = ($88|0)==($82|0);
              if ($85) {
               $$0$lcssa$i = $82;
               break;
              } else {
               $$01$i$phi = $88;$$01$i = $$01$i$phi;
              }
             }
             $89 = $$0$lcssa$i;
             $90 = (($89) - ($83))|0;
             $91 = (8752 + ($90)|0);
             $92 = HEAP8[$91]|0;
             HEAP8[$__nc$211] = $92;
             $93 = (($__w$012) + 1|0);
             $94 = (($__nc$211) + 1|0);
             $95 = HEAP32[$__wn>>2]|0;
             $96 = ($93>>>0)<($95>>>0);
             if ($96) {
              $__nc$211 = $94;$__w$012 = $93;
             } else {
              $__nc$2$lcssa = $94;
              break;
             }
            }
           } else {
            $__nc$2$lcssa = $__nc$1;
           }
           HEAP8[$__nc$2$lcssa] = 0;
           $vararg_ptr = ($vararg_buffer);
           HEAP32[$vararg_ptr>>2] = $__v;
           $97 = (_sscanf(($56|0),((8768)|0),($vararg_buffer|0))|0);
           $98 = ($97|0)==(1);
           if ($98) {
            $107 = ($77|0)==(0|0);
            if ($107) {
             break L12;
            }
            _free($77);
            break L12;
           }
           $99 = (___cxa_allocate_exception(8)|0);
           $100 = $99;
           __THREW__ = 0;
           invoke_vii(75,($100|0),((8776)|0));
           $101 = __THREW__; __THREW__ = 0;
           $102 = $101&1;
           if ($102) {
            $105 = ___cxa_find_matching_catch(-1,-1)|0;
            $106 = tempRet0;
            ___cxa_free_exception(($99|0));
            $75 = $77;$eh$lpad$body$index2Z2D = $106;$eh$lpad$body$indexZ2D = $105;
            break;
           }
           __THREW__ = 0;
           invoke_viii(12,($99|0),((5576)|0),((58)|0));
           $103 = __THREW__; __THREW__ = 0;
           $104 = $103&1;
           if ($104) {
            $72 = $77;
            label = 16;
            break;
           }
           // unreachable;
          }
         } while(0);
         if ((label|0) == 16) {
          $73 = ___cxa_find_matching_catch(-1,-1)|0;
          $74 = tempRet0;
          $75 = $72;$eh$lpad$body$index2Z2D = $74;$eh$lpad$body$indexZ2D = $73;
         }
         $76 = ($75|0)==(0|0);
         if ($76) {
          $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index2Z2D;
          break L6;
         }
         _free($75);
         $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index2Z2D;
         break L6;
        }
       } while(0);
       $108 = ($__b);
       $109 = HEAP32[$108>>2]|0;
       $110 = ($109|0)==(0|0);
       do {
        if ($110) {
         $124 = 0;
        } else {
         $111 = (($109) + 12|0);
         $112 = HEAP32[$111>>2]|0;
         $113 = (($109) + 16|0);
         $114 = HEAP32[$113>>2]|0;
         $115 = ($112|0)==($114|0);
         if (!($115)) {
          $124 = $109;
          break;
         }
         $116 = $109;
         $117 = HEAP32[$116>>2]|0;
         $118 = (($117) + 36|0);
         $119 = HEAP32[$118>>2]|0;
         __THREW__ = 0;
         $120 = (invoke_ii($119|0,($109|0))|0);
         $121 = __THREW__; __THREW__ = 0;
         $122 = $121&1;
         if ($122) {
          label = 15;
          break L6;
         }
         $123 = ($120|0)==(-1);
         if (!($123)) {
          $124 = $109;
          break;
         }
         HEAP32[$108>>2] = 0;
         $124 = 0;
        }
       } while(0);
       $125 = ($124|0)==(0|0);
       $126 = HEAP32[$37>>2]|0;
       $127 = ($126|0)==(0|0);
       do {
        if ($127) {
         label = 45;
        } else {
         $128 = (($126) + 12|0);
         $129 = HEAP32[$128>>2]|0;
         $130 = (($126) + 16|0);
         $131 = HEAP32[$130>>2]|0;
         $132 = ($129|0)==($131|0);
         if (!($132)) {
          if ($125) {
           break;
          } else {
           label = 47;
           break;
          }
         }
         $133 = $126;
         $134 = HEAP32[$133>>2]|0;
         $135 = (($134) + 36|0);
         $136 = HEAP32[$135>>2]|0;
         __THREW__ = 0;
         $137 = (invoke_ii($136|0,($126|0))|0);
         $138 = __THREW__; __THREW__ = 0;
         $139 = $138&1;
         if ($139) {
          label = 15;
          break L6;
         }
         $140 = ($137|0)==(-1);
         if ($140) {
          HEAP32[$37>>2] = 0;
          label = 45;
          break;
         } else {
          if ($125) {
           break;
          } else {
           label = 47;
           break;
          }
         }
        }
       } while(0);
       if ((label|0) == 45) {
        if ($125) {
         label = 47;
        }
       }
       if ((label|0) == 47) {
        $141 = HEAP32[$__err>>2]|0;
        $142 = $141 | 2;
        HEAP32[$__err>>2] = $142;
       }
       $143 = ($agg$result);
       HEAP32[$143>>2] = $124;
       $144 = HEAP32[$8>>2]|0;
       $145 = ($144);
       (__ZNSt3__114__shared_count16__release_sharedEv($145)|0);
       $146 = HEAP32[$3>>2]|0;
       HEAP32[$3>>2] = 0;
       $147 = ($146|0)==(0|0);
       if ($147) {
        STACKTOP = sp;return;
       }
       $148 = HEAP32[$4>>2]|0;
       __THREW__ = 0;
       invoke_vi($148|0,($146|0));
       $149 = __THREW__; __THREW__ = 0;
       $150 = $149&1;
       if ($150) {
        $151 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        u$0 = tempRet0;
        ___clang_call_terminate($151);
        // unreachable;
       } else {
        STACKTOP = sp;return;
       }
      }
     } while(0);
     $32 = (___cxa_allocate_exception(4)|0);
     $33 = $32;
     __ZNSt8bad_castC2Ev($33);
     __THREW__ = 0;
     invoke_viii(12,($32|0),((17096)|0),((143)|0));
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if ($35) {
      label = 15;
      break;
     }
     // unreachable;
    }
   } while(0);
   if ((label|0) == 15) {
    $70 = ___cxa_find_matching_catch(-1,-1)|0;
    $71 = tempRet0;
    $$0 = $70;$$01 = $71;
   }
   $152 = HEAP32[$8>>2]|0;
   $153 = ($152);
   (__ZNSt3__114__shared_count16__release_sharedEv($153)|0);
   $$pre = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $154 = ($$pre|0)==(0|0);
   if ($154) {
    $$118 = $$0;$$1216 = $$01;
    ___resumeException($$118|0);
    // unreachable;
   } else {
    $$pre20 = HEAP32[$4>>2]|0;
    $$117 = $$0;$$1215 = $$01;$155 = $$pre20;$156 = $$pre;
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi($155|0,($156|0));
 $157 = __THREW__; __THREW__ = 0;
 $158 = $157&1;
 if ($158) {
  $159 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$1 = tempRet0;
  ___clang_call_terminate($159);
  // unreachable;
 } else {
  $$118 = $$117;$$1216 = $$1215;
  ___resumeException($$118|0);
  // unreachable;
 }
}
function __ZNSt3__112__do_nothingEPv(u$0) {
 u$0 = u$0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$$i = 0, $$$i118 = 0, $$$i128 = 0, $$$i140 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i114 = 0, $$0$i$i151 = 0, $$0$i$i172 = 0, $$0$i$i29 = 0, $$0$i$i32 = 0, $$0$i$i45 = 0, $$0$i$i50 = 0, $$0$i$i53 = 0, $$0$i$i64 = 0, $$0$i$i67 = 0, $$0$i$i84 = 0, $$0$i$i93 = 0, $$0$i$i96 = 0;
 var $$462 = 0, $$463 = 0, $$464 = 0, $$465 = 0, $$467 = 0, $$lcssa293 = 0, $$lcssa309 = 0, $$lcssa535 = 0, $$ph$ph = 0, $$ph$ph235$ph$ph$ph$ph = 0, $$phi$trans$insert = 0, $$phi$trans$insert576 = 0, $$pr$i = 0, $$pr$i142 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i101 = 0, $$pre$i$i$i156 = 0, $$pre$i$i$i176 = 0;
 var $$pre$i$i$i19 = 0, $$pre$i$i$i35 = 0, $$pre$i$i$i71 = 0, $$pre$i143 = 0, $$pre$i2$i$i180 = 0, $$pre$i2$i$i180427 = 0, $$pre$i2$i$i180428 = 0, $$pre$i2$i$i39 = 0, $$pre$i2$i$i39424 = 0, $$pre$i2$i$i39426 = 0, $$pre$i2$i$i75 = 0, $$pre$i2$i$i75431$ph = 0, $$pre$i2$i$i75431458 = 0, $$pre450 = 0, $$pre451 = 0, $$pre452 = 0, $$pre453 = 0, $$pre574 = 0, $$pre575 = 0, $$pre577 = 0;
 var $$sum = 0, $$sum454 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0;
 var $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0;
 var $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0;
 var $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0;
 var $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0;
 var $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0;
 var $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0;
 var $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0;
 var $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0;
 var $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0;
 var $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gbuf = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0;
 var $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$06 = 0, $__p$0353 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$05 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0355 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $free = 0, $free200 = 0, $free201 = 0, $free202$lcssa = 0, $free202349 = 0;
 var $free203 = 0, $free204 = 0, $free205 = 0, $free206 = 0, $free206$ph$ph = 0, $free206$ph$ph234$ph$ph$ph$ph = 0, $free208 = 0, $isascii1$i = 0, $isascii1$i136 = 0, $isascii1$i149 = 0, $isascii1$i48 = 0, $isascii1$i62 = 0, $lpad$phi$index = 0, $lpad$phi$index7 = 0, $or$cond = 0, $or$cond7 = 0, $or$cond8 = 0, $phitmp$i = 0, $phitmp$i129 = 0, $sext = 0;
 var $sext230 = 0, $sext231 = 0, $sext232 = 0, $switch = 0, $this2$i$i$i = 0, $this2$i$i$i10 = 0, $this2$i$i$i12 = 0, $this2$i$i$i15 = 0, $this2$i$i$i9 = 0, $tmp$i$i182 = 0, $tmp$i$i41 = 0, $tmp$i$i77 = 0, $tmpcast = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0, u$2 = 0, u$3 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 408|0;
 $__gbuf = sp;
 $__pat = sp + 400|0;
 $tmpcast = $__pat;
 $__dp = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__ts = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__grp = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__sym = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__psn = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__nsn = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__spaces = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__fd = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__et = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = $__gbuf;
 $2 = ($__gbuf);
 HEAP32[$__pat>>2] = 0;
 $this2$i$i$i = $__grp;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 $this2$i$i$i9 = $__sym;
 ;HEAP32[$this2$i$i$i9+0>>2]=0|0;HEAP32[$this2$i$i$i9+4>>2]=0|0;HEAP32[$this2$i$i$i9+8>>2]=0|0;
 $this2$i$i$i10 = $__psn;
 ;HEAP32[$this2$i$i$i10+0>>2]=0|0;HEAP32[$this2$i$i$i10+4>>2]=0|0;HEAP32[$this2$i$i$i10+8>>2]=0|0;
 $this2$i$i$i12 = $__nsn;
 ;HEAP32[$this2$i$i$i12+0>>2]=0|0;HEAP32[$this2$i$i$i12+4>>2]=0|0;HEAP32[$this2$i$i$i12+8>>2]=0|0;
 $this2$i$i$i15 = $__spaces;
 ;HEAP32[$this2$i$i$i15+0>>2]=0|0;HEAP32[$this2$i$i$i15+4>>2]=0|0;HEAP32[$this2$i$i$i15+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(1,($__intl|0),($__loc|0),($tmpcast|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if ($4) {
   $85 = ___cxa_find_matching_catch(-1,-1)|0;
   $86 = tempRet0;
   $87 = $2;$free206 = 187;$lpad$phi$index = $85;$lpad$phi$index7 = $86;
  } else {
   $5 = (($__gbuf) + 400|0);
   $6 = ($__wb);
   $7 = HEAP32[$6>>2]|0;
   HEAP32[$__wn>>2] = $7;
   $8 = ($__b);
   $9 = ($__e);
   $10 = $__pat;
   $11 = (($__ct) + 8|0);
   $12 = $__nsn;
   $13 = (($12) + 1|0);
   $14 = (($__nsn) + 4|0);
   $15 = (($__nsn) + 8|0);
   $16 = $__psn;
   $17 = (($16) + 1|0);
   $18 = (($__psn) + 4|0);
   $19 = (($__psn) + 8|0);
   $20 = $__flags & 512;
   $21 = ($20|0)!=(0);
   $22 = $__sym;
   $23 = (($22) + 1|0);
   $24 = (($__sym) + 8|0);
   $25 = (($__sym) + 4|0);
   $26 = $__spaces;
   $27 = (($26) + 1|0);
   $28 = (($__spaces) + 8|0);
   $29 = (($__spaces) + 4|0);
   $30 = (($10) + 3|0);
   $31 = (($__wb) + 4|0);
   $32 = (($__grp) + 4|0);
   $33 = $5;$34 = $2;$35 = $2;$36 = $__we;$__p$0353 = 0;$__trailing_sign$0355 = 0;$free202349 = 187;
   L3: while(1) {
    $37 = HEAP32[$8>>2]|0;
    $38 = ($37|0)==(0|0);
    do {
     if ($38) {
      $52 = 0;
     } else {
      $39 = (($37) + 12|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = (($37) + 16|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = ($40|0)==($42|0);
      if (!($43)) {
       $52 = $37;
       break;
      }
      $44 = $37;
      $45 = HEAP32[$44>>2]|0;
      $46 = (($45) + 36|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_ii($47|0,($37|0))|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       $$ph$ph235$ph$ph$ph$ph = $35;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
       label = 23;
       break L3;
      }
      $51 = ($48|0)==(-1);
      if ($51) {
       HEAP32[$8>>2] = 0;
       $52 = 0;
       break;
      } else {
       $$pre$i$i$i19 = HEAP32[$8>>2]|0;
       $52 = $$pre$i$i$i19;
       break;
      }
     }
    } while(0);
    $53 = ($52|0)==(0|0);
    $54 = HEAP32[$9>>2]|0;
    $55 = ($54|0)==(0|0);
    do {
     if ($55) {
      label = 15;
     } else {
      $56 = (($54) + 12|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = (($54) + 16|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = ($57|0)==($59|0);
      if (!($60)) {
       if ($53) {
        $69 = $54;
        break;
       } else {
        $$lcssa293 = $35;$$lcssa309 = $34;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
        label = 301;
        break L3;
       }
      }
      $61 = $54;
      $62 = HEAP32[$61>>2]|0;
      $63 = (($62) + 36|0);
      $64 = HEAP32[$63>>2]|0;
      __THREW__ = 0;
      $65 = (invoke_ii($64|0,($54|0))|0);
      $66 = __THREW__; __THREW__ = 0;
      $67 = $66&1;
      if ($67) {
       $$ph$ph235$ph$ph$ph$ph = $35;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
       label = 23;
       break L3;
      }
      $68 = ($65|0)==(-1);
      if ($68) {
       HEAP32[$9>>2] = 0;
       label = 15;
       break;
      } else {
       if ($53) {
        $69 = $54;
        break;
       } else {
        $$lcssa293 = $35;$$lcssa309 = $34;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
        label = 301;
        break L3;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($53) {
      $$lcssa293 = $35;$$lcssa309 = $34;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
      label = 301;
      break;
     } else {
      $69 = 0;
     }
    }
    $70 = (($10) + ($__p$0353)|0);
    $71 = HEAP8[$70]|0;
    $72 = $71 << 24 >> 24;
    L25: do {
     switch ($72|0) {
     case 3:  {
      $212 = HEAP8[$this2$i$i$i10]|0;
      $213 = $212 & 1;
      $214 = ($213<<24>>24)==(0);
      if ($214) {
       $216 = $212&255;
       $217 = $216 >>> 1;
       $218 = $217;
      } else {
       $215 = HEAP32[$18>>2]|0;
       $218 = $215;
      }
      $219 = HEAP8[$this2$i$i$i12]|0;
      $220 = $219 & 1;
      $221 = ($220<<24>>24)==(0);
      if ($221) {
       $223 = $219&255;
       $224 = $223 >>> 1;
       $225 = $224;
      } else {
       $222 = HEAP32[$14>>2]|0;
       $225 = $222;
      }
      $226 = (0 - ($225))|0;
      $227 = ($218|0)==($226|0);
      if ($227) {
       $907 = $36;$908 = $35;$909 = $34;$910 = $33;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
       break L25;
      }
      if ($214) {
       $229 = $212&255;
       $230 = $229 >>> 1;
       $231 = $230;
      } else {
       $228 = HEAP32[$18>>2]|0;
       $231 = $228;
      }
      $232 = ($231|0)==(0);
      do {
       if (!($232)) {
        if ($221) {
         $234 = $219&255;
         $235 = $234 >>> 1;
         $236 = $235;
        } else {
         $233 = HEAP32[$14>>2]|0;
         $236 = $233;
        }
        $237 = ($236|0)==(0);
        if ($237) {
         break;
        }
        $323 = HEAP32[$8>>2]|0;
        $324 = (($323) + 12|0);
        $325 = HEAP32[$324>>2]|0;
        $326 = (($323) + 16|0);
        $327 = HEAP32[$326>>2]|0;
        $328 = ($325|0)==($327|0);
        if ($328) {
         $329 = $323;
         $330 = HEAP32[$329>>2]|0;
         $331 = (($330) + 36|0);
         $332 = HEAP32[$331>>2]|0;
         __THREW__ = 0;
         $333 = (invoke_ii($332|0,($323|0))|0);
         $334 = __THREW__; __THREW__ = 0;
         $335 = $334&1;
         if ($335) {
          $$ph$ph235$ph$ph$ph$ph = $35;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
          label = 23;
          break L3;
         }
         $$pre452 = HEAP8[$this2$i$i$i10]|0;
         $$pre574 = HEAP32[$8>>2]|0;
         $$phi$trans$insert = (($$pre574) + 12|0);
         $$pre575 = HEAP32[$$phi$trans$insert>>2]|0;
         $$phi$trans$insert576 = (($$pre574) + 16|0);
         $$pre577 = HEAP32[$$phi$trans$insert576>>2]|0;
         $$0$i$i96 = $333;$338 = $$pre577;$339 = $$pre575;$340 = $$pre574;$341 = $$pre452;
        } else {
         $336 = HEAP8[$325]|0;
         $337 = $336&255;
         $$0$i$i96 = $337;$338 = $327;$339 = $325;$340 = $323;$341 = $212;
        }
        $342 = $$0$i$i96&255;
        $343 = $341 & 1;
        $344 = ($343<<24>>24)==(0);
        $345 = HEAP32[$19>>2]|0;
        $$463 = $344 ? $17 : $345;
        $346 = HEAP8[$$463]|0;
        $347 = ($342<<24>>24)==($346<<24>>24);
        $348 = (($340) + 12|0);
        $349 = ($339|0)==($338|0);
        if ($347) {
         if ($349) {
          $350 = $340;
          $351 = HEAP32[$350>>2]|0;
          $352 = (($351) + 40|0);
          $353 = HEAP32[$352>>2]|0;
          __THREW__ = 0;
          (invoke_ii($353|0,($340|0))|0);
          $354 = __THREW__; __THREW__ = 0;
          $355 = $354&1;
          if ($355) {
           $$ph$ph235$ph$ph$ph$ph = $35;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
           label = 23;
           break L3;
          }
         } else {
          $356 = (($339) + 1|0);
          HEAP32[$348>>2] = $356;
         }
         $357 = HEAP8[$this2$i$i$i10]|0;
         $358 = $357 & 1;
         $359 = ($358<<24>>24)==(0);
         if ($359) {
          $361 = $357&255;
          $362 = $361 >>> 1;
          $363 = $362;
         } else {
          $360 = HEAP32[$18>>2]|0;
          $363 = $360;
         }
         $364 = ($363>>>0)>(1);
         $__psn$__trailing_sign$05 = $364 ? $__psn : $__trailing_sign$0355;
         $907 = $36;$908 = $35;$909 = $34;$910 = $33;$__trailing_sign$1 = $__psn$__trailing_sign$05;$free203 = $free202349;
         break L25;
        }
        if ($349) {
         $365 = $340;
         $366 = HEAP32[$365>>2]|0;
         $367 = (($366) + 36|0);
         $368 = HEAP32[$367>>2]|0;
         __THREW__ = 0;
         $369 = (invoke_ii($368|0,($340|0))|0);
         $370 = __THREW__; __THREW__ = 0;
         $371 = $370&1;
         if ($371) {
          $$ph$ph235$ph$ph$ph$ph = $35;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
          label = 23;
          break L3;
         } else {
          $$0$i$i114 = $369;
         }
        } else {
         $372 = HEAP8[$339]|0;
         $373 = $372&255;
         $$0$i$i114 = $373;
        }
        $374 = $$0$i$i114&255;
        $375 = HEAP8[$this2$i$i$i12]|0;
        $376 = $375 & 1;
        $377 = ($376<<24>>24)==(0);
        $378 = HEAP32[$15>>2]|0;
        $$464 = $377 ? $13 : $378;
        $379 = HEAP8[$$464]|0;
        $380 = ($374<<24>>24)==($379<<24>>24);
        if (!($380)) {
         label = 131;
         break L3;
        }
        $381 = HEAP32[$8>>2]|0;
        $382 = (($381) + 12|0);
        $383 = HEAP32[$382>>2]|0;
        $384 = (($381) + 16|0);
        $385 = HEAP32[$384>>2]|0;
        $386 = ($383|0)==($385|0);
        if ($386) {
         $387 = $381;
         $388 = HEAP32[$387>>2]|0;
         $389 = (($388) + 40|0);
         $390 = HEAP32[$389>>2]|0;
         __THREW__ = 0;
         (invoke_ii($390|0,($381|0))|0);
         $391 = __THREW__; __THREW__ = 0;
         $392 = $391&1;
         if ($392) {
          $$ph$ph235$ph$ph$ph$ph = $35;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
          label = 23;
          break L3;
         }
        } else {
         $393 = (($383) + 1|0);
         HEAP32[$382>>2] = $393;
        }
        HEAP8[$__neg] = 1;
        $394 = HEAP8[$this2$i$i$i12]|0;
        $395 = $394 & 1;
        $396 = ($395<<24>>24)==(0);
        if ($396) {
         $398 = $394&255;
         $399 = $398 >>> 1;
         $400 = $399;
        } else {
         $397 = HEAP32[$14>>2]|0;
         $400 = $397;
        }
        $401 = ($400>>>0)>(1);
        $__nsn$__trailing_sign$06 = $401 ? $__nsn : $__trailing_sign$0355;
        $907 = $36;$908 = $35;$909 = $34;$910 = $33;$__trailing_sign$1 = $__nsn$__trailing_sign$06;$free203 = $free202349;
        break L25;
       }
      } while(0);
      if ($214) {
       $239 = $212&255;
       $240 = $239 >>> 1;
       $241 = $240;
      } else {
       $238 = HEAP32[$18>>2]|0;
       $241 = $238;
      }
      $242 = ($241|0)==(0);
      $243 = HEAP32[$8>>2]|0;
      $244 = (($243) + 12|0);
      $245 = HEAP32[$244>>2]|0;
      $246 = (($243) + 16|0);
      $247 = HEAP32[$246>>2]|0;
      $248 = ($245|0)==($247|0);
      if ($242) {
       if ($248) {
        $286 = $243;
        $287 = HEAP32[$286>>2]|0;
        $288 = (($287) + 36|0);
        $289 = HEAP32[$288>>2]|0;
        __THREW__ = 0;
        $290 = (invoke_ii($289|0,($243|0))|0);
        $291 = __THREW__; __THREW__ = 0;
        $292 = $291&1;
        if ($292) {
         $$ph$ph235$ph$ph$ph$ph = $35;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
         label = 23;
         break L3;
        }
        $$pre450 = HEAP8[$this2$i$i$i12]|0;
        $$0$i$i84 = $290;$295 = $$pre450;
       } else {
        $293 = HEAP8[$245]|0;
        $294 = $293&255;
        $$0$i$i84 = $294;$295 = $219;
       }
       $296 = $$0$i$i84&255;
       $297 = $295 & 1;
       $298 = ($297<<24>>24)==(0);
       $299 = HEAP32[$15>>2]|0;
       $$462 = $298 ? $13 : $299;
       $300 = HEAP8[$$462]|0;
       $301 = ($296<<24>>24)==($300<<24>>24);
       if (!($301)) {
        $907 = $36;$908 = $35;$909 = $34;$910 = $33;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
        break L25;
       }
       $302 = HEAP32[$8>>2]|0;
       $303 = (($302) + 12|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = (($302) + 16|0);
       $306 = HEAP32[$305>>2]|0;
       $307 = ($304|0)==($306|0);
       if ($307) {
        $308 = $302;
        $309 = HEAP32[$308>>2]|0;
        $310 = (($309) + 40|0);
        $311 = HEAP32[$310>>2]|0;
        __THREW__ = 0;
        (invoke_ii($311|0,($302|0))|0);
        $312 = __THREW__; __THREW__ = 0;
        $313 = $312&1;
        if ($313) {
         $$ph$ph235$ph$ph$ph$ph = $35;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
         label = 23;
         break L3;
        }
       } else {
        $314 = (($304) + 1|0);
        HEAP32[$303>>2] = $314;
       }
       HEAP8[$__neg] = 1;
       $315 = HEAP8[$this2$i$i$i12]|0;
       $316 = $315 & 1;
       $317 = ($316<<24>>24)==(0);
       if ($317) {
        $319 = $315&255;
        $320 = $319 >>> 1;
        $321 = $320;
       } else {
        $318 = HEAP32[$14>>2]|0;
        $321 = $318;
       }
       $322 = ($321>>>0)>(1);
       $__nsn$__trailing_sign$0 = $322 ? $__nsn : $__trailing_sign$0355;
       $907 = $36;$908 = $35;$909 = $34;$910 = $33;$__trailing_sign$1 = $__nsn$__trailing_sign$0;$free203 = $free202349;
       break L25;
      }
      if ($248) {
       $249 = $243;
       $250 = HEAP32[$249>>2]|0;
       $251 = (($250) + 36|0);
       $252 = HEAP32[$251>>2]|0;
       __THREW__ = 0;
       $253 = (invoke_ii($252|0,($243|0))|0);
       $254 = __THREW__; __THREW__ = 0;
       $255 = $254&1;
       if ($255) {
        $$ph$ph235$ph$ph$ph$ph = $35;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
        label = 23;
        break L3;
       }
       $$pre451 = HEAP8[$this2$i$i$i10]|0;
       $$0$i$i67 = $253;$258 = $$pre451;
      } else {
       $256 = HEAP8[$245]|0;
       $257 = $256&255;
       $$0$i$i67 = $257;$258 = $212;
      }
      $259 = $$0$i$i67&255;
      $260 = $258 & 1;
      $261 = ($260<<24>>24)==(0);
      $262 = HEAP32[$19>>2]|0;
      $$ = $261 ? $17 : $262;
      $263 = HEAP8[$$]|0;
      $264 = ($259<<24>>24)==($263<<24>>24);
      if (!($264)) {
       HEAP8[$__neg] = 1;
       $907 = $36;$908 = $35;$909 = $34;$910 = $33;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
       break L25;
      }
      $265 = HEAP32[$8>>2]|0;
      $266 = (($265) + 12|0);
      $267 = HEAP32[$266>>2]|0;
      $268 = (($265) + 16|0);
      $269 = HEAP32[$268>>2]|0;
      $270 = ($267|0)==($269|0);
      if ($270) {
       $271 = $265;
       $272 = HEAP32[$271>>2]|0;
       $273 = (($272) + 40|0);
       $274 = HEAP32[$273>>2]|0;
       __THREW__ = 0;
       (invoke_ii($274|0,($265|0))|0);
       $275 = __THREW__; __THREW__ = 0;
       $276 = $275&1;
       if ($276) {
        $$ph$ph235$ph$ph$ph$ph = $35;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
        label = 23;
        break L3;
       }
      } else {
       $277 = (($267) + 1|0);
       HEAP32[$266>>2] = $277;
      }
      $278 = HEAP8[$this2$i$i$i10]|0;
      $279 = $278 & 1;
      $280 = ($279<<24>>24)==(0);
      if ($280) {
       $282 = $278&255;
       $283 = $282 >>> 1;
       $284 = $283;
      } else {
       $281 = HEAP32[$18>>2]|0;
       $284 = $281;
      }
      $285 = ($284>>>0)>(1);
      $__psn$__trailing_sign$0 = $285 ? $__psn : $__trailing_sign$0355;
      $907 = $36;$908 = $35;$909 = $34;$910 = $33;$__trailing_sign$1 = $__psn$__trailing_sign$0;$free203 = $free202349;
      break;
     }
     case 1:  {
      $cond = ($__p$0353|0)==(3);
      if ($cond) {
       $$lcssa293 = $35;$$lcssa309 = $34;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
       label = 301;
       break L3;
      }
      $93 = HEAP32[$8>>2]|0;
      $94 = (($93) + 12|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = (($93) + 16|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = ($95|0)==($97|0);
      if ($98) {
       $99 = $93;
       $100 = HEAP32[$99>>2]|0;
       $101 = (($100) + 36|0);
       $102 = HEAP32[$101>>2]|0;
       __THREW__ = 0;
       $103 = (invoke_ii($102|0,($93|0))|0);
       $104 = __THREW__; __THREW__ = 0;
       $105 = $104&1;
       if ($105) {
        $$ph$ph235$ph$ph$ph$ph = $35;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
        label = 23;
        break L3;
       } else {
        $$0$i$i29 = $103;
       }
      } else {
       $106 = HEAP8[$95]|0;
       $107 = $106&255;
       $$0$i$i29 = $107;
      }
      $108 = $$0$i$i29&255;
      $isascii1$i = ($108<<24>>24)>(-1);
      if (!($isascii1$i)) {
       label = 39;
       break L3;
      }
      $sext232 = $$0$i$i29 << 24;
      $109 = $sext232 >> 24;
      $110 = HEAP32[$11>>2]|0;
      $111 = (($110) + ($109<<1)|0);
      $112 = HEAP16[$111>>1]|0;
      $113 = $112 & 8192;
      $114 = ($113<<16>>16)==(0);
      if ($114) {
       label = 39;
       break L3;
      }
      $115 = HEAP32[$8>>2]|0;
      $116 = (($115) + 12|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = (($115) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($117|0)==($119|0);
      if ($120) {
       $121 = $115;
       $122 = HEAP32[$121>>2]|0;
       $123 = (($122) + 40|0);
       $124 = HEAP32[$123>>2]|0;
       __THREW__ = 0;
       $125 = (invoke_ii($124|0,($115|0))|0);
       $126 = __THREW__; __THREW__ = 0;
       $127 = $126&1;
       if ($127) {
        $$ph$ph235$ph$ph$ph$ph = $35;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
        label = 23;
        break L3;
       } else {
        $$0$i$i32 = $125;
       }
      } else {
       $128 = (($117) + 1|0);
       HEAP32[$116>>2] = $128;
       $129 = HEAP8[$117]|0;
       $130 = $129&255;
       $$0$i$i32 = $130;
      }
      $131 = $$0$i$i32&255;
      __THREW__ = 0;
      invoke_vii(51,($__spaces|0),($131|0));
      $132 = __THREW__; __THREW__ = 0;
      $133 = $132&1;
      if ($133) {
       $$ph$ph235$ph$ph$ph$ph = $35;$free206$ph$ph234$ph$ph$ph$ph = $free202349;
       label = 23;
       break L3;
      } else {
       label = 40;
      }
      break;
     }
     case 0:  {
      label = 40;
      break;
     }
     case 2:  {
      $404 = ($__trailing_sign$0355|0)!=(0|0);
      $405 = ($__p$0353>>>0)<(2);
      $or$cond = $404 | $405;
      if (!($or$cond)) {
       $406 = ($__p$0353|0)==(2);
       if ($406) {
        $407 = HEAP8[$30]|0;
        $408 = ($407<<24>>24)!=(0);
        $409 = $408;
       } else {
        $409 = 0;
       }
       $brmerge = $21 | $409;
       if (!($brmerge)) {
        $907 = $36;$908 = $35;$909 = $34;$910 = $33;$__trailing_sign$1 = 0;$free203 = $free202349;
        break L25;
       }
      }
      $410 = HEAP8[$this2$i$i$i9]|0;
      $411 = $410 & 1;
      $412 = ($411<<24>>24)==(0);
      $413 = HEAP32[$24>>2]|0;
      $$465 = $412 ? $23 : $413;
      $414 = ($__p$0353|0)==(0);
      L133: do {
       if ($414) {
        $$pre$i2$i$i180 = $69;$462 = $69;$463 = $410;$464 = $$465;
       } else {
        $415 = (($__p$0353) + -1)|0;
        $416 = (($10) + ($415)|0);
        $417 = HEAP8[$416]|0;
        $switch = ($417&255)<(2);
        if (!($switch)) {
         $$pre$i2$i$i180 = $69;$462 = $69;$463 = $410;$464 = $$465;
         break;
        }
        $418 = $410&255;
        $419 = $418 >>> 1;
        $420 = HEAP32[$25>>2]|0;
        $$467 = $412 ? $419 : $420;
        $421 = (($$465) + ($$467)|0);
        $422 = $$465;
        while(1) {
         $423 = ($422|0)==($421|0);
         if ($423) {
          $$lcssa535 = $421;
          break;
         }
         $424 = HEAP8[$422]|0;
         $isascii1$i136 = ($424<<24>>24)>(-1);
         if (!($isascii1$i136)) {
          $$lcssa535 = $422;
          break;
         }
         $425 = $424 << 24 >> 24;
         $426 = HEAP32[$11>>2]|0;
         $427 = (($426) + ($425<<1)|0);
         $428 = HEAP16[$427>>1]|0;
         $429 = $428 & 8192;
         $430 = ($429<<16>>16)==(0);
         $431 = (($422) + 1|0);
         if ($430) {
          $$lcssa535 = $422;
          break;
         } else {
          $422 = $431;
         }
        }
        $432 = $$lcssa535;
        $433 = $$465;
        $434 = (($432) - ($433))|0;
        $435 = HEAP8[$this2$i$i$i15]|0;
        $436 = $435 & 1;
        $437 = ($436<<24>>24)==(0);
        if ($437) {
         $439 = $435&255;
         $440 = $439 >>> 1;
         $441 = $440;
        } else {
         $438 = HEAP32[$29>>2]|0;
         $441 = $438;
        }
        $442 = ($434>>>0)>($441>>>0);
        if ($442) {
         $$pre$i2$i$i180 = $69;$462 = $69;$463 = $410;$464 = $$465;
         break;
        }
        if ($437) {
         $446 = $435&255;
         $447 = $446 >>> 1;
         $$sum454 = (($447) - ($434))|0;
         $448 = ((($26) + ($$sum454)|0) + 1|0);
         $449 = $448;$450 = $27;$451 = $447;
        } else {
         $443 = HEAP32[$28>>2]|0;
         $444 = HEAP32[$29>>2]|0;
         $$sum = (($444) - ($434))|0;
         $445 = (($443) + ($$sum)|0);
         $449 = $445;$450 = $443;$451 = $444;
        }
        $452 = (($450) + ($451)|0);
        $453 = ($449|0)==($452|0);
        if ($453) {
         $$pre$i2$i$i180 = $69;$462 = $69;$463 = $410;$464 = $$lcssa535;
         break;
        } else {
         $454 = $$465;$455 = $449;
        }
        while(1) {
         $456 = HEAP8[$455]|0;
         $457 = HEAP8[$454]|0;
         $458 = ($456<<24>>24)==($457<<24>>24);
         if (!($458)) {
          $$pre$i2$i$i180 = $69;$462 = $69;$463 = $410;$464 = $$465;
          break L133;
         }
         $459 = (($455) + 1|0);
         $460 = (($454) + 1|0);
         $461 = ($459|0)==($452|0);
         if ($461) {
          $$pre$i2$i$i180 = $69;$462 = $69;$463 = $410;$464 = $$lcssa535;
          break;
         } else {
          $454 = $460;$455 = $459;
         }
        }
       }
      } while(0);
      L153: while(1) {
       $465 = $463 & 1;
       $466 = ($465<<24>>24)==(0);
       if ($466) {
        $469 = $463&255;
        $470 = $469 >>> 1;
        $471 = $23;$472 = $470;
       } else {
        $467 = HEAP32[$24>>2]|0;
        $468 = HEAP32[$25>>2]|0;
        $471 = $467;$472 = $468;
       }
       $473 = (($471) + ($472)|0);
       $474 = ($464|0)==($473|0);
       if ($474) {
        break;
       }
       $475 = HEAP32[$8>>2]|0;
       $476 = ($475|0)==(0|0);
       do {
        if ($476) {
         $490 = 0;
        } else {
         $477 = (($475) + 12|0);
         $478 = HEAP32[$477>>2]|0;
         $479 = (($475) + 16|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = ($478|0)==($480|0);
         if (!($481)) {
          $490 = $475;
          break;
         }
         $482 = $475;
         $483 = HEAP32[$482>>2]|0;
         $484 = (($483) + 36|0);
         $485 = HEAP32[$484>>2]|0;
         __THREW__ = 0;
         $486 = (invoke_ii($485|0,($475|0))|0);
         $487 = __THREW__; __THREW__ = 0;
         $488 = $487&1;
         if ($488) {
          label = 21;
          break L3;
         }
         $489 = ($486|0)==(-1);
         if ($489) {
          HEAP32[$8>>2] = 0;
          $490 = 0;
          break;
         } else {
          $$pre$i$i$i176 = HEAP32[$8>>2]|0;
          $490 = $$pre$i$i$i176;
          break;
         }
        }
       } while(0);
       $491 = ($490|0)==(0|0);
       $492 = ($462|0)==(0|0);
       do {
        if ($492) {
         $$pre$i2$i$i180428 = $$pre$i2$i$i180;
         label = 168;
        } else {
         $493 = (($462) + 12|0);
         $494 = HEAP32[$493>>2]|0;
         $495 = (($462) + 16|0);
         $496 = HEAP32[$495>>2]|0;
         $497 = ($494|0)==($496|0);
         if (!($497)) {
          if ($491) {
           $$pre$i2$i$i180427 = $$pre$i2$i$i180;$507 = $462;
           break;
          } else {
           break L153;
          }
         }
         $498 = $462;
         $499 = HEAP32[$498>>2]|0;
         $500 = (($499) + 36|0);
         $501 = HEAP32[$500>>2]|0;
         __THREW__ = 0;
         $502 = (invoke_ii($501|0,($462|0))|0);
         $503 = __THREW__; __THREW__ = 0;
         $504 = $503&1;
         if ($504) {
          label = 21;
          break L3;
         }
         $505 = ($502|0)==(-1);
         if ($505) {
          HEAP32[$9>>2] = 0;
          $$pre$i2$i$i180428 = 0;
          label = 168;
          break;
         } else {
          $506 = ($$pre$i2$i$i180|0)==(0|0);
          $tmp$i$i182 = $491 ^ $506;
          if ($tmp$i$i182) {
           $$pre$i2$i$i180427 = $$pre$i2$i$i180;$507 = $$pre$i2$i$i180;
           break;
          } else {
           break L153;
          }
         }
        }
       } while(0);
       if ((label|0) == 168) {
        label = 0;
        if ($491) {
         break;
        } else {
         $$pre$i2$i$i180427 = $$pre$i2$i$i180428;$507 = 0;
        }
       }
       $508 = HEAP32[$8>>2]|0;
       $509 = (($508) + 12|0);
       $510 = HEAP32[$509>>2]|0;
       $511 = (($508) + 16|0);
       $512 = HEAP32[$511>>2]|0;
       $513 = ($510|0)==($512|0);
       if ($513) {
        $514 = $508;
        $515 = HEAP32[$514>>2]|0;
        $516 = (($515) + 36|0);
        $517 = HEAP32[$516>>2]|0;
        __THREW__ = 0;
        $518 = (invoke_ii($517|0,($508|0))|0);
        $519 = __THREW__; __THREW__ = 0;
        $520 = $519&1;
        if ($520) {
         label = 21;
         break L3;
        } else {
         $$0$i$i172 = $518;
        }
       } else {
        $521 = HEAP8[$510]|0;
        $522 = $521&255;
        $$0$i$i172 = $522;
       }
       $523 = $$0$i$i172&255;
       $524 = HEAP8[$464]|0;
       $525 = ($523<<24>>24)==($524<<24>>24);
       if (!($525)) {
        break;
       }
       $526 = HEAP32[$8>>2]|0;
       $527 = (($526) + 12|0);
       $528 = HEAP32[$527>>2]|0;
       $529 = (($526) + 16|0);
       $530 = HEAP32[$529>>2]|0;
       $531 = ($528|0)==($530|0);
       if ($531) {
        $532 = $526;
        $533 = HEAP32[$532>>2]|0;
        $534 = (($533) + 40|0);
        $535 = HEAP32[$534>>2]|0;
        __THREW__ = 0;
        (invoke_ii($535|0,($526|0))|0);
        $536 = __THREW__; __THREW__ = 0;
        $537 = $536&1;
        if ($537) {
         label = 21;
         break L3;
        }
       } else {
        $538 = (($528) + 1|0);
        HEAP32[$527>>2] = $538;
       }
       $539 = (($464) + 1|0);
       $$pre = HEAP8[$this2$i$i$i9]|0;
       $$pre$i2$i$i180 = $$pre$i2$i$i180427;$462 = $507;$463 = $$pre;$464 = $539;
      }
      if (!($21)) {
       $907 = $36;$908 = $35;$909 = $34;$910 = $33;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
       break L25;
      }
      $540 = HEAP8[$this2$i$i$i9]|0;
      $541 = $540 & 1;
      $542 = ($541<<24>>24)==(0);
      if ($542) {
       $545 = $540&255;
       $546 = $545 >>> 1;
       $547 = $23;$548 = $546;
      } else {
       $543 = HEAP32[$24>>2]|0;
       $544 = HEAP32[$25>>2]|0;
       $547 = $543;$548 = $544;
      }
      $549 = (($547) + ($548)|0);
      $550 = ($464|0)==($549|0);
      if ($550) {
       $907 = $36;$908 = $35;$909 = $34;$910 = $33;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
      } else {
       label = 183;
       break L3;
      }
      break;
     }
     case 4:  {
      $553 = $36;$554 = $35;$555 = $34;$556 = $33;$__ng$0 = 0;$free201 = $free202349;
      L195: while(1) {
       $557 = HEAP32[$8>>2]|0;
       $558 = ($557|0)==(0|0);
       do {
        if ($558) {
         $572 = 0;
        } else {
         $559 = (($557) + 12|0);
         $560 = HEAP32[$559>>2]|0;
         $561 = (($557) + 16|0);
         $562 = HEAP32[$561>>2]|0;
         $563 = ($560|0)==($562|0);
         if (!($563)) {
          $572 = $557;
          break;
         }
         $564 = $557;
         $565 = HEAP32[$564>>2]|0;
         $566 = (($565) + 36|0);
         $567 = HEAP32[$566>>2]|0;
         __THREW__ = 0;
         $568 = (invoke_ii($567|0,($557|0))|0);
         $569 = __THREW__; __THREW__ = 0;
         $570 = $569&1;
         if ($570) {
          $$ph$ph = $554;$free206$ph$ph = $free201;
          label = 19;
          break L3;
         }
         $571 = ($568|0)==(-1);
         if ($571) {
          HEAP32[$8>>2] = 0;
          $572 = 0;
          break;
         } else {
          $$pre$i$i$i156 = HEAP32[$8>>2]|0;
          $572 = $$pre$i$i$i156;
          break;
         }
        }
       } while(0);
       $573 = ($572|0)==(0|0);
       $574 = HEAP32[$9>>2]|0;
       $575 = ($574|0)==(0|0);
       do {
        if ($575) {
         label = 196;
        } else {
         $576 = (($574) + 12|0);
         $577 = HEAP32[$576>>2]|0;
         $578 = (($574) + 16|0);
         $579 = HEAP32[$578>>2]|0;
         $580 = ($577|0)==($579|0);
         if (!($580)) {
          if ($573) {
           break;
          } else {
           break L195;
          }
         }
         $581 = $574;
         $582 = HEAP32[$581>>2]|0;
         $583 = (($582) + 36|0);
         $584 = HEAP32[$583>>2]|0;
         __THREW__ = 0;
         $585 = (invoke_ii($584|0,($574|0))|0);
         $586 = __THREW__; __THREW__ = 0;
         $587 = $586&1;
         if ($587) {
          $$ph$ph = $554;$free206$ph$ph = $free201;
          label = 19;
          break L3;
         }
         $588 = ($585|0)==(-1);
         if ($588) {
          HEAP32[$9>>2] = 0;
          label = 196;
          break;
         } else {
          if ($573) {
           break;
          } else {
           break L195;
          }
         }
        }
       } while(0);
       if ((label|0) == 196) {
        label = 0;
        if ($573) {
         break;
        }
       }
       $589 = HEAP32[$8>>2]|0;
       $590 = (($589) + 12|0);
       $591 = HEAP32[$590>>2]|0;
       $592 = (($589) + 16|0);
       $593 = HEAP32[$592>>2]|0;
       $594 = ($591|0)==($593|0);
       if ($594) {
        $595 = $589;
        $596 = HEAP32[$595>>2]|0;
        $597 = (($596) + 36|0);
        $598 = HEAP32[$597>>2]|0;
        __THREW__ = 0;
        $599 = (invoke_ii($598|0,($589|0))|0);
        $600 = __THREW__; __THREW__ = 0;
        $601 = $600&1;
        if ($601) {
         $$ph$ph = $554;$free206$ph$ph = $free201;
         label = 19;
         break L3;
        } else {
         $$0$i$i151 = $599;
        }
       } else {
        $602 = HEAP8[$591]|0;
        $603 = $602&255;
        $$0$i$i151 = $603;
       }
       $604 = $$0$i$i151&255;
       $isascii1$i149 = ($604<<24>>24)>(-1);
       do {
        if ($isascii1$i149) {
         $sext230 = $$0$i$i151 << 24;
         $605 = $sext230 >> 24;
         $606 = HEAP32[$11>>2]|0;
         $607 = (($606) + ($605<<1)|0);
         $608 = HEAP16[$607>>1]|0;
         $609 = $608 & 2048;
         $610 = ($609<<16>>16)==(0);
         if ($610) {
          label = 214;
          break;
         }
         $611 = HEAP32[$__wn>>2]|0;
         $612 = ($611|0)==($553|0);
         if ($612) {
          $613 = HEAP32[$31>>2]|0;
          $614 = ($613|0)!=(187|0);
          $615 = HEAP32[$6>>2]|0;
          $616 = $553;
          $617 = $615;
          $618 = (($616) - ($617))|0;
          $619 = ($618>>>0)<(2147483647);
          $620 = $618 << 1;
          $$$i140 = $619 ? $620 : -1;
          $621 = $614 ? $615 : 0;
          $622 = (_realloc($621,$$$i140)|0);
          $623 = ($622|0)==(0|0);
          if ($623) {
           __THREW__ = 0;
           invoke_v(7);
           $624 = __THREW__; __THREW__ = 0;
           $625 = $624&1;
           if ($625) {
            $$ph$ph = $554;$free206$ph$ph = $free201;
            label = 19;
            break L3;
           }
          }
          do {
           if ($614) {
            HEAP32[$6>>2] = $622;
            $631 = $622;
           } else {
            $$pr$i142 = HEAP32[$6>>2]|0;
            HEAP32[$6>>2] = $622;
            $626 = ($$pr$i142|0)==(0|0);
            if ($626) {
             $631 = $622;
             break;
            }
            $627 = HEAP32[$31>>2]|0;
            __THREW__ = 0;
            invoke_vi($627|0,($$pr$i142|0));
            $628 = __THREW__; __THREW__ = 0;
            $629 = $628&1;
            if ($629) {
             label = 211;
             break L3;
            }
            $$pre$i143 = HEAP32[$6>>2]|0;
            $631 = $$pre$i143;
           }
          } while(0);
          HEAP32[$31>>2] = 185;
          $632 = (($631) + ($618)|0);
          HEAP32[$__wn>>2] = $632;
          $633 = HEAP32[$6>>2]|0;
          $634 = (($633) + ($$$i140)|0);
          $635 = $632;$636 = $634;
         } else {
          $635 = $611;$636 = $553;
         }
         $637 = (($635) + 1|0);
         HEAP32[$__wn>>2] = $637;
         HEAP8[$635] = $604;
         $638 = (($__ng$0) + 1)|0;
         $671 = $636;$672 = $554;$673 = $555;$674 = $556;$__ng$1 = $638;$free = $free201;
        } else {
         label = 214;
        }
       } while(0);
       if ((label|0) == 214) {
        label = 0;
        $639 = HEAP8[$this2$i$i$i]|0;
        $640 = $639 & 1;
        $641 = ($640<<24>>24)==(0);
        if ($641) {
         $643 = $639&255;
         $644 = $643 >>> 1;
         $645 = $644;
        } else {
         $642 = HEAP32[$32>>2]|0;
         $645 = $642;
        }
        $646 = ($645|0)==(0);
        $647 = ($__ng$0|0)==(0);
        $or$cond7 = $646 | $647;
        if ($or$cond7) {
         break;
        }
        $648 = HEAP8[$__ts]|0;
        $649 = ($604<<24>>24)==($648<<24>>24);
        if (!($649)) {
         break;
        }
        $650 = ($555|0)==($556|0);
        if ($650) {
         $651 = ($free201|0)==(187|0);
         $652 = $555;
         $653 = $554;
         $654 = (($652) - ($653))|0;
         $655 = ($654>>>0)<(2147483647);
         $656 = $654 << 1;
         $$$i128 = $655 ? $656 : -1;
         $657 = $654 >> 2;
         if ($651) {
          $658 = 0;
         } else {
          $phitmp$i129 = $554;
          $658 = $phitmp$i129;
         }
         $659 = (_realloc($658,$$$i128)|0);
         $660 = $659;
         $661 = ($659|0)==(0|0);
         if ($661) {
          __THREW__ = 0;
          invoke_v(7);
          $662 = __THREW__; __THREW__ = 0;
          $663 = $662&1;
          if ($663) {
           $$ph$ph = $554;$free206$ph$ph = $free201;
           label = 19;
           break L3;
          }
         }
         $664 = $$$i128 >>> 2;
         $665 = (($660) + ($657<<2)|0);
         $666 = (($660) + ($664<<2)|0);
         $667 = $660;$668 = $665;$669 = $666;$free200 = 185;
        } else {
         $667 = $554;$668 = $555;$669 = $556;$free200 = $free201;
        }
        $670 = (($668) + 4|0);
        HEAP32[$668>>2] = $__ng$0;
        $671 = $553;$672 = $667;$673 = $670;$674 = $669;$__ng$1 = 0;$free = $free200;
       }
       $675 = HEAP32[$8>>2]|0;
       $676 = (($675) + 12|0);
       $677 = HEAP32[$676>>2]|0;
       $678 = (($675) + 16|0);
       $679 = HEAP32[$678>>2]|0;
       $680 = ($677|0)==($679|0);
       if ($680) {
        $681 = $675;
        $682 = HEAP32[$681>>2]|0;
        $683 = (($682) + 40|0);
        $684 = HEAP32[$683>>2]|0;
        __THREW__ = 0;
        (invoke_ii($684|0,($675|0))|0);
        $685 = __THREW__; __THREW__ = 0;
        $686 = $685&1;
        if ($686) {
         $$ph$ph = $672;$free206$ph$ph = $free;
         label = 19;
         break L3;
        } else {
         $553 = $671;$554 = $672;$555 = $673;$556 = $674;$__ng$0 = $__ng$1;$free201 = $free;
         continue;
        }
       } else {
        $687 = (($677) + 1|0);
        HEAP32[$676>>2] = $687;
        $553 = $671;$554 = $672;$555 = $673;$556 = $674;$__ng$0 = $__ng$1;$free201 = $free;
        continue;
       }
      }
      $688 = ($554|0)==($555|0);
      $689 = ($__ng$0|0)==(0);
      $or$cond8 = $688 | $689;
      if ($or$cond8) {
       $711 = $554;$712 = $555;$713 = $556;$free204 = $free201;
      } else {
       $690 = ($555|0)==($556|0);
       if ($690) {
        $691 = ($free201|0)==(187|0);
        $692 = $555;
        $693 = $554;
        $694 = (($692) - ($693))|0;
        $695 = ($694>>>0)<(2147483647);
        $696 = $694 << 1;
        $$$i118 = $695 ? $696 : -1;
        $697 = $694 >> 2;
        if ($691) {
         $698 = 0;
        } else {
         $phitmp$i = $554;
         $698 = $phitmp$i;
        }
        $699 = (_realloc($698,$$$i118)|0);
        $700 = $699;
        $701 = ($699|0)==(0|0);
        if ($701) {
         __THREW__ = 0;
         invoke_v(7);
         $702 = __THREW__; __THREW__ = 0;
         $703 = $702&1;
         if ($703) {
          $$ph$ph235$ph$ph$ph$ph = $554;$free206$ph$ph234$ph$ph$ph$ph = $free201;
          label = 23;
          break L3;
         }
        }
        $704 = $$$i118 >>> 2;
        $705 = (($700) + ($697<<2)|0);
        $706 = (($700) + ($704<<2)|0);
        $707 = $700;$708 = $705;$709 = $706;$free205 = 185;
       } else {
        $707 = $554;$708 = $555;$709 = $556;$free205 = $free201;
       }
       $710 = (($708) + 4|0);
       HEAP32[$708>>2] = $__ng$0;
       $711 = $707;$712 = $710;$713 = $709;$free204 = $free205;
      }
      $714 = HEAP32[$__fd>>2]|0;
      $715 = ($714|0)>(0);
      if ($715) {
       $716 = HEAP32[$8>>2]|0;
       $717 = ($716|0)==(0|0);
       do {
        if ($717) {
         $731 = 0;
        } else {
         $718 = (($716) + 12|0);
         $719 = HEAP32[$718>>2]|0;
         $720 = (($716) + 16|0);
         $721 = HEAP32[$720>>2]|0;
         $722 = ($719|0)==($721|0);
         if (!($722)) {
          $731 = $716;
          break;
         }
         $723 = $716;
         $724 = HEAP32[$723>>2]|0;
         $725 = (($724) + 36|0);
         $726 = HEAP32[$725>>2]|0;
         __THREW__ = 0;
         $727 = (invoke_ii($726|0,($716|0))|0);
         $728 = __THREW__; __THREW__ = 0;
         $729 = $728&1;
         if ($729) {
          $$ph$ph235$ph$ph$ph$ph = $711;$free206$ph$ph234$ph$ph$ph$ph = $free204;
          label = 23;
          break L3;
         }
         $730 = ($727|0)==(-1);
         if ($730) {
          HEAP32[$8>>2] = 0;
          $731 = 0;
          break;
         } else {
          $$pre$i$i$i101 = HEAP32[$8>>2]|0;
          $731 = $$pre$i$i$i101;
          break;
         }
        }
       } while(0);
       $732 = ($731|0)==(0|0);
       $733 = HEAP32[$9>>2]|0;
       $734 = ($733|0)==(0|0);
       do {
        if ($734) {
         label = 250;
        } else {
         $735 = (($733) + 12|0);
         $736 = HEAP32[$735>>2]|0;
         $737 = (($733) + 16|0);
         $738 = HEAP32[$737>>2]|0;
         $739 = ($736|0)==($738|0);
         if (!($739)) {
          if ($732) {
           $748 = $733;
           break;
          } else {
           label = 256;
           break L3;
          }
         }
         $740 = $733;
         $741 = HEAP32[$740>>2]|0;
         $742 = (($741) + 36|0);
         $743 = HEAP32[$742>>2]|0;
         __THREW__ = 0;
         $744 = (invoke_ii($743|0,($733|0))|0);
         $745 = __THREW__; __THREW__ = 0;
         $746 = $745&1;
         if ($746) {
          $$ph$ph235$ph$ph$ph$ph = $711;$free206$ph$ph234$ph$ph$ph$ph = $free204;
          label = 23;
          break L3;
         }
         $747 = ($744|0)==(-1);
         if ($747) {
          HEAP32[$9>>2] = 0;
          label = 250;
          break;
         } else {
          if ($732) {
           $748 = $733;
           break;
          } else {
           label = 256;
           break L3;
          }
         }
        }
       } while(0);
       if ((label|0) == 250) {
        label = 0;
        if ($732) {
         label = 256;
         break L3;
        } else {
         $748 = 0;
        }
       }
       $749 = HEAP32[$8>>2]|0;
       $750 = (($749) + 12|0);
       $751 = HEAP32[$750>>2]|0;
       $752 = (($749) + 16|0);
       $753 = HEAP32[$752>>2]|0;
       $754 = ($751|0)==($753|0);
       if ($754) {
        $755 = $749;
        $756 = HEAP32[$755>>2]|0;
        $757 = (($756) + 36|0);
        $758 = HEAP32[$757>>2]|0;
        __THREW__ = 0;
        $759 = (invoke_ii($758|0,($749|0))|0);
        $760 = __THREW__; __THREW__ = 0;
        $761 = $760&1;
        if ($761) {
         $$ph$ph235$ph$ph$ph$ph = $711;$free206$ph$ph234$ph$ph$ph$ph = $free204;
         label = 23;
         break L3;
        } else {
         $$0$i$i93 = $759;
        }
       } else {
        $762 = HEAP8[$751]|0;
        $763 = $762&255;
        $$0$i$i93 = $763;
       }
       $764 = $$0$i$i93&255;
       $765 = HEAP8[$__dp]|0;
       $766 = ($764<<24>>24)==($765<<24>>24);
       if (!($766)) {
        label = 256;
        break L3;
       }
       $769 = HEAP32[$8>>2]|0;
       $770 = (($769) + 12|0);
       $771 = HEAP32[$770>>2]|0;
       $772 = (($769) + 16|0);
       $773 = HEAP32[$772>>2]|0;
       $774 = ($771|0)==($773|0);
       if ($774) {
        $775 = $769;
        $776 = HEAP32[$775>>2]|0;
        $777 = (($776) + 40|0);
        $778 = HEAP32[$777>>2]|0;
        __THREW__ = 0;
        (invoke_ii($778|0,($769|0))|0);
        $779 = __THREW__; __THREW__ = 0;
        $780 = $779&1;
        if ($780) {
         $$ph$ph235$ph$ph$ph$ph = $711;$free206$ph$ph234$ph$ph$ph$ph = $free204;
         label = 23;
         break L3;
        } else {
         $$pre$i2$i$i75 = $748;$782 = $714;$783 = $748;$784 = $553;
        }
       } else {
        $781 = (($771) + 1|0);
        HEAP32[$770>>2] = $781;
        $$pre$i2$i$i75 = $748;$782 = $714;$783 = $748;$784 = $553;
       }
       while(1) {
        $785 = HEAP32[$8>>2]|0;
        $786 = ($785|0)==(0|0);
        do {
         if ($786) {
          $800 = 0;
         } else {
          $787 = (($785) + 12|0);
          $788 = HEAP32[$787>>2]|0;
          $789 = (($785) + 16|0);
          $790 = HEAP32[$789>>2]|0;
          $791 = ($788|0)==($790|0);
          if (!($791)) {
           $800 = $785;
           break;
          }
          $792 = $785;
          $793 = HEAP32[$792>>2]|0;
          $794 = (($793) + 36|0);
          $795 = HEAP32[$794>>2]|0;
          __THREW__ = 0;
          $796 = (invoke_ii($795|0,($785|0))|0);
          $797 = __THREW__; __THREW__ = 0;
          $798 = $797&1;
          if ($798) {
           label = 20;
           break L3;
          }
          $799 = ($796|0)==(-1);
          if ($799) {
           HEAP32[$8>>2] = 0;
           $800 = 0;
           break;
          } else {
           $$pre$i$i$i71 = HEAP32[$8>>2]|0;
           $800 = $$pre$i$i$i71;
           break;
          }
         }
        } while(0);
        $801 = ($800|0)==(0|0);
        $802 = ($783|0)==(0|0);
        do {
         if ($802) {
          $$pre$i2$i$i75431$ph = $$pre$i2$i$i75;
          label = 272;
         } else {
          $803 = (($783) + 12|0);
          $804 = HEAP32[$803>>2]|0;
          $805 = (($783) + 16|0);
          $806 = HEAP32[$805>>2]|0;
          $807 = ($804|0)==($806|0);
          if (!($807)) {
           if ($801) {
            $$pre$i2$i$i75431458 = $$pre$i2$i$i75;$817 = $783;
            break;
           } else {
            label = 279;
            break L3;
           }
          }
          $808 = $783;
          $809 = HEAP32[$808>>2]|0;
          $810 = (($809) + 36|0);
          $811 = HEAP32[$810>>2]|0;
          __THREW__ = 0;
          $812 = (invoke_ii($811|0,($783|0))|0);
          $813 = __THREW__; __THREW__ = 0;
          $814 = $813&1;
          if ($814) {
           label = 20;
           break L3;
          }
          $815 = ($812|0)==(-1);
          if ($815) {
           HEAP32[$9>>2] = 0;
           $$pre$i2$i$i75431$ph = 0;
           label = 272;
           break;
          } else {
           $816 = ($$pre$i2$i$i75|0)==(0|0);
           $tmp$i$i77 = $801 ^ $816;
           if ($tmp$i$i77) {
            $$pre$i2$i$i75431458 = $$pre$i2$i$i75;$817 = $$pre$i2$i$i75;
            break;
           } else {
            label = 279;
            break L3;
           }
          }
         }
        } while(0);
        if ((label|0) == 272) {
         label = 0;
         if ($801) {
          label = 279;
          break L3;
         } else {
          $$pre$i2$i$i75431458 = $$pre$i2$i$i75431$ph;$817 = 0;
         }
        }
        $818 = HEAP32[$8>>2]|0;
        $819 = (($818) + 12|0);
        $820 = HEAP32[$819>>2]|0;
        $821 = (($818) + 16|0);
        $822 = HEAP32[$821>>2]|0;
        $823 = ($820|0)==($822|0);
        if ($823) {
         $824 = $818;
         $825 = HEAP32[$824>>2]|0;
         $826 = (($825) + 36|0);
         $827 = HEAP32[$826>>2]|0;
         __THREW__ = 0;
         $828 = (invoke_ii($827|0,($818|0))|0);
         $829 = __THREW__; __THREW__ = 0;
         $830 = $829&1;
         if ($830) {
          label = 20;
          break L3;
         } else {
          $$0$i$i64 = $828;
         }
        } else {
         $831 = HEAP8[$820]|0;
         $832 = $831&255;
         $$0$i$i64 = $832;
        }
        $833 = $$0$i$i64&255;
        $isascii1$i62 = ($833<<24>>24)>(-1);
        if (!($isascii1$i62)) {
         label = 279;
         break L3;
        }
        $sext = $$0$i$i64 << 24;
        $834 = $sext >> 24;
        $835 = HEAP32[$11>>2]|0;
        $836 = (($835) + ($834<<1)|0);
        $837 = HEAP16[$836>>1]|0;
        $838 = $837 & 2048;
        $839 = ($838<<16>>16)==(0);
        if ($839) {
         label = 279;
         break L3;
        }
        $842 = HEAP32[$__wn>>2]|0;
        $843 = ($842|0)==($784|0);
        if ($843) {
         $844 = HEAP32[$31>>2]|0;
         $845 = ($844|0)!=(187|0);
         $846 = HEAP32[$6>>2]|0;
         $847 = $784;
         $848 = $846;
         $849 = (($847) - ($848))|0;
         $850 = ($849>>>0)<(2147483647);
         $851 = $849 << 1;
         $$$i = $850 ? $851 : -1;
         $852 = $845 ? $846 : 0;
         $853 = (_realloc($852,$$$i)|0);
         $854 = ($853|0)==(0|0);
         if ($854) {
          __THREW__ = 0;
          invoke_v(7);
          $855 = __THREW__; __THREW__ = 0;
          $856 = $855&1;
          if ($856) {
           label = 20;
           break L3;
          }
         }
         do {
          if ($845) {
           HEAP32[$6>>2] = $853;
           $862 = $853;
          } else {
           $$pr$i = HEAP32[$6>>2]|0;
           HEAP32[$6>>2] = $853;
           $857 = ($$pr$i|0)==(0|0);
           if ($857) {
            $862 = $853;
            break;
           }
           $858 = HEAP32[$31>>2]|0;
           __THREW__ = 0;
           invoke_vi($858|0,($$pr$i|0));
           $859 = __THREW__; __THREW__ = 0;
           $860 = $859&1;
           if ($860) {
            label = 288;
            break L3;
           }
           $$pre$i = HEAP32[$6>>2]|0;
           $862 = $$pre$i;
          }
         } while(0);
         HEAP32[$31>>2] = 185;
         $863 = (($862) + ($849)|0);
         HEAP32[$__wn>>2] = $863;
         $864 = HEAP32[$6>>2]|0;
         $865 = (($864) + ($$$i)|0);
         $866 = $863;$867 = $865;
        } else {
         $866 = $842;$867 = $784;
        }
        $868 = HEAP32[$8>>2]|0;
        $869 = (($868) + 12|0);
        $870 = HEAP32[$869>>2]|0;
        $871 = (($868) + 16|0);
        $872 = HEAP32[$871>>2]|0;
        $873 = ($870|0)==($872|0);
        if ($873) {
         $874 = $868;
         $875 = HEAP32[$874>>2]|0;
         $876 = (($875) + 36|0);
         $877 = HEAP32[$876>>2]|0;
         __THREW__ = 0;
         $878 = (invoke_ii($877|0,($868|0))|0);
         $879 = __THREW__; __THREW__ = 0;
         $880 = $879&1;
         if ($880) {
          label = 20;
          break L3;
         }
         $$pre453 = HEAP32[$__wn>>2]|0;
         $$0$i$i53 = $878;$883 = $$pre453;
        } else {
         $881 = HEAP8[$870]|0;
         $882 = $881&255;
         $$0$i$i53 = $882;$883 = $866;
        }
        $884 = $$0$i$i53&255;
        $885 = (($883) + 1|0);
        HEAP32[$__wn>>2] = $885;
        HEAP8[$883] = $884;
        $886 = (($782) + -1)|0;
        HEAP32[$__fd>>2] = $886;
        $887 = HEAP32[$8>>2]|0;
        $888 = (($887) + 12|0);
        $889 = HEAP32[$888>>2]|0;
        $890 = (($887) + 16|0);
        $891 = HEAP32[$890>>2]|0;
        $892 = ($889|0)==($891|0);
        if ($892) {
         $893 = $887;
         $894 = HEAP32[$893>>2]|0;
         $895 = (($894) + 40|0);
         $896 = HEAP32[$895>>2]|0;
         __THREW__ = 0;
         (invoke_ii($896|0,($887|0))|0);
         $897 = __THREW__; __THREW__ = 0;
         $898 = $897&1;
         if ($898) {
          label = 20;
          break L3;
         }
        } else {
         $900 = (($889) + 1|0);
         HEAP32[$888>>2] = $900;
        }
        $899 = ($886|0)>(0);
        if ($899) {
         $$pre$i2$i$i75 = $$pre$i2$i$i75431458;$782 = $886;$783 = $817;$784 = $867;
        } else {
         $901 = $867;
         break;
        }
       }
      } else {
       $901 = $553;
      }
      $902 = HEAP32[$__wn>>2]|0;
      $903 = HEAP32[$6>>2]|0;
      $904 = ($902|0)==($903|0);
      if ($904) {
       label = 299;
       break L3;
      } else {
       $907 = $901;$908 = $711;$909 = $712;$910 = $713;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free204;
      }
      break;
     }
     default: {
      $907 = $36;$908 = $35;$909 = $34;$910 = $33;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
     }
     }
    } while(0);
    L350: do {
     if ((label|0) == 40) {
      label = 0;
      $136 = ($__p$0353|0)==(3);
      if ($136) {
       $$lcssa293 = $35;$$lcssa309 = $34;$__trailing_sign$0$lcssa = $__trailing_sign$0355;$free202$lcssa = $free202349;
       label = 301;
       break L3;
      } else {
       $$pre$i2$i$i39 = $69;$137 = $69;
      }
      while(1) {
       $138 = HEAP32[$8>>2]|0;
       $139 = ($138|0)==(0|0);
       do {
        if ($139) {
         $153 = 0;
        } else {
         $140 = (($138) + 12|0);
         $141 = HEAP32[$140>>2]|0;
         $142 = (($138) + 16|0);
         $143 = HEAP32[$142>>2]|0;
         $144 = ($141|0)==($143|0);
         if (!($144)) {
          $153 = $138;
          break;
         }
         $145 = $138;
         $146 = HEAP32[$145>>2]|0;
         $147 = (($146) + 36|0);
         $148 = HEAP32[$147>>2]|0;
         __THREW__ = 0;
         $149 = (invoke_ii($148|0,($138|0))|0);
         $150 = __THREW__; __THREW__ = 0;
         $151 = $150&1;
         if ($151) {
          label = 22;
          break L3;
         }
         $152 = ($149|0)==(-1);
         if ($152) {
          HEAP32[$8>>2] = 0;
          $153 = 0;
          break;
         } else {
          $$pre$i$i$i35 = HEAP32[$8>>2]|0;
          $153 = $$pre$i$i$i35;
          break;
         }
        }
       } while(0);
       $154 = ($153|0)==(0|0);
       $155 = ($137|0)==(0|0);
       do {
        if ($155) {
         $$pre$i2$i$i39424 = $$pre$i2$i$i39;
         label = 53;
        } else {
         $156 = (($137) + 12|0);
         $157 = HEAP32[$156>>2]|0;
         $158 = (($137) + 16|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = ($157|0)==($159|0);
         if (!($160)) {
          if ($154) {
           $$pre$i2$i$i39426 = $$pre$i2$i$i39;$170 = $137;
           break;
          } else {
           $907 = $36;$908 = $35;$909 = $34;$910 = $33;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
           break L350;
          }
         }
         $161 = $137;
         $162 = HEAP32[$161>>2]|0;
         $163 = (($162) + 36|0);
         $164 = HEAP32[$163>>2]|0;
         __THREW__ = 0;
         $165 = (invoke_ii($164|0,($137|0))|0);
         $166 = __THREW__; __THREW__ = 0;
         $167 = $166&1;
         if ($167) {
          label = 22;
          break L3;
         }
         $168 = ($165|0)==(-1);
         if ($168) {
          HEAP32[$9>>2] = 0;
          $$pre$i2$i$i39424 = 0;
          label = 53;
          break;
         } else {
          $169 = ($$pre$i2$i$i39|0)==(0|0);
          $tmp$i$i41 = $154 ^ $169;
          if ($tmp$i$i41) {
           $$pre$i2$i$i39426 = $$pre$i2$i$i39;$170 = $$pre$i2$i$i39;
           break;
          } else {
           $907 = $36;$908 = $35;$909 = $34;$910 = $33;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
           break L350;
          }
         }
        }
       } while(0);
       if ((label|0) == 53) {
        label = 0;
        if ($154) {
         $907 = $36;$908 = $35;$909 = $34;$910 = $33;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
         break L350;
        } else {
         $$pre$i2$i$i39426 = $$pre$i2$i$i39424;$170 = 0;
        }
       }
       $171 = HEAP32[$8>>2]|0;
       $172 = (($171) + 12|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = (($171) + 16|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($173|0)==($175|0);
       if ($176) {
        $177 = $171;
        $178 = HEAP32[$177>>2]|0;
        $179 = (($178) + 36|0);
        $180 = HEAP32[$179>>2]|0;
        __THREW__ = 0;
        $181 = (invoke_ii($180|0,($171|0))|0);
        $182 = __THREW__; __THREW__ = 0;
        $183 = $182&1;
        if ($183) {
         label = 22;
         break L3;
        } else {
         $$0$i$i45 = $181;
        }
       } else {
        $184 = HEAP8[$173]|0;
        $185 = $184&255;
        $$0$i$i45 = $185;
       }
       $186 = $$0$i$i45&255;
       $isascii1$i48 = ($186<<24>>24)>(-1);
       if (!($isascii1$i48)) {
        $907 = $36;$908 = $35;$909 = $34;$910 = $33;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
        break L350;
       }
       $sext231 = $$0$i$i45 << 24;
       $187 = $sext231 >> 24;
       $188 = HEAP32[$11>>2]|0;
       $189 = (($188) + ($187<<1)|0);
       $190 = HEAP16[$189>>1]|0;
       $191 = $190 & 8192;
       $192 = ($191<<16>>16)==(0);
       if ($192) {
        $907 = $36;$908 = $35;$909 = $34;$910 = $33;$__trailing_sign$1 = $__trailing_sign$0355;$free203 = $free202349;
        break L350;
       }
       $193 = HEAP32[$8>>2]|0;
       $194 = (($193) + 12|0);
       $195 = HEAP32[$194>>2]|0;
       $196 = (($193) + 16|0);
       $197 = HEAP32[$196>>2]|0;
       $198 = ($195|0)==($197|0);
       if ($198) {
        $199 = $193;
        $200 = HEAP32[$199>>2]|0;
        $201 = (($200) + 40|0);
        $202 = HEAP32[$201>>2]|0;
        __THREW__ = 0;
        $203 = (invoke_ii($202|0,($193|0))|0);
        $204 = __THREW__; __THREW__ = 0;
        $205 = $204&1;
        if ($205) {
         label = 22;
         break L3;
        } else {
         $$0$i$i50 = $203;
        }
       } else {
        $206 = (($195) + 1|0);
        HEAP32[$194>>2] = $206;
        $207 = HEAP8[$195]|0;
        $208 = $207&255;
        $$0$i$i50 = $208;
       }
       $209 = $$0$i$i50&255;
       __THREW__ = 0;
       invoke_vii(51,($__spaces|0),($209|0));
       $210 = __THREW__; __THREW__ = 0;
       $211 = $210&1;
       if ($211) {
        label = 22;
        break L3;
       } else {
        $$pre$i2$i$i39 = $$pre$i2$i$i39426;$137 = $170;
       }
      }
     }
    } while(0);
    $911 = (($__p$0353) + 1)|0;
    $912 = ($911>>>0)<(4);
    if ($912) {
     $33 = $910;$34 = $909;$35 = $908;$36 = $907;$__p$0353 = $911;$__trailing_sign$0355 = $__trailing_sign$1;$free202349 = $free203;
    } else {
     $$lcssa293 = $908;$$lcssa309 = $909;$__trailing_sign$0$lcssa = $__trailing_sign$1;$free202$lcssa = $free203;
     label = 301;
     break;
    }
   }
   L385: do {
    if ((label|0) == 19) {
     $75 = ___cxa_find_matching_catch(-1,-1)|0;
     $76 = tempRet0;
     $87 = $$ph$ph;$free206 = $free206$ph$ph;$lpad$phi$index = $75;$lpad$phi$index7 = $76;
     break L1;
    }
    else if ((label|0) == 20) {
     $77 = ___cxa_find_matching_catch(-1,-1)|0;
     $78 = tempRet0;
     $87 = $711;$free206 = $free204;$lpad$phi$index = $77;$lpad$phi$index7 = $78;
     break L1;
    }
    else if ((label|0) == 21) {
     $79 = ___cxa_find_matching_catch(-1,-1)|0;
     $80 = tempRet0;
     $87 = $35;$free206 = $free202349;$lpad$phi$index = $79;$lpad$phi$index7 = $80;
     break L1;
    }
    else if ((label|0) == 22) {
     $81 = ___cxa_find_matching_catch(-1,-1)|0;
     $82 = tempRet0;
     $87 = $35;$free206 = $free202349;$lpad$phi$index = $81;$lpad$phi$index7 = $82;
     break L1;
    }
    else if ((label|0) == 23) {
     $83 = ___cxa_find_matching_catch(-1,-1)|0;
     $84 = tempRet0;
     $87 = $$ph$ph235$ph$ph$ph$ph;$free206 = $free206$ph$ph234$ph$ph$ph$ph;$lpad$phi$index = $83;$lpad$phi$index7 = $84;
     break L1;
    }
    else if ((label|0) == 39) {
     $134 = HEAP32[$__err>>2]|0;
     $135 = $134 | 4;
     HEAP32[$__err>>2] = $135;
     $$0 = 0;$1004 = $35;$free208 = $free202349;
    }
    else if ((label|0) == 131) {
     $402 = HEAP32[$__err>>2]|0;
     $403 = $402 | 4;
     HEAP32[$__err>>2] = $403;
     $$0 = 0;$1004 = $35;$free208 = $free202349;
    }
    else if ((label|0) == 183) {
     $551 = HEAP32[$__err>>2]|0;
     $552 = $551 | 4;
     HEAP32[$__err>>2] = $552;
     $$0 = 0;$1004 = $35;$free208 = $free202349;
    }
    else if ((label|0) == 211) {
     $630 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$1 = tempRet0;
     ___clang_call_terminate($630);
     // unreachable;
    }
    else if ((label|0) == 256) {
     $767 = HEAP32[$__err>>2]|0;
     $768 = $767 | 4;
     HEAP32[$__err>>2] = $768;
     $$0 = 0;$1004 = $711;$free208 = $free204;
    }
    else if ((label|0) == 279) {
     $840 = HEAP32[$__err>>2]|0;
     $841 = $840 | 4;
     HEAP32[$__err>>2] = $841;
     $$0 = 0;$1004 = $711;$free208 = $free204;
    }
    else if ((label|0) == 288) {
     $861 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$2 = tempRet0;
     ___clang_call_terminate($861);
     // unreachable;
    }
    else if ((label|0) == 299) {
     $905 = HEAP32[$__err>>2]|0;
     $906 = $905 | 4;
     HEAP32[$__err>>2] = $906;
     $$0 = 0;$1004 = $711;$free208 = $free204;
    }
    else if ((label|0) == 301) {
     $913 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L400: do {
      if (!($913)) {
       $914 = $__trailing_sign$0$lcssa;
       $915 = $__trailing_sign$0$lcssa;
       $916 = (($915) + 1|0);
       $917 = (($__trailing_sign$0$lcssa) + 8|0);
       $918 = (($__trailing_sign$0$lcssa) + 4|0);
       $__i$0 = 1;
       L402: while(1) {
        $919 = HEAP8[$914]|0;
        $920 = $919 & 1;
        $921 = ($920<<24>>24)==(0);
        if ($921) {
         $923 = $919&255;
         $924 = $923 >>> 1;
         $925 = $924;
        } else {
         $922 = HEAP32[$918>>2]|0;
         $925 = $922;
        }
        $926 = ($__i$0>>>0)<($925>>>0);
        if (!($926)) {
         break L400;
        }
        $927 = HEAP32[$8>>2]|0;
        $928 = ($927|0)==(0|0);
        do {
         if ($928) {
          $942 = 0;
         } else {
          $929 = (($927) + 12|0);
          $930 = HEAP32[$929>>2]|0;
          $931 = (($927) + 16|0);
          $932 = HEAP32[$931>>2]|0;
          $933 = ($930|0)==($932|0);
          if (!($933)) {
           $942 = $927;
           break;
          }
          $934 = $927;
          $935 = HEAP32[$934>>2]|0;
          $936 = (($935) + 36|0);
          $937 = HEAP32[$936>>2]|0;
          __THREW__ = 0;
          $938 = (invoke_ii($937|0,($927|0))|0);
          $939 = __THREW__; __THREW__ = 0;
          $940 = $939&1;
          if ($940) {
           label = 18;
           break L402;
          }
          $941 = ($938|0)==(-1);
          if ($941) {
           HEAP32[$8>>2] = 0;
           $942 = 0;
           break;
          } else {
           $$pre$i$i$i = HEAP32[$8>>2]|0;
           $942 = $$pre$i$i$i;
           break;
          }
         }
        } while(0);
        $943 = ($942|0)==(0|0);
        $944 = HEAP32[$9>>2]|0;
        $945 = ($944|0)==(0|0);
        do {
         if ($945) {
          label = 319;
         } else {
          $946 = (($944) + 12|0);
          $947 = HEAP32[$946>>2]|0;
          $948 = (($944) + 16|0);
          $949 = HEAP32[$948>>2]|0;
          $950 = ($947|0)==($949|0);
          if (!($950)) {
           if ($943) {
            break;
           } else {
            label = 327;
            break L402;
           }
          }
          $951 = $944;
          $952 = HEAP32[$951>>2]|0;
          $953 = (($952) + 36|0);
          $954 = HEAP32[$953>>2]|0;
          __THREW__ = 0;
          $955 = (invoke_ii($954|0,($944|0))|0);
          $956 = __THREW__; __THREW__ = 0;
          $957 = $956&1;
          if ($957) {
           label = 18;
           break L402;
          }
          $958 = ($955|0)==(-1);
          if ($958) {
           HEAP32[$9>>2] = 0;
           label = 319;
           break;
          } else {
           if ($943) {
            break;
           } else {
            label = 327;
            break L402;
           }
          }
         }
        } while(0);
        if ((label|0) == 319) {
         label = 0;
         if ($943) {
          label = 327;
          break;
         }
        }
        $959 = HEAP32[$8>>2]|0;
        $960 = (($959) + 12|0);
        $961 = HEAP32[$960>>2]|0;
        $962 = (($959) + 16|0);
        $963 = HEAP32[$962>>2]|0;
        $964 = ($961|0)==($963|0);
        if ($964) {
         $965 = $959;
         $966 = HEAP32[$965>>2]|0;
         $967 = (($966) + 36|0);
         $968 = HEAP32[$967>>2]|0;
         __THREW__ = 0;
         $969 = (invoke_ii($968|0,($959|0))|0);
         $970 = __THREW__; __THREW__ = 0;
         $971 = $970&1;
         if ($971) {
          label = 18;
          break;
         } else {
          $$0$i$i = $969;
         }
        } else {
         $972 = HEAP8[$961]|0;
         $973 = $972&255;
         $$0$i$i = $973;
        }
        $974 = $$0$i$i&255;
        $975 = HEAP8[$914]|0;
        $976 = $975 & 1;
        $977 = ($976<<24>>24)==(0);
        if ($977) {
         $979 = $916;
        } else {
         $978 = HEAP32[$917>>2]|0;
         $979 = $978;
        }
        $980 = (($979) + ($__i$0)|0);
        $981 = HEAP8[$980]|0;
        $982 = ($974<<24>>24)==($981<<24>>24);
        if (!($982)) {
         label = 327;
         break;
        }
        $985 = (($__i$0) + 1)|0;
        $986 = HEAP32[$8>>2]|0;
        $987 = (($986) + 12|0);
        $988 = HEAP32[$987>>2]|0;
        $989 = (($986) + 16|0);
        $990 = HEAP32[$989>>2]|0;
        $991 = ($988|0)==($990|0);
        if ($991) {
         $992 = $986;
         $993 = HEAP32[$992>>2]|0;
         $994 = (($993) + 40|0);
         $995 = HEAP32[$994>>2]|0;
         __THREW__ = 0;
         (invoke_ii($995|0,($986|0))|0);
         $996 = __THREW__; __THREW__ = 0;
         $997 = $996&1;
         if ($997) {
          label = 18;
          break;
         } else {
          $__i$0 = $985;
          continue;
         }
        } else {
         $998 = (($988) + 1|0);
         HEAP32[$987>>2] = $998;
         $__i$0 = $985;
         continue;
        }
       }
       if ((label|0) == 18) {
        $73 = ___cxa_find_matching_catch(-1,-1)|0;
        $74 = tempRet0;
        $87 = $$lcssa293;$free206 = $free202$lcssa;$lpad$phi$index = $73;$lpad$phi$index7 = $74;
        break L1;
       }
       else if ((label|0) == 327) {
        $983 = HEAP32[$__err>>2]|0;
        $984 = $983 | 4;
        HEAP32[$__err>>2] = $984;
        $$0 = 0;$1004 = $$lcssa293;$free208 = $free202$lcssa;
        break L385;
       }
      }
     } while(0);
     $999 = ($$lcssa293|0)==($$lcssa309|0);
     if ($999) {
      $$0 = 1;$1004 = $$lcssa309;$free208 = $free202$lcssa;
      break;
     }
     HEAP32[$__et>>2] = 0;
     __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$$lcssa293,$$lcssa309,$__et);
     $1000 = HEAP32[$__et>>2]|0;
     $1001 = ($1000|0)==(0);
     if ($1001) {
      $$0 = 1;$1004 = $$lcssa293;$free208 = $free202$lcssa;
      break;
     }
     $1002 = HEAP32[$__err>>2]|0;
     $1003 = $1002 | 4;
     HEAP32[$__err>>2] = $1003;
     $$0 = 0;$1004 = $$lcssa293;$free208 = $free202$lcssa;
    }
   } while(0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $1005 = ($1004|0)==(0|0);
   if ($1005) {
    STACKTOP = sp;return ($$0|0);
   }
   $1006 = $1004;
   __THREW__ = 0;
   invoke_vi($free208|0,($1006|0));
   $1007 = __THREW__; __THREW__ = 0;
   $1008 = $1007&1;
   if ($1008) {
    $1009 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    u$3 = tempRet0;
    ___clang_call_terminate($1009);
    // unreachable;
   } else {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $88 = ($87|0)==(0|0);
 if ($88) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $89 = $87;
 __THREW__ = 0;
 invoke_vi($free206|0,($89|0));
 $90 = __THREW__; __THREW__ = 0;
 $91 = $90&1;
 if ($91) {
  $92 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($92);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___cxa_allocate_exception(8)|0);
 $2 = $1;
 __THREW__ = 0;
 invoke_vii(75,($2|0),($msg|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(-1,-1)|0;
  $6 = tempRet0;
  ___cxa_free_exception(($1|0));
  ___resumeException($5|0);
  // unreachable;
 } else {
  ___cxa_throw(($1|0),((5576)|0),((58)|0));
  // unreachable;
 }
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0117 = 0, $$0118 = 0, $$019 = 0, $$020 = 0, $$byval_copy = 0, $$pre = 0, $$pre14 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__p$i$i$i$i = 0, $__w$0$lcssa = 0, $__w$09 = 0, $__w$09$phi = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $tmp$i$i = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 168|0;
 $$byval_copy = sp;
 $__p$i$i$i$i = sp + 8|0;
 $__wbuf = sp + 24|0;
 $__wb = sp + 128|0;
 $__wn = sp + 136|0;
 $__loc = sp + 144|0;
 $__neg = sp + 152|0;
 $1 = sp + 160|0;
 $2 = ($__wbuf);
 $3 = ($__wb);
 HEAP32[$3>>2] = $2;
 $4 = (($__wb) + 4|0);
 HEAP32[$4>>2] = 187;
 $5 = (($__wbuf) + 100|0);
 __THREW__ = 0;
 invoke_vii(49,($__loc|0),($__iob|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if ($7) {
   $68 = ___cxa_find_matching_catch(-1,-1)|0;
   $69 = tempRet0;
   HEAP32[$3>>2] = 0;
   $$0117 = $69;$$019 = $68;$135 = $2;
  } else {
   $8 = ($__loc);
   $9 = HEAP32[$8>>2]|0;
   $10 = $__p$i$i$i$i;
   $11 = HEAP32[((9136))>>2]|0;
   $12 = ($11|0)==(-1);
   if ($12) {
    label = 4;
   } else {
    $13 = ($__p$i$i$i$i);
    HEAP32[$13>>2] = (9136);
    $14 = (($__p$i$i$i$i) + 4|0);
    HEAP32[$14>>2] = (183);
    $15 = (($__p$i$i$i$i) + 8|0);
    HEAP32[$15>>2] = 0;
    __THREW__ = 0;
    invoke_viii(25,(((9136))|0),($10|0),(184|0));
    $16 = __THREW__; __THREW__ = 0;
    $17 = $16&1;
    if (!($17)) {
     label = 4;
    }
   }
   L6: do {
    if ((label|0) == 4) {
     $18 = HEAP32[(((9136) + 4|0))>>2]|0;
     $19 = (($18) + -1)|0;
     $20 = (($9) + 12|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = (($9) + 8|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = $21;
     $25 = $23;
     $26 = (($24) - ($25))|0;
     $27 = $26 >> 2;
     $28 = ($27>>>0)>($19>>>0);
     do {
      if ($28) {
       $29 = (($23) + ($19<<2)|0);
       $30 = HEAP32[$29>>2]|0;
       $31 = ($30|0)==(0|0);
       if ($31) {
        break;
       }
       $36 = $30;
       HEAP8[$__neg] = 0;
       $37 = ($__e);
       $38 = HEAP32[$37>>2]|0;
       $39 = ($1);
       HEAP32[$39>>2] = $38;
       $40 = (($__iob) + 4|0);
       $41 = HEAP32[$40>>2]|0;
       __THREW__ = 0;
       $42 = $$byval_copy;
       $43 = $$byval_copy;
       $44 = $1;
       ;HEAP32[$43+0>>2]=HEAP32[$44+0>>2]|0;
       $45 = (invoke_iiiiiiiiiiii(1,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($41|0),($__err|0),($__neg|0),($36|0),($__wb|0),($__wn|0),($5|0))|0);
       $46 = $$byval_copy;
       $47 = __THREW__; __THREW__ = 0;
       $48 = $47&1;
       if ($48) {
        break L6;
       }
       if ($45) {
        $49 = $__v;
        $50 = HEAP8[$49]|0;
        $51 = $50 & 1;
        $52 = ($51<<24>>24)==(0);
        if ($52) {
         $56 = $__v;
         $57 = (($56) + 1|0);
         HEAP8[$57] = 0;
         HEAP8[$49] = 0;
        } else {
         $53 = (($__v) + 8|0);
         $54 = HEAP32[$53>>2]|0;
         HEAP8[$54] = 0;
         $55 = (($__v) + 4|0);
         HEAP32[$55>>2] = 0;
        }
        $58 = HEAP8[$__neg]|0;
        $59 = ($58<<24>>24)==(0);
        $$pre14 = $30;
        if (!($59)) {
         $60 = HEAP32[$$pre14>>2]|0;
         $61 = (($60) + 28|0);
         $62 = HEAP32[$61>>2]|0;
         __THREW__ = 0;
         $63 = (invoke_iii($62|0,($36|0),45)|0);
         $64 = __THREW__; __THREW__ = 0;
         $65 = $64&1;
         if ($65) {
          break L6;
         }
         __THREW__ = 0;
         invoke_vii(51,($__v|0),($63|0));
         $66 = __THREW__; __THREW__ = 0;
         $67 = $66&1;
         if ($67) {
          break L6;
         }
        }
        $70 = HEAP32[$$pre14>>2]|0;
        $71 = (($70) + 28|0);
        $72 = HEAP32[$71>>2]|0;
        __THREW__ = 0;
        $73 = (invoke_iii($72|0,($36|0),48)|0);
        $74 = __THREW__; __THREW__ = 0;
        $75 = $74&1;
        if ($75) {
         break L6;
        }
        $76 = HEAP32[$3>>2]|0;
        $77 = HEAP32[$__wn>>2]|0;
        $78 = (($77) + -1|0);
        $79 = ($76>>>0)<($78>>>0);
        L23: do {
         if ($79) {
          $__w$09 = $76;
          while(1) {
           $81 = HEAP8[$__w$09]|0;
           $82 = ($81<<24>>24)==($73<<24>>24);
           $83 = (($__w$09) + 1|0);
           if (!($82)) {
            $__w$0$lcssa = $__w$09;
            break L23;
           }
           $80 = ($83>>>0)<($78>>>0);
           if ($80) {
            $__w$09$phi = $83;$__w$09 = $__w$09$phi;
           } else {
            $__w$0$lcssa = $83;
            break;
           }
          }
         } else {
          $__w$0$lcssa = $76;
         }
        } while(0);
        __THREW__ = 0;
        (invoke_iiii(36,($__v|0),($__w$0$lcssa|0),($77|0))|0);
        $84 = __THREW__; __THREW__ = 0;
        $85 = $84&1;
        if ($85) {
         break L6;
        }
       }
       $86 = ($__b);
       $87 = HEAP32[$86>>2]|0;
       $88 = ($87|0)==(0|0);
       do {
        if ($88) {
         $102 = 0;
        } else {
         $89 = (($87) + 12|0);
         $90 = HEAP32[$89>>2]|0;
         $91 = (($87) + 16|0);
         $92 = HEAP32[$91>>2]|0;
         $93 = ($90|0)==($92|0);
         if (!($93)) {
          $102 = $87;
          break;
         }
         $94 = $87;
         $95 = HEAP32[$94>>2]|0;
         $96 = (($95) + 36|0);
         $97 = HEAP32[$96>>2]|0;
         __THREW__ = 0;
         $98 = (invoke_ii($97|0,($87|0))|0);
         $99 = __THREW__; __THREW__ = 0;
         $100 = $99&1;
         if ($100) {
          break L6;
         }
         $101 = ($98|0)==(-1);
         if (!($101)) {
          $102 = $87;
          break;
         }
         HEAP32[$86>>2] = 0;
         $102 = 0;
        }
       } while(0);
       $103 = ($102|0)==(0|0);
       $104 = ($38|0)==(0|0);
       do {
        if ($104) {
         label = 33;
        } else {
         $105 = (($38) + 12|0);
         $106 = HEAP32[$105>>2]|0;
         $107 = (($38) + 16|0);
         $108 = HEAP32[$107>>2]|0;
         $109 = ($106|0)==($108|0);
         if (!($109)) {
          if ($103) {
           break;
          } else {
           label = 35;
           break;
          }
         }
         $110 = $38;
         $111 = HEAP32[$110>>2]|0;
         $112 = (($111) + 36|0);
         $113 = HEAP32[$112>>2]|0;
         __THREW__ = 0;
         $114 = (invoke_ii($113|0,($38|0))|0);
         $115 = __THREW__; __THREW__ = 0;
         $116 = $115&1;
         if ($116) {
          break L6;
         }
         $117 = ($114|0)==(-1);
         if ($117) {
          HEAP32[$37>>2] = 0;
          label = 33;
          break;
         } else {
          $118 = ($38|0)==(0|0);
          $tmp$i$i = $103 ^ $118;
          if ($tmp$i$i) {
           break;
          } else {
           label = 35;
           break;
          }
         }
        }
       } while(0);
       if ((label|0) == 33) {
        if ($103) {
         label = 35;
        }
       }
       if ((label|0) == 35) {
        $119 = HEAP32[$__err>>2]|0;
        $120 = $119 | 2;
        HEAP32[$__err>>2] = $120;
       }
       $121 = ($agg$result);
       HEAP32[$121>>2] = $102;
       $122 = HEAP32[$8>>2]|0;
       $123 = ($122);
       (__ZNSt3__114__shared_count16__release_sharedEv($123)|0);
       $124 = HEAP32[$3>>2]|0;
       HEAP32[$3>>2] = 0;
       $125 = ($124|0)==(0|0);
       if ($125) {
        STACKTOP = sp;return;
       }
       $126 = HEAP32[$4>>2]|0;
       __THREW__ = 0;
       invoke_vi($126|0,($124|0));
       $127 = __THREW__; __THREW__ = 0;
       $128 = $127&1;
       if ($128) {
        $129 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        u$0 = tempRet0;
        ___clang_call_terminate($129);
        // unreachable;
       } else {
        STACKTOP = sp;return;
       }
      }
     } while(0);
     $32 = (___cxa_allocate_exception(4)|0);
     $33 = $32;
     __ZNSt8bad_castC2Ev($33);
     __THREW__ = 0;
     invoke_viii(12,($32|0),((17096)|0),((143)|0));
     $34 = __THREW__; __THREW__ = 0;
     $35 = $34&1;
     if ($35) {
      break;
     }
     // unreachable;
    }
   } while(0);
   $130 = ___cxa_find_matching_catch(-1,-1)|0;
   $131 = tempRet0;
   $132 = HEAP32[$8>>2]|0;
   $133 = ($132);
   (__ZNSt3__114__shared_count16__release_sharedEv($133)|0);
   $$pre = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $134 = ($$pre|0)==(0|0);
   if ($134) {
    $$0118 = $131;$$020 = $130;
   } else {
    $$0117 = $131;$$019 = $130;$135 = $$pre;
    break;
   }
   ___resumeException($$020|0);
   // unreachable;
  }
 } while(0);
 $136 = HEAP32[$4>>2]|0;
 __THREW__ = 0;
 invoke_vi($136|0,($135|0));
 $137 = __THREW__; __THREW__ = 0;
 $138 = $137&1;
 if ($138) {
  $139 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$1 = tempRet0;
  ___clang_call_terminate($139);
  // unreachable;
 } else {
  $$0118 = $$0117;$$020 = $$019;
  ___resumeException($$020|0);
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$01$phi = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$02 = 0, $__p$02$phi = 0, $phitmp$i = 0, $scevgep = 0, $scevgep3 = 0, $scevgep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = $__first;
 $3 = HEAP8[$1]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = $3&255;
  $7 = $6 >>> 1;
  $14 = $7;$15 = $3;$16 = 10;
 } else {
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($this);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & -2;
  $phitmp$i = (($12) + -1)|0;
  $13 = $11&255;
  $14 = $9;$15 = $13;$16 = $phitmp$i;
 }
 $17 = $__last;
 $18 = (($17) - ($2))|0;
 $19 = ($__last|0)==($__first|0);
 if ($19) {
  STACKTOP = sp;return ($this|0);
 }
 $20 = (($16) - ($14))|0;
 $21 = ($20>>>0)<($18>>>0);
 if ($21) {
  $22 = (($14) + ($18))|0;
  $23 = (($22) - ($16))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$16,$23,$14,$14,0,0);
  $$pre = HEAP8[$1]|0;
  $24 = $$pre;
 } else {
  $24 = $15;
 }
 $25 = $24 & 1;
 $26 = ($25<<24>>24)==(0);
 if ($26) {
  $29 = $this;
  $30 = (($29) + 1|0);
  $31 = $30;
 } else {
  $27 = (($this) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $31 = $28;
 }
 $32 = (($31) + ($14)|0);
 $33 = (($14) - ($2))|0;
 $scevgep = (($__last) + ($33)|0);
 $scevgep3 = $scevgep;
 $$01 = $__first;$__p$02 = $32;
 while(1) {
  $34 = HEAP8[$$01]|0;
  HEAP8[$__p$02] = $34;
  $35 = (($__p$02) + 1|0);
  $36 = (($$01) + 1|0);
  $37 = ($36|0)==($__last|0);
  if ($37) {
   break;
  } else {
   $__p$02$phi = $35;$$01$phi = $36;$__p$02 = $__p$02$phi;$$01 = $$01$phi;
  }
 }
 $scevgep4 = (($31) + ($scevgep3)|0);
 HEAP8[$scevgep4] = 0;
 $38 = (($14) + ($18))|0;
 $39 = HEAP8[$1]|0;
 $40 = $39 & 1;
 $41 = ($40<<24>>24)==(0);
 if ($41) {
  $43 = $38 << 1;
  $44 = $43&255;
  HEAP8[$1] = $44;
  STACKTOP = sp;return ($this|0);
 } else {
  $42 = (($this) + 4|0);
  HEAP32[$42>>2] = $38;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i8 = 0, $storemerge = 0, $tmpcast = 0, $tmpcast1 = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0, u$2 = 0;
 var u$3 = 0, u$4 = 0, u$5 = 0, u$6 = 0, u$7 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $__p$i$i$i$i8 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $1 = sp + 32|0;
 $2 = sp + 40|0;
 $3 = sp + 56|0;
 $4 = sp + 72|0;
 $5 = sp + 88|0;
 $6 = sp + 104|0;
 $7 = sp + 112|0;
 $8 = sp + 128|0;
 $9 = sp + 144|0;
 $10 = sp + 160|0;
 if ($__intl) {
  $tmpcast1 = $1;
  $11 = ($__loc);
  $12 = HEAP32[$11>>2]|0;
  $13 = $__p$i$i$i$i;
  $14 = HEAP32[((8576))>>2]|0;
  $15 = ($14|0)==(-1);
  if (!($15)) {
   $16 = ($__p$i$i$i$i);
   HEAP32[$16>>2] = (8576);
   $17 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$17>>2] = (183);
   $18 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$18>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(((8576)),$13,184);
  }
  $19 = HEAP32[(((8576) + 4|0))>>2]|0;
  $20 = (($19) + -1)|0;
  $21 = (($12) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($12) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $22;
  $26 = $24;
  $27 = (($25) - ($26))|0;
  $28 = $27 >> 2;
  $29 = ($28>>>0)>($20>>>0);
  if (!($29)) {
   $33 = (___cxa_allocate_exception(4)|0);
   $34 = $33;
   __ZNSt8bad_castC2Ev($34);
   ___cxa_throw(($33|0),((17096)|0),((143)|0));
   // unreachable;
  }
  $30 = (($24) + ($20<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $33 = (___cxa_allocate_exception(4)|0);
   $34 = $33;
   __ZNSt8bad_castC2Ev($34);
   ___cxa_throw(($33|0),((17096)|0),((143)|0));
   // unreachable;
  }
  $35 = $31;
  $36 = $31;
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + 44|0);
  $39 = HEAP32[$38>>2]|0;
  FUNCTION_TABLE_vii[$39 & 127]($tmpcast1,$35);
  $40 = $__pat;
  $41 = HEAP32[$1>>2]|0;
  HEAP8[$40]=$41&255;HEAP8[$40+1|0]=($41>>8)&255;HEAP8[$40+2|0]=($41>>16)&255;HEAP8[$40+3|0]=$41>>24;
  $42 = $31;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + 32|0);
  $45 = HEAP32[$44>>2]|0;
  FUNCTION_TABLE_vii[$45 & 127]($2,$35);
  $46 = $__nsn;
  $47 = HEAP8[$46]|0;
  $48 = $47 & 1;
  $49 = ($48<<24>>24)==(0);
  if ($49) {
   $53 = $__nsn;
   $54 = (($53) + 1|0);
   HEAP8[$54] = 0;
   HEAP8[$46] = 0;
  } else {
   $50 = (($__nsn) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   HEAP8[$51] = 0;
   $52 = (($__nsn) + 4|0);
   HEAP32[$52>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(77,($__nsn|0),0);
  $55 = __THREW__; __THREW__ = 0;
  $56 = $55&1;
  if ($56) {
   $57 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$0 = tempRet0;
   ___clang_call_terminate($57);
   // unreachable;
  }
  $58 = $2;
  ;HEAP32[$46+0>>2]=HEAP32[$58+0>>2]|0;HEAP32[$46+4>>2]=HEAP32[$58+4>>2]|0;HEAP32[$46+8>>2]=HEAP32[$58+8>>2]|0;
  ;HEAP32[$58+0>>2]=0|0;HEAP32[$58+4>>2]=0|0;HEAP32[$58+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
  $59 = HEAP32[$42>>2]|0;
  $60 = (($59) + 28|0);
  $61 = HEAP32[$60>>2]|0;
  FUNCTION_TABLE_vii[$61 & 127]($3,$35);
  $62 = $__psn;
  $63 = HEAP8[$62]|0;
  $64 = $63 & 1;
  $65 = ($64<<24>>24)==(0);
  if ($65) {
   $69 = $__psn;
   $70 = (($69) + 1|0);
   HEAP8[$70] = 0;
   HEAP8[$62] = 0;
  } else {
   $66 = (($__psn) + 8|0);
   $67 = HEAP32[$66>>2]|0;
   HEAP8[$67] = 0;
   $68 = (($__psn) + 4|0);
   HEAP32[$68>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(77,($__psn|0),0);
  $71 = __THREW__; __THREW__ = 0;
  $72 = $71&1;
  if ($72) {
   $73 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$1 = tempRet0;
   ___clang_call_terminate($73);
   // unreachable;
  }
  $74 = $3;
  ;HEAP32[$62+0>>2]=HEAP32[$74+0>>2]|0;HEAP32[$62+4>>2]=HEAP32[$74+4>>2]|0;HEAP32[$62+8>>2]=HEAP32[$74+8>>2]|0;
  ;HEAP32[$74+0>>2]=0|0;HEAP32[$74+4>>2]=0|0;HEAP32[$74+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  $75 = $31;
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + 12|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (FUNCTION_TABLE_ii[$78 & 127]($35)|0);
  HEAP8[$__dp] = $79;
  $80 = HEAP32[$75>>2]|0;
  $81 = (($80) + 16|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (FUNCTION_TABLE_ii[$82 & 127]($35)|0);
  HEAP8[$__ts] = $83;
  $84 = HEAP32[$42>>2]|0;
  $85 = (($84) + 20|0);
  $86 = HEAP32[$85>>2]|0;
  FUNCTION_TABLE_vii[$86 & 127]($4,$35);
  $87 = $__grp;
  $88 = HEAP8[$87]|0;
  $89 = $88 & 1;
  $90 = ($89<<24>>24)==(0);
  if ($90) {
   $94 = $__grp;
   $95 = (($94) + 1|0);
   HEAP8[$95] = 0;
   HEAP8[$87] = 0;
  } else {
   $91 = (($__grp) + 8|0);
   $92 = HEAP32[$91>>2]|0;
   HEAP8[$92] = 0;
   $93 = (($__grp) + 4|0);
   HEAP32[$93>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(77,($__grp|0),0);
  $96 = __THREW__; __THREW__ = 0;
  $97 = $96&1;
  if ($97) {
   $98 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$2 = tempRet0;
   ___clang_call_terminate($98);
   // unreachable;
  }
  $99 = $4;
  ;HEAP32[$87+0>>2]=HEAP32[$99+0>>2]|0;HEAP32[$87+4>>2]=HEAP32[$99+4>>2]|0;HEAP32[$87+8>>2]=HEAP32[$99+8>>2]|0;
  ;HEAP32[$99+0>>2]=0|0;HEAP32[$99+4>>2]=0|0;HEAP32[$99+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $100 = HEAP32[$42>>2]|0;
  $101 = (($100) + 24|0);
  $102 = HEAP32[$101>>2]|0;
  FUNCTION_TABLE_vii[$102 & 127]($5,$35);
  $103 = $__sym;
  $104 = HEAP8[$103]|0;
  $105 = $104 & 1;
  $106 = ($105<<24>>24)==(0);
  if ($106) {
   $110 = $__sym;
   $111 = (($110) + 1|0);
   HEAP8[$111] = 0;
   HEAP8[$103] = 0;
  } else {
   $107 = (($__sym) + 8|0);
   $108 = HEAP32[$107>>2]|0;
   HEAP8[$108] = 0;
   $109 = (($__sym) + 4|0);
   HEAP32[$109>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(77,($__sym|0),0);
  $112 = __THREW__; __THREW__ = 0;
  $113 = $112&1;
  if ($113) {
   $114 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$3 = tempRet0;
   ___clang_call_terminate($114);
   // unreachable;
  }
  $115 = $5;
  ;HEAP32[$103+0>>2]=HEAP32[$115+0>>2]|0;HEAP32[$103+4>>2]=HEAP32[$115+4>>2]|0;HEAP32[$103+8>>2]=HEAP32[$115+8>>2]|0;
  ;HEAP32[$115+0>>2]=0|0;HEAP32[$115+4>>2]=0|0;HEAP32[$115+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
  $116 = $31;
  $117 = HEAP32[$116>>2]|0;
  $118 = (($117) + 36|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (FUNCTION_TABLE_ii[$119 & 127]($35)|0);
  $storemerge = $120;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $tmpcast = $6;
  $121 = ($__loc);
  $122 = HEAP32[$121>>2]|0;
  $123 = $__p$i$i$i$i8;
  $124 = HEAP32[((8512))>>2]|0;
  $125 = ($124|0)==(-1);
  if (!($125)) {
   $126 = ($__p$i$i$i$i8);
   HEAP32[$126>>2] = (8512);
   $127 = (($__p$i$i$i$i8) + 4|0);
   HEAP32[$127>>2] = (183);
   $128 = (($__p$i$i$i$i8) + 8|0);
   HEAP32[$128>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(((8512)),$123,184);
  }
  $129 = HEAP32[(((8512) + 4|0))>>2]|0;
  $130 = (($129) + -1)|0;
  $131 = (($122) + 12|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (($122) + 8|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = $132;
  $136 = $134;
  $137 = (($135) - ($136))|0;
  $138 = $137 >> 2;
  $139 = ($138>>>0)>($130>>>0);
  if (!($139)) {
   $143 = (___cxa_allocate_exception(4)|0);
   $144 = $143;
   __ZNSt8bad_castC2Ev($144);
   ___cxa_throw(($143|0),((17096)|0),((143)|0));
   // unreachable;
  }
  $140 = (($134) + ($130<<2)|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = ($141|0)==(0|0);
  if ($142) {
   $143 = (___cxa_allocate_exception(4)|0);
   $144 = $143;
   __ZNSt8bad_castC2Ev($144);
   ___cxa_throw(($143|0),((17096)|0),((143)|0));
   // unreachable;
  }
  $145 = $141;
  $146 = $141;
  $147 = HEAP32[$146>>2]|0;
  $148 = (($147) + 44|0);
  $149 = HEAP32[$148>>2]|0;
  FUNCTION_TABLE_vii[$149 & 127]($tmpcast,$145);
  $150 = $__pat;
  $151 = HEAP32[$6>>2]|0;
  HEAP8[$150]=$151&255;HEAP8[$150+1|0]=($151>>8)&255;HEAP8[$150+2|0]=($151>>16)&255;HEAP8[$150+3|0]=$151>>24;
  $152 = $141;
  $153 = HEAP32[$152>>2]|0;
  $154 = (($153) + 32|0);
  $155 = HEAP32[$154>>2]|0;
  FUNCTION_TABLE_vii[$155 & 127]($7,$145);
  $156 = $__nsn;
  $157 = HEAP8[$156]|0;
  $158 = $157 & 1;
  $159 = ($158<<24>>24)==(0);
  if ($159) {
   $163 = $__nsn;
   $164 = (($163) + 1|0);
   HEAP8[$164] = 0;
   HEAP8[$156] = 0;
  } else {
   $160 = (($__nsn) + 8|0);
   $161 = HEAP32[$160>>2]|0;
   HEAP8[$161] = 0;
   $162 = (($__nsn) + 4|0);
   HEAP32[$162>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(77,($__nsn|0),0);
  $165 = __THREW__; __THREW__ = 0;
  $166 = $165&1;
  if ($166) {
   $167 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$4 = tempRet0;
   ___clang_call_terminate($167);
   // unreachable;
  }
  $168 = $7;
  ;HEAP32[$156+0>>2]=HEAP32[$168+0>>2]|0;HEAP32[$156+4>>2]=HEAP32[$168+4>>2]|0;HEAP32[$156+8>>2]=HEAP32[$168+8>>2]|0;
  ;HEAP32[$168+0>>2]=0|0;HEAP32[$168+4>>2]=0|0;HEAP32[$168+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
  $169 = HEAP32[$152>>2]|0;
  $170 = (($169) + 28|0);
  $171 = HEAP32[$170>>2]|0;
  FUNCTION_TABLE_vii[$171 & 127]($8,$145);
  $172 = $__psn;
  $173 = HEAP8[$172]|0;
  $174 = $173 & 1;
  $175 = ($174<<24>>24)==(0);
  if ($175) {
   $179 = $__psn;
   $180 = (($179) + 1|0);
   HEAP8[$180] = 0;
   HEAP8[$172] = 0;
  } else {
   $176 = (($__psn) + 8|0);
   $177 = HEAP32[$176>>2]|0;
   HEAP8[$177] = 0;
   $178 = (($__psn) + 4|0);
   HEAP32[$178>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(77,($__psn|0),0);
  $181 = __THREW__; __THREW__ = 0;
  $182 = $181&1;
  if ($182) {
   $183 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$5 = tempRet0;
   ___clang_call_terminate($183);
   // unreachable;
  }
  $184 = $8;
  ;HEAP32[$172+0>>2]=HEAP32[$184+0>>2]|0;HEAP32[$172+4>>2]=HEAP32[$184+4>>2]|0;HEAP32[$172+8>>2]=HEAP32[$184+8>>2]|0;
  ;HEAP32[$184+0>>2]=0|0;HEAP32[$184+4>>2]=0|0;HEAP32[$184+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
  $185 = $141;
  $186 = HEAP32[$185>>2]|0;
  $187 = (($186) + 12|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = (FUNCTION_TABLE_ii[$188 & 127]($145)|0);
  HEAP8[$__dp] = $189;
  $190 = HEAP32[$185>>2]|0;
  $191 = (($190) + 16|0);
  $192 = HEAP32[$191>>2]|0;
  $193 = (FUNCTION_TABLE_ii[$192 & 127]($145)|0);
  HEAP8[$__ts] = $193;
  $194 = HEAP32[$152>>2]|0;
  $195 = (($194) + 20|0);
  $196 = HEAP32[$195>>2]|0;
  FUNCTION_TABLE_vii[$196 & 127]($9,$145);
  $197 = $__grp;
  $198 = HEAP8[$197]|0;
  $199 = $198 & 1;
  $200 = ($199<<24>>24)==(0);
  if ($200) {
   $204 = $__grp;
   $205 = (($204) + 1|0);
   HEAP8[$205] = 0;
   HEAP8[$197] = 0;
  } else {
   $201 = (($__grp) + 8|0);
   $202 = HEAP32[$201>>2]|0;
   HEAP8[$202] = 0;
   $203 = (($__grp) + 4|0);
   HEAP32[$203>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(77,($__grp|0),0);
  $206 = __THREW__; __THREW__ = 0;
  $207 = $206&1;
  if ($207) {
   $208 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$6 = tempRet0;
   ___clang_call_terminate($208);
   // unreachable;
  }
  $209 = $9;
  ;HEAP32[$197+0>>2]=HEAP32[$209+0>>2]|0;HEAP32[$197+4>>2]=HEAP32[$209+4>>2]|0;HEAP32[$197+8>>2]=HEAP32[$209+8>>2]|0;
  ;HEAP32[$209+0>>2]=0|0;HEAP32[$209+4>>2]=0|0;HEAP32[$209+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
  $210 = HEAP32[$152>>2]|0;
  $211 = (($210) + 24|0);
  $212 = HEAP32[$211>>2]|0;
  FUNCTION_TABLE_vii[$212 & 127]($10,$145);
  $213 = $__sym;
  $214 = HEAP8[$213]|0;
  $215 = $214 & 1;
  $216 = ($215<<24>>24)==(0);
  if ($216) {
   $220 = $__sym;
   $221 = (($220) + 1|0);
   HEAP8[$221] = 0;
   HEAP8[$213] = 0;
  } else {
   $217 = (($__sym) + 8|0);
   $218 = HEAP32[$217>>2]|0;
   HEAP8[$218] = 0;
   $219 = (($__sym) + 4|0);
   HEAP32[$219>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(77,($__sym|0),0);
  $222 = __THREW__; __THREW__ = 0;
  $223 = $222&1;
  if ($223) {
   $224 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$7 = tempRet0;
   ___clang_call_terminate($224);
   // unreachable;
  }
  $225 = $10;
  ;HEAP32[$213+0>>2]=HEAP32[$225+0>>2]|0;HEAP32[$213+4>>2]=HEAP32[$225+4>>2]|0;HEAP32[$213+8>>2]=HEAP32[$225+8>>2]|0;
  ;HEAP32[$225+0>>2]=0|0;HEAP32[$225+4>>2]=0|0;HEAP32[$225+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
  $226 = $141;
  $227 = HEAP32[$226>>2]|0;
  $228 = (($227) + 36|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = (FUNCTION_TABLE_ii[$229 & 127]($145)|0);
  $storemerge = $230;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$012$i$i = 0, $$012$i$i$phi = 0, $$__ig$0 = 0, $$lcssa6 = 0, $$not = 0, $$not9 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $14$phi = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__ig$011 = 0, $__r$012 = 0, $or$cond = 0, $or$cond2 = 0, $or$cond2$lcssa = 0, $or$cond210 = 0, $or$cond213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $__grouping;
 $2 = HEAP8[$1]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = $2&255;
  $8 = $7 >>> 1;
  $9 = $8;
 } else {
  $5 = (($__grouping) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $9 = $6;
 }
 $10 = ($9|0)==(0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = ($__g|0)==($__g_end|0);
 do {
  if ($11) {
   $20 = $2;
  } else {
   $12 = (($__g_end) + -4|0);
   $13 = ($12>>>0)>($__g>>>0);
   if ($13) {
    $$012$i$i = $__g;$14 = $12;
   } else {
    $20 = $2;
    break;
   }
   while(1) {
    $15 = HEAP32[$$012$i$i>>2]|0;
    $16 = HEAP32[$14>>2]|0;
    HEAP32[$$012$i$i>>2] = $16;
    HEAP32[$14>>2] = $15;
    $17 = (($$012$i$i) + 4|0);
    $18 = (($14) + -4|0);
    $19 = ($17>>>0)<($18>>>0);
    if ($19) {
     $14$phi = $18;$$012$i$i$phi = $17;$14 = $14$phi;$$012$i$i = $$012$i$i$phi;
    } else {
     break;
    }
   }
   $$pre = HEAP8[$1]|0;
   $20 = $$pre;
  }
 } while(0);
 $21 = $20 & 1;
 $22 = ($21<<24>>24)==(0);
 if ($22) {
  $27 = $__grouping;
  $28 = (($27) + 1|0);
  $29 = $20&255;
  $30 = $29 >>> 1;
  $31 = $28;$32 = $30;
 } else {
  $23 = (($__grouping) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($__grouping) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $31 = $24;$32 = $26;
 }
 $33 = (($__g_end) + -4|0);
 $34 = ($33>>>0)>($__g>>>0);
 $35 = HEAP8[$31]|0;
 $$not9 = ($35<<24>>24)<(1);
 $36 = ($35<<24>>24)==(127);
 $or$cond210 = $$not9 | $36;
 L18: do {
  if ($34) {
   $37 = (($31) + ($32)|0);
   $38 = $37;
   $39 = $35;$__ig$011 = $31;$__r$012 = $__g;$or$cond213 = $or$cond210;
   while(1) {
    if (!($or$cond213)) {
     $40 = $39 << 24 >> 24;
     $41 = HEAP32[$__r$012>>2]|0;
     $42 = ($40|0)==($41|0);
     if (!($42)) {
      break;
     }
    }
    $43 = $__ig$011;
    $44 = (($38) - ($43))|0;
    $45 = ($44|0)>(1);
    $46 = (($__ig$011) + 1|0);
    $$__ig$0 = $45 ? $46 : $__ig$011;
    $47 = (($__r$012) + 4|0);
    $48 = ($47>>>0)<($33>>>0);
    $49 = HEAP8[$$__ig$0]|0;
    $$not = ($49<<24>>24)<(1);
    $50 = ($49<<24>>24)==(127);
    $or$cond2 = $$not | $50;
    if ($48) {
     $39 = $49;$__ig$011 = $$__ig$0;$__r$012 = $47;$or$cond213 = $or$cond2;
    } else {
     $$lcssa6 = $49;$or$cond2$lcssa = $or$cond2;
     break L18;
    }
   }
   HEAP32[$__err>>2] = 4;
   STACKTOP = sp;return;
  } else {
   $$lcssa6 = $35;$or$cond2$lcssa = $or$cond210;
  }
 } while(0);
 if ($or$cond2$lcssa) {
  STACKTOP = sp;return;
 }
 $51 = $$lcssa6 << 24 >> 24;
 $52 = HEAP32[$33>>2]|0;
 $53 = ($51>>>0)<($52>>>0);
 $54 = ($52|0)==(0);
 $or$cond = $53 | $54;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 HEAP32[$__err>>2] = 4;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$01$i$phi = 0, $$116 = 0, $$117 = 0, $$1214 = 0, $$1215 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre19 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$210 = 0, $__neg = 0, $__p$i$i$i$i = 0, $__w$011 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $phitmp$i$i$i = 0, $vararg_buffer = 0, $vararg_lifetime_bitcast = 0;
 var $vararg_ptr = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer = sp + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__p$i$i$i$i = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__wbuf = STACKTOP; STACKTOP = STACKTOP + 400|0;
 $__wb = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__wn = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__loc = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__neg = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__atoms = STACKTOP; STACKTOP = STACKTOP + 40|0;
 $__nbuf = STACKTOP; STACKTOP = STACKTOP + 104|0;
 $2 = $__wbuf;
 $3 = ($__wbuf);
 $4 = ($__wb);
 HEAP32[$4>>2] = $3;
 $5 = (($__wb) + 4|0);
 HEAP32[$5>>2] = 187;
 $6 = (($__wbuf) + 400|0);
 __THREW__ = 0;
 invoke_vii(49,($__loc|0),($__iob|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 do {
  if ($8) {
   $71 = ___cxa_find_matching_catch(-1,-1)|0;
   $72 = tempRet0;
   HEAP32[$4>>2] = 0;
   $$116 = $71;$$1214 = $72;$162 = 187;$163 = $3;
  } else {
   $9 = ($__loc);
   $10 = HEAP32[$9>>2]|0;
   $11 = $__p$i$i$i$i;
   $12 = HEAP32[((9128))>>2]|0;
   $13 = ($12|0)==(-1);
   if ($13) {
    label = 4;
   } else {
    $14 = ($__p$i$i$i$i);
    HEAP32[$14>>2] = (9128);
    $15 = (($__p$i$i$i$i) + 4|0);
    HEAP32[$15>>2] = (183);
    $16 = (($__p$i$i$i$i) + 8|0);
    HEAP32[$16>>2] = 0;
    __THREW__ = 0;
    invoke_viii(25,(((9128))|0),($11|0),(184|0));
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if ($18) {
     label = 15;
    } else {
     label = 4;
    }
   }
   L5: do {
    if ((label|0) == 4) {
     $19 = HEAP32[(((9128) + 4|0))>>2]|0;
     $20 = (($19) + -1)|0;
     $21 = (($10) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (($10) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = $22;
     $26 = $24;
     $27 = (($25) - ($26))|0;
     $28 = $27 >> 2;
     $29 = ($28>>>0)>($20>>>0);
     do {
      if ($29) {
       $30 = (($24) + ($20<<2)|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = ($31|0)==(0|0);
       if ($32) {
        break;
       }
       $37 = $31;
       HEAP8[$__neg] = 0;
       $38 = ($__e);
       $39 = HEAP32[$38>>2]|0;
       $40 = ($1);
       HEAP32[$40>>2] = $39;
       $41 = (($__iob) + 4|0);
       $42 = HEAP32[$41>>2]|0;
       __THREW__ = 0;
       $43 = $$byval_copy;
       $44 = $$byval_copy;
       $45 = $1;
       ;HEAP32[$44+0>>2]=HEAP32[$45+0>>2]|0;
       $46 = (invoke_iiiiiiiiiiii(2,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($42|0),($__err|0),($__neg|0),($37|0),($__wb|0),($__wn|0),($6|0))|0);
       $47 = $$byval_copy;
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if ($49) {
        label = 15;
        break L5;
       }
       L11: do {
        if ($46) {
         $50 = $__atoms;
         $51 = ($__atoms);
         $52 = $31;
         $53 = HEAP32[$52>>2]|0;
         $54 = (($53) + 48|0);
         $55 = HEAP32[$54>>2]|0;
         __THREW__ = 0;
         (invoke_iiiii($55|0,($37|0),((8832)|0),(((8832 + 10|0))|0),($51|0))|0);
         $56 = __THREW__; __THREW__ = 0;
         $57 = $56&1;
         if ($57) {
          label = 15;
          break L5;
         }
         $58 = ($__nbuf);
         $59 = HEAP32[$__wn>>2]|0;
         $60 = HEAP32[$4>>2]|0;
         $61 = $59;
         $62 = $60;
         $63 = (($61) - ($62))|0;
         $64 = ($63|0)>(392);
         do {
          if ($64) {
           $65 = $63 >> 2;
           $66 = (($65) + 2)|0;
           $67 = (_malloc($66)|0);
           $68 = ($67|0)==(0|0);
           if (!($68)) {
            $80 = $67;$__nc$0 = $67;
            label = 19;
            break;
           }
           __THREW__ = 0;
           invoke_v(7);
           $69 = __THREW__; __THREW__ = 0;
           $70 = $69&1;
           if ($70) {
            $75 = 0;
            label = 16;
           } else {
            $80 = 0;$__nc$0 = 0;
            label = 19;
           }
          } else {
           $80 = 0;$__nc$0 = $58;
           label = 19;
          }
         } while(0);
         do {
          if ((label|0) == 19) {
           $81 = HEAP8[$__neg]|0;
           $82 = ($81<<24>>24)==(0);
           if ($82) {
            $__nc$1 = $__nc$0;
           } else {
            $83 = (($__nc$0) + 1|0);
            HEAP8[$__nc$0] = 45;
            $__nc$1 = $83;
           }
           $84 = ($60>>>0)<($59>>>0);
           if ($84) {
            $85 = (($__atoms) + 40|0);
            $86 = $__atoms;
            $__nc$210 = $__nc$1;$__w$011 = $60;
            while(1) {
             $87 = HEAP32[$__w$011>>2]|0;
             $$01$i = $51;
             while(1) {
              $89 = HEAP32[$$01$i>>2]|0;
              $90 = ($89|0)==($87|0);
              $91 = (($$01$i) + 4|0);
              if ($90) {
               $$0$lcssa$i = $$01$i;
               break;
              }
              $88 = ($91|0)==($85|0);
              if ($88) {
               $$0$lcssa$i = $85;
               break;
              } else {
               $$01$i$phi = $91;$$01$i = $$01$i$phi;
              }
             }
             $92 = $$0$lcssa$i;
             $93 = (($92) - ($86))|0;
             $94 = $93 >> 2;
             $95 = (8832 + ($94)|0);
             $96 = HEAP8[$95]|0;
             HEAP8[$__nc$210] = $96;
             $97 = (($__w$011) + 4|0);
             $98 = (($__nc$210) + 1|0);
             $99 = HEAP32[$__wn>>2]|0;
             $100 = ($97>>>0)<($99>>>0);
             if ($100) {
              $__nc$210 = $98;$__w$011 = $97;
             } else {
              $__nc$2$lcssa = $98;
              break;
             }
            }
           } else {
            $__nc$2$lcssa = $__nc$1;
           }
           HEAP8[$__nc$2$lcssa] = 0;
           $vararg_ptr = ($vararg_buffer);
           HEAP32[$vararg_ptr>>2] = $__v;
           $101 = (_sscanf(($58|0),((8768)|0),($vararg_buffer|0))|0);
           $102 = ($101|0)==(1);
           if ($102) {
            $111 = ($80|0)==(0|0);
            if ($111) {
             break L11;
            }
            _free($80);
            break L11;
           }
           $103 = (___cxa_allocate_exception(8)|0);
           $104 = $103;
           __THREW__ = 0;
           invoke_vii(75,($104|0),((8776)|0));
           $105 = __THREW__; __THREW__ = 0;
           $106 = $105&1;
           if ($106) {
            $109 = ___cxa_find_matching_catch(-1,-1)|0;
            $110 = tempRet0;
            ___cxa_free_exception(($103|0));
            $78 = $80;$eh$lpad$body$index2Z2D = $110;$eh$lpad$body$indexZ2D = $109;
            break;
           }
           __THREW__ = 0;
           invoke_viii(12,($103|0),((5576)|0),((58)|0));
           $107 = __THREW__; __THREW__ = 0;
           $108 = $107&1;
           if ($108) {
            $75 = $80;
            label = 16;
            break;
           }
           // unreachable;
          }
         } while(0);
         if ((label|0) == 16) {
          $76 = ___cxa_find_matching_catch(-1,-1)|0;
          $77 = tempRet0;
          $78 = $75;$eh$lpad$body$index2Z2D = $77;$eh$lpad$body$indexZ2D = $76;
         }
         $79 = ($78|0)==(0|0);
         if ($79) {
          $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index2Z2D;
          break L5;
         }
         _free($78);
         $$0 = $eh$lpad$body$indexZ2D;$$01 = $eh$lpad$body$index2Z2D;
         break L5;
        }
       } while(0);
       $112 = ($__b);
       $113 = HEAP32[$112>>2]|0;
       $114 = ($113|0)==(0|0);
       do {
        if ($114) {
         $129 = 1;
        } else {
         $115 = (($113) + 12|0);
         $116 = HEAP32[$115>>2]|0;
         $117 = (($113) + 16|0);
         $118 = HEAP32[$117>>2]|0;
         $119 = ($116|0)==($118|0);
         if ($119) {
          $120 = $113;
          $121 = HEAP32[$120>>2]|0;
          $122 = (($121) + 36|0);
          $123 = HEAP32[$122>>2]|0;
          __THREW__ = 0;
          $124 = (invoke_ii($123|0,($113|0))|0);
          $125 = __THREW__; __THREW__ = 0;
          $126 = $125&1;
          if ($126) {
           label = 15;
           break L5;
          } else {
           $$0$i$i$i$i = $124;
          }
         } else {
          $127 = HEAP32[$116>>2]|0;
          $$0$i$i$i$i = $127;
         }
         $128 = ($$0$i$i$i$i|0)==(-1);
         if ($128) {
          HEAP32[$112>>2] = 0;
          $129 = 1;
          break;
         } else {
          $$pre$i$i$i = HEAP32[$112>>2]|0;
          $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
          $129 = $phitmp$i$i$i;
          break;
         }
        }
       } while(0);
       $130 = HEAP32[$38>>2]|0;
       $131 = ($130|0)==(0|0);
       do {
        if ($131) {
         label = 47;
        } else {
         $132 = (($130) + 12|0);
         $133 = HEAP32[$132>>2]|0;
         $134 = (($130) + 16|0);
         $135 = HEAP32[$134>>2]|0;
         $136 = ($133|0)==($135|0);
         if ($136) {
          $137 = $130;
          $138 = HEAP32[$137>>2]|0;
          $139 = (($138) + 36|0);
          $140 = HEAP32[$139>>2]|0;
          __THREW__ = 0;
          $141 = (invoke_ii($140|0,($130|0))|0);
          $142 = __THREW__; __THREW__ = 0;
          $143 = $142&1;
          if ($143) {
           label = 15;
           break L5;
          } else {
           $$0$i$i1$i$i = $141;
          }
         } else {
          $144 = HEAP32[$133>>2]|0;
          $$0$i$i1$i$i = $144;
         }
         $145 = ($$0$i$i1$i$i|0)==(-1);
         if ($145) {
          HEAP32[$38>>2] = 0;
          label = 47;
          break;
         } else {
          if ($129) {
           break;
          } else {
           label = 49;
           break;
          }
         }
        }
       } while(0);
       if ((label|0) == 47) {
        if ($129) {
         label = 49;
        }
       }
       if ((label|0) == 49) {
        $146 = HEAP32[$__err>>2]|0;
        $147 = $146 | 2;
        HEAP32[$__err>>2] = $147;
       }
       $148 = HEAP32[$112>>2]|0;
       $149 = ($agg$result);
       HEAP32[$149>>2] = $148;
       $150 = HEAP32[$9>>2]|0;
       $151 = ($150);
       (__ZNSt3__114__shared_count16__release_sharedEv($151)|0);
       $152 = HEAP32[$4>>2]|0;
       HEAP32[$4>>2] = 0;
       $153 = ($152|0)==(0|0);
       if ($153) {
        STACKTOP = sp;return;
       }
       $154 = HEAP32[$5>>2]|0;
       $155 = $152;
       __THREW__ = 0;
       invoke_vi($154|0,($155|0));
       $156 = __THREW__; __THREW__ = 0;
       $157 = $156&1;
       if ($157) {
        $158 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        u$0 = tempRet0;
        ___clang_call_terminate($158);
        // unreachable;
       } else {
        STACKTOP = sp;return;
       }
      }
     } while(0);
     $33 = (___cxa_allocate_exception(4)|0);
     $34 = $33;
     __ZNSt8bad_castC2Ev($34);
     __THREW__ = 0;
     invoke_viii(12,($33|0),((17096)|0),((143)|0));
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if ($36) {
      label = 15;
      break;
     }
     // unreachable;
    }
   } while(0);
   if ((label|0) == 15) {
    $73 = ___cxa_find_matching_catch(-1,-1)|0;
    $74 = tempRet0;
    $$0 = $73;$$01 = $74;
   }
   $159 = HEAP32[$9>>2]|0;
   $160 = ($159);
   (__ZNSt3__114__shared_count16__release_sharedEv($160)|0);
   $$pre = HEAP32[$4>>2]|0;
   HEAP32[$4>>2] = 0;
   $161 = ($$pre|0)==(0|0);
   if ($161) {
    $$117 = $$0;$$1215 = $$01;
    ___resumeException($$117|0);
    // unreachable;
   } else {
    $$pre19 = HEAP32[$5>>2]|0;
    $$116 = $$0;$$1214 = $$01;$162 = $$pre19;$163 = $$pre;
    break;
   }
  }
 } while(0);
 $164 = $163;
 __THREW__ = 0;
 invoke_vi($162|0,($164|0));
 $165 = __THREW__; __THREW__ = 0;
 $166 = $165&1;
 if ($166) {
  $167 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$1 = tempRet0;
  ___clang_call_terminate($167);
  // unreachable;
 } else {
  $$117 = $$116;$$1215 = $$1214;
  ___resumeException($$117|0);
  // unreachable;
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$$i = 0, $$$i138 = 0, $$$i149 = 0, $$$i159 = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i123 = 0, $$0$i$i$i$i177 = 0, $$0$i$i$i$i18 = 0, $$0$i$i$i$i192 = 0, $$0$i$i$i$i39 = 0, $$0$i$i$i$i89 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i129 = 0, $$0$i$i1$i$i183 = 0, $$0$i$i1$i$i198 = 0, $$0$i$i1$i$i24 = 0, $$0$i$i1$i$i45 = 0;
 var $$0$i$i1$i$i95 = 0, $$0$i$i104 = 0, $$0$i$i113 = 0, $$0$i$i117 = 0, $$0$i$i173 = 0, $$0$i$i207 = 0, $$0$i$i33 = 0, $$0$i$i37 = 0, $$0$i$i54 = 0, $$0$i$i59 = 0, $$0$i$i64 = 0, $$0$i$i71 = 0, $$0$i$i79 = 0, $$0$i$i83 = 0, $$477 = 0, $$478 = 0, $$479 = 0, $$480 = 0, $$481 = 0, $$482 = 0;
 var $$483 = 0, $$lcssa313 = 0, $$lcssa330 = 0, $$ph$ph = 0, $$ph$ph251$ph$ph$ph$ph$ph = 0, $$pr$i = 0, $$pr$i162 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i125 = 0, $$pre$i$i$i179 = 0, $$pre$i$i$i194 = 0, $$pre$i$i$i20 = 0, $$pre$i$i$i41 = 0, $$pre$i$i$i91 = 0, $$pre$i163 = 0, $$pre$i3$i$i200 = 0, $$pre$i3$i$i200455 = 0, $$pre$i3$i$i200456 = 0;
 var $$pre$i3$i$i47 = 0, $$pre$i3$i$i47452 = 0, $$pre$i3$i$i47454 = 0, $$pre$i3$i$i97 = 0, $$pre$i3$i$i97459$ph = 0, $$pre$i3$i$i97459475 = 0, $$pre465 = 0, $$pre466 = 0, $$pre467 = 0, $$pre468 = 0, $$pre469 = 0, $$pre470 = 0, $$sum = 0, $$sum471 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0;
 var $1003 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__dp = 0, $__et = 0, $__fd = 0;
 var $__gbuf = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$06 = 0, $__p$0377 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$05 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0379 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0;
 var $cond = 0, $free = 0, $free226 = 0, $free227 = 0, $free228$lcssa = 0, $free228372 = 0, $free229 = 0, $free230 = 0, $free231 = 0, $free232 = 0, $free232$ph$ph = 0, $free232$ph$ph250$ph$ph$ph$ph$ph = 0, $free234 = 0, $lpad$phi$index = 0, $lpad$phi$index8 = 0, $or$cond = 0, $or$cond247 = 0, $or$cond248 = 0, $or$cond7 = 0, $or$cond8 = 0;
 var $phitmp$i = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i126 = 0, $phitmp$i$i$i180 = 0, $phitmp$i$i$i195 = 0, $phitmp$i$i$i21 = 0, $phitmp$i$i$i42 = 0, $phitmp$i$i$i92 = 0, $phitmp$i139 = 0, $phitmp$i150 = 0, $phitmp$i160 = 0, $phitmp$i4$i$i201 = 0, $phitmp$i4$i$i48 = 0, $phitmp$i4$i$i98 = 0, $switch = 0, $this2$i$i$i = 0, $this2$i$i$i10 = 0, $this2$i$i$i12 = 0, $this2$i$i$i15 = 0, $this2$i$i$i9 = 0;
 var $tmp$i$i100 = 0, $tmp$i$i203 = 0, $tmp$i$i50 = 0, $tmpcast = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0, u$2 = 0, u$3 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 408|0;
 $__gbuf = sp;
 $__pat = sp + 400|0;
 $tmpcast = $__pat;
 $__dp = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__ts = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__grp = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__sym = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__psn = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__nsn = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__spaces = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__fd = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__et = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = $__gbuf;
 $2 = ($__gbuf);
 HEAP32[$__pat>>2] = 0;
 $this2$i$i$i = $__grp;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 $this2$i$i$i9 = $__sym;
 ;HEAP32[$this2$i$i$i9+0>>2]=0|0;HEAP32[$this2$i$i$i9+4>>2]=0|0;HEAP32[$this2$i$i$i9+8>>2]=0|0;
 $this2$i$i$i10 = $__psn;
 ;HEAP32[$this2$i$i$i10+0>>2]=0|0;HEAP32[$this2$i$i$i10+4>>2]=0|0;HEAP32[$this2$i$i$i10+8>>2]=0|0;
 $this2$i$i$i12 = $__nsn;
 ;HEAP32[$this2$i$i$i12+0>>2]=0|0;HEAP32[$this2$i$i$i12+4>>2]=0|0;HEAP32[$this2$i$i$i12+8>>2]=0|0;
 $this2$i$i$i15 = $__spaces;
 ;HEAP32[$this2$i$i$i15+0>>2]=0|0;HEAP32[$this2$i$i$i15+4>>2]=0|0;HEAP32[$this2$i$i$i15+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(2,($__intl|0),($__loc|0),($tmpcast|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if ($4) {
   $80 = ___cxa_find_matching_catch(-1,-1)|0;
   $81 = tempRet0;
   $82 = $2;$free232 = 187;$lpad$phi$index = $80;$lpad$phi$index8 = $81;
  } else {
   $5 = (($__gbuf) + 400|0);
   $6 = ($__wb);
   $7 = HEAP32[$6>>2]|0;
   HEAP32[$__wn>>2] = $7;
   $8 = ($__b);
   $9 = ($__e);
   $10 = $__pat;
   $11 = $__ct;
   $12 = (($__nsn) + 4|0);
   $13 = (($__nsn) + 8|0);
   $14 = (($__psn) + 4|0);
   $15 = (($__psn) + 8|0);
   $16 = $__flags & 512;
   $17 = ($16|0)!=(0);
   $18 = (($__sym) + 4|0);
   $19 = (($__sym) + 8|0);
   $20 = (($__spaces) + 4|0);
   $21 = (($__spaces) + 8|0);
   $22 = (($10) + 3|0);
   $23 = (($__wb) + 4|0);
   $24 = (($__grp) + 4|0);
   $25 = $5;$26 = $2;$27 = $2;$28 = $__we;$__p$0377 = 0;$__trailing_sign$0379 = 0;$free228372 = 187;
   L3: while(1) {
    $29 = HEAP32[$8>>2]|0;
    $30 = ($29|0)==(0|0);
    do {
     if ($30) {
      $45 = 1;
     } else {
      $31 = (($29) + 12|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($29) + 16|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = ($32|0)==($34|0);
      if ($35) {
       $36 = $29;
       $37 = HEAP32[$36>>2]|0;
       $38 = (($37) + 36|0);
       $39 = HEAP32[$38>>2]|0;
       __THREW__ = 0;
       $40 = (invoke_ii($39|0,($29|0))|0);
       $41 = __THREW__; __THREW__ = 0;
       $42 = $41&1;
       if ($42) {
        $$ph$ph251$ph$ph$ph$ph$ph = $27;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
        label = 25;
        break L3;
       } else {
        $$0$i$i$i$i18 = $40;
       }
      } else {
       $43 = HEAP32[$32>>2]|0;
       $$0$i$i$i$i18 = $43;
      }
      $44 = ($$0$i$i$i$i18|0)==(-1);
      if ($44) {
       HEAP32[$8>>2] = 0;
       $45 = 1;
       break;
      } else {
       $$pre$i$i$i20 = HEAP32[$8>>2]|0;
       $phitmp$i$i$i21 = ($$pre$i$i$i20|0)==(0|0);
       $45 = $phitmp$i$i$i21;
       break;
      }
     }
    } while(0);
    $46 = HEAP32[$9>>2]|0;
    $47 = ($46|0)==(0|0);
    do {
     if ($47) {
      label = 16;
     } else {
      $48 = (($46) + 12|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = (($46) + 16|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($49|0)==($51|0);
      if ($52) {
       $53 = $46;
       $54 = HEAP32[$53>>2]|0;
       $55 = (($54) + 36|0);
       $56 = HEAP32[$55>>2]|0;
       __THREW__ = 0;
       $57 = (invoke_ii($56|0,($46|0))|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        $$ph$ph251$ph$ph$ph$ph$ph = $27;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
        label = 25;
        break L3;
       } else {
        $$0$i$i1$i$i24 = $57;
       }
      } else {
       $60 = HEAP32[$49>>2]|0;
       $$0$i$i1$i$i24 = $60;
      }
      $61 = ($$0$i$i1$i$i24|0)==(-1);
      if ($61) {
       HEAP32[$9>>2] = 0;
       label = 16;
       break;
      } else {
       if ($45) {
        $62 = $46;
        break;
       } else {
        $$lcssa313 = $27;$$lcssa330 = $26;$__trailing_sign$0$lcssa = $__trailing_sign$0379;$free228$lcssa = $free228372;
        label = 322;
        break L3;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($45) {
      $$lcssa313 = $27;$$lcssa330 = $26;$__trailing_sign$0$lcssa = $__trailing_sign$0379;$free228$lcssa = $free228372;
      label = 322;
      break;
     } else {
      $62 = 0;
     }
    }
    $63 = (($10) + ($__p$0377)|0);
    $64 = HEAP8[$63]|0;
    $65 = $64 << 24 >> 24;
    L27: do {
     switch ($65|0) {
     case 4:  {
      $546 = $28;$547 = $27;$548 = $26;$549 = $25;$__ng$0 = 0;$free227 = $free228372;
      L28: while(1) {
       $550 = HEAP32[$8>>2]|0;
       $551 = ($550|0)==(0|0);
       do {
        if ($551) {
         $566 = 1;
        } else {
         $552 = (($550) + 12|0);
         $553 = HEAP32[$552>>2]|0;
         $554 = (($550) + 16|0);
         $555 = HEAP32[$554>>2]|0;
         $556 = ($553|0)==($555|0);
         if ($556) {
          $557 = $550;
          $558 = HEAP32[$557>>2]|0;
          $559 = (($558) + 36|0);
          $560 = HEAP32[$559>>2]|0;
          __THREW__ = 0;
          $561 = (invoke_ii($560|0,($550|0))|0);
          $562 = __THREW__; __THREW__ = 0;
          $563 = $562&1;
          if ($563) {
           $$ph$ph = $547;$free232$ph$ph = $free227;
           label = 20;
           break L3;
          } else {
           $$0$i$i$i$i177 = $561;
          }
         } else {
          $564 = HEAP32[$553>>2]|0;
          $$0$i$i$i$i177 = $564;
         }
         $565 = ($$0$i$i$i$i177|0)==(-1);
         if ($565) {
          HEAP32[$8>>2] = 0;
          $566 = 1;
          break;
         } else {
          $$pre$i$i$i179 = HEAP32[$8>>2]|0;
          $phitmp$i$i$i180 = ($$pre$i$i$i179|0)==(0|0);
          $566 = $phitmp$i$i$i180;
          break;
         }
        }
       } while(0);
       $567 = HEAP32[$9>>2]|0;
       $568 = ($567|0)==(0|0);
       do {
        if ($568) {
         label = 207;
        } else {
         $569 = (($567) + 12|0);
         $570 = HEAP32[$569>>2]|0;
         $571 = (($567) + 16|0);
         $572 = HEAP32[$571>>2]|0;
         $573 = ($570|0)==($572|0);
         if ($573) {
          $574 = $567;
          $575 = HEAP32[$574>>2]|0;
          $576 = (($575) + 36|0);
          $577 = HEAP32[$576>>2]|0;
          __THREW__ = 0;
          $578 = (invoke_ii($577|0,($567|0))|0);
          $579 = __THREW__; __THREW__ = 0;
          $580 = $579&1;
          if ($580) {
           $$ph$ph = $547;$free232$ph$ph = $free227;
           label = 20;
           break L3;
          } else {
           $$0$i$i1$i$i183 = $578;
          }
         } else {
          $581 = HEAP32[$570>>2]|0;
          $$0$i$i1$i$i183 = $581;
         }
         $582 = ($$0$i$i1$i$i183|0)==(-1);
         if ($582) {
          HEAP32[$9>>2] = 0;
          label = 207;
          break;
         } else {
          if ($566) {
           break;
          } else {
           break L28;
          }
         }
        }
       } while(0);
       if ((label|0) == 207) {
        label = 0;
        if ($566) {
         break;
        }
       }
       $583 = HEAP32[$8>>2]|0;
       $584 = (($583) + 12|0);
       $585 = HEAP32[$584>>2]|0;
       $586 = (($583) + 16|0);
       $587 = HEAP32[$586>>2]|0;
       $588 = ($585|0)==($587|0);
       if ($588) {
        $589 = $583;
        $590 = HEAP32[$589>>2]|0;
        $591 = (($590) + 36|0);
        $592 = HEAP32[$591>>2]|0;
        __THREW__ = 0;
        $593 = (invoke_ii($592|0,($583|0))|0);
        $594 = __THREW__; __THREW__ = 0;
        $595 = $594&1;
        if ($595) {
         $$ph$ph = $547;$free232$ph$ph = $free227;
         label = 20;
         break L3;
        } else {
         $$0$i$i173 = $593;
        }
       } else {
        $596 = HEAP32[$585>>2]|0;
        $$0$i$i173 = $596;
       }
       $597 = HEAP32[$11>>2]|0;
       $598 = (($597) + 12|0);
       $599 = HEAP32[$598>>2]|0;
       __THREW__ = 0;
       $600 = (invoke_iiii($599|0,($__ct|0),2048,($$0$i$i173|0))|0);
       $601 = __THREW__; __THREW__ = 0;
       $602 = $601&1;
       if ($602) {
        $$ph$ph = $547;$free232$ph$ph = $free227;
        label = 20;
        break L3;
       }
       if ($600) {
        $603 = HEAP32[$__wn>>2]|0;
        $604 = ($603|0)==($546|0);
        if ($604) {
         $605 = HEAP32[$23>>2]|0;
         $606 = ($605|0)!=(187|0);
         $607 = HEAP32[$6>>2]|0;
         $608 = $546;
         $609 = $607;
         $610 = (($608) - ($609))|0;
         $611 = ($610>>>0)<(2147483647);
         $612 = $610 << 1;
         $$$i159 = $611 ? $612 : -1;
         $613 = $610 >> 2;
         if ($606) {
          $phitmp$i160 = $607;
          $614 = $phitmp$i160;
         } else {
          $614 = 0;
         }
         $615 = (_realloc($614,$$$i159)|0);
         $616 = $615;
         $617 = ($615|0)==(0|0);
         if ($617) {
          __THREW__ = 0;
          invoke_v(7);
          $618 = __THREW__; __THREW__ = 0;
          $619 = $618&1;
          if ($619) {
           $$ph$ph = $547;$free232$ph$ph = $free227;
           label = 20;
           break L3;
          }
         }
         do {
          if ($606) {
           HEAP32[$6>>2] = $616;
           $626 = $616;
          } else {
           $$pr$i162 = HEAP32[$6>>2]|0;
           HEAP32[$6>>2] = $616;
           $620 = ($$pr$i162|0)==(0|0);
           if ($620) {
            $626 = $616;
            break;
           }
           $621 = HEAP32[$23>>2]|0;
           $622 = $$pr$i162;
           __THREW__ = 0;
           invoke_vi($621|0,($622|0));
           $623 = __THREW__; __THREW__ = 0;
           $624 = $623&1;
           if ($624) {
            label = 224;
            break L3;
           }
           $$pre$i163 = HEAP32[$6>>2]|0;
           $626 = $$pre$i163;
          }
         } while(0);
         HEAP32[$23>>2] = 185;
         $627 = $$$i159 >>> 2;
         $628 = (($626) + ($613<<2)|0);
         HEAP32[$__wn>>2] = $628;
         $629 = HEAP32[$6>>2]|0;
         $630 = (($629) + ($627<<2)|0);
         $631 = $628;$632 = $630;
        } else {
         $631 = $603;$632 = $546;
        }
        $633 = (($631) + 4|0);
        HEAP32[$__wn>>2] = $633;
        HEAP32[$631>>2] = $$0$i$i173;
        $634 = (($__ng$0) + 1)|0;
        $668 = $632;$669 = $547;$670 = $548;$671 = $549;$__ng$1 = $634;$free = $free227;
       } else {
        $635 = HEAP8[$this2$i$i$i]|0;
        $636 = $635 & 1;
        $637 = ($636<<24>>24)==(0);
        if ($637) {
         $639 = $635&255;
         $640 = $639 >>> 1;
         $641 = $640;
        } else {
         $638 = HEAP32[$24>>2]|0;
         $641 = $638;
        }
        $642 = ($641|0)==(0);
        $643 = ($__ng$0|0)==(0);
        $or$cond7 = $642 | $643;
        if ($or$cond7) {
         break;
        }
        $644 = HEAP32[$__ts>>2]|0;
        $645 = ($$0$i$i173|0)==($644|0);
        if (!($645)) {
         break;
        }
        $646 = ($548|0)==($549|0);
        if ($646) {
         $647 = ($free227|0)!=(187|0);
         $648 = $548;
         $649 = $547;
         $650 = (($648) - ($649))|0;
         $651 = ($650>>>0)<(2147483647);
         $652 = $650 << 1;
         $$$i149 = $651 ? $652 : -1;
         $653 = $650 >> 2;
         if ($647) {
          $phitmp$i150 = $547;
          $654 = $phitmp$i150;
         } else {
          $654 = 0;
         }
         $655 = (_realloc($654,$$$i149)|0);
         $656 = $655;
         $657 = ($655|0)==(0|0);
         if ($657) {
          __THREW__ = 0;
          invoke_v(7);
          $658 = __THREW__; __THREW__ = 0;
          $659 = $658&1;
          if ($659) {
           $$ph$ph = $547;$free232$ph$ph = $free227;
           label = 20;
           break L3;
          }
         }
         $660 = ($547|0)==(0|0);
         $or$cond247 = $647 | $660;
         if (!($or$cond247)) {
         }
         $661 = $$$i149 >>> 2;
         $662 = (($656) + ($653<<2)|0);
         $663 = (($656) + ($661<<2)|0);
         $664 = $656;$665 = $662;$666 = $663;$free226 = 185;
        } else {
         $664 = $547;$665 = $548;$666 = $549;$free226 = $free227;
        }
        $667 = (($665) + 4|0);
        HEAP32[$665>>2] = $__ng$0;
        $668 = $546;$669 = $664;$670 = $667;$671 = $666;$__ng$1 = 0;$free = $free226;
       }
       $672 = HEAP32[$8>>2]|0;
       $673 = (($672) + 12|0);
       $674 = HEAP32[$673>>2]|0;
       $675 = (($672) + 16|0);
       $676 = HEAP32[$675>>2]|0;
       $677 = ($674|0)==($676|0);
       if ($677) {
        $678 = $672;
        $679 = HEAP32[$678>>2]|0;
        $680 = (($679) + 40|0);
        $681 = HEAP32[$680>>2]|0;
        __THREW__ = 0;
        (invoke_ii($681|0,($672|0))|0);
        $682 = __THREW__; __THREW__ = 0;
        $683 = $682&1;
        if ($683) {
         $$ph$ph = $669;$free232$ph$ph = $free;
         label = 20;
         break L3;
        } else {
         $546 = $668;$547 = $669;$548 = $670;$549 = $671;$__ng$0 = $__ng$1;$free227 = $free;
         continue;
        }
       } else {
        $684 = (($674) + 4|0);
        HEAP32[$673>>2] = $684;
        $546 = $668;$547 = $669;$548 = $670;$549 = $671;$__ng$0 = $__ng$1;$free227 = $free;
        continue;
       }
      }
      $685 = ($547|0)==($548|0);
      $686 = ($__ng$0|0)==(0);
      $or$cond8 = $685 | $686;
      if ($or$cond8) {
       $709 = $547;$710 = $548;$711 = $549;$free230 = $free227;
      } else {
       $687 = ($548|0)==($549|0);
       if ($687) {
        $688 = ($free227|0)!=(187|0);
        $689 = $548;
        $690 = $547;
        $691 = (($689) - ($690))|0;
        $692 = ($691>>>0)<(2147483647);
        $693 = $691 << 1;
        $$$i138 = $692 ? $693 : -1;
        $694 = $691 >> 2;
        if ($688) {
         $phitmp$i139 = $547;
         $695 = $phitmp$i139;
        } else {
         $695 = 0;
        }
        $696 = (_realloc($695,$$$i138)|0);
        $697 = $696;
        $698 = ($696|0)==(0|0);
        if ($698) {
         __THREW__ = 0;
         invoke_v(7);
         $699 = __THREW__; __THREW__ = 0;
         $700 = $699&1;
         if ($700) {
          $$ph$ph251$ph$ph$ph$ph$ph = $547;$free232$ph$ph250$ph$ph$ph$ph$ph = $free227;
          label = 25;
          break L3;
         }
        }
        $701 = ($547|0)==(0|0);
        $or$cond248 = $688 | $701;
        if (!($or$cond248)) {
        }
        $702 = $$$i138 >>> 2;
        $703 = (($697) + ($694<<2)|0);
        $704 = (($697) + ($702<<2)|0);
        $705 = $697;$706 = $703;$707 = $704;$free231 = 185;
       } else {
        $705 = $547;$706 = $548;$707 = $549;$free231 = $free227;
       }
       $708 = (($706) + 4|0);
       HEAP32[$706>>2] = $__ng$0;
       $709 = $705;$710 = $708;$711 = $707;$free230 = $free231;
      }
      $712 = HEAP32[$__fd>>2]|0;
      $713 = ($712|0)>(0);
      if ($713) {
       $714 = HEAP32[$8>>2]|0;
       $715 = ($714|0)==(0|0);
       do {
        if ($715) {
         $730 = 1;
        } else {
         $716 = (($714) + 12|0);
         $717 = HEAP32[$716>>2]|0;
         $718 = (($714) + 16|0);
         $719 = HEAP32[$718>>2]|0;
         $720 = ($717|0)==($719|0);
         if ($720) {
          $721 = $714;
          $722 = HEAP32[$721>>2]|0;
          $723 = (($722) + 36|0);
          $724 = HEAP32[$723>>2]|0;
          __THREW__ = 0;
          $725 = (invoke_ii($724|0,($714|0))|0);
          $726 = __THREW__; __THREW__ = 0;
          $727 = $726&1;
          if ($727) {
           $$ph$ph251$ph$ph$ph$ph$ph = $709;$free232$ph$ph250$ph$ph$ph$ph$ph = $free230;
           label = 25;
           break L3;
          } else {
           $$0$i$i$i$i123 = $725;
          }
         } else {
          $728 = HEAP32[$717>>2]|0;
          $$0$i$i$i$i123 = $728;
         }
         $729 = ($$0$i$i$i$i123|0)==(-1);
         if ($729) {
          HEAP32[$8>>2] = 0;
          $730 = 1;
          break;
         } else {
          $$pre$i$i$i125 = HEAP32[$8>>2]|0;
          $phitmp$i$i$i126 = ($$pre$i$i$i125|0)==(0|0);
          $730 = $phitmp$i$i$i126;
          break;
         }
        }
       } while(0);
       $731 = HEAP32[$9>>2]|0;
       $732 = ($731|0)==(0|0);
       do {
        if ($732) {
         label = 268;
        } else {
         $733 = (($731) + 12|0);
         $734 = HEAP32[$733>>2]|0;
         $735 = (($731) + 16|0);
         $736 = HEAP32[$735>>2]|0;
         $737 = ($734|0)==($736|0);
         if ($737) {
          $738 = $731;
          $739 = HEAP32[$738>>2]|0;
          $740 = (($739) + 36|0);
          $741 = HEAP32[$740>>2]|0;
          __THREW__ = 0;
          $742 = (invoke_ii($741|0,($731|0))|0);
          $743 = __THREW__; __THREW__ = 0;
          $744 = $743&1;
          if ($744) {
           $$ph$ph251$ph$ph$ph$ph$ph = $709;$free232$ph$ph250$ph$ph$ph$ph$ph = $free230;
           label = 25;
           break L3;
          } else {
           $$0$i$i1$i$i129 = $742;
          }
         } else {
          $745 = HEAP32[$734>>2]|0;
          $$0$i$i1$i$i129 = $745;
         }
         $746 = ($$0$i$i1$i$i129|0)==(-1);
         if ($746) {
          HEAP32[$9>>2] = 0;
          label = 268;
          break;
         } else {
          if ($730) {
           $747 = $731;
           break;
          } else {
           label = 274;
           break L3;
          }
         }
        }
       } while(0);
       if ((label|0) == 268) {
        label = 0;
        if ($730) {
         label = 274;
         break L3;
        } else {
         $747 = 0;
        }
       }
       $748 = HEAP32[$8>>2]|0;
       $749 = (($748) + 12|0);
       $750 = HEAP32[$749>>2]|0;
       $751 = (($748) + 16|0);
       $752 = HEAP32[$751>>2]|0;
       $753 = ($750|0)==($752|0);
       if ($753) {
        $754 = $748;
        $755 = HEAP32[$754>>2]|0;
        $756 = (($755) + 36|0);
        $757 = HEAP32[$756>>2]|0;
        __THREW__ = 0;
        $758 = (invoke_ii($757|0,($748|0))|0);
        $759 = __THREW__; __THREW__ = 0;
        $760 = $759&1;
        if ($760) {
         $$ph$ph251$ph$ph$ph$ph$ph = $709;$free232$ph$ph250$ph$ph$ph$ph$ph = $free230;
         label = 25;
         break L3;
        } else {
         $$0$i$i117 = $758;
        }
       } else {
        $761 = HEAP32[$750>>2]|0;
        $$0$i$i117 = $761;
       }
       $762 = HEAP32[$__dp>>2]|0;
       $763 = ($$0$i$i117|0)==($762|0);
       if (!($763)) {
        label = 274;
        break L3;
       }
       $766 = HEAP32[$8>>2]|0;
       $767 = (($766) + 12|0);
       $768 = HEAP32[$767>>2]|0;
       $769 = (($766) + 16|0);
       $770 = HEAP32[$769>>2]|0;
       $771 = ($768|0)==($770|0);
       if ($771) {
        $772 = $766;
        $773 = HEAP32[$772>>2]|0;
        $774 = (($773) + 40|0);
        $775 = HEAP32[$774>>2]|0;
        __THREW__ = 0;
        (invoke_ii($775|0,($766|0))|0);
        $776 = __THREW__; __THREW__ = 0;
        $777 = $776&1;
        if ($777) {
         $$ph$ph251$ph$ph$ph$ph$ph = $709;$free232$ph$ph250$ph$ph$ph$ph$ph = $free230;
         label = 25;
         break L3;
        } else {
         $$pre$i3$i$i97 = $747;$779 = $712;$780 = $747;$781 = $546;
        }
       } else {
        $778 = (($768) + 4|0);
        HEAP32[$767>>2] = $778;
        $$pre$i3$i$i97 = $747;$779 = $712;$780 = $747;$781 = $546;
       }
       while(1) {
        $782 = HEAP32[$8>>2]|0;
        $783 = ($782|0)==(0|0);
        do {
         if ($783) {
          $798 = 1;
         } else {
          $784 = (($782) + 12|0);
          $785 = HEAP32[$784>>2]|0;
          $786 = (($782) + 16|0);
          $787 = HEAP32[$786>>2]|0;
          $788 = ($785|0)==($787|0);
          if ($788) {
           $789 = $782;
           $790 = HEAP32[$789>>2]|0;
           $791 = (($790) + 36|0);
           $792 = HEAP32[$791>>2]|0;
           __THREW__ = 0;
           $793 = (invoke_ii($792|0,($782|0))|0);
           $794 = __THREW__; __THREW__ = 0;
           $795 = $794&1;
           if ($795) {
            label = 21;
            break L3;
           } else {
            $$0$i$i$i$i89 = $793;
           }
          } else {
           $796 = HEAP32[$785>>2]|0;
           $$0$i$i$i$i89 = $796;
          }
          $797 = ($$0$i$i$i$i89|0)==(-1);
          if ($797) {
           HEAP32[$8>>2] = 0;
           $798 = 1;
           break;
          } else {
           $$pre$i$i$i91 = HEAP32[$8>>2]|0;
           $phitmp$i$i$i92 = ($$pre$i$i$i91|0)==(0|0);
           $798 = $phitmp$i$i$i92;
           break;
          }
         }
        } while(0);
        $799 = ($780|0)==(0|0);
        do {
         if ($799) {
          $$pre$i3$i$i97459$ph = $$pre$i3$i$i97;
          label = 291;
         } else {
          $800 = (($780) + 12|0);
          $801 = HEAP32[$800>>2]|0;
          $802 = (($780) + 16|0);
          $803 = HEAP32[$802>>2]|0;
          $804 = ($801|0)==($803|0);
          if ($804) {
           $805 = $780;
           $806 = HEAP32[$805>>2]|0;
           $807 = (($806) + 36|0);
           $808 = HEAP32[$807>>2]|0;
           __THREW__ = 0;
           $809 = (invoke_ii($808|0,($780|0))|0);
           $810 = __THREW__; __THREW__ = 0;
           $811 = $810&1;
           if ($811) {
            label = 21;
            break L3;
           } else {
            $$0$i$i1$i$i95 = $809;
           }
          } else {
           $812 = HEAP32[$801>>2]|0;
           $$0$i$i1$i$i95 = $812;
          }
          $813 = ($$0$i$i1$i$i95|0)==(-1);
          if ($813) {
           HEAP32[$9>>2] = 0;
           $$pre$i3$i$i97459$ph = 0;
           label = 291;
           break;
          } else {
           $phitmp$i4$i$i98 = ($$pre$i3$i$i97|0)==(0|0);
           $tmp$i$i100 = $798 ^ $phitmp$i4$i$i98;
           if ($tmp$i$i100) {
            $$pre$i3$i$i97459475 = $$pre$i3$i$i97;$814 = $$pre$i3$i$i97;
            break;
           } else {
            label = 298;
            break L3;
           }
          }
         }
        } while(0);
        if ((label|0) == 291) {
         label = 0;
         if ($798) {
          label = 298;
          break L3;
         } else {
          $$pre$i3$i$i97459475 = $$pre$i3$i$i97459$ph;$814 = 0;
         }
        }
        $815 = HEAP32[$8>>2]|0;
        $816 = (($815) + 12|0);
        $817 = HEAP32[$816>>2]|0;
        $818 = (($815) + 16|0);
        $819 = HEAP32[$818>>2]|0;
        $820 = ($817|0)==($819|0);
        if ($820) {
         $821 = $815;
         $822 = HEAP32[$821>>2]|0;
         $823 = (($822) + 36|0);
         $824 = HEAP32[$823>>2]|0;
         __THREW__ = 0;
         $825 = (invoke_ii($824|0,($815|0))|0);
         $826 = __THREW__; __THREW__ = 0;
         $827 = $826&1;
         if ($827) {
          label = 21;
          break L3;
         } else {
          $$0$i$i83 = $825;
         }
        } else {
         $828 = HEAP32[$817>>2]|0;
         $$0$i$i83 = $828;
        }
        $829 = HEAP32[$11>>2]|0;
        $830 = (($829) + 12|0);
        $831 = HEAP32[$830>>2]|0;
        __THREW__ = 0;
        $832 = (invoke_iiii($831|0,($__ct|0),2048,($$0$i$i83|0))|0);
        $833 = __THREW__; __THREW__ = 0;
        $834 = $833&1;
        if ($834) {
         label = 21;
         break L3;
        }
        if (!($832)) {
         label = 298;
         break L3;
        }
        $837 = HEAP32[$__wn>>2]|0;
        $838 = ($837|0)==($781|0);
        if ($838) {
         $839 = HEAP32[$23>>2]|0;
         $840 = ($839|0)!=(187|0);
         $841 = HEAP32[$6>>2]|0;
         $842 = $781;
         $843 = $841;
         $844 = (($842) - ($843))|0;
         $845 = ($844>>>0)<(2147483647);
         $846 = $844 << 1;
         $$$i = $845 ? $846 : -1;
         $847 = $844 >> 2;
         if ($840) {
          $phitmp$i = $841;
          $848 = $phitmp$i;
         } else {
          $848 = 0;
         }
         $849 = (_realloc($848,$$$i)|0);
         $850 = $849;
         $851 = ($849|0)==(0|0);
         if ($851) {
          __THREW__ = 0;
          invoke_v(7);
          $852 = __THREW__; __THREW__ = 0;
          $853 = $852&1;
          if ($853) {
           label = 21;
           break L3;
          }
         }
         do {
          if ($840) {
           HEAP32[$6>>2] = $850;
           $860 = $850;
          } else {
           $$pr$i = HEAP32[$6>>2]|0;
           HEAP32[$6>>2] = $850;
           $854 = ($$pr$i|0)==(0|0);
           if ($854) {
            $860 = $850;
            break;
           }
           $855 = HEAP32[$23>>2]|0;
           $856 = $$pr$i;
           __THREW__ = 0;
           invoke_vi($855|0,($856|0));
           $857 = __THREW__; __THREW__ = 0;
           $858 = $857&1;
           if ($858) {
            label = 309;
            break L3;
           }
           $$pre$i = HEAP32[$6>>2]|0;
           $860 = $$pre$i;
          }
         } while(0);
         HEAP32[$23>>2] = 185;
         $861 = $$$i >>> 2;
         $862 = (($860) + ($847<<2)|0);
         HEAP32[$__wn>>2] = $862;
         $863 = HEAP32[$6>>2]|0;
         $864 = (($863) + ($861<<2)|0);
         $865 = $862;$866 = $864;
        } else {
         $865 = $837;$866 = $781;
        }
        $867 = HEAP32[$8>>2]|0;
        $868 = (($867) + 12|0);
        $869 = HEAP32[$868>>2]|0;
        $870 = (($867) + 16|0);
        $871 = HEAP32[$870>>2]|0;
        $872 = ($869|0)==($871|0);
        if ($872) {
         $873 = $867;
         $874 = HEAP32[$873>>2]|0;
         $875 = (($874) + 36|0);
         $876 = HEAP32[$875>>2]|0;
         __THREW__ = 0;
         $877 = (invoke_ii($876|0,($867|0))|0);
         $878 = __THREW__; __THREW__ = 0;
         $879 = $878&1;
         if ($879) {
          label = 21;
          break L3;
         }
         $$pre470 = HEAP32[$__wn>>2]|0;
         $$0$i$i64 = $877;$881 = $$pre470;
        } else {
         $880 = HEAP32[$869>>2]|0;
         $$0$i$i64 = $880;$881 = $865;
        }
        $882 = (($881) + 4|0);
        HEAP32[$__wn>>2] = $882;
        HEAP32[$881>>2] = $$0$i$i64;
        $883 = (($779) + -1)|0;
        HEAP32[$__fd>>2] = $883;
        $884 = HEAP32[$8>>2]|0;
        $885 = (($884) + 12|0);
        $886 = HEAP32[$885>>2]|0;
        $887 = (($884) + 16|0);
        $888 = HEAP32[$887>>2]|0;
        $889 = ($886|0)==($888|0);
        if ($889) {
         $890 = $884;
         $891 = HEAP32[$890>>2]|0;
         $892 = (($891) + 40|0);
         $893 = HEAP32[$892>>2]|0;
         __THREW__ = 0;
         (invoke_ii($893|0,($884|0))|0);
         $894 = __THREW__; __THREW__ = 0;
         $895 = $894&1;
         if ($895) {
          label = 21;
          break L3;
         }
        } else {
         $897 = (($886) + 4|0);
         HEAP32[$885>>2] = $897;
        }
        $896 = ($883|0)>(0);
        if ($896) {
         $$pre$i3$i$i97 = $$pre$i3$i$i97459475;$779 = $883;$780 = $814;$781 = $866;
        } else {
         $898 = $866;
         break;
        }
       }
      } else {
       $898 = $546;
      }
      $899 = HEAP32[$__wn>>2]|0;
      $900 = HEAP32[$6>>2]|0;
      $901 = ($899|0)==($900|0);
      if ($901) {
       label = 320;
       break L3;
      } else {
       $904 = $898;$905 = $709;$906 = $710;$907 = $711;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free230;
      }
      break;
     }
     case 1:  {
      $cond = ($__p$0377|0)==(3);
      if ($cond) {
       $$lcssa313 = $27;$$lcssa330 = $26;$__trailing_sign$0$lcssa = $__trailing_sign$0379;$free228$lcssa = $free228372;
       label = 322;
       break L3;
      }
      $88 = HEAP32[$8>>2]|0;
      $89 = (($88) + 12|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = (($88) + 16|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = ($90|0)==($92|0);
      if ($93) {
       $94 = $88;
       $95 = HEAP32[$94>>2]|0;
       $96 = (($95) + 36|0);
       $97 = HEAP32[$96>>2]|0;
       __THREW__ = 0;
       $98 = (invoke_ii($97|0,($88|0))|0);
       $99 = __THREW__; __THREW__ = 0;
       $100 = $99&1;
       if ($100) {
        $$ph$ph251$ph$ph$ph$ph$ph = $27;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
        label = 25;
        break L3;
       } else {
        $$0$i$i33 = $98;
       }
      } else {
       $101 = HEAP32[$90>>2]|0;
       $$0$i$i33 = $101;
      }
      $102 = HEAP32[$11>>2]|0;
      $103 = (($102) + 12|0);
      $104 = HEAP32[$103>>2]|0;
      __THREW__ = 0;
      $105 = (invoke_iiii($104|0,($__ct|0),8192,($$0$i$i33|0))|0);
      $106 = __THREW__; __THREW__ = 0;
      $107 = $106&1;
      if ($107) {
       $$ph$ph251$ph$ph$ph$ph$ph = $27;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
       label = 25;
       break L3;
      }
      if (!($105)) {
       label = 41;
       break L3;
      }
      $108 = HEAP32[$8>>2]|0;
      $109 = (($108) + 12|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = (($108) + 16|0);
      $112 = HEAP32[$111>>2]|0;
      $113 = ($110|0)==($112|0);
      if ($113) {
       $114 = $108;
       $115 = HEAP32[$114>>2]|0;
       $116 = (($115) + 40|0);
       $117 = HEAP32[$116>>2]|0;
       __THREW__ = 0;
       $118 = (invoke_ii($117|0,($108|0))|0);
       $119 = __THREW__; __THREW__ = 0;
       $120 = $119&1;
       if ($120) {
        $$ph$ph251$ph$ph$ph$ph$ph = $27;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
        label = 25;
        break L3;
       } else {
        $$0$i$i37 = $118;
       }
      } else {
       $121 = (($110) + 4|0);
       HEAP32[$109>>2] = $121;
       $122 = HEAP32[$110>>2]|0;
       $$0$i$i37 = $122;
      }
      __THREW__ = 0;
      invoke_vii(78,($__spaces|0),($$0$i$i37|0));
      $123 = __THREW__; __THREW__ = 0;
      $124 = $123&1;
      if ($124) {
       $$ph$ph251$ph$ph$ph$ph$ph = $27;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
       label = 25;
       break L3;
      } else {
       label = 42;
      }
      break;
     }
     case 0:  {
      label = 42;
      break;
     }
     case 3:  {
      $199 = HEAP8[$this2$i$i$i10]|0;
      $200 = $199 & 1;
      $201 = ($200<<24>>24)==(0);
      if ($201) {
       $203 = $199&255;
       $204 = $203 >>> 1;
       $205 = $204;
      } else {
       $202 = HEAP32[$14>>2]|0;
       $205 = $202;
      }
      $206 = HEAP8[$this2$i$i$i12]|0;
      $207 = $206 & 1;
      $208 = ($207<<24>>24)==(0);
      if ($208) {
       $210 = $206&255;
       $211 = $210 >>> 1;
       $212 = $211;
      } else {
       $209 = HEAP32[$12>>2]|0;
       $212 = $209;
      }
      $213 = (0 - ($212))|0;
      $214 = ($205|0)==($213|0);
      if ($214) {
       $904 = $28;$905 = $27;$906 = $26;$907 = $25;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
       break L27;
      }
      if ($201) {
       $216 = $199&255;
       $217 = $216 >>> 1;
       $218 = $217;
      } else {
       $215 = HEAP32[$14>>2]|0;
       $218 = $215;
      }
      $219 = ($218|0)==(0);
      do {
       if (!($219)) {
        if ($208) {
         $221 = $206&255;
         $222 = $221 >>> 1;
         $223 = $222;
        } else {
         $220 = HEAP32[$12>>2]|0;
         $223 = $220;
        }
        $224 = ($223|0)==(0);
        if ($224) {
         break;
        }
        $306 = HEAP32[$8>>2]|0;
        $307 = (($306) + 12|0);
        $308 = HEAP32[$307>>2]|0;
        $309 = (($306) + 16|0);
        $310 = HEAP32[$309>>2]|0;
        $311 = ($308|0)==($310|0);
        if ($311) {
         $312 = $306;
         $313 = HEAP32[$312>>2]|0;
         $314 = (($313) + 36|0);
         $315 = HEAP32[$314>>2]|0;
         __THREW__ = 0;
         $316 = (invoke_ii($315|0,($306|0))|0);
         $317 = __THREW__; __THREW__ = 0;
         $318 = $317&1;
         if ($318) {
          $$ph$ph251$ph$ph$ph$ph$ph = $27;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
          label = 25;
          break L3;
         }
         $$pre467 = HEAP8[$this2$i$i$i10]|0;
         $$0$i$i104 = $316;$320 = $$pre467;
        } else {
         $319 = HEAP32[$308>>2]|0;
         $$0$i$i104 = $319;$320 = $199;
        }
        $321 = $320 & 1;
        $322 = ($321<<24>>24)==(0);
        $323 = HEAP32[$15>>2]|0;
        $$478 = $322 ? $14 : $323;
        $324 = HEAP32[$$478>>2]|0;
        $325 = ($$0$i$i104|0)==($324|0);
        $326 = HEAP32[$8>>2]|0;
        $327 = (($326) + 12|0);
        $328 = HEAP32[$327>>2]|0;
        $329 = (($326) + 16|0);
        $330 = HEAP32[$329>>2]|0;
        $331 = ($328|0)==($330|0);
        if ($325) {
         if ($331) {
          $332 = $326;
          $333 = HEAP32[$332>>2]|0;
          $334 = (($333) + 40|0);
          $335 = HEAP32[$334>>2]|0;
          __THREW__ = 0;
          (invoke_ii($335|0,($326|0))|0);
          $336 = __THREW__; __THREW__ = 0;
          $337 = $336&1;
          if ($337) {
           $$ph$ph251$ph$ph$ph$ph$ph = $27;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
           label = 25;
           break L3;
          }
         } else {
          $338 = (($328) + 4|0);
          HEAP32[$327>>2] = $338;
         }
         $339 = HEAP8[$this2$i$i$i10]|0;
         $340 = $339 & 1;
         $341 = ($340<<24>>24)==(0);
         if ($341) {
          $343 = $339&255;
          $344 = $343 >>> 1;
          $345 = $344;
         } else {
          $342 = HEAP32[$14>>2]|0;
          $345 = $342;
         }
         $346 = ($345>>>0)>(1);
         $__psn$__trailing_sign$05 = $346 ? $__psn : $__trailing_sign$0379;
         $904 = $28;$905 = $27;$906 = $26;$907 = $25;$__trailing_sign$1 = $__psn$__trailing_sign$05;$free229 = $free228372;
         break L27;
        }
        if ($331) {
         $347 = $326;
         $348 = HEAP32[$347>>2]|0;
         $349 = (($348) + 36|0);
         $350 = HEAP32[$349>>2]|0;
         __THREW__ = 0;
         $351 = (invoke_ii($350|0,($326|0))|0);
         $352 = __THREW__; __THREW__ = 0;
         $353 = $352&1;
         if ($353) {
          $$ph$ph251$ph$ph$ph$ph$ph = $27;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
          label = 25;
          break L3;
         } else {
          $$0$i$i113 = $351;
         }
        } else {
         $354 = HEAP32[$328>>2]|0;
         $$0$i$i113 = $354;
        }
        $355 = HEAP8[$this2$i$i$i12]|0;
        $356 = $355 & 1;
        $357 = ($356<<24>>24)==(0);
        $358 = HEAP32[$13>>2]|0;
        $$479 = $357 ? $12 : $358;
        $359 = HEAP32[$$479>>2]|0;
        $360 = ($$0$i$i113|0)==($359|0);
        if (!($360)) {
         label = 134;
         break L3;
        }
        $361 = HEAP32[$8>>2]|0;
        $362 = (($361) + 12|0);
        $363 = HEAP32[$362>>2]|0;
        $364 = (($361) + 16|0);
        $365 = HEAP32[$364>>2]|0;
        $366 = ($363|0)==($365|0);
        if ($366) {
         $367 = $361;
         $368 = HEAP32[$367>>2]|0;
         $369 = (($368) + 40|0);
         $370 = HEAP32[$369>>2]|0;
         __THREW__ = 0;
         (invoke_ii($370|0,($361|0))|0);
         $371 = __THREW__; __THREW__ = 0;
         $372 = $371&1;
         if ($372) {
          $$ph$ph251$ph$ph$ph$ph$ph = $27;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
          label = 25;
          break L3;
         }
        } else {
         $373 = (($363) + 4|0);
         HEAP32[$362>>2] = $373;
        }
        HEAP8[$__neg] = 1;
        $374 = HEAP8[$this2$i$i$i12]|0;
        $375 = $374 & 1;
        $376 = ($375<<24>>24)==(0);
        if ($376) {
         $378 = $374&255;
         $379 = $378 >>> 1;
         $380 = $379;
        } else {
         $377 = HEAP32[$12>>2]|0;
         $380 = $377;
        }
        $381 = ($380>>>0)>(1);
        $__nsn$__trailing_sign$06 = $381 ? $__nsn : $__trailing_sign$0379;
        $904 = $28;$905 = $27;$906 = $26;$907 = $25;$__trailing_sign$1 = $__nsn$__trailing_sign$06;$free229 = $free228372;
        break L27;
       }
      } while(0);
      if ($201) {
       $226 = $199&255;
       $227 = $226 >>> 1;
       $228 = $227;
      } else {
       $225 = HEAP32[$14>>2]|0;
       $228 = $225;
      }
      $229 = ($228|0)==(0);
      $230 = HEAP32[$8>>2]|0;
      $231 = (($230) + 12|0);
      $232 = HEAP32[$231>>2]|0;
      $233 = (($230) + 16|0);
      $234 = HEAP32[$233>>2]|0;
      $235 = ($232|0)==($234|0);
      if ($229) {
       if ($235) {
        $271 = $230;
        $272 = HEAP32[$271>>2]|0;
        $273 = (($272) + 36|0);
        $274 = HEAP32[$273>>2]|0;
        __THREW__ = 0;
        $275 = (invoke_ii($274|0,($230|0))|0);
        $276 = __THREW__; __THREW__ = 0;
        $277 = $276&1;
        if ($277) {
         $$ph$ph251$ph$ph$ph$ph$ph = $27;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
         label = 25;
         break L3;
        }
        $$pre465 = HEAP8[$this2$i$i$i12]|0;
        $$0$i$i79 = $275;$279 = $$pre465;
       } else {
        $278 = HEAP32[$232>>2]|0;
        $$0$i$i79 = $278;$279 = $206;
       }
       $280 = $279 & 1;
       $281 = ($280<<24>>24)==(0);
       $282 = HEAP32[$13>>2]|0;
       $$477 = $281 ? $12 : $282;
       $283 = HEAP32[$$477>>2]|0;
       $284 = ($$0$i$i79|0)==($283|0);
       if (!($284)) {
        $904 = $28;$905 = $27;$906 = $26;$907 = $25;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
        break L27;
       }
       $285 = HEAP32[$8>>2]|0;
       $286 = (($285) + 12|0);
       $287 = HEAP32[$286>>2]|0;
       $288 = (($285) + 16|0);
       $289 = HEAP32[$288>>2]|0;
       $290 = ($287|0)==($289|0);
       if ($290) {
        $291 = $285;
        $292 = HEAP32[$291>>2]|0;
        $293 = (($292) + 40|0);
        $294 = HEAP32[$293>>2]|0;
        __THREW__ = 0;
        (invoke_ii($294|0,($285|0))|0);
        $295 = __THREW__; __THREW__ = 0;
        $296 = $295&1;
        if ($296) {
         $$ph$ph251$ph$ph$ph$ph$ph = $27;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
         label = 25;
         break L3;
        }
       } else {
        $297 = (($287) + 4|0);
        HEAP32[$286>>2] = $297;
       }
       HEAP8[$__neg] = 1;
       $298 = HEAP8[$this2$i$i$i12]|0;
       $299 = $298 & 1;
       $300 = ($299<<24>>24)==(0);
       if ($300) {
        $302 = $298&255;
        $303 = $302 >>> 1;
        $304 = $303;
       } else {
        $301 = HEAP32[$12>>2]|0;
        $304 = $301;
       }
       $305 = ($304>>>0)>(1);
       $__nsn$__trailing_sign$0 = $305 ? $__nsn : $__trailing_sign$0379;
       $904 = $28;$905 = $27;$906 = $26;$907 = $25;$__trailing_sign$1 = $__nsn$__trailing_sign$0;$free229 = $free228372;
       break L27;
      }
      if ($235) {
       $236 = $230;
       $237 = HEAP32[$236>>2]|0;
       $238 = (($237) + 36|0);
       $239 = HEAP32[$238>>2]|0;
       __THREW__ = 0;
       $240 = (invoke_ii($239|0,($230|0))|0);
       $241 = __THREW__; __THREW__ = 0;
       $242 = $241&1;
       if ($242) {
        $$ph$ph251$ph$ph$ph$ph$ph = $27;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
        label = 25;
        break L3;
       }
       $$pre466 = HEAP8[$this2$i$i$i10]|0;
       $$0$i$i71 = $240;$244 = $$pre466;
      } else {
       $243 = HEAP32[$232>>2]|0;
       $$0$i$i71 = $243;$244 = $199;
      }
      $245 = $244 & 1;
      $246 = ($245<<24>>24)==(0);
      $247 = HEAP32[$15>>2]|0;
      $$ = $246 ? $14 : $247;
      $248 = HEAP32[$$>>2]|0;
      $249 = ($$0$i$i71|0)==($248|0);
      if (!($249)) {
       HEAP8[$__neg] = 1;
       $904 = $28;$905 = $27;$906 = $26;$907 = $25;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
       break L27;
      }
      $250 = HEAP32[$8>>2]|0;
      $251 = (($250) + 12|0);
      $252 = HEAP32[$251>>2]|0;
      $253 = (($250) + 16|0);
      $254 = HEAP32[$253>>2]|0;
      $255 = ($252|0)==($254|0);
      if ($255) {
       $256 = $250;
       $257 = HEAP32[$256>>2]|0;
       $258 = (($257) + 40|0);
       $259 = HEAP32[$258>>2]|0;
       __THREW__ = 0;
       (invoke_ii($259|0,($250|0))|0);
       $260 = __THREW__; __THREW__ = 0;
       $261 = $260&1;
       if ($261) {
        $$ph$ph251$ph$ph$ph$ph$ph = $27;$free232$ph$ph250$ph$ph$ph$ph$ph = $free228372;
        label = 25;
        break L3;
       }
      } else {
       $262 = (($252) + 4|0);
       HEAP32[$251>>2] = $262;
      }
      $263 = HEAP8[$this2$i$i$i10]|0;
      $264 = $263 & 1;
      $265 = ($264<<24>>24)==(0);
      if ($265) {
       $267 = $263&255;
       $268 = $267 >>> 1;
       $269 = $268;
      } else {
       $266 = HEAP32[$14>>2]|0;
       $269 = $266;
      }
      $270 = ($269>>>0)>(1);
      $__psn$__trailing_sign$0 = $270 ? $__psn : $__trailing_sign$0379;
      $904 = $28;$905 = $27;$906 = $26;$907 = $25;$__trailing_sign$1 = $__psn$__trailing_sign$0;$free229 = $free228372;
      break;
     }
     case 2:  {
      $384 = ($__trailing_sign$0379|0)!=(0|0);
      $385 = ($__p$0377>>>0)<(2);
      $or$cond = $384 | $385;
      if (!($or$cond)) {
       $386 = ($__p$0377|0)==(2);
       if ($386) {
        $387 = HEAP8[$22]|0;
        $388 = ($387<<24>>24)!=(0);
        $389 = $388;
       } else {
        $389 = 0;
       }
       $brmerge = $17 | $389;
       if (!($brmerge)) {
        $904 = $28;$905 = $27;$906 = $26;$907 = $25;$__trailing_sign$1 = 0;$free229 = $free228372;
        break L27;
       }
      }
      $390 = HEAP8[$this2$i$i$i9]|0;
      $391 = $390 & 1;
      $392 = ($391<<24>>24)==(0);
      $393 = HEAP32[$19>>2]|0;
      $$480 = $392 ? $18 : $393;
      $394 = ($__p$0377|0)==(0);
      L307: do {
       if ($394) {
        $$pre$i3$i$i200 = $62;$457 = $62;$458 = $390;$459 = $$480;
       } else {
        $395 = (($__p$0377) + -1)|0;
        $396 = (($10) + ($395)|0);
        $397 = HEAP8[$396]|0;
        $switch = ($397&255)<(2);
        if ($switch) {
         $398 = $390;$399 = $$480;
        } else {
         $$pre$i3$i$i200 = $62;$457 = $62;$458 = $390;$459 = $$480;
         break;
        }
        while(1) {
         $400 = $398 & 1;
         $401 = ($400<<24>>24)==(0);
         if ($401) {
          $404 = $398&255;
          $405 = $404 >>> 1;
          $406 = $18;$407 = $405;
         } else {
          $402 = HEAP32[$19>>2]|0;
          $403 = HEAP32[$18>>2]|0;
          $406 = $402;$407 = $403;
         }
         $408 = (($406) + ($407<<2)|0);
         $409 = ($399|0)==($408|0);
         if ($409) {
          $418 = $398;
          break;
         }
         $410 = HEAP32[$399>>2]|0;
         $411 = HEAP32[$11>>2]|0;
         $412 = (($411) + 12|0);
         $413 = HEAP32[$412>>2]|0;
         __THREW__ = 0;
         $414 = (invoke_iiii($413|0,($__ct|0),8192,($410|0))|0);
         $415 = __THREW__; __THREW__ = 0;
         $416 = $415&1;
         if ($416) {
          label = 22;
          break L3;
         }
         if (!($414)) {
          label = 148;
          break;
         }
         $417 = (($399) + 4|0);
         $$pre468 = HEAP8[$this2$i$i$i9]|0;
         $398 = $$pre468;$399 = $417;
        }
        if ((label|0) == 148) {
         label = 0;
         $$pre469 = HEAP8[$this2$i$i$i9]|0;
         $418 = $$pre469;
        }
        $419 = $418 & 1;
        $420 = ($419<<24>>24)==(0);
        $421 = HEAP32[$19>>2]|0;
        $$481 = $420 ? $18 : $421;
        $422 = $399;
        $423 = $$481;
        $424 = (($422) - ($423))|0;
        $425 = $424 >> 2;
        $426 = HEAP8[$this2$i$i$i15]|0;
        $427 = $426 & 1;
        $428 = ($427<<24>>24)==(0);
        if ($428) {
         $430 = $426&255;
         $431 = $430 >>> 1;
         $432 = $431;
        } else {
         $429 = HEAP32[$20>>2]|0;
         $432 = $429;
        }
        $433 = ($425>>>0)>($432>>>0);
        L325: do {
         if (!($433)) {
          if ($428) {
           $437 = $426&255;
           $438 = $437 >>> 1;
           $$sum471 = (($438) - ($425))|0;
           $439 = (($20) + ($$sum471<<2)|0);
           $440 = $426&255;
           $441 = $440 >>> 1;
           $442 = $439;$443 = $20;$444 = $441;
          } else {
           $434 = HEAP32[$21>>2]|0;
           $435 = HEAP32[$20>>2]|0;
           $$sum = (($435) - ($425))|0;
           $436 = (($434) + ($$sum<<2)|0);
           $442 = $436;$443 = $434;$444 = $435;
          }
          $445 = (($443) + ($444<<2)|0);
          $446 = HEAP32[$19>>2]|0;
          $$482 = $420 ? $18 : $446;
          $447 = ($442|0)==($445|0);
          if ($447) {
           $$pre$i3$i$i200 = $62;$457 = $62;$458 = $418;$459 = $399;
           break L307;
          } else {
           $448 = $$482;$449 = $442;
          }
          while(1) {
           $450 = HEAP32[$449>>2]|0;
           $451 = HEAP32[$448>>2]|0;
           $452 = ($450|0)==($451|0);
           if (!($452)) {
            break L325;
           }
           $453 = (($449) + 4|0);
           $454 = ($453|0)==($445|0);
           if ($454) {
            $$pre$i3$i$i200 = $62;$457 = $62;$458 = $418;$459 = $399;
            break L307;
           }
           $455 = (($448) + 4|0);
           $448 = $455;$449 = $453;
          }
         }
        } while(0);
        $456 = HEAP32[$19>>2]|0;
        $$483 = $420 ? $18 : $456;
        $$pre$i3$i$i200 = $62;$457 = $62;$458 = $418;$459 = $$483;
       }
      } while(0);
      L336: while(1) {
       $460 = $458 & 1;
       $461 = ($460<<24>>24)==(0);
       if ($461) {
        $464 = $458&255;
        $465 = $464 >>> 1;
        $466 = $18;$467 = $465;
       } else {
        $462 = HEAP32[$19>>2]|0;
        $463 = HEAP32[$18>>2]|0;
        $466 = $462;$467 = $463;
       }
       $468 = (($466) + ($467<<2)|0);
       $469 = ($459|0)==($468|0);
       if ($469) {
        break;
       }
       $470 = HEAP32[$8>>2]|0;
       $471 = ($470|0)==(0|0);
       do {
        if ($471) {
         $486 = 1;
        } else {
         $472 = (($470) + 12|0);
         $473 = HEAP32[$472>>2]|0;
         $474 = (($470) + 16|0);
         $475 = HEAP32[$474>>2]|0;
         $476 = ($473|0)==($475|0);
         if ($476) {
          $477 = $470;
          $478 = HEAP32[$477>>2]|0;
          $479 = (($478) + 36|0);
          $480 = HEAP32[$479>>2]|0;
          __THREW__ = 0;
          $481 = (invoke_ii($480|0,($470|0))|0);
          $482 = __THREW__; __THREW__ = 0;
          $483 = $482&1;
          if ($483) {
           label = 23;
           break L3;
          } else {
           $$0$i$i$i$i192 = $481;
          }
         } else {
          $484 = HEAP32[$473>>2]|0;
          $$0$i$i$i$i192 = $484;
         }
         $485 = ($$0$i$i$i$i192|0)==(-1);
         if ($485) {
          HEAP32[$8>>2] = 0;
          $486 = 1;
          break;
         } else {
          $$pre$i$i$i194 = HEAP32[$8>>2]|0;
          $phitmp$i$i$i195 = ($$pre$i$i$i194|0)==(0|0);
          $486 = $phitmp$i$i$i195;
          break;
         }
        }
       } while(0);
       $487 = ($457|0)==(0|0);
       do {
        if ($487) {
         $$pre$i3$i$i200456 = $$pre$i3$i$i200;
         label = 178;
        } else {
         $488 = (($457) + 12|0);
         $489 = HEAP32[$488>>2]|0;
         $490 = (($457) + 16|0);
         $491 = HEAP32[$490>>2]|0;
         $492 = ($489|0)==($491|0);
         if ($492) {
          $493 = $457;
          $494 = HEAP32[$493>>2]|0;
          $495 = (($494) + 36|0);
          $496 = HEAP32[$495>>2]|0;
          __THREW__ = 0;
          $497 = (invoke_ii($496|0,($457|0))|0);
          $498 = __THREW__; __THREW__ = 0;
          $499 = $498&1;
          if ($499) {
           label = 23;
           break L3;
          } else {
           $$0$i$i1$i$i198 = $497;
          }
         } else {
          $500 = HEAP32[$489>>2]|0;
          $$0$i$i1$i$i198 = $500;
         }
         $501 = ($$0$i$i1$i$i198|0)==(-1);
         if ($501) {
          HEAP32[$9>>2] = 0;
          $$pre$i3$i$i200456 = 0;
          label = 178;
          break;
         } else {
          $phitmp$i4$i$i201 = ($$pre$i3$i$i200|0)==(0|0);
          $tmp$i$i203 = $486 ^ $phitmp$i4$i$i201;
          if ($tmp$i$i203) {
           $$pre$i3$i$i200455 = $$pre$i3$i$i200;$502 = $$pre$i3$i$i200;
           break;
          } else {
           break L336;
          }
         }
        }
       } while(0);
       if ((label|0) == 178) {
        label = 0;
        if ($486) {
         break;
        } else {
         $$pre$i3$i$i200455 = $$pre$i3$i$i200456;$502 = 0;
        }
       }
       $503 = HEAP32[$8>>2]|0;
       $504 = (($503) + 12|0);
       $505 = HEAP32[$504>>2]|0;
       $506 = (($503) + 16|0);
       $507 = HEAP32[$506>>2]|0;
       $508 = ($505|0)==($507|0);
       if ($508) {
        $509 = $503;
        $510 = HEAP32[$509>>2]|0;
        $511 = (($510) + 36|0);
        $512 = HEAP32[$511>>2]|0;
        __THREW__ = 0;
        $513 = (invoke_ii($512|0,($503|0))|0);
        $514 = __THREW__; __THREW__ = 0;
        $515 = $514&1;
        if ($515) {
         label = 23;
         break L3;
        } else {
         $$0$i$i207 = $513;
        }
       } else {
        $516 = HEAP32[$505>>2]|0;
        $$0$i$i207 = $516;
       }
       $517 = HEAP32[$459>>2]|0;
       $518 = ($$0$i$i207|0)==($517|0);
       if (!($518)) {
        break;
       }
       $519 = HEAP32[$8>>2]|0;
       $520 = (($519) + 12|0);
       $521 = HEAP32[$520>>2]|0;
       $522 = (($519) + 16|0);
       $523 = HEAP32[$522>>2]|0;
       $524 = ($521|0)==($523|0);
       if ($524) {
        $525 = $519;
        $526 = HEAP32[$525>>2]|0;
        $527 = (($526) + 40|0);
        $528 = HEAP32[$527>>2]|0;
        __THREW__ = 0;
        (invoke_ii($528|0,($519|0))|0);
        $529 = __THREW__; __THREW__ = 0;
        $530 = $529&1;
        if ($530) {
         label = 23;
         break L3;
        }
       } else {
        $531 = (($521) + 4|0);
        HEAP32[$520>>2] = $531;
       }
       $532 = (($459) + 4|0);
       $$pre = HEAP8[$this2$i$i$i9]|0;
       $$pre$i3$i$i200 = $$pre$i3$i$i200455;$457 = $502;$458 = $$pre;$459 = $532;
      }
      if (!($17)) {
       $904 = $28;$905 = $27;$906 = $26;$907 = $25;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
       break L27;
      }
      $533 = HEAP8[$this2$i$i$i9]|0;
      $534 = $533 & 1;
      $535 = ($534<<24>>24)==(0);
      if ($535) {
       $538 = $533&255;
       $539 = $538 >>> 1;
       $540 = $18;$541 = $539;
      } else {
       $536 = HEAP32[$19>>2]|0;
       $537 = HEAP32[$18>>2]|0;
       $540 = $536;$541 = $537;
      }
      $542 = (($540) + ($541<<2)|0);
      $543 = ($459|0)==($542|0);
      if ($543) {
       $904 = $28;$905 = $27;$906 = $26;$907 = $25;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
      } else {
       label = 193;
       break L3;
      }
      break;
     }
     default: {
      $904 = $28;$905 = $27;$906 = $26;$907 = $25;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
     }
     }
    } while(0);
    L380: do {
     if ((label|0) == 42) {
      label = 0;
      $127 = ($__p$0377|0)==(3);
      if ($127) {
       $$lcssa313 = $27;$$lcssa330 = $26;$__trailing_sign$0$lcssa = $__trailing_sign$0379;$free228$lcssa = $free228372;
       label = 322;
       break L3;
      } else {
       $$pre$i3$i$i47 = $62;$128 = $62;
      }
      while(1) {
       $129 = HEAP32[$8>>2]|0;
       $130 = ($129|0)==(0|0);
       do {
        if ($130) {
         $145 = 1;
        } else {
         $131 = (($129) + 12|0);
         $132 = HEAP32[$131>>2]|0;
         $133 = (($129) + 16|0);
         $134 = HEAP32[$133>>2]|0;
         $135 = ($132|0)==($134|0);
         if ($135) {
          $136 = $129;
          $137 = HEAP32[$136>>2]|0;
          $138 = (($137) + 36|0);
          $139 = HEAP32[$138>>2]|0;
          __THREW__ = 0;
          $140 = (invoke_ii($139|0,($129|0))|0);
          $141 = __THREW__; __THREW__ = 0;
          $142 = $141&1;
          if ($142) {
           label = 24;
           break L3;
          } else {
           $$0$i$i$i$i39 = $140;
          }
         } else {
          $143 = HEAP32[$132>>2]|0;
          $$0$i$i$i$i39 = $143;
         }
         $144 = ($$0$i$i$i$i39|0)==(-1);
         if ($144) {
          HEAP32[$8>>2] = 0;
          $145 = 1;
          break;
         } else {
          $$pre$i$i$i41 = HEAP32[$8>>2]|0;
          $phitmp$i$i$i42 = ($$pre$i$i$i41|0)==(0|0);
          $145 = $phitmp$i$i$i42;
          break;
         }
        }
       } while(0);
       $146 = ($128|0)==(0|0);
       do {
        if ($146) {
         $$pre$i3$i$i47452 = $$pre$i3$i$i47;
         label = 56;
        } else {
         $147 = (($128) + 12|0);
         $148 = HEAP32[$147>>2]|0;
         $149 = (($128) + 16|0);
         $150 = HEAP32[$149>>2]|0;
         $151 = ($148|0)==($150|0);
         if ($151) {
          $152 = $128;
          $153 = HEAP32[$152>>2]|0;
          $154 = (($153) + 36|0);
          $155 = HEAP32[$154>>2]|0;
          __THREW__ = 0;
          $156 = (invoke_ii($155|0,($128|0))|0);
          $157 = __THREW__; __THREW__ = 0;
          $158 = $157&1;
          if ($158) {
           label = 24;
           break L3;
          } else {
           $$0$i$i1$i$i45 = $156;
          }
         } else {
          $159 = HEAP32[$148>>2]|0;
          $$0$i$i1$i$i45 = $159;
         }
         $160 = ($$0$i$i1$i$i45|0)==(-1);
         if ($160) {
          HEAP32[$9>>2] = 0;
          $$pre$i3$i$i47452 = 0;
          label = 56;
          break;
         } else {
          $phitmp$i4$i$i48 = ($$pre$i3$i$i47|0)==(0|0);
          $tmp$i$i50 = $145 ^ $phitmp$i4$i$i48;
          if ($tmp$i$i50) {
           $$pre$i3$i$i47454 = $$pre$i3$i$i47;$161 = $$pre$i3$i$i47;
           break;
          } else {
           $904 = $28;$905 = $27;$906 = $26;$907 = $25;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
           break L380;
          }
         }
        }
       } while(0);
       if ((label|0) == 56) {
        label = 0;
        if ($145) {
         $904 = $28;$905 = $27;$906 = $26;$907 = $25;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
         break L380;
        } else {
         $$pre$i3$i$i47454 = $$pre$i3$i$i47452;$161 = 0;
        }
       }
       $162 = HEAP32[$8>>2]|0;
       $163 = (($162) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = (($162) + 16|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($164|0)==($166|0);
       if ($167) {
        $168 = $162;
        $169 = HEAP32[$168>>2]|0;
        $170 = (($169) + 36|0);
        $171 = HEAP32[$170>>2]|0;
        __THREW__ = 0;
        $172 = (invoke_ii($171|0,($162|0))|0);
        $173 = __THREW__; __THREW__ = 0;
        $174 = $173&1;
        if ($174) {
         label = 24;
         break L3;
        } else {
         $$0$i$i54 = $172;
        }
       } else {
        $175 = HEAP32[$164>>2]|0;
        $$0$i$i54 = $175;
       }
       $176 = HEAP32[$11>>2]|0;
       $177 = (($176) + 12|0);
       $178 = HEAP32[$177>>2]|0;
       __THREW__ = 0;
       $179 = (invoke_iiii($178|0,($__ct|0),8192,($$0$i$i54|0))|0);
       $180 = __THREW__; __THREW__ = 0;
       $181 = $180&1;
       if ($181) {
        label = 24;
        break L3;
       }
       if (!($179)) {
        $904 = $28;$905 = $27;$906 = $26;$907 = $25;$__trailing_sign$1 = $__trailing_sign$0379;$free229 = $free228372;
        break L380;
       }
       $182 = HEAP32[$8>>2]|0;
       $183 = (($182) + 12|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (($182) + 16|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($184|0)==($186|0);
       if ($187) {
        $188 = $182;
        $189 = HEAP32[$188>>2]|0;
        $190 = (($189) + 40|0);
        $191 = HEAP32[$190>>2]|0;
        __THREW__ = 0;
        $192 = (invoke_ii($191|0,($182|0))|0);
        $193 = __THREW__; __THREW__ = 0;
        $194 = $193&1;
        if ($194) {
         label = 24;
         break L3;
        } else {
         $$0$i$i59 = $192;
        }
       } else {
        $195 = (($184) + 4|0);
        HEAP32[$183>>2] = $195;
        $196 = HEAP32[$184>>2]|0;
        $$0$i$i59 = $196;
       }
       __THREW__ = 0;
       invoke_vii(78,($__spaces|0),($$0$i$i59|0));
       $197 = __THREW__; __THREW__ = 0;
       $198 = $197&1;
       if ($198) {
        label = 24;
        break L3;
       } else {
        $$pre$i3$i$i47 = $$pre$i3$i$i47454;$128 = $161;
       }
      }
     }
    } while(0);
    $908 = (($__p$0377) + 1)|0;
    $909 = ($908>>>0)<(4);
    if ($909) {
     $25 = $907;$26 = $906;$27 = $905;$28 = $904;$__p$0377 = $908;$__trailing_sign$0379 = $__trailing_sign$1;$free228372 = $free229;
    } else {
     $$lcssa313 = $905;$$lcssa330 = $906;$__trailing_sign$0$lcssa = $__trailing_sign$1;$free228$lcssa = $free229;
     label = 322;
     break;
    }
   }
   L417: do {
    if ((label|0) == 20) {
     $68 = ___cxa_find_matching_catch(-1,-1)|0;
     $69 = tempRet0;
     $82 = $$ph$ph;$free232 = $free232$ph$ph;$lpad$phi$index = $68;$lpad$phi$index8 = $69;
     break L1;
    }
    else if ((label|0) == 21) {
     $70 = ___cxa_find_matching_catch(-1,-1)|0;
     $71 = tempRet0;
     $82 = $709;$free232 = $free230;$lpad$phi$index = $70;$lpad$phi$index8 = $71;
     break L1;
    }
    else if ((label|0) == 22) {
     $72 = ___cxa_find_matching_catch(-1,-1)|0;
     $73 = tempRet0;
     $82 = $27;$free232 = $free228372;$lpad$phi$index = $72;$lpad$phi$index8 = $73;
     break L1;
    }
    else if ((label|0) == 23) {
     $74 = ___cxa_find_matching_catch(-1,-1)|0;
     $75 = tempRet0;
     $82 = $27;$free232 = $free228372;$lpad$phi$index = $74;$lpad$phi$index8 = $75;
     break L1;
    }
    else if ((label|0) == 24) {
     $76 = ___cxa_find_matching_catch(-1,-1)|0;
     $77 = tempRet0;
     $82 = $27;$free232 = $free228372;$lpad$phi$index = $76;$lpad$phi$index8 = $77;
     break L1;
    }
    else if ((label|0) == 25) {
     $78 = ___cxa_find_matching_catch(-1,-1)|0;
     $79 = tempRet0;
     $82 = $$ph$ph251$ph$ph$ph$ph$ph;$free232 = $free232$ph$ph250$ph$ph$ph$ph$ph;$lpad$phi$index = $78;$lpad$phi$index8 = $79;
     break L1;
    }
    else if ((label|0) == 41) {
     $125 = HEAP32[$__err>>2]|0;
     $126 = $125 | 4;
     HEAP32[$__err>>2] = $126;
     $$0 = 0;$998 = $27;$free234 = $free228372;
    }
    else if ((label|0) == 134) {
     $382 = HEAP32[$__err>>2]|0;
     $383 = $382 | 4;
     HEAP32[$__err>>2] = $383;
     $$0 = 0;$998 = $27;$free234 = $free228372;
    }
    else if ((label|0) == 193) {
     $544 = HEAP32[$__err>>2]|0;
     $545 = $544 | 4;
     HEAP32[$__err>>2] = $545;
     $$0 = 0;$998 = $27;$free234 = $free228372;
    }
    else if ((label|0) == 224) {
     $625 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$1 = tempRet0;
     ___clang_call_terminate($625);
     // unreachable;
    }
    else if ((label|0) == 274) {
     $764 = HEAP32[$__err>>2]|0;
     $765 = $764 | 4;
     HEAP32[$__err>>2] = $765;
     $$0 = 0;$998 = $709;$free234 = $free230;
    }
    else if ((label|0) == 298) {
     $835 = HEAP32[$__err>>2]|0;
     $836 = $835 | 4;
     HEAP32[$__err>>2] = $836;
     $$0 = 0;$998 = $709;$free234 = $free230;
    }
    else if ((label|0) == 309) {
     $859 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$2 = tempRet0;
     ___clang_call_terminate($859);
     // unreachable;
    }
    else if ((label|0) == 320) {
     $902 = HEAP32[$__err>>2]|0;
     $903 = $902 | 4;
     HEAP32[$__err>>2] = $903;
     $$0 = 0;$998 = $709;$free234 = $free230;
    }
    else if ((label|0) == 322) {
     $910 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L424: do {
      if (!($910)) {
       $911 = $__trailing_sign$0$lcssa;
       $912 = (($__trailing_sign$0$lcssa) + 4|0);
       $913 = (($__trailing_sign$0$lcssa) + 8|0);
       $__i$0 = 1;
       L426: while(1) {
        $914 = HEAP8[$911]|0;
        $915 = $914 & 1;
        $916 = ($915<<24>>24)==(0);
        if ($916) {
         $918 = $914&255;
         $919 = $918 >>> 1;
         $920 = $919;
        } else {
         $917 = HEAP32[$912>>2]|0;
         $920 = $917;
        }
        $921 = ($__i$0>>>0)<($920>>>0);
        if (!($921)) {
         break L424;
        }
        $922 = HEAP32[$8>>2]|0;
        $923 = ($922|0)==(0|0);
        do {
         if ($923) {
          $938 = 1;
         } else {
          $924 = (($922) + 12|0);
          $925 = HEAP32[$924>>2]|0;
          $926 = (($922) + 16|0);
          $927 = HEAP32[$926>>2]|0;
          $928 = ($925|0)==($927|0);
          if ($928) {
           $929 = $922;
           $930 = HEAP32[$929>>2]|0;
           $931 = (($930) + 36|0);
           $932 = HEAP32[$931>>2]|0;
           __THREW__ = 0;
           $933 = (invoke_ii($932|0,($922|0))|0);
           $934 = __THREW__; __THREW__ = 0;
           $935 = $934&1;
           if ($935) {
            label = 19;
            break L426;
           } else {
            $$0$i$i$i$i = $933;
           }
          } else {
           $936 = HEAP32[$925>>2]|0;
           $$0$i$i$i$i = $936;
          }
          $937 = ($$0$i$i$i$i|0)==(-1);
          if ($937) {
           HEAP32[$8>>2] = 0;
           $938 = 1;
           break;
          } else {
           $$pre$i$i$i = HEAP32[$8>>2]|0;
           $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
           $938 = $phitmp$i$i$i;
           break;
          }
         }
        } while(0);
        $939 = HEAP32[$9>>2]|0;
        $940 = ($939|0)==(0|0);
        do {
         if ($940) {
          label = 341;
         } else {
          $941 = (($939) + 12|0);
          $942 = HEAP32[$941>>2]|0;
          $943 = (($939) + 16|0);
          $944 = HEAP32[$943>>2]|0;
          $945 = ($942|0)==($944|0);
          if ($945) {
           $946 = $939;
           $947 = HEAP32[$946>>2]|0;
           $948 = (($947) + 36|0);
           $949 = HEAP32[$948>>2]|0;
           __THREW__ = 0;
           $950 = (invoke_ii($949|0,($939|0))|0);
           $951 = __THREW__; __THREW__ = 0;
           $952 = $951&1;
           if ($952) {
            label = 19;
            break L426;
           } else {
            $$0$i$i1$i$i = $950;
           }
          } else {
           $953 = HEAP32[$942>>2]|0;
           $$0$i$i1$i$i = $953;
          }
          $954 = ($$0$i$i1$i$i|0)==(-1);
          if ($954) {
           HEAP32[$9>>2] = 0;
           label = 341;
           break;
          } else {
           if ($938) {
            break;
           } else {
            label = 349;
            break L426;
           }
          }
         }
        } while(0);
        if ((label|0) == 341) {
         label = 0;
         if ($938) {
          label = 349;
          break;
         }
        }
        $955 = HEAP32[$8>>2]|0;
        $956 = (($955) + 12|0);
        $957 = HEAP32[$956>>2]|0;
        $958 = (($955) + 16|0);
        $959 = HEAP32[$958>>2]|0;
        $960 = ($957|0)==($959|0);
        if ($960) {
         $961 = $955;
         $962 = HEAP32[$961>>2]|0;
         $963 = (($962) + 36|0);
         $964 = HEAP32[$963>>2]|0;
         __THREW__ = 0;
         $965 = (invoke_ii($964|0,($955|0))|0);
         $966 = __THREW__; __THREW__ = 0;
         $967 = $966&1;
         if ($967) {
          label = 19;
          break;
         } else {
          $$0$i$i = $965;
         }
        } else {
         $968 = HEAP32[$957>>2]|0;
         $$0$i$i = $968;
        }
        $969 = HEAP8[$911]|0;
        $970 = $969 & 1;
        $971 = ($970<<24>>24)==(0);
        if ($971) {
         $973 = $912;
        } else {
         $972 = HEAP32[$913>>2]|0;
         $973 = $972;
        }
        $974 = (($973) + ($__i$0<<2)|0);
        $975 = HEAP32[$974>>2]|0;
        $976 = ($$0$i$i|0)==($975|0);
        if (!($976)) {
         label = 349;
         break;
        }
        $979 = (($__i$0) + 1)|0;
        $980 = HEAP32[$8>>2]|0;
        $981 = (($980) + 12|0);
        $982 = HEAP32[$981>>2]|0;
        $983 = (($980) + 16|0);
        $984 = HEAP32[$983>>2]|0;
        $985 = ($982|0)==($984|0);
        if ($985) {
         $986 = $980;
         $987 = HEAP32[$986>>2]|0;
         $988 = (($987) + 40|0);
         $989 = HEAP32[$988>>2]|0;
         __THREW__ = 0;
         (invoke_ii($989|0,($980|0))|0);
         $990 = __THREW__; __THREW__ = 0;
         $991 = $990&1;
         if ($991) {
          label = 19;
          break;
         } else {
          $__i$0 = $979;
          continue;
         }
        } else {
         $992 = (($982) + 4|0);
         HEAP32[$981>>2] = $992;
         $__i$0 = $979;
         continue;
        }
       }
       if ((label|0) == 19) {
        $66 = ___cxa_find_matching_catch(-1,-1)|0;
        $67 = tempRet0;
        $82 = $$lcssa313;$free232 = $free228$lcssa;$lpad$phi$index = $66;$lpad$phi$index8 = $67;
        break L1;
       }
       else if ((label|0) == 349) {
        $977 = HEAP32[$__err>>2]|0;
        $978 = $977 | 4;
        HEAP32[$__err>>2] = $978;
        $$0 = 0;$998 = $$lcssa313;$free234 = $free228$lcssa;
        break L417;
       }
      }
     } while(0);
     $993 = ($$lcssa313|0)==($$lcssa330|0);
     if ($993) {
      $$0 = 1;$998 = $$lcssa330;$free234 = $free228$lcssa;
      break;
     }
     HEAP32[$__et>>2] = 0;
     __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$$lcssa313,$$lcssa330,$__et);
     $994 = HEAP32[$__et>>2]|0;
     $995 = ($994|0)==(0);
     if ($995) {
      $$0 = 1;$998 = $$lcssa313;$free234 = $free228$lcssa;
      break;
     }
     $996 = HEAP32[$__err>>2]|0;
     $997 = $996 | 4;
     HEAP32[$__err>>2] = $997;
     $$0 = 0;$998 = $$lcssa313;$free234 = $free228$lcssa;
    }
   } while(0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $999 = ($998|0)==(0|0);
   if ($999) {
    STACKTOP = sp;return ($$0|0);
   }
   $1000 = $998;
   __THREW__ = 0;
   invoke_vi($free234|0,($1000|0));
   $1001 = __THREW__; __THREW__ = 0;
   $1002 = $1001&1;
   if ($1002) {
    $1003 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    u$3 = tempRet0;
    ___clang_call_terminate($1003);
    // unreachable;
   } else {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $83 = ($82|0)==(0|0);
 if ($83) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $84 = $82;
 __THREW__ = 0;
 invoke_vi($free232|0,($84|0));
 $85 = __THREW__; __THREW__ = 0;
 $86 = $85&1;
 if ($86) {
  $87 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($87);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return 0|0;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0116 = 0, $$0117 = 0, $$018 = 0, $$019 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre14 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__p$i$i$i$i = 0, $__w$0$lcssa = 0, $__w$09 = 0, $__w$09$phi = 0, $__wb = 0, $__wbuf = 0;
 var $__wn = 0, $phitmp$i$i$i = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0;
 $$byval_copy = sp;
 $__p$i$i$i$i = sp + 8|0;
 $__wbuf = sp + 24|0;
 $__wb = sp + 424|0;
 $__wn = sp + 432|0;
 $__loc = sp + 440|0;
 $__neg = sp + 448|0;
 $1 = sp + 456|0;
 $2 = $__wbuf;
 $3 = ($__wbuf);
 $4 = ($__wb);
 HEAP32[$4>>2] = $3;
 $5 = (($__wb) + 4|0);
 HEAP32[$5>>2] = 187;
 $6 = (($__wbuf) + 400|0);
 __THREW__ = 0;
 invoke_vii(49,($__loc|0),($__iob|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 do {
  if ($8) {
   $68 = ___cxa_find_matching_catch(-1,-1)|0;
   $69 = tempRet0;
   HEAP32[$4>>2] = 0;
   $$0116 = $69;$$018 = $68;$137 = $3;
  } else {
   $9 = ($__loc);
   $10 = HEAP32[$9>>2]|0;
   $11 = $__p$i$i$i$i;
   $12 = HEAP32[((9128))>>2]|0;
   $13 = ($12|0)==(-1);
   if ($13) {
    label = 4;
   } else {
    $14 = ($__p$i$i$i$i);
    HEAP32[$14>>2] = (9128);
    $15 = (($__p$i$i$i$i) + 4|0);
    HEAP32[$15>>2] = (183);
    $16 = (($__p$i$i$i$i) + 8|0);
    HEAP32[$16>>2] = 0;
    __THREW__ = 0;
    invoke_viii(25,(((9128))|0),($11|0),(184|0));
    $17 = __THREW__; __THREW__ = 0;
    $18 = $17&1;
    if (!($18)) {
     label = 4;
    }
   }
   L5: do {
    if ((label|0) == 4) {
     $19 = HEAP32[(((9128) + 4|0))>>2]|0;
     $20 = (($19) + -1)|0;
     $21 = (($10) + 12|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (($10) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = $22;
     $26 = $24;
     $27 = (($25) - ($26))|0;
     $28 = $27 >> 2;
     $29 = ($28>>>0)>($20>>>0);
     do {
      if ($29) {
       $30 = (($24) + ($20<<2)|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = ($31|0)==(0|0);
       if ($32) {
        break;
       }
       $37 = $31;
       HEAP8[$__neg] = 0;
       $38 = ($__e);
       $39 = HEAP32[$38>>2]|0;
       $40 = ($1);
       HEAP32[$40>>2] = $39;
       $41 = (($__iob) + 4|0);
       $42 = HEAP32[$41>>2]|0;
       __THREW__ = 0;
       $43 = $$byval_copy;
       $44 = $$byval_copy;
       $45 = $1;
       ;HEAP32[$44+0>>2]=HEAP32[$45+0>>2]|0;
       $46 = (invoke_iiiiiiiiiiii(2,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($42|0),($__err|0),($__neg|0),($37|0),($__wb|0),($__wn|0),($6|0))|0);
       $47 = $$byval_copy;
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if ($49) {
        break L5;
       }
       if ($46) {
        $50 = $__v;
        $51 = HEAP8[$50]|0;
        $52 = $51 & 1;
        $53 = ($52<<24>>24)==(0);
        if ($53) {
         $57 = (($__v) + 4|0);
         HEAP32[$57>>2] = 0;
         HEAP8[$50] = 0;
        } else {
         $54 = (($__v) + 8|0);
         $55 = HEAP32[$54>>2]|0;
         HEAP32[$55>>2] = 0;
         $56 = (($__v) + 4|0);
         HEAP32[$56>>2] = 0;
        }
        $58 = HEAP8[$__neg]|0;
        $59 = ($58<<24>>24)==(0);
        $$pre14 = $31;
        if (!($59)) {
         $60 = HEAP32[$$pre14>>2]|0;
         $61 = (($60) + 44|0);
         $62 = HEAP32[$61>>2]|0;
         __THREW__ = 0;
         $63 = (invoke_iii($62|0,($37|0),45)|0);
         $64 = __THREW__; __THREW__ = 0;
         $65 = $64&1;
         if ($65) {
          break L5;
         }
         __THREW__ = 0;
         invoke_vii(78,($__v|0),($63|0));
         $66 = __THREW__; __THREW__ = 0;
         $67 = $66&1;
         if ($67) {
          break L5;
         }
        }
        $70 = HEAP32[$$pre14>>2]|0;
        $71 = (($70) + 44|0);
        $72 = HEAP32[$71>>2]|0;
        __THREW__ = 0;
        $73 = (invoke_iii($72|0,($37|0),48)|0);
        $74 = __THREW__; __THREW__ = 0;
        $75 = $74&1;
        if ($75) {
         break L5;
        }
        $76 = HEAP32[$4>>2]|0;
        $77 = HEAP32[$__wn>>2]|0;
        $78 = (($77) + -4|0);
        $79 = ($76>>>0)<($78>>>0);
        L22: do {
         if ($79) {
          $__w$09 = $76;
          while(1) {
           $81 = HEAP32[$__w$09>>2]|0;
           $82 = ($81|0)==($73|0);
           $83 = (($__w$09) + 4|0);
           if (!($82)) {
            $__w$0$lcssa = $__w$09;
            break L22;
           }
           $80 = ($83>>>0)<($78>>>0);
           if ($80) {
            $__w$09$phi = $83;$__w$09 = $__w$09$phi;
           } else {
            $__w$0$lcssa = $83;
            break;
           }
          }
         } else {
          $__w$0$lcssa = $76;
         }
        } while(0);
        __THREW__ = 0;
        (invoke_iiii(37,($__v|0),($__w$0$lcssa|0),($77|0))|0);
        $84 = __THREW__; __THREW__ = 0;
        $85 = $84&1;
        if ($85) {
         break L5;
        }
       }
       $86 = ($__b);
       $87 = HEAP32[$86>>2]|0;
       $88 = ($87|0)==(0|0);
       do {
        if ($88) {
         $103 = 1;
        } else {
         $89 = (($87) + 12|0);
         $90 = HEAP32[$89>>2]|0;
         $91 = (($87) + 16|0);
         $92 = HEAP32[$91>>2]|0;
         $93 = ($90|0)==($92|0);
         if ($93) {
          $94 = $87;
          $95 = HEAP32[$94>>2]|0;
          $96 = (($95) + 36|0);
          $97 = HEAP32[$96>>2]|0;
          __THREW__ = 0;
          $98 = (invoke_ii($97|0,($87|0))|0);
          $99 = __THREW__; __THREW__ = 0;
          $100 = $99&1;
          if ($100) {
           break L5;
          } else {
           $$0$i$i$i$i = $98;
          }
         } else {
          $101 = HEAP32[$90>>2]|0;
          $$0$i$i$i$i = $101;
         }
         $102 = ($$0$i$i$i$i|0)==(-1);
         if ($102) {
          HEAP32[$86>>2] = 0;
          $103 = 1;
          break;
         } else {
          $$pre$i$i$i = HEAP32[$86>>2]|0;
          $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
          $103 = $phitmp$i$i$i;
          break;
         }
        }
       } while(0);
       $104 = ($39|0)==(0|0);
       do {
        if ($104) {
         label = 35;
        } else {
         $105 = (($39) + 12|0);
         $106 = HEAP32[$105>>2]|0;
         $107 = (($39) + 16|0);
         $108 = HEAP32[$107>>2]|0;
         $109 = ($106|0)==($108|0);
         if ($109) {
          $110 = $39;
          $111 = HEAP32[$110>>2]|0;
          $112 = (($111) + 36|0);
          $113 = HEAP32[$112>>2]|0;
          __THREW__ = 0;
          $114 = (invoke_ii($113|0,($39|0))|0);
          $115 = __THREW__; __THREW__ = 0;
          $116 = $115&1;
          if ($116) {
           break L5;
          } else {
           $$0$i$i1$i$i = $114;
          }
         } else {
          $117 = HEAP32[$106>>2]|0;
          $$0$i$i1$i$i = $117;
         }
         $118 = ($$0$i$i1$i$i|0)==(-1);
         if ($118) {
          HEAP32[$38>>2] = 0;
          label = 35;
          break;
         } else {
          if ($103) {
           break;
          } else {
           label = 37;
           break;
          }
         }
        }
       } while(0);
       if ((label|0) == 35) {
        if ($103) {
         label = 37;
        }
       }
       if ((label|0) == 37) {
        $119 = HEAP32[$__err>>2]|0;
        $120 = $119 | 2;
        HEAP32[$__err>>2] = $120;
       }
       $121 = HEAP32[$86>>2]|0;
       $122 = ($agg$result);
       HEAP32[$122>>2] = $121;
       $123 = HEAP32[$9>>2]|0;
       $124 = ($123);
       (__ZNSt3__114__shared_count16__release_sharedEv($124)|0);
       $125 = HEAP32[$4>>2]|0;
       HEAP32[$4>>2] = 0;
       $126 = ($125|0)==(0|0);
       if ($126) {
        STACKTOP = sp;return;
       }
       $127 = HEAP32[$5>>2]|0;
       $128 = $125;
       __THREW__ = 0;
       invoke_vi($127|0,($128|0));
       $129 = __THREW__; __THREW__ = 0;
       $130 = $129&1;
       if ($130) {
        $131 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        u$0 = tempRet0;
        ___clang_call_terminate($131);
        // unreachable;
       } else {
        STACKTOP = sp;return;
       }
      }
     } while(0);
     $33 = (___cxa_allocate_exception(4)|0);
     $34 = $33;
     __ZNSt8bad_castC2Ev($34);
     __THREW__ = 0;
     invoke_viii(12,($33|0),((17096)|0),((143)|0));
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if ($36) {
      break;
     }
     // unreachable;
    }
   } while(0);
   $132 = ___cxa_find_matching_catch(-1,-1)|0;
   $133 = tempRet0;
   $134 = HEAP32[$9>>2]|0;
   $135 = ($134);
   (__ZNSt3__114__shared_count16__release_sharedEv($135)|0);
   $$pre = HEAP32[$4>>2]|0;
   HEAP32[$4>>2] = 0;
   $136 = ($$pre|0)==(0|0);
   if ($136) {
    $$0117 = $133;$$019 = $132;
   } else {
    $$0116 = $133;$$018 = $132;$137 = $$pre;
    break;
   }
   ___resumeException($$019|0);
   // unreachable;
  }
 } while(0);
 $138 = HEAP32[$5>>2]|0;
 $139 = $137;
 __THREW__ = 0;
 invoke_vi($138|0,($139|0));
 $140 = __THREW__; __THREW__ = 0;
 $141 = $140&1;
 if ($141) {
  $142 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$1 = tempRet0;
  ___clang_call_terminate($142);
  // unreachable;
 } else {
  $$0117 = $$0116;$$019 = $$018;
  ___resumeException($$019|0);
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$01$phi = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$02 = 0, $__p$02$phi = 0, $phitmp$i = 0, $scevgep = 0, $scevgep3 = 0, $scevgep5 = 0, $uglygep = 0, $uglygep4 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 $2 = $__first;
 $3 = HEAP8[$1]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = $3&255;
  $7 = $6 >>> 1;
  $14 = $7;$15 = $3;$16 = 1;
 } else {
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($this);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & -2;
  $phitmp$i = (($12) + -1)|0;
  $13 = $11&255;
  $14 = $9;$15 = $13;$16 = $phitmp$i;
 }
 $17 = $__last;
 $18 = (($17) - ($2))|0;
 $19 = $18 >> 2;
 $20 = ($19|0)==(0);
 if ($20) {
  STACKTOP = sp;return ($this|0);
 }
 $21 = (($16) - ($14))|0;
 $22 = ($21>>>0)<($19>>>0);
 if ($22) {
  $23 = (($14) + ($19))|0;
  $24 = (($23) - ($16))|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$16,$24,$14,$14,0,0);
  $$pre = HEAP8[$1]|0;
  $25 = $$pre;
 } else {
  $25 = $15;
 }
 $26 = $25 & 1;
 $27 = ($26<<24>>24)==(0);
 if ($27) {
  $30 = (($this) + 4|0);
  $31 = $30;
 } else {
  $28 = (($this) + 8|0);
  $29 = HEAP32[$28>>2]|0;
  $31 = $29;
 }
 $32 = (($31) + ($14<<2)|0);
 $33 = ($__first|0)==($__last|0);
 if ($33) {
  $__p$0$lcssa = $32;
 } else {
  $scevgep = (($__last) + -4|0);
  $scevgep3 = $scevgep;
  $34 = (0 - ($2))|0;
  $uglygep = (($scevgep3) + ($34)|0);
  $uglygep4 = $uglygep;
  $35 = $uglygep4 >>> 2;
  $36 = (($14) + ($35))|0;
  $37 = (($36) + 1)|0;
  $$01 = $__first;$__p$02 = $32;
  while(1) {
   $38 = HEAP32[$$01>>2]|0;
   HEAP32[$__p$02>>2] = $38;
   $39 = (($__p$02) + 4|0);
   $40 = (($$01) + 4|0);
   $41 = ($40|0)==($__last|0);
   if ($41) {
    break;
   } else {
    $__p$02$phi = $39;$$01$phi = $40;$__p$02 = $__p$02$phi;$$01 = $$01$phi;
   }
  }
  $scevgep5 = (($31) + ($37<<2)|0);
  $__p$0$lcssa = $scevgep5;
 }
 HEAP32[$__p$0$lcssa>>2] = 0;
 $42 = (($14) + ($19))|0;
 $43 = HEAP8[$1]|0;
 $44 = $43 & 1;
 $45 = ($44<<24>>24)==(0);
 if ($45) {
  $47 = $42 << 1;
  $48 = $47&255;
  HEAP8[$1] = $48;
  STACKTOP = sp;return ($this|0);
 } else {
  $46 = (($this) + 4|0);
  HEAP32[$46>>2] = $42;
  STACKTOP = sp;return ($this|0);
 }
 return 0|0;
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i6 = 0, $storemerge = 0, $tmpcast = 0, $tmpcast1 = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0, u$2 = 0, u$3 = 0, u$4 = 0, u$5 = 0, u$6 = 0, u$7 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $__p$i$i$i$i6 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $1 = sp + 32|0;
 $2 = sp + 40|0;
 $3 = sp + 56|0;
 $4 = sp + 72|0;
 $5 = sp + 88|0;
 $6 = sp + 104|0;
 $7 = sp + 112|0;
 $8 = sp + 128|0;
 $9 = sp + 144|0;
 $10 = sp + 160|0;
 if ($__intl) {
  $tmpcast1 = $1;
  $11 = ($__loc);
  $12 = HEAP32[$11>>2]|0;
  $13 = $__p$i$i$i$i;
  $14 = HEAP32[((8704))>>2]|0;
  $15 = ($14|0)==(-1);
  if (!($15)) {
   $16 = ($__p$i$i$i$i);
   HEAP32[$16>>2] = (8704);
   $17 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$17>>2] = (183);
   $18 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$18>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(((8704)),$13,184);
  }
  $19 = HEAP32[(((8704) + 4|0))>>2]|0;
  $20 = (($19) + -1)|0;
  $21 = (($12) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($12) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $22;
  $26 = $24;
  $27 = (($25) - ($26))|0;
  $28 = $27 >> 2;
  $29 = ($28>>>0)>($20>>>0);
  if (!($29)) {
   $33 = (___cxa_allocate_exception(4)|0);
   $34 = $33;
   __ZNSt8bad_castC2Ev($34);
   ___cxa_throw(($33|0),((17096)|0),((143)|0));
   // unreachable;
  }
  $30 = (($24) + ($20<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $33 = (___cxa_allocate_exception(4)|0);
   $34 = $33;
   __ZNSt8bad_castC2Ev($34);
   ___cxa_throw(($33|0),((17096)|0),((143)|0));
   // unreachable;
  }
  $35 = $31;
  $36 = $31;
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + 44|0);
  $39 = HEAP32[$38>>2]|0;
  FUNCTION_TABLE_vii[$39 & 127]($tmpcast1,$35);
  $40 = $__pat;
  $41 = HEAP32[$1>>2]|0;
  HEAP8[$40]=$41&255;HEAP8[$40+1|0]=($41>>8)&255;HEAP8[$40+2|0]=($41>>16)&255;HEAP8[$40+3|0]=$41>>24;
  $42 = $31;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + 32|0);
  $45 = HEAP32[$44>>2]|0;
  FUNCTION_TABLE_vii[$45 & 127]($2,$35);
  $46 = $__nsn;
  $47 = HEAP8[$46]|0;
  $48 = $47 & 1;
  $49 = ($48<<24>>24)==(0);
  if ($49) {
   $53 = (($__nsn) + 4|0);
   HEAP32[$53>>2] = 0;
   HEAP8[$46] = 0;
  } else {
   $50 = (($__nsn) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   HEAP32[$51>>2] = 0;
   $52 = (($__nsn) + 4|0);
   HEAP32[$52>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(79,($__nsn|0),0);
  $54 = __THREW__; __THREW__ = 0;
  $55 = $54&1;
  if ($55) {
   $56 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$0 = tempRet0;
   ___clang_call_terminate($56);
   // unreachable;
  }
  $57 = $2;
  ;HEAP32[$46+0>>2]=HEAP32[$57+0>>2]|0;HEAP32[$46+4>>2]=HEAP32[$57+4>>2]|0;HEAP32[$46+8>>2]=HEAP32[$57+8>>2]|0;
  ;HEAP32[$57+0>>2]=0|0;HEAP32[$57+4>>2]=0|0;HEAP32[$57+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
  $58 = HEAP32[$42>>2]|0;
  $59 = (($58) + 28|0);
  $60 = HEAP32[$59>>2]|0;
  FUNCTION_TABLE_vii[$60 & 127]($3,$35);
  $61 = $__psn;
  $62 = HEAP8[$61]|0;
  $63 = $62 & 1;
  $64 = ($63<<24>>24)==(0);
  if ($64) {
   $68 = (($__psn) + 4|0);
   HEAP32[$68>>2] = 0;
   HEAP8[$61] = 0;
  } else {
   $65 = (($__psn) + 8|0);
   $66 = HEAP32[$65>>2]|0;
   HEAP32[$66>>2] = 0;
   $67 = (($__psn) + 4|0);
   HEAP32[$67>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(79,($__psn|0),0);
  $69 = __THREW__; __THREW__ = 0;
  $70 = $69&1;
  if ($70) {
   $71 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$1 = tempRet0;
   ___clang_call_terminate($71);
   // unreachable;
  }
  $72 = $3;
  ;HEAP32[$61+0>>2]=HEAP32[$72+0>>2]|0;HEAP32[$61+4>>2]=HEAP32[$72+4>>2]|0;HEAP32[$61+8>>2]=HEAP32[$72+8>>2]|0;
  ;HEAP32[$72+0>>2]=0|0;HEAP32[$72+4>>2]=0|0;HEAP32[$72+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($3);
  $73 = $31;
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74) + 12|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (FUNCTION_TABLE_ii[$76 & 127]($35)|0);
  HEAP32[$__dp>>2] = $77;
  $78 = HEAP32[$73>>2]|0;
  $79 = (($78) + 16|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (FUNCTION_TABLE_ii[$80 & 127]($35)|0);
  HEAP32[$__ts>>2] = $81;
  $82 = $31;
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + 20|0);
  $85 = HEAP32[$84>>2]|0;
  FUNCTION_TABLE_vii[$85 & 127]($4,$35);
  $86 = $__grp;
  $87 = HEAP8[$86]|0;
  $88 = $87 & 1;
  $89 = ($88<<24>>24)==(0);
  if ($89) {
   $93 = $__grp;
   $94 = (($93) + 1|0);
   HEAP8[$94] = 0;
   HEAP8[$86] = 0;
  } else {
   $90 = (($__grp) + 8|0);
   $91 = HEAP32[$90>>2]|0;
   HEAP8[$91] = 0;
   $92 = (($__grp) + 4|0);
   HEAP32[$92>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(77,($__grp|0),0);
  $95 = __THREW__; __THREW__ = 0;
  $96 = $95&1;
  if ($96) {
   $97 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$2 = tempRet0;
   ___clang_call_terminate($97);
   // unreachable;
  }
  $98 = $4;
  ;HEAP32[$86+0>>2]=HEAP32[$98+0>>2]|0;HEAP32[$86+4>>2]=HEAP32[$98+4>>2]|0;HEAP32[$86+8>>2]=HEAP32[$98+8>>2]|0;
  ;HEAP32[$98+0>>2]=0|0;HEAP32[$98+4>>2]=0|0;HEAP32[$98+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $99 = HEAP32[$42>>2]|0;
  $100 = (($99) + 24|0);
  $101 = HEAP32[$100>>2]|0;
  FUNCTION_TABLE_vii[$101 & 127]($5,$35);
  $102 = $__sym;
  $103 = HEAP8[$102]|0;
  $104 = $103 & 1;
  $105 = ($104<<24>>24)==(0);
  if ($105) {
   $109 = (($__sym) + 4|0);
   HEAP32[$109>>2] = 0;
   HEAP8[$102] = 0;
  } else {
   $106 = (($__sym) + 8|0);
   $107 = HEAP32[$106>>2]|0;
   HEAP32[$107>>2] = 0;
   $108 = (($__sym) + 4|0);
   HEAP32[$108>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(79,($__sym|0),0);
  $110 = __THREW__; __THREW__ = 0;
  $111 = $110&1;
  if ($111) {
   $112 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$3 = tempRet0;
   ___clang_call_terminate($112);
   // unreachable;
  }
  $113 = $5;
  ;HEAP32[$102+0>>2]=HEAP32[$113+0>>2]|0;HEAP32[$102+4>>2]=HEAP32[$113+4>>2]|0;HEAP32[$102+8>>2]=HEAP32[$113+8>>2]|0;
  ;HEAP32[$113+0>>2]=0|0;HEAP32[$113+4>>2]=0|0;HEAP32[$113+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($5);
  $114 = HEAP32[$73>>2]|0;
  $115 = (($114) + 36|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (FUNCTION_TABLE_ii[$116 & 127]($35)|0);
  $storemerge = $117;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $tmpcast = $6;
  $118 = ($__loc);
  $119 = HEAP32[$118>>2]|0;
  $120 = $__p$i$i$i$i6;
  $121 = HEAP32[((8640))>>2]|0;
  $122 = ($121|0)==(-1);
  if (!($122)) {
   $123 = ($__p$i$i$i$i6);
   HEAP32[$123>>2] = (8640);
   $124 = (($__p$i$i$i$i6) + 4|0);
   HEAP32[$124>>2] = (183);
   $125 = (($__p$i$i$i$i6) + 8|0);
   HEAP32[$125>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(((8640)),$120,184);
  }
  $126 = HEAP32[(((8640) + 4|0))>>2]|0;
  $127 = (($126) + -1)|0;
  $128 = (($119) + 12|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (($119) + 8|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $129;
  $133 = $131;
  $134 = (($132) - ($133))|0;
  $135 = $134 >> 2;
  $136 = ($135>>>0)>($127>>>0);
  if (!($136)) {
   $140 = (___cxa_allocate_exception(4)|0);
   $141 = $140;
   __ZNSt8bad_castC2Ev($141);
   ___cxa_throw(($140|0),((17096)|0),((143)|0));
   // unreachable;
  }
  $137 = (($131) + ($127<<2)|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = ($138|0)==(0|0);
  if ($139) {
   $140 = (___cxa_allocate_exception(4)|0);
   $141 = $140;
   __ZNSt8bad_castC2Ev($141);
   ___cxa_throw(($140|0),((17096)|0),((143)|0));
   // unreachable;
  }
  $142 = $138;
  $143 = $138;
  $144 = HEAP32[$143>>2]|0;
  $145 = (($144) + 44|0);
  $146 = HEAP32[$145>>2]|0;
  FUNCTION_TABLE_vii[$146 & 127]($tmpcast,$142);
  $147 = $__pat;
  $148 = HEAP32[$6>>2]|0;
  HEAP8[$147]=$148&255;HEAP8[$147+1|0]=($148>>8)&255;HEAP8[$147+2|0]=($148>>16)&255;HEAP8[$147+3|0]=$148>>24;
  $149 = $138;
  $150 = HEAP32[$149>>2]|0;
  $151 = (($150) + 32|0);
  $152 = HEAP32[$151>>2]|0;
  FUNCTION_TABLE_vii[$152 & 127]($7,$142);
  $153 = $__nsn;
  $154 = HEAP8[$153]|0;
  $155 = $154 & 1;
  $156 = ($155<<24>>24)==(0);
  if ($156) {
   $160 = (($__nsn) + 4|0);
   HEAP32[$160>>2] = 0;
   HEAP8[$153] = 0;
  } else {
   $157 = (($__nsn) + 8|0);
   $158 = HEAP32[$157>>2]|0;
   HEAP32[$158>>2] = 0;
   $159 = (($__nsn) + 4|0);
   HEAP32[$159>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(79,($__nsn|0),0);
  $161 = __THREW__; __THREW__ = 0;
  $162 = $161&1;
  if ($162) {
   $163 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$4 = tempRet0;
   ___clang_call_terminate($163);
   // unreachable;
  }
  $164 = $7;
  ;HEAP32[$153+0>>2]=HEAP32[$164+0>>2]|0;HEAP32[$153+4>>2]=HEAP32[$164+4>>2]|0;HEAP32[$153+8>>2]=HEAP32[$164+8>>2]|0;
  ;HEAP32[$164+0>>2]=0|0;HEAP32[$164+4>>2]=0|0;HEAP32[$164+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
  $165 = HEAP32[$149>>2]|0;
  $166 = (($165) + 28|0);
  $167 = HEAP32[$166>>2]|0;
  FUNCTION_TABLE_vii[$167 & 127]($8,$142);
  $168 = $__psn;
  $169 = HEAP8[$168]|0;
  $170 = $169 & 1;
  $171 = ($170<<24>>24)==(0);
  if ($171) {
   $175 = (($__psn) + 4|0);
   HEAP32[$175>>2] = 0;
   HEAP8[$168] = 0;
  } else {
   $172 = (($__psn) + 8|0);
   $173 = HEAP32[$172>>2]|0;
   HEAP32[$173>>2] = 0;
   $174 = (($__psn) + 4|0);
   HEAP32[$174>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(79,($__psn|0),0);
  $176 = __THREW__; __THREW__ = 0;
  $177 = $176&1;
  if ($177) {
   $178 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$5 = tempRet0;
   ___clang_call_terminate($178);
   // unreachable;
  }
  $179 = $8;
  ;HEAP32[$168+0>>2]=HEAP32[$179+0>>2]|0;HEAP32[$168+4>>2]=HEAP32[$179+4>>2]|0;HEAP32[$168+8>>2]=HEAP32[$179+8>>2]|0;
  ;HEAP32[$179+0>>2]=0|0;HEAP32[$179+4>>2]=0|0;HEAP32[$179+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($8);
  $180 = $138;
  $181 = HEAP32[$180>>2]|0;
  $182 = (($181) + 12|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = (FUNCTION_TABLE_ii[$183 & 127]($142)|0);
  HEAP32[$__dp>>2] = $184;
  $185 = HEAP32[$180>>2]|0;
  $186 = (($185) + 16|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = (FUNCTION_TABLE_ii[$187 & 127]($142)|0);
  HEAP32[$__ts>>2] = $188;
  $189 = $138;
  $190 = HEAP32[$189>>2]|0;
  $191 = (($190) + 20|0);
  $192 = HEAP32[$191>>2]|0;
  FUNCTION_TABLE_vii[$192 & 127]($9,$142);
  $193 = $__grp;
  $194 = HEAP8[$193]|0;
  $195 = $194 & 1;
  $196 = ($195<<24>>24)==(0);
  if ($196) {
   $200 = $__grp;
   $201 = (($200) + 1|0);
   HEAP8[$201] = 0;
   HEAP8[$193] = 0;
  } else {
   $197 = (($__grp) + 8|0);
   $198 = HEAP32[$197>>2]|0;
   HEAP8[$198] = 0;
   $199 = (($__grp) + 4|0);
   HEAP32[$199>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(77,($__grp|0),0);
  $202 = __THREW__; __THREW__ = 0;
  $203 = $202&1;
  if ($203) {
   $204 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$6 = tempRet0;
   ___clang_call_terminate($204);
   // unreachable;
  }
  $205 = $9;
  ;HEAP32[$193+0>>2]=HEAP32[$205+0>>2]|0;HEAP32[$193+4>>2]=HEAP32[$205+4>>2]|0;HEAP32[$193+8>>2]=HEAP32[$205+8>>2]|0;
  ;HEAP32[$205+0>>2]=0|0;HEAP32[$205+4>>2]=0|0;HEAP32[$205+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
  $206 = HEAP32[$149>>2]|0;
  $207 = (($206) + 24|0);
  $208 = HEAP32[$207>>2]|0;
  FUNCTION_TABLE_vii[$208 & 127]($10,$142);
  $209 = $__sym;
  $210 = HEAP8[$209]|0;
  $211 = $210 & 1;
  $212 = ($211<<24>>24)==(0);
  if ($212) {
   $216 = (($__sym) + 4|0);
   HEAP32[$216>>2] = 0;
   HEAP8[$209] = 0;
  } else {
   $213 = (($__sym) + 8|0);
   $214 = HEAP32[$213>>2]|0;
   HEAP32[$214>>2] = 0;
   $215 = (($__sym) + 4|0);
   HEAP32[$215>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(79,($__sym|0),0);
  $217 = __THREW__; __THREW__ = 0;
  $218 = $217&1;
  if ($218) {
   $219 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$7 = tempRet0;
   ___clang_call_terminate($219);
   // unreachable;
  }
  $220 = $10;
  ;HEAP32[$209+0>>2]=HEAP32[$220+0>>2]|0;HEAP32[$209+4>>2]=HEAP32[$220+4>>2]|0;HEAP32[$209+8>>2]=HEAP32[$220+8>>2]|0;
  ;HEAP32[$220+0>>2]=0|0;HEAP32[$220+4>>2]=0|0;HEAP32[$220+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($10);
  $221 = HEAP32[$180>>2]|0;
  $222 = (($221) + 36|0);
  $223 = HEAP32[$222>>2]|0;
  $224 = (FUNCTION_TABLE_ii[$223 & 127]($142)|0);
  $storemerge = $224;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0;
 var $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $this2$i$i$i = 0, $this2$i$i$i7 = 0, $this2$i$i$i8 = 0;
 var $tmpcast = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $vararg_lifetime_bitcast = 0, $vararg_lifetime_bitcast7 = 0, $vararg_ptr = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer6 = sp + 8|0;
 $vararg_lifetime_bitcast7 = $vararg_buffer6;
 $vararg_buffer = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__p$i$i$i$i = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__buf = STACKTOP; STACKTOP = STACKTOP + 104|0;
 $__bb = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__digits = STACKTOP; STACKTOP = STACKTOP + 104|0;
 $__loc = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__pat = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $tmpcast = $__pat;
 $__dp = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__ts = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__grp = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__sym = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__sn = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__fd = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__mbuf = STACKTOP; STACKTOP = STACKTOP + 104|0;
 $__mi = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__me = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $2 = ($__buf);
 HEAP32[$__bb>>2] = $2;
 $3 = ($__digits);
 $vararg_ptr = ($vararg_buffer);
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_ptr>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $4 = (_snprintf(($2|0),100,((8888)|0),($vararg_buffer|0))|0);
 $5 = ($4>>>0)>(99);
 L1: do {
  if ($5) {
   $6 = HEAP8[(9032)]|0;
   $7 = ($6<<24>>24)==(0);
   do {
    if ($7) {
     $8 = (___cxa_guard_acquire(((9032)|0))|0);
     $9 = ($8|0)==(0);
     if ($9) {
      break;
     }
     __THREW__ = 0;
     $10 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
     $11 = __THREW__; __THREW__ = 0;
     $12 = $11&1;
     if ($12) {
      $13 = ___cxa_find_matching_catch(-1,-1)|0;
      $14 = tempRet0;
      ___cxa_guard_abort(((9032)|0));
      $27 = 0;$28 = 0;$eh$lpad$body$index2Z2D = $14;$eh$lpad$body$indexZ2D = $13;
      label = 12;
      break L1;
     } else {
      HEAP32[(9024)>>2] = $10;
      ___cxa_guard_release(((9032)|0));
      break;
     }
    }
   } while(0);
   $15 = HEAP32[(9024)>>2]|0;
   __THREW__ = 0;
   $vararg_ptr8 = ($vararg_buffer6);
   HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $16 = (invoke_iiiii(14,($__bb|0),($15|0),((8888)|0),($vararg_buffer6|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    $23 = 0;$24 = 0;
    label = 11;
    break;
   }
   $19 = HEAP32[$__bb>>2]|0;
   $20 = ($19|0)==(0|0);
   if ($20) {
    __THREW__ = 0;
    invoke_v(7);
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     $23 = 0;$24 = 0;
     label = 11;
     break;
    }
    $$pre = HEAP32[$__bb>>2]|0;
    $29 = $$pre;
   } else {
    $29 = $19;
   }
   $30 = (_malloc($16)|0);
   $31 = ($30|0)==(0|0);
   if (!($31)) {
    $34 = $29;$35 = $30;$__db$0 = $30;$__n$0 = $16;
    label = 15;
    break;
   }
   __THREW__ = 0;
   invoke_v(7);
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    $23 = $29;$24 = 0;
    label = 11;
   } else {
    $34 = $29;$35 = 0;$__db$0 = 0;$__n$0 = $16;
    label = 15;
   }
  } else {
   $34 = 0;$35 = 0;$__db$0 = $3;$__n$0 = $4;
   label = 15;
  }
 } while(0);
 do {
  if ((label|0) == 15) {
   __THREW__ = 0;
   invoke_vii(49,($__loc|0),($__iob|0));
   $36 = __THREW__; __THREW__ = 0;
   $37 = $36&1;
   if ($37) {
    $23 = $34;$24 = $35;
    label = 11;
    break;
   }
   $38 = ($__loc);
   $39 = HEAP32[$38>>2]|0;
   $40 = $__p$i$i$i$i;
   $41 = HEAP32[((9136))>>2]|0;
   $42 = ($41|0)==(-1);
   if ($42) {
    label = 18;
   } else {
    $43 = ($__p$i$i$i$i);
    HEAP32[$43>>2] = (9136);
    $44 = (($__p$i$i$i$i) + 4|0);
    HEAP32[$44>>2] = (183);
    $45 = (($__p$i$i$i$i) + 8|0);
    HEAP32[$45>>2] = 0;
    __THREW__ = 0;
    invoke_viii(25,(((9136))|0),($40|0),(184|0));
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if ($47) {
     label = 45;
    } else {
     label = 18;
    }
   }
   L21: do {
    if ((label|0) == 18) {
     $48 = HEAP32[(((9136) + 4|0))>>2]|0;
     $49 = (($48) + -1)|0;
     $50 = (($39) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = (($39) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = $51;
     $55 = $53;
     $56 = (($54) - ($55))|0;
     $57 = $56 >> 2;
     $58 = ($57>>>0)>($49>>>0);
     do {
      if ($58) {
       $59 = (($53) + ($49<<2)|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = ($60|0)==(0|0);
       if ($61) {
        break;
       }
       $66 = $60;
       $67 = HEAP32[$__bb>>2]|0;
       $68 = (($67) + ($__n$0)|0);
       $69 = $60;
       $70 = HEAP32[$69>>2]|0;
       $71 = (($70) + 32|0);
       $72 = HEAP32[$71>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($72|0,($66|0),($67|0),($68|0),($__db$0|0))|0);
       $73 = __THREW__; __THREW__ = 0;
       $74 = $73&1;
       if ($74) {
        label = 45;
        break L21;
       }
       $75 = ($__n$0|0)==(0);
       if ($75) {
        $79 = 0;
       } else {
        $76 = HEAP32[$__bb>>2]|0;
        $77 = HEAP8[$76]|0;
        $78 = ($77<<24>>24)==(45);
        $79 = $78;
       }
       HEAP32[$__pat>>2] = 0;
       $this2$i$i$i = $__grp;
       ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
       $this2$i$i$i7 = $__sym;
       ;HEAP32[$this2$i$i$i7+0>>2]=0|0;HEAP32[$this2$i$i$i7+4>>2]=0|0;HEAP32[$this2$i$i$i7+8>>2]=0|0;
       $this2$i$i$i8 = $__sn;
       ;HEAP32[$this2$i$i$i8+0>>2]=0|0;HEAP32[$this2$i$i$i8+4>>2]=0|0;HEAP32[$this2$i$i$i8+8>>2]=0|0;
       __THREW__ = 0;
       invoke_viiiiiiiiii(3,($__intl|0),($79|0),($__loc|0),($tmpcast|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
       $80 = __THREW__; __THREW__ = 0;
       $81 = $80&1;
       L30: do {
        if ($81) {
         $134 = ___cxa_find_matching_catch(-1,-1)|0;
         $135 = tempRet0;
         $$0 = $134;$$01 = $135;
        } else {
         $82 = ($__mbuf);
         $83 = HEAP32[$__fd>>2]|0;
         $84 = ($__n$0|0)>($83|0);
         if ($84) {
          $85 = (($__n$0) - ($83))|0;
          $86 = $85 << 1;
          $87 = HEAP8[$this2$i$i$i8]|0;
          $88 = $87 & 1;
          $89 = ($88<<24>>24)==(0);
          if ($89) {
           $92 = $87&255;
           $93 = $92 >>> 1;
           $94 = $93;
          } else {
           $90 = (($__sn) + 4|0);
           $91 = HEAP32[$90>>2]|0;
           $94 = $91;
          }
          $95 = HEAP8[$this2$i$i$i7]|0;
          $96 = $95 & 1;
          $97 = ($96<<24>>24)==(0);
          if ($97) {
           $100 = $95&255;
           $101 = $100 >>> 1;
           $102 = $101;
          } else {
           $98 = (($__sym) + 4|0);
           $99 = HEAP32[$98>>2]|0;
           $102 = $99;
          }
          $103 = $86 | 1;
          $104 = (($94) + ($103))|0;
          $105 = (($104) + ($102))|0;
          $$pn = $105;
         } else {
          $106 = HEAP8[$this2$i$i$i8]|0;
          $107 = $106 & 1;
          $108 = ($107<<24>>24)==(0);
          if ($108) {
           $111 = $106&255;
           $112 = $111 >>> 1;
           $113 = $112;
          } else {
           $109 = (($__sn) + 4|0);
           $110 = HEAP32[$109>>2]|0;
           $113 = $110;
          }
          $114 = HEAP8[$this2$i$i$i7]|0;
          $115 = $114 & 1;
          $116 = ($115<<24>>24)==(0);
          if ($116) {
           $119 = $114&255;
           $120 = $119 >>> 1;
           $121 = $120;
          } else {
           $117 = (($__sym) + 4|0);
           $118 = HEAP32[$117>>2]|0;
           $121 = $118;
          }
          $122 = (($113) + 2)|0;
          $123 = (($122) + ($121))|0;
          $$pn = $123;
         }
         $124 = (($$pn) + ($83))|0;
         $125 = ($124>>>0)>(100);
         do {
          if ($125) {
           $126 = (_malloc($124)|0);
           $127 = ($126|0)==(0|0);
           if (!($127)) {
            $139 = $126;$__mb$0 = $126;
            break;
           }
           __THREW__ = 0;
           invoke_v(7);
           $128 = __THREW__; __THREW__ = 0;
           $129 = $128&1;
           if (!($129)) {
            $139 = 0;$__mb$0 = 0;
            break;
           }
           $130 = ___cxa_find_matching_catch(-1,-1)|0;
           $131 = tempRet0;
           $$0 = $130;$$01 = $131;
           break L30;
          } else {
           $139 = 0;$__mb$0 = $82;
          }
         } while(0);
         $140 = (($__iob) + 4|0);
         $141 = HEAP32[$140>>2]|0;
         $142 = (($__db$0) + ($__n$0)|0);
         $143 = HEAP8[$__dp]|0;
         $144 = HEAP8[$__ts]|0;
         __THREW__ = 0;
         invoke_viiiiiiiiiiiiiii(1,($__mb$0|0),($__mi|0),($__me|0),($141|0),($__db$0|0),($142|0),($66|0),($79|0),($tmpcast|0),($143|0),($144|0),($__grp|0),($__sym|0),($__sn|0),($83|0));
         $145 = __THREW__; __THREW__ = 0;
         $146 = $145&1;
         do {
          if (!($146)) {
           $147 = ($__s);
           $148 = HEAP32[$147>>2]|0;
           $149 = ($1);
           HEAP32[$149>>2] = $148;
           $150 = HEAP32[$__mi>>2]|0;
           $151 = HEAP32[$__me>>2]|0;
           __THREW__ = 0;
           $152 = $$byval_copy;
           $153 = $$byval_copy;
           $154 = $1;
           ;HEAP32[$153+0>>2]=HEAP32[$154+0>>2]|0;
           invoke_viiiiiii(39,($agg$result|0),($$byval_copy|0),($__mb$0|0),($150|0),($151|0),($__iob|0),($__fl|0));
           $155 = $$byval_copy;
           $156 = __THREW__; __THREW__ = 0;
           $157 = $156&1;
           if ($157) {
            break;
           }
           $158 = ($139|0)==(0|0);
           if (!($158)) {
            _free($139);
           }
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
           $159 = HEAP32[$38>>2]|0;
           $160 = ($159);
           (__ZNSt3__114__shared_count16__release_sharedEv($160)|0);
           $161 = ($35|0)==(0|0);
           if (!($161)) {
            _free($35);
           }
           $162 = ($34|0)==(0|0);
           if ($162) {
            STACKTOP = sp;return;
           }
           _free($34);
           STACKTOP = sp;return;
          }
         } while(0);
         $136 = ___cxa_find_matching_catch(-1,-1)|0;
         $137 = tempRet0;
         $138 = ($139|0)==(0|0);
         if ($138) {
          $$0 = $136;$$01 = $137;
          break;
         }
         _free($139);
         $$0 = $136;$$01 = $137;
        }
       } while(0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
       $$1 = $$0;$$12 = $$01;
       break L21;
      }
     } while(0);
     $62 = (___cxa_allocate_exception(4)|0);
     $63 = $62;
     __ZNSt8bad_castC2Ev($63);
     __THREW__ = 0;
     invoke_viii(12,($62|0),((17096)|0),((143)|0));
     $64 = __THREW__; __THREW__ = 0;
     $65 = $64&1;
     if ($65) {
      label = 45;
      break;
     }
     // unreachable;
    }
   } while(0);
   if ((label|0) == 45) {
    $132 = ___cxa_find_matching_catch(-1,-1)|0;
    $133 = tempRet0;
    $$1 = $132;$$12 = $133;
   }
   $163 = HEAP32[$38>>2]|0;
   $164 = ($163);
   (__ZNSt3__114__shared_count16__release_sharedEv($164)|0);
   $$2 = $$1;$$23 = $$12;$165 = $34;$166 = $35;
  }
 } while(0);
 if ((label|0) == 11) {
  $25 = ___cxa_find_matching_catch(-1,-1)|0;
  $26 = tempRet0;
  $27 = $23;$28 = $24;$eh$lpad$body$index2Z2D = $26;$eh$lpad$body$indexZ2D = $25;
  label = 12;
 }
 if ((label|0) == 12) {
  $$2 = $eh$lpad$body$indexZ2D;$$23 = $eh$lpad$body$index2Z2D;$165 = $27;$166 = $28;
 }
 $167 = ($166|0)==(0|0);
 if (!($167)) {
  _free($166);
 }
 $168 = ($165|0)==(0|0);
 if ($168) {
  ___resumeException($$2|0);
  // unreachable;
 }
 _free($165);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i10 = 0, $storemerge = 0, $tmpcast = 0, $tmpcast1 = 0, $tmpcast2 = 0, $tmpcast3 = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0, u$2 = 0, u$3 = 0, u$4 = 0, u$5 = 0, u$6 = 0, u$7 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $__p$i$i$i$i10 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $1 = sp + 32|0;
 $tmpcast3 = $1;
 $2 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $3 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $tmpcast2 = $3;
 $4 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $5 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $6 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $7 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $tmpcast1 = $7;
 $8 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $9 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $tmpcast = $9;
 $10 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $11 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $12 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $13 = ($__loc);
 $14 = HEAP32[$13>>2]|0;
 if ($__intl) {
  $15 = $__p$i$i$i$i;
  $16 = HEAP32[((8576))>>2]|0;
  $17 = ($16|0)==(-1);
  if (!($17)) {
   $18 = ($__p$i$i$i$i);
   HEAP32[$18>>2] = (8576);
   $19 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$19>>2] = (183);
   $20 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$20>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(((8576)),$15,184);
  }
  $21 = HEAP32[(((8576) + 4|0))>>2]|0;
  $22 = (($21) + -1)|0;
  $23 = (($14) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($14) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $24;
  $28 = $26;
  $29 = (($27) - ($28))|0;
  $30 = $29 >> 2;
  $31 = ($30>>>0)>($22>>>0);
  if (!($31)) {
   $35 = (___cxa_allocate_exception(4)|0);
   $36 = $35;
   __ZNSt8bad_castC2Ev($36);
   ___cxa_throw(($35|0),((17096)|0),((143)|0));
   // unreachable;
  }
  $32 = (($26) + ($22<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)==(0|0);
  if ($34) {
   $35 = (___cxa_allocate_exception(4)|0);
   $36 = $35;
   __ZNSt8bad_castC2Ev($36);
   ___cxa_throw(($35|0),((17096)|0),((143)|0));
   // unreachable;
  }
  $37 = $33;
  $38 = $33;
  $39 = HEAP32[$38>>2]|0;
  do {
   if ($__neg) {
    $40 = (($39) + 44|0);
    $41 = HEAP32[$40>>2]|0;
    FUNCTION_TABLE_vii[$41 & 127]($tmpcast3,$37);
    $42 = $__pat;
    $43 = HEAP32[$1>>2]|0;
    HEAP8[$42]=$43&255;HEAP8[$42+1|0]=($43>>8)&255;HEAP8[$42+2|0]=($43>>16)&255;HEAP8[$42+3|0]=$43>>24;
    $44 = $33;
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) + 32|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_vii[$47 & 127]($2,$37);
    $48 = $__sn;
    $49 = HEAP8[$48]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    if ($51) {
     $55 = $__sn;
     $56 = (($55) + 1|0);
     HEAP8[$56] = 0;
     HEAP8[$48] = 0;
    } else {
     $52 = (($__sn) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     HEAP8[$53] = 0;
     $54 = (($__sn) + 4|0);
     HEAP32[$54>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(77,($__sn|0),0);
    $57 = __THREW__; __THREW__ = 0;
    $58 = $57&1;
    if ($58) {
     $59 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$0 = tempRet0;
     ___clang_call_terminate($59);
     // unreachable;
    } else {
     $60 = $2;
     ;HEAP32[$48+0>>2]=HEAP32[$60+0>>2]|0;HEAP32[$48+4>>2]=HEAP32[$60+4>>2]|0;HEAP32[$48+8>>2]=HEAP32[$60+8>>2]|0;
     ;HEAP32[$60+0>>2]=0|0;HEAP32[$60+4>>2]=0|0;HEAP32[$60+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
     break;
    }
   } else {
    $61 = (($39) + 40|0);
    $62 = HEAP32[$61>>2]|0;
    FUNCTION_TABLE_vii[$62 & 127]($tmpcast2,$37);
    $63 = $__pat;
    $64 = HEAP32[$3>>2]|0;
    HEAP8[$63]=$64&255;HEAP8[$63+1|0]=($64>>8)&255;HEAP8[$63+2|0]=($64>>16)&255;HEAP8[$63+3|0]=$64>>24;
    $65 = $33;
    $66 = HEAP32[$65>>2]|0;
    $67 = (($66) + 28|0);
    $68 = HEAP32[$67>>2]|0;
    FUNCTION_TABLE_vii[$68 & 127]($4,$37);
    $69 = $__sn;
    $70 = HEAP8[$69]|0;
    $71 = $70 & 1;
    $72 = ($71<<24>>24)==(0);
    if ($72) {
     $76 = $__sn;
     $77 = (($76) + 1|0);
     HEAP8[$77] = 0;
     HEAP8[$69] = 0;
    } else {
     $73 = (($__sn) + 8|0);
     $74 = HEAP32[$73>>2]|0;
     HEAP8[$74] = 0;
     $75 = (($__sn) + 4|0);
     HEAP32[$75>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(77,($__sn|0),0);
    $78 = __THREW__; __THREW__ = 0;
    $79 = $78&1;
    if ($79) {
     $80 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$1 = tempRet0;
     ___clang_call_terminate($80);
     // unreachable;
    } else {
     $81 = $4;
     ;HEAP32[$69+0>>2]=HEAP32[$81+0>>2]|0;HEAP32[$69+4>>2]=HEAP32[$81+4>>2]|0;HEAP32[$69+8>>2]=HEAP32[$81+8>>2]|0;
     ;HEAP32[$81+0>>2]=0|0;HEAP32[$81+4>>2]=0|0;HEAP32[$81+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
     break;
    }
   }
  } while(0);
  $82 = $33;
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + 12|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (FUNCTION_TABLE_ii[$85 & 127]($37)|0);
  HEAP8[$__dp] = $86;
  $87 = HEAP32[$82>>2]|0;
  $88 = (($87) + 16|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (FUNCTION_TABLE_ii[$89 & 127]($37)|0);
  HEAP8[$__ts] = $90;
  $91 = $33;
  $92 = HEAP32[$91>>2]|0;
  $93 = (($92) + 20|0);
  $94 = HEAP32[$93>>2]|0;
  FUNCTION_TABLE_vii[$94 & 127]($5,$37);
  $95 = $__grp;
  $96 = HEAP8[$95]|0;
  $97 = $96 & 1;
  $98 = ($97<<24>>24)==(0);
  if ($98) {
   $102 = $__grp;
   $103 = (($102) + 1|0);
   HEAP8[$103] = 0;
   HEAP8[$95] = 0;
  } else {
   $99 = (($__grp) + 8|0);
   $100 = HEAP32[$99>>2]|0;
   HEAP8[$100] = 0;
   $101 = (($__grp) + 4|0);
   HEAP32[$101>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(77,($__grp|0),0);
  $104 = __THREW__; __THREW__ = 0;
  $105 = $104&1;
  if ($105) {
   $106 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$2 = tempRet0;
   ___clang_call_terminate($106);
   // unreachable;
  }
  $107 = $5;
  ;HEAP32[$95+0>>2]=HEAP32[$107+0>>2]|0;HEAP32[$95+4>>2]=HEAP32[$107+4>>2]|0;HEAP32[$95+8>>2]=HEAP32[$107+8>>2]|0;
  ;HEAP32[$107+0>>2]=0|0;HEAP32[$107+4>>2]=0|0;HEAP32[$107+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
  $108 = HEAP32[$91>>2]|0;
  $109 = (($108) + 24|0);
  $110 = HEAP32[$109>>2]|0;
  FUNCTION_TABLE_vii[$110 & 127]($6,$37);
  $111 = $__sym;
  $112 = HEAP8[$111]|0;
  $113 = $112 & 1;
  $114 = ($113<<24>>24)==(0);
  if ($114) {
   $118 = $__sym;
   $119 = (($118) + 1|0);
   HEAP8[$119] = 0;
   HEAP8[$111] = 0;
  } else {
   $115 = (($__sym) + 8|0);
   $116 = HEAP32[$115>>2]|0;
   HEAP8[$116] = 0;
   $117 = (($__sym) + 4|0);
   HEAP32[$117>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(77,($__sym|0),0);
  $120 = __THREW__; __THREW__ = 0;
  $121 = $120&1;
  if ($121) {
   $122 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$3 = tempRet0;
   ___clang_call_terminate($122);
   // unreachable;
  }
  $123 = $6;
  ;HEAP32[$111+0>>2]=HEAP32[$123+0>>2]|0;HEAP32[$111+4>>2]=HEAP32[$123+4>>2]|0;HEAP32[$111+8>>2]=HEAP32[$123+8>>2]|0;
  ;HEAP32[$123+0>>2]=0|0;HEAP32[$123+4>>2]=0|0;HEAP32[$123+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
  $124 = $33;
  $125 = HEAP32[$124>>2]|0;
  $126 = (($125) + 36|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = (FUNCTION_TABLE_ii[$127 & 127]($37)|0);
  $storemerge = $128;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $129 = $__p$i$i$i$i10;
  $130 = HEAP32[((8512))>>2]|0;
  $131 = ($130|0)==(-1);
  if (!($131)) {
   $132 = ($__p$i$i$i$i10);
   HEAP32[$132>>2] = (8512);
   $133 = (($__p$i$i$i$i10) + 4|0);
   HEAP32[$133>>2] = (183);
   $134 = (($__p$i$i$i$i10) + 8|0);
   HEAP32[$134>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(((8512)),$129,184);
  }
  $135 = HEAP32[(((8512) + 4|0))>>2]|0;
  $136 = (($135) + -1)|0;
  $137 = (($14) + 12|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (($14) + 8|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = $138;
  $142 = $140;
  $143 = (($141) - ($142))|0;
  $144 = $143 >> 2;
  $145 = ($144>>>0)>($136>>>0);
  if (!($145)) {
   $149 = (___cxa_allocate_exception(4)|0);
   $150 = $149;
   __ZNSt8bad_castC2Ev($150);
   ___cxa_throw(($149|0),((17096)|0),((143)|0));
   // unreachable;
  }
  $146 = (($140) + ($136<<2)|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = ($147|0)==(0|0);
  if ($148) {
   $149 = (___cxa_allocate_exception(4)|0);
   $150 = $149;
   __ZNSt8bad_castC2Ev($150);
   ___cxa_throw(($149|0),((17096)|0),((143)|0));
   // unreachable;
  }
  $151 = $147;
  $152 = $147;
  $153 = HEAP32[$152>>2]|0;
  do {
   if ($__neg) {
    $154 = (($153) + 44|0);
    $155 = HEAP32[$154>>2]|0;
    FUNCTION_TABLE_vii[$155 & 127]($tmpcast1,$151);
    $156 = $__pat;
    $157 = HEAP32[$7>>2]|0;
    HEAP8[$156]=$157&255;HEAP8[$156+1|0]=($157>>8)&255;HEAP8[$156+2|0]=($157>>16)&255;HEAP8[$156+3|0]=$157>>24;
    $158 = $147;
    $159 = HEAP32[$158>>2]|0;
    $160 = (($159) + 32|0);
    $161 = HEAP32[$160>>2]|0;
    FUNCTION_TABLE_vii[$161 & 127]($8,$151);
    $162 = $__sn;
    $163 = HEAP8[$162]|0;
    $164 = $163 & 1;
    $165 = ($164<<24>>24)==(0);
    if ($165) {
     $169 = $__sn;
     $170 = (($169) + 1|0);
     HEAP8[$170] = 0;
     HEAP8[$162] = 0;
    } else {
     $166 = (($__sn) + 8|0);
     $167 = HEAP32[$166>>2]|0;
     HEAP8[$167] = 0;
     $168 = (($__sn) + 4|0);
     HEAP32[$168>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(77,($__sn|0),0);
    $171 = __THREW__; __THREW__ = 0;
    $172 = $171&1;
    if ($172) {
     $173 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$4 = tempRet0;
     ___clang_call_terminate($173);
     // unreachable;
    } else {
     $174 = $8;
     ;HEAP32[$162+0>>2]=HEAP32[$174+0>>2]|0;HEAP32[$162+4>>2]=HEAP32[$174+4>>2]|0;HEAP32[$162+8>>2]=HEAP32[$174+8>>2]|0;
     ;HEAP32[$174+0>>2]=0|0;HEAP32[$174+4>>2]=0|0;HEAP32[$174+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
     break;
    }
   } else {
    $175 = (($153) + 40|0);
    $176 = HEAP32[$175>>2]|0;
    FUNCTION_TABLE_vii[$176 & 127]($tmpcast,$151);
    $177 = $__pat;
    $178 = HEAP32[$9>>2]|0;
    HEAP8[$177]=$178&255;HEAP8[$177+1|0]=($178>>8)&255;HEAP8[$177+2|0]=($178>>16)&255;HEAP8[$177+3|0]=$178>>24;
    $179 = $147;
    $180 = HEAP32[$179>>2]|0;
    $181 = (($180) + 28|0);
    $182 = HEAP32[$181>>2]|0;
    FUNCTION_TABLE_vii[$182 & 127]($10,$151);
    $183 = $__sn;
    $184 = HEAP8[$183]|0;
    $185 = $184 & 1;
    $186 = ($185<<24>>24)==(0);
    if ($186) {
     $190 = $__sn;
     $191 = (($190) + 1|0);
     HEAP8[$191] = 0;
     HEAP8[$183] = 0;
    } else {
     $187 = (($__sn) + 8|0);
     $188 = HEAP32[$187>>2]|0;
     HEAP8[$188] = 0;
     $189 = (($__sn) + 4|0);
     HEAP32[$189>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(77,($__sn|0),0);
    $192 = __THREW__; __THREW__ = 0;
    $193 = $192&1;
    if ($193) {
     $194 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$5 = tempRet0;
     ___clang_call_terminate($194);
     // unreachable;
    } else {
     $195 = $10;
     ;HEAP32[$183+0>>2]=HEAP32[$195+0>>2]|0;HEAP32[$183+4>>2]=HEAP32[$195+4>>2]|0;HEAP32[$183+8>>2]=HEAP32[$195+8>>2]|0;
     ;HEAP32[$195+0>>2]=0|0;HEAP32[$195+4>>2]=0|0;HEAP32[$195+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
     break;
    }
   }
  } while(0);
  $196 = $147;
  $197 = HEAP32[$196>>2]|0;
  $198 = (($197) + 12|0);
  $199 = HEAP32[$198>>2]|0;
  $200 = (FUNCTION_TABLE_ii[$199 & 127]($151)|0);
  HEAP8[$__dp] = $200;
  $201 = HEAP32[$196>>2]|0;
  $202 = (($201) + 16|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = (FUNCTION_TABLE_ii[$203 & 127]($151)|0);
  HEAP8[$__ts] = $204;
  $205 = $147;
  $206 = HEAP32[$205>>2]|0;
  $207 = (($206) + 20|0);
  $208 = HEAP32[$207>>2]|0;
  FUNCTION_TABLE_vii[$208 & 127]($11,$151);
  $209 = $__grp;
  $210 = HEAP8[$209]|0;
  $211 = $210 & 1;
  $212 = ($211<<24>>24)==(0);
  if ($212) {
   $216 = $__grp;
   $217 = (($216) + 1|0);
   HEAP8[$217] = 0;
   HEAP8[$209] = 0;
  } else {
   $213 = (($__grp) + 8|0);
   $214 = HEAP32[$213>>2]|0;
   HEAP8[$214] = 0;
   $215 = (($__grp) + 4|0);
   HEAP32[$215>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(77,($__grp|0),0);
  $218 = __THREW__; __THREW__ = 0;
  $219 = $218&1;
  if ($219) {
   $220 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$6 = tempRet0;
   ___clang_call_terminate($220);
   // unreachable;
  }
  $221 = $11;
  ;HEAP32[$209+0>>2]=HEAP32[$221+0>>2]|0;HEAP32[$209+4>>2]=HEAP32[$221+4>>2]|0;HEAP32[$209+8>>2]=HEAP32[$221+8>>2]|0;
  ;HEAP32[$221+0>>2]=0|0;HEAP32[$221+4>>2]=0|0;HEAP32[$221+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11);
  $222 = HEAP32[$205>>2]|0;
  $223 = (($222) + 24|0);
  $224 = HEAP32[$223>>2]|0;
  FUNCTION_TABLE_vii[$224 & 127]($12,$151);
  $225 = $__sym;
  $226 = HEAP8[$225]|0;
  $227 = $226 & 1;
  $228 = ($227<<24>>24)==(0);
  if ($228) {
   $232 = $__sym;
   $233 = (($232) + 1|0);
   HEAP8[$233] = 0;
   HEAP8[$225] = 0;
  } else {
   $229 = (($__sym) + 8|0);
   $230 = HEAP32[$229>>2]|0;
   HEAP8[$230] = 0;
   $231 = (($__sym) + 4|0);
   HEAP32[$231>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(77,($__sym|0),0);
  $234 = __THREW__; __THREW__ = 0;
  $235 = $234&1;
  if ($235) {
   $236 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$7 = tempRet0;
   ___clang_call_terminate($236);
   // unreachable;
  }
  $237 = $12;
  ;HEAP32[$225+0>>2]=HEAP32[$237+0>>2]|0;HEAP32[$225+4>>2]=HEAP32[$237+4>>2]|0;HEAP32[$225+8>>2]=HEAP32[$237+8>>2]|0;
  ;HEAP32[$237+0>>2]=0|0;HEAP32[$237+4>>2]=0|0;HEAP32[$237+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($12);
  $238 = $147;
  $239 = HEAP32[$238>>2]|0;
  $240 = (($239) + 36|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = (FUNCTION_TABLE_ii[$241 & 127]($151)|0);
  $storemerge = $242;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i17 = 0, $$01$i$i = 0, $$01$i$i$phi = 0, $$01$i$i15 = 0, $$01$i$i15$phi = 0, $$012$i$i = 0, $$012$i$i$phi = 0, $$050 = 0, $$2 = 0, $$lcssa38 = 0, $$pn = 0, $$pre = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $155$phi = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $180$phi = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $64$phi = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $99$phi = 0, $__d$0$lcssa = 0, $__d$0$lcssa58 = 0, $__d$029 = 0, $__d$1$lcssa73 = 0, $__d$1$lcssa74 = 0, $__d$132 = 0, $__d$132$phi = 0, $__d$2 = 0, $__d$343 = 0, $__f$0$lcssa71 = 0, $__f$0$lcssa72 = 0, $__f$033 = 0, $__f$033$phi = 0, $__f$139 = 0, $__f$139$phi = 0, $__gl$046 = 0;
 var $__gl$1 = 0, $__ig$045 = 0, $__ig$1 = 0, $__ng$044 = 0, $__ng$1 = 0, $__p$049 = 0, $brmerge = 0, $exitcond = 0, $isascii1$i = 0, $or$cond = 0, $scevgep = 0, $scevgep59 = 0, $scevgep61 = 0, $scevgep6162 = 0, $scevgep63 = 0, $umax = 0, $umax60 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $1 = $__ct;
 $2 = $__sn;
 $3 = $__sn;
 $4 = (($3) + 1|0);
 $5 = (($__sn) + 8|0);
 $6 = (($__sn) + 4|0);
 $7 = $__sym;
 $8 = $__flags & 512;
 $9 = ($8|0)==(0);
 $10 = $__sym;
 $11 = (($10) + 1|0);
 $12 = (($__sym) + 8|0);
 $13 = (($__sym) + 4|0);
 $14 = ($__fd|0)>(0);
 $15 = $__grp;
 $16 = $__grp;
 $17 = (($16) + 1|0);
 $18 = (($__grp) + 8|0);
 $19 = (($__grp) + 4|0);
 $20 = (($__ct) + 8|0);
 $21 = (0 - ($__fd))|0;
 $$050 = $__db;$__p$049 = 0;
 while(1) {
  $22 = (($__pat) + ($__p$049)|0);
  $23 = HEAP8[$22]|0;
  $24 = $23 << 24 >> 24;
  L3: do {
   switch ($24|0) {
   case 0:  {
    $25 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $25;
    $$2 = $$050;
    break;
   }
   case 1:  {
    $26 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $26;
    $27 = HEAP32[$1>>2]|0;
    $28 = (($27) + 28|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (FUNCTION_TABLE_iii[$29 & 63]($__ct,32)|0);
    $31 = HEAP32[$__me>>2]|0;
    $32 = (($31) + 1|0);
    HEAP32[$__me>>2] = $32;
    HEAP8[$31] = $30;
    $$2 = $$050;
    break;
   }
   case 3:  {
    $33 = HEAP8[$2]|0;
    $34 = $33 & 1;
    $35 = ($34<<24>>24)==(0);
    if ($35) {
     $37 = $33&255;
     $38 = $37 >>> 1;
     $39 = $38;
    } else {
     $36 = HEAP32[$6>>2]|0;
     $39 = $36;
    }
    $40 = ($39|0)==(0);
    if ($40) {
     $$2 = $$050;
     break L3;
    }
    if ($35) {
     $42 = $4;
    } else {
     $41 = HEAP32[$5>>2]|0;
     $42 = $41;
    }
    $43 = HEAP8[$42]|0;
    $44 = HEAP32[$__me>>2]|0;
    $45 = (($44) + 1|0);
    HEAP32[$__me>>2] = $45;
    HEAP8[$44] = $43;
    $$2 = $$050;
    break;
   }
   case 2:  {
    $46 = HEAP8[$7]|0;
    $47 = $46 & 1;
    $48 = ($47<<24>>24)==(0);
    if ($48) {
     $50 = $46&255;
     $51 = $50 >>> 1;
     $52 = $51;
    } else {
     $49 = HEAP32[$13>>2]|0;
     $52 = $49;
    }
    $53 = ($52|0)==(0);
    $brmerge = $53 | $9;
    if ($brmerge) {
     $$2 = $$050;
     break L3;
    }
    if ($48) {
     $56 = $46&255;
     $57 = $56 >>> 1;
     $58 = $11;$59 = $11;$60 = $57;
    } else {
     $54 = HEAP32[$12>>2]|0;
     $55 = HEAP32[$13>>2]|0;
     $58 = $54;$59 = $54;$60 = $55;
    }
    $61 = (($59) + ($60)|0);
    $62 = HEAP32[$__me>>2]|0;
    $63 = ($58|0)==($61|0);
    if ($63) {
     $$0$lcssa$i$i17 = $62;
    } else {
     $$01$i$i15 = $62;$64 = $58;
     while(1) {
      $65 = HEAP8[$64]|0;
      HEAP8[$$01$i$i15] = $65;
      $66 = (($64) + 1|0);
      $67 = (($$01$i$i15) + 1|0);
      $68 = ($66|0)==($61|0);
      if ($68) {
       $$0$lcssa$i$i17 = $67;
       break;
      } else {
       $64$phi = $66;$$01$i$i15$phi = $67;$64 = $64$phi;$$01$i$i15 = $$01$i$i15$phi;
      }
     }
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i17;
    $$2 = $$050;
    break;
   }
   case 4:  {
    $69 = HEAP32[$__me>>2]|0;
    $70 = (($$050) + 1|0);
    $$$0 = $__neg ? $70 : $$050;
    $71 = ($$$0>>>0)<($__de>>>0);
    L30: do {
     if ($71) {
      $__d$029 = $$$0;
      while(1) {
       $73 = HEAP8[$__d$029]|0;
       $isascii1$i = ($73<<24>>24)>(-1);
       if (!($isascii1$i)) {
        $__d$0$lcssa = $__d$029;
        break L30;
       }
       $74 = $73 << 24 >> 24;
       $75 = HEAP32[$20>>2]|0;
       $76 = (($75) + ($74<<1)|0);
       $77 = HEAP16[$76>>1]|0;
       $78 = $77 & 2048;
       $79 = ($78<<16>>16)==(0);
       $80 = (($__d$029) + 1|0);
       if ($79) {
        $__d$0$lcssa = $__d$029;
        break L30;
       }
       $72 = ($80>>>0)<($__de>>>0);
       if ($72) {
        $__d$029 = $80;
       } else {
        $__d$0$lcssa = $80;
        break;
       }
      }
     } else {
      $__d$0$lcssa = $$$0;
     }
    } while(0);
    $__d$0$lcssa58 = $__d$0$lcssa;
    if ($14) {
     $81 = ($__d$0$lcssa>>>0)>($$$0>>>0);
     if ($81) {
      $82 = (0 - ($__d$0$lcssa58))|0;
      $scevgep = (($$$0) + ($82)|0);
      $scevgep59 = $scevgep;
      $83 = ($scevgep59>>>0)<($21>>>0);
      $umax = $83 ? $21 : $scevgep59;
      $umax60 = $umax;
      $scevgep61 = (($umax60) + ($__fd)|0);
      $scevgep6162 = $scevgep61;
      $84 = $69;$__d$132 = $__d$0$lcssa;$__f$033 = $__fd;
      while(1) {
       $85 = (($__d$132) + -1|0);
       $86 = HEAP8[$85]|0;
       $87 = (($84) + 1|0);
       HEAP32[$__me>>2] = $87;
       HEAP8[$84] = $86;
       $88 = (($__f$033) + -1)|0;
       $89 = ($85>>>0)>($$$0>>>0);
       $90 = ($88|0)>(0);
       $or$cond = $89 & $90;
       if (!($or$cond)) {
        break;
       }
       $$pre = HEAP32[$__me>>2]|0;
       $__f$033$phi = $88;$__d$132$phi = $85;$84 = $$pre;$__f$033 = $__f$033$phi;$__d$132 = $__d$132$phi;
      }
      $scevgep63 = (($__d$0$lcssa) + ($umax)|0);
      if ($90) {
       $__d$1$lcssa74 = $scevgep63;$__f$0$lcssa72 = $scevgep6162;
       label = 32;
      } else {
       $95 = 0;$__d$1$lcssa73 = $scevgep63;$__f$0$lcssa71 = $scevgep6162;
      }
     } else {
      $__d$1$lcssa74 = $__d$0$lcssa;$__f$0$lcssa72 = $__fd;
      label = 32;
     }
     if ((label|0) == 32) {
      label = 0;
      $91 = HEAP32[$1>>2]|0;
      $92 = (($91) + 28|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = (FUNCTION_TABLE_iii[$93 & 63]($__ct,48)|0);
      $95 = $94;$__d$1$lcssa73 = $__d$1$lcssa74;$__f$0$lcssa71 = $__f$0$lcssa72;
     }
     $96 = ($__f$0$lcssa71|0)>(0);
     $97 = HEAP32[$__me>>2]|0;
     $98 = (($97) + 1|0);
     HEAP32[$__me>>2] = $98;
     if ($96) {
      $99 = $97;$__f$139 = $__f$0$lcssa71;
      while(1) {
       HEAP8[$99] = $95;
       $100 = (($__f$139) + -1)|0;
       $101 = ($100|0)>(0);
       $102 = HEAP32[$__me>>2]|0;
       $103 = (($102) + 1|0);
       HEAP32[$__me>>2] = $103;
       if ($101) {
        $__f$139$phi = $100;$99$phi = $102;$__f$139 = $__f$139$phi;$99 = $99$phi;
       } else {
        $$lcssa38 = $102;
        break;
       }
      }
     } else {
      $$lcssa38 = $97;
     }
     HEAP8[$$lcssa38] = $__dp;
     $__d$2 = $__d$1$lcssa73;
    } else {
     $__d$2 = $__d$0$lcssa;
    }
    $104 = ($__d$2|0)==($$$0|0);
    if ($104) {
     $105 = HEAP32[$1>>2]|0;
     $106 = (($105) + 28|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = (FUNCTION_TABLE_iii[$107 & 63]($__ct,48)|0);
     $109 = HEAP32[$__me>>2]|0;
     $110 = (($109) + 1|0);
     HEAP32[$__me>>2] = $110;
     HEAP8[$109] = $108;
    } else {
     $111 = HEAP8[$15]|0;
     $112 = $111 & 1;
     $113 = ($112<<24>>24)==(0);
     if ($113) {
      $115 = $111&255;
      $116 = $115 >>> 1;
      $117 = $116;
     } else {
      $114 = HEAP32[$19>>2]|0;
      $117 = $114;
     }
     $118 = ($117|0)==(0);
     if ($118) {
      $__d$343 = $__d$2;$__gl$046 = -1;$__ig$045 = 0;$__ng$044 = 0;
     } else {
      if ($113) {
       $120 = $17;
      } else {
       $119 = HEAP32[$18>>2]|0;
       $120 = $119;
      }
      $121 = HEAP8[$120]|0;
      $122 = $121 << 24 >> 24;
      $__d$343 = $__d$2;$__gl$046 = $122;$__ig$045 = 0;$__ng$044 = 0;
     }
     while(1) {
      $123 = ($__ng$044|0)==($__gl$046|0);
      do {
       if ($123) {
        $124 = HEAP32[$__me>>2]|0;
        $125 = (($124) + 1|0);
        HEAP32[$__me>>2] = $125;
        HEAP8[$124] = $__ts;
        $126 = (($__ig$045) + 1)|0;
        $127 = HEAP8[$15]|0;
        $128 = $127 & 1;
        $129 = ($128<<24>>24)==(0);
        if ($129) {
         $131 = $127&255;
         $132 = $131 >>> 1;
         $133 = $132;
        } else {
         $130 = HEAP32[$19>>2]|0;
         $133 = $130;
        }
        $134 = ($126>>>0)<($133>>>0);
        if (!($134)) {
         $__gl$1 = $__gl$046;$__ig$1 = $126;$__ng$1 = 0;
         break;
        }
        if ($129) {
         $136 = $17;
        } else {
         $135 = HEAP32[$18>>2]|0;
         $136 = $135;
        }
        $137 = (($136) + ($126)|0);
        $138 = HEAP8[$137]|0;
        $139 = ($138<<24>>24)==(127);
        if ($139) {
         $__gl$1 = -1;$__ig$1 = $126;$__ng$1 = 0;
         break;
        }
        if ($129) {
         $141 = $17;
        } else {
         $140 = HEAP32[$18>>2]|0;
         $141 = $140;
        }
        $142 = (($141) + ($126)|0);
        $143 = HEAP8[$142]|0;
        $144 = $143 << 24 >> 24;
        $__gl$1 = $144;$__ig$1 = $126;$__ng$1 = 0;
       } else {
        $__gl$1 = $__gl$046;$__ig$1 = $__ig$045;$__ng$1 = $__ng$044;
       }
      } while(0);
      $145 = (($__d$343) + -1|0);
      $146 = HEAP8[$145]|0;
      $147 = HEAP32[$__me>>2]|0;
      $148 = (($147) + 1|0);
      HEAP32[$__me>>2] = $148;
      HEAP8[$147] = $146;
      $149 = (($__ng$1) + 1)|0;
      $150 = ($145|0)==($$$0|0);
      if ($150) {
       break;
      } else {
       $__d$343 = $145;$__gl$046 = $__gl$1;$__ig$045 = $__ig$1;$__ng$044 = $149;
      }
     }
    }
    $151 = HEAP32[$__me>>2]|0;
    $152 = ($69|0)==($151|0);
    if ($152) {
     $$2 = $$$0;
     break L3;
    }
    $153 = (($151) + -1|0);
    $154 = ($153>>>0)>($69>>>0);
    if ($154) {
     $$012$i$i = $69;$155 = $153;
    } else {
     $$2 = $$$0;
     break L3;
    }
    while(1) {
     $156 = HEAP8[$$012$i$i]|0;
     $157 = HEAP8[$155]|0;
     HEAP8[$$012$i$i] = $157;
     HEAP8[$155] = $156;
     $158 = (($$012$i$i) + 1|0);
     $159 = (($155) + -1|0);
     $160 = ($158>>>0)<($159>>>0);
     if ($160) {
      $155$phi = $159;$$012$i$i$phi = $158;$155 = $155$phi;$$012$i$i = $$012$i$i$phi;
     } else {
      $$2 = $$$0;
      break;
     }
    }
    break;
   }
   default: {
    $$2 = $$050;
   }
   }
  } while(0);
  $161 = (($__p$049) + 1)|0;
  $exitcond = ($161|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$050 = $$2;$__p$049 = $161;
  }
 }
 $162 = HEAP8[$2]|0;
 $163 = $162 & 1;
 $164 = ($163<<24>>24)==(0);
 if ($164) {
  $166 = $162&255;
  $167 = $166 >>> 1;
  $168 = $167;
 } else {
  $165 = HEAP32[$6>>2]|0;
  $168 = $165;
 }
 $169 = ($168>>>0)>(1);
 if ($169) {
  if ($164) {
   $172 = $162&255;
   $173 = $172 >>> 1;
   $$pn = $4;$174 = $4;$175 = $173;
  } else {
   $170 = HEAP32[$5>>2]|0;
   $171 = HEAP32[$6>>2]|0;
   $$pn = $170;$174 = $170;$175 = $171;
  }
  $176 = (($$pn) + 1|0);
  $177 = (($174) + ($175)|0);
  $178 = HEAP32[$__me>>2]|0;
  $179 = ($176|0)==($177|0);
  if ($179) {
   $$0$lcssa$i$i = $178;
  } else {
   $$01$i$i = $178;$180 = $176;
   while(1) {
    $181 = HEAP8[$180]|0;
    HEAP8[$$01$i$i] = $181;
    $182 = (($180) + 1|0);
    $183 = (($$01$i$i) + 1|0);
    $184 = ($182|0)==($177|0);
    if ($184) {
     $$0$lcssa$i$i = $183;
     break;
    } else {
     $180$phi = $182;$$01$i$i$phi = $183;$180 = $180$phi;$$01$i$i = $$01$i$i$phi;
    }
   }
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $185 = $__flags & 176;
 if ((($185|0) == 32)) {
  $186 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $186;
  STACKTOP = sp;return;
 } else if ((($185|0) == 16)) {
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__p$i$i$i$i = 0;
 var $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $this2$i$i$i = 0, $this2$i$i$i5 = 0, $this2$i$i$i6 = 0, $tmpcast = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $$byval_copy = sp;
 $__p$i$i$i$i = sp + 8|0;
 $__loc = sp + 24|0;
 $__pat = sp + 32|0;
 $tmpcast = $__pat;
 $__dp = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__ts = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__grp = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__sym = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__sn = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__fd = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__mbuf = STACKTOP; STACKTOP = STACKTOP + 104|0;
 $__mi = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__me = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $2 = ($__loc);
 $3 = HEAP32[$2>>2]|0;
 $4 = $__p$i$i$i$i;
 $5 = HEAP32[((9136))>>2]|0;
 $6 = ($5|0)==(-1);
 if ($6) {
  label = 3;
 } else {
  $7 = ($__p$i$i$i$i);
  HEAP32[$7>>2] = (9136);
  $8 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$8>>2] = (183);
  $9 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$9>>2] = 0;
  __THREW__ = 0;
  invoke_viii(25,(((9136))|0),($4|0),(184|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   label = 3;
  }
 }
 L3: do {
  if ((label|0) == 3) {
   $12 = HEAP32[(((9136) + 4|0))>>2]|0;
   $13 = (($12) + -1)|0;
   $14 = (($3) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($3) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $15;
   $19 = $17;
   $20 = (($18) - ($19))|0;
   $21 = $20 >> 2;
   $22 = ($21>>>0)>($13>>>0);
   do {
    if ($22) {
     $23 = (($17) + ($13<<2)|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(0|0);
     if ($25) {
      break;
     }
     $30 = $24;
     $31 = $__digits;
     $32 = HEAP8[$31]|0;
     $33 = $32 & 1;
     $34 = ($33<<24>>24)==(0);
     if ($34) {
      $37 = $32&255;
      $38 = $37 >>> 1;
      $39 = $38;
     } else {
      $35 = (($__digits) + 4|0);
      $36 = HEAP32[$35>>2]|0;
      $39 = $36;
     }
     $40 = ($39|0)==(0);
     if ($40) {
      $55 = 0;
     } else {
      if ($34) {
       $43 = $__digits;
       $44 = (($43) + 1|0);
       $45 = $44;
      } else {
       $41 = (($__digits) + 8|0);
       $42 = HEAP32[$41>>2]|0;
       $45 = $42;
      }
      $46 = HEAP8[$45]|0;
      $47 = $24;
      $48 = HEAP32[$47>>2]|0;
      $49 = (($48) + 28|0);
      $50 = HEAP32[$49>>2]|0;
      __THREW__ = 0;
      $51 = (invoke_iii($50|0,($30|0),45)|0);
      $52 = __THREW__; __THREW__ = 0;
      $53 = $52&1;
      if ($53) {
       break L3;
      }
      $54 = ($46<<24>>24)==($51<<24>>24);
      $55 = $54;
     }
     HEAP32[$__pat>>2] = 0;
     $this2$i$i$i = $__grp;
     ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
     $this2$i$i$i5 = $__sym;
     ;HEAP32[$this2$i$i$i5+0>>2]=0|0;HEAP32[$this2$i$i$i5+4>>2]=0|0;HEAP32[$this2$i$i$i5+8>>2]=0|0;
     $this2$i$i$i6 = $__sn;
     ;HEAP32[$this2$i$i$i6+0>>2]=0|0;HEAP32[$this2$i$i$i6+4>>2]=0|0;HEAP32[$this2$i$i$i6+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(3,($__intl|0),($55|0),($__loc|0),($tmpcast|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $56 = __THREW__; __THREW__ = 0;
     $57 = $56&1;
     L20: do {
      if ($57) {
       $123 = ___cxa_find_matching_catch(-1,-1)|0;
       $124 = tempRet0;
       $$0 = $123;$$01 = $124;
      } else {
       $58 = ($__mbuf);
       $59 = HEAP8[$31]|0;
       $60 = $59 & 1;
       $61 = ($60<<24>>24)==(0);
       if ($61) {
        $64 = $59&255;
        $65 = $64 >>> 1;
        $66 = $65;
       } else {
        $62 = (($__digits) + 4|0);
        $63 = HEAP32[$62>>2]|0;
        $66 = $63;
       }
       $67 = HEAP32[$__fd>>2]|0;
       $68 = ($66|0)>($67|0);
       if ($68) {
        if ($61) {
         $71 = $59&255;
         $72 = $71 >>> 1;
         $73 = $72;
        } else {
         $69 = (($__digits) + 4|0);
         $70 = HEAP32[$69>>2]|0;
         $73 = $70;
        }
        $74 = (($73) - ($67))|0;
        $75 = $74 << 1;
        $76 = HEAP8[$this2$i$i$i6]|0;
        $77 = $76 & 1;
        $78 = ($77<<24>>24)==(0);
        if ($78) {
         $81 = $76&255;
         $82 = $81 >>> 1;
         $83 = $82;
        } else {
         $79 = (($__sn) + 4|0);
         $80 = HEAP32[$79>>2]|0;
         $83 = $80;
        }
        $84 = HEAP8[$this2$i$i$i5]|0;
        $85 = $84 & 1;
        $86 = ($85<<24>>24)==(0);
        if ($86) {
         $89 = $84&255;
         $90 = $89 >>> 1;
         $91 = $90;
        } else {
         $87 = (($__sym) + 4|0);
         $88 = HEAP32[$87>>2]|0;
         $91 = $88;
        }
        $92 = $75 | 1;
        $93 = (($83) + ($92))|0;
        $94 = (($93) + ($91))|0;
        $$pn = $94;
       } else {
        $95 = HEAP8[$this2$i$i$i6]|0;
        $96 = $95 & 1;
        $97 = ($96<<24>>24)==(0);
        if ($97) {
         $100 = $95&255;
         $101 = $100 >>> 1;
         $102 = $101;
        } else {
         $98 = (($__sn) + 4|0);
         $99 = HEAP32[$98>>2]|0;
         $102 = $99;
        }
        $103 = HEAP8[$this2$i$i$i5]|0;
        $104 = $103 & 1;
        $105 = ($104<<24>>24)==(0);
        if ($105) {
         $108 = $103&255;
         $109 = $108 >>> 1;
         $110 = $109;
        } else {
         $106 = (($__sym) + 4|0);
         $107 = HEAP32[$106>>2]|0;
         $110 = $107;
        }
        $111 = (($102) + 2)|0;
        $112 = (($111) + ($110))|0;
        $$pn = $112;
       }
       $113 = (($$pn) + ($67))|0;
       $114 = ($113>>>0)>(100);
       do {
        if ($114) {
         $115 = (_malloc($113)|0);
         $116 = ($115|0)==(0|0);
         if (!($116)) {
          $128 = $59;$129 = $115;$__mb$0 = $115;
          break;
         }
         __THREW__ = 0;
         invoke_v(7);
         $117 = __THREW__; __THREW__ = 0;
         $118 = $117&1;
         if ($118) {
          $119 = ___cxa_find_matching_catch(-1,-1)|0;
          $120 = tempRet0;
          $$0 = $119;$$01 = $120;
          break L20;
         } else {
          $$pre = HEAP8[$31]|0;
          $128 = $$pre;$129 = 0;$__mb$0 = 0;
          break;
         }
        } else {
         $128 = $59;$129 = 0;$__mb$0 = $58;
        }
       } while(0);
       $130 = (($__iob) + 4|0);
       $131 = HEAP32[$130>>2]|0;
       $132 = $128 & 1;
       $133 = ($132<<24>>24)==(0);
       if ($133) {
        $138 = $__digits;
        $139 = (($138) + 1|0);
        $140 = $128&255;
        $141 = $140 >>> 1;
        $142 = $139;$143 = $141;
       } else {
        $134 = (($__digits) + 8|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = (($__digits) + 4|0);
        $137 = HEAP32[$136>>2]|0;
        $142 = $135;$143 = $137;
       }
       $144 = (($142) + ($143)|0);
       $145 = HEAP8[$__dp]|0;
       $146 = HEAP8[$__ts]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(1,($__mb$0|0),($__mi|0),($__me|0),($131|0),($142|0),($144|0),($30|0),($55|0),($tmpcast|0),($145|0),($146|0),($__grp|0),($__sym|0),($__sn|0),($67|0));
       $147 = __THREW__; __THREW__ = 0;
       $148 = $147&1;
       do {
        if (!($148)) {
         $149 = ($__s);
         $150 = HEAP32[$149>>2]|0;
         $151 = ($1);
         HEAP32[$151>>2] = $150;
         $152 = HEAP32[$__mi>>2]|0;
         $153 = HEAP32[$__me>>2]|0;
         __THREW__ = 0;
         $154 = $$byval_copy;
         $155 = $$byval_copy;
         $156 = $1;
         ;HEAP32[$155+0>>2]=HEAP32[$156+0>>2]|0;
         invoke_viiiiiii(39,($agg$result|0),($$byval_copy|0),($__mb$0|0),($152|0),($153|0),($__iob|0),($__fl|0));
         $157 = $$byval_copy;
         $158 = __THREW__; __THREW__ = 0;
         $159 = $158&1;
         if ($159) {
          break;
         }
         $160 = ($129|0)==(0|0);
         if ($160) {
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
          $161 = HEAP32[$2>>2]|0;
          $162 = ($161);
          (__ZNSt3__114__shared_count16__release_sharedEv($162)|0);
          STACKTOP = sp;return;
         }
         _free($129);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
         $161 = HEAP32[$2>>2]|0;
         $162 = ($161);
         (__ZNSt3__114__shared_count16__release_sharedEv($162)|0);
         STACKTOP = sp;return;
        }
       } while(0);
       $125 = ___cxa_find_matching_catch(-1,-1)|0;
       $126 = tempRet0;
       $127 = ($129|0)==(0|0);
       if ($127) {
        $$0 = $125;$$01 = $126;
        break;
       }
       _free($129);
       $$0 = $125;$$01 = $126;
      }
     } while(0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
     $$1 = $$0;$$12 = $$01;
     $163 = HEAP32[$2>>2]|0;
     $164 = ($163);
     (__ZNSt3__114__shared_count16__release_sharedEv($164)|0);
     ___resumeException($$1|0);
     // unreachable;
    }
   } while(0);
   $26 = (___cxa_allocate_exception(4)|0);
   $27 = $26;
   __ZNSt8bad_castC2Ev($27);
   __THREW__ = 0;
   invoke_viii(12,($26|0),((17096)|0),((143)|0));
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    break;
   }
   // unreachable;
  }
 } while(0);
 $121 = ___cxa_find_matching_catch(-1,-1)|0;
 $122 = tempRet0;
 $$1 = $121;$$12 = $122;
 $163 = HEAP32[$2>>2]|0;
 $164 = ($163);
 (__ZNSt3__114__shared_count16__release_sharedEv($164)|0);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0;
 var $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, $this2$i$i$i = 0, $this2$i$i$i6 = 0, $this2$i$i$i7 = 0, $tmpcast = 0, $vararg_buffer = 0, $vararg_buffer6 = 0, $vararg_lifetime_bitcast = 0, $vararg_lifetime_bitcast7 = 0, $vararg_ptr = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy = sp;
 $vararg_buffer6 = sp + 8|0;
 $vararg_lifetime_bitcast7 = $vararg_buffer6;
 $vararg_buffer = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $vararg_lifetime_bitcast = $vararg_buffer;
 $__p$i$i$i$i = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__buf = STACKTOP; STACKTOP = STACKTOP + 104|0;
 $__bb = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__digits = STACKTOP; STACKTOP = STACKTOP + 400|0;
 $__loc = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__pat = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $tmpcast = $__pat;
 $__dp = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__ts = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__grp = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__sym = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__sn = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__fd = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__mbuf = STACKTOP; STACKTOP = STACKTOP + 400|0;
 $__mi = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__me = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $2 = ($__buf);
 HEAP32[$__bb>>2] = $2;
 $3 = $__digits;
 $4 = ($__digits);
 $vararg_ptr = ($vararg_buffer);
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_ptr>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $5 = (_snprintf(($2|0),100,((8888)|0),($vararg_buffer|0))|0);
 $6 = ($5>>>0)>(99);
 L1: do {
  if ($6) {
   $7 = HEAP8[(9032)]|0;
   $8 = ($7<<24>>24)==(0);
   do {
    if ($8) {
     $9 = (___cxa_guard_acquire(((9032)|0))|0);
     $10 = ($9|0)==(0);
     if ($10) {
      break;
     }
     __THREW__ = 0;
     $11 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if ($13) {
      $14 = ___cxa_find_matching_catch(-1,-1)|0;
      $15 = tempRet0;
      ___cxa_guard_abort(((9032)|0));
      $28 = 0;$29 = 0;$eh$lpad$body$index2Z2D = $15;$eh$lpad$body$indexZ2D = $14;
      label = 12;
      break L1;
     } else {
      HEAP32[(9024)>>2] = $11;
      ___cxa_guard_release(((9032)|0));
      break;
     }
    }
   } while(0);
   $16 = HEAP32[(9024)>>2]|0;
   __THREW__ = 0;
   $vararg_ptr8 = ($vararg_buffer6);
   HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
   $17 = (invoke_iiiii(14,($__bb|0),($16|0),((8888)|0),($vararg_buffer6|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   $19 = $18&1;
   if ($19) {
    $24 = 0;$25 = 0;
    label = 11;
    break;
   }
   $20 = HEAP32[$__bb>>2]|0;
   $21 = ($20|0)==(0|0);
   if ($21) {
    __THREW__ = 0;
    invoke_v(7);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     $24 = 0;$25 = 0;
     label = 11;
     break;
    }
    $$pre = HEAP32[$__bb>>2]|0;
    $30 = $$pre;
   } else {
    $30 = $20;
   }
   $31 = $17 << 2;
   $32 = (_malloc($31)|0);
   $33 = $32;
   $34 = ($32|0)==(0|0);
   if (!($34)) {
    $37 = $30;$38 = $33;$__db$0 = $33;$__n$0 = $17;
    label = 15;
    break;
   }
   __THREW__ = 0;
   invoke_v(7);
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   if ($36) {
    $24 = $30;$25 = 0;
    label = 11;
   } else {
    $37 = $30;$38 = 0;$__db$0 = 0;$__n$0 = $17;
    label = 15;
   }
  } else {
   $37 = 0;$38 = 0;$__db$0 = $4;$__n$0 = $5;
   label = 15;
  }
 } while(0);
 do {
  if ((label|0) == 15) {
   __THREW__ = 0;
   invoke_vii(49,($__loc|0),($__iob|0));
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    $24 = $37;$25 = $38;
    label = 11;
    break;
   }
   $41 = ($__loc);
   $42 = HEAP32[$41>>2]|0;
   $43 = $__p$i$i$i$i;
   $44 = HEAP32[((9128))>>2]|0;
   $45 = ($44|0)==(-1);
   if ($45) {
    label = 18;
   } else {
    $46 = ($__p$i$i$i$i);
    HEAP32[$46>>2] = (9128);
    $47 = (($__p$i$i$i$i) + 4|0);
    HEAP32[$47>>2] = (183);
    $48 = (($__p$i$i$i$i) + 8|0);
    HEAP32[$48>>2] = 0;
    __THREW__ = 0;
    invoke_viii(25,(((9128))|0),($43|0),(184|0));
    $49 = __THREW__; __THREW__ = 0;
    $50 = $49&1;
    if ($50) {
     label = 45;
    } else {
     label = 18;
    }
   }
   L21: do {
    if ((label|0) == 18) {
     $51 = HEAP32[(((9128) + 4|0))>>2]|0;
     $52 = (($51) + -1)|0;
     $53 = (($42) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = (($42) + 8|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = $54;
     $58 = $56;
     $59 = (($57) - ($58))|0;
     $60 = $59 >> 2;
     $61 = ($60>>>0)>($52>>>0);
     do {
      if ($61) {
       $62 = (($56) + ($52<<2)|0);
       $63 = HEAP32[$62>>2]|0;
       $64 = ($63|0)==(0|0);
       if ($64) {
        break;
       }
       $69 = $63;
       $70 = HEAP32[$__bb>>2]|0;
       $71 = (($70) + ($__n$0)|0);
       $72 = $63;
       $73 = HEAP32[$72>>2]|0;
       $74 = (($73) + 48|0);
       $75 = HEAP32[$74>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($75|0,($69|0),($70|0),($71|0),($__db$0|0))|0);
       $76 = __THREW__; __THREW__ = 0;
       $77 = $76&1;
       if ($77) {
        label = 45;
        break L21;
       }
       $78 = ($__n$0|0)==(0);
       if ($78) {
        $82 = 0;
       } else {
        $79 = HEAP32[$__bb>>2]|0;
        $80 = HEAP8[$79]|0;
        $81 = ($80<<24>>24)==(45);
        $82 = $81;
       }
       HEAP32[$__pat>>2] = 0;
       $this2$i$i$i = $__grp;
       ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
       $this2$i$i$i6 = $__sym;
       ;HEAP32[$this2$i$i$i6+0>>2]=0|0;HEAP32[$this2$i$i$i6+4>>2]=0|0;HEAP32[$this2$i$i$i6+8>>2]=0|0;
       $this2$i$i$i7 = $__sn;
       ;HEAP32[$this2$i$i$i7+0>>2]=0|0;HEAP32[$this2$i$i$i7+4>>2]=0|0;HEAP32[$this2$i$i$i7+8>>2]=0|0;
       __THREW__ = 0;
       invoke_viiiiiiiiii(4,($__intl|0),($82|0),($__loc|0),($tmpcast|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
       $83 = __THREW__; __THREW__ = 0;
       $84 = $83&1;
       L30: do {
        if ($84) {
         $140 = ___cxa_find_matching_catch(-1,-1)|0;
         $141 = tempRet0;
         $$0 = $140;$$01 = $141;
        } else {
         $85 = $__mbuf;
         $86 = ($__mbuf);
         $87 = HEAP32[$__fd>>2]|0;
         $88 = ($__n$0|0)>($87|0);
         if ($88) {
          $89 = (($__n$0) - ($87))|0;
          $90 = $89 << 1;
          $91 = HEAP8[$this2$i$i$i7]|0;
          $92 = $91 & 1;
          $93 = ($92<<24>>24)==(0);
          if ($93) {
           $96 = $91&255;
           $97 = $96 >>> 1;
           $98 = $97;
          } else {
           $94 = (($__sn) + 4|0);
           $95 = HEAP32[$94>>2]|0;
           $98 = $95;
          }
          $99 = HEAP8[$this2$i$i$i6]|0;
          $100 = $99 & 1;
          $101 = ($100<<24>>24)==(0);
          if ($101) {
           $104 = $99&255;
           $105 = $104 >>> 1;
           $106 = $105;
          } else {
           $102 = (($__sym) + 4|0);
           $103 = HEAP32[$102>>2]|0;
           $106 = $103;
          }
          $107 = $90 | 1;
          $108 = (($98) + ($107))|0;
          $109 = (($108) + ($106))|0;
          $$pn = $109;
         } else {
          $110 = HEAP8[$this2$i$i$i7]|0;
          $111 = $110 & 1;
          $112 = ($111<<24>>24)==(0);
          if ($112) {
           $115 = $110&255;
           $116 = $115 >>> 1;
           $117 = $116;
          } else {
           $113 = (($__sn) + 4|0);
           $114 = HEAP32[$113>>2]|0;
           $117 = $114;
          }
          $118 = HEAP8[$this2$i$i$i6]|0;
          $119 = $118 & 1;
          $120 = ($119<<24>>24)==(0);
          if ($120) {
           $123 = $118&255;
           $124 = $123 >>> 1;
           $125 = $124;
          } else {
           $121 = (($__sym) + 4|0);
           $122 = HEAP32[$121>>2]|0;
           $125 = $122;
          }
          $126 = (($117) + 2)|0;
          $127 = (($126) + ($125))|0;
          $$pn = $127;
         }
         $128 = (($$pn) + ($87))|0;
         $129 = ($128>>>0)>(100);
         do {
          if ($129) {
           $130 = $128 << 2;
           $131 = (_malloc($130)|0);
           $132 = $131;
           $133 = ($131|0)==(0|0);
           if (!($133)) {
            $146 = $132;$__mb$0 = $132;
            break;
           }
           __THREW__ = 0;
           invoke_v(7);
           $134 = __THREW__; __THREW__ = 0;
           $135 = $134&1;
           if (!($135)) {
            $146 = 0;$__mb$0 = 0;
            break;
           }
           $136 = ___cxa_find_matching_catch(-1,-1)|0;
           $137 = tempRet0;
           $$0 = $136;$$01 = $137;
           break L30;
          } else {
           $146 = 0;$__mb$0 = $86;
          }
         } while(0);
         $147 = (($__iob) + 4|0);
         $148 = HEAP32[$147>>2]|0;
         $149 = (($__db$0) + ($__n$0<<2)|0);
         $150 = HEAP32[$__dp>>2]|0;
         $151 = HEAP32[$__ts>>2]|0;
         __THREW__ = 0;
         invoke_viiiiiiiiiiiiiii(2,($__mb$0|0),($__mi|0),($__me|0),($148|0),($__db$0|0),($149|0),($69|0),($82|0),($tmpcast|0),($150|0),($151|0),($__grp|0),($__sym|0),($__sn|0),($87|0));
         $152 = __THREW__; __THREW__ = 0;
         $153 = $152&1;
         do {
          if (!($153)) {
           $154 = ($__s);
           $155 = HEAP32[$154>>2]|0;
           $156 = ($1);
           HEAP32[$156>>2] = $155;
           $157 = HEAP32[$__mi>>2]|0;
           $158 = HEAP32[$__me>>2]|0;
           __THREW__ = 0;
           $159 = $$byval_copy;
           $160 = $$byval_copy;
           $161 = $1;
           ;HEAP32[$160+0>>2]=HEAP32[$161+0>>2]|0;
           invoke_viiiiiii(46,($agg$result|0),($$byval_copy|0),($__mb$0|0),($157|0),($158|0),($__iob|0),($__fl|0));
           $162 = $$byval_copy;
           $163 = __THREW__; __THREW__ = 0;
           $164 = $163&1;
           if ($164) {
            break;
           }
           $165 = ($146|0)==(0|0);
           if (!($165)) {
            $166 = $146;
            _free($166);
           }
           __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
           __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
           $167 = HEAP32[$41>>2]|0;
           $168 = ($167);
           (__ZNSt3__114__shared_count16__release_sharedEv($168)|0);
           $169 = ($38|0)==(0|0);
           if (!($169)) {
            $170 = $38;
            _free($170);
           }
           $171 = ($37|0)==(0|0);
           if ($171) {
            STACKTOP = sp;return;
           }
           _free($37);
           STACKTOP = sp;return;
          }
         } while(0);
         $142 = ___cxa_find_matching_catch(-1,-1)|0;
         $143 = tempRet0;
         $144 = ($146|0)==(0|0);
         if ($144) {
          $$0 = $142;$$01 = $143;
          break;
         }
         $145 = $146;
         _free($145);
         $$0 = $142;$$01 = $143;
        }
       } while(0);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
       $$1 = $$0;$$12 = $$01;
       break L21;
      }
     } while(0);
     $65 = (___cxa_allocate_exception(4)|0);
     $66 = $65;
     __ZNSt8bad_castC2Ev($66);
     __THREW__ = 0;
     invoke_viii(12,($65|0),((17096)|0),((143)|0));
     $67 = __THREW__; __THREW__ = 0;
     $68 = $67&1;
     if ($68) {
      label = 45;
      break;
     }
     // unreachable;
    }
   } while(0);
   if ((label|0) == 45) {
    $138 = ___cxa_find_matching_catch(-1,-1)|0;
    $139 = tempRet0;
    $$1 = $138;$$12 = $139;
   }
   $172 = HEAP32[$41>>2]|0;
   $173 = ($172);
   (__ZNSt3__114__shared_count16__release_sharedEv($173)|0);
   $$2 = $$1;$$23 = $$12;$174 = $37;$175 = $38;
  }
 } while(0);
 if ((label|0) == 11) {
  $26 = ___cxa_find_matching_catch(-1,-1)|0;
  $27 = tempRet0;
  $28 = $24;$29 = $25;$eh$lpad$body$index2Z2D = $27;$eh$lpad$body$indexZ2D = $26;
  label = 12;
 }
 if ((label|0) == 12) {
  $$2 = $eh$lpad$body$indexZ2D;$$23 = $eh$lpad$body$index2Z2D;$174 = $28;$175 = $29;
 }
 $176 = ($175|0)==(0|0);
 if (!($176)) {
  $177 = $175;
  _free($177);
 }
 $178 = ($174|0)==(0|0);
 if ($178) {
  ___resumeException($$2|0);
  // unreachable;
 }
 _free($174);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p$i$i$i$i = 0, $__p$i$i$i$i8 = 0, $storemerge = 0, $tmpcast = 0;
 var $tmpcast1 = 0, $tmpcast2 = 0, $tmpcast3 = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0, u$2 = 0, u$3 = 0, u$4 = 0, u$5 = 0, u$6 = 0, u$7 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $__p$i$i$i$i8 = sp;
 $__p$i$i$i$i = sp + 16|0;
 $1 = sp + 32|0;
 $tmpcast3 = $1;
 $2 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $3 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $tmpcast2 = $3;
 $4 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $5 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $6 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $7 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $tmpcast1 = $7;
 $8 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $9 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $tmpcast = $9;
 $10 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $11 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $12 = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $13 = ($__loc);
 $14 = HEAP32[$13>>2]|0;
 if ($__intl) {
  $15 = $__p$i$i$i$i;
  $16 = HEAP32[((8704))>>2]|0;
  $17 = ($16|0)==(-1);
  if (!($17)) {
   $18 = ($__p$i$i$i$i);
   HEAP32[$18>>2] = (8704);
   $19 = (($__p$i$i$i$i) + 4|0);
   HEAP32[$19>>2] = (183);
   $20 = (($__p$i$i$i$i) + 8|0);
   HEAP32[$20>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(((8704)),$15,184);
  }
  $21 = HEAP32[(((8704) + 4|0))>>2]|0;
  $22 = (($21) + -1)|0;
  $23 = (($14) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($14) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $24;
  $28 = $26;
  $29 = (($27) - ($28))|0;
  $30 = $29 >> 2;
  $31 = ($30>>>0)>($22>>>0);
  if (!($31)) {
   $35 = (___cxa_allocate_exception(4)|0);
   $36 = $35;
   __ZNSt8bad_castC2Ev($36);
   ___cxa_throw(($35|0),((17096)|0),((143)|0));
   // unreachable;
  }
  $32 = (($26) + ($22<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)==(0|0);
  if ($34) {
   $35 = (___cxa_allocate_exception(4)|0);
   $36 = $35;
   __ZNSt8bad_castC2Ev($36);
   ___cxa_throw(($35|0),((17096)|0),((143)|0));
   // unreachable;
  }
  $37 = $33;
  $38 = $33;
  $39 = HEAP32[$38>>2]|0;
  do {
   if ($__neg) {
    $40 = (($39) + 44|0);
    $41 = HEAP32[$40>>2]|0;
    FUNCTION_TABLE_vii[$41 & 127]($tmpcast3,$37);
    $42 = $__pat;
    $43 = HEAP32[$1>>2]|0;
    HEAP8[$42]=$43&255;HEAP8[$42+1|0]=($43>>8)&255;HEAP8[$42+2|0]=($43>>16)&255;HEAP8[$42+3|0]=$43>>24;
    $44 = $33;
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) + 32|0);
    $47 = HEAP32[$46>>2]|0;
    FUNCTION_TABLE_vii[$47 & 127]($2,$37);
    $48 = $__sn;
    $49 = HEAP8[$48]|0;
    $50 = $49 & 1;
    $51 = ($50<<24>>24)==(0);
    if ($51) {
     $55 = (($__sn) + 4|0);
     HEAP32[$55>>2] = 0;
     HEAP8[$48] = 0;
    } else {
     $52 = (($__sn) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     HEAP32[$53>>2] = 0;
     $54 = (($__sn) + 4|0);
     HEAP32[$54>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(79,($__sn|0),0);
    $56 = __THREW__; __THREW__ = 0;
    $57 = $56&1;
    if ($57) {
     $58 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$0 = tempRet0;
     ___clang_call_terminate($58);
     // unreachable;
    } else {
     $59 = $2;
     ;HEAP32[$48+0>>2]=HEAP32[$59+0>>2]|0;HEAP32[$48+4>>2]=HEAP32[$59+4>>2]|0;HEAP32[$48+8>>2]=HEAP32[$59+8>>2]|0;
     ;HEAP32[$59+0>>2]=0|0;HEAP32[$59+4>>2]=0|0;HEAP32[$59+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
     break;
    }
   } else {
    $60 = (($39) + 40|0);
    $61 = HEAP32[$60>>2]|0;
    FUNCTION_TABLE_vii[$61 & 127]($tmpcast2,$37);
    $62 = $__pat;
    $63 = HEAP32[$3>>2]|0;
    HEAP8[$62]=$63&255;HEAP8[$62+1|0]=($63>>8)&255;HEAP8[$62+2|0]=($63>>16)&255;HEAP8[$62+3|0]=$63>>24;
    $64 = $33;
    $65 = HEAP32[$64>>2]|0;
    $66 = (($65) + 28|0);
    $67 = HEAP32[$66>>2]|0;
    FUNCTION_TABLE_vii[$67 & 127]($4,$37);
    $68 = $__sn;
    $69 = HEAP8[$68]|0;
    $70 = $69 & 1;
    $71 = ($70<<24>>24)==(0);
    if ($71) {
     $75 = (($__sn) + 4|0);
     HEAP32[$75>>2] = 0;
     HEAP8[$68] = 0;
    } else {
     $72 = (($__sn) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     HEAP32[$73>>2] = 0;
     $74 = (($__sn) + 4|0);
     HEAP32[$74>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(79,($__sn|0),0);
    $76 = __THREW__; __THREW__ = 0;
    $77 = $76&1;
    if ($77) {
     $78 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$1 = tempRet0;
     ___clang_call_terminate($78);
     // unreachable;
    } else {
     $79 = $4;
     ;HEAP32[$68+0>>2]=HEAP32[$79+0>>2]|0;HEAP32[$68+4>>2]=HEAP32[$79+4>>2]|0;HEAP32[$68+8>>2]=HEAP32[$79+8>>2]|0;
     ;HEAP32[$79+0>>2]=0|0;HEAP32[$79+4>>2]=0|0;HEAP32[$79+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($4);
     break;
    }
   }
  } while(0);
  $80 = $33;
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) + 12|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (FUNCTION_TABLE_ii[$83 & 127]($37)|0);
  HEAP32[$__dp>>2] = $84;
  $85 = HEAP32[$80>>2]|0;
  $86 = (($85) + 16|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (FUNCTION_TABLE_ii[$87 & 127]($37)|0);
  HEAP32[$__ts>>2] = $88;
  $89 = $33;
  $90 = HEAP32[$89>>2]|0;
  $91 = (($90) + 20|0);
  $92 = HEAP32[$91>>2]|0;
  FUNCTION_TABLE_vii[$92 & 127]($5,$37);
  $93 = $__grp;
  $94 = HEAP8[$93]|0;
  $95 = $94 & 1;
  $96 = ($95<<24>>24)==(0);
  if ($96) {
   $100 = $__grp;
   $101 = (($100) + 1|0);
   HEAP8[$101] = 0;
   HEAP8[$93] = 0;
  } else {
   $97 = (($__grp) + 8|0);
   $98 = HEAP32[$97>>2]|0;
   HEAP8[$98] = 0;
   $99 = (($__grp) + 4|0);
   HEAP32[$99>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(77,($__grp|0),0);
  $102 = __THREW__; __THREW__ = 0;
  $103 = $102&1;
  if ($103) {
   $104 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$2 = tempRet0;
   ___clang_call_terminate($104);
   // unreachable;
  }
  $105 = $5;
  ;HEAP32[$93+0>>2]=HEAP32[$105+0>>2]|0;HEAP32[$93+4>>2]=HEAP32[$105+4>>2]|0;HEAP32[$93+8>>2]=HEAP32[$105+8>>2]|0;
  ;HEAP32[$105+0>>2]=0|0;HEAP32[$105+4>>2]=0|0;HEAP32[$105+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
  $106 = $33;
  $107 = HEAP32[$106>>2]|0;
  $108 = (($107) + 24|0);
  $109 = HEAP32[$108>>2]|0;
  FUNCTION_TABLE_vii[$109 & 127]($6,$37);
  $110 = $__sym;
  $111 = HEAP8[$110]|0;
  $112 = $111 & 1;
  $113 = ($112<<24>>24)==(0);
  if ($113) {
   $117 = (($__sym) + 4|0);
   HEAP32[$117>>2] = 0;
   HEAP8[$110] = 0;
  } else {
   $114 = (($__sym) + 8|0);
   $115 = HEAP32[$114>>2]|0;
   HEAP32[$115>>2] = 0;
   $116 = (($__sym) + 4|0);
   HEAP32[$116>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(79,($__sym|0),0);
  $118 = __THREW__; __THREW__ = 0;
  $119 = $118&1;
  if ($119) {
   $120 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$3 = tempRet0;
   ___clang_call_terminate($120);
   // unreachable;
  }
  $121 = $6;
  ;HEAP32[$110+0>>2]=HEAP32[$121+0>>2]|0;HEAP32[$110+4>>2]=HEAP32[$121+4>>2]|0;HEAP32[$110+8>>2]=HEAP32[$121+8>>2]|0;
  ;HEAP32[$121+0>>2]=0|0;HEAP32[$121+4>>2]=0|0;HEAP32[$121+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($6);
  $122 = HEAP32[$80>>2]|0;
  $123 = (($122) + 36|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = (FUNCTION_TABLE_ii[$124 & 127]($37)|0);
  $storemerge = $125;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $126 = $__p$i$i$i$i8;
  $127 = HEAP32[((8640))>>2]|0;
  $128 = ($127|0)==(-1);
  if (!($128)) {
   $129 = ($__p$i$i$i$i8);
   HEAP32[$129>>2] = (8640);
   $130 = (($__p$i$i$i$i8) + 4|0);
   HEAP32[$130>>2] = (183);
   $131 = (($__p$i$i$i$i8) + 8|0);
   HEAP32[$131>>2] = 0;
   __ZNSt3__111__call_onceERVmPvPFvS2_E(((8640)),$126,184);
  }
  $132 = HEAP32[(((8640) + 4|0))>>2]|0;
  $133 = (($132) + -1)|0;
  $134 = (($14) + 12|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = (($14) + 8|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $135;
  $139 = $137;
  $140 = (($138) - ($139))|0;
  $141 = $140 >> 2;
  $142 = ($141>>>0)>($133>>>0);
  if (!($142)) {
   $146 = (___cxa_allocate_exception(4)|0);
   $147 = $146;
   __ZNSt8bad_castC2Ev($147);
   ___cxa_throw(($146|0),((17096)|0),((143)|0));
   // unreachable;
  }
  $143 = (($137) + ($133<<2)|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = ($144|0)==(0|0);
  if ($145) {
   $146 = (___cxa_allocate_exception(4)|0);
   $147 = $146;
   __ZNSt8bad_castC2Ev($147);
   ___cxa_throw(($146|0),((17096)|0),((143)|0));
   // unreachable;
  }
  $148 = $144;
  $149 = $144;
  $150 = HEAP32[$149>>2]|0;
  do {
   if ($__neg) {
    $151 = (($150) + 44|0);
    $152 = HEAP32[$151>>2]|0;
    FUNCTION_TABLE_vii[$152 & 127]($tmpcast1,$148);
    $153 = $__pat;
    $154 = HEAP32[$7>>2]|0;
    HEAP8[$153]=$154&255;HEAP8[$153+1|0]=($154>>8)&255;HEAP8[$153+2|0]=($154>>16)&255;HEAP8[$153+3|0]=$154>>24;
    $155 = $144;
    $156 = HEAP32[$155>>2]|0;
    $157 = (($156) + 32|0);
    $158 = HEAP32[$157>>2]|0;
    FUNCTION_TABLE_vii[$158 & 127]($8,$148);
    $159 = $__sn;
    $160 = HEAP8[$159]|0;
    $161 = $160 & 1;
    $162 = ($161<<24>>24)==(0);
    if ($162) {
     $166 = (($__sn) + 4|0);
     HEAP32[$166>>2] = 0;
     HEAP8[$159] = 0;
    } else {
     $163 = (($__sn) + 8|0);
     $164 = HEAP32[$163>>2]|0;
     HEAP32[$164>>2] = 0;
     $165 = (($__sn) + 4|0);
     HEAP32[$165>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(79,($__sn|0),0);
    $167 = __THREW__; __THREW__ = 0;
    $168 = $167&1;
    if ($168) {
     $169 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$4 = tempRet0;
     ___clang_call_terminate($169);
     // unreachable;
    } else {
     $170 = $8;
     ;HEAP32[$159+0>>2]=HEAP32[$170+0>>2]|0;HEAP32[$159+4>>2]=HEAP32[$170+4>>2]|0;HEAP32[$159+8>>2]=HEAP32[$170+8>>2]|0;
     ;HEAP32[$170+0>>2]=0|0;HEAP32[$170+4>>2]=0|0;HEAP32[$170+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($8);
     break;
    }
   } else {
    $171 = (($150) + 40|0);
    $172 = HEAP32[$171>>2]|0;
    FUNCTION_TABLE_vii[$172 & 127]($tmpcast,$148);
    $173 = $__pat;
    $174 = HEAP32[$9>>2]|0;
    HEAP8[$173]=$174&255;HEAP8[$173+1|0]=($174>>8)&255;HEAP8[$173+2|0]=($174>>16)&255;HEAP8[$173+3|0]=$174>>24;
    $175 = $144;
    $176 = HEAP32[$175>>2]|0;
    $177 = (($176) + 28|0);
    $178 = HEAP32[$177>>2]|0;
    FUNCTION_TABLE_vii[$178 & 127]($10,$148);
    $179 = $__sn;
    $180 = HEAP8[$179]|0;
    $181 = $180 & 1;
    $182 = ($181<<24>>24)==(0);
    if ($182) {
     $186 = (($__sn) + 4|0);
     HEAP32[$186>>2] = 0;
     HEAP8[$179] = 0;
    } else {
     $183 = (($__sn) + 8|0);
     $184 = HEAP32[$183>>2]|0;
     HEAP32[$184>>2] = 0;
     $185 = (($__sn) + 4|0);
     HEAP32[$185>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(79,($__sn|0),0);
    $187 = __THREW__; __THREW__ = 0;
    $188 = $187&1;
    if ($188) {
     $189 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$5 = tempRet0;
     ___clang_call_terminate($189);
     // unreachable;
    } else {
     $190 = $10;
     ;HEAP32[$179+0>>2]=HEAP32[$190+0>>2]|0;HEAP32[$179+4>>2]=HEAP32[$190+4>>2]|0;HEAP32[$179+8>>2]=HEAP32[$190+8>>2]|0;
     ;HEAP32[$190+0>>2]=0|0;HEAP32[$190+4>>2]=0|0;HEAP32[$190+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($10);
     break;
    }
   }
  } while(0);
  $191 = $144;
  $192 = HEAP32[$191>>2]|0;
  $193 = (($192) + 12|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = (FUNCTION_TABLE_ii[$194 & 127]($148)|0);
  HEAP32[$__dp>>2] = $195;
  $196 = HEAP32[$191>>2]|0;
  $197 = (($196) + 16|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = (FUNCTION_TABLE_ii[$198 & 127]($148)|0);
  HEAP32[$__ts>>2] = $199;
  $200 = $144;
  $201 = HEAP32[$200>>2]|0;
  $202 = (($201) + 20|0);
  $203 = HEAP32[$202>>2]|0;
  FUNCTION_TABLE_vii[$203 & 127]($11,$148);
  $204 = $__grp;
  $205 = HEAP8[$204]|0;
  $206 = $205 & 1;
  $207 = ($206<<24>>24)==(0);
  if ($207) {
   $211 = $__grp;
   $212 = (($211) + 1|0);
   HEAP8[$212] = 0;
   HEAP8[$204] = 0;
  } else {
   $208 = (($__grp) + 8|0);
   $209 = HEAP32[$208>>2]|0;
   HEAP8[$209] = 0;
   $210 = (($__grp) + 4|0);
   HEAP32[$210>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(77,($__grp|0),0);
  $213 = __THREW__; __THREW__ = 0;
  $214 = $213&1;
  if ($214) {
   $215 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$6 = tempRet0;
   ___clang_call_terminate($215);
   // unreachable;
  }
  $216 = $11;
  ;HEAP32[$204+0>>2]=HEAP32[$216+0>>2]|0;HEAP32[$204+4>>2]=HEAP32[$216+4>>2]|0;HEAP32[$204+8>>2]=HEAP32[$216+8>>2]|0;
  ;HEAP32[$216+0>>2]=0|0;HEAP32[$216+4>>2]=0|0;HEAP32[$216+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11);
  $217 = $144;
  $218 = HEAP32[$217>>2]|0;
  $219 = (($218) + 24|0);
  $220 = HEAP32[$219>>2]|0;
  FUNCTION_TABLE_vii[$220 & 127]($12,$148);
  $221 = $__sym;
  $222 = HEAP8[$221]|0;
  $223 = $222 & 1;
  $224 = ($223<<24>>24)==(0);
  if ($224) {
   $228 = (($__sym) + 4|0);
   HEAP32[$228>>2] = 0;
   HEAP8[$221] = 0;
  } else {
   $225 = (($__sym) + 8|0);
   $226 = HEAP32[$225>>2]|0;
   HEAP32[$226>>2] = 0;
   $227 = (($__sym) + 4|0);
   HEAP32[$227>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(79,($__sym|0),0);
  $229 = __THREW__; __THREW__ = 0;
  $230 = $229&1;
  if ($230) {
   $231 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$7 = tempRet0;
   ___clang_call_terminate($231);
   // unreachable;
  }
  $232 = $12;
  ;HEAP32[$221+0>>2]=HEAP32[$232+0>>2]|0;HEAP32[$221+4>>2]=HEAP32[$232+4>>2]|0;HEAP32[$221+8>>2]=HEAP32[$232+8>>2]|0;
  ;HEAP32[$232+0>>2]=0|0;HEAP32[$232+4>>2]=0|0;HEAP32[$232+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($12);
  $233 = HEAP32[$191>>2]|0;
  $234 = (($233) + 36|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = (FUNCTION_TABLE_ii[$235 & 127]($148)|0);
  $storemerge = $236;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i22 = 0, $$01$i$i = 0, $$01$i$i$phi = 0, $$01$i$i19 = 0, $$012$i$i = 0, $$012$i$i$phi = 0, $$059 = 0, $$2 = 0, $$lcssa44 = 0, $$pn = 0, $$promoted4$i$i = 0, $$promoted4$i$i13 = 0, $$sum = 0, $$sum33 = 0, $$sum75 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $150$phi = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $177$phi = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $61$phi = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $78$phi = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $94$phi = 0, $95 = 0, $95$phi = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$034 = 0, $__d$034$phi = 0, $__d$1$lcssa7880 = 0, $__d$1$lcssa79 = 0, $__d$137 = 0, $__d$137$phi = 0, $__d$2 = 0, $__d$353 = 0, $__f$0$lcssa77 = 0, $__f$038 = 0, $__f$038$phi = 0, $__f$145 = 0;
 var $__f$145$phi = 0, $__gl$056 = 0, $__gl$1 = 0, $__ig$055 = 0, $__ig$1 = 0, $__me$promoted = 0, $__ng$054 = 0, $__ng$1 = 0, $__p$058 = 0, $brmerge = 0, $exitcond = 0, $or$cond = 0, $scevgep = 0, $scevgep$i$i = 0, $scevgep$i$i14 = 0, $scevgep3$i$i = 0, $scevgep3$i$i15 = 0, $scevgep6$i$i = 0, $scevgep6$i$i20 = 0, $scevgep70 = 0;
 var $uglygep$i$i = 0, $uglygep$i$i16 = 0, $uglygep5$i$i = 0, $uglygep5$i$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $1 = $__ct;
 $2 = $__sn;
 $3 = (($__sn) + 4|0);
 $4 = (($__sn) + 8|0);
 $5 = $__sym;
 $6 = $__flags & 512;
 $7 = ($6|0)==(0);
 $8 = (($__sym) + 4|0);
 $9 = (($__sym) + 8|0);
 $10 = ($__fd|0)>(0);
 $11 = $__grp;
 $12 = $__grp;
 $13 = (($12) + 1|0);
 $14 = (($__grp) + 8|0);
 $15 = (($__grp) + 4|0);
 $16 = $__ct;
 $$059 = $__db;$__p$058 = 0;
 while(1) {
  $17 = (($__pat) + ($__p$058)|0);
  $18 = HEAP8[$17]|0;
  $19 = $18 << 24 >> 24;
  L3: do {
   switch ($19|0) {
   case 0:  {
    $20 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $20;
    $$2 = $$059;
    break;
   }
   case 4:  {
    $67 = HEAP32[$__me>>2]|0;
    $68 = (($$059) + 4|0);
    $$$0 = $__neg ? $68 : $$059;
    $69 = ($$$0>>>0)<($__de>>>0);
    L6: do {
     if ($69) {
      $__d$034 = $$$0;
      while(1) {
       $71 = HEAP32[$__d$034>>2]|0;
       $72 = HEAP32[$16>>2]|0;
       $73 = (($72) + 12|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = (FUNCTION_TABLE_iiii[$74 & 63]($__ct,2048,$71)|0);
       $76 = (($__d$034) + 4|0);
       if (!($75)) {
        $__d$0$lcssa = $__d$034;
        break L6;
       }
       $70 = ($76>>>0)<($__de>>>0);
       if ($70) {
        $__d$034$phi = $76;$__d$034 = $__d$034$phi;
       } else {
        $__d$0$lcssa = $76;
        break;
       }
      }
     } else {
      $__d$0$lcssa = $$$0;
     }
    } while(0);
    if ($10) {
     $77 = ($__d$0$lcssa>>>0)>($$$0>>>0);
     do {
      if ($77) {
       $__me$promoted = HEAP32[$__me>>2]|0;
       $78 = $__me$promoted;$__d$137 = $__d$0$lcssa;$__f$038 = $__fd;
       while(1) {
        $79 = (($__d$137) + -4|0);
        $80 = HEAP32[$79>>2]|0;
        $81 = (($78) + 4|0);
        HEAP32[$78>>2] = $80;
        $82 = (($__f$038) + -1)|0;
        $83 = ($79>>>0)>($$$0>>>0);
        $84 = ($82|0)>(0);
        $or$cond = $83 & $84;
        if ($or$cond) {
         $__f$038$phi = $82;$__d$137$phi = $79;$78$phi = $81;$__f$038 = $__f$038$phi;$__d$137 = $__d$137$phi;$78 = $78$phi;
        } else {
         break;
        }
       }
       HEAP32[$__me>>2] = $81;
       if ($84) {
        $__d$1$lcssa79 = $79;$__f$0$lcssa77 = $82;
        label = 34;
        break;
       }
       $85 = HEAP32[$__me>>2]|0;
       $86 = (($85) + 4|0);
       HEAP32[$__me>>2] = $86;
       $$lcssa44 = $85;$__d$1$lcssa7880 = $79;
      } else {
       $__d$1$lcssa79 = $__d$0$lcssa;$__f$0$lcssa77 = $__fd;
       label = 34;
      }
     } while(0);
     do {
      if ((label|0) == 34) {
       label = 0;
       $87 = HEAP32[$1>>2]|0;
       $88 = (($87) + 44|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = (FUNCTION_TABLE_iii[$89 & 63]($__ct,48)|0);
       $91 = ($__f$0$lcssa77|0)>(0);
       $92 = HEAP32[$__me>>2]|0;
       $93 = (($92) + 4|0);
       HEAP32[$__me>>2] = $93;
       if ($91) {
        $94 = $93;$95 = $92;$__f$145 = $__f$0$lcssa77;
       } else {
        $$lcssa44 = $92;$__d$1$lcssa7880 = $__d$1$lcssa79;
        break;
       }
       while(1) {
        HEAP32[$95>>2] = $90;
        $96 = (($__f$145) + -1)|0;
        $97 = ($96|0)>(0);
        $98 = (($94) + 4|0);
        if ($97) {
         $__f$145$phi = $96;$95$phi = $94;$94$phi = $98;$__f$145 = $__f$145$phi;$95 = $95$phi;$94 = $94$phi;
        } else {
         break;
        }
       }
       $$sum75 = (($__f$0$lcssa77) + 1)|0;
       $scevgep = (($92) + ($$sum75<<2)|0);
       $scevgep70 = (($92) + ($__f$0$lcssa77<<2)|0);
       HEAP32[$__me>>2] = $scevgep;
       $$lcssa44 = $scevgep70;$__d$1$lcssa7880 = $__d$1$lcssa79;
      }
     } while(0);
     HEAP32[$$lcssa44>>2] = $__dp;
     $__d$2 = $__d$1$lcssa7880;
    } else {
     $__d$2 = $__d$0$lcssa;
    }
    $99 = ($__d$2|0)==($$$0|0);
    if ($99) {
     $100 = HEAP32[$1>>2]|0;
     $101 = (($100) + 44|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = (FUNCTION_TABLE_iii[$102 & 63]($__ct,48)|0);
     $104 = HEAP32[$__me>>2]|0;
     $105 = (($104) + 4|0);
     HEAP32[$__me>>2] = $105;
     HEAP32[$104>>2] = $103;
     $146 = $105;
    } else {
     $106 = HEAP8[$11]|0;
     $107 = $106 & 1;
     $108 = ($107<<24>>24)==(0);
     if ($108) {
      $110 = $106&255;
      $111 = $110 >>> 1;
      $112 = $111;
     } else {
      $109 = HEAP32[$15>>2]|0;
      $112 = $109;
     }
     $113 = ($112|0)==(0);
     if ($113) {
      $__d$353 = $__d$2;$__gl$056 = -1;$__ig$055 = 0;$__ng$054 = 0;
     } else {
      if ($108) {
       $115 = $13;
      } else {
       $114 = HEAP32[$14>>2]|0;
       $115 = $114;
      }
      $116 = HEAP8[$115]|0;
      $117 = $116 << 24 >> 24;
      $__d$353 = $__d$2;$__gl$056 = $117;$__ig$055 = 0;$__ng$054 = 0;
     }
     while(1) {
      $118 = ($__ng$054|0)==($__gl$056|0);
      $119 = HEAP32[$__me>>2]|0;
      do {
       if ($118) {
        $120 = (($119) + 4|0);
        HEAP32[$__me>>2] = $120;
        HEAP32[$119>>2] = $__ts;
        $121 = (($__ig$055) + 1)|0;
        $122 = HEAP8[$11]|0;
        $123 = $122 & 1;
        $124 = ($123<<24>>24)==(0);
        if ($124) {
         $126 = $122&255;
         $127 = $126 >>> 1;
         $128 = $127;
        } else {
         $125 = HEAP32[$15>>2]|0;
         $128 = $125;
        }
        $129 = ($121>>>0)<($128>>>0);
        if (!($129)) {
         $140 = $120;$__gl$1 = $__gl$056;$__ig$1 = $121;$__ng$1 = 0;
         break;
        }
        if ($124) {
         $131 = $13;
        } else {
         $130 = HEAP32[$14>>2]|0;
         $131 = $130;
        }
        $132 = (($131) + ($121)|0);
        $133 = HEAP8[$132]|0;
        $134 = ($133<<24>>24)==(127);
        if ($134) {
         $140 = $120;$__gl$1 = -1;$__ig$1 = $121;$__ng$1 = 0;
         break;
        }
        if ($124) {
         $136 = $13;
        } else {
         $135 = HEAP32[$14>>2]|0;
         $136 = $135;
        }
        $137 = (($136) + ($121)|0);
        $138 = HEAP8[$137]|0;
        $139 = $138 << 24 >> 24;
        $140 = $120;$__gl$1 = $139;$__ig$1 = $121;$__ng$1 = 0;
       } else {
        $140 = $119;$__gl$1 = $__gl$056;$__ig$1 = $__ig$055;$__ng$1 = $__ng$054;
       }
      } while(0);
      $141 = (($__d$353) + -4|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($140) + 4|0);
      HEAP32[$__me>>2] = $143;
      HEAP32[$140>>2] = $142;
      $144 = (($__ng$1) + 1)|0;
      $145 = ($141|0)==($$$0|0);
      if ($145) {
       $146 = $143;
       break;
      } else {
       $__d$353 = $141;$__gl$056 = $__gl$1;$__ig$055 = $__ig$1;$__ng$054 = $144;
      }
     }
    }
    $147 = ($67|0)==($146|0);
    if ($147) {
     $$2 = $$$0;
     break L3;
    }
    $148 = (($146) + -4|0);
    $149 = ($148>>>0)>($67>>>0);
    if ($149) {
     $$012$i$i = $67;$150 = $148;
    } else {
     $$2 = $$$0;
     break L3;
    }
    while(1) {
     $151 = HEAP32[$$012$i$i>>2]|0;
     $152 = HEAP32[$150>>2]|0;
     HEAP32[$$012$i$i>>2] = $152;
     HEAP32[$150>>2] = $151;
     $153 = (($$012$i$i) + 4|0);
     $154 = (($150) + -4|0);
     $155 = ($153>>>0)<($154>>>0);
     if ($155) {
      $150$phi = $154;$$012$i$i$phi = $153;$150 = $150$phi;$$012$i$i = $$012$i$i$phi;
     } else {
      $$2 = $$$0;
      break;
     }
    }
    break;
   }
   case 3:  {
    $28 = HEAP8[$2]|0;
    $29 = $28 & 1;
    $30 = ($29<<24>>24)==(0);
    if ($30) {
     $32 = $28&255;
     $33 = $32 >>> 1;
     $34 = $33;
    } else {
     $31 = HEAP32[$3>>2]|0;
     $34 = $31;
    }
    $35 = ($34|0)==(0);
    if ($35) {
     $$2 = $$059;
     break L3;
    }
    if ($30) {
     $37 = $3;
    } else {
     $36 = HEAP32[$4>>2]|0;
     $37 = $36;
    }
    $38 = HEAP32[$37>>2]|0;
    $39 = HEAP32[$__me>>2]|0;
    $40 = (($39) + 4|0);
    HEAP32[$__me>>2] = $40;
    HEAP32[$39>>2] = $38;
    $$2 = $$059;
    break;
   }
   case 2:  {
    $41 = HEAP8[$5]|0;
    $42 = $41 & 1;
    $43 = ($42<<24>>24)==(0);
    if ($43) {
     $45 = $41&255;
     $46 = $45 >>> 1;
     $47 = $46;
    } else {
     $44 = HEAP32[$8>>2]|0;
     $47 = $44;
    }
    $48 = ($47|0)==(0);
    $brmerge = $48 | $7;
    if ($brmerge) {
     $$2 = $$059;
     break L3;
    }
    if ($43) {
     $51 = $41&255;
     $52 = $51 >>> 1;
     $53 = $8;$54 = $8;$55 = $52;
    } else {
     $49 = HEAP32[$9>>2]|0;
     $50 = HEAP32[$8>>2]|0;
     $53 = $49;$54 = $49;$55 = $50;
    }
    $56 = (($54) + ($55<<2)|0);
    $57 = HEAP32[$__me>>2]|0;
    $58 = ($53|0)==($56|0);
    if ($58) {
     $$0$lcssa$i$i22 = $57;
    } else {
     $$promoted4$i$i13 = $53;
     $$sum33 = (($55) + -1)|0;
     $scevgep$i$i14 = (($54) + ($$sum33<<2)|0);
     $scevgep3$i$i15 = $scevgep$i$i14;
     $59 = (0 - ($$promoted4$i$i13))|0;
     $uglygep$i$i16 = (($scevgep3$i$i15) + ($59)|0);
     $uglygep5$i$i17 = $uglygep$i$i16;
     $60 = $uglygep5$i$i17 >>> 2;
     $$01$i$i19 = $57;$61 = $53;
     while(1) {
      $62 = HEAP32[$61>>2]|0;
      HEAP32[$$01$i$i19>>2] = $62;
      $63 = (($61) + 4|0);
      $64 = ($63|0)==($56|0);
      if ($64) {
       break;
      }
      $65 = (($$01$i$i19) + 4|0);
      $61$phi = $63;$$01$i$i19 = $65;$61 = $61$phi;
     }
     $66 = (($60) + 1)|0;
     $scevgep6$i$i20 = (($57) + ($66<<2)|0);
     $$0$lcssa$i$i22 = $scevgep6$i$i20;
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i22;
    $$2 = $$059;
    break;
   }
   case 1:  {
    $21 = HEAP32[$__me>>2]|0;
    HEAP32[$__mi>>2] = $21;
    $22 = HEAP32[$1>>2]|0;
    $23 = (($22) + 44|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (FUNCTION_TABLE_iii[$24 & 63]($__ct,32)|0);
    $26 = HEAP32[$__me>>2]|0;
    $27 = (($26) + 4|0);
    HEAP32[$__me>>2] = $27;
    HEAP32[$26>>2] = $25;
    $$2 = $$059;
    break;
   }
   default: {
    $$2 = $$059;
   }
   }
  } while(0);
  $156 = (($__p$058) + 1)|0;
  $exitcond = ($156|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$059 = $$2;$__p$058 = $156;
  }
 }
 $157 = HEAP8[$2]|0;
 $158 = $157 & 1;
 $159 = ($158<<24>>24)==(0);
 if ($159) {
  $161 = $157&255;
  $162 = $161 >>> 1;
  $163 = $162;
 } else {
  $160 = HEAP32[$3>>2]|0;
  $163 = $160;
 }
 $164 = ($163>>>0)>(1);
 if ($164) {
  if ($159) {
   $167 = $157&255;
   $168 = $167 >>> 1;
   $$pn = $3;$169 = $3;$170 = $168;
  } else {
   $165 = HEAP32[$4>>2]|0;
   $166 = HEAP32[$3>>2]|0;
   $$pn = $165;$169 = $165;$170 = $166;
  }
  $171 = (($$pn) + 4|0);
  $172 = (($169) + ($170<<2)|0);
  $173 = HEAP32[$__me>>2]|0;
  $174 = ($171|0)==($172|0);
  if ($174) {
   $$0$lcssa$i$i = $173;
  } else {
   $$promoted4$i$i = $171;
   $$sum = (($170) + -1)|0;
   $scevgep$i$i = (($169) + ($$sum<<2)|0);
   $scevgep3$i$i = $scevgep$i$i;
   $175 = (0 - ($$promoted4$i$i))|0;
   $uglygep$i$i = (($scevgep3$i$i) + ($175)|0);
   $uglygep5$i$i = $uglygep$i$i;
   $176 = $uglygep5$i$i >>> 2;
   $$01$i$i = $173;$177 = $171;
   while(1) {
    $178 = HEAP32[$177>>2]|0;
    HEAP32[$$01$i$i>>2] = $178;
    $179 = (($177) + 4|0);
    $180 = (($$01$i$i) + 4|0);
    $181 = ($179|0)==($172|0);
    if ($181) {
     break;
    } else {
     $177$phi = $179;$$01$i$i$phi = $180;$177 = $177$phi;$$01$i$i = $$01$i$i$phi;
    }
   }
   $182 = (($176) + 1)|0;
   $scevgep6$i$i = (($173) + ($182<<2)|0);
   $$0$lcssa$i$i = $scevgep6$i$i;
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $183 = $__flags & 176;
 if ((($183|0) == 32)) {
  $184 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $184;
  STACKTOP = sp;return;
 } else if ((($183|0) == 16)) {
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0;
 var $__me = 0, $__mi = 0, $__p$i$i$i$i = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $this2$i$i$i = 0, $this2$i$i$i5 = 0, $this2$i$i$i6 = 0, $tmpcast = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40|0;
 $$byval_copy = sp;
 $__p$i$i$i$i = sp + 8|0;
 $__loc = sp + 24|0;
 $__pat = sp + 32|0;
 $tmpcast = $__pat;
 $__dp = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__ts = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__grp = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__sym = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__sn = STACKTOP; STACKTOP = STACKTOP + 16|0;
 $__fd = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__mbuf = STACKTOP; STACKTOP = STACKTOP + 400|0;
 $__mi = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $__me = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = STACKTOP; STACKTOP = STACKTOP + 8|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 $2 = ($__loc);
 $3 = HEAP32[$2>>2]|0;
 $4 = $__p$i$i$i$i;
 $5 = HEAP32[((9128))>>2]|0;
 $6 = ($5|0)==(-1);
 if ($6) {
  label = 3;
 } else {
  $7 = ($__p$i$i$i$i);
  HEAP32[$7>>2] = (9128);
  $8 = (($__p$i$i$i$i) + 4|0);
  HEAP32[$8>>2] = (183);
  $9 = (($__p$i$i$i$i) + 8|0);
  HEAP32[$9>>2] = 0;
  __THREW__ = 0;
  invoke_viii(25,(((9128))|0),($4|0),(184|0));
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   label = 3;
  }
 }
 L3: do {
  if ((label|0) == 3) {
   $12 = HEAP32[(((9128) + 4|0))>>2]|0;
   $13 = (($12) + -1)|0;
   $14 = (($3) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (($3) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = $15;
   $19 = $17;
   $20 = (($18) - ($19))|0;
   $21 = $20 >> 2;
   $22 = ($21>>>0)>($13>>>0);
   do {
    if ($22) {
     $23 = (($17) + ($13<<2)|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = ($24|0)==(0|0);
     if ($25) {
      break;
     }
     $30 = $24;
     $31 = $__digits;
     $32 = HEAP8[$31]|0;
     $33 = $32 & 1;
     $34 = ($33<<24>>24)==(0);
     if ($34) {
      $37 = $32&255;
      $38 = $37 >>> 1;
      $39 = $38;
     } else {
      $35 = (($__digits) + 4|0);
      $36 = HEAP32[$35>>2]|0;
      $39 = $36;
     }
     $40 = ($39|0)==(0);
     if ($40) {
      $54 = 0;
     } else {
      if ($34) {
       $43 = (($__digits) + 4|0);
       $44 = $43;
      } else {
       $41 = (($__digits) + 8|0);
       $42 = HEAP32[$41>>2]|0;
       $44 = $42;
      }
      $45 = HEAP32[$44>>2]|0;
      $46 = $24;
      $47 = HEAP32[$46>>2]|0;
      $48 = (($47) + 44|0);
      $49 = HEAP32[$48>>2]|0;
      __THREW__ = 0;
      $50 = (invoke_iii($49|0,($30|0),45)|0);
      $51 = __THREW__; __THREW__ = 0;
      $52 = $51&1;
      if ($52) {
       break L3;
      }
      $53 = ($45|0)==($50|0);
      $54 = $53;
     }
     HEAP32[$__pat>>2] = 0;
     $this2$i$i$i = $__grp;
     ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
     $this2$i$i$i5 = $__sym;
     ;HEAP32[$this2$i$i$i5+0>>2]=0|0;HEAP32[$this2$i$i$i5+4>>2]=0|0;HEAP32[$this2$i$i$i5+8>>2]=0|0;
     $this2$i$i$i6 = $__sn;
     ;HEAP32[$this2$i$i$i6+0>>2]=0|0;HEAP32[$this2$i$i$i6+4>>2]=0|0;HEAP32[$this2$i$i$i6+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(4,($__intl|0),($54|0),($__loc|0),($tmpcast|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $55 = __THREW__; __THREW__ = 0;
     $56 = $55&1;
     L20: do {
      if ($56) {
       $125 = ___cxa_find_matching_catch(-1,-1)|0;
       $126 = tempRet0;
       $$0 = $125;$$01 = $126;
      } else {
       $57 = $__mbuf;
       $58 = ($__mbuf);
       $59 = HEAP8[$31]|0;
       $60 = $59 & 1;
       $61 = ($60<<24>>24)==(0);
       if ($61) {
        $64 = $59&255;
        $65 = $64 >>> 1;
        $66 = $65;
       } else {
        $62 = (($__digits) + 4|0);
        $63 = HEAP32[$62>>2]|0;
        $66 = $63;
       }
       $67 = HEAP32[$__fd>>2]|0;
       $68 = ($66|0)>($67|0);
       if ($68) {
        if ($61) {
         $71 = $59&255;
         $72 = $71 >>> 1;
         $73 = $72;
        } else {
         $69 = (($__digits) + 4|0);
         $70 = HEAP32[$69>>2]|0;
         $73 = $70;
        }
        $74 = (($73) - ($67))|0;
        $75 = $74 << 1;
        $76 = HEAP8[$this2$i$i$i6]|0;
        $77 = $76 & 1;
        $78 = ($77<<24>>24)==(0);
        if ($78) {
         $81 = $76&255;
         $82 = $81 >>> 1;
         $83 = $82;
        } else {
         $79 = (($__sn) + 4|0);
         $80 = HEAP32[$79>>2]|0;
         $83 = $80;
        }
        $84 = HEAP8[$this2$i$i$i5]|0;
        $85 = $84 & 1;
        $86 = ($85<<24>>24)==(0);
        if ($86) {
         $89 = $84&255;
         $90 = $89 >>> 1;
         $91 = $90;
        } else {
         $87 = (($__sym) + 4|0);
         $88 = HEAP32[$87>>2]|0;
         $91 = $88;
        }
        $92 = $75 | 1;
        $93 = (($83) + ($92))|0;
        $94 = (($93) + ($91))|0;
        $$pn = $94;
       } else {
        $95 = HEAP8[$this2$i$i$i6]|0;
        $96 = $95 & 1;
        $97 = ($96<<24>>24)==(0);
        if ($97) {
         $100 = $95&255;
         $101 = $100 >>> 1;
         $102 = $101;
        } else {
         $98 = (($__sn) + 4|0);
         $99 = HEAP32[$98>>2]|0;
         $102 = $99;
        }
        $103 = HEAP8[$this2$i$i$i5]|0;
        $104 = $103 & 1;
        $105 = ($104<<24>>24)==(0);
        if ($105) {
         $108 = $103&255;
         $109 = $108 >>> 1;
         $110 = $109;
        } else {
         $106 = (($__sym) + 4|0);
         $107 = HEAP32[$106>>2]|0;
         $110 = $107;
        }
        $111 = (($102) + 2)|0;
        $112 = (($111) + ($110))|0;
        $$pn = $112;
       }
       $113 = (($$pn) + ($67))|0;
       $114 = ($113>>>0)>(100);
       do {
        if ($114) {
         $115 = $113 << 2;
         $116 = (_malloc($115)|0);
         $117 = $116;
         $118 = ($116|0)==(0|0);
         if (!($118)) {
          $131 = $59;$132 = $117;$__mb$0 = $117;
          break;
         }
         __THREW__ = 0;
         invoke_v(7);
         $119 = __THREW__; __THREW__ = 0;
         $120 = $119&1;
         if ($120) {
          $121 = ___cxa_find_matching_catch(-1,-1)|0;
          $122 = tempRet0;
          $$0 = $121;$$01 = $122;
          break L20;
         } else {
          $$pre = HEAP8[$31]|0;
          $131 = $$pre;$132 = 0;$__mb$0 = 0;
          break;
         }
        } else {
         $131 = $59;$132 = 0;$__mb$0 = $58;
        }
       } while(0);
       $133 = (($__iob) + 4|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = $131 & 1;
       $136 = ($135<<24>>24)==(0);
       if ($136) {
        $141 = (($__digits) + 4|0);
        $142 = $131&255;
        $143 = $142 >>> 1;
        $144 = $141;$145 = $143;
       } else {
        $137 = (($__digits) + 8|0);
        $138 = HEAP32[$137>>2]|0;
        $139 = (($__digits) + 4|0);
        $140 = HEAP32[$139>>2]|0;
        $144 = $138;$145 = $140;
       }
       $146 = (($144) + ($145<<2)|0);
       $147 = HEAP32[$__dp>>2]|0;
       $148 = HEAP32[$__ts>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(2,($__mb$0|0),($__mi|0),($__me|0),($134|0),($144|0),($146|0),($30|0),($54|0),($tmpcast|0),($147|0),($148|0),($__grp|0),($__sym|0),($__sn|0),($67|0));
       $149 = __THREW__; __THREW__ = 0;
       $150 = $149&1;
       do {
        if (!($150)) {
         $151 = ($__s);
         $152 = HEAP32[$151>>2]|0;
         $153 = ($1);
         HEAP32[$153>>2] = $152;
         $154 = HEAP32[$__mi>>2]|0;
         $155 = HEAP32[$__me>>2]|0;
         __THREW__ = 0;
         $156 = $$byval_copy;
         $157 = $$byval_copy;
         $158 = $1;
         ;HEAP32[$157+0>>2]=HEAP32[$158+0>>2]|0;
         invoke_viiiiiii(46,($agg$result|0),($$byval_copy|0),($__mb$0|0),($154|0),($155|0),($__iob|0),($__fl|0));
         $159 = $$byval_copy;
         $160 = __THREW__; __THREW__ = 0;
         $161 = $160&1;
         if ($161) {
          break;
         }
         $162 = ($132|0)==(0|0);
         if ($162) {
          __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
          __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
          $164 = HEAP32[$2>>2]|0;
          $165 = ($164);
          (__ZNSt3__114__shared_count16__release_sharedEv($165)|0);
          STACKTOP = sp;return;
         }
         $163 = $132;
         _free($163);
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
         $164 = HEAP32[$2>>2]|0;
         $165 = ($164);
         (__ZNSt3__114__shared_count16__release_sharedEv($165)|0);
         STACKTOP = sp;return;
        }
       } while(0);
       $127 = ___cxa_find_matching_catch(-1,-1)|0;
       $128 = tempRet0;
       $129 = ($132|0)==(0|0);
       if ($129) {
        $$0 = $127;$$01 = $128;
        break;
       }
       $130 = $132;
       _free($130);
       $$0 = $127;$$01 = $128;
      }
     } while(0);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
     $$1 = $$0;$$12 = $$01;
     $166 = HEAP32[$2>>2]|0;
     $167 = ($166);
     (__ZNSt3__114__shared_count16__release_sharedEv($167)|0);
     ___resumeException($$1|0);
     // unreachable;
    }
   } while(0);
   $26 = (___cxa_allocate_exception(4)|0);
   $27 = $26;
   __ZNSt8bad_castC2Ev($27);
   __THREW__ = 0;
   invoke_viii(12,($26|0),((17096)|0),((143)|0));
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    break;
   }
   // unreachable;
  }
 } while(0);
 $123 = ___cxa_find_matching_catch(-1,-1)|0;
 $124 = tempRet0;
 $$1 = $123;$$12 = $124;
 $166 = HEAP32[$2>>2]|0;
 $167 = ($166);
 (__ZNSt3__114__shared_count16__release_sharedEv($167)|0);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,u$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 u$0 = u$0|0;
 var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $__nm;
 $2 = HEAP8[$1]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = $__nm;
  $8 = (($7) + 1|0);
  $9 = $8;
 } else {
  $5 = (($__nm) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $9 = $6;
 }
 $10 = (_catopen(($9|0),1)|0);
 $11 = $10;
 $not$ = ($10|0)!=((-1)|0);
 $12 = $not$&1;
 $$ = $11 >>> $12;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$01 = 0, $$01$i = 0, $$01$i7 = 0, $$02 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ndflt = 0;
 var $exitcond$i = 0, $exitcond$i8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp = 0, $phitmp18 = 0, $this2$i$i$i = 0, $this2$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__ndflt = sp;
 $this2$i$i$i = $__ndflt;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 $1 = $__dflt;
 $2 = HEAP8[$1]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $9 = $__dflt;
  $10 = (($9) + 1|0);
  $11 = $__dflt;
  $12 = (($11) + 1|0);
  $13 = $2&255;
  $14 = $13 >>> 1;
  $15 = $12;$16 = $10;$17 = $14;
 } else {
  $5 = (($__dflt) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($__dflt) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $15 = $6;$16 = $6;$17 = $8;
 }
 $18 = (($15) + ($17)|0);
 $19 = ($16>>>0)<($18>>>0);
 do {
  if ($19) {
   $$01$i7 = $16;
   while(1) {
    $24 = HEAP8[$$01$i7]|0;
    __THREW__ = 0;
    invoke_vii(51,($__ndflt|0),($24|0));
    $25 = __THREW__; __THREW__ = 0;
    $26 = $25&1;
    if ($26) {
     label = 12;
     break;
    }
    $27 = (($$01$i7) + 1|0);
    $exitcond$i8 = ($27|0)==($18|0);
    if ($exitcond$i8) {
     break;
    } else {
     $$01$i7 = $27;
    }
   }
   if ((label|0) == 12) {
    $42 = ___cxa_find_matching_catch(-1,-1)|0;
    $43 = tempRet0;
    $lpad$phi$index = $42;$lpad$phi$index2 = $43;
    break;
   }
   $$pre = HEAP8[$this2$i$i$i]|0;
   $phitmp = $$pre & 1;
   $phitmp18 = ($phitmp<<24>>24)==(0);
   $28 = ($__c|0)==(-1);
   $29 = $__c << 1;
   $30 = $29;
   $31 = $28 ? (-1) : $30;
   if ($phitmp18) {
    $34 = $31;
    label = 10;
    break;
   }
   $32 = (($__ndflt) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $37 = $31;$38 = $33;
   label = 11;
  } else {
   $20 = ($__c|0)==(-1);
   $21 = $__c << 1;
   $22 = $21;
   $23 = $20 ? (-1) : $22;
   $34 = $23;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $35 = $__ndflt;
  $36 = (($35) + 1|0);
  $37 = $34;$38 = $36;
  label = 11;
 }
 do {
  if ((label|0) == 11) {
   __THREW__ = 0;
   $39 = (invoke_iiiii(16,($37|0),($__set|0),($__msgid|0),($38|0))|0);
   $40 = __THREW__; __THREW__ = 0;
   $41 = $40&1;
   if ($41) {
    $44 = ___cxa_find_matching_catch(-1,-1)|0;
    $45 = tempRet0;
    $lpad$phi$index = $44;$lpad$phi$index2 = $45;
    break;
   }
   $this2$i$i$i4 = $agg$result;
   ;HEAP32[$this2$i$i$i4+0>>2]=0|0;HEAP32[$this2$i$i$i4+4>>2]=0|0;HEAP32[$this2$i$i$i4+8>>2]=0|0;
   $46 = (_strlen(($39|0))|0);
   $47 = (($39) + ($46)|0);
   $48 = ($46|0)>(0);
   if ($48) {
    $$01$i = $39;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
    STACKTOP = sp;return;
   }
   while(1) {
    $49 = HEAP8[$$01$i]|0;
    __THREW__ = 0;
    invoke_vii(51,($agg$result|0),($49|0));
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     break;
    }
    $52 = (($$01$i) + 1|0);
    $exitcond$i = ($52|0)==($47|0);
    if ($exitcond$i) {
     label = 19;
     break;
    } else {
     $$01$i = $52;
    }
   }
   if ((label|0) == 19) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
    STACKTOP = sp;return;
   }
   $53 = ___cxa_find_matching_catch(-1,-1)|0;
   $54 = tempRet0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg$result);
   $$01 = $53;$$02 = $54;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   ___resumeException($$01|0);
   // unreachable;
  }
 } while(0);
 $$01 = $lpad$phi$index;$$02 = $lpad$phi$index2;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__c|0)==(-1);
 $2 = $__c << 1;
 $3 = $2;
 $4 = $1 ? (-1) : $3;
 (_catclose(($4|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,u$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 u$0 = u$0|0;
 var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $__nm;
 $2 = HEAP8[$1]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = $__nm;
  $8 = (($7) + 1|0);
  $9 = $8;
 } else {
  $5 = (($__nm) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $9 = $6;
 }
 $10 = (_catopen(($9|0),1)|0);
 $11 = $10;
 $not$ = ($10|0)!=((-1)|0);
 $12 = $not$&1;
 $$ = $11 >>> $12;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$04$i = 0, $$04$i16 = 0, $$1 = 0, $$13 = 0, $$pre = 0, $$pre$i = 0, $$pre$i21 = 0, $$pre44 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bn$i = 0, $__bn$i14 = 0, $__buf$i = 0, $__buf$i13 = 0, $__mb$i = 0, $__mb$i11 = 0;
 var $__ndflt = 0, $__nn$i = 0, $__p$03$i = 0, $__p$03$i20 = 0, $__wn$i = 0, $lpad$phi$index = 0, $lpad$phi$index10 = 0, $lpad$phi38$index = 0, $lpad$phi38$index3 = 0, $or$cond2$i = 0, $or$cond2$i17 = 0, $this2$i$i$i = 0, $this2$i$i$i8 = 0, $tmpcast$i = 0, $tmpcast$i12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $__mb$i11 = sp;
 $__buf$i13 = sp + 8|0;
 $__bn$i14 = sp + 40|0;
 $__wn$i = sp + 48|0;
 $__mb$i = sp + 56|0;
 $__buf$i = sp + 64|0;
 $__bn$i = sp + 192|0;
 $__nn$i = sp + 200|0;
 $__ndflt = sp + 208|0;
 $1 = sp + 224|0;
 $2 = sp + 232|0;
 $this2$i$i$i = $__ndflt;
 ;HEAP32[$this2$i$i$i+0>>2]=0|0;HEAP32[$this2$i$i$i+4>>2]=0|0;HEAP32[$this2$i$i$i+8>>2]=0|0;
 $3 = (($1) + 4|0);
 HEAP32[$3>>2] = 0;
 $4 = ($1);
 HEAP32[$4>>2] = ((((10784) + 8|0)));
 $5 = $__dflt;
 $6 = HEAP8[$5]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $13 = (($__dflt) + 4|0);
  $14 = (($__dflt) + 4|0);
  $15 = $6&255;
  $16 = $15 >>> 1;
  $17 = $14;$18 = $13;$19 = $16;
 } else {
  $9 = (($__dflt) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($__dflt) + 4|0);
  $12 = HEAP32[$11>>2]|0;
  $17 = $10;$18 = $10;$19 = $12;
 }
 $20 = (($17) + ($19<<2)|0);
 $21 = $__mb$i11;
 $22 = ($__buf$i13);
 $23 = $__bn$i14;
 $24 = $__wn$i;
 $tmpcast$i12 = $__mb$i11;
 $25 = $__mb$i11;
 $26 = $25;
 HEAP32[$26>>2] = 0;
 $27 = (($25) + 4)|0;
 $28 = $27;
 HEAP32[$28>>2] = 0;
 $29 = ($18>>>0)<($20>>>0);
 L5: do {
  if ($29) {
   $30 = ($1);
   $31 = $1;
   $32 = (($__buf$i13) + 32|0);
   $$04$i16 = $18;$33 = ((((10784) + 8|0)));
   L7: while(1) {
    HEAP32[$__wn$i>>2] = $$04$i16;
    $34 = (($33) + 12|0);
    $35 = HEAP32[$34>>2]|0;
    __THREW__ = 0;
    $36 = (invoke_iiiiiiiii($35|0,($30|0),($tmpcast$i12|0),($$04$i16|0),($20|0),($__wn$i|0),($22|0),($32|0),($__bn$i14|0))|0);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if ($38) {
     label = 22;
     break;
    }
    $39 = ($36|0)==(2);
    $40 = HEAP32[$__wn$i>>2]|0;
    $41 = ($40|0)==($$04$i16|0);
    $or$cond2$i17 = $39 | $41;
    if ($or$cond2$i17) {
     label = 9;
     break;
    }
    $42 = HEAP32[$__bn$i14>>2]|0;
    $43 = ($22>>>0)<($42>>>0);
    if ($43) {
     $__p$03$i20 = $22;
     while(1) {
      $46 = HEAP8[$__p$03$i20]|0;
      __THREW__ = 0;
      invoke_vii(51,($__ndflt|0),($46|0));
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       label = 21;
       break L7;
      }
      $49 = (($__p$03$i20) + 1|0);
      $50 = HEAP32[$__bn$i14>>2]|0;
      $51 = ($49>>>0)<($50>>>0);
      if ($51) {
       $__p$03$i20 = $49;
      } else {
       break;
      }
     }
     $$pre$i21 = HEAP32[$__wn$i>>2]|0;
     $52 = $$pre$i21;
    } else {
     $52 = $40;
    }
    $53 = ($52>>>0)<($20>>>0);
    if (!($53)) {
     break L5;
    }
    $$pre = HEAP32[$31>>2]|0;
    $$04$i16 = $52;$33 = $$pre;
   }
   do {
    if ((label|0) == 9) {
     __THREW__ = 0;
     invoke_vi(181,((10016)|0));
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      $75 = ___cxa_find_matching_catch(-1,-1)|0;
      $76 = tempRet0;
      $lpad$phi38$index = $75;$lpad$phi38$index3 = $76;
      break;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 21) {
     $71 = ___cxa_find_matching_catch(-1,-1)|0;
     $72 = tempRet0;
     $lpad$phi38$index = $71;$lpad$phi38$index3 = $72;
    }
    else if ((label|0) == 22) {
     $73 = ___cxa_find_matching_catch(-1,-1)|0;
     $74 = tempRet0;
     $lpad$phi38$index = $73;$lpad$phi38$index3 = $74;
    }
   } while(0);
   $$1 = $lpad$phi38$index;$$13 = $lpad$phi38$index3;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   ___resumeException($$1|0);
   // unreachable;
  }
 } while(0);
 $54 = ($__c|0)==(-1);
 $55 = $__c << 1;
 $56 = $55;
 $57 = $54 ? (-1) : $56;
 $58 = HEAP8[$this2$i$i$i]|0;
 $59 = $58 & 1;
 $60 = ($59<<24>>24)==(0);
 if ($60) {
  $63 = $__ndflt;
  $64 = (($63) + 1|0);
  $65 = $64;
 } else {
  $61 = (($__ndflt) + 8|0);
  $62 = HEAP32[$61>>2]|0;
  $65 = $62;
 }
 __THREW__ = 0;
 $66 = (invoke_iiiii(16,($57|0),($__set|0),($__msgid|0),($65|0))|0);
 $67 = __THREW__; __THREW__ = 0;
 $68 = $67&1;
 if ($68) {
  $69 = ___cxa_find_matching_catch(-1,-1)|0;
  $70 = tempRet0;
  $$1 = $69;$$13 = $70;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  ___resumeException($$1|0);
  // unreachable;
 }
 $this2$i$i$i8 = $agg$result;
 ;HEAP32[$this2$i$i$i8+0>>2]=0|0;HEAP32[$this2$i$i$i8+4>>2]=0|0;HEAP32[$this2$i$i$i8+8>>2]=0|0;
 $77 = (($2) + 4|0);
 HEAP32[$77>>2] = 0;
 $78 = ($2);
 HEAP32[$78>>2] = ((((10888) + 8|0)));
 $79 = (_strlen(($66|0))|0);
 $80 = (($66) + ($79)|0);
 $81 = $__mb$i;
 $82 = $__bn$i;
 $83 = $__nn$i;
 $tmpcast$i = $__mb$i;
 $84 = $__mb$i;
 $85 = $84;
 HEAP32[$85>>2] = 0;
 $86 = (($84) + 4)|0;
 $87 = $86;
 HEAP32[$87>>2] = 0;
 $88 = ($79|0)>(0);
 if (!($88)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  STACKTOP = sp;return;
 }
 $89 = $__buf$i;
 $90 = ($2);
 $91 = $2;
 $92 = $80;
 $93 = ($__buf$i);
 $94 = (($__buf$i) + 128|0);
 $$04$i = $66;$95 = ((((10888) + 8|0)));
 L39: while(1) {
  HEAP32[$__nn$i>>2] = $$04$i;
  $96 = (($95) + 16|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = $$04$i;
  $99 = (($92) - ($98))|0;
  $100 = ($99|0)>(32);
  $101 = (($$04$i) + 32|0);
  $102 = $100 ? $101 : $80;
  __THREW__ = 0;
  $103 = (invoke_iiiiiiiii($97|0,($90|0),($tmpcast$i|0),($$04$i|0),($102|0),($__nn$i|0),($93|0),($94|0),($__bn$i|0))|0);
  $104 = __THREW__; __THREW__ = 0;
  $105 = $104&1;
  if ($105) {
   label = 39;
   break;
  }
  $106 = ($103|0)==(2);
  $107 = HEAP32[$__nn$i>>2]|0;
  $108 = ($107|0)==($$04$i|0);
  $or$cond2$i = $106 | $108;
  if ($or$cond2$i) {
   label = 30;
   break;
  }
  $109 = HEAP32[$__bn$i>>2]|0;
  $110 = ($93>>>0)<($109>>>0);
  if ($110) {
   $__p$03$i = $93;
   while(1) {
    $113 = HEAP32[$__p$03$i>>2]|0;
    __THREW__ = 0;
    invoke_vii(78,($agg$result|0),($113|0));
    $114 = __THREW__; __THREW__ = 0;
    $115 = $114&1;
    if ($115) {
     label = 38;
     break L39;
    }
    $116 = (($__p$03$i) + 4|0);
    $117 = HEAP32[$__bn$i>>2]|0;
    $118 = ($116>>>0)<($117>>>0);
    if ($118) {
     $__p$03$i = $116;
    } else {
     break;
    }
   }
   $$pre$i = HEAP32[$__nn$i>>2]|0;
   $119 = $$pre$i;
  } else {
   $119 = $107;
  }
  $120 = ($119>>>0)<($80>>>0);
  if (!($120)) {
   label = 37;
   break;
  }
  $$pre44 = HEAP32[$91>>2]|0;
  $$04$i = $119;$95 = $$pre44;
 }
 do {
  if ((label|0) == 30) {
   __THREW__ = 0;
   invoke_vi(181,((10016)|0));
   $111 = __THREW__; __THREW__ = 0;
   $112 = $111&1;
   if ($112) {
    $125 = ___cxa_find_matching_catch(-1,-1)|0;
    $126 = tempRet0;
    $lpad$phi$index = $125;$lpad$phi$index10 = $126;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 37) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   STACKTOP = sp;return;
  }
  else if ((label|0) == 38) {
   $121 = ___cxa_find_matching_catch(-1,-1)|0;
   $122 = tempRet0;
   $lpad$phi$index = $121;$lpad$phi$index10 = $122;
  }
  else if ((label|0) == 39) {
   $123 = ___cxa_find_matching_catch(-1,-1)|0;
   $124 = tempRet0;
   $lpad$phi$index = $123;$lpad$phi$index10 = $124;
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($agg$result);
 $$1 = $lpad$phi$index;$$13 = $lpad$phi$index10;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($__c|0)==(-1);
 $2 = $__c << 1;
 $3 = $2;
 $4 = $1 ? (-1) : $3;
 (_catclose(($4|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0, u$2 = 0;
 var u$3 = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((9216) + 8|0)));
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP8[(9032)]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $6 = (___cxa_guard_acquire(((9032)|0))|0);
   $7 = ($6|0)==(0);
   if ($7) {
    break;
   }
   __THREW__ = 0;
   $8 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    HEAP32[(9024)>>2] = $8;
    ___cxa_guard_release(((9032)|0));
    break;
   }
   u$0 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$1 = tempRet0;
   ___cxa_guard_abort(((9032)|0));
   __ZSt9terminatev();
   // unreachable;
  }
 } while(0);
 $11 = HEAP32[(9024)>>2]|0;
 $12 = ($3|0)==($11|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = HEAP32[$2>>2]|0;
 __THREW__ = 0;
 invoke_vi(186,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 u$2 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 u$3 = tempRet0;
 __ZSt9terminatev();
 // unreachable;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___cxa_allocate_exception(8)|0);
 $2 = $1;
 __THREW__ = 0;
 invoke_vii(76,($2|0),((9016)|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $6 = ___cxa_find_matching_catch(-1,-1)|0;
  $7 = tempRet0;
  ___cxa_free_exception(($1|0));
  ___resumeException($6|0);
  // unreachable;
 } else {
  $5 = $1;
  HEAP32[$5>>2] = ((((5488) + 8|0)));
  ___cxa_throw(($1|0),((5536)|0),((56)|0));
  // unreachable;
 }
}
function __ZNSt3__16locale5__impC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$pre1$i$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__new_last2$i$i$i = 0, $__new_last2$i$i$i$i$i = 0, $__p$i$i$i = 0, $__p$i$i$i102 = 0, $__p$i$i$i109 = 0, $__p$i$i$i113 = 0, $__p$i$i$i12 = 0;
 var $__p$i$i$i16 = 0, $__p$i$i$i20 = 0, $__p$i$i$i24 = 0, $__p$i$i$i28 = 0, $__p$i$i$i32 = 0, $__p$i$i$i36 = 0, $__p$i$i$i4 = 0, $__p$i$i$i40 = 0, $__p$i$i$i44 = 0, $__p$i$i$i48 = 0, $__p$i$i$i52 = 0, $__p$i$i$i56 = 0, $__p$i$i$i60 = 0, $__p$i$i$i64 = 0, $__p$i$i$i68 = 0, $__p$i$i$i72 = 0, $__p$i$i$i76 = 0, $__p$i$i$i8 = 0, $__p$i$i$i80 = 0, $__p$i$i$i84 = 0;
 var $__p$i$i$i88 = 0, $__p$i$i$i92 = 0, $__p$i$i$i96 = 0, $eh$lpad$body$index4Z2D = 0, $eh$lpad$body$indexZ2D = 0, $scevgep$i$i$i = 0, $scevgep$i$i$i$i$i = 0, $scevgep1$i$i$i = 0, $scevgep1$i$i$i$i$i = 0, $scevgep4$i$i$i = 0, $scevgep4$i$i$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep$i$i$i$i$i = 0, $uglygep3$i$i$i = 0, $uglygep3$i$i$i$i$i = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0;
 $__p$i$i$i113 = sp;
 $__p$i$i$i109 = sp + 16|0;
 $__p$i$i$i102 = sp + 32|0;
 $__p$i$i$i96 = sp + 48|0;
 $__p$i$i$i92 = sp + 64|0;
 $__p$i$i$i88 = sp + 80|0;
 $__p$i$i$i84 = sp + 96|0;
 $__p$i$i$i80 = sp + 112|0;
 $__p$i$i$i76 = sp + 128|0;
 $__p$i$i$i72 = sp + 144|0;
 $__p$i$i$i68 = sp + 160|0;
 $__p$i$i$i64 = sp + 176|0;
 $__p$i$i$i60 = sp + 192|0;
 $__p$i$i$i56 = sp + 208|0;
 $__p$i$i$i52 = sp + 224|0;
 $__p$i$i$i48 = sp + 240|0;
 $__p$i$i$i44 = sp + 256|0;
 $__p$i$i$i40 = sp + 272|0;
 $__p$i$i$i36 = sp + 288|0;
 $__p$i$i$i32 = sp + 304|0;
 $__p$i$i$i28 = sp + 320|0;
 $__p$i$i$i24 = sp + 336|0;
 $__p$i$i$i20 = sp + 352|0;
 $__p$i$i$i16 = sp + 368|0;
 $__p$i$i$i12 = sp + 384|0;
 $__p$i$i$i8 = sp + 400|0;
 $__p$i$i$i4 = sp + 416|0;
 $__p$i$i$i = sp + 432|0;
 $1 = (($refs) + -1)|0;
 $2 = (($this) + 4|0);
 HEAP32[$2>>2] = $1;
 $3 = ($this);
 HEAP32[$3>>2] = ((((9048) + 8|0)));
 $4 = (($this) + 8|0);
 $5 = (($this) + 12|0);
 $6 = (($this) + 16|0);
 $7 = (($this) + 136|0);
 $8 = (($this) + 24|0);
 HEAP8[$7] = 1;
 $9 = $8;
 HEAP32[$5>>2] = $9;
 HEAP32[$4>>2] = $9;
 $10 = $7;
 HEAP32[$6>>2] = $10;
 $$0$i$i = 28;$11 = $9;
 while(1) {
  $12 = ($11|0)==(0|0);
  if ($12) {
   $13 = 0;
  } else {
   HEAP32[$11>>2] = 0;
   $$pre1$i$i = HEAP32[$5>>2]|0;
   $13 = $$pre1$i$i;
  }
  $14 = (($13) + 4|0);
  HEAP32[$5>>2] = $14;
  $15 = (($$0$i$i) + -1)|0;
  $16 = ($15|0)==(0);
  if ($16) {
   break;
  } else {
   $$0$i$i = $15;$11 = $14;
  }
 }
 $17 = (($this) + 144|0);
 __THREW__ = 0;
 invoke_viii(5,($17|0),((9040)|0),1);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $397 = ___cxa_find_matching_catch(-1,-1)|0;
  $398 = tempRet0;
  $$0 = $398;$$01 = $397;
 } else {
  $20 = HEAP32[$4>>2]|0;
  $21 = HEAP32[$5>>2]|0;
  $22 = ($21|0)==($20|0);
  if (!($22)) {
   $__new_last2$i$i$i = $20;
   $scevgep$i$i$i = (($21) + -4|0);
   $scevgep1$i$i$i = $scevgep$i$i$i;
   $23 = (0 - ($__new_last2$i$i$i))|0;
   $uglygep$i$i$i = (($scevgep1$i$i$i) + ($23)|0);
   $uglygep3$i$i$i = $uglygep$i$i$i;
   $24 = $uglygep3$i$i$i >>> 2;
   $25 = $24 ^ -1;
   $scevgep4$i$i$i = (($21) + ($25<<2)|0);
   HEAP32[$5>>2] = $scevgep4$i$i$i;
  }
  HEAP32[((((13944) + 4|0)))>>2] = 0;
  HEAP32[(13944)>>2] = ((((7528) + 8|0)));
  $26 = $__p$i$i$i4;
  $27 = HEAP32[((7560))>>2]|0;
  $28 = ($27|0)==(-1);
  if ($28) {
   label = 10;
  } else {
   $29 = ($__p$i$i$i4);
   HEAP32[$29>>2] = (7560);
   $30 = (($__p$i$i$i4) + 4|0);
   HEAP32[$30>>2] = (183);
   $31 = (($__p$i$i$i4) + 8|0);
   HEAP32[$31>>2] = 0;
   __THREW__ = 0;
   invoke_viii(25,(((7560))|0),($26|0),(184|0));
   $32 = __THREW__; __THREW__ = 0;
   $33 = $32&1;
   if ($33) {
    label = 111;
   } else {
    label = 10;
   }
  }
  L14: do {
   if ((label|0) == 10) {
    $34 = HEAP32[(((7560) + 4|0))>>2]|0;
    $35 = (($34) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13944)|0),($35|0));
    $36 = __THREW__; __THREW__ = 0;
    $37 = $36&1;
    if ($37) {
     label = 111;
     break;
    }
    HEAP32[((((13936) + 4|0)))>>2] = 0;
    HEAP32[(13936)>>2] = ((((7568) + 8|0)));
    $38 = $__p$i$i$i8;
    $39 = HEAP32[((7600))>>2]|0;
    $40 = ($39|0)==(-1);
    if (!($40)) {
     $41 = ($__p$i$i$i8);
     HEAP32[$41>>2] = (7600);
     $42 = (($__p$i$i$i8) + 4|0);
     HEAP32[$42>>2] = (183);
     $43 = (($__p$i$i$i8) + 8|0);
     HEAP32[$43>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((7600))|0),($38|0),(184|0));
     $44 = __THREW__; __THREW__ = 0;
     $45 = $44&1;
     if ($45) {
      label = 111;
      break;
     }
    }
    $46 = HEAP32[(((7600) + 4|0))>>2]|0;
    $47 = (($46) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13936)|0),($47|0));
    $48 = __THREW__; __THREW__ = 0;
    $49 = $48&1;
    if ($49) {
     label = 111;
     break;
    }
    HEAP32[((((13920) + 4|0)))>>2] = 0;
    HEAP32[(13920)>>2] = ((((9144) + 8|0)));
    HEAP32[((((13920) + 8|0)))>>2] = 0;
    HEAP8[(((13920) + 12|0))] = 0;
    __THREW__ = 0;
    $50 = (invoke_i(5)|0);
    $51 = __THREW__; __THREW__ = 0;
    $52 = $51&1;
    if ($52) {
     $53 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$0 = tempRet0;
     ___clang_call_terminate($53);
     // unreachable;
    }
    $54 = HEAP32[$50>>2]|0;
    HEAP32[((((13920) + 8|0)))>>2] = $54;
    $55 = $__p$i$i$i12;
    $56 = HEAP32[((9136))>>2]|0;
    $57 = ($56|0)==(-1);
    if (!($57)) {
     $58 = ($__p$i$i$i12);
     HEAP32[$58>>2] = (9136);
     $59 = (($__p$i$i$i12) + 4|0);
     HEAP32[$59>>2] = (183);
     $60 = (($__p$i$i$i12) + 8|0);
     HEAP32[$60>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((9136))|0),($55|0),(184|0));
     $61 = __THREW__; __THREW__ = 0;
     $62 = $61&1;
     if ($62) {
      label = 111;
      break;
     }
    }
    $63 = HEAP32[(((9136) + 4|0))>>2]|0;
    $64 = (($63) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13920)|0),($64|0));
    $65 = __THREW__; __THREW__ = 0;
    $66 = $65&1;
    if ($66) {
     label = 111;
     break;
    }
    HEAP32[((((13912) + 4|0)))>>2] = 0;
    HEAP32[(13912)>>2] = ((((10104) + 8|0)));
    $67 = $__p$i$i$i16;
    $68 = HEAP32[((9128))>>2]|0;
    $69 = ($68|0)==(-1);
    if (!($69)) {
     $70 = ($__p$i$i$i16);
     HEAP32[$70>>2] = (9128);
     $71 = (($__p$i$i$i16) + 4|0);
     HEAP32[$71>>2] = (183);
     $72 = (($__p$i$i$i16) + 8|0);
     HEAP32[$72>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((9128))|0),($67|0),(184|0));
     $73 = __THREW__; __THREW__ = 0;
     $74 = $73&1;
     if ($74) {
      label = 111;
      break;
     }
    }
    $75 = HEAP32[(((9128) + 4|0))>>2]|0;
    $76 = (($75) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13912)|0),($76|0));
    $77 = __THREW__; __THREW__ = 0;
    $78 = $77&1;
    if ($78) {
     label = 111;
     break;
    }
    HEAP32[((((13904) + 4|0)))>>2] = 0;
    HEAP32[(13904)>>2] = ((((10320) + 8|0)));
    $79 = $__p$i$i$i20;
    $80 = HEAP32[((9200))>>2]|0;
    $81 = ($80|0)==(-1);
    if (!($81)) {
     $82 = ($__p$i$i$i20);
     HEAP32[$82>>2] = (9200);
     $83 = (($__p$i$i$i20) + 4|0);
     HEAP32[$83>>2] = (183);
     $84 = (($__p$i$i$i20) + 8|0);
     HEAP32[$84>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((9200))|0),($79|0),(184|0));
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     if ($86) {
      label = 111;
      break;
     }
    }
    $87 = HEAP32[(((9200) + 4|0))>>2]|0;
    $88 = (($87) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13904)|0),($88|0));
    $89 = __THREW__; __THREW__ = 0;
    $90 = $89&1;
    if ($90) {
     label = 111;
     break;
    }
    HEAP32[((((13888) + 4|0)))>>2] = 0;
    HEAP32[(13888)>>2] = ((((9216) + 8|0)));
    $91 = HEAP8[(9032)]|0;
    $92 = ($91<<24>>24)==(0);
    do {
     if ($92) {
      $93 = (___cxa_guard_acquire(((9032)|0))|0);
      $94 = ($93|0)==(0);
      if ($94) {
       break;
      }
      __THREW__ = 0;
      $95 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
      $96 = __THREW__; __THREW__ = 0;
      $97 = $96&1;
      if ($97) {
       $98 = ___cxa_find_matching_catch(-1,-1)|0;
       $99 = tempRet0;
       ___cxa_guard_abort(((9032)|0));
       $eh$lpad$body$index4Z2D = $99;$eh$lpad$body$indexZ2D = $98;
       break L14;
      } else {
       HEAP32[(9024)>>2] = $95;
       ___cxa_guard_release(((9032)|0));
       break;
      }
     }
    } while(0);
    $100 = HEAP32[(9024)>>2]|0;
    HEAP32[((((13888) + 8|0)))>>2] = $100;
    $101 = $__p$i$i$i24;
    $102 = HEAP32[((9208))>>2]|0;
    $103 = ($102|0)==(-1);
    if (!($103)) {
     $104 = ($__p$i$i$i24);
     HEAP32[$104>>2] = (9208);
     $105 = (($__p$i$i$i24) + 4|0);
     HEAP32[$105>>2] = (183);
     $106 = (($__p$i$i$i24) + 8|0);
     HEAP32[$106>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((9208))|0),($101|0),(184|0));
     $107 = __THREW__; __THREW__ = 0;
     $108 = $107&1;
     if ($108) {
      label = 111;
      break;
     }
    }
    $109 = HEAP32[(((9208) + 4|0))>>2]|0;
    $110 = (($109) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13888)|0),($110|0));
    $111 = __THREW__; __THREW__ = 0;
    $112 = $111&1;
    if ($112) {
     label = 111;
     break;
    }
    HEAP32[((((13880) + 4|0)))>>2] = 0;
    HEAP32[(13880)>>2] = ((((10544) + 8|0)));
    $113 = $__p$i$i$i28;
    $114 = HEAP32[((9264))>>2]|0;
    $115 = ($114|0)==(-1);
    if (!($115)) {
     $116 = ($__p$i$i$i28);
     HEAP32[$116>>2] = (9264);
     $117 = (($__p$i$i$i28) + 4|0);
     HEAP32[$117>>2] = (183);
     $118 = (($__p$i$i$i28) + 8|0);
     HEAP32[$118>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((9264))|0),($113|0),(184|0));
     $119 = __THREW__; __THREW__ = 0;
     $120 = $119&1;
     if ($120) {
      label = 111;
      break;
     }
    }
    $121 = HEAP32[(((9264) + 4|0))>>2]|0;
    $122 = (($121) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13880)|0),($122|0));
    $123 = __THREW__; __THREW__ = 0;
    $124 = $123&1;
    if ($124) {
     label = 111;
     break;
    }
    HEAP32[((((13872) + 4|0)))>>2] = 0;
    HEAP32[(13872)>>2] = ((((10664) + 8|0)));
    $125 = $__p$i$i$i32;
    $126 = HEAP32[((9272))>>2]|0;
    $127 = ($126|0)==(-1);
    if (!($127)) {
     $128 = ($__p$i$i$i32);
     HEAP32[$128>>2] = (9272);
     $129 = (($__p$i$i$i32) + 4|0);
     HEAP32[$129>>2] = (183);
     $130 = (($__p$i$i$i32) + 8|0);
     HEAP32[$130>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((9272))|0),($125|0),(184|0));
     $131 = __THREW__; __THREW__ = 0;
     $132 = $131&1;
     if ($132) {
      label = 111;
      break;
     }
    }
    $133 = HEAP32[(((9272) + 4|0))>>2]|0;
    $134 = (($133) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13872)|0),($134|0));
    $135 = __THREW__; __THREW__ = 0;
    $136 = $135&1;
    if ($136) {
     label = 111;
     break;
    }
    HEAP32[((((13848) + 4|0)))>>2] = 0;
    HEAP32[(13848)>>2] = ((((9296) + 8|0)));
    HEAP8[(((13848) + 8|0))] = 46;
    HEAP8[(((13848) + 9|0))] = 44;
    ;HEAP32[(((13848) + 12|0))+0>>2]=0|0;HEAP32[(((13848) + 12|0))+4>>2]=0|0;HEAP32[(((13848) + 12|0))+8>>2]=0|0;
    $137 = $__p$i$i$i36;
    $138 = HEAP32[((9280))>>2]|0;
    $139 = ($138|0)==(-1);
    if (!($139)) {
     $140 = ($__p$i$i$i36);
     HEAP32[$140>>2] = (9280);
     $141 = (($__p$i$i$i36) + 4|0);
     HEAP32[$141>>2] = (183);
     $142 = (($__p$i$i$i36) + 8|0);
     HEAP32[$142>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((9280))|0),($137|0),(184|0));
     $143 = __THREW__; __THREW__ = 0;
     $144 = $143&1;
     if ($144) {
      label = 111;
      break;
     }
    }
    $145 = HEAP32[(((9280) + 4|0))>>2]|0;
    $146 = (($145) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13848)|0),($146|0));
    $147 = __THREW__; __THREW__ = 0;
    $148 = $147&1;
    if ($148) {
     label = 111;
     break;
    }
    HEAP32[((((13816) + 4|0)))>>2] = 0;
    HEAP32[(13816)>>2] = ((((9336) + 8|0)));
    HEAP32[((((13816) + 8|0)))>>2] = 46;
    HEAP32[((((13816) + 12|0)))>>2] = 44;
    ;HEAP32[(((13816) + 16|0))+0>>2]=0|0;HEAP32[(((13816) + 16|0))+4>>2]=0|0;HEAP32[(((13816) + 16|0))+8>>2]=0|0;
    $149 = $__p$i$i$i40;
    $150 = HEAP32[((9288))>>2]|0;
    $151 = ($150|0)==(-1);
    if (!($151)) {
     $152 = ($__p$i$i$i40);
     HEAP32[$152>>2] = (9288);
     $153 = (($__p$i$i$i40) + 4|0);
     HEAP32[$153>>2] = (183);
     $154 = (($__p$i$i$i40) + 8|0);
     HEAP32[$154>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((9288))|0),($149|0),(184|0));
     $155 = __THREW__; __THREW__ = 0;
     $156 = $155&1;
     if ($156) {
      label = 111;
      break;
     }
    }
    $157 = HEAP32[(((9288) + 4|0))>>2]|0;
    $158 = (($157) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13816)|0),($158|0));
    $159 = __THREW__; __THREW__ = 0;
    $160 = $159&1;
    if ($160) {
     label = 111;
     break;
    }
    HEAP32[((((13808) + 4|0)))>>2] = 0;
    HEAP32[(13808)>>2] = ((((7608) + 8|0)));
    $161 = $__p$i$i$i44;
    $162 = HEAP32[((7672))>>2]|0;
    $163 = ($162|0)==(-1);
    if (!($163)) {
     $164 = ($__p$i$i$i44);
     HEAP32[$164>>2] = (7672);
     $165 = (($__p$i$i$i44) + 4|0);
     HEAP32[$165>>2] = (183);
     $166 = (($__p$i$i$i44) + 8|0);
     HEAP32[$166>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((7672))|0),($161|0),(184|0));
     $167 = __THREW__; __THREW__ = 0;
     $168 = $167&1;
     if ($168) {
      label = 111;
      break;
     }
    }
    $169 = HEAP32[(((7672) + 4|0))>>2]|0;
    $170 = (($169) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13808)|0),($170|0));
    $171 = __THREW__; __THREW__ = 0;
    $172 = $171&1;
    if ($172) {
     label = 111;
     break;
    }
    HEAP32[((((13800) + 4|0)))>>2] = 0;
    HEAP32[(13800)>>2] = ((((7728) + 8|0)));
    $173 = $__p$i$i$i48;
    $174 = HEAP32[((7792))>>2]|0;
    $175 = ($174|0)==(-1);
    if (!($175)) {
     $176 = ($__p$i$i$i48);
     HEAP32[$176>>2] = (7792);
     $177 = (($__p$i$i$i48) + 4|0);
     HEAP32[$177>>2] = (183);
     $178 = (($__p$i$i$i48) + 8|0);
     HEAP32[$178>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((7792))|0),($173|0),(184|0));
     $179 = __THREW__; __THREW__ = 0;
     $180 = $179&1;
     if ($180) {
      label = 111;
      break;
     }
    }
    $181 = HEAP32[(((7792) + 4|0))>>2]|0;
    $182 = (($181) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13800)|0),($182|0));
    $183 = __THREW__; __THREW__ = 0;
    $184 = $183&1;
    if ($184) {
     label = 111;
     break;
    }
    HEAP32[((((13792) + 4|0)))>>2] = 0;
    HEAP32[(13792)>>2] = ((((7800) + 8|0)));
    $185 = $__p$i$i$i52;
    $186 = HEAP32[((7856))>>2]|0;
    $187 = ($186|0)==(-1);
    if (!($187)) {
     $188 = ($__p$i$i$i52);
     HEAP32[$188>>2] = (7856);
     $189 = (($__p$i$i$i52) + 4|0);
     HEAP32[$189>>2] = (183);
     $190 = (($__p$i$i$i52) + 8|0);
     HEAP32[$190>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((7856))|0),($185|0),(184|0));
     $191 = __THREW__; __THREW__ = 0;
     $192 = $191&1;
     if ($192) {
      label = 111;
      break;
     }
    }
    $193 = HEAP32[(((7856) + 4|0))>>2]|0;
    $194 = (($193) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13792)|0),($194|0));
    $195 = __THREW__; __THREW__ = 0;
    $196 = $195&1;
    if ($196) {
     label = 111;
     break;
    }
    HEAP32[((((13784) + 4|0)))>>2] = 0;
    HEAP32[(13784)>>2] = ((((7864) + 8|0)));
    $197 = $__p$i$i$i56;
    $198 = HEAP32[((7920))>>2]|0;
    $199 = ($198|0)==(-1);
    if (!($199)) {
     $200 = ($__p$i$i$i56);
     HEAP32[$200>>2] = (7920);
     $201 = (($__p$i$i$i56) + 4|0);
     HEAP32[$201>>2] = (183);
     $202 = (($__p$i$i$i56) + 8|0);
     HEAP32[$202>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((7920))|0),($197|0),(184|0));
     $203 = __THREW__; __THREW__ = 0;
     $204 = $203&1;
     if ($204) {
      label = 111;
      break;
     }
    }
    $205 = HEAP32[(((7920) + 4|0))>>2]|0;
    $206 = (($205) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13784)|0),($206|0));
    $207 = __THREW__; __THREW__ = 0;
    $208 = $207&1;
    if ($208) {
     label = 111;
     break;
    }
    HEAP32[((((13776) + 4|0)))>>2] = 0;
    HEAP32[(13776)>>2] = ((((8456) + 8|0)));
    $209 = $__p$i$i$i60;
    $210 = HEAP32[((8512))>>2]|0;
    $211 = ($210|0)==(-1);
    if (!($211)) {
     $212 = ($__p$i$i$i60);
     HEAP32[$212>>2] = (8512);
     $213 = (($__p$i$i$i60) + 4|0);
     HEAP32[$213>>2] = (183);
     $214 = (($__p$i$i$i60) + 8|0);
     HEAP32[$214>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((8512))|0),($209|0),(184|0));
     $215 = __THREW__; __THREW__ = 0;
     $216 = $215&1;
     if ($216) {
      label = 111;
      break;
     }
    }
    $217 = HEAP32[(((8512) + 4|0))>>2]|0;
    $218 = (($217) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13776)|0),($218|0));
    $219 = __THREW__; __THREW__ = 0;
    $220 = $219&1;
    if ($220) {
     label = 111;
     break;
    }
    HEAP32[((((13768) + 4|0)))>>2] = 0;
    HEAP32[(13768)>>2] = ((((8520) + 8|0)));
    $221 = $__p$i$i$i64;
    $222 = HEAP32[((8576))>>2]|0;
    $223 = ($222|0)==(-1);
    if (!($223)) {
     $224 = ($__p$i$i$i64);
     HEAP32[$224>>2] = (8576);
     $225 = (($__p$i$i$i64) + 4|0);
     HEAP32[$225>>2] = (183);
     $226 = (($__p$i$i$i64) + 8|0);
     HEAP32[$226>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((8576))|0),($221|0),(184|0));
     $227 = __THREW__; __THREW__ = 0;
     $228 = $227&1;
     if ($228) {
      label = 111;
      break;
     }
    }
    $229 = HEAP32[(((8576) + 4|0))>>2]|0;
    $230 = (($229) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13768)|0),($230|0));
    $231 = __THREW__; __THREW__ = 0;
    $232 = $231&1;
    if ($232) {
     label = 111;
     break;
    }
    HEAP32[((((13760) + 4|0)))>>2] = 0;
    HEAP32[(13760)>>2] = ((((8584) + 8|0)));
    $233 = $__p$i$i$i68;
    $234 = HEAP32[((8640))>>2]|0;
    $235 = ($234|0)==(-1);
    if (!($235)) {
     $236 = ($__p$i$i$i68);
     HEAP32[$236>>2] = (8640);
     $237 = (($__p$i$i$i68) + 4|0);
     HEAP32[$237>>2] = (183);
     $238 = (($__p$i$i$i68) + 8|0);
     HEAP32[$238>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((8640))|0),($233|0),(184|0));
     $239 = __THREW__; __THREW__ = 0;
     $240 = $239&1;
     if ($240) {
      label = 111;
      break;
     }
    }
    $241 = HEAP32[(((8640) + 4|0))>>2]|0;
    $242 = (($241) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13760)|0),($242|0));
    $243 = __THREW__; __THREW__ = 0;
    $244 = $243&1;
    if ($244) {
     label = 111;
     break;
    }
    HEAP32[((((13752) + 4|0)))>>2] = 0;
    HEAP32[(13752)>>2] = ((((8648) + 8|0)));
    $245 = $__p$i$i$i72;
    $246 = HEAP32[((8704))>>2]|0;
    $247 = ($246|0)==(-1);
    if (!($247)) {
     $248 = ($__p$i$i$i72);
     HEAP32[$248>>2] = (8704);
     $249 = (($__p$i$i$i72) + 4|0);
     HEAP32[$249>>2] = (183);
     $250 = (($__p$i$i$i72) + 8|0);
     HEAP32[$250>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((8704))|0),($245|0),(184|0));
     $251 = __THREW__; __THREW__ = 0;
     $252 = $251&1;
     if ($252) {
      label = 111;
      break;
     }
    }
    $253 = HEAP32[(((8704) + 4|0))>>2]|0;
    $254 = (($253) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13752)|0),($254|0));
    $255 = __THREW__; __THREW__ = 0;
    $256 = $255&1;
    if ($256) {
     label = 111;
     break;
    }
    HEAP32[((((13744) + 4|0)))>>2] = 0;
    HEAP32[(13744)>>2] = ((((8712) + 8|0)));
    $257 = $__p$i$i$i76;
    $258 = HEAP32[((8744))>>2]|0;
    $259 = ($258|0)==(-1);
    if (!($259)) {
     $260 = ($__p$i$i$i76);
     HEAP32[$260>>2] = (8744);
     $261 = (($__p$i$i$i76) + 4|0);
     HEAP32[$261>>2] = (183);
     $262 = (($__p$i$i$i76) + 8|0);
     HEAP32[$262>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((8744))|0),($257|0),(184|0));
     $263 = __THREW__; __THREW__ = 0;
     $264 = $263&1;
     if ($264) {
      label = 111;
      break;
     }
    }
    $265 = HEAP32[(((8744) + 4|0))>>2]|0;
    $266 = (($265) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13744)|0),($266|0));
    $267 = __THREW__; __THREW__ = 0;
    $268 = $267&1;
    if ($268) {
     label = 111;
     break;
    }
    HEAP32[((((13736) + 4|0)))>>2] = 0;
    HEAP32[(13736)>>2] = ((((8792) + 8|0)));
    $269 = $__p$i$i$i80;
    $270 = HEAP32[((8824))>>2]|0;
    $271 = ($270|0)==(-1);
    if (!($271)) {
     $272 = ($__p$i$i$i80);
     HEAP32[$272>>2] = (8824);
     $273 = (($__p$i$i$i80) + 4|0);
     HEAP32[$273>>2] = (183);
     $274 = (($__p$i$i$i80) + 8|0);
     HEAP32[$274>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((8824))|0),($269|0),(184|0));
     $275 = __THREW__; __THREW__ = 0;
     $276 = $275&1;
     if ($276) {
      label = 111;
      break;
     }
    }
    $277 = HEAP32[(((8824) + 4|0))>>2]|0;
    $278 = (($277) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13736)|0),($278|0));
    $279 = __THREW__; __THREW__ = 0;
    $280 = $279&1;
    if ($280) {
     label = 111;
     break;
    }
    HEAP32[((((13728) + 4|0)))>>2] = 0;
    HEAP32[(13728)>>2] = ((((8848) + 8|0)));
    $281 = $__p$i$i$i84;
    $282 = HEAP32[((8880))>>2]|0;
    $283 = ($282|0)==(-1);
    if (!($283)) {
     $284 = ($__p$i$i$i84);
     HEAP32[$284>>2] = (8880);
     $285 = (($__p$i$i$i84) + 4|0);
     HEAP32[$285>>2] = (183);
     $286 = (($__p$i$i$i84) + 8|0);
     HEAP32[$286>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((8880))|0),($281|0),(184|0));
     $287 = __THREW__; __THREW__ = 0;
     $288 = $287&1;
     if ($288) {
      label = 111;
      break;
     }
    }
    $289 = HEAP32[(((8880) + 4|0))>>2]|0;
    $290 = (($289) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13728)|0),($290|0));
    $291 = __THREW__; __THREW__ = 0;
    $292 = $291&1;
    if ($292) {
     label = 111;
     break;
    }
    HEAP32[((((13720) + 4|0)))>>2] = 0;
    HEAP32[(13720)>>2] = ((((8896) + 8|0)));
    $293 = $__p$i$i$i88;
    $294 = HEAP32[((8928))>>2]|0;
    $295 = ($294|0)==(-1);
    if (!($295)) {
     $296 = ($__p$i$i$i88);
     HEAP32[$296>>2] = (8928);
     $297 = (($__p$i$i$i88) + 4|0);
     HEAP32[$297>>2] = (183);
     $298 = (($__p$i$i$i88) + 8|0);
     HEAP32[$298>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((8928))|0),($293|0),(184|0));
     $299 = __THREW__; __THREW__ = 0;
     $300 = $299&1;
     if ($300) {
      label = 111;
      break;
     }
    }
    $301 = HEAP32[(((8928) + 4|0))>>2]|0;
    $302 = (($301) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13720)|0),($302|0));
    $303 = __THREW__; __THREW__ = 0;
    $304 = $303&1;
    if ($304) {
     label = 111;
     break;
    }
    HEAP32[((((13704) + 4|0)))>>2] = 0;
    HEAP32[(13704)>>2] = ((((7944) + 8|0)));
    HEAP32[((((13704) + 8|0)))>>2] = ((((7944) + 56|0)));
    $305 = $__p$i$i$i92;
    $306 = HEAP32[((8032))>>2]|0;
    $307 = ($306|0)==(-1);
    if (!($307)) {
     $308 = ($__p$i$i$i92);
     HEAP32[$308>>2] = (8032);
     $309 = (($__p$i$i$i92) + 4|0);
     HEAP32[$309>>2] = (183);
     $310 = (($__p$i$i$i92) + 8|0);
     HEAP32[$310>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((8032))|0),($305|0),(184|0));
     $311 = __THREW__; __THREW__ = 0;
     $312 = $311&1;
     if ($312) {
      label = 111;
      break;
     }
    }
    $313 = HEAP32[(((8032) + 4|0))>>2]|0;
    $314 = (($313) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13704)|0),($314|0));
    $315 = __THREW__; __THREW__ = 0;
    $316 = $315&1;
    if ($316) {
     label = 111;
     break;
    }
    HEAP32[((((13688) + 4|0)))>>2] = 0;
    HEAP32[(13688)>>2] = ((((8096) + 8|0)));
    HEAP32[((((13688) + 8|0)))>>2] = ((((8096) + 56|0)));
    $317 = $__p$i$i$i96;
    $318 = HEAP32[((8184))>>2]|0;
    $319 = ($318|0)==(-1);
    if (!($319)) {
     $320 = ($__p$i$i$i96);
     HEAP32[$320>>2] = (8184);
     $321 = (($__p$i$i$i96) + 4|0);
     HEAP32[$321>>2] = (183);
     $322 = (($__p$i$i$i96) + 8|0);
     HEAP32[$322>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((8184))|0),($317|0),(184|0));
     $323 = __THREW__; __THREW__ = 0;
     $324 = $323&1;
     if ($324) {
      label = 111;
      break;
     }
    }
    $325 = HEAP32[(((8184) + 4|0))>>2]|0;
    $326 = (($325) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13688)|0),($326|0));
    $327 = __THREW__; __THREW__ = 0;
    $328 = $327&1;
    if ($328) {
     label = 111;
     break;
    }
    HEAP32[((((13672) + 4|0)))>>2] = 0;
    HEAP32[(13672)>>2] = ((((10040) + 8|0)));
    $329 = HEAP8[(9032)]|0;
    $330 = ($329<<24>>24)==(0);
    do {
     if ($330) {
      $331 = (___cxa_guard_acquire(((9032)|0))|0);
      $332 = ($331|0)==(0);
      if ($332) {
       break;
      }
      __THREW__ = 0;
      $333 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
      $334 = __THREW__; __THREW__ = 0;
      $335 = $334&1;
      if ($335) {
       $336 = ___cxa_find_matching_catch(-1,-1)|0;
       $337 = tempRet0;
       ___cxa_guard_abort(((9032)|0));
       $eh$lpad$body$index4Z2D = $337;$eh$lpad$body$indexZ2D = $336;
       break L14;
      } else {
       HEAP32[(9024)>>2] = $333;
       ___cxa_guard_release(((9032)|0));
       break;
      }
     }
    } while(0);
    $338 = HEAP32[(9024)>>2]|0;
    HEAP32[((((13672) + 8|0)))>>2] = $338;
    HEAP32[(13672)>>2] = ((((8392) + 8|0)));
    $339 = $__p$i$i$i102;
    $340 = HEAP32[((8416))>>2]|0;
    $341 = ($340|0)==(-1);
    if (!($341)) {
     $342 = ($__p$i$i$i102);
     HEAP32[$342>>2] = (8416);
     $343 = (($__p$i$i$i102) + 4|0);
     HEAP32[$343>>2] = (183);
     $344 = (($__p$i$i$i102) + 8|0);
     HEAP32[$344>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((8416))|0),($339|0),(184|0));
     $345 = __THREW__; __THREW__ = 0;
     $346 = $345&1;
     if ($346) {
      label = 111;
      break;
     }
    }
    $347 = HEAP32[(((8416) + 4|0))>>2]|0;
    $348 = (($347) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13672)|0),($348|0));
    $349 = __THREW__; __THREW__ = 0;
    $350 = $349&1;
    if ($350) {
     label = 111;
     break;
    }
    HEAP32[((((13656) + 4|0)))>>2] = 0;
    HEAP32[(13656)>>2] = ((((10040) + 8|0)));
    $351 = HEAP8[(9032)]|0;
    $352 = ($351<<24>>24)==(0);
    do {
     if ($352) {
      $353 = (___cxa_guard_acquire(((9032)|0))|0);
      $354 = ($353|0)==(0);
      if ($354) {
       break;
      }
      __THREW__ = 0;
      $355 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
      $356 = __THREW__; __THREW__ = 0;
      $357 = $356&1;
      if ($357) {
       $358 = ___cxa_find_matching_catch(-1,-1)|0;
       $359 = tempRet0;
       ___cxa_guard_abort(((9032)|0));
       $eh$lpad$body$index4Z2D = $359;$eh$lpad$body$indexZ2D = $358;
       break L14;
      } else {
       HEAP32[(9024)>>2] = $355;
       ___cxa_guard_release(((9032)|0));
       break;
      }
     }
    } while(0);
    $360 = HEAP32[(9024)>>2]|0;
    HEAP32[((((13656) + 8|0)))>>2] = $360;
    HEAP32[(13656)>>2] = ((((8424) + 8|0)));
    $361 = $__p$i$i$i109;
    $362 = HEAP32[((8448))>>2]|0;
    $363 = ($362|0)==(-1);
    if (!($363)) {
     $364 = ($__p$i$i$i109);
     HEAP32[$364>>2] = (8448);
     $365 = (($__p$i$i$i109) + 4|0);
     HEAP32[$365>>2] = (183);
     $366 = (($__p$i$i$i109) + 8|0);
     HEAP32[$366>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((8448))|0),($361|0),(184|0));
     $367 = __THREW__; __THREW__ = 0;
     $368 = $367&1;
     if ($368) {
      label = 111;
      break;
     }
    }
    $369 = HEAP32[(((8448) + 4|0))>>2]|0;
    $370 = (($369) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13656)|0),($370|0));
    $371 = __THREW__; __THREW__ = 0;
    $372 = $371&1;
    if ($372) {
     label = 111;
     break;
    }
    HEAP32[((((13648) + 4|0)))>>2] = 0;
    HEAP32[(13648)>>2] = ((((8936) + 8|0)));
    $373 = $__p$i$i$i113;
    $374 = HEAP32[((8968))>>2]|0;
    $375 = ($374|0)==(-1);
    if (!($375)) {
     $376 = ($__p$i$i$i113);
     HEAP32[$376>>2] = (8968);
     $377 = (($__p$i$i$i113) + 4|0);
     HEAP32[$377>>2] = (183);
     $378 = (($__p$i$i$i113) + 8|0);
     HEAP32[$378>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((8968))|0),($373|0),(184|0));
     $379 = __THREW__; __THREW__ = 0;
     $380 = $379&1;
     if ($380) {
      label = 111;
      break;
     }
    }
    $381 = HEAP32[(((8968) + 4|0))>>2]|0;
    $382 = (($381) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13648)|0),($382|0));
    $383 = __THREW__; __THREW__ = 0;
    $384 = $383&1;
    if ($384) {
     label = 111;
     break;
    }
    HEAP32[((((13640) + 4|0)))>>2] = 0;
    HEAP32[(13640)>>2] = ((((8976) + 8|0)));
    $385 = $__p$i$i$i;
    $386 = HEAP32[((9008))>>2]|0;
    $387 = ($386|0)==(-1);
    if (!($387)) {
     $388 = ($__p$i$i$i);
     HEAP32[$388>>2] = (9008);
     $389 = (($__p$i$i$i) + 4|0);
     HEAP32[$389>>2] = (183);
     $390 = (($__p$i$i$i) + 8|0);
     HEAP32[$390>>2] = 0;
     __THREW__ = 0;
     invoke_viii(25,(((9008))|0),($385|0),(184|0));
     $391 = __THREW__; __THREW__ = 0;
     $392 = $391&1;
     if ($392) {
      label = 111;
      break;
     }
    }
    $393 = HEAP32[(((9008) + 4|0))>>2]|0;
    $394 = (($393) + -1)|0;
    __THREW__ = 0;
    invoke_viii(26,($this|0),((13640)|0),($394|0));
    $395 = __THREW__; __THREW__ = 0;
    $396 = $395&1;
    if ($396) {
     label = 111;
     break;
    }
    STACKTOP = sp;return;
   }
  } while(0);
  if ((label|0) == 111) {
   $399 = ___cxa_find_matching_catch(-1,-1)|0;
   $400 = tempRet0;
   $eh$lpad$body$index4Z2D = $400;$eh$lpad$body$indexZ2D = $399;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
  $$0 = $eh$lpad$body$index4Z2D;$$01 = $eh$lpad$body$indexZ2D;
 }
 $401 = HEAP32[$4>>2]|0;
 $402 = ($401|0)==(0|0);
 if ($402) {
  ___resumeException($$01|0);
  // unreachable;
 }
 $403 = HEAP32[$5>>2]|0;
 $404 = ($403|0)==($401|0);
 if (!($404)) {
  $__new_last2$i$i$i$i$i = $401;
  $scevgep$i$i$i$i$i = (($403) + -4|0);
  $scevgep1$i$i$i$i$i = $scevgep$i$i$i$i$i;
  $405 = (0 - ($__new_last2$i$i$i$i$i))|0;
  $uglygep$i$i$i$i$i = (($scevgep1$i$i$i$i$i) + ($405)|0);
  $uglygep3$i$i$i$i$i = $uglygep$i$i$i$i$i;
  $406 = $uglygep3$i$i$i$i$i >>> 2;
  $407 = $406 ^ -1;
  $scevgep4$i$i$i$i$i = (($403) + ($407<<2)|0);
  HEAP32[$5>>2] = $scevgep4$i$i$i$i$i;
 }
 $408 = ($9|0)==($401|0);
 if ($408) {
  HEAP8[$7] = 0;
  ___resumeException($$01|0);
  // unreachable;
 } else {
  $409 = $401;
  __ZdlPv($409);
  ___resumeException($$01|0);
  // unreachable;
 }
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$pre = 0, $$pre2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep1$i$i$i = 0, $scevgep4$i$i$i = 0, $uglygep$i$i$i = 0, $uglygep3$i$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($f);
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 $2 = (($this) + 8|0);
 $3 = (($this) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2);
 $6 = HEAP32[$5>>2]|0;
 $7 = $4;
 $8 = $6;
 $9 = (($7) - ($8))|0;
 $10 = $9 >> 2;
 $11 = ($10>>>0)>($id>>>0);
 do {
  if ($11) {
   $26 = $6;
  } else {
   $12 = (($id) + 1)|0;
   $13 = ($10>>>0)<($12>>>0);
   if (!($13)) {
    $17 = ($10>>>0)>($12>>>0);
    if (!($17)) {
     $26 = $6;
     break;
    }
    $18 = (($6) + ($12<<2)|0);
    $19 = ($4|0)==($18|0);
    if ($19) {
     $26 = $6;
     break;
    }
    $__new_last2$i$i$i = $18;
    $scevgep$i$i$i = (($4) + -4|0);
    $scevgep1$i$i$i = $scevgep$i$i$i;
    $20 = (0 - ($__new_last2$i$i$i))|0;
    $uglygep$i$i$i = (($scevgep1$i$i$i) + ($20)|0);
    $uglygep3$i$i$i = $uglygep$i$i$i;
    $21 = $uglygep3$i$i$i >>> 2;
    $22 = $21 ^ -1;
    $scevgep4$i$i$i = (($4) + ($22<<2)|0);
    HEAP32[$3>>2] = $scevgep4$i$i$i;
    $26 = $6;
    break;
   }
   $14 = (($12) - ($10))|0;
   __THREW__ = 0;
   invoke_vii(80,($2|0),($14|0));
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if (!($16)) {
    $$pre2 = HEAP32[$5>>2]|0;
    $26 = $$pre2;
    break;
   }
   $23 = ___cxa_find_matching_catch(-1,-1)|0;
   $24 = tempRet0;
   $25 = ($f|0)==(0|0);
   if ($25) {
    ___resumeException($23|0);
    // unreachable;
   }
   (__ZNSt3__114__shared_count16__release_sharedEv($1)|0);
   ___resumeException($23|0);
   // unreachable;
  }
 } while(0);
 $27 = (($26) + ($id<<2)|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  $31 = $26;
  $32 = (($31) + ($id<<2)|0);
  HEAP32[$32>>2] = $f;
  STACKTOP = sp;return;
 }
 $30 = ($28);
 (__ZNSt3__114__shared_count16__release_sharedEv($30)|0);
 $$pre = HEAP32[$5>>2]|0;
 $31 = $$pre;
 $32 = (($31) + ($id<<2)|0);
 HEAP32[$32>>2] = $f;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i$i$i = 0, $i$02 = 0, $scevgep$i$i$i$i$i = 0, $scevgep1$i$i$i$i$i = 0, $scevgep4$i$i$i$i$i = 0;
 var $uglygep$i$i$i$i$i = 0, $uglygep3$i$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((9048) + 8|0)));
 $2 = (($this) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($this) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if (!($6)) {
  $7 = $3;$8 = $5;$i$02 = 0;
  while(1) {
   $9 = (($8) + ($i$02<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0|0);
   if ($11) {
    $13 = $8;$14 = $7;
   } else {
    $12 = ($10);
    (__ZNSt3__114__shared_count16__release_sharedEv($12)|0);
    $$pre = HEAP32[$2>>2]|0;
    $$pre4 = HEAP32[$4>>2]|0;
    $13 = $$pre4;$14 = $$pre;
   }
   $15 = (($i$02) + 1)|0;
   $16 = $14;
   $17 = $13;
   $18 = (($16) - ($17))|0;
   $19 = $18 >> 2;
   $20 = ($15>>>0)<($19>>>0);
   if ($20) {
    $7 = $14;$8 = $13;$i$02 = $15;
   } else {
    break;
   }
  }
 }
 $21 = (($this) + 144|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($21);
 $22 = HEAP32[$4>>2]|0;
 $23 = ($22|0)==(0|0);
 if ($23) {
  STACKTOP = sp;return;
 }
 $24 = HEAP32[$2>>2]|0;
 $25 = ($24|0)==($22|0);
 if (!($25)) {
  $__new_last2$i$i$i$i$i = $22;
  $scevgep$i$i$i$i$i = (($24) + -4|0);
  $scevgep1$i$i$i$i$i = $scevgep$i$i$i$i$i;
  $26 = (0 - ($__new_last2$i$i$i$i$i))|0;
  $uglygep$i$i$i$i$i = (($scevgep1$i$i$i$i$i) + ($26)|0);
  $uglygep3$i$i$i$i$i = $uglygep$i$i$i$i$i;
  $27 = $uglygep3$i$i$i$i$i >>> 2;
  $28 = $27 ^ -1;
  $scevgep4$i$i$i$i$i = (($24) + ($28<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i$i$i$i;
 }
 $29 = (($this) + 24|0);
 $30 = $29;
 $31 = ($30|0)==($22|0);
 if ($31) {
  $32 = (($this) + 136|0);
  HEAP8[$32] = 0;
  STACKTOP = sp;return;
 } else {
  $33 = $22;
  __ZdlPv($33);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16locale8__globalEv() {
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[(9112)]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $15 = HEAP32[(9104)>>2]|0;
  STACKTOP = sp;return ($15|0);
 }
 $3 = (___cxa_guard_acquire(((9112)|0))|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $15 = HEAP32[(9104)>>2]|0;
  STACKTOP = sp;return ($15|0);
 }
 $5 = HEAP8[(9088)]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire(((9088)|0))|0);
   $8 = ($7|0)==(0);
   if ($8) {
    break;
   }
   __THREW__ = 0;
   invoke_vii(81,((13480)|0),1);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $16 = ___cxa_find_matching_catch(-1,-1)|0;
    $17 = tempRet0;
    ___cxa_guard_abort(((9088)|0));
    ___cxa_guard_abort(((9112)|0));
    ___resumeException($16|0);
    // unreachable;
   } else {
    HEAP32[(9072)>>2] = (13480);
    HEAP32[(9080)>>2] = (9072);
    ___cxa_guard_release(((9088)|0));
    break;
   }
  }
 } while(0);
 $11 = HEAP32[(9080)>>2]|0;
 $12 = ($11);
 $13 = HEAP32[$12>>2]|0;
 HEAP32[(9096)>>2] = $13;
 $14 = ($13);
 __ZNSt3__114__shared_count12__add_sharedEv($14);
 HEAP32[(9104)>>2] = (9096);
 ___cxa_guard_release(((9112)|0));
 $15 = HEAP32[(9104)>>2]|0;
 STACKTOP = sp;return ($15|0);
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $1 = (invoke_i(6)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $8 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($8);
  // unreachable;
 } else {
  $4 = ($this);
  $5 = ($1);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$4>>2] = $6;
  $7 = ($6);
  __ZNSt3__114__shared_count12__add_sharedEv($7);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16localeC2ERKS0_($this,$l) {
 $this = $this|0;
 $l = $l|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 $2 = ($l);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$1>>2] = $3;
 $4 = ($3);
 __ZNSt3__114__shared_count12__add_sharedEv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__16localeD2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2);
 (__ZNSt3__114__shared_count16__release_sharedEv($3)|0);
 STACKTOP = sp;return;
}
function __ZNKSt3__16locale9has_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p$i$i = sp;
 $1 = ($this);
 $2 = HEAP32[$1>>2]|0;
 $3 = $__p$i$i;
 $4 = ($x);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(-1);
 if (!($6)) {
  $7 = ($__p$i$i);
  HEAP32[$7>>2] = $x;
  $8 = (($__p$i$i) + 4|0);
  HEAP32[$8>>2] = (183);
  $9 = (($__p$i$i) + 8|0);
  HEAP32[$9>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($4,$3,184);
 }
 $10 = (($x) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + -1)|0;
 $13 = (($2) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($2) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $14;
 $18 = $16;
 $19 = (($17) - ($18))|0;
 $20 = $19 >> 2;
 $21 = ($20>>>0)>($12>>>0);
 if (!($21)) {
  $25 = 0;
  STACKTOP = sp;return ($25|0);
 }
 $22 = (($16) + ($12<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0|0);
 $25 = $24;
 STACKTOP = sp;return ($25|0);
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $__p$i$i = sp;
 $1 = ($this);
 $2 = HEAP32[$1>>2]|0;
 $3 = $__p$i$i;
 $4 = ($x);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(-1);
 if (!($6)) {
  $7 = ($__p$i$i);
  HEAP32[$7>>2] = $x;
  $8 = (($__p$i$i) + 4|0);
  HEAP32[$8>>2] = (183);
  $9 = (($__p$i$i) + 8|0);
  HEAP32[$9>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($4,$3,184);
 }
 $10 = (($x) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + -1)|0;
 $13 = (($2) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($2) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $14;
 $18 = $16;
 $19 = (($17) - ($18))|0;
 $20 = $19 >> 2;
 $21 = ($20>>>0)>($12>>>0);
 if (!($21)) {
  $25 = (___cxa_allocate_exception(4)|0);
  $26 = $25;
  __ZNSt8bad_castC2Ev($26);
  ___cxa_throw(($25|0),((17096)|0),((143)|0));
  // unreachable;
 }
 $22 = (($16) + ($12<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(0|0);
 if ($24) {
  $25 = (___cxa_allocate_exception(4)|0);
  $26 = $25;
  __ZNSt8bad_castC2Ev($26);
  ___cxa_throw(($25|0),((17096)|0),((143)|0));
  // unreachable;
 } else {
  STACKTOP = sp;return ($23|0);
 }
 return 0|0;
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = $this;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 255]($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[(9120)>>2]|0;HEAP32[(9120)>>2] = (($1+1)|0);
 $2 = (($1) + 1)|0;
 $3 = (($this) + 4|0);
 HEAP32[$3>>2] = $2;
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $10 = 0;
  STACKTOP = sp;return ($10|0);
 }
 __THREW__ = 0;
 $1 = (invoke_i(5)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + ($c<<1)|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 & $m;
 $9 = ($8<<16>>16)!=(0);
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 $1 = ($low|0)==($high|0);
 if ($1) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$013 = $low;$$04 = $vec;
 }
 while(1) {
  $2 = HEAP32[$$013>>2]|0;
  $isascii = ($2>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $3 = (invoke_i(5)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    label = 4;
    break;
   }
   $7 = HEAP32[$3>>2]|0;
   $8 = (($7) + ($2<<1)|0);
   $9 = HEAP16[$8>>1]|0;
   $10 = $9;
  } else {
   $10 = 0;
  }
  HEAP16[$$04>>1] = $10;
  $11 = (($$013) + 4|0);
  $12 = (($$04) + 2|0);
  $13 = ($11|0)==($high|0);
  if ($13) {
   $$01$lcssa = $high;
   label = 7;
   break;
  } else {
   $$013 = $11;$$04 = $12;
  }
 }
 if ((label|0) == 4) {
  $6 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$01$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 $1 = ($low|0)==($high|0);
 if ($1) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $2 = HEAP32[$$02>>2]|0;
  $isascii = ($2>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $3 = (invoke_i(5)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    label = 4;
    break;
   }
   $7 = HEAP32[$3>>2]|0;
   $8 = (($7) + ($2<<1)|0);
   $9 = HEAP16[$8>>1]|0;
   $10 = $9 & $m;
   $11 = ($10<<16>>16)==(0);
   if (!($11)) {
    $$0$lcssa = $$02;
    label = 7;
    break;
   }
  }
  $12 = (($$02) + 4|0);
  $13 = ($12|0)==($high|0);
  if ($13) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$02 = $12;
  }
 }
 if ((label|0) == 4) {
  $6 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 $1 = ($low|0)==($high|0);
 L1: do {
  if ($1) {
   $$0$lcssa = $low;
  } else {
   $$02 = $low;
   while(1) {
    $3 = HEAP32[$$02>>2]|0;
    $isascii = ($3>>>0)<(128);
    if (!($isascii)) {
     $$0$lcssa = $$02;
     break L1;
    }
    __THREW__ = 0;
    $4 = (invoke_i(5)|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     break;
    }
    $8 = HEAP32[$4>>2]|0;
    $9 = (($8) + ($3<<1)|0);
    $10 = HEAP16[$9>>1]|0;
    $11 = $10 & $m;
    $12 = ($11<<16>>16)==(0);
    $13 = (($$02) + 4|0);
    if ($12) {
     $$0$lcssa = $$02;
     break L1;
    }
    $2 = ($13|0)==($high|0);
    if ($2) {
     $$0$lcssa = $high;
     break L1;
    } else {
     $$02 = $13;
    }
   }
   $7 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$0 = tempRet0;
   ___clang_call_terminate($7);
   // unreachable;
  }
 } while(0);
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $8 = $c;
  STACKTOP = sp;return ($8|0);
 }
 __THREW__ = 0;
 $1 = (invoke_i(7)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + ($c<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 $1 = ($low|0)==($high|0);
 if ($1) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $2 = HEAP32[$$02>>2]|0;
  $isascii = ($2>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $3 = (invoke_i(7)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    label = 4;
    break;
   }
   $7 = HEAP32[$3>>2]|0;
   $8 = (($7) + ($2<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9;
  } else {
   $10 = $2;
  }
  HEAP32[$$02>>2] = $10;
  $11 = (($$02) + 4|0);
  $12 = ($11|0)==($high|0);
  if ($12) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$02 = $11;
  }
 }
 if ((label|0) == 4) {
  $6 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $8 = $c;
  STACKTOP = sp;return ($8|0);
 }
 __THREW__ = 0;
 $1 = (invoke_i(8)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 }
 $5 = HEAP32[$1>>2]|0;
 $6 = (($5) + ($c<<2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7;
 STACKTOP = sp;return ($8|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 $1 = ($low|0)==($high|0);
 if ($1) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $2 = HEAP32[$$02>>2]|0;
  $isascii = ($2>>>0)<(128);
  if ($isascii) {
   __THREW__ = 0;
   $3 = (invoke_i(8)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    label = 4;
    break;
   }
   $7 = HEAP32[$3>>2]|0;
   $8 = (($7) + ($2<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9;
  } else {
   $10 = $2;
  }
  HEAP32[$$02>>2] = $10;
  $11 = (($$02) + 4|0);
  $12 = ($11|0)==($high|0);
  if ($12) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$02 = $11;
  }
 }
 if ((label|0) == 4) {
  $6 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $c << 24 >> 24;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$012$phi = 0, $$03 = 0, $$03$phi = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($low|0)==($high|0);
 if ($1) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$012 = $low;$$03 = $dest;
 }
 while(1) {
  $2 = HEAP8[$$012]|0;
  $3 = $2 << 24 >> 24;
  HEAP32[$$03>>2] = $3;
  $4 = (($$012) + 1|0);
  $5 = (($$03) + 4|0);
  $6 = ($4|0)==($high|0);
  if ($6) {
   $$01$lcssa = $high;
   break;
  } else {
   $$03$phi = $5;$$012$phi = $4;$$03 = $$03$phi;$$012 = $$012$phi;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $$0 = 0, $1 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 $1 = $c&255;
 $$0 = $isascii ? $1 : $dfault;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$012$phi = 0, $$03 = 0, $$03$phi = 0, $$dfault = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low5 = 0, $scevgep = 0, $scevgep4 = 0, $scevgep7 = 0;
 var $uglygep = 0, $uglygep6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($low|0)==($high|0);
 if ($1) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 }
 $low5 = $low;
 $scevgep = (($high) + -4|0);
 $scevgep4 = $scevgep;
 $2 = (0 - ($low5))|0;
 $uglygep = (($scevgep4) + ($2)|0);
 $uglygep6 = $uglygep;
 $3 = $uglygep6 >>> 2;
 $4 = (($3) + 1)|0;
 $$012 = $low;$$03 = $dest;
 while(1) {
  $5 = HEAP32[$$012>>2]|0;
  $isascii = ($5>>>0)<(128);
  $6 = $5&255;
  $$dfault = $isascii ? $6 : $dfault;
  HEAP8[$$03] = $$dfault;
  $7 = (($$012) + 4|0);
  $8 = (($$03) + 1|0);
  $9 = ($7|0)==($high|0);
  if ($9) {
   break;
  } else {
   $$03$phi = $8;$$012$phi = $7;$$03 = $$03$phi;$$012 = $$012$phi;
  }
 }
 $scevgep7 = (($low) + ($4<<2)|0);
 $$01$lcssa = $scevgep7;
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((9144) + 8|0)));
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if (!($4)) {
   $5 = (($this) + 12|0);
   $6 = HEAP8[$5]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    break;
   }
   $8 = $3;
   __ZdaPv($8);
  }
 } while(0);
 $9 = $this;
 __ZdlPv($9);
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((9144) + 8|0)));
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = (($this) + 12|0);
 $6 = HEAP8[$5]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = $3;
 __ZdaPv($8);
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $10 = $c;
  STACKTOP = sp;return ($10|0);
 }
 __THREW__ = 0;
 $1 = (invoke_i(7)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 }
 $5 = $c&255;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($6) + ($5<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&255;
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$03 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 $1 = ($low|0)==($high|0);
 if ($1) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$03 = $low;
 }
 while(1) {
  $2 = HEAP8[$$03]|0;
  $isascii1 = ($2<<24>>24)>(-1);
  if ($isascii1) {
   __THREW__ = 0;
   $3 = (invoke_i(7)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    label = 4;
    break;
   }
   $7 = $2 << 24 >> 24;
   $8 = HEAP32[$3>>2]|0;
   $9 = (($8) + ($7<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   $12 = $11;
  } else {
   $12 = $2;
  }
  HEAP8[$$03] = $12;
  $13 = (($$03) + 1|0);
  $14 = ($13|0)==($high|0);
  if ($14) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$03 = $13;
  }
 }
 if ((label|0) == 4) {
  $6 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $10 = $c;
  STACKTOP = sp;return ($10|0);
 }
 __THREW__ = 0;
 $1 = (invoke_i(8)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $4 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 }
 $5 = $c << 24 >> 24;
 $6 = HEAP32[$1>>2]|0;
 $7 = (($6) + ($5<<2)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8&255;
 $10 = $9;
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$03 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0, u$0 = 0;
 sp = STACKTOP;
 $1 = ($low|0)==($high|0);
 if ($1) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$03 = $low;
 }
 while(1) {
  $2 = HEAP8[$$03]|0;
  $isascii1 = ($2<<24>>24)>(-1);
  if ($isascii1) {
   __THREW__ = 0;
   $3 = (invoke_i(8)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    label = 4;
    break;
   }
   $7 = $2 << 24 >> 24;
   $8 = HEAP32[$3>>2]|0;
   $9 = (($8) + ($7<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $10&255;
   $12 = $11;
  } else {
   $12 = $2;
  }
  HEAP8[$$03] = $12;
  $13 = (($$03) + 1|0);
  $14 = ($13|0)==($high|0);
  if ($14) {
   $$0$lcssa = $high;
   label = 7;
   break;
  } else {
   $$03 = $13;
  }
 }
 if ((label|0) == 4) {
  $6 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($6);
  // unreachable;
 }
 else if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($c|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$012$phi = 0, $$03 = 0, $$03$phi = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($low|0)==($high|0);
 if ($1) {
  $$01$lcssa = $low;
 } else {
  $$012 = $low;$$03 = $dest;
  while(1) {
   $2 = HEAP8[$$012]|0;
   HEAP8[$$03] = $2;
   $3 = (($$012) + 1|0);
   $4 = (($$03) + 1|0);
   $5 = ($3|0)==($high|0);
   if ($5) {
    $$01$lcssa = $high;
    break;
   } else {
    $$03$phi = $4;$$012$phi = $3;$$03 = $$03$phi;$$012 = $$012$phi;
   }
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 $c$dfault = $isascii1 ? $c : $dfault;
 STACKTOP = sp;return ($c$dfault|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$013 = 0, $$013$phi = 0, $$04 = 0, $$04$phi = 0, $$dfault = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($low|0)==($high|0);
 if ($1) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$013 = $low;$$04 = $dest;
 }
 while(1) {
  $2 = HEAP8[$$013]|0;
  $isascii2 = ($2<<24>>24)>(-1);
  $$dfault = $isascii2 ? $2 : $dfault;
  HEAP8[$$04] = $$dfault;
  $3 = (($$013) + 1|0);
  $4 = (($$04) + 1|0);
  $5 = ($3|0)==($high|0);
  if ($5) {
   $$01$lcssa = $high;
   break;
  } else {
   $$04$phi = $4;$$013$phi = $3;$$04 = $$04$phi;$$013 = $$013$phi;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,u$0,$frm,u$1,$frm_nxt,$to,u$2,$to_nxt) {
 $this = $this|0;
 u$0 = u$0|0;
 $frm = $frm|0;
 u$1 = u$1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 u$2 = u$2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,u$0,$frm,u$1,$frm_nxt,$to,u$2,$to_nxt) {
 $this = $this|0;
 u$0 = u$0|0;
 $frm = $frm|0;
 u$1 = u$1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 u$2 = u$2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,u$0,$to,u$1,$to_nxt) {
 $this = $this|0;
 u$0 = u$0|0;
 $to = $to|0;
 u$1 = u$1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,u$0,$frm,$end,$mx) {
 $this = $this|0;
 u$0 = u$0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $end;
 $2 = $frm;
 $3 = (($1) - ($2))|0;
 $4 = ($3>>>0)<($mx>>>0);
 $5 = $4 ? $3 : $mx;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0148 = 0, $$0247 = 0, $$1$lcssa = 0, $$19 = 0, $$pre = 0, $$pre95 = 0, $$pre98 = 0, $$pre99 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0;
 var $fend$052 = 0, $fend$052$phi = 0, $fend$149 = 0, $fend$2$lcssa = 0, $fend$215 = 0, $fend$215$phi = 0, $fend$3 = 0, $n$011 = 0, $n$011$phi = 0, $not$ = 0, $or$cond = 0, $or$cond46 = 0, $p$012 = 0, $save_state = 0, $tmp = 0, $tmpcast = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0;
 var u$2 = 0, u$3 = 0, u$4 = 0, u$5 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $save_state = sp;
 $tmpcast = $save_state;
 $tmp = STACKTOP; STACKTOP = STACKTOP + 8|0;
 $1 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($1) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $109 = $frm;
  } else {
   $fend$052 = $frm;
   while(1) {
    $3 = HEAP32[$fend$052>>2]|0;
    $4 = ($3|0)==(0);
    $5 = (($fend$052) + 4|0);
    if ($4) {
     $fend$0$lcssa = $fend$052;
     break;
    }
    $2 = ($5|0)==($frm_end|0);
    if ($2) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$052$phi = $5;$fend$052 = $fend$052$phi;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $6 = ($to|0)==($to_end|0);
   $or$cond46 = $1 | $6;
   if ($or$cond46) {
    $109 = $frm;
    break;
   }
   $7 = $st;
   $8 = $to_end;
   $9 = (($this) + 8|0);
   $10 = ($tmp);
   $$0148 = $frm;$$0247 = $to;$fend$149 = $fend$0$lcssa;
   while(1) {
    $11 = $7;
    $12 = $11;
    $13 = HEAP32[$12>>2]|0;
    $14 = (($11) + 4)|0;
    $15 = $14;
    $16 = HEAP32[$15>>2]|0;
    $17 = $save_state;
    $18 = $17;
    HEAP32[$18>>2] = $13;
    $19 = (($17) + 4)|0;
    $20 = $19;
    HEAP32[$20>>2] = $16;
    $21 = $fend$149;
    $22 = $$0148;
    $23 = (($21) - ($22))|0;
    $24 = $23 >> 2;
    $25 = $$0247;
    $26 = (($8) - ($25))|0;
    $27 = HEAP32[$9>>2]|0;
    $28 = (_uselocale(($27|0))|0);
    __THREW__ = 0;
    $29 = (invoke_iiiiii(18,($$0247|0),($frm_nxt|0),($24|0),($26|0),($st|0))|0);
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if ($31) {
     label = 11;
     break;
    }
    $32 = ($28|0)==(0|0);
    if (!($32)) {
     __THREW__ = 0;
     (invoke_ii(93,($28|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if ($34) {
      label = 10;
      break;
     }
    }
    if ((($29|0) == -1)) {
     label = 16;
     break;
    } else if ((($29|0) == 0)) {
     $$0 = 1;
     label = 51;
     break;
    }
    $67 = HEAP32[$to_nxt>>2]|0;
    $68 = (($67) + ($29)|0);
    HEAP32[$to_nxt>>2] = $68;
    $69 = ($68|0)==($to_end|0);
    if ($69) {
     label = 49;
     break;
    }
    $70 = ($fend$149|0)==($frm_end|0);
    if ($70) {
     $$pre98 = HEAP32[$frm_nxt>>2]|0;
     $105 = $$pre98;$106 = $68;$fend$3 = $frm_end;
    } else {
     $71 = HEAP32[$9>>2]|0;
     $72 = (_uselocale(($71|0))|0);
     __THREW__ = 0;
     $73 = (invoke_iiii(38,($10|0),0,($st|0))|0);
     $74 = __THREW__; __THREW__ = 0;
     $75 = $74&1;
     if ($75) {
      label = 35;
      break;
     }
     $76 = ($72|0)==(0|0);
     if (!($76)) {
      __THREW__ = 0;
      (invoke_ii(93,($72|0))|0);
      $77 = __THREW__; __THREW__ = 0;
      $78 = $77&1;
      if ($78) {
       label = 34;
       break;
      }
     }
     $86 = ($73|0)==(-1);
     if ($86) {
      $$0 = 2;
      label = 51;
      break;
     }
     $87 = HEAP32[$to_nxt>>2]|0;
     $88 = $87;
     $89 = (($8) - ($88))|0;
     $90 = ($73>>>0)>($89>>>0);
     if ($90) {
      $$0 = 1;
      label = 51;
      break;
     }
     $91 = ($73|0)==(0);
     L24: do {
      if (!($91)) {
       $92 = $87;$n$011 = $73;$p$012 = $10;
       while(1) {
        $93 = HEAP8[$p$012]|0;
        $94 = (($92) + 1|0);
        HEAP32[$to_nxt>>2] = $94;
        HEAP8[$92] = $93;
        $95 = (($n$011) + -1)|0;
        $96 = ($95|0)==(0);
        if ($96) {
         break L24;
        }
        $97 = (($p$012) + 1|0);
        $$pre99 = HEAP32[$to_nxt>>2]|0;
        $n$011$phi = $95;$92 = $$pre99;$p$012 = $97;$n$011 = $n$011$phi;
       }
      }
     } while(0);
     $98 = HEAP32[$frm_nxt>>2]|0;
     $99 = (($98) + 4|0);
     HEAP32[$frm_nxt>>2] = $99;
     $100 = ($99|0)==($frm_end|0);
     L29: do {
      if ($100) {
       $fend$2$lcssa = $frm_end;
      } else {
       $fend$215 = $99;
       while(1) {
        $102 = HEAP32[$fend$215>>2]|0;
        $103 = ($102|0)==(0);
        $104 = (($fend$215) + 4|0);
        if ($103) {
         $fend$2$lcssa = $fend$215;
         break L29;
        }
        $101 = ($104|0)==($frm_end|0);
        if ($101) {
         $fend$2$lcssa = $frm_end;
         break;
        } else {
         $fend$215$phi = $104;$fend$215 = $fend$215$phi;
        }
       }
      }
     } while(0);
     $$pre95 = HEAP32[$to_nxt>>2]|0;
     $105 = $99;$106 = $$pre95;$fend$3 = $fend$2$lcssa;
    }
    $107 = ($105|0)==($frm_end|0);
    $108 = ($106|0)==($to_end|0);
    $or$cond = $107 | $108;
    if ($or$cond) {
     $109 = $105;
     break L1;
    } else {
     $$0148 = $105;$$0247 = $106;$fend$149 = $fend$3;
    }
   }
   if ((label|0) == 10) {
    $35 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    u$0 = tempRet0;
    ___clang_call_terminate($35);
    // unreachable;
   }
   else if ((label|0) == 11) {
    $36 = ___cxa_find_matching_catch(-1,-1)|0;
    $37 = tempRet0;
    $38 = ($28|0)==(0|0);
    if ($38) {
     ___resumeException($36|0);
     // unreachable;
    }
    __THREW__ = 0;
    (invoke_ii(93,($28|0))|0);
    $39 = __THREW__; __THREW__ = 0;
    $40 = $39&1;
    if ($40) {
     $41 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$1 = tempRet0;
     ___clang_call_terminate($41);
     // unreachable;
    } else {
     ___resumeException($36|0);
     // unreachable;
    }
   }
   else if ((label|0) == 16) {
    HEAP32[$to_nxt>>2] = $$0247;
    $42 = HEAP32[$frm_nxt>>2]|0;
    $43 = ($$0148|0)==($42|0);
    L38: do {
     if ($43) {
      $$1$lcssa = $$0148;
     } else {
      $$19 = $$0148;$44 = $$0247;
      while(1) {
       $45 = HEAP32[$$19>>2]|0;
       $46 = HEAP32[$9>>2]|0;
       $47 = (_uselocale(($46|0))|0);
       __THREW__ = 0;
       $48 = (invoke_iiii(38,($44|0),($45|0),($tmpcast|0))|0);
       $49 = __THREW__; __THREW__ = 0;
       $50 = $49&1;
       if ($50) {
        break;
       }
       $51 = ($47|0)==(0|0);
       if (!($51)) {
        __THREW__ = 0;
        (invoke_ii(93,($47|0))|0);
        $52 = __THREW__; __THREW__ = 0;
        $53 = $52&1;
        if ($53) {
         label = 20;
         break;
        }
       }
       $61 = ($48|0)==(-1);
       if ($61) {
        $$1$lcssa = $$19;
        break L38;
       }
       $62 = HEAP32[$to_nxt>>2]|0;
       $63 = (($62) + ($48)|0);
       HEAP32[$to_nxt>>2] = $63;
       $64 = (($$19) + 4|0);
       $65 = HEAP32[$frm_nxt>>2]|0;
       $66 = ($64|0)==($65|0);
       if ($66) {
        $$1$lcssa = $64;
        break L38;
       } else {
        $$19 = $64;$44 = $63;
       }
      }
      if ((label|0) == 20) {
       $54 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       u$2 = tempRet0;
       ___clang_call_terminate($54);
       // unreachable;
      }
      $55 = ___cxa_find_matching_catch(-1,-1)|0;
      $56 = tempRet0;
      $57 = ($47|0)==(0|0);
      if ($57) {
       ___resumeException($55|0);
       // unreachable;
      }
      __THREW__ = 0;
      (invoke_ii(93,($47|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       $60 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       u$3 = tempRet0;
       ___clang_call_terminate($60);
       // unreachable;
      } else {
       ___resumeException($55|0);
       // unreachable;
      }
     }
    } while(0);
    HEAP32[$frm_nxt>>2] = $$1$lcssa;
    $$0 = 2;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 34) {
    $79 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    u$4 = tempRet0;
    ___clang_call_terminate($79);
    // unreachable;
   }
   else if ((label|0) == 35) {
    $80 = ___cxa_find_matching_catch(-1,-1)|0;
    $81 = tempRet0;
    $82 = ($72|0)==(0|0);
    if ($82) {
     ___resumeException($80|0);
     // unreachable;
    }
    __THREW__ = 0;
    (invoke_ii(93,($72|0))|0);
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     $85 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$5 = tempRet0;
     ___clang_call_terminate($85);
     // unreachable;
    } else {
     ___resumeException($80|0);
     // unreachable;
    }
   }
   else if ((label|0) == 49) {
    $$pre = HEAP32[$frm_nxt>>2]|0;
    $109 = $$pre;
    break;
   }
   else if ((label|0) == 51) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $not$ = ($109|0)!=($frm_end|0);
 $110 = $not$&1;
 $$0 = $110;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0155 = 0, $$0254 = 0, $$1$lcssa = 0, $$115 = 0, $$2 = 0, $$pre = 0, $$pre111 = 0, $$pre113 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$059 = 0, $fend$059$phi = 0, $fend$156 = 0, $fend$2$lcssa = 0, $fend$216 = 0, $fend$216$phi = 0, $fend$3 = 0, $not$ = 0, $not$3 = 0;
 var $or$cond = 0, $or$cond53 = 0, $save_state = 0, $storemerge14 = 0, $tmpcast = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0, u$2 = 0, u$3 = 0, u$4 = 0, u$5 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $save_state = sp;
 $tmpcast = $save_state;
 $1 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($1) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $100 = $frm;
  } else {
   $fend$059 = $frm;
   while(1) {
    $3 = HEAP8[$fend$059]|0;
    $4 = ($3<<24>>24)==(0);
    $5 = (($fend$059) + 1|0);
    if ($4) {
     $fend$0$lcssa = $fend$059;
     break;
    }
    $2 = ($5|0)==($frm_end|0);
    if ($2) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$059$phi = $5;$fend$059 = $fend$059$phi;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $6 = ($to|0)==($to_end|0);
   $or$cond53 = $1 | $6;
   if ($or$cond53) {
    $100 = $frm;
    break;
   }
   $7 = $st;
   $8 = $to_end;
   $9 = (($this) + 8|0);
   $$0155 = $frm;$$0254 = $to;$fend$156 = $fend$0$lcssa;
   while(1) {
    $10 = $7;
    $11 = $10;
    $12 = HEAP32[$11>>2]|0;
    $13 = (($10) + 4)|0;
    $14 = $13;
    $15 = HEAP32[$14>>2]|0;
    $16 = $save_state;
    $17 = $16;
    HEAP32[$17>>2] = $12;
    $18 = (($16) + 4)|0;
    $19 = $18;
    HEAP32[$19>>2] = $15;
    $20 = $fend$156;
    $21 = $$0155;
    $22 = (($20) - ($21))|0;
    $23 = $$0254;
    $24 = (($8) - ($23))|0;
    $25 = $24 >> 2;
    $26 = HEAP32[$9>>2]|0;
    $27 = (_uselocale(($26|0))|0);
    __THREW__ = 0;
    $28 = (invoke_iiiiii(19,($$0254|0),($frm_nxt|0),($22|0),($25|0),($st|0))|0);
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if ($30) {
     label = 11;
     break;
    }
    $31 = ($27|0)==(0|0);
    if (!($31)) {
     __THREW__ = 0;
     (invoke_ii(93,($27|0))|0);
     $32 = __THREW__; __THREW__ = 0;
     $33 = $32&1;
     if ($33) {
      label = 10;
      break;
     }
    }
    if ((($28|0) == -1)) {
     label = 16;
     break;
    } else if ((($28|0) == 0)) {
     $$0 = 2;
     label = 50;
     break;
    }
    $67 = HEAP32[$to_nxt>>2]|0;
    $68 = (($67) + ($28<<2)|0);
    HEAP32[$to_nxt>>2] = $68;
    $69 = ($68|0)==($to_end|0);
    if ($69) {
     label = 48;
     break;
    }
    $70 = ($fend$156|0)==($frm_end|0);
    $$pre113 = HEAP32[$frm_nxt>>2]|0;
    if ($70) {
     $96 = $$pre113;$97 = $68;$fend$3 = $frm_end;
    } else {
     $71 = HEAP32[$9>>2]|0;
     $72 = (_uselocale(($71|0))|0);
     __THREW__ = 0;
     $73 = (invoke_iiiii(17,($68|0),($$pre113|0),1,($st|0))|0);
     $74 = __THREW__; __THREW__ = 0;
     $75 = $74&1;
     if ($75) {
      label = 38;
      break;
     }
     $76 = ($72|0)==(0|0);
     if (!($76)) {
      __THREW__ = 0;
      (invoke_ii(93,($72|0))|0);
      $77 = __THREW__; __THREW__ = 0;
      $78 = $77&1;
      if ($78) {
       label = 37;
       break;
      }
     }
     $86 = ($73|0)==(0);
     if (!($86)) {
      $$0 = 2;
      label = 50;
      break;
     }
     $87 = HEAP32[$to_nxt>>2]|0;
     $88 = (($87) + 4|0);
     HEAP32[$to_nxt>>2] = $88;
     $89 = HEAP32[$frm_nxt>>2]|0;
     $90 = (($89) + 1|0);
     HEAP32[$frm_nxt>>2] = $90;
     $91 = ($90|0)==($frm_end|0);
     L23: do {
      if ($91) {
       $fend$2$lcssa = $frm_end;
      } else {
       $fend$216 = $90;
       while(1) {
        $93 = HEAP8[$fend$216]|0;
        $94 = ($93<<24>>24)==(0);
        $95 = (($fend$216) + 1|0);
        if ($94) {
         $fend$2$lcssa = $fend$216;
         break L23;
        }
        $92 = ($95|0)==($frm_end|0);
        if ($92) {
         $fend$2$lcssa = $frm_end;
         break;
        } else {
         $fend$216$phi = $95;$fend$216 = $fend$216$phi;
        }
       }
      }
     } while(0);
     $$pre111 = HEAP32[$to_nxt>>2]|0;
     $96 = $90;$97 = $$pre111;$fend$3 = $fend$2$lcssa;
    }
    $98 = ($96|0)==($frm_end|0);
    $99 = ($97|0)==($to_end|0);
    $or$cond = $98 | $99;
    if ($or$cond) {
     $100 = $96;
     break L1;
    } else {
     $$0155 = $96;$$0254 = $97;$fend$156 = $fend$3;
    }
   }
   if ((label|0) == 10) {
    $34 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    u$0 = tempRet0;
    ___clang_call_terminate($34);
    // unreachable;
   }
   else if ((label|0) == 11) {
    $35 = ___cxa_find_matching_catch(-1,-1)|0;
    $36 = tempRet0;
    $37 = ($27|0)==(0|0);
    if ($37) {
     ___resumeException($35|0);
     // unreachable;
    }
    __THREW__ = 0;
    (invoke_ii(93,($27|0))|0);
    $38 = __THREW__; __THREW__ = 0;
    $39 = $38&1;
    if ($39) {
     $40 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$1 = tempRet0;
     ___clang_call_terminate($40);
     // unreachable;
    } else {
     ___resumeException($35|0);
     // unreachable;
    }
   }
   else if ((label|0) == 16) {
    HEAP32[$to_nxt>>2] = $$0254;
    $41 = HEAP32[$frm_nxt>>2]|0;
    $42 = ($$0155|0)==($41|0);
    L42: do {
     if ($42) {
      $$1$lcssa = $$0155;
     } else {
      $$115 = $$0155;$storemerge14 = $$0254;
      while(1) {
       $43 = $$115;
       $44 = (($20) - ($43))|0;
       $45 = HEAP32[$9>>2]|0;
       $46 = (_uselocale(($45|0))|0);
       __THREW__ = 0;
       $47 = (invoke_iiiii(17,($storemerge14|0),($$115|0),($44|0),($tmpcast|0))|0);
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if ($49) {
        label = 21;
        break;
       }
       $50 = ($46|0)==(0|0);
       if (!($50)) {
        __THREW__ = 0;
        (invoke_ii(93,($46|0))|0);
        $51 = __THREW__; __THREW__ = 0;
        $52 = $51&1;
        if ($52) {
         label = 20;
         break;
        }
       }
       if ((($47|0) == 0)) {
        $60 = (($$115) + 1|0);
        $$2 = $60;
       } else if ((($47|0) == -2)) {
        label = 28;
        break;
       } else if ((($47|0) == -1)) {
        label = 27;
        break;
       } else {
        $61 = (($$115) + ($47)|0);
        $$2 = $61;
       }
       $62 = HEAP32[$to_nxt>>2]|0;
       $63 = (($62) + 4|0);
       HEAP32[$to_nxt>>2] = $63;
       $64 = HEAP32[$frm_nxt>>2]|0;
       $65 = ($$2|0)==($64|0);
       if ($65) {
        $$1$lcssa = $$2;
        break L42;
       } else {
        $$115 = $$2;$storemerge14 = $63;
       }
      }
      if ((label|0) == 20) {
       $53 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
       u$2 = tempRet0;
       ___clang_call_terminate($53);
       // unreachable;
      }
      else if ((label|0) == 21) {
       $54 = ___cxa_find_matching_catch(-1,-1)|0;
       $55 = tempRet0;
       $56 = ($46|0)==(0|0);
       if ($56) {
        ___resumeException($54|0);
        // unreachable;
       }
       __THREW__ = 0;
       (invoke_ii(93,($46|0))|0);
       $57 = __THREW__; __THREW__ = 0;
       $58 = $57&1;
       if ($58) {
        $59 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
        u$3 = tempRet0;
        ___clang_call_terminate($59);
        // unreachable;
       } else {
        ___resumeException($54|0);
        // unreachable;
       }
      }
      else if ((label|0) == 27) {
       HEAP32[$frm_nxt>>2] = $$115;
       $$0 = 2;
       STACKTOP = sp;return ($$0|0);
      }
      else if ((label|0) == 28) {
       HEAP32[$frm_nxt>>2] = $$115;
       $$0 = 1;
       STACKTOP = sp;return ($$0|0);
      }
     }
    } while(0);
    HEAP32[$frm_nxt>>2] = $$1$lcssa;
    $not$3 = ($$1$lcssa|0)!=($frm_end|0);
    $66 = $not$3&1;
    $$0 = $66;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 37) {
    $79 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    u$4 = tempRet0;
    ___clang_call_terminate($79);
    // unreachable;
   }
   else if ((label|0) == 38) {
    $80 = ___cxa_find_matching_catch(-1,-1)|0;
    $81 = tempRet0;
    $82 = ($72|0)==(0|0);
    if ($82) {
     ___resumeException($80|0);
     // unreachable;
    }
    __THREW__ = 0;
    (invoke_ii(93,($72|0))|0);
    $83 = __THREW__; __THREW__ = 0;
    $84 = $83&1;
    if ($84) {
     $85 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$5 = tempRet0;
     ___clang_call_terminate($85);
     // unreachable;
    } else {
     ___resumeException($80|0);
     // unreachable;
    }
   }
   else if ((label|0) == 48) {
    $$pre = HEAP32[$frm_nxt>>2]|0;
    $100 = $$pre;
    break;
   }
   else if ((label|0) == 50) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $not$ = ($100|0)!=($frm_end|0);
 $101 = $not$&1;
 $$0 = $101;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$02 = 0, $n$02$phi = 0, $p$03 = 0, $tmp = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $tmp = sp;
 HEAP32[$to_nxt>>2] = $to;
 $1 = ($tmp);
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_uselocale(($3|0))|0);
 __THREW__ = 0;
 $5 = (invoke_iiii(38,($1|0),0,($st|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $12 = ___cxa_find_matching_catch(-1,-1)|0;
  $13 = tempRet0;
  $14 = ($4|0)==(0|0);
  if ($14) {
   ___resumeException($12|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(93,($4|0))|0);
  $15 = __THREW__; __THREW__ = 0;
  $16 = $15&1;
  if ($16) {
   $17 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$1 = tempRet0;
   ___clang_call_terminate($17);
   // unreachable;
  } else {
   ___resumeException($12|0);
   // unreachable;
  }
 }
 $8 = ($4|0)==(0|0);
 do {
  if (!($8)) {
   __THREW__ = 0;
   (invoke_ii(93,($4|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    break;
   }
   $11 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$0 = tempRet0;
   ___clang_call_terminate($11);
   // unreachable;
  }
 } while(0);
 if ((($5|0) == 0) | (($5|0) == -1)) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = (($5) + -1)|0;
 $19 = HEAP32[$to_nxt>>2]|0;
 $20 = $to_end;
 $21 = $19;
 $22 = (($20) - ($21))|0;
 $23 = ($18>>>0)>($22>>>0);
 if ($23) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = ($18|0)==(0);
 if ($24) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $25 = $19;$n$02 = $18;$p$03 = $1;
 }
 while(1) {
  $26 = HEAP8[$p$03]|0;
  $27 = (($25) + 1|0);
  HEAP32[$to_nxt>>2] = $27;
  HEAP8[$25] = $26;
  $28 = (($n$02) + -1)|0;
  $29 = ($28|0)==(0);
  if ($29) {
   $$0 = 0;
   break;
  }
  $30 = (($p$03) + 1|0);
  $$pre = HEAP32[$to_nxt>>2]|0;
  $n$02$phi = $28;$25 = $$pre;$p$03 = $30;$n$02 = $n$02$phi;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0, u$2 = 0, u$3 = 0, u$4 = 0;
 sp = STACKTOP;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 $3 = (invoke_ii(93,($2|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if (!($5)) {
   __THREW__ = 0;
   $6 = (invoke_iiii(39,(0|0),(0|0),4)|0);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $13 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    u$1 = tempRet0;
    $14 = ($3|0)==(0|0);
    if ($14) {
     $eh$lpad$body$indexZ2D = $13;
     ___clang_call_terminate($eh$lpad$body$indexZ2D);
     // unreachable;
    }
    __THREW__ = 0;
    (invoke_ii(93,($3|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if ($16) {
     $17 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$2 = tempRet0;
     ___clang_call_terminate($17);
     // unreachable;
    } else {
     $eh$lpad$body$indexZ2D = $13;
     ___clang_call_terminate($eh$lpad$body$indexZ2D);
     // unreachable;
    }
   }
   $9 = ($3|0)==(0|0);
   do {
    if (!($9)) {
     __THREW__ = 0;
     (invoke_ii(93,($3|0))|0);
     $10 = __THREW__; __THREW__ = 0;
     $11 = $10&1;
     if (!($11)) {
      break;
     }
     $12 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
     u$0 = tempRet0;
     ___clang_call_terminate($12);
     // unreachable;
    }
   } while(0);
   $18 = ($6|0)==(0);
   if (!($18)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $19 = HEAP32[$1>>2]|0;
   $20 = ($19|0)==(0|0);
   if ($20) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   __THREW__ = 0;
   $21 = (invoke_ii(93,($19|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    break;
   }
   $24 = ($21|0)==(0|0);
   if ($24) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   __THREW__ = 0;
   (invoke_ii(93,($21|0))|0);
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    $27 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
    u$3 = tempRet0;
    ___clang_call_terminate($27);
    // unreachable;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $28 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
 u$4 = tempRet0;
 $eh$lpad$body$indexZ2D = $28;
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$016 = 0, $$1 = 0, $$pn = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbytes$0$lcssa = 0, $nbytes$07 = 0, $nbytes$1 = 0, $nwchar_t$08 = 0, $or$cond = 0, $or$cond5 = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0;
 sp = STACKTOP;
 $1 = ($mx|0)==(0);
 $2 = ($frm|0)==($frm_end|0);
 $or$cond5 = $1 | $2;
 if ($or$cond5) {
  $nbytes$0$lcssa = 0;
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 $3 = $frm_end;
 $4 = (($this) + 8|0);
 $$016 = $frm;$nbytes$07 = 0;$nwchar_t$08 = 0;
 while(1) {
  $5 = $$016;
  $6 = (($3) - ($5))|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = (_uselocale(($7|0))|0);
  __THREW__ = 0;
  $9 = (invoke_iiii(40,($$016|0),($6|0),($st|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if ($11) {
   label = 7;
   break;
  }
  $12 = ($8|0)==(0|0);
  if (!($12)) {
   __THREW__ = 0;
   (invoke_ii(93,($8|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    label = 6;
    break;
   }
  }
  if ((($9|0) == 0)) {
   $22 = (($$016) + 1|0);
   $$1 = $22;$$pn = 1;
  } else if ((($9|0) == -2) | (($9|0) == -1)) {
   $nbytes$0$lcssa = $nbytes$07;
   label = 15;
   break;
  } else {
   $23 = (($$016) + ($9)|0);
   $$1 = $23;$$pn = $9;
  }
  $nbytes$1 = (($$pn) + ($nbytes$07))|0;
  $24 = (($nwchar_t$08) + 1)|0;
  $25 = ($24>>>0)>=($mx>>>0);
  $26 = ($$1|0)==($frm_end|0);
  $or$cond = $25 | $26;
  if ($or$cond) {
   $nbytes$0$lcssa = $nbytes$1;
   label = 15;
   break;
  } else {
   $$016 = $$1;$nbytes$07 = $nbytes$1;$nwchar_t$08 = $24;
  }
 }
 if ((label|0) == 6) {
  $15 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($15);
  // unreachable;
 }
 else if ((label|0) == 7) {
  $16 = ___cxa_find_matching_catch(-1,-1)|0;
  $17 = tempRet0;
  $18 = ($8|0)==(0|0);
  if ($18) {
   ___resumeException($16|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(93,($8|0))|0);
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   $21 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
   u$1 = tempRet0;
   ___clang_call_terminate($21);
   // unreachable;
  } else {
   ___resumeException($16|0);
   // unreachable;
  }
 }
 else if ((label|0) == 15) {
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0;
 sp = STACKTOP;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $11 = 1;
  STACKTOP = sp;return ($11|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(93,($2|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $12 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$1 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 }
 $7 = ($4|0)==(0|0);
 if ($7) {
  $11 = 4;
  STACKTOP = sp;return ($11|0);
 }
 __THREW__ = 0;
 (invoke_ii(93,($4|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch(-1,-1,0|0)|0;
  u$0 = tempRet0;
  ___clang_call_terminate($10);
  // unreachable;
 } else {
  $11 = 4;
  STACKTOP = sp;return ($11|0);
 }
 return 0|0;
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,u$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 u$0 = u$0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp;
 $_to_nxt = sp + 8|0;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 1;
 $7 = (($frm) + ($6<<1)|0);
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $12 = (($to) + ($11)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $1 = $mode & 2;
 $2 = ($1|0)==(0);
 do {
  if (!($2)) {
   $3 = $to_end;
   $4 = $to;
   $5 = (($3) - ($4))|0;
   $6 = ($5|0)<(3);
   if ($6) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $7 = (($to) + 1|0);
    HEAP32[$to_nxt>>2] = $7;
    HEAP8[$to] = -17;
    $8 = HEAP32[$to_nxt>>2]|0;
    $9 = (($8) + 1|0);
    HEAP32[$to_nxt>>2] = $9;
    HEAP8[$8] = -69;
    $10 = HEAP32[$to_nxt>>2]|0;
    $11 = (($10) + 1|0);
    HEAP32[$to_nxt>>2] = $11;
    HEAP8[$10] = -65;
    break;
   }
  }
 } while(0);
 $12 = $frm_end;
 $13 = HEAP32[$frm_nxt>>2]|0;
 $14 = ($13>>>0)<($frm_end>>>0);
 if (!($14)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = $to_end;
 $16 = $13;
 L10: while(1) {
  $17 = HEAP16[$16>>1]|0;
  $18 = $17&65535;
  $19 = ($18>>>0)>($Maxcode>>>0);
  if ($19) {
   $$0 = 2;
   label = 26;
   break;
  }
  $20 = ($17&65535)<(128);
  do {
   if ($20) {
    $21 = HEAP32[$to_nxt>>2]|0;
    $22 = $21;
    $23 = (($15) - ($22))|0;
    $24 = ($23|0)<(1);
    if ($24) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $25 = $17&255;
    $26 = (($21) + 1|0);
    HEAP32[$to_nxt>>2] = $26;
    HEAP8[$21] = $25;
   } else {
    $27 = ($17&65535)<(2048);
    if ($27) {
     $28 = HEAP32[$to_nxt>>2]|0;
     $29 = $28;
     $30 = (($15) - ($29))|0;
     $31 = ($30|0)<(2);
     if ($31) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $32 = $18 >>> 6;
     $33 = $32 | 192;
     $34 = $33&255;
     $35 = (($28) + 1|0);
     HEAP32[$to_nxt>>2] = $35;
     HEAP8[$28] = $34;
     $36 = $18 & 63;
     $37 = $36 | 128;
     $38 = $37&255;
     $39 = HEAP32[$to_nxt>>2]|0;
     $40 = (($39) + 1|0);
     HEAP32[$to_nxt>>2] = $40;
     HEAP8[$39] = $38;
     break;
    }
    $41 = ($17&65535)<(55296);
    if ($41) {
     $42 = HEAP32[$to_nxt>>2]|0;
     $43 = $42;
     $44 = (($15) - ($43))|0;
     $45 = ($44|0)<(3);
     if ($45) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $46 = $18 >>> 12;
     $47 = $46 | 224;
     $48 = $47&255;
     $49 = (($42) + 1|0);
     HEAP32[$to_nxt>>2] = $49;
     HEAP8[$42] = $48;
     $50 = $18 >>> 6;
     $51 = $50 & 63;
     $52 = $51 | 128;
     $53 = $52&255;
     $54 = HEAP32[$to_nxt>>2]|0;
     $55 = (($54) + 1|0);
     HEAP32[$to_nxt>>2] = $55;
     HEAP8[$54] = $53;
     $56 = $18 & 63;
     $57 = $56 | 128;
     $58 = $57&255;
     $59 = HEAP32[$to_nxt>>2]|0;
     $60 = (($59) + 1|0);
     HEAP32[$to_nxt>>2] = $60;
     HEAP8[$59] = $58;
     break;
    }
    $61 = ($17&65535)<(56320);
    if (!($61)) {
     $113 = ($17&65535)<(57344);
     if ($113) {
      $$0 = 2;
      label = 26;
      break L10;
     }
     $114 = HEAP32[$to_nxt>>2]|0;
     $115 = $114;
     $116 = (($15) - ($115))|0;
     $117 = ($116|0)<(3);
     if ($117) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $118 = $18 >>> 12;
     $119 = $118 | 224;
     $120 = $119&255;
     $121 = (($114) + 1|0);
     HEAP32[$to_nxt>>2] = $121;
     HEAP8[$114] = $120;
     $122 = $18 >>> 6;
     $123 = $122 & 63;
     $124 = $123 | 128;
     $125 = $124&255;
     $126 = HEAP32[$to_nxt>>2]|0;
     $127 = (($126) + 1|0);
     HEAP32[$to_nxt>>2] = $127;
     HEAP8[$126] = $125;
     $128 = $18 & 63;
     $129 = $128 | 128;
     $130 = $129&255;
     $131 = HEAP32[$to_nxt>>2]|0;
     $132 = (($131) + 1|0);
     HEAP32[$to_nxt>>2] = $132;
     HEAP8[$131] = $130;
     break;
    }
    $62 = $16;
    $63 = (($12) - ($62))|0;
    $64 = ($63|0)<(4);
    if ($64) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $65 = (($16) + 2|0);
    $66 = HEAP16[$65>>1]|0;
    $67 = $66&65535;
    $68 = $67 & 64512;
    $69 = ($68|0)==(56320);
    if (!($69)) {
     $$0 = 2;
     label = 26;
     break L10;
    }
    $70 = HEAP32[$to_nxt>>2]|0;
    $71 = $70;
    $72 = (($15) - ($71))|0;
    $73 = ($72|0)<(4);
    if ($73) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $74 = $18 & 960;
    $75 = $74 << 10;
    $76 = (($75) + 65536)|0;
    $77 = $18 << 10;
    $78 = $77 & 64512;
    $79 = $76 | $78;
    $80 = $67 & 1023;
    $81 = $79 | $80;
    $82 = ($81>>>0)>($Maxcode>>>0);
    if ($82) {
     $$0 = 2;
     label = 26;
     break L10;
    }
    HEAP32[$frm_nxt>>2] = $65;
    $83 = $74 >>> 6;
    $84 = (($83) + 1)|0;
    $85 = $84 >>> 2;
    $86 = $85 | 240;
    $87 = $86&255;
    $88 = HEAP32[$to_nxt>>2]|0;
    $89 = (($88) + 1|0);
    HEAP32[$to_nxt>>2] = $89;
    HEAP8[$88] = $87;
    $90 = $84 << 4;
    $91 = $90 & 48;
    $92 = $18 >>> 2;
    $93 = $92 & 15;
    $94 = $93 | $91;
    $95 = $94 | 128;
    $96 = $95&255;
    $97 = HEAP32[$to_nxt>>2]|0;
    $98 = (($97) + 1|0);
    HEAP32[$to_nxt>>2] = $98;
    HEAP8[$97] = $96;
    $99 = $18 << 4;
    $100 = $99 & 48;
    $101 = $67 >>> 6;
    $102 = $101 & 15;
    $103 = $100 | $102;
    $104 = $103 | 128;
    $105 = $104&255;
    $106 = HEAP32[$to_nxt>>2]|0;
    $107 = (($106) + 1|0);
    HEAP32[$to_nxt>>2] = $107;
    HEAP8[$106] = $105;
    $108 = $67 & 63;
    $109 = $108 | 128;
    $110 = $109&255;
    $111 = HEAP32[$to_nxt>>2]|0;
    $112 = (($111) + 1|0);
    HEAP32[$to_nxt>>2] = $112;
    HEAP8[$111] = $110;
   }
  } while(0);
  $133 = HEAP32[$frm_nxt>>2]|0;
  $134 = (($133) + 2|0);
  HEAP32[$frm_nxt>>2] = $134;
  $135 = ($134>>>0)<($frm_end>>>0);
  if ($135) {
   $16 = $134;
  } else {
   $$0 = 0;
   label = 26;
   break;
  }
 }
 if ((label|0) == 26) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,u$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 u$0 = u$0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp;
 $_to_nxt = sp + 8|0;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = (($frm) + ($5)|0);
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 1;
 $12 = (($to) + ($11<<1)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$off = 0, $$pre = 0, $$pre5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $1 = $mode & 4;
 $2 = ($1|0)==(0);
 $$pre5 = HEAP32[$frm_nxt>>2]|0;
 do {
  if ($2) {
   $16 = $$pre5;
  } else {
   $3 = $frm_end;
   $4 = $$pre5;
   $5 = (($3) - ($4))|0;
   $6 = ($5|0)>(2);
   if (!($6)) {
    $16 = $$pre5;
    break;
   }
   $7 = HEAP8[$$pre5]|0;
   $8 = ($7<<24>>24)==(-17);
   if (!($8)) {
    $16 = $$pre5;
    break;
   }
   $9 = (($$pre5) + 1|0);
   $10 = HEAP8[$9]|0;
   $11 = ($10<<24>>24)==(-69);
   if (!($11)) {
    $16 = $$pre5;
    break;
   }
   $12 = (($$pre5) + 2|0);
   $13 = HEAP8[$12]|0;
   $14 = ($13<<24>>24)==(-65);
   if (!($14)) {
    $16 = $$pre5;
    break;
   }
   $15 = (($$pre5) + 3|0);
   HEAP32[$frm_nxt>>2] = $15;
   $16 = $15;
  }
 } while(0);
 $17 = ($16>>>0)<($frm_end>>>0);
 L8: do {
  if ($17) {
   $18 = $frm_end;
   $19 = $to_end;
   $$pre = HEAP32[$to_nxt>>2]|0;
   $20 = $16;$21 = $$pre;
   L10: while(1) {
    $22 = ($21>>>0)<($to_end>>>0);
    if (!($22)) {
     $135 = $20;
     break L8;
    }
    $23 = HEAP8[$20]|0;
    $24 = $23&255;
    $25 = ($24>>>0)>($Maxcode>>>0);
    if ($25) {
     $$0 = 2;
     label = 41;
     break;
    }
    $26 = ($23<<24>>24)>(-1);
    do {
     if ($26) {
      $27 = $23&255;
      HEAP16[$21>>1] = $27;
      $28 = (($20) + 1|0);
      HEAP32[$frm_nxt>>2] = $28;
     } else {
      $29 = ($23&255)<(194);
      if ($29) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $30 = ($23&255)<(224);
      if ($30) {
       $31 = $20;
       $32 = (($18) - ($31))|0;
       $33 = ($32|0)<(2);
       if ($33) {
        $$0 = 1;
        label = 41;
        break L10;
       }
       $34 = (($20) + 1|0);
       $35 = HEAP8[$34]|0;
       $36 = $35&255;
       $37 = $36 & 192;
       $38 = ($37|0)==(128);
       if (!($38)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $39 = $24 << 6;
       $40 = $39 & 1984;
       $41 = $36 & 63;
       $42 = $41 | $40;
       $43 = ($42>>>0)>($Maxcode>>>0);
       if ($43) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $44 = $42&65535;
       HEAP16[$21>>1] = $44;
       $45 = (($20) + 2|0);
       HEAP32[$frm_nxt>>2] = $45;
       break;
      }
      $46 = ($23&255)<(240);
      if ($46) {
       $47 = $20;
       $48 = (($18) - ($47))|0;
       $49 = ($48|0)<(3);
       if ($49) {
        $$0 = 1;
        label = 41;
        break L10;
       }
       $50 = (($20) + 1|0);
       $51 = HEAP8[$50]|0;
       $52 = (($20) + 2|0);
       $53 = HEAP8[$52]|0;
       if ((($24|0) == 237)) {
        $56 = $51 & -32;
        $57 = ($56<<24>>24)==(-128);
        if (!($57)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       } else if ((($24|0) == 224)) {
        $54 = $51 & -32;
        $55 = ($54<<24>>24)==(-96);
        if (!($55)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       } else {
        $58 = $51 & -64;
        $59 = ($58<<24>>24)==(-128);
        if (!($59)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       }
       $60 = $53&255;
       $61 = $60 & 192;
       $62 = ($61|0)==(128);
       if (!($62)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $63 = $24 << 12;
       $64 = $51&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $60 & 63;
       $69 = $67 | $68;
       $70 = $69 & 65535;
       $71 = ($70>>>0)>($Maxcode>>>0);
       if ($71) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $72 = $69&65535;
       HEAP16[$21>>1] = $72;
       $73 = (($20) + 3|0);
       HEAP32[$frm_nxt>>2] = $73;
       break;
      }
      $74 = ($23&255)<(245);
      if (!($74)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $75 = $20;
      $76 = (($18) - ($75))|0;
      $77 = ($76|0)<(4);
      if ($77) {
       $$0 = 1;
       label = 41;
       break L10;
      }
      $78 = (($20) + 1|0);
      $79 = HEAP8[$78]|0;
      $80 = (($20) + 2|0);
      $81 = HEAP8[$80]|0;
      $82 = (($20) + 3|0);
      $83 = HEAP8[$82]|0;
      if ((($24|0) == 244)) {
       $85 = $79 & -16;
       $86 = ($85<<24>>24)==(-128);
       if (!($86)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      } else if ((($24|0) == 240)) {
       $$off = (($79) + 112)<<24>>24;
       $84 = ($$off&255)<(48);
       if (!($84)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      } else {
       $87 = $79 & -64;
       $88 = ($87<<24>>24)==(-128);
       if (!($88)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      }
      $89 = $81&255;
      $90 = $89 & 192;
      $91 = ($90|0)==(128);
      if (!($91)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $92 = $83&255;
      $93 = $92 & 192;
      $94 = ($93|0)==(128);
      if (!($94)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $95 = $21;
      $96 = (($19) - ($95))|0;
      $97 = ($96|0)<(4);
      if ($97) {
       $$0 = 1;
       label = 41;
       break L10;
      }
      $98 = $24 & 7;
      $99 = $98 << 18;
      $100 = $79&255;
      $101 = $100 << 12;
      $102 = $101 & 258048;
      $103 = $102 | $99;
      $104 = $89 << 6;
      $105 = $104 & 4032;
      $106 = $103 | $105;
      $107 = $92 & 63;
      $108 = $106 | $107;
      $109 = ($108>>>0)>($Maxcode>>>0);
      if ($109) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $110 = $98 << 2;
      $111 = $100 >>> 4;
      $112 = $111 & 3;
      $113 = $112 | $110;
      $114 = $113 << 6;
      $115 = (($114) + 16320)|0;
      $116 = $100 << 2;
      $117 = $116 & 60;
      $118 = $89 >>> 4;
      $119 = $118 & 3;
      $120 = $117 | $119;
      $121 = $120 | $115;
      $122 = $121 | 55296;
      $123 = $122&65535;
      HEAP16[$21>>1] = $123;
      $124 = $104 & 960;
      $125 = $107 | $124;
      $126 = $125 | 56320;
      $127 = $126&65535;
      $128 = (($21) + 2|0);
      HEAP32[$to_nxt>>2] = $128;
      HEAP16[$128>>1] = $127;
      $129 = HEAP32[$frm_nxt>>2]|0;
      $130 = (($129) + 4|0);
      HEAP32[$frm_nxt>>2] = $130;
     }
    } while(0);
    $131 = HEAP32[$to_nxt>>2]|0;
    $132 = (($131) + 2|0);
    HEAP32[$to_nxt>>2] = $132;
    $133 = HEAP32[$frm_nxt>>2]|0;
    $134 = ($133>>>0)<($frm_end>>>0);
    if ($134) {
     $20 = $133;$21 = $132;
    } else {
     $135 = $133;
     break L8;
    }
   }
   if ((label|0) == 41) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $135 = $16;
  }
 } while(0);
 $136 = ($135>>>0)<($frm_end>>>0);
 $137 = $136&1;
 $$0 = $137;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,u$0,$to,u$1,$to_nxt) {
 $this = $this|0;
 u$0 = u$0|0;
 $to = $to|0;
 u$1 = u$1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,u$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 u$0 = u$0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$off = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $nchar16_t$014 = 0, $nchar16_t$1 = 0, $or$cond = 0, $or$cond13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $mode & 4;
 $2 = ($1|0)==(0);
 do {
  if ($2) {
   $frm_nxt$1$ph = $frm;
  } else {
   $3 = $frm_end;
   $4 = $frm;
   $5 = (($3) - ($4))|0;
   $6 = ($5|0)>(2);
   if (!($6)) {
    $frm_nxt$1$ph = $frm;
    break;
   }
   $7 = HEAP8[$frm]|0;
   $8 = ($7<<24>>24)==(-17);
   if (!($8)) {
    $frm_nxt$1$ph = $frm;
    break;
   }
   $9 = (($frm) + 1|0);
   $10 = HEAP8[$9]|0;
   $11 = ($10<<24>>24)==(-69);
   if (!($11)) {
    $frm_nxt$1$ph = $frm;
    break;
   }
   $12 = (($frm) + 2|0);
   $13 = HEAP8[$12]|0;
   $14 = ($13<<24>>24)==(-65);
   $15 = (($frm) + 3|0);
   $$frm = $14 ? $15 : $frm;
   $frm_nxt$1$ph = $$frm;
  }
 } while(0);
 $16 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $17 = ($mx|0)!=(0);
 $or$cond13 = $16 & $17;
 L7: do {
  if ($or$cond13) {
   $18 = $frm_end;
   $frm_nxt$115 = $frm_nxt$1$ph;$nchar16_t$014 = 0;
   L9: while(1) {
    $19 = HEAP8[$frm_nxt$115]|0;
    $20 = $19&255;
    $21 = ($20>>>0)>($Maxcode>>>0);
    if ($21) {
     $frm_nxt$1$lcssa = $frm_nxt$115;
     break L7;
    }
    $22 = ($19<<24>>24)>(-1);
    do {
     if ($22) {
      $23 = (($frm_nxt$115) + 1|0);
      $frm_nxt$2 = $23;$nchar16_t$1 = $nchar16_t$014;
     } else {
      $24 = ($19&255)<(194);
      if ($24) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $25 = ($19&255)<(224);
      if ($25) {
       $26 = $frm_nxt$115;
       $27 = (($18) - ($26))|0;
       $28 = ($27|0)<(2);
       if ($28) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $29 = (($frm_nxt$115) + 1|0);
       $30 = HEAP8[$29]|0;
       $31 = $30&255;
       $32 = $31 & 192;
       $33 = ($32|0)==(128);
       if (!($33)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $34 = $20 << 6;
       $35 = $34 & 1984;
       $36 = $31 & 63;
       $37 = $36 | $35;
       $38 = ($37>>>0)>($Maxcode>>>0);
       if ($38) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $39 = (($frm_nxt$115) + 2|0);
       $frm_nxt$2 = $39;$nchar16_t$1 = $nchar16_t$014;
       break;
      }
      $40 = ($19&255)<(240);
      if ($40) {
       $41 = $frm_nxt$115;
       $42 = (($18) - ($41))|0;
       $43 = ($42|0)<(3);
       if ($43) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $44 = (($frm_nxt$115) + 1|0);
       $45 = HEAP8[$44]|0;
       $46 = (($frm_nxt$115) + 2|0);
       $47 = HEAP8[$46]|0;
       if ((($20|0) == 237)) {
        $52 = $45 & -32;
        $53 = ($52<<24>>24)==(-128);
        if (!($53)) {
         label = 23;
         break L9;
        }
       } else if ((($20|0) == 224)) {
        $48 = $45 & -32;
        $49 = ($48<<24>>24)==(-96);
        if (!($49)) {
         label = 21;
         break L9;
        }
       } else {
        $56 = $45 & -64;
        $57 = ($56<<24>>24)==(-128);
        if (!($57)) {
         label = 25;
         break L9;
        }
       }
       $60 = $47&255;
       $61 = $60 & 192;
       $62 = ($61|0)==(128);
       if (!($62)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $63 = $20 << 12;
       $64 = $63 & 61440;
       $65 = $45&255;
       $66 = $65 << 6;
       $67 = $66 & 4032;
       $68 = $67 | $64;
       $69 = $60 & 63;
       $70 = $68 | $69;
       $71 = ($70>>>0)>($Maxcode>>>0);
       if ($71) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $72 = (($frm_nxt$115) + 3|0);
       $frm_nxt$2 = $72;$nchar16_t$1 = $nchar16_t$014;
       break;
      }
      $73 = ($19&255)<(245);
      if (!($73)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $74 = $frm_nxt$115;
      $75 = (($18) - ($74))|0;
      $76 = ($75|0)<(4);
      if ($76) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $77 = (($mx) - ($nchar16_t$014))|0;
      $78 = ($77>>>0)<(2);
      if ($78) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $79 = (($frm_nxt$115) + 1|0);
      $80 = HEAP8[$79]|0;
      $81 = (($frm_nxt$115) + 2|0);
      $82 = HEAP8[$81]|0;
      $83 = (($frm_nxt$115) + 3|0);
      $84 = HEAP8[$83]|0;
      if ((($20|0) == 240)) {
       $$off = (($80) + 112)<<24>>24;
       $85 = ($$off&255)<(48);
       if (!($85)) {
        label = 34;
        break L9;
       }
      } else if ((($20|0) == 244)) {
       $88 = $80 & -16;
       $89 = ($88<<24>>24)==(-128);
       if (!($89)) {
        label = 36;
        break L9;
       }
      } else {
       $92 = $80 & -64;
       $93 = ($92<<24>>24)==(-128);
       if (!($93)) {
        label = 38;
        break L9;
       }
      }
      $96 = $82&255;
      $97 = $96 & 192;
      $98 = ($97|0)==(128);
      if (!($98)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $99 = $84&255;
      $100 = $99 & 192;
      $101 = ($100|0)==(128);
      if (!($101)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $102 = $20 << 18;
      $103 = $102 & 1835008;
      $104 = $80&255;
      $105 = $104 << 12;
      $106 = $105 & 258048;
      $107 = $106 | $103;
      $108 = $96 << 6;
      $109 = $108 & 4032;
      $110 = $107 | $109;
      $111 = $99 & 63;
      $112 = $110 | $111;
      $113 = ($112>>>0)>($Maxcode>>>0);
      if ($113) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $114 = (($nchar16_t$014) + 1)|0;
      $115 = (($frm_nxt$115) + 4|0);
      $frm_nxt$2 = $115;$nchar16_t$1 = $114;
     }
    } while(0);
    $116 = (($nchar16_t$1) + 1)|0;
    $117 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $118 = ($116>>>0)<($mx>>>0);
    $or$cond = $117 & $118;
    if ($or$cond) {
     $frm_nxt$115 = $frm_nxt$2;$nchar16_t$014 = $116;
    } else {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    }
   }
   if ((label|0) == 21) {
    $50 = $frm;
    $51 = (($41) - ($50))|0;
    $$0 = $51;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 23) {
    $54 = $frm;
    $55 = (($41) - ($54))|0;
    $$0 = $55;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 25) {
    $58 = $frm;
    $59 = (($41) - ($58))|0;
    $$0 = $59;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 34) {
    $86 = $frm;
    $87 = (($74) - ($86))|0;
    $$0 = $87;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 36) {
    $90 = $frm;
    $91 = (($74) - ($90))|0;
    $$0 = $91;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 38) {
    $94 = $frm;
    $95 = (($74) - ($94))|0;
    $$0 = $95;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while(0);
 $119 = $frm_nxt$1$lcssa;
 $120 = $frm;
 $121 = (($119) - ($120))|0;
 $$0 = $121;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,u$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 u$0 = u$0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp;
 $_to_nxt = sp + 8|0;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = (($frm) + ($6<<2)|0);
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $12 = (($to) + ($11)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $1 = $mode & 2;
 $2 = ($1|0)==(0);
 do {
  if (!($2)) {
   $3 = $to_end;
   $4 = $to;
   $5 = (($3) - ($4))|0;
   $6 = ($5|0)<(3);
   if ($6) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $7 = (($to) + 1|0);
    HEAP32[$to_nxt>>2] = $7;
    HEAP8[$to] = -17;
    $8 = HEAP32[$to_nxt>>2]|0;
    $9 = (($8) + 1|0);
    HEAP32[$to_nxt>>2] = $9;
    HEAP8[$8] = -69;
    $10 = HEAP32[$to_nxt>>2]|0;
    $11 = (($10) + 1|0);
    HEAP32[$to_nxt>>2] = $11;
    HEAP8[$10] = -65;
    break;
   }
  }
 } while(0);
 $12 = HEAP32[$frm_nxt>>2]|0;
 $13 = ($12>>>0)<($frm_end>>>0);
 if (!($13)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = $to_end;
 $15 = $12;
 L10: while(1) {
  $16 = HEAP32[$15>>2]|0;
  $17 = $16 & -2048;
  $18 = ($17|0)==(55296);
  $19 = ($16>>>0)>($Maxcode>>>0);
  $or$cond = $18 | $19;
  if ($or$cond) {
   $$0 = 2;
   label = 19;
   break;
  }
  $20 = ($16>>>0)<(128);
  do {
   if ($20) {
    $21 = HEAP32[$to_nxt>>2]|0;
    $22 = $21;
    $23 = (($14) - ($22))|0;
    $24 = ($23|0)<(1);
    if ($24) {
     $$0 = 1;
     label = 19;
     break L10;
    }
    $25 = $16&255;
    $26 = (($21) + 1|0);
    HEAP32[$to_nxt>>2] = $26;
    HEAP8[$21] = $25;
   } else {
    $27 = ($16>>>0)<(2048);
    if ($27) {
     $28 = HEAP32[$to_nxt>>2]|0;
     $29 = $28;
     $30 = (($14) - ($29))|0;
     $31 = ($30|0)<(2);
     if ($31) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $32 = $16 >>> 6;
     $33 = $32 | 192;
     $34 = $33&255;
     $35 = (($28) + 1|0);
     HEAP32[$to_nxt>>2] = $35;
     HEAP8[$28] = $34;
     $36 = $16 & 63;
     $37 = $36 | 128;
     $38 = $37&255;
     $39 = HEAP32[$to_nxt>>2]|0;
     $40 = (($39) + 1|0);
     HEAP32[$to_nxt>>2] = $40;
     HEAP8[$39] = $38;
     break;
    }
    $41 = ($16>>>0)<(65536);
    $42 = HEAP32[$to_nxt>>2]|0;
    $43 = $42;
    $44 = (($14) - ($43))|0;
    if ($41) {
     $45 = ($44|0)<(3);
     if ($45) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $46 = $16 >>> 12;
     $47 = $46 | 224;
     $48 = $47&255;
     $49 = (($42) + 1|0);
     HEAP32[$to_nxt>>2] = $49;
     HEAP8[$42] = $48;
     $50 = $16 >>> 6;
     $51 = $50 & 63;
     $52 = $51 | 128;
     $53 = $52&255;
     $54 = HEAP32[$to_nxt>>2]|0;
     $55 = (($54) + 1|0);
     HEAP32[$to_nxt>>2] = $55;
     HEAP8[$54] = $53;
     $56 = $16 & 63;
     $57 = $56 | 128;
     $58 = $57&255;
     $59 = HEAP32[$to_nxt>>2]|0;
     $60 = (($59) + 1|0);
     HEAP32[$to_nxt>>2] = $60;
     HEAP8[$59] = $58;
     break;
    } else {
     $61 = ($44|0)<(4);
     if ($61) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $62 = $16 >>> 18;
     $63 = $62 | 240;
     $64 = $63&255;
     $65 = (($42) + 1|0);
     HEAP32[$to_nxt>>2] = $65;
     HEAP8[$42] = $64;
     $66 = $16 >>> 12;
     $67 = $66 & 63;
     $68 = $67 | 128;
     $69 = $68&255;
     $70 = HEAP32[$to_nxt>>2]|0;
     $71 = (($70) + 1|0);
     HEAP32[$to_nxt>>2] = $71;
     HEAP8[$70] = $69;
     $72 = $16 >>> 6;
     $73 = $72 & 63;
     $74 = $73 | 128;
     $75 = $74&255;
     $76 = HEAP32[$to_nxt>>2]|0;
     $77 = (($76) + 1|0);
     HEAP32[$to_nxt>>2] = $77;
     HEAP8[$76] = $75;
     $78 = $16 & 63;
     $79 = $78 | 128;
     $80 = $79&255;
     $81 = HEAP32[$to_nxt>>2]|0;
     $82 = (($81) + 1|0);
     HEAP32[$to_nxt>>2] = $82;
     HEAP8[$81] = $80;
     break;
    }
   }
  } while(0);
  $83 = HEAP32[$frm_nxt>>2]|0;
  $84 = (($83) + 4|0);
  HEAP32[$frm_nxt>>2] = $84;
  $85 = ($84>>>0)<($frm_end>>>0);
  if ($85) {
   $15 = $84;
  } else {
   $$0 = 0;
   label = 19;
   break;
  }
 }
 if ((label|0) == 19) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,u$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 u$0 = u$0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $_frm_nxt = sp;
 $_to_nxt = sp + 8|0;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = (($frm) + ($5)|0);
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 2;
 $12 = (($to) + ($11<<2)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$off = 0, $$pre = 0, $$pre5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $1 = $mode & 4;
 $2 = ($1|0)==(0);
 $$pre5 = HEAP32[$frm_nxt>>2]|0;
 do {
  if ($2) {
   $16 = $$pre5;
  } else {
   $3 = $frm_end;
   $4 = $$pre5;
   $5 = (($3) - ($4))|0;
   $6 = ($5|0)>(2);
   if (!($6)) {
    $16 = $$pre5;
    break;
   }
   $7 = HEAP8[$$pre5]|0;
   $8 = ($7<<24>>24)==(-17);
   if (!($8)) {
    $16 = $$pre5;
    break;
   }
   $9 = (($$pre5) + 1|0);
   $10 = HEAP8[$9]|0;
   $11 = ($10<<24>>24)==(-69);
   if (!($11)) {
    $16 = $$pre5;
    break;
   }
   $12 = (($$pre5) + 2|0);
   $13 = HEAP8[$12]|0;
   $14 = ($13<<24>>24)==(-65);
   if (!($14)) {
    $16 = $$pre5;
    break;
   }
   $15 = (($$pre5) + 3|0);
   HEAP32[$frm_nxt>>2] = $15;
   $16 = $15;
  }
 } while(0);
 $17 = ($16>>>0)<($frm_end>>>0);
 L8: do {
  if ($17) {
   $18 = $frm_end;
   $$pre = HEAP32[$to_nxt>>2]|0;
   $19 = $16;$20 = $$pre;
   while(1) {
    $21 = ($20>>>0)<($to_end>>>0);
    if (!($21)) {
     $108 = $19;
     label = 39;
     break L8;
    }
    $22 = HEAP8[$19]|0;
    $23 = $22&255;
    $24 = ($22<<24>>24)>(-1);
    do {
     if ($24) {
      $25 = ($23>>>0)>($Maxcode>>>0);
      if ($25) {
       $$0 = 2;
       break L8;
      }
      HEAP32[$20>>2] = $23;
      $26 = (($19) + 1|0);
      HEAP32[$frm_nxt>>2] = $26;
     } else {
      $27 = ($22&255)<(194);
      if ($27) {
       $$0 = 2;
       break L8;
      }
      $28 = ($22&255)<(224);
      if ($28) {
       $29 = $19;
       $30 = (($18) - ($29))|0;
       $31 = ($30|0)<(2);
       if ($31) {
        $$0 = 1;
        break L8;
       }
       $32 = (($19) + 1|0);
       $33 = HEAP8[$32]|0;
       $34 = $33&255;
       $35 = $34 & 192;
       $36 = ($35|0)==(128);
       if (!($36)) {
        $$0 = 2;
        break L8;
       }
       $37 = $23 << 6;
       $38 = $37 & 1984;
       $39 = $34 & 63;
       $40 = $39 | $38;
       $41 = ($40>>>0)>($Maxcode>>>0);
       if ($41) {
        $$0 = 2;
        break L8;
       }
       HEAP32[$20>>2] = $40;
       $42 = (($19) + 2|0);
       HEAP32[$frm_nxt>>2] = $42;
       break;
      }
      $43 = ($22&255)<(240);
      if ($43) {
       $44 = $19;
       $45 = (($18) - ($44))|0;
       $46 = ($45|0)<(3);
       if ($46) {
        $$0 = 1;
        break L8;
       }
       $47 = (($19) + 1|0);
       $48 = HEAP8[$47]|0;
       $49 = (($19) + 2|0);
       $50 = HEAP8[$49]|0;
       if ((($23|0) == 237)) {
        $53 = $48 & -32;
        $54 = ($53<<24>>24)==(-128);
        if (!($54)) {
         $$0 = 2;
         break L8;
        }
       } else if ((($23|0) == 224)) {
        $51 = $48 & -32;
        $52 = ($51<<24>>24)==(-96);
        if (!($52)) {
         $$0 = 2;
         break L8;
        }
       } else {
        $55 = $48 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         $$0 = 2;
         break L8;
        }
       }
       $57 = $50&255;
       $58 = $57 & 192;
       $59 = ($58|0)==(128);
       if (!($59)) {
        $$0 = 2;
        break L8;
       }
       $60 = $23 << 12;
       $61 = $60 & 61440;
       $62 = $48&255;
       $63 = $62 << 6;
       $64 = $63 & 4032;
       $65 = $64 | $61;
       $66 = $57 & 63;
       $67 = $65 | $66;
       $68 = ($67>>>0)>($Maxcode>>>0);
       if ($68) {
        $$0 = 2;
        break L8;
       }
       HEAP32[$20>>2] = $67;
       $69 = (($19) + 3|0);
       HEAP32[$frm_nxt>>2] = $69;
       break;
      }
      $70 = ($22&255)<(245);
      if (!($70)) {
       $$0 = 2;
       break L8;
      }
      $71 = $19;
      $72 = (($18) - ($71))|0;
      $73 = ($72|0)<(4);
      if ($73) {
       $$0 = 1;
       break L8;
      }
      $74 = (($19) + 1|0);
      $75 = HEAP8[$74]|0;
      $76 = (($19) + 2|0);
      $77 = HEAP8[$76]|0;
      $78 = (($19) + 3|0);
      $79 = HEAP8[$78]|0;
      if ((($23|0) == 240)) {
       $$off = (($75) + 112)<<24>>24;
       $80 = ($$off&255)<(48);
       if (!($80)) {
        $$0 = 2;
        break L8;
       }
      } else if ((($23|0) == 244)) {
       $81 = $75 & -16;
       $82 = ($81<<24>>24)==(-128);
       if (!($82)) {
        $$0 = 2;
        break L8;
       }
      } else {
       $83 = $75 & -64;
       $84 = ($83<<24>>24)==(-128);
       if (!($84)) {
        $$0 = 2;
        break L8;
       }
      }
      $85 = $77&255;
      $86 = $85 & 192;
      $87 = ($86|0)==(128);
      if (!($87)) {
       $$0 = 2;
       break L8;
      }
      $88 = $79&255;
      $89 = $88 & 192;
      $90 = ($89|0)==(128);
      if (!($90)) {
       $$0 = 2;
       break L8;
      }
      $91 = $23 << 18;
      $92 = $91 & 1835008;
      $93 = $75&255;
      $94 = $93 << 12;
      $95 = $94 & 258048;
      $96 = $95 | $92;
      $97 = $85 << 6;
      $98 = $97 & 4032;
      $99 = $96 | $98;
      $100 = $88 & 63;
      $101 = $99 | $100;
      $102 = ($101>>>0)>($Maxcode>>>0);
      if ($102) {
       $$0 = 2;
       break L8;
      }
      HEAP32[$20>>2] = $101;
      $103 = (($19) + 4|0);
      HEAP32[$frm_nxt>>2] = $103;
     }
    } while(0);
    $104 = HEAP32[$to_nxt>>2]|0;
    $105 = (($104) + 4|0);
    HEAP32[$to_nxt>>2] = $105;
    $106 = HEAP32[$frm_nxt>>2]|0;
    $107 = ($106>>>0)<($frm_end>>>0);
    if ($107) {
     $19 = $106;$20 = $105;
    } else {
     $108 = $106;
     label = 39;
     break;
    }
   }
  } else {
   $108 = $16;
   label = 39;
  }
 } while(0);
 if ((label|0) == 39) {
  $109 = ($108>>>0)<($frm_end>>>0);
  $110 = $109&1;
  $$0 = $110;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,u$0,$to,u$1,$to_nxt) {
 $this = $this|0;
 u$0 = u$0|0;
 $to = $to|0;
 u$1 = u$1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,u$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 u$0 = u$0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$off = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $nchar32_t$014 = 0, $or$cond = 0, $or$cond13 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $mode & 4;
 $2 = ($1|0)==(0);
 do {
  if ($2) {
   $frm_nxt$1$ph = $frm;
  } else {
   $3 = $frm_end;
   $4 = $frm;
   $5 = (($3) - ($4))|0;
   $6 = ($5|0)>(2);
   if (!($6)) {
    $frm_nxt$1$ph = $frm;
    break;
   }
   $7 = HEAP8[$frm]|0;
   $8 = ($7<<24>>24)==(-17);
   if (!($8)) {
    $frm_nxt$1$ph = $frm;
    break;
   }
   $9 = (($frm) + 1|0);
   $10 = HEAP8[$9]|0;
   $11 = ($10<<24>>24)==(-69);
   if (!($11)) {
    $frm_nxt$1$ph = $frm;
    break;
   }
   $12 = (($frm) + 2|0);
   $13 = HEAP8[$12]|0;
   $14 = ($13<<24>>24)==(-65);
   $15 = (($frm) + 3|0);
   $$frm = $14 ? $15 : $frm;
   $frm_nxt$1$ph = $$frm;
  }
 } while(0);
 $16 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $17 = ($mx|0)!=(0);
 $or$cond13 = $16 & $17;
 L7: do {
  if ($or$cond13) {
   $18 = $frm_end;
   $frm_nxt$115 = $frm_nxt$1$ph;$nchar32_t$014 = 1;
   L9: while(1) {
    $19 = HEAP8[$frm_nxt$115]|0;
    $20 = $19&255;
    $21 = ($19<<24>>24)>(-1);
    do {
     if ($21) {
      $22 = ($20>>>0)>($Maxcode>>>0);
      if ($22) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $23 = (($frm_nxt$115) + 1|0);
      $frm_nxt$2 = $23;
     } else {
      $24 = ($19&255)<(194);
      if ($24) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $25 = ($19&255)<(224);
      if ($25) {
       $26 = $frm_nxt$115;
       $27 = (($18) - ($26))|0;
       $28 = ($27|0)<(2);
       if ($28) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $29 = (($frm_nxt$115) + 1|0);
       $30 = HEAP8[$29]|0;
       $31 = $30&255;
       $32 = $31 & 192;
       $33 = ($32|0)==(128);
       if (!($33)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $34 = $20 << 6;
       $35 = $34 & 1984;
       $36 = $31 & 63;
       $37 = $36 | $35;
       $38 = ($37>>>0)>($Maxcode>>>0);
       if ($38) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $39 = (($frm_nxt$115) + 2|0);
       $frm_nxt$2 = $39;
       break;
      }
      $40 = ($19&255)<(240);
      if ($40) {
       $41 = $frm_nxt$115;
       $42 = (($18) - ($41))|0;
       $43 = ($42|0)<(3);
       if ($43) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $44 = (($frm_nxt$115) + 1|0);
       $45 = HEAP8[$44]|0;
       $46 = (($frm_nxt$115) + 2|0);
       $47 = HEAP8[$46]|0;
       if ((($20|0) == 237)) {
        $52 = $45 & -32;
        $53 = ($52<<24>>24)==(-128);
        if (!($53)) {
         label = 23;
         break L9;
        }
       } else if ((($20|0) == 224)) {
        $48 = $45 & -32;
        $49 = ($48<<24>>24)==(-96);
        if (!($49)) {
         label = 21;
         break L9;
        }
       } else {
        $56 = $45 & -64;
        $57 = ($56<<24>>24)==(-128);
        if (!($57)) {
         label = 25;
         break L9;
        }
       }
       $60 = $47&255;
       $61 = $60 & 192;
       $62 = ($61|0)==(128);
       if (!($62)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $63 = $20 << 12;
       $64 = $63 & 61440;
       $65 = $45&255;
       $66 = $65 << 6;
       $67 = $66 & 4032;
       $68 = $67 | $64;
       $69 = $60 & 63;
       $70 = $68 | $69;
       $71 = ($70>>>0)>($Maxcode>>>0);
       if ($71) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $72 = (($frm_nxt$115) + 3|0);
       $frm_nxt$2 = $72;
       break;
      }
      $73 = ($19&255)<(245);
      if (!($73)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $74 = $frm_nxt$115;
      $75 = (($18) - ($74))|0;
      $76 = ($75|0)<(4);
      if ($76) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $77 = (($frm_nxt$115) + 1|0);
      $78 = HEAP8[$77]|0;
      $79 = (($frm_nxt$115) + 2|0);
      $80 = HEAP8[$79]|0;
      $81 = (($frm_nxt$115) + 3|0);
      $82 = HEAP8[$81]|0;
      if ((($20|0) == 244)) {
       $86 = $78 & -16;
       $87 = ($86<<24>>24)==(-128);
       if (!($87)) {
        label = 35;
        break L9;
       }
      } else if ((($20|0) == 240)) {
       $$off = (($78) + 112)<<24>>24;
       $83 = ($$off&255)<(48);
       if (!($83)) {
        label = 33;
        break L9;
       }
      } else {
       $90 = $78 & -64;
       $91 = ($90<<24>>24)==(-128);
       if (!($91)) {
        label = 37;
        break L9;
       }
      }
      $94 = $80&255;
      $95 = $94 & 192;
      $96 = ($95|0)==(128);
      if (!($96)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $97 = $82&255;
      $98 = $97 & 192;
      $99 = ($98|0)==(128);
      if (!($99)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $100 = $20 << 18;
      $101 = $100 & 1835008;
      $102 = $78&255;
      $103 = $102 << 12;
      $104 = $103 & 258048;
      $105 = $104 | $101;
      $106 = $94 << 6;
      $107 = $106 & 4032;
      $108 = $105 | $107;
      $109 = $97 & 63;
      $110 = $108 | $109;
      $111 = ($110>>>0)>($Maxcode>>>0);
      if ($111) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $112 = (($frm_nxt$115) + 4|0);
      $frm_nxt$2 = $112;
     }
    } while(0);
    $113 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $114 = ($nchar32_t$014>>>0)<($mx>>>0);
    $or$cond = $113 & $114;
    if (!($or$cond)) {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    }
    $phitmp = (($nchar32_t$014) + 1)|0;
    $frm_nxt$115 = $frm_nxt$2;$nchar32_t$014 = $phitmp;
   }
   if ((label|0) == 21) {
    $50 = $frm;
    $51 = (($41) - ($50))|0;
    $$0 = $51;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 23) {
    $54 = $frm;
    $55 = (($41) - ($54))|0;
    $$0 = $55;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 25) {
    $58 = $frm;
    $59 = (($41) - ($58))|0;
    $$0 = $59;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 33) {
    $84 = $frm;
    $85 = (($74) - ($84))|0;
    $$0 = $85;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 35) {
    $88 = $frm;
    $89 = (($74) - ($88))|0;
    $$0 = $89;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 37) {
    $92 = $frm;
    $93 = (($74) - ($92))|0;
    $$0 = $93;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while(0);
 $115 = $frm_nxt$1$lcssa;
 $116 = $frm;
 $117 = (($115) - ($116))|0;
 $$0 = $117;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((9296) + 8|0)));
 $2 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 $3 = $this;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((9296) + 8|0)));
 $2 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((9336) + 8|0)));
 $2 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 $3 = $this;
 __ZdlPv($3);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((9336) + 8|0)));
 $2 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 8|0);
 $2 = HEAP8[$1]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 9|0);
 $2 = HEAP8[$1]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 STACKTOP = sp;return ($2|0);
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$1);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$1);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,(9376),4);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_wcslen(((9384)))|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,((9384)),$1);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,(9408),5);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_wcslen(((9416)))|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,((9416)),$1);
 STACKTOP = sp;return;
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[(9448)]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $37 = HEAP32[(9440)>>2]|0;
  STACKTOP = sp;return ($37|0);
 }
 $3 = (___cxa_guard_acquire(((9448)|0))|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $37 = HEAP32[(9440)>>2]|0;
  STACKTOP = sp;return ($37|0);
 }
 $5 = HEAP8[(16648)]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire(((16648)|0))|0);
   $8 = ($7|0)==(0);
   if ($8) {
    break;
   }
   _memset(((16480)|0),0,168)|0;
   (_atexit((188|0),(0|0),((___dso_handle)|0))|0);
   ___cxa_guard_release(((16648)|0));
  }
 } while(0);
 __THREW__ = 0;
 (invoke_iii(37,(((16480))|0),((16656)|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 do {
  if (!($10)) {
   __THREW__ = 0;
   (invoke_iii(37,((((16480) + 12|0))|0),((16664)|0))|0);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((16480) + 24|0))|0),((16672)|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((16480) + 36|0))|0),((16680)|0))|0);
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if ($16) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((16480) + 48|0))|0),((16696)|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((16480) + 60|0))|0),((16712)|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((16480) + 72|0))|0),((16720)|0))|0);
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((16480) + 84|0))|0),((16736)|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((16480) + 96|0))|0),((16744)|0))|0);
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((16480) + 108|0))|0),((16752)|0))|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((16480) + 120|0))|0),((16760)|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if ($30) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((16480) + 132|0))|0),((16768)|0))|0);
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((16480) + 144|0))|0),((16776)|0))|0);
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((16480) + 156|0))|0),((16784)|0))|0);
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   if ($36) {
    break;
   }
   HEAP32[(9440)>>2] = ((16480));
   ___cxa_guard_release(((9448)|0));
   $37 = HEAP32[(9440)>>2]|0;
   STACKTOP = sp;return ($37|0);
  }
 } while(0);
 $38 = ___cxa_find_matching_catch(-1,-1)|0;
 $39 = tempRet0;
 ___cxa_guard_abort(((9448)|0));
 ___resumeException($38|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[(9464)]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $37 = HEAP32[(9456)>>2]|0;
  STACKTOP = sp;return ($37|0);
 }
 $3 = (___cxa_guard_acquire(((9464)|0))|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $37 = HEAP32[(9456)>>2]|0;
  STACKTOP = sp;return ($37|0);
 }
 $5 = HEAP8[(16112)]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire(((16112)|0))|0);
   $8 = ($7|0)==(0);
   if ($8) {
    break;
   }
   _memset(((15944)|0),0,168)|0;
   (_atexit((189|0),(0|0),((___dso_handle)|0))|0);
   ___cxa_guard_release(((16112)|0));
  }
 } while(0);
 __THREW__ = 0;
 (invoke_iii(38,(((15944))|0),(((16120))|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 do {
  if (!($10)) {
   __THREW__ = 0;
   (invoke_iii(38,((((15944) + 12|0))|0),(((16152))|0))|0);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((15944) + 24|0))|0),(((16184))|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((15944) + 36|0))|0),(((16216))|0))|0);
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if ($16) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((15944) + 48|0))|0),(((16256))|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((15944) + 60|0))|0),(((16296))|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((15944) + 72|0))|0),(((16328))|0))|0);
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((15944) + 84|0))|0),(((16368))|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((15944) + 96|0))|0),(((16384))|0))|0);
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((15944) + 108|0))|0),(((16400))|0))|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((15944) + 120|0))|0),(((16416))|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if ($30) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((15944) + 132|0))|0),(((16432))|0))|0);
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((15944) + 144|0))|0),(((16448))|0))|0);
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((15944) + 156|0))|0),(((16464))|0))|0);
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   if ($36) {
    break;
   }
   HEAP32[(9456)>>2] = ((15944));
   ___cxa_guard_release(((9464)|0));
   $37 = HEAP32[(9456)>>2]|0;
   STACKTOP = sp;return ($37|0);
  }
 } while(0);
 $38 = ___cxa_find_matching_catch(-1,-1)|0;
 $39 = tempRet0;
 ___cxa_guard_abort(((9464)|0));
 ___resumeException($38|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[(9480)]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $57 = HEAP32[(9472)>>2]|0;
  STACKTOP = sp;return ($57|0);
 }
 $3 = (___cxa_guard_acquire(((9480)|0))|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $57 = HEAP32[(9472)>>2]|0;
  STACKTOP = sp;return ($57|0);
 }
 $5 = HEAP8[(15720)]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire(((15720)|0))|0);
   $8 = ($7|0)==(0);
   if ($8) {
    break;
   }
   _memset(((15432)|0),0,288)|0;
   (_atexit((190|0),(0|0),((___dso_handle)|0))|0);
   ___cxa_guard_release(((15720)|0));
  }
 } while(0);
 __THREW__ = 0;
 (invoke_iii(37,(((15432))|0),((15728)|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 do {
  if (!($10)) {
   __THREW__ = 0;
   (invoke_iii(37,((((15432) + 12|0))|0),((15736)|0))|0);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((15432) + 24|0))|0),((15752)|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((15432) + 36|0))|0),((15760)|0))|0);
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if ($16) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((15432) + 48|0))|0),((15768)|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((15432) + 60|0))|0),((15776)|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((15432) + 72|0))|0),((15784)|0))|0);
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((15432) + 84|0))|0),((15792)|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((15432) + 96|0))|0),((15800)|0))|0);
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((15432) + 108|0))|0),((15816)|0))|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((15432) + 120|0))|0),((15824)|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if ($30) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((15432) + 132|0))|0),((15840)|0))|0);
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((15432) + 144|0))|0),((15856)|0))|0);
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((15432) + 156|0))|0),((15864)|0))|0);
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   if ($36) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((15432) + 168|0))|0),((15872)|0))|0);
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   if ($38) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((15432) + 180|0))|0),((15880)|0))|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((15432) + 192|0))|0),((15768)|0))|0);
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   if ($42) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((15432) + 204|0))|0),((15888)|0))|0);
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if ($44) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((15432) + 216|0))|0),((15896)|0))|0);
   $45 = __THREW__; __THREW__ = 0;
   $46 = $45&1;
   if ($46) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((15432) + 228|0))|0),((15904)|0))|0);
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if ($48) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((15432) + 240|0))|0),((15912)|0))|0);
   $49 = __THREW__; __THREW__ = 0;
   $50 = $49&1;
   if ($50) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((15432) + 252|0))|0),((15920)|0))|0);
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if ($52) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((15432) + 264|0))|0),((15928)|0))|0);
   $53 = __THREW__; __THREW__ = 0;
   $54 = $53&1;
   if ($54) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(37,((((15432) + 276|0))|0),((15936)|0))|0);
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   if ($56) {
    break;
   }
   HEAP32[(9472)>>2] = ((15432));
   ___cxa_guard_release(((9480)|0));
   $57 = HEAP32[(9472)>>2]|0;
   STACKTOP = sp;return ($57|0);
  }
 } while(0);
 $58 = ___cxa_find_matching_catch(-1,-1)|0;
 $59 = tempRet0;
 ___cxa_guard_abort(((9480)|0));
 ___resumeException($58|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[(9496)]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $57 = HEAP32[(9488)>>2]|0;
  STACKTOP = sp;return ($57|0);
 }
 $3 = (___cxa_guard_acquire(((9496)|0))|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $57 = HEAP32[(9488)>>2]|0;
  STACKTOP = sp;return ($57|0);
 }
 $5 = HEAP8[(14880)]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire(((14880)|0))|0);
   $8 = ($7|0)==(0);
   if ($8) {
    break;
   }
   _memset(((14592)|0),0,288)|0;
   (_atexit((191|0),(0|0),((___dso_handle)|0))|0);
   ___cxa_guard_release(((14880)|0));
  }
 } while(0);
 __THREW__ = 0;
 (invoke_iii(38,(((14592))|0),(((14888))|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 do {
  if (!($10)) {
   __THREW__ = 0;
   (invoke_iii(38,((((14592) + 12|0))|0),(((14920))|0))|0);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((14592) + 24|0))|0),(((14960))|0))|0);
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((14592) + 36|0))|0),(((14984))|0))|0);
   $15 = __THREW__; __THREW__ = 0;
   $16 = $15&1;
   if ($16) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((14592) + 48|0))|0),(((15304))|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((14592) + 60|0))|0),(((15008))|0))|0);
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((14592) + 72|0))|0),(((15032))|0))|0);
   $21 = __THREW__; __THREW__ = 0;
   $22 = $21&1;
   if ($22) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((14592) + 84|0))|0),(((15056))|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((14592) + 96|0))|0),(((15088))|0))|0);
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((14592) + 108|0))|0),(((15128))|0))|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((14592) + 120|0))|0),(((15160))|0))|0);
   $29 = __THREW__; __THREW__ = 0;
   $30 = $29&1;
   if ($30) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((14592) + 132|0))|0),(((15200))|0))|0);
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((14592) + 144|0))|0),(((15240))|0))|0);
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((14592) + 156|0))|0),(((15256))|0))|0);
   $35 = __THREW__; __THREW__ = 0;
   $36 = $35&1;
   if ($36) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((14592) + 168|0))|0),(((15272))|0))|0);
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   if ($38) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((14592) + 180|0))|0),(((15288))|0))|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((14592) + 192|0))|0),(((15304))|0))|0);
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   if ($42) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((14592) + 204|0))|0),(((15320))|0))|0);
   $43 = __THREW__; __THREW__ = 0;
   $44 = $43&1;
   if ($44) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((14592) + 216|0))|0),(((15336))|0))|0);
   $45 = __THREW__; __THREW__ = 0;
   $46 = $45&1;
   if ($46) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((14592) + 228|0))|0),(((15352))|0))|0);
   $47 = __THREW__; __THREW__ = 0;
   $48 = $47&1;
   if ($48) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((14592) + 240|0))|0),(((15368))|0))|0);
   $49 = __THREW__; __THREW__ = 0;
   $50 = $49&1;
   if ($50) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((14592) + 252|0))|0),(((15384))|0))|0);
   $51 = __THREW__; __THREW__ = 0;
   $52 = $51&1;
   if ($52) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((14592) + 264|0))|0),(((15400))|0))|0);
   $53 = __THREW__; __THREW__ = 0;
   $54 = $53&1;
   if ($54) {
    break;
   }
   __THREW__ = 0;
   (invoke_iii(38,((((14592) + 276|0))|0),(((15416))|0))|0);
   $55 = __THREW__; __THREW__ = 0;
   $56 = $55&1;
   if ($56) {
    break;
   }
   HEAP32[(9488)>>2] = ((14592));
   ___cxa_guard_release(((9496)|0));
   $57 = HEAP32[(9488)>>2]|0;
   STACKTOP = sp;return ($57|0);
  }
 } while(0);
 $58 = ___cxa_find_matching_catch(-1,-1)|0;
 $59 = tempRet0;
 ___cxa_guard_abort(((9496)|0));
 ___resumeException($58|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[(9512)]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $13 = HEAP32[(9504)>>2]|0;
  STACKTOP = sp;return ($13|0);
 }
 $3 = (___cxa_guard_acquire(((9512)|0))|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $13 = HEAP32[(9504)>>2]|0;
  STACKTOP = sp;return ($13|0);
 }
 $5 = HEAP8[(14568)]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire(((14568)|0))|0);
   $8 = ($7|0)==(0);
   if ($8) {
    break;
   }
   _memset(((14280)|0),0,288)|0;
   (_atexit((192|0),(0|0),((___dso_handle)|0))|0);
   ___cxa_guard_release(((14568)|0));
  }
 } while(0);
 __THREW__ = 0;
 (invoke_iii(37,(((14280))|0),((14576)|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $14 = ___cxa_find_matching_catch(-1,-1)|0;
  $15 = tempRet0;
  ___cxa_guard_abort(((9512)|0));
  ___resumeException($14|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(37,((((14280) + 12|0))|0),((14584)|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $14 = ___cxa_find_matching_catch(-1,-1)|0;
  $15 = tempRet0;
  ___cxa_guard_abort(((9512)|0));
  ___resumeException($14|0);
  // unreachable;
 }
 HEAP32[(9504)>>2] = ((14280));
 ___cxa_guard_release(((9512)|0));
 $13 = HEAP32[(9504)>>2]|0;
 STACKTOP = sp;return ($13|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[(9528)]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $13 = HEAP32[(9520)>>2]|0;
  STACKTOP = sp;return ($13|0);
 }
 $3 = (___cxa_guard_acquire(((9528)|0))|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $13 = HEAP32[(9520)>>2]|0;
  STACKTOP = sp;return ($13|0);
 }
 $5 = HEAP8[(14240)]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $7 = (___cxa_guard_acquire(((14240)|0))|0);
   $8 = ($7|0)==(0);
   if ($8) {
    break;
   }
   _memset(((13952)|0),0,288)|0;
   (_atexit((193|0),(0|0),((___dso_handle)|0))|0);
   ___cxa_guard_release(((14240)|0));
  }
 } while(0);
 __THREW__ = 0;
 (invoke_iii(38,(((13952))|0),(((14248))|0))|0);
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $14 = ___cxa_find_matching_catch(-1,-1)|0;
  $15 = tempRet0;
  ___cxa_guard_abort(((9528)|0));
  ___resumeException($14|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(38,((((13952) + 12|0))|0),(((14264))|0))|0);
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $14 = ___cxa_find_matching_catch(-1,-1)|0;
  $15 = tempRet0;
  ___cxa_guard_abort(((9528)|0));
  ___resumeException($14|0);
  // unreachable;
 }
 HEAP32[(9520)>>2] = ((13952));
 ___cxa_guard_release(((9528)|0));
 $13 = HEAP32[(9520)>>2]|0;
 STACKTOP = sp;return ($13|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[(9552)]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  STACKTOP = sp;return ((9536)|0);
 }
 $3 = (___cxa_guard_acquire(((9552)|0))|0);
 $4 = ($3|0)==(0);
 if ($4) {
  STACKTOP = sp;return ((9536)|0);
 }
 __THREW__ = 0;
 invoke_viii(5,((9536)|0),((9560)|0),8);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch(-1,-1)|0;
  $8 = tempRet0;
  ___cxa_guard_abort(((9552)|0));
  ___resumeException($7|0);
  // unreachable;
 }
 (_atexit(((194)|0),((9536)|0),((___dso_handle)|0))|0);
 ___cxa_guard_release(((9552)|0));
 STACKTOP = sp;return ((9536)|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[(9592)]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  STACKTOP = sp;return ((9576)|0);
 }
 $3 = (___cxa_guard_acquire(((9592)|0))|0);
 $4 = ($3|0)==(0);
 if ($4) {
  STACKTOP = sp;return ((9576)|0);
 }
 __THREW__ = 0;
 $5 = (invoke_ii(94,(((9600))|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if (!($7)) {
   __THREW__ = 0;
   invoke_viii(27,((9576)|0),(((9600))|0),($5|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    break;
   }
   (_atexit(((195)|0),((9576)|0),((___dso_handle)|0))|0);
   ___cxa_guard_release(((9592)|0));
   STACKTOP = sp;return ((9576)|0);
  }
 } while(0);
 $10 = ___cxa_find_matching_catch(-1,-1)|0;
 $11 = tempRet0;
 ___cxa_guard_abort(((9592)|0));
 ___resumeException($10|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[(9656)]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  STACKTOP = sp;return ((9640)|0);
 }
 $3 = (___cxa_guard_acquire(((9656)|0))|0);
 $4 = ($3|0)==(0);
 if ($4) {
  STACKTOP = sp;return ((9640)|0);
 }
 __THREW__ = 0;
 invoke_viii(5,((9640)|0),((9664)|0),8);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch(-1,-1)|0;
  $8 = tempRet0;
  ___cxa_guard_abort(((9656)|0));
  ___resumeException($7|0);
  // unreachable;
 }
 (_atexit(((194)|0),((9640)|0),((___dso_handle)|0))|0);
 ___cxa_guard_release(((9656)|0));
 STACKTOP = sp;return ((9640)|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[(9696)]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  STACKTOP = sp;return ((9680)|0);
 }
 $3 = (___cxa_guard_acquire(((9696)|0))|0);
 $4 = ($3|0)==(0);
 if ($4) {
  STACKTOP = sp;return ((9680)|0);
 }
 __THREW__ = 0;
 $5 = (invoke_ii(94,(((9704))|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if (!($7)) {
   __THREW__ = 0;
   invoke_viii(27,((9680)|0),(((9704))|0),($5|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    break;
   }
   (_atexit(((195)|0),((9680)|0),((___dso_handle)|0))|0);
   ___cxa_guard_release(((9696)|0));
   STACKTOP = sp;return ((9680)|0);
  }
 } while(0);
 $10 = ___cxa_find_matching_catch(-1,-1)|0;
 $11 = tempRet0;
 ___cxa_guard_abort(((9696)|0));
 ___resumeException($10|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[(9760)]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  STACKTOP = sp;return ((9744)|0);
 }
 $3 = (___cxa_guard_acquire(((9760)|0))|0);
 $4 = ($3|0)==(0);
 if ($4) {
  STACKTOP = sp;return ((9744)|0);
 }
 __THREW__ = 0;
 invoke_viii(5,((9744)|0),((9768)|0),20);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch(-1,-1)|0;
  $8 = tempRet0;
  ___cxa_guard_abort(((9760)|0));
  ___resumeException($7|0);
  // unreachable;
 }
 (_atexit(((194)|0),((9744)|0),((___dso_handle)|0))|0);
 ___cxa_guard_release(((9760)|0));
 STACKTOP = sp;return ((9744)|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[(9808)]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  STACKTOP = sp;return ((9792)|0);
 }
 $3 = (___cxa_guard_acquire(((9808)|0))|0);
 $4 = ($3|0)==(0);
 if ($4) {
  STACKTOP = sp;return ((9792)|0);
 }
 __THREW__ = 0;
 $5 = (invoke_ii(94,(((9816))|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if (!($7)) {
   __THREW__ = 0;
   invoke_viii(27,((9792)|0),(((9816))|0),($5|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    break;
   }
   (_atexit(((195)|0),((9792)|0),((___dso_handle)|0))|0);
   ___cxa_guard_release(((9808)|0));
   STACKTOP = sp;return ((9792)|0);
  }
 } while(0);
 $10 = ___cxa_find_matching_catch(-1,-1)|0;
 $11 = tempRet0;
 ___cxa_guard_abort(((9808)|0));
 ___resumeException($10|0);
 // unreachable;
 return 0|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[(9920)]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  STACKTOP = sp;return ((9904)|0);
 }
 $3 = (___cxa_guard_acquire(((9920)|0))|0);
 $4 = ($3|0)==(0);
 if ($4) {
  STACKTOP = sp;return ((9904)|0);
 }
 __THREW__ = 0;
 invoke_viii(5,((9904)|0),((9928)|0),11);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $7 = ___cxa_find_matching_catch(-1,-1)|0;
  $8 = tempRet0;
  ___cxa_guard_abort(((9920)|0));
  ___resumeException($7|0);
  // unreachable;
 }
 (_atexit(((194)|0),((9904)|0),((___dso_handle)|0))|0);
 ___cxa_guard_release(((9920)|0));
 STACKTOP = sp;return ((9904)|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[(9960)]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  STACKTOP = sp;return ((9944)|0);
 }
 $3 = (___cxa_guard_acquire(((9960)|0))|0);
 $4 = ($3|0)==(0);
 if ($4) {
  STACKTOP = sp;return ((9944)|0);
 }
 __THREW__ = 0;
 $5 = (invoke_ii(94,(((9968))|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 do {
  if (!($7)) {
   __THREW__ = 0;
   invoke_viii(27,((9944)|0),(((9968))|0),($5|0));
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if ($9) {
    break;
   }
   (_atexit(((195)|0),((9944)|0),((___dso_handle)|0))|0);
   ___cxa_guard_release(((9960)|0));
   STACKTOP = sp;return ((9944)|0);
  }
 } while(0);
 $10 = ___cxa_find_matching_catch(-1,-1)|0;
 $11 = tempRet0;
 ___cxa_guard_abort(((9960)|0));
 ___resumeException($10|0);
 // unreachable;
 return 0|0;
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $__p2 = sp;
 $1 = ($__a|0)==($__a_end|0);
 if ($1) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $2 = (___errno_location()|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$2>>2] = 0;
 $4 = HEAP8[(9032)]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $6 = (___cxa_guard_acquire(((9032)|0))|0);
   $7 = ($6|0)==(0);
   if ($7) {
    break;
   }
   __THREW__ = 0;
   $8 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $11 = ___cxa_find_matching_catch(-1,-1)|0;
    $12 = tempRet0;
    ___cxa_guard_abort(((9032)|0));
    ___resumeException($11|0);
    // unreachable;
   } else {
    HEAP32[(9024)>>2] = $8;
    ___cxa_guard_release(((9032)|0));
    break;
   }
  }
 } while(0);
 $13 = HEAP32[(9024)>>2]|0;
 $14 = (+_strtold_l($__a,$__p2,$13));
 $15 = HEAP32[$2>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  HEAP32[$2>>2] = $3;
 }
 $17 = HEAP32[$__p2>>2]|0;
 $18 = ($17|0)==($__a_end|0);
 if (!($18)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $19 = ($15|0)==(34);
 if (!($19)) {
  $$0 = $14;
  STACKTOP = sp;return (+$$0);
 }
 HEAP32[$__err>>2] = 4;
 $$0 = $14;
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $__p2 = sp;
 $1 = ($__a|0)==($__a_end|0);
 if ($1) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $2 = (___errno_location()|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$2>>2] = 0;
 $4 = HEAP8[(9032)]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $6 = (___cxa_guard_acquire(((9032)|0))|0);
   $7 = ($6|0)==(0);
   if ($7) {
    break;
   }
   __THREW__ = 0;
   $8 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $11 = ___cxa_find_matching_catch(-1,-1)|0;
    $12 = tempRet0;
    ___cxa_guard_abort(((9032)|0));
    ___resumeException($11|0);
    // unreachable;
   } else {
    HEAP32[(9024)>>2] = $8;
    ___cxa_guard_release(((9032)|0));
    break;
   }
  }
 } while(0);
 $13 = HEAP32[(9024)>>2]|0;
 $14 = (+_strtold_l($__a,$__p2,$13));
 $15 = HEAP32[$2>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  HEAP32[$2>>2] = $3;
 }
 $17 = HEAP32[$__p2>>2]|0;
 $18 = ($17|0)==($__a_end|0);
 if (!($18)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $19 = ($15|0)==(34);
 if (!($19)) {
  $$0 = $14;
  STACKTOP = sp;return (+$$0);
 }
 HEAP32[$__err>>2] = 4;
 $$0 = $14;
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $__p2 = sp;
 $1 = ($__a|0)==($__a_end|0);
 if ($1) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $2 = (___errno_location()|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$2>>2] = 0;
 $4 = HEAP8[(9032)]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $6 = (___cxa_guard_acquire(((9032)|0))|0);
   $7 = ($6|0)==(0);
   if ($7) {
    break;
   }
   __THREW__ = 0;
   $8 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $11 = ___cxa_find_matching_catch(-1,-1)|0;
    $12 = tempRet0;
    ___cxa_guard_abort(((9032)|0));
    ___resumeException($11|0);
    // unreachable;
   } else {
    HEAP32[(9024)>>2] = $8;
    ___cxa_guard_release(((9032)|0));
    break;
   }
  }
 } while(0);
 $13 = HEAP32[(9024)>>2]|0;
 $14 = (+_strtold_l($__a,$__p2,$13));
 $15 = HEAP32[$2>>2]|0;
 $16 = ($15|0)==(0);
 if ($16) {
  HEAP32[$2>>2] = $3;
 }
 $17 = HEAP32[$__p2>>2]|0;
 $18 = ($17|0)==($__a_end|0);
 if (!($18)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $19 = ($15|0)==(34);
 if ($19) {
  HEAP32[$__err>>2] = 4;
 }
 $20 = $14;
 $$0 = $20;
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $__p2 = sp;
 $1 = ($__a|0)==($__a_end|0);
 if ($1) {
  HEAP32[$__err>>2] = 4;
  $23 = 0;$24 = 0;
  tempRet0 = $24;
  STACKTOP = sp;return ($23|0);
 }
 $2 = HEAP8[$__a]|0;
 $3 = ($2<<24>>24)==(45);
 if ($3) {
  HEAP32[$__err>>2] = 4;
  $23 = 0;$24 = 0;
  tempRet0 = $24;
  STACKTOP = sp;return ($23|0);
 }
 $4 = (___errno_location()|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$4>>2] = 0;
 $6 = HEAP8[(9032)]|0;
 $7 = ($6<<24>>24)==(0);
 do {
  if ($7) {
   $8 = (___cxa_guard_acquire(((9032)|0))|0);
   $9 = ($8|0)==(0);
   if ($9) {
    break;
   }
   __THREW__ = 0;
   $10 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $13 = ___cxa_find_matching_catch(-1,-1)|0;
    $14 = tempRet0;
    ___cxa_guard_abort(((9032)|0));
    ___resumeException($13|0);
    // unreachable;
   } else {
    HEAP32[(9024)>>2] = $10;
    ___cxa_guard_release(((9032)|0));
    break;
   }
  }
 } while(0);
 $15 = HEAP32[(9024)>>2]|0;
 $16 = (_strtoull_l(($__a|0),($__p2|0),($__base|0),($15|0))|0);
 $17 = tempRet0;
 $18 = HEAP32[$4>>2]|0;
 $19 = ($18|0)==(0);
 if ($19) {
  HEAP32[$4>>2] = $5;
 }
 $20 = HEAP32[$__p2>>2]|0;
 $21 = ($20|0)==($__a_end|0);
 if (!($21)) {
  HEAP32[$__err>>2] = 4;
  $23 = 0;$24 = 0;
  tempRet0 = $24;
  STACKTOP = sp;return ($23|0);
 }
 $22 = ($18|0)==(34);
 if (!($22)) {
  $23 = $16;$24 = $17;
  tempRet0 = $24;
  STACKTOP = sp;return ($23|0);
 }
 HEAP32[$__err>>2] = 4;
 $23 = -1;$24 = -1;
 tempRet0 = $24;
 STACKTOP = sp;return ($23|0);
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $__p2 = sp;
 $1 = ($__a|0)==($__a_end|0);
 if ($1) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP8[$__a]|0;
 $3 = ($2<<24>>24)==(45);
 if ($3) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (___errno_location()|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$4>>2] = 0;
 $6 = HEAP8[(9032)]|0;
 $7 = ($6<<24>>24)==(0);
 do {
  if ($7) {
   $8 = (___cxa_guard_acquire(((9032)|0))|0);
   $9 = ($8|0)==(0);
   if ($9) {
    break;
   }
   __THREW__ = 0;
   $10 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $13 = ___cxa_find_matching_catch(-1,-1)|0;
    $14 = tempRet0;
    ___cxa_guard_abort(((9032)|0));
    ___resumeException($13|0);
    // unreachable;
   } else {
    HEAP32[(9024)>>2] = $10;
    ___cxa_guard_release(((9032)|0));
    break;
   }
  }
 } while(0);
 $15 = HEAP32[(9024)>>2]|0;
 $16 = (_strtoull_l(($__a|0),($__p2|0),($__base|0),($15|0))|0);
 $17 = tempRet0;
 $18 = HEAP32[$4>>2]|0;
 $19 = ($18|0)==(0);
 if ($19) {
  HEAP32[$4>>2] = $5;
 }
 $20 = HEAP32[$__p2>>2]|0;
 $21 = ($20|0)==($__a_end|0);
 if (!($21)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = ($18|0)==(34);
 $23 = ($17>>>0)>(0);
 $24 = ($17|0)==(0);
 $25 = ($16>>>0)>(4294967295);
 $26 = $24 & $25;
 $27 = $23 | $26;
 $or$cond = $22 | $27;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $16;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $__p2 = sp;
 $1 = ($__a|0)==($__a_end|0);
 if ($1) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP8[$__a]|0;
 $3 = ($2<<24>>24)==(45);
 if ($3) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (___errno_location()|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$4>>2] = 0;
 $6 = HEAP8[(9032)]|0;
 $7 = ($6<<24>>24)==(0);
 do {
  if ($7) {
   $8 = (___cxa_guard_acquire(((9032)|0))|0);
   $9 = ($8|0)==(0);
   if ($9) {
    break;
   }
   __THREW__ = 0;
   $10 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $13 = ___cxa_find_matching_catch(-1,-1)|0;
    $14 = tempRet0;
    ___cxa_guard_abort(((9032)|0));
    ___resumeException($13|0);
    // unreachable;
   } else {
    HEAP32[(9024)>>2] = $10;
    ___cxa_guard_release(((9032)|0));
    break;
   }
  }
 } while(0);
 $15 = HEAP32[(9024)>>2]|0;
 $16 = (_strtoull_l(($__a|0),($__p2|0),($__base|0),($15|0))|0);
 $17 = tempRet0;
 $18 = HEAP32[$4>>2]|0;
 $19 = ($18|0)==(0);
 if ($19) {
  HEAP32[$4>>2] = $5;
 }
 $20 = HEAP32[$__p2>>2]|0;
 $21 = ($20|0)==($__a_end|0);
 if (!($21)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = ($18|0)==(34);
 $23 = ($17>>>0)>(0);
 $24 = ($17|0)==(0);
 $25 = ($16>>>0)>(4294967295);
 $26 = $24 & $25;
 $27 = $23 | $26;
 $or$cond = $22 | $27;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $16;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $__p2 = sp;
 $1 = ($__a|0)==($__a_end|0);
 if ($1) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = HEAP8[$__a]|0;
 $3 = ($2<<24>>24)==(45);
 if ($3) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = (___errno_location()|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$4>>2] = 0;
 $6 = HEAP8[(9032)]|0;
 $7 = ($6<<24>>24)==(0);
 do {
  if ($7) {
   $8 = (___cxa_guard_acquire(((9032)|0))|0);
   $9 = ($8|0)==(0);
   if ($9) {
    break;
   }
   __THREW__ = 0;
   $10 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $11 = __THREW__; __THREW__ = 0;
   $12 = $11&1;
   if ($12) {
    $13 = ___cxa_find_matching_catch(-1,-1)|0;
    $14 = tempRet0;
    ___cxa_guard_abort(((9032)|0));
    ___resumeException($13|0);
    // unreachable;
   } else {
    HEAP32[(9024)>>2] = $10;
    ___cxa_guard_release(((9032)|0));
    break;
   }
  }
 } while(0);
 $15 = HEAP32[(9024)>>2]|0;
 $16 = (_strtoull_l(($__a|0),($__p2|0),($__base|0),($15|0))|0);
 $17 = tempRet0;
 $18 = HEAP32[$4>>2]|0;
 $19 = ($18|0)==(0);
 if ($19) {
  HEAP32[$4>>2] = $5;
 }
 $20 = HEAP32[$__p2>>2]|0;
 $21 = ($20|0)==($__a_end|0);
 if (!($21)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = ($18|0)==(34);
 $23 = ($17>>>0)>(0);
 $24 = ($17|0)==(0);
 $25 = ($16>>>0)>(65535);
 $26 = $24 & $25;
 $27 = $23 | $26;
 $or$cond = $22 | $27;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $28 = $16&65535;
  $$0 = $28;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $__p2 = sp;
 $1 = ($__a|0)==($__a_end|0);
 if ($1) {
  HEAP32[$__err>>2] = 4;
  $28 = 0;$29 = 0;
  tempRet0 = $29;
  STACKTOP = sp;return ($28|0);
 }
 $2 = (___errno_location()|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$2>>2] = 0;
 $4 = HEAP8[(9032)]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $6 = (___cxa_guard_acquire(((9032)|0))|0);
   $7 = ($6|0)==(0);
   if ($7) {
    break;
   }
   __THREW__ = 0;
   $8 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $11 = ___cxa_find_matching_catch(-1,-1)|0;
    $12 = tempRet0;
    ___cxa_guard_abort(((9032)|0));
    ___resumeException($11|0);
    // unreachable;
   } else {
    HEAP32[(9024)>>2] = $8;
    ___cxa_guard_release(((9032)|0));
    break;
   }
  }
 } while(0);
 $13 = HEAP32[(9024)>>2]|0;
 $14 = (_strtoll_l(($__a|0),($__p2|0),($__base|0),($13|0))|0);
 $15 = tempRet0;
 $16 = HEAP32[$2>>2]|0;
 $17 = ($16|0)==(0);
 if ($17) {
  HEAP32[$2>>2] = $3;
 }
 $18 = HEAP32[$__p2>>2]|0;
 $19 = ($18|0)==($__a_end|0);
 if (!($19)) {
  HEAP32[$__err>>2] = 4;
  $28 = 0;$29 = 0;
  tempRet0 = $29;
  STACKTOP = sp;return ($28|0);
 }
 $20 = ($16|0)==(34);
 if ($20) {
  HEAP32[$__err>>2] = 4;
  $21 = ($15|0)>(0);
  $22 = ($15|0)==(0);
  $23 = ($14>>>0)>(0);
  $24 = $22 & $23;
  $25 = $21 | $24;
  $26 = $25 ? -1 : 0;
  $27 = $25 ? 2147483647 : -2147483648;
  tempRet0 = $27;
  STACKTOP = sp;return ($26|0);
 } else {
  $28 = $14;$29 = $15;
  tempRet0 = $29;
  STACKTOP = sp;return ($28|0);
 }
 return 0|0;
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $__p2 = sp;
 $1 = ($__a|0)==($__a_end|0);
 if ($1) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (___errno_location()|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[$2>>2] = 0;
 $4 = HEAP8[(9032)]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $6 = (___cxa_guard_acquire(((9032)|0))|0);
   $7 = ($6|0)==(0);
   if ($7) {
    break;
   }
   __THREW__ = 0;
   $8 = (invoke_iiii(34,2147483647,((9040)|0),(0|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $11 = ___cxa_find_matching_catch(-1,-1)|0;
    $12 = tempRet0;
    ___cxa_guard_abort(((9032)|0));
    ___resumeException($11|0);
    // unreachable;
   } else {
    HEAP32[(9024)>>2] = $8;
    ___cxa_guard_release(((9032)|0));
    break;
   }
  }
 } while(0);
 $13 = HEAP32[(9024)>>2]|0;
 $14 = (_strtoll_l(($__a|0),($__p2|0),($__base|0),($13|0))|0);
 $15 = tempRet0;
 $16 = HEAP32[$2>>2]|0;
 $17 = ($16|0)==(0);
 if ($17) {
  HEAP32[$2>>2] = $3;
 }
 $18 = HEAP32[$__p2>>2]|0;
 $19 = ($18|0)==($__a_end|0);
 if (!($19)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = ($16|0)==(34);
 do {
  if ($20) {
   HEAP32[$__err>>2] = 4;
   $31 = ($15|0)>(0);
   $32 = ($15|0)==(0);
   $33 = ($14>>>0)>(0);
   $34 = $32 & $33;
   $35 = $31 | $34;
   if ($35) {
    $$0 = 2147483647;
   } else {
    break;
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   $21 = ($15|0)<(-1);
   $22 = ($15|0)==(-1);
   $23 = ($14>>>0)<(2147483648);
   $24 = $22 & $23;
   $25 = $21 | $24;
   if ($25) {
    HEAP32[$__err>>2] = 4;
    break;
   }
   $26 = ($15|0)>(0);
   $27 = ($15|0)==(0);
   $28 = ($14>>>0)>(2147483647);
   $29 = $27 & $28;
   $30 = $26 | $29;
   if ($30) {
    HEAP32[$__err>>2] = 4;
    $$0 = 2147483647;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$0 = $14;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$0 = -2147483648;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp|0;
 var $$idx = 0, $$idx$val = 0, $$idx1 = 0, $$idx1$val$field = 0, $$idx1$val$field2 = 0, $$idx1$val$index = 0, $$idx1$val$index1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$idx = $__vp;
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx1 = (($__vp) + 4|0);
 $1 = $$idx1;
 $$idx1$val$index = ($1);
 $$idx1$val$field = HEAPU8[$$idx1$val$index]|(HEAPU8[$$idx1$val$index+1|0]<<8)|(HEAPU8[$$idx1$val$index+2|0]<<16)|(HEAPU8[$$idx1$val$index+3|0]<<24);
 $$idx1$val$index1 = (($1) + 4|0);
 $$idx1$val$field2 = HEAPU8[$$idx1$val$index1]|(HEAPU8[$$idx1$val$index1+1|0]<<8)|(HEAPU8[$$idx1$val$index1+2|0]<<16)|(HEAPU8[$$idx1$val$index1+3|0]<<24);
 $2 = $$idx1$val$field2 >> 1;
 $3 = $$idx$val;
 $4 = (($3) + ($2)|0);
 $5 = $4;
 $6 = $$idx1$val$field2 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  $13 = $$idx1$val$field;
  $14 = $13;
  FUNCTION_TABLE_vi[$14 & 255]($5);
  STACKTOP = sp;return;
 } else {
  $8 = $4;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + ($$idx1$val$field)|0);
  $11 = $10;
  $12 = HEAP32[$11>>2]|0;
  $14 = $12;
  FUNCTION_TABLE_vi[$14 & 255]($5);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i = 0, $$0$i2 = 0, $$0$i569 = 0, $$0$i57 = 0, $$pre1$i = 0, $$sum = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = $7 >> 2;
 $9 = ($8>>>0)<($__n>>>0);
 if (!($9)) {
  $$0$i = $__n;$10 = $4;
  while(1) {
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = 0;
   } else {
    HEAP32[$10>>2] = 0;
    $$pre1$i = HEAP32[$3>>2]|0;
    $12 = $$pre1$i;
   }
   $13 = (($12) + 4|0);
   HEAP32[$3>>2] = $13;
   $14 = (($$0$i) + -1)|0;
   $15 = ($14|0)==(0);
   if ($15) {
    break;
   } else {
    $$0$i = $14;$10 = $13;
   }
  }
  STACKTOP = sp;return;
 }
 $16 = (($this) + 16|0);
 $17 = ($this);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18;
 $20 = (($6) - ($19))|0;
 $21 = $20 >> 2;
 $22 = (($21) + ($__n))|0;
 $23 = ($22>>>0)>(1073741823);
 if ($23) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(0);
  // unreachable;
 }
 $24 = (($5) - ($19))|0;
 $25 = $24 >> 2;
 $26 = ($25>>>0)<(536870911);
 do {
  if ($26) {
   $27 = $24 >> 1;
   $28 = ($27>>>0)<($22>>>0);
   $29 = $28 ? $22 : $27;
   $30 = ($29|0)==(0);
   if ($30) {
    $$0$i57 = 0;$39 = 0;
    break;
   }
   $31 = (($this) + 128|0);
   $32 = HEAP8[$31]|0;
   $33 = ($32<<24>>24)==(0);
   $34 = ($29>>>0)<(29);
   $or$cond$i$i$i$i = $33 & $34;
   if (!($or$cond$i$i$i$i)) {
    $$0$i569 = $29;
    label = 11;
    break;
   }
   HEAP8[$31] = 1;
   $35 = $16;
   $$0$i57 = $29;$39 = $35;
  } else {
   $$0$i569 = 1073741823;
   label = 11;
  }
 } while(0);
 if ((label|0) == 11) {
  $36 = $$0$i569 << 2;
  $37 = (__Znwj($36)|0);
  $38 = $37;
  $$0$i57 = $$0$i569;$39 = $38;
 }
 $40 = (($39) + ($21<<2)|0);
 $$0$i2 = $__n;$41 = $40;
 while(1) {
  $42 = ($41|0)==(0|0);
  if ($42) {
   $43 = 0;
  } else {
   HEAP32[$41>>2] = 0;
   $43 = $41;
  }
  $44 = (($43) + 4|0);
  $45 = (($$0$i2) + -1)|0;
  $46 = ($45|0)==(0);
  if ($46) {
   break;
  } else {
   $$0$i2 = $45;$41 = $44;
  }
 }
 $47 = (($39) + ($$0$i57<<2)|0);
 $48 = HEAP32[$17>>2]|0;
 $49 = HEAP32[$3>>2]|0;
 $50 = $49;
 $51 = $48;
 $52 = (($50) - ($51))|0;
 $53 = $52 >> 2;
 $$sum = (($21) - ($53))|0;
 $54 = (($39) + ($$sum<<2)|0);
 $55 = $54;
 $56 = $48;
 _memcpy(($55|0),($56|0),($52|0))|0;
 HEAP32[$17>>2] = $54;
 HEAP32[$3>>2] = $44;
 HEAP32[$1>>2] = $47;
 $57 = ($48|0)==(0|0);
 if ($57) {
  STACKTOP = sp;return;
 }
 $58 = $16;
 $59 = ($58|0)==($48|0);
 if ($59) {
  $60 = (($this) + 128|0);
  HEAP8[$60] = 0;
  STACKTOP = sp;return;
 } else {
  __ZdlPv($56);
  STACKTOP = sp;return;
 }
}
function ___cxx_global_array_dtor(u$0) {
 u$0 = u$0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((13952) + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((13952) + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((13952) + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((13952) + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((13952) + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((13952) + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((13952) + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((13952) + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((13952) + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((13952) + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((13952) + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((13952) + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((13952) + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((13952) + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((13952) + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((13952) + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((13952) + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((13952) + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((13952) + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((13952) + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((13952) + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((13952) + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((13952) + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((13952)));
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor53(u$0) {
 u$0 = u$0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((14280) + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((14280) + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((14280) + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((14280) + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((14280) + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((14280) + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((14280) + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((14280) + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((14280) + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((14280) + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((14280) + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((14280) + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((14280) + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((14280) + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((14280) + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((14280) + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((14280) + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((14280) + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((14280) + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((14280) + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((14280) + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((14280) + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((14280) + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((14280)));
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor56(u$0) {
 u$0 = u$0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((14592) + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((14592) + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((14592) + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((14592) + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((14592) + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((14592) + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((14592) + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((14592) + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((14592) + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((14592) + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((14592) + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((14592) + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((14592) + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((14592) + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((14592) + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((14592) + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((14592) + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((14592) + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((14592) + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((14592) + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((14592) + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((14592) + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((14592) + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((14592)));
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor81(u$0) {
 u$0 = u$0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((15432) + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((15432) + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((15432) + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((15432) + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((15432) + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((15432) + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((15432) + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((15432) + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((15432) + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((15432) + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((15432) + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((15432) + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((15432) + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((15432) + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((15432) + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((15432) + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((15432) + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((15432) + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((15432) + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((15432) + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((15432) + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((15432) + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((15432) + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((15432)));
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor105(u$0) {
 u$0 = u$0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((15944) + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((15944) + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((15944) + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((15944) + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((15944) + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((15944) + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((15944) + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((15944) + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((15944) + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((15944) + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((15944) + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((15944) + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev((((15944) + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((15944)));
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor120(u$0) {
 u$0 = u$0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((16480) + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((16480) + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((16480) + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((16480) + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((16480) + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((16480) + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((16480) + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((16480) + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((16480) + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((16480) + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((16480) + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((16480) + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev((((16480) + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((16480)));
 STACKTOP = sp;return;
}
function _mbrlen($s,$n,$st) {
 $s = $s|0;
 $n = $n|0;
 $st = $st|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($st|0)!=(0|0);
 $2 = $1 ? $st : (17000);
 $3 = (_mbrtowc(0,$s,$n,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $$1$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$1$phi = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, $s$1$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = sp;
 HEAP32[$1>>2] = $wc;
 $2 = ($st|0)==(0|0);
 $$01 = $2 ? (17008) : $st;
 $3 = ($$01);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($src|0)==(0|0);
 L1: do {
  if ($5) {
   $6 = ($4|0)==(0);
   if ($6) {
    $$0 = 0;
   } else {
    break;
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   $7 = ($wc|0)==(0|0);
   if ($7) {
    $8 = $1;
    HEAP32[$1>>2] = $8;
    $9 = $8;
   } else {
    $9 = $wc;
   }
   $10 = ($n|0)==(0);
   if ($10) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $11 = ($4|0)==(0);
   do {
    if ($11) {
     $12 = HEAP8[$src]|0;
     $13 = $12&255;
     $14 = ($12<<24>>24)>(-1);
     if ($14) {
      HEAP32[$9>>2] = $13;
      $15 = ($12<<24>>24)!=(0);
      $16 = $15&1;
      $$0 = $16;
      STACKTOP = sp;return ($$0|0);
     } else {
      $17 = (($13) + -194)|0;
      $18 = ($17>>>0)>(50);
      if ($18) {
       break L1;
      }
      $19 = (($src) + 1|0);
      $20 = ((16792) + ($17<<2)|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($n) + -1)|0;
      $$02 = $22;$c$0 = $21;$s$0 = $19;
      break;
     }
    } else {
     $$02 = $n;$c$0 = $4;$s$0 = $src;
    }
   } while(0);
   $23 = ($$02|0)==(0);
   L17: do {
    if ($23) {
     $c$2 = $c$0;
    } else {
     $24 = HEAP8[$s$0]|0;
     $25 = $24&255;
     $26 = $25 >>> 3;
     $27 = (($26) + -16)|0;
     $28 = $c$0 >> 26;
     $29 = (($26) + ($28))|0;
     $30 = $27 | $29;
     $31 = ($30>>>0)>(7);
     if ($31) {
      break L1;
     } else {
      $$1 = $$02;$32 = $24;$c$1 = $c$0;$s$1 = $s$0;
     }
     while(1) {
      $33 = $c$1 << 6;
      $34 = (($s$1) + 1|0);
      $35 = $32&255;
      $36 = (($35) + -128)|0;
      $37 = $36 | $33;
      $38 = (($$1) + -1)|0;
      $39 = ($37|0)<(0);
      if (!($39)) {
       break;
      }
      $41 = ($38|0)==(0);
      if ($41) {
       $c$2 = $37;
       break L17;
      }
      $42 = HEAP8[$34]|0;
      $43 = $42&255;
      $44 = (($43) + -128)|0;
      $45 = ($44>>>0)>(63);
      if ($45) {
       break L1;
      } else {
       $s$1$phi = $34;$c$1$phi = $37;$$1$phi = $38;$32 = $42;$s$1 = $s$1$phi;$c$1 = $c$1$phi;$$1 = $$1$phi;
      }
     }
     HEAP32[$3>>2] = 0;
     HEAP32[$9>>2] = $37;
     $40 = (($n) - ($38))|0;
     $$0 = $40;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   HEAP32[$3>>2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$3>>2] = 0;
 $46 = (___errno_location()|0);
 HEAP32[$46>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
 $wcs = $wcs|0;
 $src = $src|0;
 $n = $n|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$026 = 0, $$04$ = 0, $$0423 = 0, $$1 = 0, $$15 = 0, $$214 = 0, $$26 = 0, $$311 = 0, $$pr$pre = 0, $$pr41 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$024 = 0, $cnt$1 = 0, $cnt$212 = 0, $cnt$3 = 0, $or$cond = 0, $or$cond22 = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond810 = 0, $s = 0, $wbuf = 0, $wcs$ = 0, $wn$ = 0;
 var $ws$018 = 0, $ws$025 = 0, $ws$1 = 0, $ws$213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1032|0;
 $wbuf = sp;
 $s = sp + 1024|0;
 $1 = $wbuf;
 $2 = HEAP32[$src>>2]|0;
 HEAP32[$s>>2] = $2;
 $3 = ($wcs|0)!=(0|0);
 $4 = ($wbuf);
 $wn$ = $3 ? $wn : 256;
 $wcs$ = $3 ? $wcs : $4;
 $5 = ($2|0)==(0|0);
 $6 = ($wn$|0)==(0);
 $or$cond22 = $5 | $6;
 L1: do {
  if ($or$cond22) {
   $$1 = $n;$$26 = $wn$;$20 = $2;$cnt$1 = 0;$ws$018 = $wcs$;
  } else {
   $$026 = $n;$$0423 = $wn$;$$pr41 = $2;$cnt$024 = 0;$ws$025 = $wcs$;
   while(1) {
    $7 = $$026 >>> 2;
    $8 = ($7>>>0)>=($$0423>>>0);
    $9 = ($$026>>>0)>(131);
    $or$cond7 = $8 | $9;
    if (!($or$cond7)) {
     $$1 = $$026;$$26 = $$0423;$20 = $$pr41;$cnt$1 = $cnt$024;$ws$018 = $ws$025;
     break L1;
    }
    $$04$ = $8 ? $$0423 : $7;
    $10 = (($$026) - ($$04$))|0;
    $11 = (_mbsrtowcs($ws$025,$s,$$04$,$st)|0);
    $12 = ($11|0)==(-1);
    if ($12) {
     break;
    }
    $13 = ($ws$025|0)==($4|0);
    if ($13) {
     $$15 = $$0423;$ws$1 = $4;
    } else {
     $14 = (($ws$025) + ($11<<2)|0);
     $15 = (($$0423) - ($11))|0;
     $$15 = $15;$ws$1 = $14;
    }
    $16 = (($11) + ($cnt$024))|0;
    $17 = HEAP32[$s>>2]|0;
    $18 = ($17|0)==(0|0);
    $19 = ($$15|0)==(0);
    $or$cond = $18 | $19;
    if ($or$cond) {
     $$1 = $10;$$26 = $$15;$20 = $17;$cnt$1 = $16;$ws$018 = $ws$1;
     break L1;
    } else {
     $$026 = $10;$$0423 = $$15;$$pr41 = $17;$cnt$024 = $16;$ws$025 = $ws$1;
    }
   }
   $$pr$pre = HEAP32[$s>>2]|0;
   $$1 = $10;$$26 = 0;$20 = $$pr$pre;$cnt$1 = -1;$ws$018 = $ws$025;
  }
 } while(0);
 $21 = ($20|0)==(0|0);
 L11: do {
  if ($21) {
   $cnt$3 = $cnt$1;
  } else {
   $22 = ($$26|0)==(0);
   $23 = ($$1|0)==(0);
   $or$cond810 = $22 | $23;
   if ($or$cond810) {
    $cnt$3 = $cnt$1;
    break;
   } else {
    $$214 = $$1;$$311 = $$26;$24 = $20;$cnt$212 = $cnt$1;$ws$213 = $ws$018;
   }
   while(1) {
    $25 = (_mbrtowc($ws$213,$24,$$214,$st)|0);
    $26 = (($25) + 2)|0;
    $27 = ($26>>>0)<(3);
    if ($27) {
     break;
    }
    $29 = HEAP32[$s>>2]|0;
    $30 = (($29) + ($25)|0);
    HEAP32[$s>>2] = $30;
    $31 = (($$214) - ($25))|0;
    $32 = (($ws$213) + 4|0);
    $33 = (($$311) + -1)|0;
    $34 = (($cnt$212) + 1)|0;
    $35 = ($33|0)==(0);
    $36 = ($$214|0)==($25|0);
    $or$cond8 = $35 | $36;
    if ($or$cond8) {
     $cnt$3 = $34;
     break L11;
    } else {
     $$214 = $31;$$311 = $33;$24 = $30;$cnt$212 = $34;$ws$213 = $32;
    }
   }
   if ((($25|0) == -1)) {
    $cnt$3 = -1;
    break;
   } else if ((($25|0) == 0)) {
    HEAP32[$s>>2] = 0;
    $cnt$3 = $cnt$212;
    break;
   } else {
    $28 = ($st);
    HEAP32[$28>>2] = 0;
    $cnt$3 = $cnt$212;
    break;
   }
  }
 } while(0);
 if (!($3)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $37 = HEAP32[$s>>2]|0;
 HEAP32[$src>>2] = $37;
 STACKTOP = sp;return ($cnt$3|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$01$ph = 0, $$0123 = 0, $$02 = 0, $$113 = 0, $$13$lcssa = 0, $$137 = 0, $$137$phi = 0, $$2 = 0, $$24 = 0, $$3 = 0, $$35 = 0, $$4 = 0, $$441 = 0, $$442 = 0, $$46$ph = 0, $$4622 = 0, $$512 = 0, $$6 = 0, $$7 = 0;
 var $$8 = 0, $$840 = 0, $$in = 0, $$pre$pre = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0;
 var $c$6 = 0, $or$cond = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0, $s$1043 = 0, $s$1044 = 0, $s$18 = 0, $s$18$phi = 0, $s$2 = 0, $s$3 = 0, $s$4 = 0, $s$5$ph = 0, $s$524 = 0, $s$614 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$src>>2]|0;
 $2 = ($st|0)==(0|0);
 do {
  if ($2) {
   label = 5;
  } else {
   $3 = ($st);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==(0);
   if ($5) {
    label = 5;
    break;
   }
   $6 = ($ws|0)==(0|0);
   if ($6) {
    $$35 = $wn;$c$2 = $4;$s$3 = $1;
    label = 16;
    break;
   }
   HEAP32[$3>>2] = 0;
   $$3 = $ws;$$7 = $wn;$c$4 = $4;$s$8 = $1;
   label = 36;
  }
 } while(0);
 if ((label|0) == 5) {
  $7 = ($ws|0)==(0|0);
  if ($7) {
   $$02 = $wn;$s$0 = $1;
   label = 7;
  } else {
   $$01$ph = $ws;$$46$ph = $wn;$s$5$ph = $1;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $8 = ($$46$ph|0)==(0);
   if ($8) {
    $$0 = $wn;
    label = 53;
    break;
   } else {
    $$0123 = $$01$ph;$$4622 = $$46$ph;$s$524 = $s$5$ph;
   }
   while(1) {
    $69 = HEAP8[$s$524]|0;
    $70 = $69&255;
    $71 = (($70) + -1)|0;
    $72 = ($71>>>0)<(127);
    do {
     if ($72) {
      $73 = $s$524;
      $74 = $73 & 3;
      $75 = ($74|0)==(0);
      $76 = ($$4622>>>0)>(3);
      $or$cond = $75 & $76;
      if ($or$cond) {
       $$113 = $$0123;$$512 = $$4622;$s$614 = $s$524;
      } else {
       $$2 = $$0123;$$6 = $$4622;$101 = $69;$s$7 = $s$524;
       break;
      }
      while(1) {
       $77 = $s$614;
       $78 = HEAP32[$77>>2]|0;
       $79 = (($78) + -16843009)|0;
       $80 = $79 | $78;
       $81 = $80 & -2139062144;
       $82 = ($81|0)==(0);
       if (!($82)) {
        label = 30;
        break;
       }
       $83 = (($s$614) + 1|0);
       $84 = $78 & 255;
       $85 = (($$113) + 4|0);
       HEAP32[$$113>>2] = $84;
       $86 = (($s$614) + 2|0);
       $87 = HEAP8[$83]|0;
       $88 = $87&255;
       $89 = (($$113) + 8|0);
       HEAP32[$85>>2] = $88;
       $90 = (($s$614) + 3|0);
       $91 = HEAP8[$86]|0;
       $92 = $91&255;
       $93 = (($$113) + 12|0);
       HEAP32[$89>>2] = $92;
       $94 = (($s$614) + 4|0);
       $95 = HEAP8[$90]|0;
       $96 = $95&255;
       $97 = (($$113) + 16|0);
       HEAP32[$93>>2] = $96;
       $98 = (($$512) + -4)|0;
       $99 = ($98>>>0)>(3);
       if ($99) {
        $$113 = $97;$$512 = $98;$s$614 = $94;
       } else {
        label = 31;
        break;
       }
      }
      if ((label|0) == 30) {
       label = 0;
       $100 = $78&255;
       $$2 = $$113;$$6 = $$512;$101 = $100;$s$7 = $s$614;
       break;
      }
      else if ((label|0) == 31) {
       label = 0;
       $$pre$pre = HEAP8[$94]|0;
       $$2 = $97;$$6 = $98;$101 = $$pre$pre;$s$7 = $94;
       break;
      }
     } else {
      $$2 = $$0123;$$6 = $$4622;$101 = $69;$s$7 = $s$524;
     }
    } while(0);
    $102 = $101&255;
    $103 = (($102) + -1)|0;
    $104 = ($103>>>0)<(127);
    if (!($104)) {
     break;
    }
    $105 = (($s$7) + 1|0);
    $106 = (($$2) + 4|0);
    HEAP32[$$2>>2] = $102;
    $107 = (($$6) + -1)|0;
    $108 = ($107|0)==(0);
    if ($108) {
     $$0 = $wn;
     label = 53;
     break L7;
    } else {
     $$0123 = $106;$$4622 = $107;$s$524 = $105;
    }
   }
   $109 = (($102) + -194)|0;
   $110 = ($109>>>0)>(50);
   if ($110) {
    $$442 = $$2;$$840 = $$6;$s$1044 = $s$7;
    label = 47;
    break;
   }
   $111 = (($s$7) + 1|0);
   $112 = ((16792) + ($109<<2)|0);
   $113 = HEAP32[$112>>2]|0;
   $$3 = $$2;$$7 = $$6;$c$4 = $113;$s$8 = $111;
   label = 36;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $9 = HEAP8[$s$0]|0;
   $10 = $9&255;
   $11 = (($10) + -1)|0;
   $12 = ($11>>>0)<(127);
   do {
    if ($12) {
     $13 = $s$0;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if (!($15)) {
      $$24 = $$02;$31 = $9;$s$2 = $s$0;
      break;
     }
     $16 = $s$0;
     $17 = HEAP32[$16>>2]|0;
     $18 = (($17) + -16843009)|0;
     $19 = $18 | $17;
     $20 = $19 & -2139062144;
     $21 = ($20|0)==(0);
     if ($21) {
      $$137 = $$02;$s$18 = $s$0;
      while(1) {
       $22 = (($s$18) + 4|0);
       $23 = (($$137) + -4)|0;
       $24 = $22;
       $25 = HEAP32[$24>>2]|0;
       $26 = (($25) + -16843009)|0;
       $27 = $26 | $25;
       $28 = $27 & -2139062144;
       $29 = ($28|0)==(0);
       if ($29) {
        $s$18$phi = $22;$$137$phi = $23;$s$18 = $s$18$phi;$$137 = $$137$phi;
       } else {
        $$13$lcssa = $23;$$in = $25;$s$1$lcssa = $22;
        break;
       }
      }
     } else {
      $$13$lcssa = $$02;$$in = $17;$s$1$lcssa = $s$0;
     }
     $30 = $$in&255;
     $$24 = $$13$lcssa;$31 = $30;$s$2 = $s$1$lcssa;
    } else {
     $$24 = $$02;$31 = $9;$s$2 = $s$0;
    }
   } while(0);
   $32 = $31&255;
   $33 = (($32) + -1)|0;
   $34 = ($33>>>0)<(127);
   if ($34) {
    $35 = (($s$2) + 1|0);
    $36 = (($$24) + -1)|0;
    $$02 = $36;$s$0 = $35;
    label = 7;
    continue;
   }
   $37 = (($32) + -194)|0;
   $38 = ($37>>>0)>(50);
   if ($38) {
    $$442 = $ws;$$840 = $$24;$s$1044 = $s$2;
    label = 47;
    break;
   }
   $39 = (($s$2) + 1|0);
   $40 = ((16792) + ($37<<2)|0);
   $41 = HEAP32[$40>>2]|0;
   $$35 = $$24;$c$2 = $41;$s$3 = $39;
   label = 16;
   continue;
  }
  else if ((label|0) == 16) {
   label = 0;
   $42 = HEAP8[$s$3]|0;
   $43 = $42&255;
   $44 = $43 >>> 3;
   $45 = (($44) + -16)|0;
   $46 = $c$2 >> 26;
   $47 = (($44) + ($46))|0;
   $48 = $45 | $47;
   $49 = ($48>>>0)>(7);
   if ($49) {
    label = 17;
    break;
   }
   $51 = (($s$3) + 1|0);
   $52 = $c$2 & 33554432;
   $53 = ($52|0)==(0);
   do {
    if ($53) {
     $s$4 = $51;
    } else {
     $54 = HEAP8[$51]|0;
     $55 = $54&255;
     $56 = (($55) + -128)|0;
     $57 = ($56>>>0)>(63);
     if ($57) {
      label = 20;
      break L7;
     }
     $59 = (($s$3) + 2|0);
     $60 = $c$2 & 524288;
     $61 = ($60|0)==(0);
     if ($61) {
      $s$4 = $59;
      break;
     }
     $62 = HEAP8[$59]|0;
     $63 = $62&255;
     $64 = (($63) + -128)|0;
     $65 = ($64>>>0)>(63);
     if ($65) {
      label = 23;
      break L7;
     }
     $67 = (($s$3) + 3|0);
     $s$4 = $67;
    }
   } while(0);
   $68 = (($$35) + -1)|0;
   $$02 = $68;$s$0 = $s$4;
   label = 7;
   continue;
  }
  else if ((label|0) == 36) {
   label = 0;
   $114 = HEAP8[$s$8]|0;
   $115 = $114&255;
   $116 = $115 >>> 3;
   $117 = (($116) + -16)|0;
   $118 = $c$4 >> 26;
   $119 = (($116) + ($118))|0;
   $120 = $117 | $119;
   $121 = ($120>>>0)>(7);
   if ($121) {
    label = 37;
    break;
   }
   $123 = $c$4 << 6;
   $124 = (($s$8) + 1|0);
   $125 = (($115) + -128)|0;
   $126 = $125 | $123;
   $127 = ($126|0)<(0);
   do {
    if ($127) {
     $128 = HEAP8[$124]|0;
     $129 = $128&255;
     $130 = (($129) + -128)|0;
     $131 = ($130>>>0)>(63);
     if ($131) {
      label = 40;
      break L7;
     }
     $133 = $126 << 6;
     $134 = (($s$8) + 2|0);
     $135 = $130 | $133;
     $136 = ($135|0)<(0);
     if (!($136)) {
      $c$5 = $135;$s$9 = $134;
      break;
     }
     $137 = HEAP8[$134]|0;
     $138 = $137&255;
     $139 = (($138) + -128)|0;
     $140 = ($139>>>0)>(63);
     if ($140) {
      label = 43;
      break L7;
     }
     $142 = $135 << 6;
     $143 = (($s$8) + 3|0);
     $144 = $139 | $142;
     $c$5 = $144;$s$9 = $143;
    } else {
     $c$5 = $126;$s$9 = $124;
    }
   } while(0);
   $145 = (($$3) + 4|0);
   HEAP32[$$3>>2] = $c$5;
   $146 = (($$7) + -1)|0;
   $$01$ph = $145;$$46$ph = $146;$s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 17) {
  $50 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $50;
  label = 46;
 }
 else if ((label|0) == 20) {
  $58 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $58;
  label = 46;
 }
 else if ((label|0) == 23) {
  $66 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$35;$c$6 = $c$2;$s$10 = $66;
  label = 46;
 }
 else if ((label|0) == 37) {
  $122 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $122;
  label = 46;
 }
 else if ((label|0) == 40) {
  $132 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $126;$s$10 = $132;
  label = 46;
 }
 else if ((label|0) == 43) {
  $141 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $135;$s$10 = $141;
  label = 46;
 }
 else if ((label|0) == 53) {
  STACKTOP = sp;return ($$0|0);
 }
 if ((label|0) == 46) {
  $147 = ($c$6|0)==(0);
  if ($147) {
   $$442 = $$4;$$840 = $$8;$s$1044 = $s$10;
   label = 47;
  } else {
   $$441 = $$4;$s$1043 = $s$10;
  }
 }
 do {
  if ((label|0) == 47) {
   $148 = HEAP8[$s$1044]|0;
   $149 = ($148<<24>>24)==(0);
   if (!($149)) {
    $$441 = $$442;$s$1043 = $s$1044;
    break;
   }
   $150 = ($$442|0)==(0|0);
   if (!($150)) {
    HEAP32[$$442>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $151 = (($wn) - ($$840))|0;
   $$0 = $151;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $152 = (___errno_location()|0);
 HEAP32[$152>>2] = 84;
 $153 = ($$441|0)==(0|0);
 if ($153) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$src>>2] = $s$1043;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $1 = sp;
 HEAP32[$1>>2] = $wc;
 $2 = ($src|0)==(0|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($n|0)==(0);
 do {
  if (!($3)) {
   $4 = ($wc|0)==(0|0);
   if ($4) {
    $5 = $1;
    HEAP32[$1>>2] = $5;
    $6 = $5;
   } else {
    $6 = $wc;
   }
   $7 = HEAP8[$src]|0;
   $8 = $7&255;
   $9 = ($7<<24>>24)>(-1);
   if ($9) {
    HEAP32[$6>>2] = $8;
    $10 = ($7<<24>>24)!=(0);
    $11 = $10&1;
    $$0 = $11;
    STACKTOP = sp;return ($$0|0);
   }
   $12 = (($8) + -194)|0;
   $13 = ($12>>>0)>(50);
   if ($13) {
    break;
   }
   $14 = (($src) + 1|0);
   $15 = ((16792) + ($12<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($n>>>0)<(4);
   if ($17) {
    $18 = ($n*6)|0;
    $19 = (($18) + -6)|0;
    $20 = -2147483648 >>> $19;
    $21 = $16 & $20;
    $22 = ($21|0)==(0);
    if (!($22)) {
     break;
    }
   }
   $23 = HEAP8[$14]|0;
   $24 = $23&255;
   $25 = $24 >>> 3;
   $26 = (($25) + -16)|0;
   $27 = $16 >> 26;
   $28 = (($25) + ($27))|0;
   $29 = $26 | $28;
   $30 = ($29>>>0)>(7);
   if ($30) {
    break;
   }
   $31 = $16 << 6;
   $32 = (($24) + -128)|0;
   $33 = $32 | $31;
   $34 = ($33|0)<(0);
   if (!($34)) {
    HEAP32[$6>>2] = $33;
    $$0 = 2;
    STACKTOP = sp;return ($$0|0);
   }
   $35 = (($src) + 2|0);
   $36 = HEAP8[$35]|0;
   $37 = $36&255;
   $38 = (($37) + -128)|0;
   $39 = ($38>>>0)>(63);
   if ($39) {
    break;
   }
   $40 = $33 << 6;
   $41 = $38 | $40;
   $42 = ($41|0)<(0);
   if (!($42)) {
    HEAP32[$6>>2] = $41;
    $$0 = 3;
    STACKTOP = sp;return ($$0|0);
   }
   $43 = (($src) + 3|0);
   $44 = HEAP8[$43]|0;
   $45 = $44&255;
   $46 = (($45) + -128)|0;
   $47 = ($46>>>0)>(63);
   if ($47) {
    break;
   }
   $48 = $41 << 6;
   $49 = $46 | $48;
   HEAP32[$6>>2] = $49;
   $$0 = 4;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $50 = (___errno_location()|0);
 HEAP32[$50>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($s|0)==(0|0);
 if ($1) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($wc>>>0)<(128);
 if ($2) {
  $3 = $wc&255;
  HEAP8[$s] = $3;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ($wc>>>0)<(2048);
 if ($4) {
  $5 = $wc >>> 6;
  $6 = $5 | 192;
  $7 = $6&255;
  $8 = (($s) + 1|0);
  HEAP8[$s] = $7;
  $9 = $wc & 63;
  $10 = $9 | 128;
  $11 = $10&255;
  HEAP8[$8] = $11;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($wc>>>0)<(55296);
 $13 = (($wc) + -57344)|0;
 $14 = ($13>>>0)<(8192);
 $or$cond = $12 | $14;
 if ($or$cond) {
  $15 = $wc >>> 12;
  $16 = $15 | 224;
  $17 = $16&255;
  $18 = (($s) + 1|0);
  HEAP8[$s] = $17;
  $19 = $wc >>> 6;
  $20 = $19 & 63;
  $21 = $20 | 128;
  $22 = $21&255;
  $23 = (($s) + 2|0);
  HEAP8[$18] = $22;
  $24 = $wc & 63;
  $25 = $24 | 128;
  $26 = $25&255;
  HEAP8[$23] = $26;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($wc) + -65536)|0;
 $28 = ($27>>>0)<(1048576);
 if ($28) {
  $29 = $wc >>> 18;
  $30 = $29 | 240;
  $31 = $30&255;
  $32 = (($s) + 1|0);
  HEAP8[$s] = $31;
  $33 = $wc >>> 12;
  $34 = $33 & 63;
  $35 = $34 | 128;
  $36 = $35&255;
  $37 = (($s) + 2|0);
  HEAP8[$32] = $36;
  $38 = $wc >>> 6;
  $39 = $38 & 63;
  $40 = $39 | 128;
  $41 = $40&255;
  $42 = (($s) + 3|0);
  HEAP8[$37] = $41;
  $43 = $wc & 63;
  $44 = $43 | 128;
  $45 = $44&255;
  HEAP8[$42] = $45;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $46 = (___errno_location()|0);
  HEAP32[$46>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
 $dst = $dst|0;
 $wcs = $wcs|0;
 $wn = $wn|0;
 $n = $n|0;
 $st = $st|0;
 var $$026 = 0, $$04$$0 = 0, $$0423 = 0, $$1 = 0, $$15 = 0, $$214 = 0, $$26 = 0, $$311 = 0, $$pr$pre = 0, $$pr41 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cnt$024 = 0, $cnt$1 = 0, $cnt$212 = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $or$cond = 0, $or$cond22 = 0, $or$cond7 = 0, $or$cond8 = 0, $or$cond810 = 0, $s$018 = 0, $s$025 = 0;
 var $s$1 = 0, $s$213 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 264|0;
 $buf = sp;
 $ws = sp + 256|0;
 $1 = ($buf);
 $2 = HEAP32[$wcs>>2]|0;
 HEAP32[$ws>>2] = $2;
 $3 = ($dst|0)!=(0|0);
 $n$ = $3 ? $n : 256;
 $dst$ = $3 ? $dst : $1;
 $4 = ($2|0)==(0|0);
 $5 = ($n$|0)==(0);
 $or$cond22 = $4 | $5;
 L1: do {
  if ($or$cond22) {
   $$1 = $wn;$$26 = $n$;$18 = $2;$cnt$1 = 0;$s$018 = $dst$;
  } else {
   $$026 = $wn;$$0423 = $n$;$$pr41 = $2;$cnt$024 = 0;$s$025 = $dst$;
   while(1) {
    $6 = ($$026>>>0)>=($$0423>>>0);
    $7 = ($$026>>>0)>(32);
    $or$cond7 = $6 | $7;
    if (!($or$cond7)) {
     $$1 = $$026;$$26 = $$0423;$18 = $$pr41;$cnt$1 = $cnt$024;$s$018 = $s$025;
     break L1;
    }
    $$04$$0 = $6 ? $$0423 : $$026;
    $8 = (($$026) - ($$04$$0))|0;
    $9 = (_wcsrtombs($s$025,$ws,$$04$$0,0)|0);
    $10 = ($9|0)==(-1);
    if ($10) {
     break;
    }
    $11 = ($s$025|0)==($1|0);
    if ($11) {
     $$15 = $$0423;$s$1 = $1;
    } else {
     $12 = (($s$025) + ($9)|0);
     $13 = (($$0423) - ($9))|0;
     $$15 = $13;$s$1 = $12;
    }
    $14 = (($9) + ($cnt$024))|0;
    $15 = HEAP32[$ws>>2]|0;
    $16 = ($15|0)==(0|0);
    $17 = ($$15|0)==(0);
    $or$cond = $16 | $17;
    if ($or$cond) {
     $$1 = $8;$$26 = $$15;$18 = $15;$cnt$1 = $14;$s$018 = $s$1;
     break L1;
    } else {
     $$026 = $8;$$0423 = $$15;$$pr41 = $15;$cnt$024 = $14;$s$025 = $s$1;
    }
   }
   $$pr$pre = HEAP32[$ws>>2]|0;
   $$1 = $8;$$26 = 0;$18 = $$pr$pre;$cnt$1 = -1;$s$018 = $s$025;
  }
 } while(0);
 $19 = ($18|0)==(0|0);
 L11: do {
  if ($19) {
   $cnt$3 = $cnt$1;
  } else {
   $20 = ($$26|0)==(0);
   $21 = ($$1|0)==(0);
   $or$cond810 = $20 | $21;
   if ($or$cond810) {
    $cnt$3 = $cnt$1;
    break;
   } else {
    $$214 = $$1;$$311 = $$26;$22 = $18;$cnt$212 = $cnt$1;$s$213 = $s$018;
   }
   while(1) {
    $23 = HEAP32[$22>>2]|0;
    $24 = (_wcrtomb($s$213,$23,0)|0);
    $25 = (($24) + 1)|0;
    $26 = ($25>>>0)<(2);
    if ($26) {
     break;
    }
    $28 = HEAP32[$ws>>2]|0;
    $29 = (($28) + 4|0);
    HEAP32[$ws>>2] = $29;
    $30 = (($$214) + -1)|0;
    $31 = (($s$213) + ($24)|0);
    $32 = (($$311) - ($24))|0;
    $33 = (($cnt$212) + 1)|0;
    $34 = ($$311|0)==($24|0);
    $35 = ($30|0)==(0);
    $or$cond8 = $34 | $35;
    if ($or$cond8) {
     $cnt$3 = $33;
     break L11;
    } else {
     $$214 = $30;$$311 = $32;$22 = $29;$cnt$212 = $33;$s$213 = $31;
    }
   }
   $27 = ($24|0)==(0);
   if (!($27)) {
    $cnt$3 = -1;
    break;
   }
   HEAP32[$ws>>2] = 0;
   $cnt$3 = $cnt$212;
  }
 } while(0);
 if (!($3)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $36 = HEAP32[$ws>>2]|0;
 HEAP32[$wcs>>2] = $36;
 STACKTOP = sp;return ($cnt$3|0);
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$02$lcssa = 0, $$0226 = 0, $$038 = 0, $$1 = 0, $$14 = 0, $$219 = 0, $$25$lcssa = 0, $$2525 = 0, $$3 = 0, $$36 = 0, $$414 = 0, $$418 = 0, $$5 = 0, $$pn = 0, $$pre = 0, $$pre40 = 0, $$pre41 = 0, $$pre42 = 0, $1 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ws2$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $buf = sp;
 $1 = ($s|0)==(0|0);
 if ($1) {
  $3 = HEAP32[$ws>>2]|0;
  $4 = ($buf);
  $5 = HEAP32[$3>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$038 = 0;$7 = $5;$ws2$09 = $3;
  }
  while(1) {
   $8 = ($7>>>0)>(127);
   if ($8) {
    $9 = (_wcrtomb($4,$7,0)|0);
    $10 = ($9|0)==(-1);
    if ($10) {
     $$0 = -1;
     label = 26;
     break;
    } else {
     $$pn = $9;
    }
   } else {
    $$pn = 1;
   }
   $$14 = (($$pn) + ($$038))|0;
   $11 = (($ws2$09) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$0 = $$14;
    label = 26;
    break;
   } else {
    $$038 = $$14;$7 = $12;$ws2$09 = $11;
   }
  }
  if ((label|0) == 26) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 $2 = ($n>>>0)>(3);
 L14: do {
  if ($2) {
   $$pre41 = HEAP32[$ws>>2]|0;
   $$0226 = $s;$$2525 = $n;$14 = $$pre41;
   while(1) {
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(0);
    if ($16) {
     $$02$lcssa = $$0226;$$25$lcssa = $$2525;
     break L14;
    }
    $19 = ($15>>>0)>(127);
    if ($19) {
     $20 = (_wcrtomb($$0226,$15,0)|0);
     $21 = ($20|0)==(-1);
     if ($21) {
      $$0 = -1;
      break;
     }
     $22 = (($$0226) + ($20)|0);
     $23 = (($$2525) - ($20))|0;
     $$1 = $22;$$36 = $23;$27 = $14;
    } else {
     $24 = $15&255;
     $25 = (($$0226) + 1|0);
     HEAP8[$$0226] = $24;
     $26 = (($$2525) + -1)|0;
     $$pre42 = HEAP32[$ws>>2]|0;
     $$1 = $25;$$36 = $26;$27 = $$pre42;
    }
    $28 = (($27) + 4|0);
    HEAP32[$ws>>2] = $28;
    $29 = ($$36>>>0)>(3);
    if ($29) {
     $$0226 = $$1;$$2525 = $$36;$14 = $28;
    } else {
     $$02$lcssa = $$1;$$25$lcssa = $$36;
     break L14;
    }
   }
   STACKTOP = sp;return ($$0|0);
  } else {
   $$02$lcssa = $s;$$25$lcssa = $n;
  }
 } while(0);
 $17 = ($$25$lcssa|0)==(0);
 L26: do {
  if ($17) {
   $$414 = 0;
  } else {
   $18 = ($buf);
   $$pre = HEAP32[$ws>>2]|0;
   $$219 = $$02$lcssa;$$418 = $$25$lcssa;$30 = $$pre;
   while(1) {
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)==(0);
    if ($32) {
     label = 24;
     break;
    }
    $33 = ($31>>>0)>(127);
    if ($33) {
     $34 = (_wcrtomb($18,$31,0)|0);
     $35 = ($34|0)==(-1);
     if ($35) {
      $$0 = -1;
      label = 26;
      break;
     }
     $36 = ($34>>>0)>($$418>>>0);
     if ($36) {
      label = 20;
      break;
     }
     $38 = HEAP32[$30>>2]|0;
     (_wcrtomb($$219,$38,0)|0);
     $39 = (($$219) + ($34)|0);
     $40 = (($$418) - ($34))|0;
     $$3 = $39;$$5 = $40;$44 = $30;
    } else {
     $41 = $31&255;
     $42 = (($$219) + 1|0);
     HEAP8[$$219] = $41;
     $43 = (($$418) + -1)|0;
     $$pre40 = HEAP32[$ws>>2]|0;
     $$3 = $42;$$5 = $43;$44 = $$pre40;
    }
    $45 = (($44) + 4|0);
    HEAP32[$ws>>2] = $45;
    $46 = ($$5|0)==(0);
    if ($46) {
     $$414 = 0;
     break L26;
    } else {
     $$219 = $$3;$$418 = $$5;$30 = $45;
    }
   }
   if ((label|0) == 20) {
    $37 = (($n) - ($$418))|0;
    $$0 = $37;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 24) {
    HEAP8[$$219] = 0;
    $$414 = $$418;
    break;
   }
   else if ((label|0) == 26) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$ws>>2] = 0;
 $47 = (($n) - ($$414))|0;
 $$0 = $47;
 STACKTOP = sp;return ($$0|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $$0$phi = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $1 = HEAP32[$$0>>2]|0;
  $2 = ($1|0)==(0);
  $3 = (($$0) + 4|0);
  if ($2) {
   break;
  } else {
   $$0$phi = $3;$$0 = $$0$phi;
  }
 }
 $4 = $$0;
 $5 = $s;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 STACKTOP = sp;return ($7|0);
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$014 = 0, $$014$phi = 0, $$023 = 0, $$023$phi = 0, $$05 = 0, $$05$phi = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($n|0)==(0);
 if ($1) {
  STACKTOP = sp;return ($d|0);
 } else {
  $$014 = $n;$$023 = $s;$$05 = $d;
 }
 while(1) {
  $2 = (($$014) + -1)|0;
  $3 = (($$023) + 4|0);
  $4 = HEAP32[$$023>>2]|0;
  $5 = (($$05) + 4|0);
  HEAP32[$$05>>2] = $4;
  $6 = ($2|0)==(0);
  if ($6) {
   break;
  } else {
   $$05$phi = $5;$$023$phi = $3;$$014$phi = $2;$$05 = $$05$phi;$$023 = $$023$phi;$$014 = $$014$phi;
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$025 = 0, $$025$phi = 0, $$07 = 0, $$07$phi = 0, $$16 = 0, $$16$phi = 0, $$in = 0, $$in$phi = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $d;
 $2 = $s;
 $3 = (($1) - ($2))|0;
 $4 = $3 >> 2;
 $5 = ($4>>>0)<($n>>>0);
 $6 = ($n|0)==(0);
 do {
  if ($5) {
   if ($6) {
    break;
   } else {
    $$in = $n;
   }
   while(1) {
    $7 = (($$in) + -1)|0;
    $8 = (($s) + ($7<<2)|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (($d) + ($7<<2)|0);
    HEAP32[$10>>2] = $9;
    $11 = ($7|0)==(0);
    if ($11) {
     break;
    } else {
     $$in$phi = $7;$$in = $$in$phi;
    }
   }
  } else {
   if ($6) {
    break;
   } else {
    $$025 = $s;$$07 = $d;$$16 = $n;
   }
   while(1) {
    $12 = (($$16) + -1)|0;
    $13 = (($$025) + 4|0);
    $14 = HEAP32[$$025>>2]|0;
    $15 = (($$07) + 4|0);
    HEAP32[$$07>>2] = $14;
    $16 = ($12|0)==(0);
    if ($16) {
     break;
    } else {
     $$16$phi = $12;$$07$phi = $15;$$025$phi = $13;$$16 = $$16$phi;$$07 = $$07$phi;$$025 = $$025$phi;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($d|0);
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $$012 = 0, $$012$phi = 0, $$03 = 0, $$03$phi = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($n|0)==(0);
 if (!($1)) {
  $$012 = $n;$$03 = $d;
  while(1) {
   $2 = (($$012) + -1)|0;
   $3 = (($$03) + 4|0);
   HEAP32[$$03>>2] = $c;
   $4 = ($2|0)==(0);
   if ($4) {
    break;
   } else {
    $$03$phi = $3;$$012$phi = $2;$$03 = $$03$phi;$$012 = $$012$phi;
   }
  }
 }
 STACKTOP = sp;return ($d|0);
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt8bad_castC2Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 HEAP32[$1>>2] = ((((17016) + 8|0)));
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 __ZNSt9exceptionD2Ev(($1|0));
 $2 = $this;
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 __ZNSt9exceptionD2Ev(($1|0));
 STACKTOP = sp;return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ((17040)|0);
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $this;
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 56|0;
 $info = sp;
 $1 = ($this);
 $2 = ($thrown_type);
 $3 = ($1|0)==($2|0);
 if ($3) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $4 = ($thrown_type|0)==(0|0);
 if ($4) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $5 = $thrown_type;
 $6 = (___dynamic_cast($5,(17152),(17208),0)|0);
 $7 = $6;
 $8 = ($6|0)==(0|0);
 if ($8) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $9 = $info;
 dest=$9+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));;
 $10 = ($info);
 HEAP32[$10>>2] = $7;
 $11 = (($info) + 8|0);
 HEAP32[$11>>2] = $this;
 $12 = (($info) + 12|0);
 HEAP32[$12>>2] = -1;
 $13 = (($info) + 48|0);
 HEAP32[$13>>2] = 1;
 $14 = $6;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = HEAP32[$adjustedPtr>>2]|0;
 FUNCTION_TABLE_viiii[$17 & 31]($7,$info,$18,1);
 $19 = (($info) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(1);
 if (!($21)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $22 = (($info) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP32[$adjustedPtr>>2] = $23;
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($info) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($this|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($info) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  HEAP32[$4>>2] = $adjustedPtr;
  $7 = (($info) + 24|0);
  HEAP32[$7>>2] = $path_below;
  $8 = (($info) + 36|0);
  HEAP32[$8>>2] = 1;
  STACKTOP = sp;return;
 }
 $9 = ($5|0)==($adjustedPtr|0);
 if (!($9)) {
  $13 = (($info) + 36|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[$13>>2] = $15;
  $16 = (($info) + 24|0);
  HEAP32[$16>>2] = 2;
  $17 = (($info) + 54|0);
  HEAP8[$17] = 1;
  STACKTOP = sp;return;
 }
 $10 = (($info) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(2);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 HEAP32[$10>>2] = $path_below;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 $2 = (($info) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3);
 $5 = ($1|0)==($4|0);
 if (!($5)) {
  $20 = (($this) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 28|0);
  $25 = HEAP32[$24>>2]|0;
  FUNCTION_TABLE_viiii[$25 & 31]($21,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
 $6 = (($info) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  HEAP32[$6>>2] = $adjustedPtr;
  $9 = (($info) + 24|0);
  HEAP32[$9>>2] = $path_below;
  $10 = (($info) + 36|0);
  HEAP32[$10>>2] = 1;
  STACKTOP = sp;return;
 }
 $11 = ($7|0)==($adjustedPtr|0);
 if (!($11)) {
  $15 = (($info) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 1)|0;
  HEAP32[$15>>2] = $17;
  $18 = (($info) + 24|0);
  HEAP32[$18>>2] = 2;
  $19 = (($info) + 54|0);
  HEAP8[$19] = 1;
  STACKTOP = sp;return;
 }
 $12 = (($info) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(2);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 HEAP32[$12>>2] = $path_below;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i1 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 $2 = (($info) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3);
 $5 = ($1|0)==($4|0);
 if ($5) {
  $6 = (($info) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   HEAP32[$6>>2] = $adjustedPtr;
   $9 = (($info) + 24|0);
   HEAP32[$9>>2] = $path_below;
   $10 = (($info) + 36|0);
   HEAP32[$10>>2] = 1;
   STACKTOP = sp;return;
  }
  $11 = ($7|0)==($adjustedPtr|0);
  if (!($11)) {
   $15 = (($info) + 36|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + 1)|0;
   HEAP32[$15>>2] = $17;
   $18 = (($info) + 24|0);
   HEAP32[$18>>2] = 2;
   $19 = (($info) + 54|0);
   HEAP8[$19] = 1;
   STACKTOP = sp;return;
  }
  $12 = (($info) + 24|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(2);
  if (!($14)) {
   STACKTOP = sp;return;
  }
  HEAP32[$12>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $20 = (($this) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($this) + ($21<<3)|0) + 16|0);
 $23 = (($this) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 >> 8;
 $26 = $24 & 1;
 $27 = ($26|0)==(0);
 if ($27) {
  $offset_to_base$0$i1 = $25;
 } else {
  $28 = $adjustedPtr;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($25)|0);
  $31 = $30;
  $32 = HEAP32[$31>>2]|0;
  $offset_to_base$0$i1 = $32;
 }
 $33 = (($this) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + 28|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($adjustedPtr) + ($offset_to_base$0$i1)|0);
 $40 = $24 & 2;
 $41 = ($40|0)!=(0);
 $42 = $41 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$38 & 31]($34,$info,$39,$42);
 $43 = ($21|0)>(1);
 if (!($43)) {
  STACKTOP = sp;return;
 }
 $44 = (($this) + 24|0);
 $45 = (($info) + 54|0);
 $46 = $adjustedPtr;
 $p$0 = $44;
 while(1) {
  $47 = (($p$0) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $48 >> 8;
  $50 = $48 & 1;
  $51 = ($50|0)==(0);
  if ($51) {
   $offset_to_base$0$i = $49;
  } else {
   $52 = HEAP32[$46>>2]|0;
   $53 = (($52) + ($49)|0);
   $54 = $53;
   $55 = HEAP32[$54>>2]|0;
   $offset_to_base$0$i = $55;
  }
  $56 = ($p$0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + 28|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($adjustedPtr) + ($offset_to_base$0$i)|0);
  $63 = $48 & 2;
  $64 = ($63|0)!=(0);
  $65 = $64 ? $path_below : 2;
  FUNCTION_TABLE_viiii[$61 & 31]($57,$info,$62,$65);
  $66 = HEAP8[$45]|0;
  $67 = ($66<<24>>24)==(0);
  if (!($67)) {
   label = 16;
   break;
  }
  $68 = (($p$0) + 8|0);
  $69 = ($68>>>0)<($22>>>0);
  if ($69) {
   $p$0 = $68;
  } else {
   label = 16;
   break;
  }
 }
 if ((label|0) == 16) {
  STACKTOP = sp;return;
 }
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 56|0;
 $info = sp;
 $1 = $static_ptr;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = (($static_ptr) + ($5)|0);
 $7 = (($2) + -4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8;
 $10 = $info;
 $11 = ($info);
 HEAP32[$11>>2] = $dst_type;
 $12 = (($info) + 4|0);
 HEAP32[$12>>2] = $static_ptr;
 $13 = (($info) + 8|0);
 HEAP32[$13>>2] = $static_type;
 $14 = (($info) + 12|0);
 HEAP32[$14>>2] = $src2dst_offset;
 $15 = (($info) + 16|0);
 $16 = (($info) + 20|0);
 $17 = (($info) + 24|0);
 $18 = (($info) + 28|0);
 $19 = (($info) + 32|0);
 $20 = (($info) + 40|0);
 $21 = $8;
 $22 = ($dst_type);
 $23 = ($21|0)==($22|0);
 $24 = $15;
 dest=$24+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));;HEAP16[$24+36>>1]=0|0;HEAP8[$24+38|0]=0|0;
 if ($23) {
  $25 = (($info) + 48|0);
  HEAP32[$25>>2] = 1;
  $26 = $8;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 20|0);
  $29 = HEAP32[$28>>2]|0;
  FUNCTION_TABLE_viiiiii[$29 & 31]($9,$info,$6,$6,1,0);
  $30 = HEAP32[$17>>2]|0;
  $31 = ($30|0)==(1);
  $$ = $31 ? $6 : 0;
  $dst_ptr$0 = $$;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 $32 = (($info) + 36|0);
 $33 = $8;
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + 24|0);
 $36 = HEAP32[$35>>2]|0;
 FUNCTION_TABLE_viiiii[$36 & 7]($9,$info,$6,1,0);
 $37 = HEAP32[$32>>2]|0;
 if ((($37|0) == 1)) {
  $45 = HEAP32[$17>>2]|0;
  $46 = ($45|0)==(1);
  do {
   if (!($46)) {
    $47 = HEAP32[$20>>2]|0;
    $48 = ($47|0)==(0);
    if (!($48)) {
     $dst_ptr$0 = 0;
     STACKTOP = sp;return ($dst_ptr$0|0);
    }
    $49 = HEAP32[$18>>2]|0;
    $50 = ($49|0)==(1);
    if (!($50)) {
     $dst_ptr$0 = 0;
     STACKTOP = sp;return ($dst_ptr$0|0);
    }
    $51 = HEAP32[$19>>2]|0;
    $52 = ($51|0)==(1);
    if ($52) {
     break;
    } else {
     $dst_ptr$0 = 0;
    }
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
  } while(0);
  $53 = HEAP32[$15>>2]|0;
  $dst_ptr$0 = $53;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else if ((($37|0) == 0)) {
  $38 = HEAP32[$20>>2]|0;
  $39 = ($38|0)==(1);
  if (!($39)) {
   $dst_ptr$0 = 0;
   STACKTOP = sp;return ($dst_ptr$0|0);
  }
  $40 = HEAP32[$18>>2]|0;
  $41 = ($40|0)==(1);
  if (!($41)) {
   $dst_ptr$0 = 0;
   STACKTOP = sp;return ($dst_ptr$0|0);
  }
  $42 = HEAP32[$19>>2]|0;
  $43 = ($42|0)==(1);
  $44 = HEAP32[$16>>2]|0;
  $$1 = $43 ? $44 : 0;
  $dst_ptr$0 = $$1;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else {
  $dst_ptr$0 = 0;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 return 0|0;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0;
 var $does_dst_type_point_to_our_static_type$0$off019 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off021 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $is_dst_type_derived_from_static_type$2$off030 = 0, $is_dst_type_derived_from_static_type$2$off031 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i11 = 0, $offset_to_base$0$i13 = 0, $offset_to_base$0$i14 = 0, $offset_to_base$0$i9 = 0, $p$020 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 $2 = (($info) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3);
 $5 = ($1|0)==($4|0);
 if ($5) {
  $6 = (($info) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==($current_ptr|0);
  if (!($8)) {
   STACKTOP = sp;return;
  }
  $9 = (($info) + 28|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(1);
  if ($11) {
   STACKTOP = sp;return;
  }
  HEAP32[$9>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $12 = ($info);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13);
 $15 = ($1|0)==($14|0);
 if ($15) {
  $16 = (($info) + 16|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==($current_ptr|0);
  do {
   if (!($18)) {
    $19 = (($info) + 20|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($current_ptr|0);
    if ($21) {
     break;
    }
    $24 = (($info) + 32|0);
    HEAP32[$24>>2] = $path_below;
    $25 = (($info) + 44|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)==(4);
    if ($27) {
     STACKTOP = sp;return;
    }
    $28 = (($this) + 12|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ((($this) + ($29<<3)|0) + 16|0);
    $31 = ($29|0)>(0);
    L19: do {
     if ($31) {
      $32 = (($this) + 16|0);
      $33 = (($info) + 52|0);
      $34 = (($info) + 53|0);
      $35 = (($info) + 54|0);
      $36 = (($this) + 8|0);
      $37 = (($info) + 24|0);
      $38 = $current_ptr;
      $does_dst_type_point_to_our_static_type$0$off019 = 0;$is_dst_type_derived_from_static_type$0$off021 = 0;$p$020 = $32;
      L21: while(1) {
       HEAP8[$33] = 0;
       HEAP8[$34] = 0;
       $39 = (($p$020) + 4|0);
       $40 = HEAP32[$39>>2]|0;
       $41 = $40 >> 8;
       $42 = $40 & 1;
       $43 = ($42|0)==(0);
       if ($43) {
        $offset_to_base$0$i13 = $41;
       } else {
        $44 = HEAP32[$38>>2]|0;
        $45 = (($44) + ($41)|0);
        $46 = $45;
        $47 = HEAP32[$46>>2]|0;
        $offset_to_base$0$i13 = $47;
       }
       $48 = ($p$020);
       $49 = HEAP32[$48>>2]|0;
       $50 = $49;
       $51 = HEAP32[$50>>2]|0;
       $52 = (($51) + 20|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = (($current_ptr) + ($offset_to_base$0$i13)|0);
       $55 = $40 >>> 1;
       $56 = $55 & 1;
       $57 = (2 - ($56))|0;
       FUNCTION_TABLE_viiiiii[$53 & 31]($49,$info,$current_ptr,$54,$57,$use_strcmp);
       $58 = HEAP8[$35]|0;
       $59 = ($58<<24>>24)==(0);
       if (!($59)) {
        $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off021;
        break;
       }
       $60 = HEAP8[$34]|0;
       $61 = ($60<<24>>24)==(0);
       do {
        if ($61) {
         $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off021;
        } else {
         $62 = HEAP8[$33]|0;
         $63 = ($62<<24>>24)==(0);
         if ($63) {
          $69 = HEAP32[$36>>2]|0;
          $70 = $69 & 1;
          $71 = ($70|0)==(0);
          if ($71) {
           $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$2$off0 = 1;
           break L21;
          } else {
           $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off019;$is_dst_type_derived_from_static_type$1$off0 = 1;
           break;
          }
         }
         $64 = HEAP32[$37>>2]|0;
         $65 = ($64|0)==(1);
         if ($65) {
          label = 27;
          break L19;
         }
         $66 = HEAP32[$36>>2]|0;
         $67 = $66 & 2;
         $68 = ($67|0)==(0);
         if ($68) {
          label = 27;
          break L19;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
         }
        }
       } while(0);
       $72 = (($p$020) + 8|0);
       $73 = ($72>>>0)<($30>>>0);
       if ($73) {
        $does_dst_type_point_to_our_static_type$0$off019 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off021 = $is_dst_type_derived_from_static_type$1$off0;$p$020 = $72;
       } else {
        $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
        break;
       }
      }
      if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
       $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off0;
       label = 26;
      } else {
       $is_dst_type_derived_from_static_type$2$off030 = $is_dst_type_derived_from_static_type$2$off0;
       label = 23;
      }
     } else {
      $is_dst_type_derived_from_static_type$2$off030 = 0;
      label = 23;
     }
    } while(0);
    do {
     if ((label|0) == 23) {
      HEAP32[$19>>2] = $current_ptr;
      $74 = (($info) + 40|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = (($75) + 1)|0;
      HEAP32[$74>>2] = $76;
      $77 = (($info) + 36|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ($78|0)==(1);
      if (!($79)) {
       $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off030;
       label = 26;
       break;
      }
      $80 = (($info) + 24|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = ($81|0)==(2);
      if (!($82)) {
       $is_dst_type_derived_from_static_type$2$off031 = $is_dst_type_derived_from_static_type$2$off030;
       label = 26;
       break;
      }
      $83 = (($info) + 54|0);
      HEAP8[$83] = 1;
      if ($is_dst_type_derived_from_static_type$2$off030) {
       label = 27;
      } else {
       label = 28;
      }
     }
    } while(0);
    if ((label|0) == 26) {
     if ($is_dst_type_derived_from_static_type$2$off031) {
      label = 27;
     } else {
      label = 28;
     }
    }
    if ((label|0) == 27) {
     HEAP32[$25>>2] = 3;
     STACKTOP = sp;return;
    }
    else if ((label|0) == 28) {
     HEAP32[$25>>2] = 4;
     STACKTOP = sp;return;
    }
   }
  } while(0);
  $22 = ($path_below|0)==(1);
  if (!($22)) {
   STACKTOP = sp;return;
  }
  $23 = (($info) + 32|0);
  HEAP32[$23>>2] = 1;
  STACKTOP = sp;return;
 }
 $84 = (($this) + 12|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ((($this) + ($85<<3)|0) + 16|0);
 $87 = (($this) + 20|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = $88 >> 8;
 $90 = $88 & 1;
 $91 = ($90|0)==(0);
 if ($91) {
  $offset_to_base$0$i14 = $89;
 } else {
  $92 = $current_ptr;
  $93 = HEAP32[$92>>2]|0;
  $94 = (($93) + ($89)|0);
  $95 = $94;
  $96 = HEAP32[$95>>2]|0;
  $offset_to_base$0$i14 = $96;
 }
 $97 = (($this) + 16|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $98;
 $100 = HEAP32[$99>>2]|0;
 $101 = (($100) + 24|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (($current_ptr) + ($offset_to_base$0$i14)|0);
 $104 = $88 & 2;
 $105 = ($104|0)!=(0);
 $106 = $105 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$102 & 7]($98,$info,$103,$106,$use_strcmp);
 $107 = (($this) + 24|0);
 $108 = ($85|0)>(1);
 if (!($108)) {
  STACKTOP = sp;return;
 }
 $109 = (($this) + 8|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 & 2;
 $112 = ($111|0)==(0);
 do {
  if ($112) {
   $113 = (($info) + 36|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = ($114|0)==(1);
   if ($115) {
    break;
   }
   $141 = $110 & 1;
   $142 = ($141|0)==(0);
   if ($142) {
    $146 = (($info) + 54|0);
    $147 = $current_ptr;
    $p2$2 = $107;
    while(1) {
     $175 = HEAP8[$146]|0;
     $176 = ($175<<24>>24)==(0);
     if (!($176)) {
      label = 53;
      break;
     }
     $177 = HEAP32[$113>>2]|0;
     $178 = ($177|0)==(1);
     if ($178) {
      label = 53;
      break;
     }
     $179 = (($p2$2) + 4|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = $180 >> 8;
     $182 = $180 & 1;
     $183 = ($182|0)==(0);
     if ($183) {
      $offset_to_base$0$i = $181;
     } else {
      $184 = HEAP32[$147>>2]|0;
      $185 = (($184) + ($181)|0);
      $186 = $185;
      $187 = HEAP32[$186>>2]|0;
      $offset_to_base$0$i = $187;
     }
     $188 = ($p2$2);
     $189 = HEAP32[$188>>2]|0;
     $190 = $189;
     $191 = HEAP32[$190>>2]|0;
     $192 = (($191) + 24|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (($current_ptr) + ($offset_to_base$0$i)|0);
     $195 = $180 & 2;
     $196 = ($195|0)!=(0);
     $197 = $196 ? $path_below : 2;
     FUNCTION_TABLE_viiiii[$193 & 7]($189,$info,$194,$197,$use_strcmp);
     $198 = (($p2$2) + 8|0);
     $199 = ($198>>>0)<($86>>>0);
     if ($199) {
      $p2$2 = $198;
     } else {
      label = 53;
      break;
     }
    }
    if ((label|0) == 53) {
     STACKTOP = sp;return;
    }
   }
   $143 = (($info) + 24|0);
   $144 = (($info) + 54|0);
   $145 = $current_ptr;
   $p2$1 = $107;
   while(1) {
    $148 = HEAP8[$144]|0;
    $149 = ($148<<24>>24)==(0);
    if (!($149)) {
     label = 53;
     break;
    }
    $150 = HEAP32[$113>>2]|0;
    $151 = ($150|0)==(1);
    if ($151) {
     $152 = HEAP32[$143>>2]|0;
     $153 = ($152|0)==(1);
     if ($153) {
      label = 53;
      break;
     }
    }
    $154 = (($p2$1) + 4|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = $155 >> 8;
    $157 = $155 & 1;
    $158 = ($157|0)==(0);
    if ($158) {
     $offset_to_base$0$i9 = $156;
    } else {
     $159 = HEAP32[$145>>2]|0;
     $160 = (($159) + ($156)|0);
     $161 = $160;
     $162 = HEAP32[$161>>2]|0;
     $offset_to_base$0$i9 = $162;
    }
    $163 = ($p2$1);
    $164 = HEAP32[$163>>2]|0;
    $165 = $164;
    $166 = HEAP32[$165>>2]|0;
    $167 = (($166) + 24|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = (($current_ptr) + ($offset_to_base$0$i9)|0);
    $170 = $155 & 2;
    $171 = ($170|0)!=(0);
    $172 = $171 ? $path_below : 2;
    FUNCTION_TABLE_viiiii[$168 & 7]($164,$info,$169,$172,$use_strcmp);
    $173 = (($p2$1) + 8|0);
    $174 = ($173>>>0)<($86>>>0);
    if ($174) {
     $p2$1 = $173;
    } else {
     label = 53;
     break;
    }
   }
   if ((label|0) == 53) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $116 = (($info) + 54|0);
 $117 = $current_ptr;
 $p2$0 = $107;
 while(1) {
  $118 = HEAP8[$116]|0;
  $119 = ($118<<24>>24)==(0);
  if (!($119)) {
   label = 53;
   break;
  }
  $120 = (($p2$0) + 4|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = $121 >> 8;
  $123 = $121 & 1;
  $124 = ($123|0)==(0);
  if ($124) {
   $offset_to_base$0$i11 = $122;
  } else {
   $125 = HEAP32[$117>>2]|0;
   $126 = (($125) + ($122)|0);
   $127 = $126;
   $128 = HEAP32[$127>>2]|0;
   $offset_to_base$0$i11 = $128;
  }
  $129 = ($p2$0);
  $130 = HEAP32[$129>>2]|0;
  $131 = $130;
  $132 = HEAP32[$131>>2]|0;
  $133 = (($132) + 24|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (($current_ptr) + ($offset_to_base$0$i11)|0);
  $136 = $121 & 2;
  $137 = ($136|0)!=(0);
  $138 = $137 ? $path_below : 2;
  FUNCTION_TABLE_viiiii[$134 & 7]($130,$info,$135,$138,$use_strcmp);
  $139 = (($p2$0) + 8|0);
  $140 = ($139>>>0)<($86>>>0);
  if ($140) {
   $p2$0 = $139;
  } else {
   label = 53;
   break;
  }
 }
 if ((label|0) == 53) {
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 $2 = (($info) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3);
 $5 = ($1|0)==($4|0);
 if ($5) {
  $6 = (($info) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==($current_ptr|0);
  if (!($8)) {
   STACKTOP = sp;return;
  }
  $9 = (($info) + 28|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(1);
  if ($11) {
   STACKTOP = sp;return;
  }
  HEAP32[$9>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $12 = ($info);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13);
 $15 = ($1|0)==($14|0);
 if (!($15)) {
  $49 = (($this) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $50;
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + 24|0);
  $54 = HEAP32[$53>>2]|0;
  FUNCTION_TABLE_viiiii[$54 & 7]($50,$info,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $16 = (($info) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==($current_ptr|0);
 do {
  if (!($18)) {
   $19 = (($info) + 20|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==($current_ptr|0);
   if ($21) {
    break;
   }
   $24 = (($info) + 32|0);
   HEAP32[$24>>2] = $path_below;
   $25 = (($info) + 44|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(4);
   if ($27) {
    STACKTOP = sp;return;
   }
   $28 = (($info) + 52|0);
   HEAP8[$28] = 0;
   $29 = (($info) + 53|0);
   HEAP8[$29] = 0;
   $30 = (($this) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $31;
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + 20|0);
   $35 = HEAP32[$34>>2]|0;
   FUNCTION_TABLE_viiiiii[$35 & 31]($31,$info,$current_ptr,$current_ptr,1,$use_strcmp);
   $36 = HEAP8[$29]|0;
   $37 = ($36<<24>>24)==(0);
   if ($37) {
    $is_dst_type_derived_from_static_type$0$off01 = 0;
    label = 13;
   } else {
    $38 = HEAP8[$28]|0;
    $not$ = ($38<<24>>24)==(0);
    if ($not$) {
     $is_dst_type_derived_from_static_type$0$off01 = 1;
     label = 13;
    }
   }
   L23: do {
    if ((label|0) == 13) {
     HEAP32[$19>>2] = $current_ptr;
     $39 = (($info) + 40|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = (($40) + 1)|0;
     HEAP32[$39>>2] = $41;
     $42 = (($info) + 36|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(1);
     do {
      if ($44) {
       $45 = (($info) + 24|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = ($46|0)==(2);
       if (!($47)) {
        label = 16;
        break;
       }
       $48 = (($info) + 54|0);
       HEAP8[$48] = 1;
       if ($is_dst_type_derived_from_static_type$0$off01) {
        break L23;
       }
      } else {
       label = 16;
      }
     } while(0);
     if ((label|0) == 16) {
      if ($is_dst_type_derived_from_static_type$0$off01) {
       break;
      }
     }
     HEAP32[$25>>2] = 4;
     STACKTOP = sp;return;
    }
   } while(0);
   HEAP32[$25>>2] = 3;
   STACKTOP = sp;return;
  }
 } while(0);
 $22 = ($path_below|0)==(1);
 if (!($22)) {
  STACKTOP = sp;return;
 }
 $23 = (($info) + 32|0);
 HEAP32[$23>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($info) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($this|0);
 if ($3) {
  $4 = (($info) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==($current_ptr|0);
  if (!($6)) {
   STACKTOP = sp;return;
  }
  $7 = (($info) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(1);
  if ($9) {
   STACKTOP = sp;return;
  }
  HEAP32[$7>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $10 = ($info);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==($this|0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = (($info) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==($current_ptr|0);
 do {
  if (!($15)) {
   $16 = (($info) + 20|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==($current_ptr|0);
   if ($18) {
    break;
   }
   $21 = (($info) + 32|0);
   HEAP32[$21>>2] = $path_below;
   HEAP32[$16>>2] = $current_ptr;
   $22 = (($info) + 40|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + 1)|0;
   HEAP32[$22>>2] = $24;
   $25 = (($info) + 36|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(1);
   do {
    if ($27) {
     $28 = (($info) + 24|0);
     $29 = HEAP32[$28>>2]|0;
     $30 = ($29|0)==(2);
     if (!($30)) {
      break;
     }
     $31 = (($info) + 54|0);
     HEAP8[$31] = 1;
    }
   } while(0);
   $32 = (($info) + 44|0);
   HEAP32[$32>>2] = 4;
   STACKTOP = sp;return;
  }
 } while(0);
 $19 = ($path_below|0)==(1);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $20 = (($info) + 32|0);
 HEAP32[$20>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $offset_to_base$0$i = 0, $offset_to_base$0$i1 = 0, $or$cond$i = 0, $or$cond1$i = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 $2 = (($info) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3);
 $5 = ($1|0)==($4|0);
 if (!($5)) {
  $35 = (($info) + 52|0);
  $36 = HEAP8[$35]|0;
  $37 = (($info) + 53|0);
  $38 = HEAP8[$37]|0;
  $39 = (($this) + 12|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ((($this) + ($40<<3)|0) + 16|0);
  HEAP8[$35] = 0;
  HEAP8[$37] = 0;
  $42 = (($this) + 20|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $43 >> 8;
  $45 = $43 & 1;
  $46 = ($45|0)==(0);
  if ($46) {
   $offset_to_base$0$i1 = $44;
  } else {
   $47 = $current_ptr;
   $48 = HEAP32[$47>>2]|0;
   $49 = (($48) + ($44)|0);
   $50 = $49;
   $51 = HEAP32[$50>>2]|0;
   $offset_to_base$0$i1 = $51;
  }
  $52 = (($this) + 16|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $53;
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + 20|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($current_ptr) + ($offset_to_base$0$i1)|0);
  $59 = $43 & 2;
  $60 = ($59|0)!=(0);
  $61 = $60 ? $path_below : 2;
  FUNCTION_TABLE_viiiiii[$57 & 31]($53,$info,$dst_ptr,$58,$61,$use_strcmp);
  $62 = ($40|0)>(1);
  L6: do {
   if ($62) {
    $63 = (($this) + 24|0);
    $64 = (($info) + 24|0);
    $65 = (($this) + 8|0);
    $66 = (($info) + 54|0);
    $67 = $current_ptr;
    $p$0 = $63;
    while(1) {
     $68 = HEAP8[$66]|0;
     $69 = ($68<<24>>24)==(0);
     if (!($69)) {
      break L6;
     }
     $70 = HEAP8[$35]|0;
     $71 = ($70<<24>>24)==(0);
     do {
      if ($71) {
       $77 = HEAP8[$37]|0;
       $78 = ($77<<24>>24)==(0);
       if ($78) {
        break;
       }
       $79 = HEAP32[$65>>2]|0;
       $80 = $79 & 1;
       $81 = ($80|0)==(0);
       if ($81) {
        break L6;
       }
      } else {
       $72 = HEAP32[$64>>2]|0;
       $73 = ($72|0)==(1);
       if ($73) {
        break L6;
       }
       $74 = HEAP32[$65>>2]|0;
       $75 = $74 & 2;
       $76 = ($75|0)==(0);
       if ($76) {
        break L6;
       }
      }
     } while(0);
     HEAP8[$35] = 0;
     HEAP8[$37] = 0;
     $82 = (($p$0) + 4|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = $83 >> 8;
     $85 = $83 & 1;
     $86 = ($85|0)==(0);
     if ($86) {
      $offset_to_base$0$i = $84;
     } else {
      $87 = HEAP32[$67>>2]|0;
      $88 = (($87) + ($84)|0);
      $89 = $88;
      $90 = HEAP32[$89>>2]|0;
      $offset_to_base$0$i = $90;
     }
     $91 = ($p$0);
     $92 = HEAP32[$91>>2]|0;
     $93 = $92;
     $94 = HEAP32[$93>>2]|0;
     $95 = (($94) + 20|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = (($current_ptr) + ($offset_to_base$0$i)|0);
     $98 = $83 & 2;
     $99 = ($98|0)!=(0);
     $100 = $99 ? $path_below : 2;
     FUNCTION_TABLE_viiiiii[$96 & 31]($92,$info,$dst_ptr,$97,$100,$use_strcmp);
     $101 = (($p$0) + 8|0);
     $102 = ($101>>>0)<($41>>>0);
     if ($102) {
      $p$0 = $101;
     } else {
      break;
     }
    }
   }
  } while(0);
  HEAP8[$35] = $36;
  HEAP8[$37] = $38;
  STACKTOP = sp;return;
 }
 $6 = (($info) + 53|0);
 HEAP8[$6] = 1;
 $7 = (($info) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==($current_ptr|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = (($info) + 52|0);
 HEAP8[$10] = 1;
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  HEAP32[$11>>2] = $dst_ptr;
  $14 = (($info) + 24|0);
  HEAP32[$14>>2] = $path_below;
  $15 = (($info) + 36|0);
  HEAP32[$15>>2] = 1;
  $16 = (($info) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(1);
  $19 = ($path_below|0)==(1);
  $or$cond$i = $18 & $19;
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $20 = (($info) + 54|0);
  HEAP8[$20] = 1;
  STACKTOP = sp;return;
 }
 $21 = ($12|0)==($dst_ptr|0);
 if (!($21)) {
  $31 = (($info) + 36|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[$31>>2] = $33;
  $34 = (($info) + 54|0);
  HEAP8[$34] = 1;
  STACKTOP = sp;return;
 }
 $22 = (($info) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(2);
 if ($24) {
  HEAP32[$22>>2] = $path_below;
  $25 = $path_below;
 } else {
  $25 = $23;
 }
 $26 = (($info) + 48|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(1);
 $29 = ($25|0)==(1);
 $or$cond1$i = $28 & $29;
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $30 = (($info) + 54|0);
 HEAP8[$30] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond$i = 0, $or$cond1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 $2 = (($info) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3);
 $5 = ($1|0)==($4|0);
 if (!($5)) {
  $35 = (($this) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $36;
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 20|0);
  $40 = HEAP32[$39>>2]|0;
  FUNCTION_TABLE_viiiiii[$40 & 31]($36,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $6 = (($info) + 53|0);
 HEAP8[$6] = 1;
 $7 = (($info) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==($current_ptr|0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = (($info) + 52|0);
 HEAP8[$10] = 1;
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  HEAP32[$11>>2] = $dst_ptr;
  $14 = (($info) + 24|0);
  HEAP32[$14>>2] = $path_below;
  $15 = (($info) + 36|0);
  HEAP32[$15>>2] = 1;
  $16 = (($info) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(1);
  $19 = ($path_below|0)==(1);
  $or$cond$i = $18 & $19;
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $20 = (($info) + 54|0);
  HEAP8[$20] = 1;
  STACKTOP = sp;return;
 }
 $21 = ($12|0)==($dst_ptr|0);
 if (!($21)) {
  $31 = (($info) + 36|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 1)|0;
  HEAP32[$31>>2] = $33;
  $34 = (($info) + 54|0);
  HEAP8[$34] = 1;
  STACKTOP = sp;return;
 }
 $22 = (($info) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(2);
 if ($24) {
  HEAP32[$22>>2] = $path_below;
  $25 = $path_below;
 } else {
  $25 = $23;
 }
 $26 = (($info) + 48|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(1);
 $29 = ($25|0)==(1);
 $or$cond1$i = $28 & $29;
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $30 = (($info) + 54|0);
 HEAP8[$30] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $or$cond1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($info) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($this|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($info) + 53|0);
 HEAP8[$4] = 1;
 $5 = (($info) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==($current_ptr|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = (($info) + 52|0);
 HEAP8[$8] = 1;
 $9 = (($info) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  HEAP32[$9>>2] = $dst_ptr;
  $12 = (($info) + 24|0);
  HEAP32[$12>>2] = $path_below;
  $13 = (($info) + 36|0);
  HEAP32[$13>>2] = 1;
  $14 = (($info) + 48|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(1);
  $17 = ($path_below|0)==(1);
  $or$cond$i = $16 & $17;
  if (!($or$cond$i)) {
   STACKTOP = sp;return;
  }
  $18 = (($info) + 54|0);
  HEAP8[$18] = 1;
  STACKTOP = sp;return;
 }
 $19 = ($10|0)==($dst_ptr|0);
 if (!($19)) {
  $29 = (($info) + 36|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 1)|0;
  HEAP32[$29>>2] = $31;
  $32 = (($info) + 54|0);
  HEAP8[$32] = 1;
  STACKTOP = sp;return;
 }
 $20 = (($info) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(2);
 if ($22) {
  HEAP32[$20>>2] = $path_below;
  $23 = $path_below;
 } else {
  $23 = $21;
 }
 $24 = (($info) + 48|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(1);
 $27 = ($23|0)==(1);
 $or$cond1$i = $26 & $27;
 if (!($or$cond1$i)) {
  STACKTOP = sp;return;
 }
 $28 = (($info) + 54|0);
 HEAP8[$28] = 1;
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$c$i$i = 0, $$c6$i$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0;
 var $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0;
 var $$sum108$i = 0, $$sum109$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0;
 var $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0;
 var $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0;
 var $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $1 = 0, $10 = 0, $100 = 0;
 var $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0;
 var $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0;
 var $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0;
 var $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0;
 var $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0;
 var $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0;
 var $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1114$phi = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0;
 var $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0;
 var $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0;
 var $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0;
 var $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0;
 var $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0;
 var $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0;
 var $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$phi = 0, $R$0$i$phi = 0, $R$0$i18 = 0, $R$0$i18$phi = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$phi = 0, $RP$0$i$phi = 0;
 var $RP$0$i17 = 0, $RP$0$i17$phi = 0, $T$0$c$i$i = 0, $T$0$c7$i$i = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0, $T$013$i$i$phi = 0, $T$024$i = 0, $T$024$i$phi = 0, $T$051$i$i = 0, $T$051$i$i$phi = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $i$02$i$i$phi = 0;
 var $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0;
 var $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rsize$329$i$phi = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$228$i = 0, $t$228$i$phi = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$330$i = 0, $v$330$i$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($bytes>>>0)<(245);
 do {
  if ($1) {
   $2 = ($bytes>>>0)<(11);
   if ($2) {
    $5 = 16;
   } else {
    $3 = (($bytes) + 11)|0;
    $4 = $3 & -8;
    $5 = $4;
   }
   $6 = $5 >>> 3;
   $7 = HEAP32[((17456))>>2]|0;
   $8 = $7 >>> $6;
   $9 = $8 & 3;
   $10 = ($9|0)==(0);
   if (!($10)) {
    $11 = $8 & 1;
    $12 = $11 ^ 1;
    $13 = (($12) + ($6))|0;
    $14 = $13 << 1;
    $15 = (((17456) + ($14<<2)|0) + 40|0);
    $16 = $15;
    $$sum10 = (($14) + 2)|0;
    $17 = (((17456) + ($$sum10<<2)|0) + 40|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($18) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $13;
      $23 = $22 ^ -1;
      $24 = $7 & $23;
      HEAP32[((17456))>>2] = $24;
     } else {
      $25 = $20;
      $26 = HEAP32[(((17456) + 16|0))>>2]|0;
      $27 = ($25>>>0)<($26>>>0);
      if ($27) {
       _abort();
       // unreachable;
      }
      $28 = (($20) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = ($29|0)==($18|0);
      if ($30) {
       HEAP32[$28>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $31 = $13 << 3;
    $32 = $31 | 3;
    $33 = (($18) + 4|0);
    HEAP32[$33>>2] = $32;
    $34 = $18;
    $$sum1112 = $31 | 4;
    $35 = (($34) + ($$sum1112)|0);
    $36 = $35;
    $37 = HEAP32[$36>>2]|0;
    $38 = $37 | 1;
    HEAP32[$36>>2] = $38;
    $39 = $19;
    $mem$0 = $39;
    STACKTOP = sp;return ($mem$0|0);
   }
   $40 = HEAP32[(((17456) + 8|0))>>2]|0;
   $41 = ($5>>>0)>($40>>>0);
   if (!($41)) {
    $nb$0 = $5;
    break;
   }
   $42 = ($8|0)==(0);
   if (!($42)) {
    $43 = $8 << $6;
    $44 = 2 << $6;
    $45 = (0 - ($44))|0;
    $46 = $44 | $45;
    $47 = $43 & $46;
    $48 = (0 - ($47))|0;
    $49 = $47 & $48;
    $50 = (($49) + -1)|0;
    $51 = $50 >>> 12;
    $52 = $51 & 16;
    $53 = $50 >>> $52;
    $54 = $53 >>> 5;
    $55 = $54 & 8;
    $56 = $55 | $52;
    $57 = $53 >>> $55;
    $58 = $57 >>> 2;
    $59 = $58 & 4;
    $60 = $56 | $59;
    $61 = $57 >>> $59;
    $62 = $61 >>> 1;
    $63 = $62 & 2;
    $64 = $60 | $63;
    $65 = $61 >>> $63;
    $66 = $65 >>> 1;
    $67 = $66 & 1;
    $68 = $64 | $67;
    $69 = $65 >>> $67;
    $70 = (($68) + ($69))|0;
    $71 = $70 << 1;
    $72 = (((17456) + ($71<<2)|0) + 40|0);
    $73 = $72;
    $$sum4 = (($71) + 2)|0;
    $74 = (((17456) + ($$sum4<<2)|0) + 40|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = (($75) + 8|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($73|0)==($77|0);
    do {
     if ($78) {
      $79 = 1 << $70;
      $80 = $79 ^ -1;
      $81 = $7 & $80;
      HEAP32[((17456))>>2] = $81;
     } else {
      $82 = $77;
      $83 = HEAP32[(((17456) + 16|0))>>2]|0;
      $84 = ($82>>>0)<($83>>>0);
      if ($84) {
       _abort();
       // unreachable;
      }
      $85 = (($77) + 12|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = ($86|0)==($75|0);
      if ($87) {
       HEAP32[$85>>2] = $73;
       HEAP32[$74>>2] = $77;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $88 = $70 << 3;
    $89 = (($88) - ($5))|0;
    $90 = $5 | 3;
    $91 = (($75) + 4|0);
    HEAP32[$91>>2] = $90;
    $92 = $75;
    $93 = (($92) + ($5)|0);
    $94 = $93;
    $95 = $89 | 1;
    $$sum56 = $5 | 4;
    $96 = (($92) + ($$sum56)|0);
    $97 = $96;
    HEAP32[$97>>2] = $95;
    $98 = (($92) + ($88)|0);
    $99 = $98;
    HEAP32[$99>>2] = $89;
    $100 = HEAP32[(((17456) + 8|0))>>2]|0;
    $101 = ($100|0)==(0);
    if (!($101)) {
     $102 = HEAP32[(((17456) + 20|0))>>2]|0;
     $103 = $100 >>> 3;
     $104 = $103 << 1;
     $105 = (((17456) + ($104<<2)|0) + 40|0);
     $106 = $105;
     $107 = HEAP32[((17456))>>2]|0;
     $108 = 1 << $103;
     $109 = $107 & $108;
     $110 = ($109|0)==(0);
     do {
      if ($110) {
       $111 = $107 | $108;
       HEAP32[((17456))>>2] = $111;
       $$sum8$pre = (($104) + 2)|0;
       $$pre = (((17456) + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F4$0 = $106;
      } else {
       $$sum9 = (($104) + 2)|0;
       $112 = (((17456) + ($$sum9<<2)|0) + 40|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = $113;
       $115 = HEAP32[(((17456) + 16|0))>>2]|0;
       $116 = ($114>>>0)<($115>>>0);
       if (!($116)) {
        $$pre$phiZ2D = $112;$F4$0 = $113;
        break;
       }
       _abort();
       // unreachable;
      }
     } while(0);
     HEAP32[$$pre$phiZ2D>>2] = $102;
     $117 = (($F4$0) + 12|0);
     HEAP32[$117>>2] = $102;
     $118 = (($102) + 8|0);
     HEAP32[$118>>2] = $F4$0;
     $119 = (($102) + 12|0);
     HEAP32[$119>>2] = $106;
    }
    HEAP32[(((17456) + 8|0))>>2] = $89;
    HEAP32[(((17456) + 20|0))>>2] = $94;
    $120 = $76;
    $mem$0 = $120;
    STACKTOP = sp;return ($mem$0|0);
   }
   $121 = HEAP32[(((17456) + 4|0))>>2]|0;
   $122 = ($121|0)==(0);
   if ($122) {
    $nb$0 = $5;
    break;
   }
   $123 = (0 - ($121))|0;
   $124 = $121 & $123;
   $125 = (($124) + -1)|0;
   $126 = $125 >>> 12;
   $127 = $126 & 16;
   $128 = $125 >>> $127;
   $129 = $128 >>> 5;
   $130 = $129 & 8;
   $131 = $130 | $127;
   $132 = $128 >>> $130;
   $133 = $132 >>> 2;
   $134 = $133 & 4;
   $135 = $131 | $134;
   $136 = $132 >>> $134;
   $137 = $136 >>> 1;
   $138 = $137 & 2;
   $139 = $135 | $138;
   $140 = $136 >>> $138;
   $141 = $140 >>> 1;
   $142 = $141 & 1;
   $143 = $139 | $142;
   $144 = $140 >>> $142;
   $145 = (($143) + ($144))|0;
   $146 = (((17456) + ($145<<2)|0) + 304|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = (($147) + 4|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = $149 & -8;
   $151 = (($150) - ($5))|0;
   $rsize$0$i = $151;$t$0$i = $147;$v$0$i = $147;
   while(1) {
    $152 = (($t$0$i) + 16|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = ($153|0)==(0|0);
    if ($154) {
     $155 = (($t$0$i) + 20|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==(0|0);
     if ($157) {
      break;
     } else {
      $158 = $156;
     }
    } else {
     $158 = $153;
    }
    $159 = (($158) + 4|0);
    $160 = HEAP32[$159>>2]|0;
    $161 = $160 & -8;
    $162 = (($161) - ($5))|0;
    $163 = ($162>>>0)<($rsize$0$i>>>0);
    $$rsize$0$i = $163 ? $162 : $rsize$0$i;
    $$v$0$i = $163 ? $158 : $v$0$i;
    $rsize$0$i = $$rsize$0$i;$t$0$i = $158;$v$0$i = $$v$0$i;
   }
   $164 = $v$0$i;
   $165 = HEAP32[(((17456) + 16|0))>>2]|0;
   $166 = ($164>>>0)<($165>>>0);
   if ($166) {
    _abort();
    // unreachable;
   }
   $167 = (($164) + ($5)|0);
   $168 = $167;
   $169 = ($164>>>0)<($167>>>0);
   if (!($169)) {
    _abort();
    // unreachable;
   }
   $170 = (($v$0$i) + 24|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = (($v$0$i) + 12|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = ($173|0)==($v$0$i|0);
   do {
    if ($174) {
     $185 = (($v$0$i) + 20|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($186|0)==(0|0);
     if ($187) {
      $188 = (($v$0$i) + 16|0);
      $189 = HEAP32[$188>>2]|0;
      $190 = ($189|0)==(0|0);
      if ($190) {
       $R$1$i = 0;
       break;
      } else {
       $R$0$i = $189;$RP$0$i = $188;
      }
     } else {
      $R$0$i = $186;$RP$0$i = $185;
     }
     while(1) {
      $191 = (($R$0$i) + 20|0);
      $192 = HEAP32[$191>>2]|0;
      $193 = ($192|0)==(0|0);
      if (!($193)) {
       $RP$0$i$phi = $191;$R$0$i$phi = $192;$RP$0$i = $RP$0$i$phi;$R$0$i = $R$0$i$phi;
       continue;
      }
      $194 = (($R$0$i) + 16|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)==(0|0);
      if ($196) {
       break;
      } else {
       $R$0$i = $195;$RP$0$i = $194;
      }
     }
     $197 = $RP$0$i;
     $198 = ($197>>>0)<($165>>>0);
     if ($198) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$i>>2] = 0;
      $R$1$i = $R$0$i;
      break;
     }
    } else {
     $175 = (($v$0$i) + 8|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = $176;
     $178 = ($177>>>0)<($165>>>0);
     if ($178) {
      _abort();
      // unreachable;
     }
     $179 = (($176) + 12|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = ($180|0)==($v$0$i|0);
     if (!($181)) {
      _abort();
      // unreachable;
     }
     $182 = (($173) + 8|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = ($183|0)==($v$0$i|0);
     if ($184) {
      HEAP32[$179>>2] = $173;
      HEAP32[$182>>2] = $176;
      $R$1$i = $173;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $199 = ($171|0)==(0|0);
   L78: do {
    if (!($199)) {
     $200 = (($v$0$i) + 28|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = (((17456) + ($201<<2)|0) + 304|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($v$0$i|0)==($203|0);
     do {
      if ($204) {
       HEAP32[$202>>2] = $R$1$i;
       $cond$i = ($R$1$i|0)==(0|0);
       if (!($cond$i)) {
        break;
       }
       $205 = 1 << $201;
       $206 = $205 ^ -1;
       $207 = HEAP32[(((17456) + 4|0))>>2]|0;
       $208 = $207 & $206;
       HEAP32[(((17456) + 4|0))>>2] = $208;
       break L78;
      } else {
       $209 = $171;
       $210 = HEAP32[(((17456) + 16|0))>>2]|0;
       $211 = ($209>>>0)<($210>>>0);
       if ($211) {
        _abort();
        // unreachable;
       }
       $212 = (($171) + 16|0);
       $213 = HEAP32[$212>>2]|0;
       $214 = ($213|0)==($v$0$i|0);
       if ($214) {
        HEAP32[$212>>2] = $R$1$i;
       } else {
        $215 = (($171) + 20|0);
        HEAP32[$215>>2] = $R$1$i;
       }
       $216 = ($R$1$i|0)==(0|0);
       if ($216) {
        break L78;
       }
      }
     } while(0);
     $217 = $R$1$i;
     $218 = HEAP32[(((17456) + 16|0))>>2]|0;
     $219 = ($217>>>0)<($218>>>0);
     if ($219) {
      _abort();
      // unreachable;
     }
     $220 = (($R$1$i) + 24|0);
     HEAP32[$220>>2] = $171;
     $221 = (($v$0$i) + 16|0);
     $222 = HEAP32[$221>>2]|0;
     $223 = ($222|0)==(0|0);
     do {
      if (!($223)) {
       $224 = $222;
       $225 = HEAP32[(((17456) + 16|0))>>2]|0;
       $226 = ($224>>>0)<($225>>>0);
       if ($226) {
        _abort();
        // unreachable;
       } else {
        $227 = (($R$1$i) + 16|0);
        HEAP32[$227>>2] = $222;
        $228 = (($222) + 24|0);
        HEAP32[$228>>2] = $R$1$i;
        break;
       }
      }
     } while(0);
     $229 = (($v$0$i) + 20|0);
     $230 = HEAP32[$229>>2]|0;
     $231 = ($230|0)==(0|0);
     if ($231) {
      break;
     }
     $232 = $230;
     $233 = HEAP32[(((17456) + 16|0))>>2]|0;
     $234 = ($232>>>0)<($233>>>0);
     if ($234) {
      _abort();
      // unreachable;
     } else {
      $235 = (($R$1$i) + 20|0);
      HEAP32[$235>>2] = $230;
      $236 = (($230) + 24|0);
      HEAP32[$236>>2] = $R$1$i;
      break;
     }
    }
   } while(0);
   $237 = ($rsize$0$i>>>0)<(16);
   if ($237) {
    $238 = (($rsize$0$i) + ($5))|0;
    $239 = $238 | 3;
    $240 = (($v$0$i) + 4|0);
    HEAP32[$240>>2] = $239;
    $$sum4$i = (($238) + 4)|0;
    $241 = (($164) + ($$sum4$i)|0);
    $242 = $241;
    $243 = HEAP32[$242>>2]|0;
    $244 = $243 | 1;
    HEAP32[$242>>2] = $244;
   } else {
    $245 = $5 | 3;
    $246 = (($v$0$i) + 4|0);
    HEAP32[$246>>2] = $245;
    $247 = $rsize$0$i | 1;
    $$sum$i35 = $5 | 4;
    $248 = (($164) + ($$sum$i35)|0);
    $249 = $248;
    HEAP32[$249>>2] = $247;
    $$sum1$i = (($rsize$0$i) + ($5))|0;
    $250 = (($164) + ($$sum1$i)|0);
    $251 = $250;
    HEAP32[$251>>2] = $rsize$0$i;
    $252 = HEAP32[(((17456) + 8|0))>>2]|0;
    $253 = ($252|0)==(0);
    if (!($253)) {
     $254 = HEAP32[(((17456) + 20|0))>>2]|0;
     $255 = $252 >>> 3;
     $256 = $255 << 1;
     $257 = (((17456) + ($256<<2)|0) + 40|0);
     $258 = $257;
     $259 = HEAP32[((17456))>>2]|0;
     $260 = 1 << $255;
     $261 = $259 & $260;
     $262 = ($261|0)==(0);
     do {
      if ($262) {
       $263 = $259 | $260;
       HEAP32[((17456))>>2] = $263;
       $$sum2$pre$i = (($256) + 2)|0;
       $$pre$i = (((17456) + ($$sum2$pre$i<<2)|0) + 40|0);
       $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $258;
      } else {
       $$sum3$i = (($256) + 2)|0;
       $264 = (((17456) + ($$sum3$i<<2)|0) + 40|0);
       $265 = HEAP32[$264>>2]|0;
       $266 = $265;
       $267 = HEAP32[(((17456) + 16|0))>>2]|0;
       $268 = ($266>>>0)<($267>>>0);
       if (!($268)) {
        $$pre$phi$iZ2D = $264;$F1$0$i = $265;
        break;
       }
       _abort();
       // unreachable;
      }
     } while(0);
     HEAP32[$$pre$phi$iZ2D>>2] = $254;
     $269 = (($F1$0$i) + 12|0);
     HEAP32[$269>>2] = $254;
     $270 = (($254) + 8|0);
     HEAP32[$270>>2] = $F1$0$i;
     $271 = (($254) + 12|0);
     HEAP32[$271>>2] = $258;
    }
    HEAP32[(((17456) + 8|0))>>2] = $rsize$0$i;
    HEAP32[(((17456) + 20|0))>>2] = $168;
   }
   $272 = (($v$0$i) + 8|0);
   $273 = $272;
   $mem$0 = $273;
   STACKTOP = sp;return ($mem$0|0);
  } else {
   $274 = ($bytes>>>0)>(4294967231);
   if ($274) {
    $nb$0 = -1;
    break;
   }
   $275 = (($bytes) + 11)|0;
   $276 = $275 & -8;
   $277 = HEAP32[(((17456) + 4|0))>>2]|0;
   $278 = ($277|0)==(0);
   if ($278) {
    $nb$0 = $276;
    break;
   }
   $279 = (0 - ($276))|0;
   $280 = $275 >>> 8;
   $281 = ($280|0)==(0);
   do {
    if ($281) {
     $idx$0$i = 0;
    } else {
     $282 = ($276>>>0)>(16777215);
     if ($282) {
      $idx$0$i = 31;
      break;
     }
     $283 = (($280) + 1048320)|0;
     $284 = $283 >>> 16;
     $285 = $284 & 8;
     $286 = $280 << $285;
     $287 = (($286) + 520192)|0;
     $288 = $287 >>> 16;
     $289 = $288 & 4;
     $290 = $289 | $285;
     $291 = $286 << $289;
     $292 = (($291) + 245760)|0;
     $293 = $292 >>> 16;
     $294 = $293 & 2;
     $295 = $290 | $294;
     $296 = (14 - ($295))|0;
     $297 = $291 << $294;
     $298 = $297 >>> 15;
     $299 = (($296) + ($298))|0;
     $300 = $299 << 1;
     $301 = (($299) + 7)|0;
     $302 = $276 >>> $301;
     $303 = $302 & 1;
     $304 = $303 | $300;
     $idx$0$i = $304;
    }
   } while(0);
   $305 = (((17456) + ($idx$0$i<<2)|0) + 304|0);
   $306 = HEAP32[$305>>2]|0;
   $307 = ($306|0)==(0|0);
   L126: do {
    if ($307) {
     $rsize$2$i = $279;$t$1$i = 0;$v$2$i = 0;
    } else {
     $308 = ($idx$0$i|0)==(31);
     if ($308) {
      $311 = 0;
     } else {
      $309 = $idx$0$i >>> 1;
      $310 = (25 - ($309))|0;
      $311 = $310;
     }
     $312 = $276 << $311;
     $rsize$0$i15 = $279;$rst$0$i = 0;$sizebits$0$i = $312;$t$0$i14 = $306;$v$0$i16 = 0;
     while(1) {
      $313 = (($t$0$i14) + 4|0);
      $314 = HEAP32[$313>>2]|0;
      $315 = $314 & -8;
      $316 = (($315) - ($276))|0;
      $317 = ($316>>>0)<($rsize$0$i15>>>0);
      if ($317) {
       $318 = ($315|0)==($276|0);
       if ($318) {
        $rsize$2$i = $316;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
        break L126;
       } else {
        $rsize$1$i = $316;$v$1$i = $t$0$i14;
       }
      } else {
       $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
      }
      $319 = (($t$0$i14) + 20|0);
      $320 = HEAP32[$319>>2]|0;
      $321 = $sizebits$0$i >>> 31;
      $322 = ((($t$0$i14) + ($321<<2)|0) + 16|0);
      $323 = HEAP32[$322>>2]|0;
      $324 = ($320|0)==(0|0);
      $325 = ($320|0)==($323|0);
      $or$cond$i = $324 | $325;
      $rst$1$i = $or$cond$i ? $rst$0$i : $320;
      $326 = ($323|0)==(0|0);
      $327 = $sizebits$0$i << 1;
      if ($326) {
       $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
       break;
      } else {
       $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $327;$t$0$i14 = $323;$v$0$i16 = $v$1$i;
      }
     }
    }
   } while(0);
   $328 = ($t$1$i|0)==(0|0);
   $329 = ($v$2$i|0)==(0|0);
   $or$cond19$i = $328 & $329;
   if ($or$cond19$i) {
    $330 = 2 << $idx$0$i;
    $331 = (0 - ($330))|0;
    $332 = $330 | $331;
    $333 = $277 & $332;
    $334 = ($333|0)==(0);
    if ($334) {
     $nb$0 = $276;
     break;
    }
    $335 = (0 - ($333))|0;
    $336 = $333 & $335;
    $337 = (($336) + -1)|0;
    $338 = $337 >>> 12;
    $339 = $338 & 16;
    $340 = $337 >>> $339;
    $341 = $340 >>> 5;
    $342 = $341 & 8;
    $343 = $342 | $339;
    $344 = $340 >>> $342;
    $345 = $344 >>> 2;
    $346 = $345 & 4;
    $347 = $343 | $346;
    $348 = $344 >>> $346;
    $349 = $348 >>> 1;
    $350 = $349 & 2;
    $351 = $347 | $350;
    $352 = $348 >>> $350;
    $353 = $352 >>> 1;
    $354 = $353 & 1;
    $355 = $351 | $354;
    $356 = $352 >>> $354;
    $357 = (($355) + ($356))|0;
    $358 = (((17456) + ($357<<2)|0) + 304|0);
    $359 = HEAP32[$358>>2]|0;
    $t$2$ph$i = $359;
   } else {
    $t$2$ph$i = $t$1$i;
   }
   $360 = ($t$2$ph$i|0)==(0|0);
   if ($360) {
    $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
   } else {
    $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
    while(1) {
     $361 = (($t$228$i) + 4|0);
     $362 = HEAP32[$361>>2]|0;
     $363 = $362 & -8;
     $364 = (($363) - ($276))|0;
     $365 = ($364>>>0)<($rsize$329$i>>>0);
     $$rsize$3$i = $365 ? $364 : $rsize$329$i;
     $t$2$v$3$i = $365 ? $t$228$i : $v$330$i;
     $366 = (($t$228$i) + 16|0);
     $367 = HEAP32[$366>>2]|0;
     $368 = ($367|0)==(0|0);
     if (!($368)) {
      $v$330$i$phi = $t$2$v$3$i;$t$228$i$phi = $367;$rsize$329$i$phi = $$rsize$3$i;$v$330$i = $v$330$i$phi;$t$228$i = $t$228$i$phi;$rsize$329$i = $rsize$329$i$phi;
      continue;
     }
     $369 = (($t$228$i) + 20|0);
     $370 = HEAP32[$369>>2]|0;
     $371 = ($370|0)==(0|0);
     if ($371) {
      $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
      break;
     } else {
      $v$330$i$phi = $t$2$v$3$i;$rsize$329$i$phi = $$rsize$3$i;$t$228$i = $370;$v$330$i = $v$330$i$phi;$rsize$329$i = $rsize$329$i$phi;
     }
    }
   }
   $372 = ($v$3$lcssa$i|0)==(0|0);
   if ($372) {
    $nb$0 = $276;
    break;
   }
   $373 = HEAP32[(((17456) + 8|0))>>2]|0;
   $374 = (($373) - ($276))|0;
   $375 = ($rsize$3$lcssa$i>>>0)<($374>>>0);
   if (!($375)) {
    $nb$0 = $276;
    break;
   }
   $376 = $v$3$lcssa$i;
   $377 = HEAP32[(((17456) + 16|0))>>2]|0;
   $378 = ($376>>>0)<($377>>>0);
   if ($378) {
    _abort();
    // unreachable;
   }
   $379 = (($376) + ($276)|0);
   $380 = $379;
   $381 = ($376>>>0)<($379>>>0);
   if (!($381)) {
    _abort();
    // unreachable;
   }
   $382 = (($v$3$lcssa$i) + 24|0);
   $383 = HEAP32[$382>>2]|0;
   $384 = (($v$3$lcssa$i) + 12|0);
   $385 = HEAP32[$384>>2]|0;
   $386 = ($385|0)==($v$3$lcssa$i|0);
   do {
    if ($386) {
     $397 = (($v$3$lcssa$i) + 20|0);
     $398 = HEAP32[$397>>2]|0;
     $399 = ($398|0)==(0|0);
     if ($399) {
      $400 = (($v$3$lcssa$i) + 16|0);
      $401 = HEAP32[$400>>2]|0;
      $402 = ($401|0)==(0|0);
      if ($402) {
       $R$1$i20 = 0;
       break;
      } else {
       $R$0$i18 = $401;$RP$0$i17 = $400;
      }
     } else {
      $R$0$i18 = $398;$RP$0$i17 = $397;
     }
     while(1) {
      $403 = (($R$0$i18) + 20|0);
      $404 = HEAP32[$403>>2]|0;
      $405 = ($404|0)==(0|0);
      if (!($405)) {
       $RP$0$i17$phi = $403;$R$0$i18$phi = $404;$RP$0$i17 = $RP$0$i17$phi;$R$0$i18 = $R$0$i18$phi;
       continue;
      }
      $406 = (($R$0$i18) + 16|0);
      $407 = HEAP32[$406>>2]|0;
      $408 = ($407|0)==(0|0);
      if ($408) {
       break;
      } else {
       $R$0$i18 = $407;$RP$0$i17 = $406;
      }
     }
     $409 = $RP$0$i17;
     $410 = ($409>>>0)<($377>>>0);
     if ($410) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$i17>>2] = 0;
      $R$1$i20 = $R$0$i18;
      break;
     }
    } else {
     $387 = (($v$3$lcssa$i) + 8|0);
     $388 = HEAP32[$387>>2]|0;
     $389 = $388;
     $390 = ($389>>>0)<($377>>>0);
     if ($390) {
      _abort();
      // unreachable;
     }
     $391 = (($388) + 12|0);
     $392 = HEAP32[$391>>2]|0;
     $393 = ($392|0)==($v$3$lcssa$i|0);
     if (!($393)) {
      _abort();
      // unreachable;
     }
     $394 = (($385) + 8|0);
     $395 = HEAP32[$394>>2]|0;
     $396 = ($395|0)==($v$3$lcssa$i|0);
     if ($396) {
      HEAP32[$391>>2] = $385;
      HEAP32[$394>>2] = $388;
      $R$1$i20 = $385;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $411 = ($383|0)==(0|0);
   L176: do {
    if (!($411)) {
     $412 = (($v$3$lcssa$i) + 28|0);
     $413 = HEAP32[$412>>2]|0;
     $414 = (((17456) + ($413<<2)|0) + 304|0);
     $415 = HEAP32[$414>>2]|0;
     $416 = ($v$3$lcssa$i|0)==($415|0);
     do {
      if ($416) {
       HEAP32[$414>>2] = $R$1$i20;
       $cond$i21 = ($R$1$i20|0)==(0|0);
       if (!($cond$i21)) {
        break;
       }
       $417 = 1 << $413;
       $418 = $417 ^ -1;
       $419 = HEAP32[(((17456) + 4|0))>>2]|0;
       $420 = $419 & $418;
       HEAP32[(((17456) + 4|0))>>2] = $420;
       break L176;
      } else {
       $421 = $383;
       $422 = HEAP32[(((17456) + 16|0))>>2]|0;
       $423 = ($421>>>0)<($422>>>0);
       if ($423) {
        _abort();
        // unreachable;
       }
       $424 = (($383) + 16|0);
       $425 = HEAP32[$424>>2]|0;
       $426 = ($425|0)==($v$3$lcssa$i|0);
       if ($426) {
        HEAP32[$424>>2] = $R$1$i20;
       } else {
        $427 = (($383) + 20|0);
        HEAP32[$427>>2] = $R$1$i20;
       }
       $428 = ($R$1$i20|0)==(0|0);
       if ($428) {
        break L176;
       }
      }
     } while(0);
     $429 = $R$1$i20;
     $430 = HEAP32[(((17456) + 16|0))>>2]|0;
     $431 = ($429>>>0)<($430>>>0);
     if ($431) {
      _abort();
      // unreachable;
     }
     $432 = (($R$1$i20) + 24|0);
     HEAP32[$432>>2] = $383;
     $433 = (($v$3$lcssa$i) + 16|0);
     $434 = HEAP32[$433>>2]|0;
     $435 = ($434|0)==(0|0);
     do {
      if (!($435)) {
       $436 = $434;
       $437 = HEAP32[(((17456) + 16|0))>>2]|0;
       $438 = ($436>>>0)<($437>>>0);
       if ($438) {
        _abort();
        // unreachable;
       } else {
        $439 = (($R$1$i20) + 16|0);
        HEAP32[$439>>2] = $434;
        $440 = (($434) + 24|0);
        HEAP32[$440>>2] = $R$1$i20;
        break;
       }
      }
     } while(0);
     $441 = (($v$3$lcssa$i) + 20|0);
     $442 = HEAP32[$441>>2]|0;
     $443 = ($442|0)==(0|0);
     if ($443) {
      break;
     }
     $444 = $442;
     $445 = HEAP32[(((17456) + 16|0))>>2]|0;
     $446 = ($444>>>0)<($445>>>0);
     if ($446) {
      _abort();
      // unreachable;
     } else {
      $447 = (($R$1$i20) + 20|0);
      HEAP32[$447>>2] = $442;
      $448 = (($442) + 24|0);
      HEAP32[$448>>2] = $R$1$i20;
      break;
     }
    }
   } while(0);
   $449 = ($rsize$3$lcssa$i>>>0)<(16);
   L204: do {
    if ($449) {
     $450 = (($rsize$3$lcssa$i) + ($276))|0;
     $451 = $450 | 3;
     $452 = (($v$3$lcssa$i) + 4|0);
     HEAP32[$452>>2] = $451;
     $$sum18$i = (($450) + 4)|0;
     $453 = (($376) + ($$sum18$i)|0);
     $454 = $453;
     $455 = HEAP32[$454>>2]|0;
     $456 = $455 | 1;
     HEAP32[$454>>2] = $456;
    } else {
     $457 = $276 | 3;
     $458 = (($v$3$lcssa$i) + 4|0);
     HEAP32[$458>>2] = $457;
     $459 = $rsize$3$lcssa$i | 1;
     $$sum$i2334 = $276 | 4;
     $460 = (($376) + ($$sum$i2334)|0);
     $461 = $460;
     HEAP32[$461>>2] = $459;
     $$sum1$i24 = (($rsize$3$lcssa$i) + ($276))|0;
     $462 = (($376) + ($$sum1$i24)|0);
     $463 = $462;
     HEAP32[$463>>2] = $rsize$3$lcssa$i;
     $464 = $rsize$3$lcssa$i >>> 3;
     $465 = ($rsize$3$lcssa$i>>>0)<(256);
     if ($465) {
      $466 = $464 << 1;
      $467 = (((17456) + ($466<<2)|0) + 40|0);
      $468 = $467;
      $469 = HEAP32[((17456))>>2]|0;
      $470 = 1 << $464;
      $471 = $469 & $470;
      $472 = ($471|0)==(0);
      do {
       if ($472) {
        $473 = $469 | $470;
        HEAP32[((17456))>>2] = $473;
        $$sum14$pre$i = (($466) + 2)|0;
        $$pre$i25 = (((17456) + ($$sum14$pre$i<<2)|0) + 40|0);
        $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $468;
       } else {
        $$sum17$i = (($466) + 2)|0;
        $474 = (((17456) + ($$sum17$i<<2)|0) + 40|0);
        $475 = HEAP32[$474>>2]|0;
        $476 = $475;
        $477 = HEAP32[(((17456) + 16|0))>>2]|0;
        $478 = ($476>>>0)<($477>>>0);
        if (!($478)) {
         $$pre$phi$i26Z2D = $474;$F5$0$i = $475;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i26Z2D>>2] = $380;
      $479 = (($F5$0$i) + 12|0);
      HEAP32[$479>>2] = $380;
      $$sum15$i = (($276) + 8)|0;
      $480 = (($376) + ($$sum15$i)|0);
      $481 = $480;
      HEAP32[$481>>2] = $F5$0$i;
      $$sum16$i = (($276) + 12)|0;
      $482 = (($376) + ($$sum16$i)|0);
      $483 = $482;
      HEAP32[$483>>2] = $468;
      break;
     }
     $484 = $379;
     $485 = $rsize$3$lcssa$i >>> 8;
     $486 = ($485|0)==(0);
     do {
      if ($486) {
       $I7$0$i = 0;
      } else {
       $487 = ($rsize$3$lcssa$i>>>0)>(16777215);
       if ($487) {
        $I7$0$i = 31;
        break;
       }
       $488 = (($485) + 1048320)|0;
       $489 = $488 >>> 16;
       $490 = $489 & 8;
       $491 = $485 << $490;
       $492 = (($491) + 520192)|0;
       $493 = $492 >>> 16;
       $494 = $493 & 4;
       $495 = $494 | $490;
       $496 = $491 << $494;
       $497 = (($496) + 245760)|0;
       $498 = $497 >>> 16;
       $499 = $498 & 2;
       $500 = $495 | $499;
       $501 = (14 - ($500))|0;
       $502 = $496 << $499;
       $503 = $502 >>> 15;
       $504 = (($501) + ($503))|0;
       $505 = $504 << 1;
       $506 = (($504) + 7)|0;
       $507 = $rsize$3$lcssa$i >>> $506;
       $508 = $507 & 1;
       $509 = $508 | $505;
       $I7$0$i = $509;
      }
     } while(0);
     $510 = (((17456) + ($I7$0$i<<2)|0) + 304|0);
     $$sum2$i = (($276) + 28)|0;
     $511 = (($376) + ($$sum2$i)|0);
     $512 = $511;
     HEAP32[$512>>2] = $I7$0$i;
     $$sum3$i27 = (($276) + 16)|0;
     $513 = (($376) + ($$sum3$i27)|0);
     $$sum4$i28 = (($276) + 20)|0;
     $514 = (($376) + ($$sum4$i28)|0);
     $515 = $514;
     HEAP32[$515>>2] = 0;
     $516 = $513;
     HEAP32[$516>>2] = 0;
     $517 = HEAP32[(((17456) + 4|0))>>2]|0;
     $518 = 1 << $I7$0$i;
     $519 = $517 & $518;
     $520 = ($519|0)==(0);
     if ($520) {
      $521 = $517 | $518;
      HEAP32[(((17456) + 4|0))>>2] = $521;
      HEAP32[$510>>2] = $484;
      $522 = $510;
      $$sum5$i = (($276) + 24)|0;
      $523 = (($376) + ($$sum5$i)|0);
      $524 = $523;
      HEAP32[$524>>2] = $522;
      $$sum6$i = (($276) + 12)|0;
      $525 = (($376) + ($$sum6$i)|0);
      $526 = $525;
      HEAP32[$526>>2] = $484;
      $$sum7$i = (($276) + 8)|0;
      $527 = (($376) + ($$sum7$i)|0);
      $528 = $527;
      HEAP32[$528>>2] = $484;
      break;
     }
     $529 = HEAP32[$510>>2]|0;
     $530 = ($I7$0$i|0)==(31);
     if ($530) {
      $533 = 0;
     } else {
      $531 = $I7$0$i >>> 1;
      $532 = (25 - ($531))|0;
      $533 = $532;
     }
     $534 = (($529) + 4|0);
     $535 = HEAP32[$534>>2]|0;
     $536 = $535 & -8;
     $537 = ($536|0)==($rsize$3$lcssa$i|0);
     L225: do {
      if ($537) {
       $T$0$lcssa$i = $529;
      } else {
       $538 = $rsize$3$lcssa$i << $533;
       $K12$025$i = $538;$T$024$i = $529;
       while(1) {
        $544 = $K12$025$i >>> 31;
        $545 = ((($T$024$i) + ($544<<2)|0) + 16|0);
        $546 = HEAP32[$545>>2]|0;
        $547 = ($546|0)==(0|0);
        if ($547) {
         break;
        }
        $539 = $K12$025$i << 1;
        $540 = (($546) + 4|0);
        $541 = HEAP32[$540>>2]|0;
        $542 = $541 & -8;
        $543 = ($542|0)==($rsize$3$lcssa$i|0);
        if ($543) {
         $T$0$lcssa$i = $546;
         break L225;
        } else {
         $T$024$i$phi = $546;$K12$025$i = $539;$T$024$i = $T$024$i$phi;
        }
       }
       $548 = $545;
       $549 = HEAP32[(((17456) + 16|0))>>2]|0;
       $550 = ($548>>>0)<($549>>>0);
       if ($550) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$545>>2] = $484;
        $$sum11$i = (($276) + 24)|0;
        $551 = (($376) + ($$sum11$i)|0);
        $552 = $551;
        HEAP32[$552>>2] = $T$024$i;
        $$sum12$i = (($276) + 12)|0;
        $553 = (($376) + ($$sum12$i)|0);
        $554 = $553;
        HEAP32[$554>>2] = $484;
        $$sum13$i = (($276) + 8)|0;
        $555 = (($376) + ($$sum13$i)|0);
        $556 = $555;
        HEAP32[$556>>2] = $484;
        break L204;
       }
      }
     } while(0);
     $557 = (($T$0$lcssa$i) + 8|0);
     $558 = HEAP32[$557>>2]|0;
     $559 = $T$0$lcssa$i;
     $560 = HEAP32[(((17456) + 16|0))>>2]|0;
     $561 = ($559>>>0)<($560>>>0);
     if ($561) {
      _abort();
      // unreachable;
     }
     $562 = $558;
     $563 = ($562>>>0)<($560>>>0);
     if ($563) {
      _abort();
      // unreachable;
     } else {
      $564 = (($558) + 12|0);
      HEAP32[$564>>2] = $484;
      HEAP32[$557>>2] = $484;
      $$sum8$i = (($276) + 8)|0;
      $565 = (($376) + ($$sum8$i)|0);
      $566 = $565;
      HEAP32[$566>>2] = $558;
      $$sum9$i = (($276) + 12)|0;
      $567 = (($376) + ($$sum9$i)|0);
      $568 = $567;
      HEAP32[$568>>2] = $T$0$lcssa$i;
      $$sum10$i = (($276) + 24)|0;
      $569 = (($376) + ($$sum10$i)|0);
      $570 = $569;
      HEAP32[$570>>2] = 0;
      break;
     }
    }
   } while(0);
   $571 = (($v$3$lcssa$i) + 8|0);
   $572 = $571;
   $mem$0 = $572;
   STACKTOP = sp;return ($mem$0|0);
  }
 } while(0);
 $573 = HEAP32[(((17456) + 8|0))>>2]|0;
 $574 = ($nb$0>>>0)>($573>>>0);
 if (!($574)) {
  $575 = (($573) - ($nb$0))|0;
  $576 = HEAP32[(((17456) + 20|0))>>2]|0;
  $577 = ($575>>>0)>(15);
  if ($577) {
   $578 = $576;
   $579 = (($578) + ($nb$0)|0);
   $580 = $579;
   HEAP32[(((17456) + 20|0))>>2] = $580;
   HEAP32[(((17456) + 8|0))>>2] = $575;
   $581 = $575 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $582 = (($578) + ($$sum2)|0);
   $583 = $582;
   HEAP32[$583>>2] = $581;
   $584 = (($578) + ($573)|0);
   $585 = $584;
   HEAP32[$585>>2] = $575;
   $586 = $nb$0 | 3;
   $587 = (($576) + 4|0);
   HEAP32[$587>>2] = $586;
  } else {
   HEAP32[(((17456) + 8|0))>>2] = 0;
   HEAP32[(((17456) + 20|0))>>2] = 0;
   $588 = $573 | 3;
   $589 = (($576) + 4|0);
   HEAP32[$589>>2] = $588;
   $590 = $576;
   $$sum1 = (($573) + 4)|0;
   $591 = (($590) + ($$sum1)|0);
   $592 = $591;
   $593 = HEAP32[$592>>2]|0;
   $594 = $593 | 1;
   HEAP32[$592>>2] = $594;
  }
  $595 = (($576) + 8|0);
  $596 = $595;
  $mem$0 = $596;
  STACKTOP = sp;return ($mem$0|0);
 }
 $597 = HEAP32[(((17456) + 12|0))>>2]|0;
 $598 = ($nb$0>>>0)<($597>>>0);
 if ($598) {
  $599 = (($597) - ($nb$0))|0;
  HEAP32[(((17456) + 12|0))>>2] = $599;
  $600 = HEAP32[(((17456) + 24|0))>>2]|0;
  $601 = $600;
  $602 = (($601) + ($nb$0)|0);
  $603 = $602;
  HEAP32[(((17456) + 24|0))>>2] = $603;
  $604 = $599 | 1;
  $$sum = (($nb$0) + 4)|0;
  $605 = (($601) + ($$sum)|0);
  $606 = $605;
  HEAP32[$606>>2] = $604;
  $607 = $nb$0 | 3;
  $608 = (($600) + 4|0);
  HEAP32[$608>>2] = $607;
  $609 = (($600) + 8|0);
  $610 = $609;
  $mem$0 = $610;
  STACKTOP = sp;return ($mem$0|0);
 }
 $611 = HEAP32[((17928))>>2]|0;
 $612 = ($611|0)==(0);
 do {
  if ($612) {
   $613 = (_sysconf(30)|0);
   $614 = (($613) + -1)|0;
   $615 = $614 & $613;
   $616 = ($615|0)==(0);
   if ($616) {
    HEAP32[(((17928) + 8|0))>>2] = $613;
    HEAP32[(((17928) + 4|0))>>2] = $613;
    HEAP32[(((17928) + 12|0))>>2] = -1;
    HEAP32[(((17928) + 16|0))>>2] = -1;
    HEAP32[(((17928) + 20|0))>>2] = 0;
    HEAP32[(((17456) + 444|0))>>2] = 0;
    $617 = (_time((0|0))|0);
    $618 = $617 & -16;
    $619 = $618 ^ 1431655768;
    HEAP32[((17928))>>2] = $619;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $620 = (($nb$0) + 48)|0;
 $621 = HEAP32[(((17928) + 8|0))>>2]|0;
 $622 = (($nb$0) + 47)|0;
 $623 = (($621) + ($622))|0;
 $624 = (0 - ($621))|0;
 $625 = $623 & $624;
 $626 = ($625>>>0)>($nb$0>>>0);
 if (!($626)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $627 = HEAP32[(((17456) + 440|0))>>2]|0;
 $628 = ($627|0)==(0);
 do {
  if (!($628)) {
   $629 = HEAP32[(((17456) + 432|0))>>2]|0;
   $630 = (($629) + ($625))|0;
   $631 = ($630>>>0)<=($629>>>0);
   $632 = ($630>>>0)>($627>>>0);
   $or$cond1$i = $631 | $632;
   if ($or$cond1$i) {
    $mem$0 = 0;
   } else {
    break;
   }
   STACKTOP = sp;return ($mem$0|0);
  }
 } while(0);
 $633 = HEAP32[(((17456) + 444|0))>>2]|0;
 $634 = $633 & 4;
 $635 = ($634|0)==(0);
 L269: do {
  if ($635) {
   $636 = HEAP32[(((17456) + 24|0))>>2]|0;
   $637 = ($636|0)==(0|0);
   L271: do {
    if ($637) {
     label = 182;
    } else {
     $638 = $636;
     $sp$0$i$i = (((17456) + 448|0));
     while(1) {
      $639 = ($sp$0$i$i);
      $640 = HEAP32[$639>>2]|0;
      $641 = ($640>>>0)>($638>>>0);
      if (!($641)) {
       $642 = (($sp$0$i$i) + 4|0);
       $643 = HEAP32[$642>>2]|0;
       $644 = (($640) + ($643)|0);
       $645 = ($644>>>0)>($638>>>0);
       if ($645) {
        break;
       }
      }
      $646 = (($sp$0$i$i) + 8|0);
      $647 = HEAP32[$646>>2]|0;
      $648 = ($647|0)==(0|0);
      if ($648) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $647;
      }
     }
     $649 = ($sp$0$i$i|0)==(0|0);
     if ($649) {
      label = 182;
      break;
     }
     $672 = HEAP32[(((17456) + 12|0))>>2]|0;
     $673 = (($623) - ($672))|0;
     $674 = $673 & $624;
     $675 = ($674>>>0)<(2147483647);
     if (!($675)) {
      $tsize$0323841$i = 0;
      break;
     }
     $676 = (_sbrk(($674|0))|0);
     $677 = HEAP32[$639>>2]|0;
     $678 = HEAP32[$642>>2]|0;
     $679 = (($677) + ($678)|0);
     $680 = ($676|0)==($679|0);
     $$3$i = $680 ? $674 : 0;
     $$4$i = $680 ? $676 : (-1);
     $br$0$i = $676;$ssize$1$i = $674;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
     label = 191;
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $650 = (_sbrk(0)|0);
     $651 = ($650|0)==((-1)|0);
     if ($651) {
      $tsize$0323841$i = 0;
      break;
     }
     $652 = $650;
     $653 = HEAP32[(((17928) + 4|0))>>2]|0;
     $654 = (($653) + -1)|0;
     $655 = $654 & $652;
     $656 = ($655|0)==(0);
     if ($656) {
      $ssize$0$i = $625;
     } else {
      $657 = (($654) + ($652))|0;
      $658 = (0 - ($653))|0;
      $659 = $657 & $658;
      $660 = (($625) - ($652))|0;
      $661 = (($660) + ($659))|0;
      $ssize$0$i = $661;
     }
     $662 = HEAP32[(((17456) + 432|0))>>2]|0;
     $663 = (($662) + ($ssize$0$i))|0;
     $664 = ($ssize$0$i>>>0)>($nb$0>>>0);
     $665 = ($ssize$0$i>>>0)<(2147483647);
     $or$cond$i29 = $664 & $665;
     if (!($or$cond$i29)) {
      $tsize$0323841$i = 0;
      break;
     }
     $666 = HEAP32[(((17456) + 440|0))>>2]|0;
     $667 = ($666|0)==(0);
     if (!($667)) {
      $668 = ($663>>>0)<=($662>>>0);
      $669 = ($663>>>0)>($666>>>0);
      $or$cond2$i = $668 | $669;
      if ($or$cond2$i) {
       $tsize$0323841$i = 0;
       break;
      }
     }
     $670 = (_sbrk(($ssize$0$i|0))|0);
     $671 = ($670|0)==($650|0);
     $ssize$0$$i = $671 ? $ssize$0$i : 0;
     $$$i = $671 ? $650 : (-1);
     $br$0$i = $670;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
     label = 191;
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $681 = (0 - ($ssize$1$i))|0;
     $682 = ($tbase$0$i|0)==((-1)|0);
     if (!($682)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $683 = ($br$0$i|0)!=((-1)|0);
     $684 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $683 & $684;
     $685 = ($ssize$1$i>>>0)<($620>>>0);
     $or$cond6$i = $or$cond5$i & $685;
     do {
      if ($or$cond6$i) {
       $686 = HEAP32[(((17928) + 8|0))>>2]|0;
       $687 = (($622) - ($ssize$1$i))|0;
       $688 = (($687) + ($686))|0;
       $689 = (0 - ($686))|0;
       $690 = $688 & $689;
       $691 = ($690>>>0)<(2147483647);
       if (!($691)) {
        $ssize$2$i = $ssize$1$i;
        break;
       }
       $692 = (_sbrk(($690|0))|0);
       $693 = ($692|0)==((-1)|0);
       if ($693) {
        (_sbrk(($681|0))|0);
        $tsize$0323841$i = $tsize$0$i;
        break L291;
       } else {
        $694 = (($690) + ($ssize$1$i))|0;
        $ssize$2$i = $694;
        break;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $695 = ($br$0$i|0)==((-1)|0);
     if ($695) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $696 = HEAP32[(((17456) + 444|0))>>2]|0;
   $697 = $696 | 4;
   HEAP32[(((17456) + 444|0))>>2] = $697;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 do {
  if ((label|0) == 199) {
   $698 = ($625>>>0)<(2147483647);
   if (!($698)) {
    break;
   }
   $699 = (_sbrk(($625|0))|0);
   $700 = (_sbrk(0)|0);
   $notlhs$i = ($699|0)!=((-1)|0);
   $notrhs$i = ($700|0)!=((-1)|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $701 = ($699>>>0)<($700>>>0);
   $or$cond9$i = $or$cond8$not$i & $701;
   if (!($or$cond9$i)) {
    break;
   }
   $702 = $700;
   $703 = $699;
   $704 = (($702) - ($703))|0;
   $705 = (($nb$0) + 40)|0;
   $706 = ($704>>>0)>($705>>>0);
   $$tsize$1$i = $706 ? $704 : $tsize$1$i;
   if ($706) {
    $tbase$247$i = $699;$tsize$246$i = $$tsize$1$i;
    label = 202;
   }
  }
 } while(0);
 do {
  if ((label|0) == 202) {
   $707 = HEAP32[(((17456) + 432|0))>>2]|0;
   $708 = (($707) + ($tsize$246$i))|0;
   HEAP32[(((17456) + 432|0))>>2] = $708;
   $709 = HEAP32[(((17456) + 436|0))>>2]|0;
   $710 = ($708>>>0)>($709>>>0);
   if ($710) {
    HEAP32[(((17456) + 436|0))>>2] = $708;
   }
   $711 = HEAP32[(((17456) + 24|0))>>2]|0;
   $712 = ($711|0)==(0|0);
   L311: do {
    if ($712) {
     $713 = HEAP32[(((17456) + 16|0))>>2]|0;
     $714 = ($713|0)==(0|0);
     $715 = ($tbase$247$i>>>0)<($713>>>0);
     $or$cond10$i = $714 | $715;
     if ($or$cond10$i) {
      HEAP32[(((17456) + 16|0))>>2] = $tbase$247$i;
     }
     HEAP32[(((17456) + 448|0))>>2] = $tbase$247$i;
     HEAP32[(((17456) + 452|0))>>2] = $tsize$246$i;
     HEAP32[(((17456) + 460|0))>>2] = 0;
     $716 = HEAP32[((17928))>>2]|0;
     HEAP32[(((17456) + 36|0))>>2] = $716;
     HEAP32[(((17456) + 32|0))>>2] = -1;
     $i$02$i$i = 0;
     while(1) {
      $717 = $i$02$i$i << 1;
      $718 = (((17456) + ($717<<2)|0) + 40|0);
      $719 = $718;
      $$sum$i$i = (($717) + 3)|0;
      $720 = (((17456) + ($$sum$i$i<<2)|0) + 40|0);
      HEAP32[$720>>2] = $719;
      $$sum1$i$i = (($717) + 2)|0;
      $721 = (((17456) + ($$sum1$i$i<<2)|0) + 40|0);
      HEAP32[$721>>2] = $719;
      $722 = (($i$02$i$i) + 1)|0;
      $exitcond$i$i = ($722|0)==(32);
      if ($exitcond$i$i) {
       break;
      } else {
       $i$02$i$i$phi = $722;$i$02$i$i = $i$02$i$i$phi;
      }
     }
     $723 = (($tsize$246$i) + -40)|0;
     $724 = (($tbase$247$i) + 8|0);
     $725 = $724;
     $726 = $725 & 7;
     $727 = ($726|0)==(0);
     if ($727) {
      $730 = 0;
     } else {
      $728 = (0 - ($725))|0;
      $729 = $728 & 7;
      $730 = $729;
     }
     $731 = (($tbase$247$i) + ($730)|0);
     $732 = $731;
     $733 = (($723) - ($730))|0;
     HEAP32[(((17456) + 24|0))>>2] = $732;
     HEAP32[(((17456) + 12|0))>>2] = $733;
     $734 = $733 | 1;
     $$sum$i14$i = (($730) + 4)|0;
     $735 = (($tbase$247$i) + ($$sum$i14$i)|0);
     $736 = $735;
     HEAP32[$736>>2] = $734;
     $$sum2$i$i = (($tsize$246$i) + -36)|0;
     $737 = (($tbase$247$i) + ($$sum2$i$i)|0);
     $738 = $737;
     HEAP32[$738>>2] = 40;
     $739 = HEAP32[(((17928) + 16|0))>>2]|0;
     HEAP32[(((17456) + 28|0))>>2] = $739;
    } else {
     $sp$075$i = (((17456) + 448|0));
     while(1) {
      $740 = ($sp$075$i);
      $741 = HEAP32[$740>>2]|0;
      $742 = (($sp$075$i) + 4|0);
      $743 = HEAP32[$742>>2]|0;
      $744 = (($741) + ($743)|0);
      $745 = ($tbase$247$i|0)==($744|0);
      if ($745) {
       label = 214;
       break;
      }
      $746 = (($sp$075$i) + 8|0);
      $747 = HEAP32[$746>>2]|0;
      $748 = ($747|0)==(0|0);
      if ($748) {
       break;
      } else {
       $sp$075$i = $747;
      }
     }
     do {
      if ((label|0) == 214) {
       $749 = (($sp$075$i) + 12|0);
       $750 = HEAP32[$749>>2]|0;
       $751 = $750 & 8;
       $752 = ($751|0)==(0);
       if (!($752)) {
        break;
       }
       $753 = $711;
       $754 = ($753>>>0)>=($741>>>0);
       $755 = ($753>>>0)<($tbase$247$i>>>0);
       $or$cond49$i = $754 & $755;
       if (!($or$cond49$i)) {
        break;
       }
       $756 = (($743) + ($tsize$246$i))|0;
       HEAP32[$742>>2] = $756;
       $757 = HEAP32[(((17456) + 12|0))>>2]|0;
       $758 = (($757) + ($tsize$246$i))|0;
       $759 = (($711) + 8|0);
       $760 = $759;
       $761 = $760 & 7;
       $762 = ($761|0)==(0);
       if ($762) {
        $765 = 0;
       } else {
        $763 = (0 - ($760))|0;
        $764 = $763 & 7;
        $765 = $764;
       }
       $766 = (($753) + ($765)|0);
       $767 = $766;
       $768 = (($758) - ($765))|0;
       HEAP32[(((17456) + 24|0))>>2] = $767;
       HEAP32[(((17456) + 12|0))>>2] = $768;
       $769 = $768 | 1;
       $$sum$i18$i = (($765) + 4)|0;
       $770 = (($753) + ($$sum$i18$i)|0);
       $771 = $770;
       HEAP32[$771>>2] = $769;
       $$sum2$i19$i = (($758) + 4)|0;
       $772 = (($753) + ($$sum2$i19$i)|0);
       $773 = $772;
       HEAP32[$773>>2] = 40;
       $774 = HEAP32[(((17928) + 16|0))>>2]|0;
       HEAP32[(((17456) + 28|0))>>2] = $774;
       break L311;
      }
     } while(0);
     $775 = HEAP32[(((17456) + 16|0))>>2]|0;
     $776 = ($tbase$247$i>>>0)<($775>>>0);
     if ($776) {
      HEAP32[(((17456) + 16|0))>>2] = $tbase$247$i;
     }
     $777 = (($tbase$247$i) + ($tsize$246$i)|0);
     $sp$168$i = (((17456) + 448|0));
     while(1) {
      $778 = ($sp$168$i);
      $779 = HEAP32[$778>>2]|0;
      $780 = ($779|0)==($777|0);
      if ($780) {
       label = 224;
       break;
      }
      $781 = (($sp$168$i) + 8|0);
      $782 = HEAP32[$781>>2]|0;
      $783 = ($782|0)==(0|0);
      if ($783) {
       break;
      } else {
       $sp$168$i = $782;
      }
     }
     do {
      if ((label|0) == 224) {
       $784 = (($sp$168$i) + 12|0);
       $785 = HEAP32[$784>>2]|0;
       $786 = $785 & 8;
       $787 = ($786|0)==(0);
       if (!($787)) {
        break;
       }
       HEAP32[$778>>2] = $tbase$247$i;
       $788 = (($sp$168$i) + 4|0);
       $789 = HEAP32[$788>>2]|0;
       $790 = (($789) + ($tsize$246$i))|0;
       HEAP32[$788>>2] = $790;
       $791 = (($tbase$247$i) + 8|0);
       $792 = $791;
       $793 = $792 & 7;
       $794 = ($793|0)==(0);
       if ($794) {
        $797 = 0;
       } else {
        $795 = (0 - ($792))|0;
        $796 = $795 & 7;
        $797 = $796;
       }
       $798 = (($tbase$247$i) + ($797)|0);
       $$sum107$i = (($tsize$246$i) + 8)|0;
       $799 = (($tbase$247$i) + ($$sum107$i)|0);
       $800 = $799;
       $801 = $800 & 7;
       $802 = ($801|0)==(0);
       if ($802) {
        $805 = 0;
       } else {
        $803 = (0 - ($800))|0;
        $804 = $803 & 7;
        $805 = $804;
       }
       $$sum108$i = (($805) + ($tsize$246$i))|0;
       $806 = (($tbase$247$i) + ($$sum108$i)|0);
       $807 = $806;
       $808 = $806;
       $809 = $798;
       $810 = (($808) - ($809))|0;
       $$sum$i21$i = (($797) + ($nb$0))|0;
       $811 = (($tbase$247$i) + ($$sum$i21$i)|0);
       $812 = $811;
       $813 = (($810) - ($nb$0))|0;
       $814 = $nb$0 | 3;
       $$sum1$i22$i = (($797) + 4)|0;
       $815 = (($tbase$247$i) + ($$sum1$i22$i)|0);
       $816 = $815;
       HEAP32[$816>>2] = $814;
       $817 = HEAP32[(((17456) + 24|0))>>2]|0;
       $818 = ($807|0)==($817|0);
       L348: do {
        if ($818) {
         $819 = HEAP32[(((17456) + 12|0))>>2]|0;
         $820 = (($819) + ($813))|0;
         HEAP32[(((17456) + 12|0))>>2] = $820;
         HEAP32[(((17456) + 24|0))>>2] = $812;
         $821 = $820 | 1;
         $$sum42$i$i = (($$sum$i21$i) + 4)|0;
         $822 = (($tbase$247$i) + ($$sum42$i$i)|0);
         $823 = $822;
         HEAP32[$823>>2] = $821;
        } else {
         $824 = HEAP32[(((17456) + 20|0))>>2]|0;
         $825 = ($807|0)==($824|0);
         if ($825) {
          $826 = HEAP32[(((17456) + 8|0))>>2]|0;
          $827 = (($826) + ($813))|0;
          HEAP32[(((17456) + 8|0))>>2] = $827;
          HEAP32[(((17456) + 20|0))>>2] = $812;
          $828 = $827 | 1;
          $$sum40$i$i = (($$sum$i21$i) + 4)|0;
          $829 = (($tbase$247$i) + ($$sum40$i$i)|0);
          $830 = $829;
          HEAP32[$830>>2] = $828;
          $$sum41$i$i = (($827) + ($$sum$i21$i))|0;
          $831 = (($tbase$247$i) + ($$sum41$i$i)|0);
          $832 = $831;
          HEAP32[$832>>2] = $827;
          break;
         }
         $$sum2$i23$i = (($tsize$246$i) + 4)|0;
         $$sum109$i = (($$sum2$i23$i) + ($805))|0;
         $833 = (($tbase$247$i) + ($$sum109$i)|0);
         $834 = $833;
         $835 = HEAP32[$834>>2]|0;
         $836 = $835 & 3;
         $837 = ($836|0)==(1);
         if ($837) {
          $838 = $835 & -8;
          $839 = $835 >>> 3;
          $840 = ($835>>>0)<(256);
          L356: do {
           if ($840) {
            $$sum3738$i$i = $805 | 8;
            $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
            $841 = (($tbase$247$i) + ($$sum119$i)|0);
            $842 = $841;
            $843 = HEAP32[$842>>2]|0;
            $$sum39$i$i = (($tsize$246$i) + 12)|0;
            $$sum120$i = (($$sum39$i$i) + ($805))|0;
            $844 = (($tbase$247$i) + ($$sum120$i)|0);
            $845 = $844;
            $846 = HEAP32[$845>>2]|0;
            $847 = $839 << 1;
            $848 = (((17456) + ($847<<2)|0) + 40|0);
            $849 = $848;
            $850 = ($843|0)==($849|0);
            do {
             if (!($850)) {
              $851 = $843;
              $852 = HEAP32[(((17456) + 16|0))>>2]|0;
              $853 = ($851>>>0)<($852>>>0);
              if ($853) {
               _abort();
               // unreachable;
              }
              $854 = (($843) + 12|0);
              $855 = HEAP32[$854>>2]|0;
              $856 = ($855|0)==($807|0);
              if ($856) {
               break;
              }
              _abort();
              // unreachable;
             }
            } while(0);
            $857 = ($846|0)==($843|0);
            if ($857) {
             $858 = 1 << $839;
             $859 = $858 ^ -1;
             $860 = HEAP32[((17456))>>2]|0;
             $861 = $860 & $859;
             HEAP32[((17456))>>2] = $861;
             break;
            }
            $862 = ($846|0)==($849|0);
            do {
             if ($862) {
              $$pre57$i$i = (($846) + 8|0);
              $$pre$phi58$i$iZ2D = $$pre57$i$i;
             } else {
              $863 = $846;
              $864 = HEAP32[(((17456) + 16|0))>>2]|0;
              $865 = ($863>>>0)<($864>>>0);
              if ($865) {
               _abort();
               // unreachable;
              }
              $866 = (($846) + 8|0);
              $867 = HEAP32[$866>>2]|0;
              $868 = ($867|0)==($807|0);
              if ($868) {
               $$pre$phi58$i$iZ2D = $866;
               break;
              }
              _abort();
              // unreachable;
             }
            } while(0);
            $869 = (($843) + 12|0);
            HEAP32[$869>>2] = $846;
            HEAP32[$$pre$phi58$i$iZ2D>>2] = $843;
           } else {
            $870 = $806;
            $$sum34$i$i = $805 | 24;
            $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
            $871 = (($tbase$247$i) + ($$sum110$i)|0);
            $872 = $871;
            $873 = HEAP32[$872>>2]|0;
            $$sum5$i$i = (($tsize$246$i) + 12)|0;
            $$sum111$i = (($$sum5$i$i) + ($805))|0;
            $874 = (($tbase$247$i) + ($$sum111$i)|0);
            $875 = $874;
            $876 = HEAP32[$875>>2]|0;
            $877 = ($876|0)==($870|0);
            do {
             if ($877) {
              $$sum67$i$i = $805 | 16;
              $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
              $890 = (($tbase$247$i) + ($$sum117$i)|0);
              $891 = $890;
              $892 = HEAP32[$891>>2]|0;
              $893 = ($892|0)==(0|0);
              if ($893) {
               $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
               $894 = (($tbase$247$i) + ($$sum118$i)|0);
               $895 = $894;
               $896 = HEAP32[$895>>2]|0;
               $897 = ($896|0)==(0|0);
               if ($897) {
                $R$1$i$i = 0;
                break;
               } else {
                $R$0$i$i = $896;$RP$0$i$i = $895;
               }
              } else {
               $R$0$i$i = $892;$RP$0$i$i = $891;
              }
              while(1) {
               $898 = (($R$0$i$i) + 20|0);
               $899 = HEAP32[$898>>2]|0;
               $900 = ($899|0)==(0|0);
               if (!($900)) {
                $RP$0$i$i$phi = $898;$R$0$i$i$phi = $899;$RP$0$i$i = $RP$0$i$i$phi;$R$0$i$i = $R$0$i$i$phi;
                continue;
               }
               $901 = (($R$0$i$i) + 16|0);
               $902 = HEAP32[$901>>2]|0;
               $903 = ($902|0)==(0|0);
               if ($903) {
                break;
               } else {
                $R$0$i$i = $902;$RP$0$i$i = $901;
               }
              }
              $904 = $RP$0$i$i;
              $905 = HEAP32[(((17456) + 16|0))>>2]|0;
              $906 = ($904>>>0)<($905>>>0);
              if ($906) {
               _abort();
               // unreachable;
              } else {
               HEAP32[$RP$0$i$i>>2] = 0;
               $R$1$i$i = $R$0$i$i;
               break;
              }
             } else {
              $$sum3536$i$i = $805 | 8;
              $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
              $878 = (($tbase$247$i) + ($$sum112$i)|0);
              $879 = $878;
              $880 = HEAP32[$879>>2]|0;
              $881 = $880;
              $882 = HEAP32[(((17456) + 16|0))>>2]|0;
              $883 = ($881>>>0)<($882>>>0);
              if ($883) {
               _abort();
               // unreachable;
              }
              $884 = (($880) + 12|0);
              $885 = HEAP32[$884>>2]|0;
              $886 = ($885|0)==($870|0);
              if (!($886)) {
               _abort();
               // unreachable;
              }
              $887 = (($876) + 8|0);
              $888 = HEAP32[$887>>2]|0;
              $889 = ($888|0)==($870|0);
              if ($889) {
               HEAP32[$884>>2] = $876;
               HEAP32[$887>>2] = $880;
               $R$1$i$i = $876;
               break;
              } else {
               _abort();
               // unreachable;
              }
             }
            } while(0);
            $907 = ($873|0)==(0|0);
            if ($907) {
             break;
            }
            $$sum30$i$i = (($tsize$246$i) + 28)|0;
            $$sum113$i = (($$sum30$i$i) + ($805))|0;
            $908 = (($tbase$247$i) + ($$sum113$i)|0);
            $909 = $908;
            $910 = HEAP32[$909>>2]|0;
            $911 = (((17456) + ($910<<2)|0) + 304|0);
            $912 = HEAP32[$911>>2]|0;
            $913 = ($870|0)==($912|0);
            do {
             if ($913) {
              HEAP32[$911>>2] = $R$1$i$i;
              $cond$i$i = ($R$1$i$i|0)==(0|0);
              if (!($cond$i$i)) {
               break;
              }
              $914 = 1 << $910;
              $915 = $914 ^ -1;
              $916 = HEAP32[(((17456) + 4|0))>>2]|0;
              $917 = $916 & $915;
              HEAP32[(((17456) + 4|0))>>2] = $917;
              break L356;
             } else {
              $918 = $873;
              $919 = HEAP32[(((17456) + 16|0))>>2]|0;
              $920 = ($918>>>0)<($919>>>0);
              if ($920) {
               _abort();
               // unreachable;
              }
              $921 = (($873) + 16|0);
              $922 = HEAP32[$921>>2]|0;
              $923 = ($922|0)==($870|0);
              if ($923) {
               HEAP32[$921>>2] = $R$1$i$i;
              } else {
               $924 = (($873) + 20|0);
               HEAP32[$924>>2] = $R$1$i$i;
              }
              $925 = ($R$1$i$i|0)==(0|0);
              if ($925) {
               break L356;
              }
             }
            } while(0);
            $926 = $R$1$i$i;
            $927 = HEAP32[(((17456) + 16|0))>>2]|0;
            $928 = ($926>>>0)<($927>>>0);
            if ($928) {
             _abort();
             // unreachable;
            }
            $929 = (($R$1$i$i) + 24|0);
            HEAP32[$929>>2] = $873;
            $$sum3132$i$i = $805 | 16;
            $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
            $930 = (($tbase$247$i) + ($$sum114$i)|0);
            $931 = $930;
            $932 = HEAP32[$931>>2]|0;
            $933 = ($932|0)==(0|0);
            do {
             if (!($933)) {
              $934 = $932;
              $935 = HEAP32[(((17456) + 16|0))>>2]|0;
              $936 = ($934>>>0)<($935>>>0);
              if ($936) {
               _abort();
               // unreachable;
              } else {
               $937 = (($R$1$i$i) + 16|0);
               HEAP32[$937>>2] = $932;
               $938 = (($932) + 24|0);
               HEAP32[$938>>2] = $R$1$i$i;
               break;
              }
             }
            } while(0);
            $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
            $939 = (($tbase$247$i) + ($$sum115$i)|0);
            $940 = $939;
            $941 = HEAP32[$940>>2]|0;
            $942 = ($941|0)==(0|0);
            if ($942) {
             break;
            }
            $943 = $941;
            $944 = HEAP32[(((17456) + 16|0))>>2]|0;
            $945 = ($943>>>0)<($944>>>0);
            if ($945) {
             _abort();
             // unreachable;
            } else {
             $946 = (($R$1$i$i) + 20|0);
             HEAP32[$946>>2] = $941;
             $947 = (($941) + 24|0);
             HEAP32[$947>>2] = $R$1$i$i;
             break;
            }
           }
          } while(0);
          $$sum9$i$i = $838 | $805;
          $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
          $948 = (($tbase$247$i) + ($$sum116$i)|0);
          $949 = $948;
          $950 = (($838) + ($813))|0;
          $oldfirst$0$i$i = $949;$qsize$0$i$i = $950;
         } else {
          $oldfirst$0$i$i = $807;$qsize$0$i$i = $813;
         }
         $951 = (($oldfirst$0$i$i) + 4|0);
         $952 = HEAP32[$951>>2]|0;
         $953 = $952 & -2;
         HEAP32[$951>>2] = $953;
         $954 = $qsize$0$i$i | 1;
         $$sum10$i$i = (($$sum$i21$i) + 4)|0;
         $955 = (($tbase$247$i) + ($$sum10$i$i)|0);
         $956 = $955;
         HEAP32[$956>>2] = $954;
         $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
         $957 = (($tbase$247$i) + ($$sum11$i24$i)|0);
         $958 = $957;
         HEAP32[$958>>2] = $qsize$0$i$i;
         $959 = $qsize$0$i$i >>> 3;
         $960 = ($qsize$0$i$i>>>0)<(256);
         if ($960) {
          $961 = $959 << 1;
          $962 = (((17456) + ($961<<2)|0) + 40|0);
          $963 = $962;
          $964 = HEAP32[((17456))>>2]|0;
          $965 = 1 << $959;
          $966 = $964 & $965;
          $967 = ($966|0)==(0);
          do {
           if ($967) {
            $968 = $964 | $965;
            HEAP32[((17456))>>2] = $968;
            $$sum26$pre$i$i = (($961) + 2)|0;
            $$pre$i25$i = (((17456) + ($$sum26$pre$i$i<<2)|0) + 40|0);
            $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $963;
           } else {
            $$sum29$i$i = (($961) + 2)|0;
            $969 = (((17456) + ($$sum29$i$i<<2)|0) + 40|0);
            $970 = HEAP32[$969>>2]|0;
            $971 = $970;
            $972 = HEAP32[(((17456) + 16|0))>>2]|0;
            $973 = ($971>>>0)<($972>>>0);
            if (!($973)) {
             $$pre$phi$i26$iZ2D = $969;$F4$0$i$i = $970;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26$iZ2D>>2] = $812;
          $974 = (($F4$0$i$i) + 12|0);
          HEAP32[$974>>2] = $812;
          $$sum27$i$i = (($$sum$i21$i) + 8)|0;
          $975 = (($tbase$247$i) + ($$sum27$i$i)|0);
          $976 = $975;
          HEAP32[$976>>2] = $F4$0$i$i;
          $$sum28$i$i = (($$sum$i21$i) + 12)|0;
          $977 = (($tbase$247$i) + ($$sum28$i$i)|0);
          $978 = $977;
          HEAP32[$978>>2] = $963;
          break;
         }
         $979 = $811;
         $980 = $qsize$0$i$i >>> 8;
         $981 = ($980|0)==(0);
         do {
          if ($981) {
           $I7$0$i$i = 0;
          } else {
           $982 = ($qsize$0$i$i>>>0)>(16777215);
           if ($982) {
            $I7$0$i$i = 31;
            break;
           }
           $983 = (($980) + 1048320)|0;
           $984 = $983 >>> 16;
           $985 = $984 & 8;
           $986 = $980 << $985;
           $987 = (($986) + 520192)|0;
           $988 = $987 >>> 16;
           $989 = $988 & 4;
           $990 = $989 | $985;
           $991 = $986 << $989;
           $992 = (($991) + 245760)|0;
           $993 = $992 >>> 16;
           $994 = $993 & 2;
           $995 = $990 | $994;
           $996 = (14 - ($995))|0;
           $997 = $991 << $994;
           $998 = $997 >>> 15;
           $999 = (($996) + ($998))|0;
           $1000 = $999 << 1;
           $1001 = (($999) + 7)|0;
           $1002 = $qsize$0$i$i >>> $1001;
           $1003 = $1002 & 1;
           $1004 = $1003 | $1000;
           $I7$0$i$i = $1004;
          }
         } while(0);
         $1005 = (((17456) + ($I7$0$i$i<<2)|0) + 304|0);
         $$sum12$i$i = (($$sum$i21$i) + 28)|0;
         $1006 = (($tbase$247$i) + ($$sum12$i$i)|0);
         $1007 = $1006;
         HEAP32[$1007>>2] = $I7$0$i$i;
         $$sum13$i$i = (($$sum$i21$i) + 16)|0;
         $1008 = (($tbase$247$i) + ($$sum13$i$i)|0);
         $$sum14$i$i = (($$sum$i21$i) + 20)|0;
         $1009 = (($tbase$247$i) + ($$sum14$i$i)|0);
         $1010 = $1009;
         HEAP32[$1010>>2] = 0;
         $1011 = $1008;
         HEAP32[$1011>>2] = 0;
         $1012 = HEAP32[(((17456) + 4|0))>>2]|0;
         $1013 = 1 << $I7$0$i$i;
         $1014 = $1012 & $1013;
         $1015 = ($1014|0)==(0);
         if ($1015) {
          $1016 = $1012 | $1013;
          HEAP32[(((17456) + 4|0))>>2] = $1016;
          HEAP32[$1005>>2] = $979;
          $1017 = $1005;
          $$sum15$i$i = (($$sum$i21$i) + 24)|0;
          $1018 = (($tbase$247$i) + ($$sum15$i$i)|0);
          $1019 = $1018;
          HEAP32[$1019>>2] = $1017;
          $$sum16$i$i = (($$sum$i21$i) + 12)|0;
          $1020 = (($tbase$247$i) + ($$sum16$i$i)|0);
          $1021 = $1020;
          HEAP32[$1021>>2] = $979;
          $$sum17$i$i = (($$sum$i21$i) + 8)|0;
          $1022 = (($tbase$247$i) + ($$sum17$i$i)|0);
          $1023 = $1022;
          HEAP32[$1023>>2] = $979;
          break;
         }
         $1024 = HEAP32[$1005>>2]|0;
         $1025 = ($I7$0$i$i|0)==(31);
         if ($1025) {
          $1028 = 0;
         } else {
          $1026 = $I7$0$i$i >>> 1;
          $1027 = (25 - ($1026))|0;
          $1028 = $1027;
         }
         $1029 = (($1024) + 4|0);
         $1030 = HEAP32[$1029>>2]|0;
         $1031 = $1030 & -8;
         $1032 = ($1031|0)==($qsize$0$i$i|0);
         L445: do {
          if ($1032) {
           $T$0$lcssa$i28$i = $1024;
          } else {
           $1033 = $qsize$0$i$i << $1028;
           $K8$052$i$i = $1033;$T$051$i$i = $1024;
           while(1) {
            $1039 = $K8$052$i$i >>> 31;
            $1040 = ((($T$051$i$i) + ($1039<<2)|0) + 16|0);
            $1041 = HEAP32[$1040>>2]|0;
            $1042 = ($1041|0)==(0|0);
            if ($1042) {
             break;
            }
            $1034 = $K8$052$i$i << 1;
            $1035 = (($1041) + 4|0);
            $1036 = HEAP32[$1035>>2]|0;
            $1037 = $1036 & -8;
            $1038 = ($1037|0)==($qsize$0$i$i|0);
            if ($1038) {
             $T$0$lcssa$i28$i = $1041;
             break L445;
            } else {
             $T$051$i$i$phi = $1041;$K8$052$i$i = $1034;$T$051$i$i = $T$051$i$i$phi;
            }
           }
           $1043 = $1040;
           $1044 = HEAP32[(((17456) + 16|0))>>2]|0;
           $1045 = ($1043>>>0)<($1044>>>0);
           if ($1045) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$1040>>2] = $979;
            $$sum23$i$i = (($$sum$i21$i) + 24)|0;
            $1046 = (($tbase$247$i) + ($$sum23$i$i)|0);
            $1047 = $1046;
            HEAP32[$1047>>2] = $T$051$i$i;
            $$sum24$i$i = (($$sum$i21$i) + 12)|0;
            $1048 = (($tbase$247$i) + ($$sum24$i$i)|0);
            $1049 = $1048;
            HEAP32[$1049>>2] = $979;
            $$sum25$i$i = (($$sum$i21$i) + 8)|0;
            $1050 = (($tbase$247$i) + ($$sum25$i$i)|0);
            $1051 = $1050;
            HEAP32[$1051>>2] = $979;
            break L348;
           }
          }
         } while(0);
         $1052 = (($T$0$lcssa$i28$i) + 8|0);
         $1053 = HEAP32[$1052>>2]|0;
         $1054 = $T$0$lcssa$i28$i;
         $1055 = HEAP32[(((17456) + 16|0))>>2]|0;
         $1056 = ($1054>>>0)<($1055>>>0);
         if ($1056) {
          _abort();
          // unreachable;
         }
         $1057 = $1053;
         $1058 = ($1057>>>0)<($1055>>>0);
         if ($1058) {
          _abort();
          // unreachable;
         } else {
          $1059 = (($1053) + 12|0);
          HEAP32[$1059>>2] = $979;
          HEAP32[$1052>>2] = $979;
          $$sum20$i$i = (($$sum$i21$i) + 8)|0;
          $1060 = (($tbase$247$i) + ($$sum20$i$i)|0);
          $1061 = $1060;
          HEAP32[$1061>>2] = $1053;
          $$sum21$i$i = (($$sum$i21$i) + 12)|0;
          $1062 = (($tbase$247$i) + ($$sum21$i$i)|0);
          $1063 = $1062;
          HEAP32[$1063>>2] = $T$0$lcssa$i28$i;
          $$sum22$i$i = (($$sum$i21$i) + 24)|0;
          $1064 = (($tbase$247$i) + ($$sum22$i$i)|0);
          $1065 = $1064;
          HEAP32[$1065>>2] = 0;
          break;
         }
        }
       } while(0);
       $$sum1819$i$i = $797 | 8;
       $1066 = (($tbase$247$i) + ($$sum1819$i$i)|0);
       $mem$0 = $1066;
       STACKTOP = sp;return ($mem$0|0);
      }
     } while(0);
     $1067 = $711;
     $sp$0$i$i$i = (((17456) + 448|0));
     while(1) {
      $1068 = ($sp$0$i$i$i);
      $1069 = HEAP32[$1068>>2]|0;
      $1070 = ($1069>>>0)>($1067>>>0);
      if (!($1070)) {
       $1071 = (($sp$0$i$i$i) + 4|0);
       $1072 = HEAP32[$1071>>2]|0;
       $1073 = (($1069) + ($1072)|0);
       $1074 = ($1073>>>0)>($1067>>>0);
       if ($1074) {
        break;
       }
      }
      $1075 = (($sp$0$i$i$i) + 8|0);
      $1076 = HEAP32[$1075>>2]|0;
      $sp$0$i$i$i = $1076;
     }
     $$sum$i15$i = (($1072) + -47)|0;
     $$sum1$i16$i = (($1072) + -39)|0;
     $1077 = (($1069) + ($$sum1$i16$i)|0);
     $1078 = $1077;
     $1079 = $1078 & 7;
     $1080 = ($1079|0)==(0);
     if ($1080) {
      $1083 = 0;
     } else {
      $1081 = (0 - ($1078))|0;
      $1082 = $1081 & 7;
      $1083 = $1082;
     }
     $$sum2$i17$i = (($$sum$i15$i) + ($1083))|0;
     $1084 = (($1069) + ($$sum2$i17$i)|0);
     $1085 = (($711) + 16|0);
     $1086 = $1085;
     $1087 = ($1084>>>0)<($1086>>>0);
     $1088 = $1087 ? $1067 : $1084;
     $1089 = (($1088) + 8|0);
     $1090 = $1089;
     $1091 = (($tsize$246$i) + -40)|0;
     $1092 = (($tbase$247$i) + 8|0);
     $1093 = $1092;
     $1094 = $1093 & 7;
     $1095 = ($1094|0)==(0);
     if ($1095) {
      $1098 = 0;
     } else {
      $1096 = (0 - ($1093))|0;
      $1097 = $1096 & 7;
      $1098 = $1097;
     }
     $1099 = (($tbase$247$i) + ($1098)|0);
     $1100 = $1099;
     $1101 = (($1091) - ($1098))|0;
     HEAP32[(((17456) + 24|0))>>2] = $1100;
     HEAP32[(((17456) + 12|0))>>2] = $1101;
     $1102 = $1101 | 1;
     $$sum$i$i$i = (($1098) + 4)|0;
     $1103 = (($tbase$247$i) + ($$sum$i$i$i)|0);
     $1104 = $1103;
     HEAP32[$1104>>2] = $1102;
     $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
     $1105 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
     $1106 = $1105;
     HEAP32[$1106>>2] = 40;
     $1107 = HEAP32[(((17928) + 16|0))>>2]|0;
     HEAP32[(((17456) + 28|0))>>2] = $1107;
     $1108 = (($1088) + 4|0);
     $1109 = $1108;
     HEAP32[$1109>>2] = 27;
     ;HEAP32[$1089+0>>2]=HEAP32[((((17456) + 448|0)))+0>>2]|0;HEAP32[$1089+4>>2]=HEAP32[((((17456) + 448|0)))+4>>2]|0;HEAP32[$1089+8>>2]=HEAP32[((((17456) + 448|0)))+8>>2]|0;HEAP32[$1089+12>>2]=HEAP32[((((17456) + 448|0)))+12>>2]|0;
     HEAP32[(((17456) + 448|0))>>2] = $tbase$247$i;
     HEAP32[(((17456) + 452|0))>>2] = $tsize$246$i;
     HEAP32[(((17456) + 460|0))>>2] = 0;
     HEAP32[(((17456) + 456|0))>>2] = $1090;
     $1110 = (($1088) + 28|0);
     $1111 = $1110;
     HEAP32[$1111>>2] = 7;
     $1112 = (($1088) + 32|0);
     $1113 = ($1112>>>0)<($1073>>>0);
     if ($1113) {
      $1114 = $1111;
      while(1) {
       $1115 = (($1114) + 4|0);
       HEAP32[$1115>>2] = 7;
       $1116 = (($1114) + 8|0);
       $1117 = $1116;
       $1118 = ($1117>>>0)<($1073>>>0);
       if ($1118) {
        $1114$phi = $1115;$1114 = $1114$phi;
       } else {
        break;
       }
      }
     }
     $1119 = ($1088|0)==($1067|0);
     if ($1119) {
      break;
     }
     $1120 = $1088;
     $1121 = $711;
     $1122 = (($1120) - ($1121))|0;
     $1123 = (($1067) + ($1122)|0);
     $$sum3$i$i = (($1122) + 4)|0;
     $1124 = (($1067) + ($$sum3$i$i)|0);
     $1125 = $1124;
     $1126 = HEAP32[$1125>>2]|0;
     $1127 = $1126 & -2;
     HEAP32[$1125>>2] = $1127;
     $1128 = $1122 | 1;
     $1129 = (($711) + 4|0);
     HEAP32[$1129>>2] = $1128;
     $1130 = $1123;
     HEAP32[$1130>>2] = $1122;
     $1131 = $1122 >>> 3;
     $1132 = ($1122>>>0)<(256);
     if ($1132) {
      $1133 = $1131 << 1;
      $1134 = (((17456) + ($1133<<2)|0) + 40|0);
      $1135 = $1134;
      $1136 = HEAP32[((17456))>>2]|0;
      $1137 = 1 << $1131;
      $1138 = $1136 & $1137;
      $1139 = ($1138|0)==(0);
      do {
       if ($1139) {
        $1140 = $1136 | $1137;
        HEAP32[((17456))>>2] = $1140;
        $$sum10$pre$i$i = (($1133) + 2)|0;
        $$pre$i$i = (((17456) + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $1135;
       } else {
        $$sum11$i$i = (($1133) + 2)|0;
        $1141 = (((17456) + ($$sum11$i$i<<2)|0) + 40|0);
        $1142 = HEAP32[$1141>>2]|0;
        $1143 = $1142;
        $1144 = HEAP32[(((17456) + 16|0))>>2]|0;
        $1145 = ($1143>>>0)<($1144>>>0);
        if (!($1145)) {
         $$pre$phi$i$iZ2D = $1141;$F$0$i$i = $1142;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $711;
      $1146 = (($F$0$i$i) + 12|0);
      HEAP32[$1146>>2] = $711;
      $1147 = (($711) + 8|0);
      HEAP32[$1147>>2] = $F$0$i$i;
      $1148 = (($711) + 12|0);
      HEAP32[$1148>>2] = $1135;
      break;
     }
     $1149 = $711;
     $1150 = $1122 >>> 8;
     $1151 = ($1150|0)==(0);
     do {
      if ($1151) {
       $I1$0$i$i = 0;
      } else {
       $1152 = ($1122>>>0)>(16777215);
       if ($1152) {
        $I1$0$i$i = 31;
        break;
       }
       $1153 = (($1150) + 1048320)|0;
       $1154 = $1153 >>> 16;
       $1155 = $1154 & 8;
       $1156 = $1150 << $1155;
       $1157 = (($1156) + 520192)|0;
       $1158 = $1157 >>> 16;
       $1159 = $1158 & 4;
       $1160 = $1159 | $1155;
       $1161 = $1156 << $1159;
       $1162 = (($1161) + 245760)|0;
       $1163 = $1162 >>> 16;
       $1164 = $1163 & 2;
       $1165 = $1160 | $1164;
       $1166 = (14 - ($1165))|0;
       $1167 = $1161 << $1164;
       $1168 = $1167 >>> 15;
       $1169 = (($1166) + ($1168))|0;
       $1170 = $1169 << 1;
       $1171 = (($1169) + 7)|0;
       $1172 = $1122 >>> $1171;
       $1173 = $1172 & 1;
       $1174 = $1173 | $1170;
       $I1$0$i$i = $1174;
      }
     } while(0);
     $1175 = (((17456) + ($I1$0$i$i<<2)|0) + 304|0);
     $1176 = (($711) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1176>>2] = $I1$0$c$i$i;
     $1177 = (($711) + 20|0);
     HEAP32[$1177>>2] = 0;
     $1178 = (($711) + 16|0);
     HEAP32[$1178>>2] = 0;
     $1179 = HEAP32[(((17456) + 4|0))>>2]|0;
     $1180 = 1 << $I1$0$i$i;
     $1181 = $1179 & $1180;
     $1182 = ($1181|0)==(0);
     if ($1182) {
      $1183 = $1179 | $1180;
      HEAP32[(((17456) + 4|0))>>2] = $1183;
      HEAP32[$1175>>2] = $1149;
      $1184 = (($711) + 24|0);
      $$c$i$i = $1175;
      HEAP32[$1184>>2] = $$c$i$i;
      $1185 = (($711) + 12|0);
      HEAP32[$1185>>2] = $711;
      $1186 = (($711) + 8|0);
      HEAP32[$1186>>2] = $711;
      break;
     }
     $1187 = HEAP32[$1175>>2]|0;
     $1188 = ($I1$0$i$i|0)==(31);
     if ($1188) {
      $1191 = 0;
     } else {
      $1189 = $I1$0$i$i >>> 1;
      $1190 = (25 - ($1189))|0;
      $1191 = $1190;
     }
     $1192 = (($1187) + 4|0);
     $1193 = HEAP32[$1192>>2]|0;
     $1194 = $1193 & -8;
     $1195 = ($1194|0)==($1122|0);
     L499: do {
      if ($1195) {
       $T$0$lcssa$i$i = $1187;
      } else {
       $1196 = $1122 << $1191;
       $K2$014$i$i = $1196;$T$013$i$i = $1187;
       while(1) {
        $1202 = $K2$014$i$i >>> 31;
        $1203 = ((($T$013$i$i) + ($1202<<2)|0) + 16|0);
        $1204 = HEAP32[$1203>>2]|0;
        $1205 = ($1204|0)==(0|0);
        if ($1205) {
         break;
        }
        $1197 = $K2$014$i$i << 1;
        $1198 = (($1204) + 4|0);
        $1199 = HEAP32[$1198>>2]|0;
        $1200 = $1199 & -8;
        $1201 = ($1200|0)==($1122|0);
        if ($1201) {
         $T$0$lcssa$i$i = $1204;
         break L499;
        } else {
         $T$013$i$i$phi = $1204;$K2$014$i$i = $1197;$T$013$i$i = $T$013$i$i$phi;
        }
       }
       $1206 = $1203;
       $1207 = HEAP32[(((17456) + 16|0))>>2]|0;
       $1208 = ($1206>>>0)<($1207>>>0);
       if ($1208) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1203>>2] = $1149;
        $1209 = (($711) + 24|0);
        $T$0$c7$i$i = $T$013$i$i;
        HEAP32[$1209>>2] = $T$0$c7$i$i;
        $1210 = (($711) + 12|0);
        HEAP32[$1210>>2] = $711;
        $1211 = (($711) + 8|0);
        HEAP32[$1211>>2] = $711;
        break L311;
       }
      }
     } while(0);
     $1212 = (($T$0$lcssa$i$i) + 8|0);
     $1213 = HEAP32[$1212>>2]|0;
     $1214 = $T$0$lcssa$i$i;
     $1215 = HEAP32[(((17456) + 16|0))>>2]|0;
     $1216 = ($1214>>>0)<($1215>>>0);
     if ($1216) {
      _abort();
      // unreachable;
     }
     $1217 = $1213;
     $1218 = ($1217>>>0)<($1215>>>0);
     if ($1218) {
      _abort();
      // unreachable;
     } else {
      $1219 = (($1213) + 12|0);
      HEAP32[$1219>>2] = $1149;
      HEAP32[$1212>>2] = $1149;
      $1220 = (($711) + 8|0);
      $$c6$i$i = $1213;
      HEAP32[$1220>>2] = $$c6$i$i;
      $1221 = (($711) + 12|0);
      $T$0$c$i$i = $T$0$lcssa$i$i;
      HEAP32[$1221>>2] = $T$0$c$i$i;
      $1222 = (($711) + 24|0);
      HEAP32[$1222>>2] = 0;
      break;
     }
    }
   } while(0);
   $1223 = HEAP32[(((17456) + 12|0))>>2]|0;
   $1224 = ($1223>>>0)>($nb$0>>>0);
   if (!($1224)) {
    break;
   }
   $1225 = (($1223) - ($nb$0))|0;
   HEAP32[(((17456) + 12|0))>>2] = $1225;
   $1226 = HEAP32[(((17456) + 24|0))>>2]|0;
   $1227 = $1226;
   $1228 = (($1227) + ($nb$0)|0);
   $1229 = $1228;
   HEAP32[(((17456) + 24|0))>>2] = $1229;
   $1230 = $1225 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1231 = (($1227) + ($$sum$i32)|0);
   $1232 = $1231;
   HEAP32[$1232>>2] = $1230;
   $1233 = $nb$0 | 3;
   $1234 = (($1226) + 4|0);
   HEAP32[$1234>>2] = $1233;
   $1235 = (($1226) + 8|0);
   $1236 = $1235;
   $mem$0 = $1236;
   STACKTOP = sp;return ($mem$0|0);
  }
 } while(0);
 $1237 = (___errno_location()|0);
 HEAP32[$1237>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$c = 0, $$c12 = 0, $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0;
 var $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0;
 var $K19$057 = 0, $R$0 = 0, $R$0$phi = 0, $R$1 = 0, $R7$0 = 0, $R7$0$phi = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$phi = 0, $RP9$0 = 0, $RP9$0$phi = 0, $T$0$c = 0, $T$0$c13 = 0, $T$0$lcssa = 0, $T$056 = 0, $T$056$phi = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0;
 var $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, $sp$0$in$i$phi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($mem|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($mem) + -8|0);
 $3 = $2;
 $4 = HEAP32[(((17456) + 16|0))>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 if ($5) {
  _abort();
  // unreachable;
 }
 $6 = (($mem) + -4|0);
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 3;
 $10 = ($9|0)==(1);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = $8 & -8;
 $$sum = (($11) + -8)|0;
 $12 = (($mem) + ($$sum)|0);
 $13 = $12;
 $14 = $8 & 1;
 $15 = ($14|0)==(0);
 L10: do {
  if ($15) {
   $16 = $2;
   $17 = HEAP32[$16>>2]|0;
   $18 = ($9|0)==(0);
   if ($18) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($17))|0;
   $19 = (($mem) + ($$sum2)|0);
   $20 = $19;
   $21 = (($17) + ($11))|0;
   $22 = ($19>>>0)<($4>>>0);
   if ($22) {
    _abort();
    // unreachable;
   }
   $23 = HEAP32[(((17456) + 20|0))>>2]|0;
   $24 = ($20|0)==($23|0);
   if ($24) {
    $$sum3 = (($11) + -4)|0;
    $130 = (($mem) + ($$sum3)|0);
    $131 = $130;
    $132 = HEAP32[$131>>2]|0;
    $133 = $132 & 3;
    $134 = ($133|0)==(3);
    if (!($134)) {
     $p$0 = $20;$psize$0 = $21;
     break;
    }
    HEAP32[(((17456) + 8|0))>>2] = $21;
    $135 = HEAP32[$131>>2]|0;
    $136 = $135 & -2;
    HEAP32[$131>>2] = $136;
    $137 = $21 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $138 = (($mem) + ($$sum26)|0);
    $139 = $138;
    HEAP32[$139>>2] = $137;
    $140 = $12;
    HEAP32[$140>>2] = $21;
    STACKTOP = sp;return;
   }
   $25 = $17 >>> 3;
   $26 = ($17>>>0)<(256);
   if ($26) {
    $$sum36 = (($$sum2) + 8)|0;
    $27 = (($mem) + ($$sum36)|0);
    $28 = $27;
    $29 = HEAP32[$28>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $30 = (($mem) + ($$sum37)|0);
    $31 = $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = $25 << 1;
    $34 = (((17456) + ($33<<2)|0) + 40|0);
    $35 = $34;
    $36 = ($29|0)==($35|0);
    do {
     if (!($36)) {
      $37 = $29;
      $38 = ($37>>>0)<($4>>>0);
      if ($38) {
       _abort();
       // unreachable;
      }
      $39 = (($29) + 12|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==($20|0);
      if ($41) {
       break;
      }
      _abort();
      // unreachable;
     }
    } while(0);
    $42 = ($32|0)==($29|0);
    if ($42) {
     $43 = 1 << $25;
     $44 = $43 ^ -1;
     $45 = HEAP32[((17456))>>2]|0;
     $46 = $45 & $44;
     HEAP32[((17456))>>2] = $46;
     $p$0 = $20;$psize$0 = $21;
     break;
    }
    $47 = ($32|0)==($35|0);
    do {
     if ($47) {
      $$pre69 = (($32) + 8|0);
      $$pre$phi70Z2D = $$pre69;
     } else {
      $48 = $32;
      $49 = ($48>>>0)<($4>>>0);
      if ($49) {
       _abort();
       // unreachable;
      }
      $50 = (($32) + 8|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==($20|0);
      if ($52) {
       $$pre$phi70Z2D = $50;
       break;
      }
      _abort();
      // unreachable;
     }
    } while(0);
    $53 = (($29) + 12|0);
    HEAP32[$53>>2] = $32;
    HEAP32[$$pre$phi70Z2D>>2] = $29;
    $p$0 = $20;$psize$0 = $21;
    break;
   }
   $54 = $19;
   $$sum28 = (($$sum2) + 24)|0;
   $55 = (($mem) + ($$sum28)|0);
   $56 = $55;
   $57 = HEAP32[$56>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $58 = (($mem) + ($$sum29)|0);
   $59 = $58;
   $60 = HEAP32[$59>>2]|0;
   $61 = ($60|0)==($54|0);
   do {
    if ($61) {
     $$sum31 = (($$sum2) + 20)|0;
     $73 = (($mem) + ($$sum31)|0);
     $74 = $73;
     $75 = HEAP32[$74>>2]|0;
     $76 = ($75|0)==(0|0);
     if ($76) {
      $$sum30 = (($$sum2) + 16)|0;
      $77 = (($mem) + ($$sum30)|0);
      $78 = $77;
      $79 = HEAP32[$78>>2]|0;
      $80 = ($79|0)==(0|0);
      if ($80) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $79;$RP$0 = $78;
      }
     } else {
      $R$0 = $75;$RP$0 = $74;
     }
     while(1) {
      $81 = (($R$0) + 20|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ($82|0)==(0|0);
      if (!($83)) {
       $RP$0$phi = $81;$R$0$phi = $82;$RP$0 = $RP$0$phi;$R$0 = $R$0$phi;
       continue;
      }
      $84 = (($R$0) + 16|0);
      $85 = HEAP32[$84>>2]|0;
      $86 = ($85|0)==(0|0);
      if ($86) {
       break;
      } else {
       $R$0 = $85;$RP$0 = $84;
      }
     }
     $87 = $RP$0;
     $88 = ($87>>>0)<($4>>>0);
     if ($88) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $62 = (($mem) + ($$sum35)|0);
     $63 = $62;
     $64 = HEAP32[$63>>2]|0;
     $65 = $64;
     $66 = ($65>>>0)<($4>>>0);
     if ($66) {
      _abort();
      // unreachable;
     }
     $67 = (($64) + 12|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)==($54|0);
     if (!($69)) {
      _abort();
      // unreachable;
     }
     $70 = (($60) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($71|0)==($54|0);
     if ($72) {
      HEAP32[$67>>2] = $60;
      HEAP32[$70>>2] = $64;
      $R$1 = $60;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $89 = ($57|0)==(0|0);
   if ($89) {
    $p$0 = $20;$psize$0 = $21;
    break;
   }
   $$sum32 = (($$sum2) + 28)|0;
   $90 = (($mem) + ($$sum32)|0);
   $91 = $90;
   $92 = HEAP32[$91>>2]|0;
   $93 = (((17456) + ($92<<2)|0) + 304|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = ($54|0)==($94|0);
   do {
    if ($95) {
     HEAP32[$93>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if (!($cond)) {
      break;
     }
     $96 = 1 << $92;
     $97 = $96 ^ -1;
     $98 = HEAP32[(((17456) + 4|0))>>2]|0;
     $99 = $98 & $97;
     HEAP32[(((17456) + 4|0))>>2] = $99;
     $p$0 = $20;$psize$0 = $21;
     break L10;
    } else {
     $100 = $57;
     $101 = HEAP32[(((17456) + 16|0))>>2]|0;
     $102 = ($100>>>0)<($101>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = (($57) + 16|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($54|0);
     if ($105) {
      HEAP32[$103>>2] = $R$1;
     } else {
      $106 = (($57) + 20|0);
      HEAP32[$106>>2] = $R$1;
     }
     $107 = ($R$1|0)==(0|0);
     if ($107) {
      $p$0 = $20;$psize$0 = $21;
      break L10;
     }
    }
   } while(0);
   $108 = $R$1;
   $109 = HEAP32[(((17456) + 16|0))>>2]|0;
   $110 = ($108>>>0)<($109>>>0);
   if ($110) {
    _abort();
    // unreachable;
   }
   $111 = (($R$1) + 24|0);
   HEAP32[$111>>2] = $57;
   $$sum33 = (($$sum2) + 16)|0;
   $112 = (($mem) + ($$sum33)|0);
   $113 = $112;
   $114 = HEAP32[$113>>2]|0;
   $115 = ($114|0)==(0|0);
   do {
    if (!($115)) {
     $116 = $114;
     $117 = HEAP32[(((17456) + 16|0))>>2]|0;
     $118 = ($116>>>0)<($117>>>0);
     if ($118) {
      _abort();
      // unreachable;
     } else {
      $119 = (($R$1) + 16|0);
      HEAP32[$119>>2] = $114;
      $120 = (($114) + 24|0);
      HEAP32[$120>>2] = $R$1;
      break;
     }
    }
   } while(0);
   $$sum34 = (($$sum2) + 20)|0;
   $121 = (($mem) + ($$sum34)|0);
   $122 = $121;
   $123 = HEAP32[$122>>2]|0;
   $124 = ($123|0)==(0|0);
   if ($124) {
    $p$0 = $20;$psize$0 = $21;
    break;
   }
   $125 = $123;
   $126 = HEAP32[(((17456) + 16|0))>>2]|0;
   $127 = ($125>>>0)<($126>>>0);
   if ($127) {
    _abort();
    // unreachable;
   } else {
    $128 = (($R$1) + 20|0);
    HEAP32[$128>>2] = $123;
    $129 = (($123) + 24|0);
    HEAP32[$129>>2] = $R$1;
    $p$0 = $20;$psize$0 = $21;
    break;
   }
  } else {
   $p$0 = $3;$psize$0 = $11;
  }
 } while(0);
 $141 = $p$0;
 $142 = ($141>>>0)<($12>>>0);
 if (!($142)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($11) + -4)|0;
 $143 = (($mem) + ($$sum25)|0);
 $144 = $143;
 $145 = HEAP32[$144>>2]|0;
 $146 = $145 & 1;
 $147 = ($146|0)==(0);
 if ($147) {
  _abort();
  // unreachable;
 }
 $148 = $145 & 2;
 $149 = ($148|0)==(0);
 do {
  if ($149) {
   $150 = HEAP32[(((17456) + 24|0))>>2]|0;
   $151 = ($13|0)==($150|0);
   if ($151) {
    $152 = HEAP32[(((17456) + 12|0))>>2]|0;
    $153 = (($152) + ($psize$0))|0;
    HEAP32[(((17456) + 12|0))>>2] = $153;
    HEAP32[(((17456) + 24|0))>>2] = $p$0;
    $154 = $153 | 1;
    $155 = (($p$0) + 4|0);
    HEAP32[$155>>2] = $154;
    $156 = HEAP32[(((17456) + 20|0))>>2]|0;
    $157 = ($p$0|0)==($156|0);
    if (!($157)) {
     STACKTOP = sp;return;
    }
    HEAP32[(((17456) + 20|0))>>2] = 0;
    HEAP32[(((17456) + 8|0))>>2] = 0;
    STACKTOP = sp;return;
   }
   $158 = HEAP32[(((17456) + 20|0))>>2]|0;
   $159 = ($13|0)==($158|0);
   if ($159) {
    $160 = HEAP32[(((17456) + 8|0))>>2]|0;
    $161 = (($160) + ($psize$0))|0;
    HEAP32[(((17456) + 8|0))>>2] = $161;
    HEAP32[(((17456) + 20|0))>>2] = $p$0;
    $162 = $161 | 1;
    $163 = (($p$0) + 4|0);
    HEAP32[$163>>2] = $162;
    $164 = (($141) + ($161)|0);
    $165 = $164;
    HEAP32[$165>>2] = $161;
    STACKTOP = sp;return;
   }
   $166 = $145 & -8;
   $167 = (($166) + ($psize$0))|0;
   $168 = $145 >>> 3;
   $169 = ($145>>>0)<(256);
   L112: do {
    if ($169) {
     $170 = (($mem) + ($11)|0);
     $171 = $170;
     $172 = HEAP32[$171>>2]|0;
     $$sum2324 = $11 | 4;
     $173 = (($mem) + ($$sum2324)|0);
     $174 = $173;
     $175 = HEAP32[$174>>2]|0;
     $176 = $168 << 1;
     $177 = (((17456) + ($176<<2)|0) + 40|0);
     $178 = $177;
     $179 = ($172|0)==($178|0);
     do {
      if (!($179)) {
       $180 = $172;
       $181 = HEAP32[(((17456) + 16|0))>>2]|0;
       $182 = ($180>>>0)<($181>>>0);
       if ($182) {
        _abort();
        // unreachable;
       }
       $183 = (($172) + 12|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==($13|0);
       if ($185) {
        break;
       }
       _abort();
       // unreachable;
      }
     } while(0);
     $186 = ($175|0)==($172|0);
     if ($186) {
      $187 = 1 << $168;
      $188 = $187 ^ -1;
      $189 = HEAP32[((17456))>>2]|0;
      $190 = $189 & $188;
      HEAP32[((17456))>>2] = $190;
      break;
     }
     $191 = ($175|0)==($178|0);
     do {
      if ($191) {
       $$pre67 = (($175) + 8|0);
       $$pre$phi68Z2D = $$pre67;
      } else {
       $192 = $175;
       $193 = HEAP32[(((17456) + 16|0))>>2]|0;
       $194 = ($192>>>0)<($193>>>0);
       if ($194) {
        _abort();
        // unreachable;
       }
       $195 = (($175) + 8|0);
       $196 = HEAP32[$195>>2]|0;
       $197 = ($196|0)==($13|0);
       if ($197) {
        $$pre$phi68Z2D = $195;
        break;
       }
       _abort();
       // unreachable;
      }
     } while(0);
     $198 = (($172) + 12|0);
     HEAP32[$198>>2] = $175;
     HEAP32[$$pre$phi68Z2D>>2] = $172;
    } else {
     $199 = $12;
     $$sum5 = (($11) + 16)|0;
     $200 = (($mem) + ($$sum5)|0);
     $201 = $200;
     $202 = HEAP32[$201>>2]|0;
     $$sum67 = $11 | 4;
     $203 = (($mem) + ($$sum67)|0);
     $204 = $203;
     $205 = HEAP32[$204>>2]|0;
     $206 = ($205|0)==($199|0);
     do {
      if ($206) {
       $$sum9 = (($11) + 12)|0;
       $219 = (($mem) + ($$sum9)|0);
       $220 = $219;
       $221 = HEAP32[$220>>2]|0;
       $222 = ($221|0)==(0|0);
       if ($222) {
        $$sum8 = (($11) + 8)|0;
        $223 = (($mem) + ($$sum8)|0);
        $224 = $223;
        $225 = HEAP32[$224>>2]|0;
        $226 = ($225|0)==(0|0);
        if ($226) {
         $R7$1 = 0;
         break;
        } else {
         $R7$0 = $225;$RP9$0 = $224;
        }
       } else {
        $R7$0 = $221;$RP9$0 = $220;
       }
       while(1) {
        $227 = (($R7$0) + 20|0);
        $228 = HEAP32[$227>>2]|0;
        $229 = ($228|0)==(0|0);
        if (!($229)) {
         $RP9$0$phi = $227;$R7$0$phi = $228;$RP9$0 = $RP9$0$phi;$R7$0 = $R7$0$phi;
         continue;
        }
        $230 = (($R7$0) + 16|0);
        $231 = HEAP32[$230>>2]|0;
        $232 = ($231|0)==(0|0);
        if ($232) {
         break;
        } else {
         $R7$0 = $231;$RP9$0 = $230;
        }
       }
       $233 = $RP9$0;
       $234 = HEAP32[(((17456) + 16|0))>>2]|0;
       $235 = ($233>>>0)<($234>>>0);
       if ($235) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP9$0>>2] = 0;
        $R7$1 = $R7$0;
        break;
       }
      } else {
       $207 = (($mem) + ($11)|0);
       $208 = $207;
       $209 = HEAP32[$208>>2]|0;
       $210 = $209;
       $211 = HEAP32[(((17456) + 16|0))>>2]|0;
       $212 = ($210>>>0)<($211>>>0);
       if ($212) {
        _abort();
        // unreachable;
       }
       $213 = (($209) + 12|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = ($214|0)==($199|0);
       if (!($215)) {
        _abort();
        // unreachable;
       }
       $216 = (($205) + 8|0);
       $217 = HEAP32[$216>>2]|0;
       $218 = ($217|0)==($199|0);
       if ($218) {
        HEAP32[$213>>2] = $205;
        HEAP32[$216>>2] = $209;
        $R7$1 = $205;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $236 = ($202|0)==(0|0);
     if ($236) {
      break;
     }
     $$sum18 = (($11) + 20)|0;
     $237 = (($mem) + ($$sum18)|0);
     $238 = $237;
     $239 = HEAP32[$238>>2]|0;
     $240 = (((17456) + ($239<<2)|0) + 304|0);
     $241 = HEAP32[$240>>2]|0;
     $242 = ($199|0)==($241|0);
     do {
      if ($242) {
       HEAP32[$240>>2] = $R7$1;
       $cond54 = ($R7$1|0)==(0|0);
       if (!($cond54)) {
        break;
       }
       $243 = 1 << $239;
       $244 = $243 ^ -1;
       $245 = HEAP32[(((17456) + 4|0))>>2]|0;
       $246 = $245 & $244;
       HEAP32[(((17456) + 4|0))>>2] = $246;
       break L112;
      } else {
       $247 = $202;
       $248 = HEAP32[(((17456) + 16|0))>>2]|0;
       $249 = ($247>>>0)<($248>>>0);
       if ($249) {
        _abort();
        // unreachable;
       }
       $250 = (($202) + 16|0);
       $251 = HEAP32[$250>>2]|0;
       $252 = ($251|0)==($199|0);
       if ($252) {
        HEAP32[$250>>2] = $R7$1;
       } else {
        $253 = (($202) + 20|0);
        HEAP32[$253>>2] = $R7$1;
       }
       $254 = ($R7$1|0)==(0|0);
       if ($254) {
        break L112;
       }
      }
     } while(0);
     $255 = $R7$1;
     $256 = HEAP32[(((17456) + 16|0))>>2]|0;
     $257 = ($255>>>0)<($256>>>0);
     if ($257) {
      _abort();
      // unreachable;
     }
     $258 = (($R7$1) + 24|0);
     HEAP32[$258>>2] = $202;
     $$sum19 = (($11) + 8)|0;
     $259 = (($mem) + ($$sum19)|0);
     $260 = $259;
     $261 = HEAP32[$260>>2]|0;
     $262 = ($261|0)==(0|0);
     do {
      if (!($262)) {
       $263 = $261;
       $264 = HEAP32[(((17456) + 16|0))>>2]|0;
       $265 = ($263>>>0)<($264>>>0);
       if ($265) {
        _abort();
        // unreachable;
       } else {
        $266 = (($R7$1) + 16|0);
        HEAP32[$266>>2] = $261;
        $267 = (($261) + 24|0);
        HEAP32[$267>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($11) + 12)|0;
     $268 = (($mem) + ($$sum20)|0);
     $269 = $268;
     $270 = HEAP32[$269>>2]|0;
     $271 = ($270|0)==(0|0);
     if ($271) {
      break;
     }
     $272 = $270;
     $273 = HEAP32[(((17456) + 16|0))>>2]|0;
     $274 = ($272>>>0)<($273>>>0);
     if ($274) {
      _abort();
      // unreachable;
     } else {
      $275 = (($R7$1) + 20|0);
      HEAP32[$275>>2] = $270;
      $276 = (($270) + 24|0);
      HEAP32[$276>>2] = $R7$1;
      break;
     }
    }
   } while(0);
   $277 = $167 | 1;
   $278 = (($p$0) + 4|0);
   HEAP32[$278>>2] = $277;
   $279 = (($141) + ($167)|0);
   $280 = $279;
   HEAP32[$280>>2] = $167;
   $281 = HEAP32[(((17456) + 20|0))>>2]|0;
   $282 = ($p$0|0)==($281|0);
   if (!($282)) {
    $psize$1 = $167;
    break;
   }
   HEAP32[(((17456) + 8|0))>>2] = $167;
   STACKTOP = sp;return;
  } else {
   $283 = $145 & -2;
   HEAP32[$144>>2] = $283;
   $284 = $psize$0 | 1;
   $285 = (($p$0) + 4|0);
   HEAP32[$285>>2] = $284;
   $286 = (($141) + ($psize$0)|0);
   $287 = $286;
   HEAP32[$287>>2] = $psize$0;
   $psize$1 = $psize$0;
  }
 } while(0);
 $288 = $psize$1 >>> 3;
 $289 = ($psize$1>>>0)<(256);
 if ($289) {
  $290 = $288 << 1;
  $291 = (((17456) + ($290<<2)|0) + 40|0);
  $292 = $291;
  $293 = HEAP32[((17456))>>2]|0;
  $294 = 1 << $288;
  $295 = $293 & $294;
  $296 = ($295|0)==(0);
  do {
   if ($296) {
    $297 = $293 | $294;
    HEAP32[((17456))>>2] = $297;
    $$sum16$pre = (($290) + 2)|0;
    $$pre = (((17456) + ($$sum16$pre<<2)|0) + 40|0);
    $$pre$phiZ2D = $$pre;$F16$0 = $292;
   } else {
    $$sum17 = (($290) + 2)|0;
    $298 = (((17456) + ($$sum17<<2)|0) + 40|0);
    $299 = HEAP32[$298>>2]|0;
    $300 = $299;
    $301 = HEAP32[(((17456) + 16|0))>>2]|0;
    $302 = ($300>>>0)<($301>>>0);
    if (!($302)) {
     $$pre$phiZ2D = $298;$F16$0 = $299;
     break;
    }
    _abort();
    // unreachable;
   }
  } while(0);
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $303 = (($F16$0) + 12|0);
  HEAP32[$303>>2] = $p$0;
  $304 = (($p$0) + 8|0);
  HEAP32[$304>>2] = $F16$0;
  $305 = (($p$0) + 12|0);
  HEAP32[$305>>2] = $292;
  STACKTOP = sp;return;
 }
 $306 = $p$0;
 $307 = $psize$1 >>> 8;
 $308 = ($307|0)==(0);
 do {
  if ($308) {
   $I18$0 = 0;
  } else {
   $309 = ($psize$1>>>0)>(16777215);
   if ($309) {
    $I18$0 = 31;
    break;
   }
   $310 = (($307) + 1048320)|0;
   $311 = $310 >>> 16;
   $312 = $311 & 8;
   $313 = $307 << $312;
   $314 = (($313) + 520192)|0;
   $315 = $314 >>> 16;
   $316 = $315 & 4;
   $317 = $316 | $312;
   $318 = $313 << $316;
   $319 = (($318) + 245760)|0;
   $320 = $319 >>> 16;
   $321 = $320 & 2;
   $322 = $317 | $321;
   $323 = (14 - ($322))|0;
   $324 = $318 << $321;
   $325 = $324 >>> 15;
   $326 = (($323) + ($325))|0;
   $327 = $326 << 1;
   $328 = (($326) + 7)|0;
   $329 = $psize$1 >>> $328;
   $330 = $329 & 1;
   $331 = $330 | $327;
   $I18$0 = $331;
  }
 } while(0);
 $332 = (((17456) + ($I18$0<<2)|0) + 304|0);
 $333 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$333>>2] = $I18$0$c;
 $334 = (($p$0) + 20|0);
 HEAP32[$334>>2] = 0;
 $335 = (($p$0) + 16|0);
 HEAP32[$335>>2] = 0;
 $336 = HEAP32[(((17456) + 4|0))>>2]|0;
 $337 = 1 << $I18$0;
 $338 = $336 & $337;
 $339 = ($338|0)==(0);
 L199: do {
  if ($339) {
   $340 = $336 | $337;
   HEAP32[(((17456) + 4|0))>>2] = $340;
   HEAP32[$332>>2] = $306;
   $341 = (($p$0) + 24|0);
   $$c = $332;
   HEAP32[$341>>2] = $$c;
   $342 = (($p$0) + 12|0);
   HEAP32[$342>>2] = $p$0;
   $343 = (($p$0) + 8|0);
   HEAP32[$343>>2] = $p$0;
  } else {
   $344 = HEAP32[$332>>2]|0;
   $345 = ($I18$0|0)==(31);
   if ($345) {
    $348 = 0;
   } else {
    $346 = $I18$0 >>> 1;
    $347 = (25 - ($346))|0;
    $348 = $347;
   }
   $349 = (($344) + 4|0);
   $350 = HEAP32[$349>>2]|0;
   $351 = $350 & -8;
   $352 = ($351|0)==($psize$1|0);
   L204: do {
    if ($352) {
     $T$0$lcssa = $344;
    } else {
     $353 = $psize$1 << $348;
     $K19$057 = $353;$T$056 = $344;
     while(1) {
      $359 = $K19$057 >>> 31;
      $360 = ((($T$056) + ($359<<2)|0) + 16|0);
      $361 = HEAP32[$360>>2]|0;
      $362 = ($361|0)==(0|0);
      if ($362) {
       break;
      }
      $354 = $K19$057 << 1;
      $355 = (($361) + 4|0);
      $356 = HEAP32[$355>>2]|0;
      $357 = $356 & -8;
      $358 = ($357|0)==($psize$1|0);
      if ($358) {
       $T$0$lcssa = $361;
       break L204;
      } else {
       $T$056$phi = $361;$K19$057 = $354;$T$056 = $T$056$phi;
      }
     }
     $363 = $360;
     $364 = HEAP32[(((17456) + 16|0))>>2]|0;
     $365 = ($363>>>0)<($364>>>0);
     if ($365) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$360>>2] = $306;
      $366 = (($p$0) + 24|0);
      $T$0$c13 = $T$056;
      HEAP32[$366>>2] = $T$0$c13;
      $367 = (($p$0) + 12|0);
      HEAP32[$367>>2] = $p$0;
      $368 = (($p$0) + 8|0);
      HEAP32[$368>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $369 = (($T$0$lcssa) + 8|0);
   $370 = HEAP32[$369>>2]|0;
   $371 = $T$0$lcssa;
   $372 = HEAP32[(((17456) + 16|0))>>2]|0;
   $373 = ($371>>>0)<($372>>>0);
   if ($373) {
    _abort();
    // unreachable;
   }
   $374 = $370;
   $375 = ($374>>>0)<($372>>>0);
   if ($375) {
    _abort();
    // unreachable;
   } else {
    $376 = (($370) + 12|0);
    HEAP32[$376>>2] = $306;
    HEAP32[$369>>2] = $306;
    $377 = (($p$0) + 8|0);
    $$c12 = $370;
    HEAP32[$377>>2] = $$c12;
    $378 = (($p$0) + 12|0);
    $T$0$c = $T$0$lcssa;
    HEAP32[$378>>2] = $T$0$c;
    $379 = (($p$0) + 24|0);
    HEAP32[$379>>2] = 0;
    break;
   }
  }
 } while(0);
 $380 = HEAP32[(((17456) + 32|0))>>2]|0;
 $381 = (($380) + -1)|0;
 HEAP32[(((17456) + 32|0))>>2] = $381;
 $382 = ($381|0)==(0);
 if ($382) {
  $sp$0$in$i = (((17456) + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $383 = ($sp$0$i|0)==(0|0);
  $384 = (($sp$0$i) + 8|0);
  if ($383) {
   break;
  } else {
   $sp$0$in$i$phi = $384;$sp$0$in$i = $sp$0$in$i$phi;
  }
 }
 HEAP32[(((17456) + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($oldmem|0)==(0|0);
 if ($1) {
  $2 = (_malloc($bytes)|0);
  $mem$0 = $2;
  STACKTOP = sp;return ($mem$0|0);
 }
 $3 = ($bytes>>>0)>(4294967231);
 if ($3) {
  $4 = (___errno_location()|0);
  HEAP32[$4>>2] = 12;
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $5 = ($bytes>>>0)<(11);
 if ($5) {
  $8 = 16;
 } else {
  $6 = (($bytes) + 11)|0;
  $7 = $6 & -8;
  $8 = $7;
 }
 $9 = (($oldmem) + -8|0);
 $10 = $9;
 $11 = (_try_realloc_chunk($10,$8)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = (($11) + 8|0);
  $14 = $13;
  $mem$0 = $14;
  STACKTOP = sp;return ($mem$0|0);
 }
 $15 = (_malloc($bytes)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $17 = (($oldmem) + -4|0);
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = $19 & -8;
 $21 = $19 & 3;
 $22 = ($21|0)==(0);
 $23 = $22 ? 8 : 4;
 $24 = (($20) - ($23))|0;
 $25 = ($24>>>0)<($bytes>>>0);
 $26 = $25 ? $24 : $bytes;
 _memcpy(($15|0),($oldmem|0),($26|0))|0;
 _free($oldmem);
 $mem$0 = $15;
 STACKTOP = sp;return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$phi = 0, $R$1 = 0, $RP$0 = 0, $RP$0$phi = 0, $cond = 0, $newp$0 = 0;
 var $or$cond = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & -8;
 $4 = $p;
 $5 = (($4) + ($3)|0);
 $6 = $5;
 $7 = HEAP32[(((17456) + 16|0))>>2]|0;
 $8 = ($4>>>0)<($7>>>0);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $2 & 3;
 $10 = ($9|0)!=(1);
 $11 = ($4>>>0)<($5>>>0);
 $or$cond = $10 & $11;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $3 | 4;
 $12 = (($4) + ($$sum2728)|0);
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 1;
 $16 = ($15|0)==(0);
 if ($16) {
  _abort();
  // unreachable;
 }
 $17 = ($9|0)==(0);
 if ($17) {
  $18 = ($nb>>>0)<(256);
  if ($18) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $19 = (($nb) + 4)|0;
  $20 = ($3>>>0)<($19>>>0);
  do {
   if (!($20)) {
    $21 = (($3) - ($nb))|0;
    $22 = HEAP32[(((17928) + 8|0))>>2]|0;
    $23 = $22 << 1;
    $24 = ($21>>>0)>($23>>>0);
    if ($24) {
     break;
    } else {
     $newp$0 = $p;
    }
    STACKTOP = sp;return ($newp$0|0);
   }
  } while(0);
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $25 = ($3>>>0)<($nb>>>0);
 if (!($25)) {
  $26 = (($3) - ($nb))|0;
  $27 = ($26>>>0)>(15);
  if (!($27)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $28 = (($4) + ($nb)|0);
  $29 = $28;
  $30 = $2 & 1;
  $31 = $30 | $nb;
  $32 = $31 | 2;
  HEAP32[$1>>2] = $32;
  $$sum23 = (($nb) + 4)|0;
  $33 = (($4) + ($$sum23)|0);
  $34 = $33;
  $35 = $26 | 3;
  HEAP32[$34>>2] = $35;
  $36 = HEAP32[$13>>2]|0;
  $37 = $36 | 1;
  HEAP32[$13>>2] = $37;
  _dispose_chunk($29,$26);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $38 = HEAP32[(((17456) + 24|0))>>2]|0;
 $39 = ($6|0)==($38|0);
 if ($39) {
  $40 = HEAP32[(((17456) + 12|0))>>2]|0;
  $41 = (($40) + ($3))|0;
  $42 = ($41>>>0)>($nb>>>0);
  if (!($42)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $43 = (($41) - ($nb))|0;
  $44 = (($4) + ($nb)|0);
  $45 = $44;
  $46 = $2 & 1;
  $47 = $46 | $nb;
  $48 = $47 | 2;
  HEAP32[$1>>2] = $48;
  $$sum22 = (($nb) + 4)|0;
  $49 = (($4) + ($$sum22)|0);
  $50 = $49;
  $51 = $43 | 1;
  HEAP32[$50>>2] = $51;
  HEAP32[(((17456) + 24|0))>>2] = $45;
  HEAP32[(((17456) + 12|0))>>2] = $43;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $52 = HEAP32[(((17456) + 20|0))>>2]|0;
 $53 = ($6|0)==($52|0);
 if ($53) {
  $54 = HEAP32[(((17456) + 8|0))>>2]|0;
  $55 = (($54) + ($3))|0;
  $56 = ($55>>>0)<($nb>>>0);
  if ($56) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $57 = (($55) - ($nb))|0;
  $58 = ($57>>>0)>(15);
  if ($58) {
   $59 = (($4) + ($nb)|0);
   $60 = $59;
   $61 = (($4) + ($55)|0);
   $62 = $2 & 1;
   $63 = $62 | $nb;
   $64 = $63 | 2;
   HEAP32[$1>>2] = $64;
   $$sum19 = (($nb) + 4)|0;
   $65 = (($4) + ($$sum19)|0);
   $66 = $65;
   $67 = $57 | 1;
   HEAP32[$66>>2] = $67;
   $68 = $61;
   HEAP32[$68>>2] = $57;
   $$sum20 = (($55) + 4)|0;
   $69 = (($4) + ($$sum20)|0);
   $70 = $69;
   $71 = HEAP32[$70>>2]|0;
   $72 = $71 & -2;
   HEAP32[$70>>2] = $72;
   $storemerge = $60;$storemerge21 = $57;
  } else {
   $73 = $2 & 1;
   $74 = $73 | $55;
   $75 = $74 | 2;
   HEAP32[$1>>2] = $75;
   $$sum17 = (($55) + 4)|0;
   $76 = (($4) + ($$sum17)|0);
   $77 = $76;
   $78 = HEAP32[$77>>2]|0;
   $79 = $78 | 1;
   HEAP32[$77>>2] = $79;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[(((17456) + 8|0))>>2] = $storemerge21;
  HEAP32[(((17456) + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $80 = $14 & 2;
 $81 = ($80|0)==(0);
 if (!($81)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $82 = $14 & -8;
 $83 = (($82) + ($3))|0;
 $84 = ($83>>>0)<($nb>>>0);
 if ($84) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $85 = (($83) - ($nb))|0;
 $86 = $14 >>> 3;
 $87 = ($14>>>0)<(256);
 L52: do {
  if ($87) {
   $$sum15 = (($3) + 8)|0;
   $88 = (($4) + ($$sum15)|0);
   $89 = $88;
   $90 = HEAP32[$89>>2]|0;
   $$sum16 = (($3) + 12)|0;
   $91 = (($4) + ($$sum16)|0);
   $92 = $91;
   $93 = HEAP32[$92>>2]|0;
   $94 = $86 << 1;
   $95 = (((17456) + ($94<<2)|0) + 40|0);
   $96 = $95;
   $97 = ($90|0)==($96|0);
   do {
    if (!($97)) {
     $98 = $90;
     $99 = ($98>>>0)<($7>>>0);
     if ($99) {
      _abort();
      // unreachable;
     }
     $100 = (($90) + 12|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101|0)==($6|0);
     if ($102) {
      break;
     }
     _abort();
     // unreachable;
    }
   } while(0);
   $103 = ($93|0)==($90|0);
   if ($103) {
    $104 = 1 << $86;
    $105 = $104 ^ -1;
    $106 = HEAP32[((17456))>>2]|0;
    $107 = $106 & $105;
    HEAP32[((17456))>>2] = $107;
    break;
   }
   $108 = ($93|0)==($96|0);
   do {
    if ($108) {
     $$pre = (($93) + 8|0);
     $$pre$phiZ2D = $$pre;
    } else {
     $109 = $93;
     $110 = ($109>>>0)<($7>>>0);
     if ($110) {
      _abort();
      // unreachable;
     }
     $111 = (($93) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==($6|0);
     if ($113) {
      $$pre$phiZ2D = $111;
      break;
     }
     _abort();
     // unreachable;
    }
   } while(0);
   $114 = (($90) + 12|0);
   HEAP32[$114>>2] = $93;
   HEAP32[$$pre$phiZ2D>>2] = $90;
  } else {
   $115 = $5;
   $$sum = (($3) + 24)|0;
   $116 = (($4) + ($$sum)|0);
   $117 = $116;
   $118 = HEAP32[$117>>2]|0;
   $$sum2 = (($3) + 12)|0;
   $119 = (($4) + ($$sum2)|0);
   $120 = $119;
   $121 = HEAP32[$120>>2]|0;
   $122 = ($121|0)==($115|0);
   do {
    if ($122) {
     $$sum4 = (($3) + 20)|0;
     $134 = (($4) + ($$sum4)|0);
     $135 = $134;
     $136 = HEAP32[$135>>2]|0;
     $137 = ($136|0)==(0|0);
     if ($137) {
      $$sum3 = (($3) + 16)|0;
      $138 = (($4) + ($$sum3)|0);
      $139 = $138;
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $140;$RP$0 = $139;
      }
     } else {
      $R$0 = $136;$RP$0 = $135;
     }
     while(1) {
      $142 = (($R$0) + 20|0);
      $143 = HEAP32[$142>>2]|0;
      $144 = ($143|0)==(0|0);
      if (!($144)) {
       $RP$0$phi = $142;$R$0$phi = $143;$RP$0 = $RP$0$phi;$R$0 = $R$0$phi;
       continue;
      }
      $145 = (($R$0) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($146|0)==(0|0);
      if ($147) {
       break;
      } else {
       $R$0 = $146;$RP$0 = $145;
      }
     }
     $148 = $RP$0;
     $149 = ($148>>>0)<($7>>>0);
     if ($149) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($3) + 8)|0;
     $123 = (($4) + ($$sum14)|0);
     $124 = $123;
     $125 = HEAP32[$124>>2]|0;
     $126 = $125;
     $127 = ($126>>>0)<($7>>>0);
     if ($127) {
      _abort();
      // unreachable;
     }
     $128 = (($125) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($129|0)==($115|0);
     if (!($130)) {
      _abort();
      // unreachable;
     }
     $131 = (($121) + 8|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($132|0)==($115|0);
     if ($133) {
      HEAP32[$128>>2] = $121;
      HEAP32[$131>>2] = $125;
      $R$1 = $121;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $150 = ($118|0)==(0|0);
   if ($150) {
    break;
   }
   $$sum11 = (($3) + 28)|0;
   $151 = (($4) + ($$sum11)|0);
   $152 = $151;
   $153 = HEAP32[$152>>2]|0;
   $154 = (((17456) + ($153<<2)|0) + 304|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = ($115|0)==($155|0);
   do {
    if ($156) {
     HEAP32[$154>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if (!($cond)) {
      break;
     }
     $157 = 1 << $153;
     $158 = $157 ^ -1;
     $159 = HEAP32[(((17456) + 4|0))>>2]|0;
     $160 = $159 & $158;
     HEAP32[(((17456) + 4|0))>>2] = $160;
     break L52;
    } else {
     $161 = $118;
     $162 = HEAP32[(((17456) + 16|0))>>2]|0;
     $163 = ($161>>>0)<($162>>>0);
     if ($163) {
      _abort();
      // unreachable;
     }
     $164 = (($118) + 16|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($165|0)==($115|0);
     if ($166) {
      HEAP32[$164>>2] = $R$1;
     } else {
      $167 = (($118) + 20|0);
      HEAP32[$167>>2] = $R$1;
     }
     $168 = ($R$1|0)==(0|0);
     if ($168) {
      break L52;
     }
    }
   } while(0);
   $169 = $R$1;
   $170 = HEAP32[(((17456) + 16|0))>>2]|0;
   $171 = ($169>>>0)<($170>>>0);
   if ($171) {
    _abort();
    // unreachable;
   }
   $172 = (($R$1) + 24|0);
   HEAP32[$172>>2] = $118;
   $$sum12 = (($3) + 16)|0;
   $173 = (($4) + ($$sum12)|0);
   $174 = $173;
   $175 = HEAP32[$174>>2]|0;
   $176 = ($175|0)==(0|0);
   do {
    if (!($176)) {
     $177 = $175;
     $178 = HEAP32[(((17456) + 16|0))>>2]|0;
     $179 = ($177>>>0)<($178>>>0);
     if ($179) {
      _abort();
      // unreachable;
     } else {
      $180 = (($R$1) + 16|0);
      HEAP32[$180>>2] = $175;
      $181 = (($175) + 24|0);
      HEAP32[$181>>2] = $R$1;
      break;
     }
    }
   } while(0);
   $$sum13 = (($3) + 20)|0;
   $182 = (($4) + ($$sum13)|0);
   $183 = $182;
   $184 = HEAP32[$183>>2]|0;
   $185 = ($184|0)==(0|0);
   if ($185) {
    break;
   }
   $186 = $184;
   $187 = HEAP32[(((17456) + 16|0))>>2]|0;
   $188 = ($186>>>0)<($187>>>0);
   if ($188) {
    _abort();
    // unreachable;
   } else {
    $189 = (($R$1) + 20|0);
    HEAP32[$189>>2] = $184;
    $190 = (($184) + 24|0);
    HEAP32[$190>>2] = $R$1;
    break;
   }
  }
 } while(0);
 $191 = ($85>>>0)<(16);
 if ($191) {
  $192 = HEAP32[$1>>2]|0;
  $193 = $192 & 1;
  $194 = $83 | $193;
  $195 = $194 | 2;
  HEAP32[$1>>2] = $195;
  $$sum910 = $83 | 4;
  $196 = (($4) + ($$sum910)|0);
  $197 = $196;
  $198 = HEAP32[$197>>2]|0;
  $199 = $198 | 1;
  HEAP32[$197>>2] = $199;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $200 = (($4) + ($nb)|0);
  $201 = $200;
  $202 = HEAP32[$1>>2]|0;
  $203 = $202 & 1;
  $204 = $203 | $nb;
  $205 = $204 | 2;
  HEAP32[$1>>2] = $205;
  $$sum5 = (($nb) + 4)|0;
  $206 = (($4) + ($$sum5)|0);
  $207 = $206;
  $208 = $85 | 3;
  HEAP32[$207>>2] = $208;
  $$sum78 = $83 | 4;
  $209 = (($4) + ($$sum78)|0);
  $210 = $209;
  $211 = HEAP32[$210>>2]|0;
  $212 = $211 | 1;
  HEAP32[$210>>2] = $212;
  _dispose_chunk($201,$85);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return 0|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$c = 0, $$c8 = 0, $$pre = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$pre62 = 0, $$pre64 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0;
 var $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$049 = 0, $R$0 = 0, $R$0$phi = 0, $R$1 = 0, $R7$0 = 0, $R7$0$phi = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$phi = 0, $RP9$0 = 0;
 var $RP9$0$phi = 0, $T$0$c = 0, $T$0$c9 = 0, $T$0$lcssa = 0, $T$048 = 0, $T$048$phi = 0, $cond = 0, $cond46 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $p;
 $2 = (($1) + ($psize)|0);
 $3 = $2;
 $4 = (($p) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 L1: do {
  if ($7) {
   $8 = ($p);
   $9 = HEAP32[$8>>2]|0;
   $10 = $5 & 3;
   $11 = ($10|0)==(0);
   if ($11) {
    STACKTOP = sp;return;
   }
   $12 = (0 - ($9))|0;
   $13 = (($1) + ($12)|0);
   $14 = $13;
   $15 = (($9) + ($psize))|0;
   $16 = HEAP32[(((17456) + 16|0))>>2]|0;
   $17 = ($13>>>0)<($16>>>0);
   if ($17) {
    _abort();
    // unreachable;
   }
   $18 = HEAP32[(((17456) + 20|0))>>2]|0;
   $19 = ($14|0)==($18|0);
   if ($19) {
    $$sum = (($psize) + 4)|0;
    $125 = (($1) + ($$sum)|0);
    $126 = $125;
    $127 = HEAP32[$126>>2]|0;
    $128 = $127 & 3;
    $129 = ($128|0)==(3);
    if (!($129)) {
     $$0 = $14;$$02 = $15;
     break;
    }
    HEAP32[(((17456) + 8|0))>>2] = $15;
    $130 = HEAP32[$126>>2]|0;
    $131 = $130 & -2;
    HEAP32[$126>>2] = $131;
    $132 = $15 | 1;
    $$sum20 = (4 - ($9))|0;
    $133 = (($1) + ($$sum20)|0);
    $134 = $133;
    HEAP32[$134>>2] = $132;
    $135 = $2;
    HEAP32[$135>>2] = $15;
    STACKTOP = sp;return;
   }
   $20 = $9 >>> 3;
   $21 = ($9>>>0)<(256);
   if ($21) {
    $$sum30 = (8 - ($9))|0;
    $22 = (($1) + ($$sum30)|0);
    $23 = $22;
    $24 = HEAP32[$23>>2]|0;
    $$sum31 = (12 - ($9))|0;
    $25 = (($1) + ($$sum31)|0);
    $26 = $25;
    $27 = HEAP32[$26>>2]|0;
    $28 = $20 << 1;
    $29 = (((17456) + ($28<<2)|0) + 40|0);
    $30 = $29;
    $31 = ($24|0)==($30|0);
    do {
     if (!($31)) {
      $32 = $24;
      $33 = ($32>>>0)<($16>>>0);
      if ($33) {
       _abort();
       // unreachable;
      }
      $34 = (($24) + 12|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = ($35|0)==($14|0);
      if ($36) {
       break;
      }
      _abort();
      // unreachable;
     }
    } while(0);
    $37 = ($27|0)==($24|0);
    if ($37) {
     $38 = 1 << $20;
     $39 = $38 ^ -1;
     $40 = HEAP32[((17456))>>2]|0;
     $41 = $40 & $39;
     HEAP32[((17456))>>2] = $41;
     $$0 = $14;$$02 = $15;
     break;
    }
    $42 = ($27|0)==($30|0);
    do {
     if ($42) {
      $$pre64 = (($27) + 8|0);
      $$pre$phi65Z2D = $$pre64;
     } else {
      $43 = $27;
      $44 = ($43>>>0)<($16>>>0);
      if ($44) {
       _abort();
       // unreachable;
      }
      $45 = (($27) + 8|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = ($46|0)==($14|0);
      if ($47) {
       $$pre$phi65Z2D = $45;
       break;
      }
      _abort();
      // unreachable;
     }
    } while(0);
    $48 = (($24) + 12|0);
    HEAP32[$48>>2] = $27;
    HEAP32[$$pre$phi65Z2D>>2] = $24;
    $$0 = $14;$$02 = $15;
    break;
   }
   $49 = $13;
   $$sum22 = (24 - ($9))|0;
   $50 = (($1) + ($$sum22)|0);
   $51 = $50;
   $52 = HEAP32[$51>>2]|0;
   $$sum23 = (12 - ($9))|0;
   $53 = (($1) + ($$sum23)|0);
   $54 = $53;
   $55 = HEAP32[$54>>2]|0;
   $56 = ($55|0)==($49|0);
   do {
    if ($56) {
     $$sum24 = (16 - ($9))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $68 = (($1) + ($$sum25)|0);
     $69 = $68;
     $70 = HEAP32[$69>>2]|0;
     $71 = ($70|0)==(0|0);
     if ($71) {
      $72 = (($1) + ($$sum24)|0);
      $73 = $72;
      $74 = HEAP32[$73>>2]|0;
      $75 = ($74|0)==(0|0);
      if ($75) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $74;$RP$0 = $73;
      }
     } else {
      $R$0 = $70;$RP$0 = $69;
     }
     while(1) {
      $76 = (($R$0) + 20|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = ($77|0)==(0|0);
      if (!($78)) {
       $RP$0$phi = $76;$R$0$phi = $77;$RP$0 = $RP$0$phi;$R$0 = $R$0$phi;
       continue;
      }
      $79 = (($R$0) + 16|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = ($80|0)==(0|0);
      if ($81) {
       break;
      } else {
       $R$0 = $80;$RP$0 = $79;
      }
     }
     $82 = $RP$0;
     $83 = ($82>>>0)<($16>>>0);
     if ($83) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($9))|0;
     $57 = (($1) + ($$sum29)|0);
     $58 = $57;
     $59 = HEAP32[$58>>2]|0;
     $60 = $59;
     $61 = ($60>>>0)<($16>>>0);
     if ($61) {
      _abort();
      // unreachable;
     }
     $62 = (($59) + 12|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = ($63|0)==($49|0);
     if (!($64)) {
      _abort();
      // unreachable;
     }
     $65 = (($55) + 8|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ($66|0)==($49|0);
     if ($67) {
      HEAP32[$62>>2] = $55;
      HEAP32[$65>>2] = $59;
      $R$1 = $55;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $84 = ($52|0)==(0|0);
   if ($84) {
    $$0 = $14;$$02 = $15;
    break;
   }
   $$sum26 = (28 - ($9))|0;
   $85 = (($1) + ($$sum26)|0);
   $86 = $85;
   $87 = HEAP32[$86>>2]|0;
   $88 = (((17456) + ($87<<2)|0) + 304|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ($49|0)==($89|0);
   do {
    if ($90) {
     HEAP32[$88>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if (!($cond)) {
      break;
     }
     $91 = 1 << $87;
     $92 = $91 ^ -1;
     $93 = HEAP32[(((17456) + 4|0))>>2]|0;
     $94 = $93 & $92;
     HEAP32[(((17456) + 4|0))>>2] = $94;
     $$0 = $14;$$02 = $15;
     break L1;
    } else {
     $95 = $52;
     $96 = HEAP32[(((17456) + 16|0))>>2]|0;
     $97 = ($95>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     }
     $98 = (($52) + 16|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = ($99|0)==($49|0);
     if ($100) {
      HEAP32[$98>>2] = $R$1;
     } else {
      $101 = (($52) + 20|0);
      HEAP32[$101>>2] = $R$1;
     }
     $102 = ($R$1|0)==(0|0);
     if ($102) {
      $$0 = $14;$$02 = $15;
      break L1;
     }
    }
   } while(0);
   $103 = $R$1;
   $104 = HEAP32[(((17456) + 16|0))>>2]|0;
   $105 = ($103>>>0)<($104>>>0);
   if ($105) {
    _abort();
    // unreachable;
   }
   $106 = (($R$1) + 24|0);
   HEAP32[$106>>2] = $52;
   $$sum27 = (16 - ($9))|0;
   $107 = (($1) + ($$sum27)|0);
   $108 = $107;
   $109 = HEAP32[$108>>2]|0;
   $110 = ($109|0)==(0|0);
   do {
    if (!($110)) {
     $111 = $109;
     $112 = HEAP32[(((17456) + 16|0))>>2]|0;
     $113 = ($111>>>0)<($112>>>0);
     if ($113) {
      _abort();
      // unreachable;
     } else {
      $114 = (($R$1) + 16|0);
      HEAP32[$114>>2] = $109;
      $115 = (($109) + 24|0);
      HEAP32[$115>>2] = $R$1;
      break;
     }
    }
   } while(0);
   $$sum28 = (($$sum27) + 4)|0;
   $116 = (($1) + ($$sum28)|0);
   $117 = $116;
   $118 = HEAP32[$117>>2]|0;
   $119 = ($118|0)==(0|0);
   if ($119) {
    $$0 = $14;$$02 = $15;
    break;
   }
   $120 = $118;
   $121 = HEAP32[(((17456) + 16|0))>>2]|0;
   $122 = ($120>>>0)<($121>>>0);
   if ($122) {
    _abort();
    // unreachable;
   } else {
    $123 = (($R$1) + 20|0);
    HEAP32[$123>>2] = $118;
    $124 = (($118) + 24|0);
    HEAP32[$124>>2] = $R$1;
    $$0 = $14;$$02 = $15;
    break;
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $136 = HEAP32[(((17456) + 16|0))>>2]|0;
 $137 = ($2>>>0)<($136>>>0);
 if ($137) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $138 = (($1) + ($$sum1)|0);
 $139 = $138;
 $140 = HEAP32[$139>>2]|0;
 $141 = $140 & 2;
 $142 = ($141|0)==(0);
 do {
  if ($142) {
   $143 = HEAP32[(((17456) + 24|0))>>2]|0;
   $144 = ($3|0)==($143|0);
   if ($144) {
    $145 = HEAP32[(((17456) + 12|0))>>2]|0;
    $146 = (($145) + ($$02))|0;
    HEAP32[(((17456) + 12|0))>>2] = $146;
    HEAP32[(((17456) + 24|0))>>2] = $$0;
    $147 = $146 | 1;
    $148 = (($$0) + 4|0);
    HEAP32[$148>>2] = $147;
    $149 = HEAP32[(((17456) + 20|0))>>2]|0;
    $150 = ($$0|0)==($149|0);
    if (!($150)) {
     STACKTOP = sp;return;
    }
    HEAP32[(((17456) + 20|0))>>2] = 0;
    HEAP32[(((17456) + 8|0))>>2] = 0;
    STACKTOP = sp;return;
   }
   $151 = HEAP32[(((17456) + 20|0))>>2]|0;
   $152 = ($3|0)==($151|0);
   if ($152) {
    $153 = HEAP32[(((17456) + 8|0))>>2]|0;
    $154 = (($153) + ($$02))|0;
    HEAP32[(((17456) + 8|0))>>2] = $154;
    HEAP32[(((17456) + 20|0))>>2] = $$0;
    $155 = $154 | 1;
    $156 = (($$0) + 4|0);
    HEAP32[$156>>2] = $155;
    $157 = $$0;
    $158 = (($157) + ($154)|0);
    $159 = $158;
    HEAP32[$159>>2] = $154;
    STACKTOP = sp;return;
   }
   $160 = $140 & -8;
   $161 = (($160) + ($$02))|0;
   $162 = $140 >>> 3;
   $163 = ($140>>>0)<(256);
   L101: do {
    if ($163) {
     $$sum18 = (($psize) + 8)|0;
     $164 = (($1) + ($$sum18)|0);
     $165 = $164;
     $166 = HEAP32[$165>>2]|0;
     $$sum19 = (($psize) + 12)|0;
     $167 = (($1) + ($$sum19)|0);
     $168 = $167;
     $169 = HEAP32[$168>>2]|0;
     $170 = $162 << 1;
     $171 = (((17456) + ($170<<2)|0) + 40|0);
     $172 = $171;
     $173 = ($166|0)==($172|0);
     do {
      if (!($173)) {
       $174 = $166;
       $175 = ($174>>>0)<($136>>>0);
       if ($175) {
        _abort();
        // unreachable;
       }
       $176 = (($166) + 12|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==($3|0);
       if ($178) {
        break;
       }
       _abort();
       // unreachable;
      }
     } while(0);
     $179 = ($169|0)==($166|0);
     if ($179) {
      $180 = 1 << $162;
      $181 = $180 ^ -1;
      $182 = HEAP32[((17456))>>2]|0;
      $183 = $182 & $181;
      HEAP32[((17456))>>2] = $183;
      break;
     }
     $184 = ($169|0)==($172|0);
     do {
      if ($184) {
       $$pre62 = (($169) + 8|0);
       $$pre$phi63Z2D = $$pre62;
      } else {
       $185 = $169;
       $186 = ($185>>>0)<($136>>>0);
       if ($186) {
        _abort();
        // unreachable;
       }
       $187 = (($169) + 8|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($188|0)==($3|0);
       if ($189) {
        $$pre$phi63Z2D = $187;
        break;
       }
       _abort();
       // unreachable;
      }
     } while(0);
     $190 = (($166) + 12|0);
     HEAP32[$190>>2] = $169;
     HEAP32[$$pre$phi63Z2D>>2] = $166;
    } else {
     $191 = $2;
     $$sum2 = (($psize) + 24)|0;
     $192 = (($1) + ($$sum2)|0);
     $193 = $192;
     $194 = HEAP32[$193>>2]|0;
     $$sum3 = (($psize) + 12)|0;
     $195 = (($1) + ($$sum3)|0);
     $196 = $195;
     $197 = HEAP32[$196>>2]|0;
     $198 = ($197|0)==($191|0);
     do {
      if ($198) {
       $$sum5 = (($psize) + 20)|0;
       $210 = (($1) + ($$sum5)|0);
       $211 = $210;
       $212 = HEAP32[$211>>2]|0;
       $213 = ($212|0)==(0|0);
       if ($213) {
        $$sum4 = (($psize) + 16)|0;
        $214 = (($1) + ($$sum4)|0);
        $215 = $214;
        $216 = HEAP32[$215>>2]|0;
        $217 = ($216|0)==(0|0);
        if ($217) {
         $R7$1 = 0;
         break;
        } else {
         $R7$0 = $216;$RP9$0 = $215;
        }
       } else {
        $R7$0 = $212;$RP9$0 = $211;
       }
       while(1) {
        $218 = (($R7$0) + 20|0);
        $219 = HEAP32[$218>>2]|0;
        $220 = ($219|0)==(0|0);
        if (!($220)) {
         $RP9$0$phi = $218;$R7$0$phi = $219;$RP9$0 = $RP9$0$phi;$R7$0 = $R7$0$phi;
         continue;
        }
        $221 = (($R7$0) + 16|0);
        $222 = HEAP32[$221>>2]|0;
        $223 = ($222|0)==(0|0);
        if ($223) {
         break;
        } else {
         $R7$0 = $222;$RP9$0 = $221;
        }
       }
       $224 = $RP9$0;
       $225 = ($224>>>0)<($136>>>0);
       if ($225) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP9$0>>2] = 0;
        $R7$1 = $R7$0;
        break;
       }
      } else {
       $$sum17 = (($psize) + 8)|0;
       $199 = (($1) + ($$sum17)|0);
       $200 = $199;
       $201 = HEAP32[$200>>2]|0;
       $202 = $201;
       $203 = ($202>>>0)<($136>>>0);
       if ($203) {
        _abort();
        // unreachable;
       }
       $204 = (($201) + 12|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = ($205|0)==($191|0);
       if (!($206)) {
        _abort();
        // unreachable;
       }
       $207 = (($197) + 8|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==($191|0);
       if ($209) {
        HEAP32[$204>>2] = $197;
        HEAP32[$207>>2] = $201;
        $R7$1 = $197;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $226 = ($194|0)==(0|0);
     if ($226) {
      break;
     }
     $$sum14 = (($psize) + 28)|0;
     $227 = (($1) + ($$sum14)|0);
     $228 = $227;
     $229 = HEAP32[$228>>2]|0;
     $230 = (((17456) + ($229<<2)|0) + 304|0);
     $231 = HEAP32[$230>>2]|0;
     $232 = ($191|0)==($231|0);
     do {
      if ($232) {
       HEAP32[$230>>2] = $R7$1;
       $cond46 = ($R7$1|0)==(0|0);
       if (!($cond46)) {
        break;
       }
       $233 = 1 << $229;
       $234 = $233 ^ -1;
       $235 = HEAP32[(((17456) + 4|0))>>2]|0;
       $236 = $235 & $234;
       HEAP32[(((17456) + 4|0))>>2] = $236;
       break L101;
      } else {
       $237 = $194;
       $238 = HEAP32[(((17456) + 16|0))>>2]|0;
       $239 = ($237>>>0)<($238>>>0);
       if ($239) {
        _abort();
        // unreachable;
       }
       $240 = (($194) + 16|0);
       $241 = HEAP32[$240>>2]|0;
       $242 = ($241|0)==($191|0);
       if ($242) {
        HEAP32[$240>>2] = $R7$1;
       } else {
        $243 = (($194) + 20|0);
        HEAP32[$243>>2] = $R7$1;
       }
       $244 = ($R7$1|0)==(0|0);
       if ($244) {
        break L101;
       }
      }
     } while(0);
     $245 = $R7$1;
     $246 = HEAP32[(((17456) + 16|0))>>2]|0;
     $247 = ($245>>>0)<($246>>>0);
     if ($247) {
      _abort();
      // unreachable;
     }
     $248 = (($R7$1) + 24|0);
     HEAP32[$248>>2] = $194;
     $$sum15 = (($psize) + 16)|0;
     $249 = (($1) + ($$sum15)|0);
     $250 = $249;
     $251 = HEAP32[$250>>2]|0;
     $252 = ($251|0)==(0|0);
     do {
      if (!($252)) {
       $253 = $251;
       $254 = HEAP32[(((17456) + 16|0))>>2]|0;
       $255 = ($253>>>0)<($254>>>0);
       if ($255) {
        _abort();
        // unreachable;
       } else {
        $256 = (($R7$1) + 16|0);
        HEAP32[$256>>2] = $251;
        $257 = (($251) + 24|0);
        HEAP32[$257>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $258 = (($1) + ($$sum16)|0);
     $259 = $258;
     $260 = HEAP32[$259>>2]|0;
     $261 = ($260|0)==(0|0);
     if ($261) {
      break;
     }
     $262 = $260;
     $263 = HEAP32[(((17456) + 16|0))>>2]|0;
     $264 = ($262>>>0)<($263>>>0);
     if ($264) {
      _abort();
      // unreachable;
     } else {
      $265 = (($R7$1) + 20|0);
      HEAP32[$265>>2] = $260;
      $266 = (($260) + 24|0);
      HEAP32[$266>>2] = $R7$1;
      break;
     }
    }
   } while(0);
   $267 = $161 | 1;
   $268 = (($$0) + 4|0);
   HEAP32[$268>>2] = $267;
   $269 = $$0;
   $270 = (($269) + ($161)|0);
   $271 = $270;
   HEAP32[$271>>2] = $161;
   $272 = HEAP32[(((17456) + 20|0))>>2]|0;
   $273 = ($$0|0)==($272|0);
   if (!($273)) {
    $$1 = $161;
    break;
   }
   HEAP32[(((17456) + 8|0))>>2] = $161;
   STACKTOP = sp;return;
  } else {
   $274 = $140 & -2;
   HEAP32[$139>>2] = $274;
   $275 = $$02 | 1;
   $276 = (($$0) + 4|0);
   HEAP32[$276>>2] = $275;
   $277 = $$0;
   $278 = (($277) + ($$02)|0);
   $279 = $278;
   HEAP32[$279>>2] = $$02;
   $$1 = $$02;
  }
 } while(0);
 $280 = $$1 >>> 3;
 $281 = ($$1>>>0)<(256);
 if ($281) {
  $282 = $280 << 1;
  $283 = (((17456) + ($282<<2)|0) + 40|0);
  $284 = $283;
  $285 = HEAP32[((17456))>>2]|0;
  $286 = 1 << $280;
  $287 = $285 & $286;
  $288 = ($287|0)==(0);
  do {
   if ($288) {
    $289 = $285 | $286;
    HEAP32[((17456))>>2] = $289;
    $$sum12$pre = (($282) + 2)|0;
    $$pre = (((17456) + ($$sum12$pre<<2)|0) + 40|0);
    $$pre$phiZ2D = $$pre;$F16$0 = $284;
   } else {
    $$sum13 = (($282) + 2)|0;
    $290 = (((17456) + ($$sum13<<2)|0) + 40|0);
    $291 = HEAP32[$290>>2]|0;
    $292 = $291;
    $293 = HEAP32[(((17456) + 16|0))>>2]|0;
    $294 = ($292>>>0)<($293>>>0);
    if (!($294)) {
     $$pre$phiZ2D = $290;$F16$0 = $291;
     break;
    }
    _abort();
    // unreachable;
   }
  } while(0);
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $295 = (($F16$0) + 12|0);
  HEAP32[$295>>2] = $$0;
  $296 = (($$0) + 8|0);
  HEAP32[$296>>2] = $F16$0;
  $297 = (($$0) + 12|0);
  HEAP32[$297>>2] = $284;
  STACKTOP = sp;return;
 }
 $298 = $$0;
 $299 = $$1 >>> 8;
 $300 = ($299|0)==(0);
 do {
  if ($300) {
   $I19$0 = 0;
  } else {
   $301 = ($$1>>>0)>(16777215);
   if ($301) {
    $I19$0 = 31;
    break;
   }
   $302 = (($299) + 1048320)|0;
   $303 = $302 >>> 16;
   $304 = $303 & 8;
   $305 = $299 << $304;
   $306 = (($305) + 520192)|0;
   $307 = $306 >>> 16;
   $308 = $307 & 4;
   $309 = $308 | $304;
   $310 = $305 << $308;
   $311 = (($310) + 245760)|0;
   $312 = $311 >>> 16;
   $313 = $312 & 2;
   $314 = $309 | $313;
   $315 = (14 - ($314))|0;
   $316 = $310 << $313;
   $317 = $316 >>> 15;
   $318 = (($315) + ($317))|0;
   $319 = $318 << 1;
   $320 = (($318) + 7)|0;
   $321 = $$1 >>> $320;
   $322 = $321 & 1;
   $323 = $322 | $319;
   $I19$0 = $323;
  }
 } while(0);
 $324 = (((17456) + ($I19$0<<2)|0) + 304|0);
 $325 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$325>>2] = $I19$0$c;
 $326 = (($$0) + 20|0);
 HEAP32[$326>>2] = 0;
 $327 = (($$0) + 16|0);
 HEAP32[$327>>2] = 0;
 $328 = HEAP32[(((17456) + 4|0))>>2]|0;
 $329 = 1 << $I19$0;
 $330 = $328 & $329;
 $331 = ($330|0)==(0);
 if ($331) {
  $332 = $328 | $329;
  HEAP32[(((17456) + 4|0))>>2] = $332;
  HEAP32[$324>>2] = $298;
  $333 = (($$0) + 24|0);
  $$c = $324;
  HEAP32[$333>>2] = $$c;
  $334 = (($$0) + 12|0);
  HEAP32[$334>>2] = $$0;
  $335 = (($$0) + 8|0);
  HEAP32[$335>>2] = $$0;
  STACKTOP = sp;return;
 }
 $336 = HEAP32[$324>>2]|0;
 $337 = ($I19$0|0)==(31);
 if ($337) {
  $340 = 0;
 } else {
  $338 = $I19$0 >>> 1;
  $339 = (25 - ($338))|0;
  $340 = $339;
 }
 $341 = (($336) + 4|0);
 $342 = HEAP32[$341>>2]|0;
 $343 = $342 & -8;
 $344 = ($343|0)==($$1|0);
 L194: do {
  if ($344) {
   $T$0$lcssa = $336;
  } else {
   $345 = $$1 << $340;
   $K20$049 = $345;$T$048 = $336;
   while(1) {
    $351 = $K20$049 >>> 31;
    $352 = ((($T$048) + ($351<<2)|0) + 16|0);
    $353 = HEAP32[$352>>2]|0;
    $354 = ($353|0)==(0|0);
    if ($354) {
     break;
    }
    $346 = $K20$049 << 1;
    $347 = (($353) + 4|0);
    $348 = HEAP32[$347>>2]|0;
    $349 = $348 & -8;
    $350 = ($349|0)==($$1|0);
    if ($350) {
     $T$0$lcssa = $353;
     break L194;
    } else {
     $T$048$phi = $353;$K20$049 = $346;$T$048 = $T$048$phi;
    }
   }
   $355 = $352;
   $356 = HEAP32[(((17456) + 16|0))>>2]|0;
   $357 = ($355>>>0)<($356>>>0);
   if ($357) {
    _abort();
    // unreachable;
   }
   HEAP32[$352>>2] = $298;
   $358 = (($$0) + 24|0);
   $T$0$c9 = $T$048;
   HEAP32[$358>>2] = $T$0$c9;
   $359 = (($$0) + 12|0);
   HEAP32[$359>>2] = $$0;
   $360 = (($$0) + 8|0);
   HEAP32[$360>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $361 = (($T$0$lcssa) + 8|0);
 $362 = HEAP32[$361>>2]|0;
 $363 = $T$0$lcssa;
 $364 = HEAP32[(((17456) + 16|0))>>2]|0;
 $365 = ($363>>>0)<($364>>>0);
 if ($365) {
  _abort();
  // unreachable;
 }
 $366 = $362;
 $367 = ($366>>>0)<($364>>>0);
 if ($367) {
  _abort();
  // unreachable;
 }
 $368 = (($362) + 12|0);
 HEAP32[$368>>2] = $298;
 HEAP32[$361>>2] = $298;
 $369 = (($$0) + 8|0);
 $$c8 = $362;
 HEAP32[$369>>2] = $$c8;
 $370 = (($$0) + 12|0);
 $T$0$c = $T$0$lcssa;
 HEAP32[$370>>2] = $T$0$c;
 $371 = (($$0) + 24|0);
 HEAP32[$371>>2] = 0;
 STACKTOP = sp;return;
}
function __Znwj($size) {
 $size = $size|0;
 var $$size = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($size|0)==(0);
 $$size = $1 ? 1 : $size;
 while(1) {
  $2 = (_malloc($$size)|0);
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   label = 10;
   break;
  }
  $4 = HEAP32[(17952)>>2]|0;HEAP32[(17952)>>2] = (($4+0)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   label = 9;
   break;
  }
  $6 = $4;
  __THREW__ = 0;
  invoke_v($6|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   label = 5;
   break;
  }
 }
 do {
  if ((label|0) == 5) {
   $9 = ___cxa_find_matching_catch(-1,-1,(18016)|0)|0;
   $10 = tempRet0;
   $lpad$phi$index = $9;$lpad$phi$index2 = $10;
  }
  else if ((label|0) == 9) {
   $14 = (___cxa_allocate_exception(4)|0);
   $15 = $14;
   HEAP32[$15>>2] = ((((17960) + 8|0)));
   __THREW__ = 0;
   invoke_viii(12,($14|0),((18016)|0),((151)|0));
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    $11 = ___cxa_find_matching_catch(-1,-1,(18016)|0)|0;
    $12 = tempRet0;
    $lpad$phi$index = $11;$lpad$phi$index2 = $12;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 10) {
   STACKTOP = sp;return ($2|0);
  }
 } while(0);
 $13 = ($lpad$phi$index2|0)<(0);
 if ($13) {
  ___cxa_call_unexpected(($lpad$phi$index|0));
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return 0|0;
}
function __Znaj($size) {
 $size = $size|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $1 = (invoke_ii(92,($size|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  STACKTOP = sp;return ($1|0);
 }
 $4 = ___cxa_find_matching_catch(-1,-1,(18016)|0)|0;
 $5 = tempRet0;
 $6 = ($5|0)<(0);
 if ($6) {
  ___cxa_call_unexpected(($4|0));
  // unreachable;
 } else {
  ___resumeException($4|0);
  // unreachable;
 }
 return 0|0;
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($ptr|0)==(0|0);
 if (!($1)) {
  _free($ptr);
 }
 STACKTOP = sp;return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 __ZNSt9exceptionD2Ev(($1|0));
 $2 = $this;
 __ZdlPv($2);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($this);
 __ZNSt9exceptionD2Ev(($1|0));
 STACKTOP = sp;return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ((17984)|0);
}
function __ZSt17__throw_bad_allocv() {
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___cxa_allocate_exception(4)|0);
 $2 = $1;
 HEAP32[$2>>2] = ((((17960) + 8|0)));
 ___cxa_throw(($1|0),((18016)|0),((151)|0));
 // unreachable;
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$$i22 = 0, $$0 = 0.0, $$02$i = 0, $$08$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$10$i = 0, $$14$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$38$i = 0, $$388$i = 0, $$397$i = 0, $$in = 0, $$in$phi = 0, $$k$0$i = 0, $$lcssa43$i = 0;
 var $$lnz$0$i = 0, $$neg20$i = 0, $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i17 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us53$i = 0, $$x$4$i = 0, $$y$3$i = 0.0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $225$phi = 0, $226 = 0, $226$phi = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0;
 var $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0.0, $452 = 0.0, $453 = 0.0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0.0, $464 = 0.0, $465 = 0.0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0.0, $476 = 0.0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $481$phi = 0, $482 = 0;
 var $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0.0, $495 = 0, $496 = 0.0, $497 = 0.0, $498 = 0, $499 = 0, $5 = 0, $50 = 0.0;
 var $500 = 0, $501 = 0.0, $502 = 0.0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0.0, $509 = 0.0, $51 = 0.0, $510 = 0.0, $511 = 0, $512 = 0, $513 = 0, $514 = 0.0, $515 = 0.0, $516 = 0, $517 = 0, $518 = 0;
 var $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0;
 var $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0;
 var $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0;
 var $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0;
 var $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0;
 var $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0;
 var $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0;
 var $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0.0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0;
 var $663 = 0.0, $664 = 0.0, $665 = 0.0, $666 = 0.0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0.0;
 var $681 = 0.0, $682 = 0, $683 = 0, $684 = 0, $685 = 0.0, $686 = 0.0, $687 = 0.0, $688 = 0.0, $689 = 0, $69 = 0, $690 = 0, $691 = 0.0, $692 = 0, $693 = 0.0, $694 = 0.0, $695 = 0.0, $696 = 0, $697 = 0, $698 = 0, $699 = 0.0;
 var $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0.0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0.0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0.0, $716 = 0;
 var $717 = 0, $718 = 0.0, $719 = 0.0, $72 = 0, $720 = 0.0, $721 = 0.0, $722 = 0, $723 = 0, $724 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$061$i = 0;
 var $a$1$i = 0, $a$2$ph40$i = 0, $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$427$i = 0, $a$427$i$phi = 0, $a$5$i = 0, $bias$0$i = 0.0, $bias$07$i = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge107 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$169 = 0, $c$2 = 0, $c$2$i = 0;
 var $c$2$lcssa$i = 0, $c$364 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$063$i = 0, $carry$063$i$phi = 0, $carry1$0$us$i = 0, $carry1$0$us49$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us54$i = 0, $carry3$030$i = 0, $carry3$030$i$phi = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0;
 var $e2$0$us$i = 0, $e2$0$us44$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i9 = 0, $gotdig$2$i = 0, $gotdig$2$i11 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$381$i = 0, $gotdig$393$i = 0;
 var $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i12 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$194$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$025$i = 0, $i$068 = 0, $i$1$i = 0, $i$166 = 0, $i$166$phi = 0, $i$263 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0;
 var $j$086$i = 0, $j$096$i = 0, $j$2$i = 0, $j$371$i = 0, $j$371$i$phi = 0, $k$0$lcssa$i = 0, $k$084$i = 0, $k$095$i = 0, $k$2$i = 0, $k$3$i = 0, $k$462$i = 0, $k$462$i$phi = 0, $k$5$in$us$i = 0, $k$5$in$us48$i = 0, $k$5$us$i = 0, $k$5$us50$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us56$i = 0, $k$628$i = 0, $k$628$i$phi = 0;
 var $lnz$0$lcssa$i = 0, $lnz$079$i = 0, $lnz$092$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i15 = 0, $or$cond106$not = 0, $or$cond11$i = 0, $or$cond12$us$i = 0, $or$cond12$us55$i = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0, $or$cond3$i = 0, $or$cond3$i16 = 0, $or$cond4$i = 0;
 var $or$cond5 = 0, $or$cond7$i = 0, $or$cond789$i = 0, $or$cond8 = 0, $rp$0$lcssa162$i = 0, $rp$060$i = 0, $rp$1$i18 = 0, $rp$2$ph38$i = 0, $rp$3$i$ph = 0, $rp$3$ph33$i = 0, $rp$426$i = 0, $rp$426$i$phi = 0, $rp$5$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0;
 var $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$313$i = 0, $x$313$i$phi = 0, $x$4$lcssa$i = 0, $x$48$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0, $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i24 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$39$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0;
 var $z$0$i = 0, $z$1$ph39$i = 0, $z$1$us$i = 0, $z$1$us45$i = 0, $z$2$us$i = 0, $z$2$us47$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us57$i = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$5$ph$i$phi = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0, u$0 = 0, u$1 = 0, u$2 = 0, u$3 = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $x$i = sp;
 if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $1 = (($f) + 4|0);
 $2 = (($f) + 100|0);
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 1|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP8[$3]|0;
   $8 = $7&255;
   $10 = $8;
  } else {
   $9 = (___shgetc($f)|0);
   $10 = $9;
  }
  $11 = (_isspace(($10|0))|0);
  $12 = ($11|0)==(0);
  if ($12) {
   break;
  }
 }
 $13 = ($10|0)==(45);
 do {
  if ((($10|0) == 43) | (($10|0) == 45)) {
   $14 = $13&1;
   $15 = $14 << 1;
   $16 = (1 - ($15))|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = HEAP32[$2>>2]|0;
   $19 = ($17>>>0)<($18>>>0);
   if ($19) {
    $20 = (($17) + 1|0);
    HEAP32[$1>>2] = $20;
    $21 = HEAP8[$17]|0;
    $22 = $21&255;
    $c$0 = $22;$sign$0 = $16;
    break;
   } else {
    $23 = (___shgetc($f)|0);
    $c$0 = $23;$sign$0 = $16;
    break;
   }
  } else {
   $c$0 = $10;$sign$0 = 1;
  }
 } while(0);
 $c$169 = $c$0;$i$068 = 0;
 while(1) {
  $24 = $c$169 | 32;
  $25 = (18032 + ($i$068)|0);
  $26 = HEAP8[$25]|0;
  $27 = $26 << 24 >> 24;
  $28 = ($24|0)==($27|0);
  if (!($28)) {
   $c$1$lcssa = $c$169;$i$0$lcssa = $i$068;
   break;
  }
  $29 = ($i$068>>>0)<(7);
  do {
   if ($29) {
    $30 = HEAP32[$1>>2]|0;
    $31 = HEAP32[$2>>2]|0;
    $32 = ($30>>>0)<($31>>>0);
    if ($32) {
     $33 = (($30) + 1|0);
     HEAP32[$1>>2] = $33;
     $34 = HEAP8[$30]|0;
     $35 = $34&255;
     $c$2 = $35;
     break;
    } else {
     $36 = (___shgetc($f)|0);
     $c$2 = $36;
     break;
    }
   } else {
    $c$2 = $c$169;
   }
  } while(0);
  $37 = (($i$068) + 1)|0;
  $38 = ($37>>>0)<(8);
  if ($38) {
   $c$169 = $c$2;$i$068 = $37;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $37;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $39 = ($i$0$lcssa>>>0)<(4);
   $40 = ($pok|0)==(0);
   $or$cond = $39 | $40;
   if (!($or$cond)) {
    $41 = ($i$0$lcssa|0)==(8);
    if ($41) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $53 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($53) {
     $c$364 = $c$1$lcssa;$i$263 = 0;
     while(1) {
      $54 = $c$364 | 32;
      $55 = (18048 + ($i$263)|0);
      $56 = HEAP8[$55]|0;
      $57 = $56 << 24 >> 24;
      $58 = ($54|0)==($57|0);
      if (!($58)) {
       $c$5 = $c$364;$i$3 = $i$263;
       break L34;
      }
      $59 = ($i$263>>>0)<(2);
      do {
       if ($59) {
        $60 = HEAP32[$1>>2]|0;
        $61 = HEAP32[$2>>2]|0;
        $62 = ($60>>>0)<($61>>>0);
        if ($62) {
         $63 = (($60) + 1|0);
         HEAP32[$1>>2] = $63;
         $64 = HEAP8[$60]|0;
         $65 = $64&255;
         $c$4 = $65;
         break;
        } else {
         $66 = (___shgetc($f)|0);
         $c$4 = $66;
         break;
        }
       } else {
        $c$4 = $c$364;
       }
      } while(0);
      $67 = (($i$263) + 1)|0;
      $68 = ($67>>>0)<(3);
      if ($68) {
       $c$364 = $c$4;$i$263 = $67;
      } else {
       $c$5 = $c$4;$i$3 = $67;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 3)) {
    $69 = HEAP32[$1>>2]|0;
    $70 = HEAP32[$2>>2]|0;
    $71 = ($69>>>0)<($70>>>0);
    if ($71) {
     $72 = (($69) + 1|0);
     HEAP32[$1>>2] = $72;
     $73 = HEAP8[$69]|0;
     $74 = $73&255;
     $76 = $74;
    } else {
     $75 = (___shgetc($f)|0);
     $76 = $75;
    }
    $77 = ($76|0)==(40);
    if ($77) {
     $i$4 = 1;
    } else {
     $78 = HEAP32[$2>>2]|0;
     $79 = ($78|0)==(0|0);
     if ($79) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $80 = HEAP32[$1>>2]|0;
     $81 = (($80) + -1|0);
     HEAP32[$1>>2] = $81;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    while(1) {
     $82 = HEAP32[$1>>2]|0;
     $83 = HEAP32[$2>>2]|0;
     $84 = ($82>>>0)<($83>>>0);
     if ($84) {
      $85 = (($82) + 1|0);
      HEAP32[$1>>2] = $85;
      $86 = HEAP8[$82]|0;
      $87 = $86&255;
      $89 = $87;
     } else {
      $88 = (___shgetc($f)|0);
      $89 = $88;
     }
     $90 = (($89) + -48)|0;
     $91 = ($90>>>0)<(10);
     $92 = (($89) + -65)|0;
     $93 = ($92>>>0)<(26);
     $or$cond8 = $91 | $93;
     if (!($or$cond8)) {
      $94 = (($89) + -97)|0;
      $95 = ($94>>>0)<(26);
      $96 = ($89|0)==(95);
      $or$cond5 = $95 | $96;
      if (!($or$cond5)) {
       break;
      }
     }
     $108 = (($i$4) + 1)|0;
     $i$4 = $108;
    }
    $97 = ($89|0)==(41);
    if ($97) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $98 = HEAP32[$2>>2]|0;
    $99 = ($98|0)==(0|0);
    if (!($99)) {
     $100 = HEAP32[$1>>2]|0;
     $101 = (($100) + -1|0);
     HEAP32[$1>>2] = $101;
    }
    if ($40) {
     $103 = (___errno_location()|0);
     HEAP32[$103>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $102 = ($i$4|0)==(0);
    $brmerge107 = $102 | $99;
    if ($brmerge107) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    } else {
     $$in = $i$4;
    }
    while(1) {
     $104 = (($$in) + -1)|0;
     $105 = HEAP32[$1>>2]|0;
     $106 = (($105) + -1|0);
     HEAP32[$1>>2] = $106;
     $107 = ($104|0)==(0);
     if ($107) {
      $$0 = nan;
      break;
     } else {
      $$in$phi = $104;$$in = $$in$phi;
     }
    }
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 0)) {
    $114 = ($c$5|0)==(48);
    do {
     if ($114) {
      $115 = HEAP32[$1>>2]|0;
      $116 = HEAP32[$2>>2]|0;
      $117 = ($115>>>0)<($116>>>0);
      if ($117) {
       $118 = (($115) + 1|0);
       HEAP32[$1>>2] = $118;
       $119 = HEAP8[$115]|0;
       $120 = $119&255;
       $122 = $120;
      } else {
       $121 = (___shgetc($f)|0);
       $122 = $121;
      }
      $123 = $122 | 32;
      $124 = ($123|0)==(120);
      if (!($124)) {
       $326 = HEAP32[$2>>2]|0;
       $327 = ($326|0)==(0|0);
       if ($327) {
        $c$6 = 48;
        break;
       }
       $328 = HEAP32[$1>>2]|0;
       $329 = (($328) + -1|0);
       HEAP32[$1>>2] = $329;
       $c$6 = 48;
       break;
      }
      $125 = HEAP32[$1>>2]|0;
      $126 = HEAP32[$2>>2]|0;
      $127 = ($125>>>0)<($126>>>0);
      if ($127) {
       $128 = (($125) + 1|0);
       HEAP32[$1>>2] = $128;
       $129 = HEAP8[$125]|0;
       $130 = $129&255;
       $c$0$i = $130;$gotdig$0$i = 0;
      } else {
       $131 = (___shgetc($f)|0);
       $c$0$i = $131;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        label = 70;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $160 = 0;$161 = 0;$162 = 0;$163 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $132 = HEAP32[$1>>2]|0;
       $133 = HEAP32[$2>>2]|0;
       $134 = ($132>>>0)<($133>>>0);
       if ($134) {
        $135 = (($132) + 1|0);
        HEAP32[$1>>2] = $135;
        $136 = HEAP8[$132]|0;
        $137 = $136&255;
        $c$0$i = $137;$gotdig$0$i = 1;
        continue;
       } else {
        $138 = (___shgetc($f)|0);
        $c$0$i = $138;$gotdig$0$i = 1;
        continue;
       }
      }
      L107: do {
       if ((label|0) == 70) {
        $139 = HEAP32[$1>>2]|0;
        $140 = HEAP32[$2>>2]|0;
        $141 = ($139>>>0)<($140>>>0);
        if ($141) {
         $142 = (($139) + 1|0);
         HEAP32[$1>>2] = $142;
         $143 = HEAP8[$139]|0;
         $144 = $143&255;
         $c$1$ph$i = $144;
        } else {
         $145 = (___shgetc($f)|0);
         $c$1$ph$i = $145;
        }
        $146 = ($c$1$ph$i|0)==(48);
        if ($146) {
         $147 = -1;$148 = -1;
        } else {
         $160 = 0;$161 = 0;$162 = 0;$163 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
         break;
        }
        while(1) {
         $149 = HEAP32[$1>>2]|0;
         $150 = HEAP32[$2>>2]|0;
         $151 = ($149>>>0)<($150>>>0);
         if ($151) {
          $152 = (($149) + 1|0);
          HEAP32[$1>>2] = $152;
          $153 = HEAP8[$149]|0;
          $154 = $153&255;
          $156 = $154;
         } else {
          $155 = (___shgetc($f)|0);
          $156 = $155;
         }
         $157 = ($156|0)==(48);
         if (!($157)) {
          $160 = $147;$161 = $148;$162 = 0;$163 = 0;$c$2$i = $156;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break L107;
         }
         $158 = (_i64Add(($147|0),($148|0),-1,-1)|0);
         $159 = tempRet0;
         $147 = $158;$148 = $159;
        }
       }
      } while(0);
      L120: while(1) {
       $164 = (($c$2$i) + -48)|0;
       $165 = ($164>>>0)<(10);
       do {
        if ($165) {
         $d$0$i = $164;
         label = 84;
        } else {
         $166 = $c$2$i | 32;
         $167 = (($166) + -97)|0;
         $168 = ($167>>>0)<(6);
         $169 = ($c$2$i|0)==(46);
         $or$cond$i = $168 | $169;
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L120;
         }
         if ($169) {
          $170 = ($gotrad$0$i|0)==(0);
          if ($170) {
           $195 = $162;$196 = $163;$197 = $162;$198 = $163;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L120;
          }
         } else {
          $171 = ($c$2$i|0)>(57);
          $172 = (($166) + -87)|0;
          $$38$i = $171 ? $172 : $164;
          $d$0$i = $$38$i;
          label = 84;
          break;
         }
        }
       } while(0);
       if ((label|0) == 84) {
        label = 0;
        $173 = ($163|0)<(0);
        $174 = ($163|0)==(0);
        $175 = ($162>>>0)<(8);
        $176 = $174 & $175;
        $177 = $173 | $176;
        do {
         if ($177) {
          $178 = $x$0$i << 4;
          $179 = (($d$0$i) + ($178))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $179;$y$1$i = $y$0$i;
         } else {
          $180 = ($163|0)<(0);
          $181 = ($163|0)==(0);
          $182 = ($162>>>0)<(14);
          $183 = $181 & $182;
          $184 = $180 | $183;
          if ($184) {
           $185 = (+($d$0$i|0));
           $186 = $scale$0$i * 0.0625;
           $187 = $186 * $185;
           $188 = $y$0$i + $187;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $186;$x$1$i = $x$0$i;$y$1$i = $188;
           break;
          }
          $189 = ($d$0$i|0)!=(0);
          $190 = ($gottail$0$i|0)==(0);
          $or$cond3$i = $189 & $190;
          if (!($or$cond3$i)) {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
           break;
          }
          $191 = $scale$0$i * 0.5;
          $192 = $y$0$i + $191;
          $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $192;
         }
        } while(0);
        $193 = (_i64Add(($162|0),($163|0),1,0)|0);
        $194 = tempRet0;
        $195 = $160;$196 = $161;$197 = $193;$198 = $194;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $199 = HEAP32[$1>>2]|0;
       $200 = HEAP32[$2>>2]|0;
       $201 = ($199>>>0)<($200>>>0);
       if ($201) {
        $202 = (($199) + 1|0);
        HEAP32[$1>>2] = $202;
        $203 = HEAP8[$199]|0;
        $204 = $203&255;
        $160 = $195;$161 = $196;$162 = $197;$163 = $198;$c$2$i = $204;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $205 = (___shgetc($f)|0);
        $160 = $195;$161 = $196;$162 = $197;$163 = $198;$c$2$i = $205;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $206 = ($gotdig$2$i|0)==(0);
      if ($206) {
       $207 = HEAP32[$2>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[$1>>2]|0;
        $210 = (($209) + -1|0);
        HEAP32[$1>>2] = $210;
       }
       do {
        if ($40) {
         ___shlim($f,0);
        } else {
         if ($208) {
          break;
         }
         $211 = HEAP32[$1>>2]|0;
         $212 = (($211) + -1|0);
         HEAP32[$1>>2] = $212;
         $213 = ($gotrad$0$i|0)==(0);
         if ($213) {
          break;
         }
         $214 = (($211) + -2|0);
         HEAP32[$1>>2] = $214;
        }
       } while(0);
       $215 = (+($sign$0|0));
       $216 = $215 * 0.0;
       $$0 = $216;
       STACKTOP = sp;return (+$$0);
      }
      $217 = ($gotrad$0$i|0)==(0);
      $218 = $217 ? $162 : $160;
      $219 = $217 ? $163 : $161;
      $220 = ($163|0)<(0);
      $221 = ($163|0)==(0);
      $222 = ($162>>>0)<(8);
      $223 = $221 & $222;
      $224 = $220 | $223;
      if ($224) {
       $225 = $162;$226 = $163;$x$313$i = $x$0$i;
       while(1) {
        $227 = $x$313$i << 4;
        $228 = (_i64Add(($225|0),($226|0),1,0)|0);
        $229 = tempRet0;
        $230 = ($229|0)<(0);
        $231 = ($229|0)==(0);
        $232 = ($228>>>0)<(8);
        $233 = $231 & $232;
        $234 = $230 | $233;
        if ($234) {
         $x$313$i$phi = $227;$226$phi = $229;$225$phi = $228;$x$313$i = $x$313$i$phi;$226 = $226$phi;$225 = $225$phi;
        } else {
         $x$3$lcssa$i = $227;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      $235 = $c$2$lcssa$i | 32;
      $236 = ($235|0)==(112);
      do {
       if ($236) {
        $237 = (_scanexp($f,$pok)|0);
        $238 = tempRet0;
        $239 = ($237|0)==(0);
        $240 = ($238|0)==(-2147483648);
        $241 = $239 & $240;
        if (!($241)) {
         $250 = $237;$251 = $238;
         break;
        }
        if ($40) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $242 = HEAP32[$2>>2]|0;
         $243 = ($242|0)==(0|0);
         if ($243) {
          $250 = 0;$251 = 0;
          break;
         }
         $244 = HEAP32[$1>>2]|0;
         $245 = (($244) + -1|0);
         HEAP32[$1>>2] = $245;
         $250 = 0;$251 = 0;
         break;
        }
       } else {
        $246 = HEAP32[$2>>2]|0;
        $247 = ($246|0)==(0|0);
        if ($247) {
         $250 = 0;$251 = 0;
         break;
        }
        $248 = HEAP32[$1>>2]|0;
        $249 = (($248) + -1|0);
        HEAP32[$1>>2] = $249;
        $250 = 0;$251 = 0;
       }
      } while(0);
      $252 = (_bitshift64Shl(($218|0),($219|0),2)|0);
      $253 = tempRet0;
      $254 = (_i64Add(($252|0),($253|0),-32,-1)|0);
      $255 = tempRet0;
      $256 = (_i64Add(($254|0),($255|0),($250|0),($251|0))|0);
      $257 = tempRet0;
      $258 = ($x$3$lcssa$i|0)==(0);
      if ($258) {
       $259 = (+($sign$0|0));
       $260 = $259 * 0.0;
       $$0 = $260;
       STACKTOP = sp;return (+$$0);
      }
      $261 = (0 - ($emin$0$ph))|0;
      $262 = ($257|0)>(0);
      $263 = ($257|0)==(0);
      $264 = ($256>>>0)>($261>>>0);
      $265 = $263 & $264;
      $266 = $262 | $265;
      if ($266) {
       $267 = (___errno_location()|0);
       HEAP32[$267>>2] = 34;
       $268 = (+($sign$0|0));
       $269 = $268 * 1.79769313486231570815E+308;
       $270 = $269 * 1.79769313486231570815E+308;
       $$0 = $270;
       STACKTOP = sp;return (+$$0);
      }
      $271 = (($emin$0$ph) + -106)|0;
      $272 = ($271|0)<(0);
      $273 = $272 << 31 >> 31;
      $274 = ($257|0)<($273|0);
      $275 = ($257|0)==($273|0);
      $276 = ($256>>>0)<($271>>>0);
      $277 = $275 & $276;
      $278 = $274 | $277;
      if ($278) {
       $280 = (___errno_location()|0);
       HEAP32[$280>>2] = 34;
       $281 = (+($sign$0|0));
       $282 = $281 * 2.22507385850720138309E-308;
       $283 = $282 * 2.22507385850720138309E-308;
       $$0 = $283;
       STACKTOP = sp;return (+$$0);
      }
      $279 = ($x$3$lcssa$i|0)>(-1);
      if ($279) {
       $284 = $256;$285 = $257;$x$48$i = $x$3$lcssa$i;$y$39$i = $y$0$i;
       while(1) {
        $286 = !($y$39$i >= 0.5);
        $287 = $x$48$i << 1;
        if ($286) {
         $$pn$i = $y$39$i;$x$5$i = $287;
        } else {
         $288 = $287 | 1;
         $289 = $y$39$i + -1.0;
         $$pn$i = $289;$x$5$i = $288;
        }
        $y$4$i = $y$39$i + $$pn$i;
        $290 = (_i64Add(($284|0),($285|0),-1,-1)|0);
        $291 = tempRet0;
        $292 = ($x$5$i|0)>(-1);
        if ($292) {
         $284 = $290;$285 = $291;$x$48$i = $x$5$i;$y$39$i = $y$4$i;
        } else {
         $293 = $290;$294 = $291;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $293 = $256;$294 = $257;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      $295 = ($emin$0$ph|0)<(0);
      $296 = $295 << 31 >> 31;
      $297 = (_i64Subtract(32,0,($emin$0$ph|0),($296|0))|0);
      $298 = tempRet0;
      $299 = (_i64Add(($293|0),($294|0),($297|0),($298|0))|0);
      $300 = tempRet0;
      $301 = (0)>($300|0);
      $302 = (0)==($300|0);
      $303 = ($bits$0$ph>>>0)>($299>>>0);
      $304 = $302 & $303;
      $305 = $301 | $304;
      if ($305) {
       $306 = ($299|0)<(0);
       $$$i = $306 ? 0 : $299;
       $$02$i = $$$i;
      } else {
       $$02$i = $bits$0$ph;
      }
      $307 = ($$02$i|0)<(53);
      do {
       if ($307) {
        $308 = (84 - ($$02$i))|0;
        $309 = (+_scalbn(1.0,$308));
        $310 = (+($sign$0|0));
        $311 = (+_copysign((+$309),(+$310)));
        $312 = ($$02$i|0)<(32);
        $313 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $312 & $313;
        if (!($or$cond4$i)) {
         $$pre$phi$iZ2D = $310;$bias$07$i = $311;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
         break;
        }
        $314 = $x$4$lcssa$i & 1;
        $315 = ($314|0)==(0);
        $316 = $314 ^ 1;
        $$x$4$i = (($316) + ($x$4$lcssa$i))|0;
        $$y$3$i = $315 ? 0.0 : $y$3$lcssa$i;
        $$pre$phi$iZ2D = $310;$bias$07$i = $311;$x$6$i = $$x$4$i;$y$5$i = $$y$3$i;
       } else {
        $$pre$i = (+($sign$0|0));
        $$pre$phi$iZ2D = $$pre$i;$bias$07$i = 0.0;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
       }
      } while(0);
      $317 = (+($x$6$i>>>0));
      $318 = $$pre$phi$iZ2D * $317;
      $319 = $bias$07$i + $318;
      $320 = $$pre$phi$iZ2D * $y$5$i;
      $321 = $320 + $319;
      $322 = $321 - $bias$07$i;
      $323 = $322 != 0.0;
      if (!($323)) {
       $324 = (___errno_location()|0);
       HEAP32[$324>>2] = 34;
      }
      $325 = (+_scalbnl($322,$293));
      $$0 = $325;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $330 = $x$i;
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $331 = (0 - ($sum$i))|0;
    $$08$i = $c$6;$gotdig$0$i9 = 0;
    while(1) {
     if ((($$08$i|0) == 46)) {
      label = 139;
      break;
     } else if (!((($$08$i|0) == 48))) {
      $$2$i = $$08$i;$359 = 0;$360 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 0;
      break;
     }
     $332 = HEAP32[$1>>2]|0;
     $333 = HEAP32[$2>>2]|0;
     $334 = ($332>>>0)<($333>>>0);
     if ($334) {
      $335 = (($332) + 1|0);
      HEAP32[$1>>2] = $335;
      $336 = HEAP8[$332]|0;
      $337 = $336&255;
      $$08$i = $337;$gotdig$0$i9 = 1;
      continue;
     } else {
      $338 = (___shgetc($f)|0);
      $$08$i = $338;$gotdig$0$i9 = 1;
      continue;
     }
    }
    L209: do {
     if ((label|0) == 139) {
      $339 = HEAP32[$1>>2]|0;
      $340 = HEAP32[$2>>2]|0;
      $341 = ($339>>>0)<($340>>>0);
      if ($341) {
       $342 = (($339) + 1|0);
       HEAP32[$1>>2] = $342;
       $343 = HEAP8[$339]|0;
       $344 = $343&255;
       $$1$ph$i = $344;
      } else {
       $345 = (___shgetc($f)|0);
       $$1$ph$i = $345;
      }
      $346 = ($$1$ph$i|0)==(48);
      if ($346) {
       $347 = -1;$348 = -1;
      } else {
       $$2$i = $$1$ph$i;$359 = 0;$360 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 1;
       break;
      }
      while(1) {
       $349 = HEAP32[$1>>2]|0;
       $350 = HEAP32[$2>>2]|0;
       $351 = ($349>>>0)<($350>>>0);
       if ($351) {
        $352 = (($349) + 1|0);
        HEAP32[$1>>2] = $352;
        $353 = HEAP8[$349]|0;
        $354 = $353&255;
        $$1$be$i = $354;
       } else {
        $355 = (___shgetc($f)|0);
        $$1$be$i = $355;
       }
       $356 = ($$1$be$i|0)==(48);
       if (!($356)) {
        $$2$i = $$1$be$i;$359 = $347;$360 = $348;$gotdig$2$i11 = 1;$gotrad$0$i12 = 1;
        break L209;
       }
       $357 = (_i64Add(($347|0),($348|0),-1,-1)|0);
       $358 = tempRet0;
       $347 = $357;$348 = $358;
      }
     }
    } while(0);
    $361 = ($x$i);
    HEAP32[$361>>2] = 0;
    $362 = (($$2$i) + -48)|0;
    $363 = ($362>>>0)<(10);
    $364 = ($$2$i|0)==(46);
    $or$cond789$i = $363 | $364;
    L223: do {
     if ($or$cond789$i) {
      $365 = (($x$i) + 496|0);
      $$397$i = $$2$i;$366 = $364;$367 = $362;$368 = 0;$369 = 0;$370 = $359;$371 = $360;$gotdig$393$i = $gotdig$2$i11;$gotrad$194$i = $gotrad$0$i12;$j$096$i = 0;$k$095$i = 0;$lnz$092$i = 0;
      while(1) {
       do {
        if ($366) {
         $cond$i = ($gotrad$194$i|0)==(0);
         if ($cond$i) {
          $387 = $368;$388 = $369;$389 = $368;$390 = $369;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = 1;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
         } else {
          $$388$i = $$397$i;$408 = $368;$409 = $369;$410 = $370;$411 = $371;$gotdig$381$i = $gotdig$393$i;$j$086$i = $j$096$i;$k$084$i = $k$095$i;$lnz$079$i = $lnz$092$i;
          break L223;
         }
        } else {
         $372 = ($k$095$i|0)<(125);
         $373 = (_i64Add(($368|0),($369|0),1,0)|0);
         $374 = tempRet0;
         $375 = ($$397$i|0)!=(48);
         if (!($372)) {
          if (!($375)) {
           $387 = $370;$388 = $371;$389 = $373;$390 = $374;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
           break;
          }
          $385 = HEAP32[$365>>2]|0;
          $386 = $385 | 1;
          HEAP32[$365>>2] = $386;
          $387 = $370;$388 = $371;$389 = $373;$390 = $374;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
          break;
         }
         $$lnz$0$i = $375 ? $373 : $lnz$092$i;
         $376 = ($j$096$i|0)==(0);
         $377 = (($x$i) + ($k$095$i<<2)|0);
         if ($376) {
          $storemerge$i = $367;
         } else {
          $378 = HEAP32[$377>>2]|0;
          $379 = ($378*10)|0;
          $380 = (($$397$i) + -48)|0;
          $381 = (($380) + ($379))|0;
          $storemerge$i = $381;
         }
         HEAP32[$377>>2] = $storemerge$i;
         $382 = (($j$096$i) + 1)|0;
         $383 = ($382|0)==(9);
         $384 = $383&1;
         $$k$0$i = (($384) + ($k$095$i))|0;
         $$10$i = $383 ? 0 : $382;
         $387 = $370;$388 = $371;$389 = $373;$390 = $374;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$194$i;$j$2$i = $$10$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $391 = HEAP32[$1>>2]|0;
       $392 = HEAP32[$2>>2]|0;
       $393 = ($391>>>0)<($392>>>0);
       if ($393) {
        $394 = (($391) + 1|0);
        HEAP32[$1>>2] = $394;
        $395 = HEAP8[$391]|0;
        $396 = $395&255;
        $$3$be$i = $396;
       } else {
        $397 = (___shgetc($f)|0);
        $$3$be$i = $397;
       }
       $398 = (($$3$be$i) + -48)|0;
       $399 = ($398>>>0)<(10);
       $400 = ($$3$be$i|0)==(46);
       $or$cond7$i = $399 | $400;
       if ($or$cond7$i) {
        $$397$i = $$3$be$i;$366 = $400;$367 = $398;$368 = $389;$369 = $390;$370 = $387;$371 = $388;$gotdig$393$i = $gotdig$4$i;$gotrad$194$i = $gotrad$2$i;$j$096$i = $j$2$i;$k$095$i = $k$2$i;$lnz$092$i = $lnz$2$i;
       } else {
        $$3$lcssa$i = $$3$be$i;$401 = $389;$402 = $390;$403 = $387;$404 = $388;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 162;
        break;
       }
      }
     } else {
      $$3$lcssa$i = $$2$i;$401 = 0;$402 = 0;$403 = $359;$404 = $360;$gotdig$3$lcssa$i = $gotdig$2$i11;$gotrad$1$lcssa$i = $gotrad$0$i12;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 162;
     }
    } while(0);
    if ((label|0) == 162) {
     $405 = ($gotrad$1$lcssa$i|0)==(0);
     $406 = $405 ? $401 : $403;
     $407 = $405 ? $402 : $404;
     $$388$i = $$3$lcssa$i;$408 = $401;$409 = $402;$410 = $406;$411 = $407;$gotdig$381$i = $gotdig$3$lcssa$i;$j$086$i = $j$0$lcssa$i;$k$084$i = $k$0$lcssa$i;$lnz$079$i = $lnz$0$lcssa$i;
    }
    $412 = ($gotdig$381$i|0)!=(0);
    do {
     if ($412) {
      $413 = $$388$i | 32;
      $414 = ($413|0)==(101);
      if (!($414)) {
       label = 171;
       break;
      }
      $415 = (_scanexp($f,$pok)|0);
      $416 = tempRet0;
      $417 = ($415|0)==(0);
      $418 = ($416|0)==(-2147483648);
      $419 = $417 & $418;
      do {
       if ($419) {
        if ($40) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $420 = HEAP32[$2>>2]|0;
         $421 = ($420|0)==(0|0);
         if ($421) {
          $424 = 0;$425 = 0;
          break;
         }
         $422 = HEAP32[$1>>2]|0;
         $423 = (($422) + -1|0);
         HEAP32[$1>>2] = $423;
         $424 = 0;$425 = 0;
         break;
        }
       } else {
        $424 = $415;$425 = $416;
       }
      } while(0);
      $426 = (_i64Add(($424|0),($425|0),($410|0),($411|0))|0);
      $427 = tempRet0;
      $433 = $426;$434 = $427;
     } else {
      label = 171;
     }
    } while(0);
    do {
     if ((label|0) == 171) {
      $428 = ($$388$i|0)>(-1);
      if (!($428)) {
       $433 = $410;$434 = $411;
       break;
      }
      $429 = HEAP32[$2>>2]|0;
      $430 = ($429|0)==(0|0);
      if ($430) {
       $433 = $410;$434 = $411;
       break;
      }
      $431 = HEAP32[$1>>2]|0;
      $432 = (($431) + -1|0);
      HEAP32[$1>>2] = $432;
      $433 = $410;$434 = $411;
     }
    } while(0);
    if (!($412)) {
     $435 = (___errno_location()|0);
     HEAP32[$435>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $436 = HEAP32[$361>>2]|0;
    $437 = ($436|0)==(0);
    if ($437) {
     $438 = (+($sign$0|0));
     $439 = $438 * 0.0;
     $$0 = $439;
     STACKTOP = sp;return (+$$0);
    }
    $440 = ($433|0)==($408|0);
    $441 = ($434|0)==($409|0);
    $442 = $440 & $441;
    $443 = ($409|0)<(0);
    $444 = ($409|0)==(0);
    $445 = ($408>>>0)<(10);
    $446 = $444 & $445;
    $447 = $443 | $446;
    $or$cond$i15 = $442 & $447;
    do {
     if ($or$cond$i15) {
      $448 = ($bits$0$ph>>>0)>(30);
      if (!($448)) {
       $449 = $436 >>> $bits$0$ph;
       $450 = ($449|0)==(0);
       if (!($450)) {
        break;
       }
      }
      $451 = (+($sign$0|0));
      $452 = (+($436>>>0));
      $453 = $451 * $452;
      $$0 = $453;
      STACKTOP = sp;return (+$$0);
     }
    } while(0);
    $454 = (($emin$0$ph|0) / -2)&-1;
    $455 = ($454|0)<(0);
    $456 = $455 << 31 >> 31;
    $457 = ($434|0)>($456|0);
    $458 = ($434|0)==($456|0);
    $459 = ($433>>>0)>($454>>>0);
    $460 = $458 & $459;
    $461 = $457 | $460;
    if ($461) {
     $462 = (___errno_location()|0);
     HEAP32[$462>>2] = 34;
     $463 = (+($sign$0|0));
     $464 = $463 * 1.79769313486231570815E+308;
     $465 = $464 * 1.79769313486231570815E+308;
     $$0 = $465;
     STACKTOP = sp;return (+$$0);
    }
    $466 = (($emin$0$ph) + -106)|0;
    $467 = ($466|0)<(0);
    $468 = $467 << 31 >> 31;
    $469 = ($434|0)<($468|0);
    $470 = ($434|0)==($468|0);
    $471 = ($433>>>0)<($466>>>0);
    $472 = $470 & $471;
    $473 = $469 | $472;
    if ($473) {
     $474 = (___errno_location()|0);
     HEAP32[$474>>2] = 34;
     $475 = (+($sign$0|0));
     $476 = $475 * 2.22507385850720138309E-308;
     $477 = $476 * 2.22507385850720138309E-308;
     $$0 = $477;
     STACKTOP = sp;return (+$$0);
    }
    $478 = ($j$086$i|0)==(0);
    if ($478) {
     $k$3$i = $k$084$i;
    } else {
     $479 = ($j$086$i|0)<(9);
     if ($479) {
      $480 = (($x$i) + ($k$084$i<<2)|0);
      $$promoted$i = HEAP32[$480>>2]|0;
      $481 = $$promoted$i;$j$371$i = $j$086$i;
      while(1) {
       $482 = ($481*10)|0;
       $483 = (($j$371$i) + 1)|0;
       $exitcond$i = ($483|0)==(9);
       if ($exitcond$i) {
        break;
       } else {
        $j$371$i$phi = $483;$481$phi = $482;$j$371$i = $j$371$i$phi;$481 = $481$phi;
       }
      }
      HEAP32[$480>>2] = $482;
     }
     $484 = (($k$084$i) + 1)|0;
     $k$3$i = $484;
    }
    $485 = ($lnz$079$i|0)<(9);
    do {
     if ($485) {
      $486 = ($lnz$079$i|0)<=($433|0);
      $487 = ($433|0)<(18);
      $or$cond3$i16 = $486 & $487;
      if (!($or$cond3$i16)) {
       break;
      }
      $488 = ($433|0)==(9);
      if ($488) {
       $489 = (+($sign$0|0));
       $490 = HEAP32[$361>>2]|0;
       $491 = (+($490>>>0));
       $492 = $489 * $491;
       $$0 = $492;
       STACKTOP = sp;return (+$$0);
      }
      $493 = ($433|0)<(9);
      if ($493) {
       $494 = (+($sign$0|0));
       $495 = HEAP32[$361>>2]|0;
       $496 = (+($495>>>0));
       $497 = $494 * $496;
       $498 = (8 - ($433))|0;
       $499 = ((18064) + ($498<<2)|0);
       $500 = HEAP32[$499>>2]|0;
       $501 = (+($500|0));
       $502 = $497 / $501;
       $$0 = $502;
       STACKTOP = sp;return (+$$0);
      }
      $503 = Math_imul($433, -3)|0;
      $$neg20$i = (($bits$0$ph) + 27)|0;
      $504 = (($$neg20$i) + ($503))|0;
      $505 = ($504|0)>(30);
      $$pre$i17 = HEAP32[$361>>2]|0;
      if (!($505)) {
       $506 = $$pre$i17 >>> $504;
       $507 = ($506|0)==(0);
       if (!($507)) {
        break;
       }
      }
      $508 = (+($sign$0|0));
      $509 = (+($$pre$i17>>>0));
      $510 = $508 * $509;
      $511 = (($433) + -10)|0;
      $512 = ((18064) + ($511<<2)|0);
      $513 = HEAP32[$512>>2]|0;
      $514 = (+($513|0));
      $515 = $510 * $514;
      $$0 = $515;
      STACKTOP = sp;return (+$$0);
     }
    } while(0);
    $516 = (($433|0) % 9)&-1;
    $517 = ($516|0)==(0);
    if ($517) {
     $a$2$ph40$i = 0;$e2$0$ph$i = 0;$rp$2$ph38$i = $433;$z$1$ph39$i = $k$3$i;
    } else {
     $518 = ($433|0)>(-1);
     $519 = (($516) + 9)|0;
     $520 = $518 ? $516 : $519;
     $521 = (8 - ($520))|0;
     $522 = ((18064) + ($521<<2)|0);
     $523 = HEAP32[$522>>2]|0;
     $524 = ($k$3$i|0)==(0);
     do {
      if ($524) {
       $a$0$lcssa161$i = 0;$rp$0$lcssa162$i = $433;$z$0$i = 0;
      } else {
       $525 = (1000000000 / ($523|0))&-1;
       $a$061$i = 0;$carry$063$i = 0;$k$462$i = 0;$rp$060$i = $433;
       while(1) {
        $526 = (($x$i) + ($k$462$i<<2)|0);
        $527 = HEAP32[$526>>2]|0;
        $528 = (($527>>>0) % ($523>>>0))&-1;
        $529 = (($527>>>0) / ($523>>>0))&-1;
        $530 = (($529) + ($carry$063$i))|0;
        HEAP32[$526>>2] = $530;
        $531 = Math_imul($528, $525)|0;
        $532 = ($k$462$i|0)==($a$061$i|0);
        $533 = ($530|0)==(0);
        $or$cond11$i = $532 & $533;
        $534 = (($k$462$i) + 1)|0;
        if ($or$cond11$i) {
         $535 = $534 & 127;
         $536 = (($rp$060$i) + -9)|0;
         $a$1$i = $535;$rp$1$i18 = $536;
        } else {
         $a$1$i = $a$061$i;$rp$1$i18 = $rp$060$i;
        }
        $537 = ($534|0)==($k$3$i|0);
        if ($537) {
         break;
        } else {
         $k$462$i$phi = $534;$carry$063$i$phi = $531;$a$061$i = $a$1$i;$rp$060$i = $rp$1$i18;$k$462$i = $k$462$i$phi;$carry$063$i = $carry$063$i$phi;
        }
       }
       $538 = ($531|0)==(0);
       if ($538) {
        $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $k$3$i;
        break;
       }
       $539 = (($k$3$i) + 1)|0;
       $540 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$540>>2] = $531;
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $539;
      }
     } while(0);
     $541 = (9 - ($520))|0;
     $542 = (($541) + ($rp$0$lcssa162$i))|0;
     $a$2$ph40$i = $a$0$lcssa161$i;$e2$0$ph$i = 0;$rp$2$ph38$i = $542;$z$1$ph39$i = $z$0$i;
    }
    L321: while(1) {
     $543 = ($rp$2$ph38$i|0)<(18);
     $544 = (($x$i) + ($a$2$ph40$i<<2)|0);
     if ($543) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph39$i;
      while(1) {
       $546 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $546;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $547 = (($x$i) + ($k$5$us$i<<2)|0);
        $548 = HEAP32[$547>>2]|0;
        $549 = (_bitshift64Shl(($548|0),0,29)|0);
        $550 = tempRet0;
        $551 = (_i64Add(($549|0),($550|0),($carry1$0$us$i|0),0)|0);
        $552 = tempRet0;
        $553 = ($552>>>0)>(0);
        $554 = ($552|0)==(0);
        $555 = ($551>>>0)>(1000000000);
        $556 = $554 & $555;
        $557 = $553 | $556;
        if ($557) {
         $558 = (___udivdi3(($551|0),($552|0),1000000000,0)|0);
         u$0 = tempRet0;
         $559 = (___uremdi3(($551|0),($552|0),1000000000,0)|0);
         u$1 = tempRet0;
         $$sink$off0$us$i = $559;$carry1$1$us$i = $558;
        } else {
         $$sink$off0$us$i = $551;$carry1$1$us$i = 0;
        }
        HEAP32[$547>>2] = $$sink$off0$us$i;
        $560 = (($z$2$us$i) + 127)|0;
        $561 = $560 & 127;
        $562 = ($k$5$us$i|0)!=($561|0);
        $563 = ($k$5$us$i|0)==($a$2$ph40$i|0);
        $or$cond12$us$i = $562 | $563;
        if ($or$cond12$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $564 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $564 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $565 = (($k$5$us$i) + -1)|0;
        if ($563) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $565;$z$2$us$i = $z$3$us$i;
        }
       }
       $566 = (($e2$0$us$i) + -29)|0;
       $567 = ($carry1$1$us$i|0)==(0);
       if ($567) {
        $e2$0$us$i = $566;$z$1$us$i = $z$3$us$i;
       } else {
        $$lcssa43$i = $566;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $545 = ($rp$2$ph38$i|0)==(18);
      if ($545) {
       $e2$0$us44$i = $e2$0$ph$i;$z$1$us45$i = $z$1$ph39$i;
      } else {
       $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph33$i = $rp$2$ph38$i;$z$5$ph$i = $z$1$ph39$i;
       break;
      }
      while(1) {
       $568 = HEAP32[$544>>2]|0;
       $569 = ($568>>>0)<(9007199);
       if (!($569)) {
        $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$us44$i;$rp$3$ph33$i = 18;$z$5$ph$i = $z$1$us45$i;
        break L321;
       }
       $570 = (($z$1$us45$i) + 127)|0;
       $carry1$0$us49$i = 0;$k$5$in$us48$i = $570;$z$2$us47$i = $z$1$us45$i;
       while(1) {
        $k$5$us50$i = $k$5$in$us48$i & 127;
        $571 = (($x$i) + ($k$5$us50$i<<2)|0);
        $572 = HEAP32[$571>>2]|0;
        $573 = (_bitshift64Shl(($572|0),0,29)|0);
        $574 = tempRet0;
        $575 = (_i64Add(($573|0),($574|0),($carry1$0$us49$i|0),0)|0);
        $576 = tempRet0;
        $577 = ($576>>>0)>(0);
        $578 = ($576|0)==(0);
        $579 = ($575>>>0)>(1000000000);
        $580 = $578 & $579;
        $581 = $577 | $580;
        if ($581) {
         $582 = (___udivdi3(($575|0),($576|0),1000000000,0)|0);
         u$2 = tempRet0;
         $583 = (___uremdi3(($575|0),($576|0),1000000000,0)|0);
         u$3 = tempRet0;
         $$sink$off0$us53$i = $583;$carry1$1$us54$i = $582;
        } else {
         $$sink$off0$us53$i = $575;$carry1$1$us54$i = 0;
        }
        HEAP32[$571>>2] = $$sink$off0$us53$i;
        $584 = (($z$2$us47$i) + 127)|0;
        $585 = $584 & 127;
        $586 = ($k$5$us50$i|0)!=($585|0);
        $587 = ($k$5$us50$i|0)==($a$2$ph40$i|0);
        $or$cond12$us55$i = $586 | $587;
        if ($or$cond12$us55$i) {
         $z$3$us57$i = $z$2$us47$i;
        } else {
         $588 = ($$sink$off0$us53$i|0)==(0);
         $k$5$z$2$us56$i = $588 ? $k$5$us50$i : $z$2$us47$i;
         $z$3$us57$i = $k$5$z$2$us56$i;
        }
        $589 = (($k$5$us50$i) + -1)|0;
        if ($587) {
         break;
        } else {
         $carry1$0$us49$i = $carry1$1$us54$i;$k$5$in$us48$i = $589;$z$2$us47$i = $z$3$us57$i;
        }
       }
       $590 = (($e2$0$us44$i) + -29)|0;
       $591 = ($carry1$1$us54$i|0)==(0);
       if ($591) {
        $e2$0$us44$i = $590;$z$1$us45$i = $z$3$us57$i;
       } else {
        $$lcssa43$i = $590;$carry1$1$lcssa$lcssa$i = $carry1$1$us54$i;$z$3$lcssa$lcssa$i = $z$3$us57$i;
        break;
       }
      }
     }
     $592 = (($rp$2$ph38$i) + 9)|0;
     $593 = (($a$2$ph40$i) + 127)|0;
     $594 = $593 & 127;
     $595 = ($594|0)==($z$3$lcssa$lcssa$i|0);
     if ($595) {
      $596 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $597 = $596 & 127;
      $598 = (($x$i) + ($597<<2)|0);
      $599 = HEAP32[$598>>2]|0;
      $600 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $601 = $600 & 127;
      $602 = (($x$i) + ($601<<2)|0);
      $603 = HEAP32[$602>>2]|0;
      $604 = $603 | $599;
      HEAP32[$602>>2] = $604;
      $z$4$i = $597;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $605 = (($x$i) + ($594<<2)|0);
     HEAP32[$605>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph40$i = $594;$e2$0$ph$i = $$lcssa43$i;$rp$2$ph38$i = $592;$z$1$ph39$i = $z$4$i;
    }
    L352: while(1) {
     $640 = (($z$5$ph$i) + 1)|0;
     $641 = $640 & 127;
     $642 = (($z$5$ph$i) + 127)|0;
     $643 = $642 & 127;
     $644 = (($x$i) + ($643<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph33$i;
     while(1) {
      $645 = ($rp$3$i$ph|0)==(18);
      $646 = ($rp$3$i$ph|0)>(27);
      $$14$i = $646 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$025$i = 0;
       while(1) {
        $607 = (($i$025$i) + ($a$3$i))|0;
        $608 = $607 & 127;
        $609 = ($608|0)==($z$5$ph$i|0);
        if ($609) {
         $i$1$i = 2;
         break;
        }
        $610 = (($x$i) + ($608<<2)|0);
        $611 = HEAP32[$610>>2]|0;
        $612 = ((18056) + ($i$025$i<<2)|0);
        $613 = HEAP32[$612>>2]|0;
        $614 = ($611>>>0)<($613>>>0);
        if ($614) {
         $i$1$i = 2;
         break;
        }
        $615 = ($611>>>0)>($613>>>0);
        $616 = (($i$025$i) + 1)|0;
        if ($615) {
         $i$1$i = $i$025$i;
         break;
        }
        $606 = ($616|0)<(2);
        if ($606) {
         $i$025$i = $616;
        } else {
         $i$1$i = $616;
         break;
        }
       }
       $617 = ($i$1$i|0)==(2);
       $or$cond13$i = $617 & $645;
       if ($or$cond13$i) {
        break L352;
       }
       $620 = (($$14$i) + ($e2$1$i))|0;
       $621 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($621) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $620;
       } else {
        break;
       }
      }
      $622 = 1 << $$14$i;
      $623 = (($622) + -1)|0;
      $624 = 1000000000 >>> $$14$i;
      $a$427$i = $a$3$i;$carry3$030$i = 0;$k$628$i = $a$3$i;$rp$426$i = $rp$3$i$ph;
      while(1) {
       $625 = (($x$i) + ($k$628$i<<2)|0);
       $626 = HEAP32[$625>>2]|0;
       $627 = $626 & $623;
       $628 = $626 >>> $$14$i;
       $629 = (($628) + ($carry3$030$i))|0;
       HEAP32[$625>>2] = $629;
       $630 = Math_imul($627, $624)|0;
       $631 = ($k$628$i|0)==($a$427$i|0);
       $632 = ($629|0)==(0);
       $or$cond15$i = $631 & $632;
       $633 = (($k$628$i) + 1)|0;
       $634 = $633 & 127;
       $635 = (($rp$426$i) + -9)|0;
       $rp$5$i = $or$cond15$i ? $635 : $rp$426$i;
       $a$5$i = $or$cond15$i ? $634 : $a$427$i;
       $636 = ($634|0)==($z$5$ph$i|0);
       if ($636) {
        break;
       } else {
        $rp$426$i$phi = $rp$5$i;$k$628$i$phi = $634;$carry3$030$i$phi = $630;$a$427$i$phi = $a$5$i;$rp$426$i = $rp$426$i$phi;$k$628$i = $k$628$i$phi;$carry3$030$i = $carry3$030$i$phi;$a$427$i = $a$427$i$phi;
       }
      }
      $637 = ($630|0)==(0);
      if ($637) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $620;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $638 = ($641|0)==($a$5$i|0);
      if (!($638)) {
       break;
      }
      $647 = HEAP32[$644>>2]|0;
      $648 = $647 | 1;
      HEAP32[$644>>2] = $648;
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $620;$rp$3$i$ph = $rp$5$i;
     }
     $639 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$639>>2] = $630;
     $z$5$ph$i$phi = $641;$a$3$ph$i = $a$5$i;$e2$1$ph$i = $620;$rp$3$ph33$i = $rp$5$i;$z$5$ph$i = $z$5$ph$i$phi;
    }
    $618 = $a$3$i & 127;
    $619 = ($618|0)==($z$5$ph$i|0);
    if ($619) {
     $649 = (($641) + -1)|0;
     $650 = (($x$i) + ($649<<2)|0);
     HEAP32[$650>>2] = 0;
     $z$7$i = $641;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $651 = (($x$i) + ($618<<2)|0);
    $652 = HEAP32[$651>>2]|0;
    $653 = (+($652>>>0));
    $654 = (($a$3$i) + 1)|0;
    $655 = $654 & 127;
    $656 = ($655|0)==($z$7$i|0);
    if ($656) {
     $711 = (($z$7$i) + 1)|0;
     $712 = $711 & 127;
     $713 = (($712) + -1)|0;
     $714 = (($x$i) + ($713<<2)|0);
     HEAP32[$714>>2] = 0;
     $z$7$1$i = $712;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $715 = $653 * 1.0E+9;
    $716 = (($x$i) + ($655<<2)|0);
    $717 = HEAP32[$716>>2]|0;
    $718 = (+($717>>>0));
    $719 = $715 + $718;
    $720 = (+($sign$0|0));
    $721 = $720 * $719;
    $722 = (($e2$1$i) + 53)|0;
    $723 = (($722) - ($emin$0$ph))|0;
    $724 = ($723|0)<($bits$0$ph|0);
    if ($724) {
     $657 = ($723|0)<(0);
     $$$i22 = $657 ? 0 : $723;
     $$09$i = $$$i22;$denormal$0$i = 1;
    } else {
     $$09$i = $bits$0$ph;$denormal$0$i = 0;
    }
    $658 = ($$09$i|0)<(53);
    if ($658) {
     $659 = (105 - ($$09$i))|0;
     $660 = (+_scalbn(1.0,$659));
     $661 = (+_copysign((+$660),(+$721)));
     $662 = (53 - ($$09$i))|0;
     $663 = (+_scalbn(1.0,$662));
     $664 = (+_fmod((+$721),(+$663)));
     $665 = $721 - $664;
     $666 = $661 + $665;
     $bias$0$i = $661;$frac$0$i = $664;$y$1$i23 = $666;
    } else {
     $bias$0$i = 0.0;$frac$0$i = 0.0;$y$1$i23 = $721;
    }
    $667 = (($a$3$i) + 2)|0;
    $668 = $667 & 127;
    $669 = ($668|0)==($z$7$1$i|0);
    do {
     if ($669) {
      $frac$2$i = $frac$0$i;
     } else {
      $670 = (($x$i) + ($668<<2)|0);
      $671 = HEAP32[$670>>2]|0;
      $672 = ($671>>>0)<(500000000);
      do {
       if ($672) {
        $673 = ($671|0)==(0);
        if ($673) {
         $674 = (($a$3$i) + 3)|0;
         $675 = $674 & 127;
         $676 = ($675|0)==($z$7$1$i|0);
         if ($676) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $677 = $720 * 0.25;
        $678 = $677 + $frac$0$i;
        $frac$1$i = $678;
       } else {
        $679 = ($671>>>0)>(500000000);
        if ($679) {
         $680 = $720 * 0.75;
         $681 = $680 + $frac$0$i;
         $frac$1$i = $681;
         break;
        }
        $682 = (($a$3$i) + 3)|0;
        $683 = $682 & 127;
        $684 = ($683|0)==($z$7$1$i|0);
        if ($684) {
         $685 = $720 * 0.5;
         $686 = $685 + $frac$0$i;
         $frac$1$i = $686;
         break;
        } else {
         $687 = $720 * 0.75;
         $688 = $687 + $frac$0$i;
         $frac$1$i = $688;
         break;
        }
       }
      } while(0);
      $689 = (53 - ($$09$i))|0;
      $690 = ($689|0)>(1);
      if (!($690)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $691 = (+_fmod((+$frac$1$i),1.0));
      $692 = $691 != 0.0;
      if ($692) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $693 = $frac$1$i + 1.0;
      $frac$2$i = $693;
     }
    } while(0);
    $694 = $y$1$i23 + $frac$2$i;
    $695 = $694 - $bias$0$i;
    $696 = $722 & 2147483647;
    $697 = (-2 - ($sum$i))|0;
    $698 = ($696|0)>($697|0);
    do {
     if ($698) {
      $699 = (+Math_abs((+$695)));
      $700 = !($699 >= 9007199254740992.0);
      if ($700) {
       $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i;$y$2$i24 = $695;
      } else {
       $701 = ($denormal$0$i|0)!=(0);
       $702 = ($$09$i|0)==($723|0);
       $or$cond16$i = $701 & $702;
       $denormal$1$i = $or$cond16$i ? 0 : $denormal$0$i;
       $703 = $695 * 0.5;
       $704 = (($e2$1$i) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $704;$y$2$i24 = $703;
      }
      $705 = (($e2$2$i) + 50)|0;
      $706 = ($705|0)>($331|0);
      if (!($706)) {
       $707 = ($denormal$2$i|0)!=(0);
       $708 = $frac$2$i != 0.0;
       $or$cond17$i = $707 & $708;
       if (!($or$cond17$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
        break;
       }
      }
      $709 = (___errno_location()|0);
      HEAP32[$709>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $695;
     }
    } while(0);
    $710 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $710;
    STACKTOP = sp;return (+$$0);
   } else {
    $109 = HEAP32[$2>>2]|0;
    $110 = ($109|0)==(0|0);
    if (!($110)) {
     $111 = HEAP32[$1>>2]|0;
     $112 = (($111) + -1|0);
     HEAP32[$1>>2] = $112;
    }
    $113 = (___errno_location()|0);
    HEAP32[$113>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 do {
  if ((label|0) == 23) {
   $42 = HEAP32[$2>>2]|0;
   $43 = ($42|0)==(0|0);
   if (!($43)) {
    $44 = HEAP32[$1>>2]|0;
    $45 = (($44) + -1|0);
    HEAP32[$1>>2] = $45;
   }
   $notlhs = ($pok|0)==(0);
   $notrhs = ($i$0$lcssa>>>0)<(4);
   $or$cond106$not = $notrhs | $notlhs;
   $brmerge = $or$cond106$not | $43;
   if ($brmerge) {
    break;
   } else {
    $i$166 = $i$0$lcssa;
   }
   while(1) {
    $46 = HEAP32[$1>>2]|0;
    $47 = (($46) + -1|0);
    HEAP32[$1>>2] = $47;
    $48 = (($i$166) + -1)|0;
    $49 = ($48>>>0)>(3);
    if ($49) {
     $i$166$phi = $48;$i$166 = $i$166$phi;
    } else {
     break;
    }
   }
  }
 } while(0);
 $50 = (+($sign$0|0));
 $51 = $50 * inf;
 $52 = $51;
 $$0 = $52;
 STACKTOP = sp;return (+$$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $54$phi = 0, $55 = 0, $55$phi = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $c$0 = 0, $c$1$be = 0, $c$18 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$23 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond2 = 0, $phitmp16 = 0, $x$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($f) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 100|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)<($4>>>0);
 if ($5) {
  $6 = (($2) + 1|0);
  HEAP32[$1>>2] = $6;
  $7 = HEAP8[$2]|0;
  $8 = $7&255;
  $10 = $8;
 } else {
  $9 = (___shgetc($f)|0);
  $10 = $9;
 }
 $11 = ($10|0)==(45);
 do {
  if ((($10|0) == 43) | (($10|0) == 45)) {
   $12 = $11&1;
   $13 = HEAP32[$1>>2]|0;
   $14 = HEAP32[$3>>2]|0;
   $15 = ($13>>>0)<($14>>>0);
   if ($15) {
    $16 = (($13) + 1|0);
    HEAP32[$1>>2] = $16;
    $17 = HEAP8[$13]|0;
    $18 = $17&255;
    $20 = $18;
   } else {
    $19 = (___shgetc($f)|0);
    $20 = $19;
   }
   $21 = (($20) + -48)|0;
   $22 = ($21>>>0)<(10);
   $23 = ($pok|0)==(0);
   $or$cond = $22 | $23;
   if ($or$cond) {
    $c$0 = $20;$neg$0 = $12;
    break;
   }
   $24 = HEAP32[$3>>2]|0;
   $25 = ($24|0)==(0|0);
   if ($25) {
    $c$0 = $20;$neg$0 = $12;
    break;
   }
   $26 = HEAP32[$1>>2]|0;
   $27 = (($26) + -1|0);
   HEAP32[$1>>2] = $27;
   $c$0 = $20;$neg$0 = $12;
  } else {
   $c$0 = $10;$neg$0 = 0;
  }
 } while(0);
 $28 = (($c$0) + -48)|0;
 $29 = ($28>>>0)>(9);
 if ($29) {
  $30 = HEAP32[$3>>2]|0;
  $31 = ($30|0)==(0|0);
  if ($31) {
   $96 = 0;$97 = -2147483648;
   tempRet0 = $97;
   STACKTOP = sp;return ($96|0);
  }
  $32 = HEAP32[$1>>2]|0;
  $33 = (($32) + -1|0);
  HEAP32[$1>>2] = $33;
  $96 = 0;$97 = -2147483648;
  tempRet0 = $97;
  STACKTOP = sp;return ($96|0);
 } else {
  $c$18 = $c$0;$x$09 = 0;
 }
 while(1) {
  $34 = (($c$18) + -48)|0;
  $35 = (($34) + ($x$09))|0;
  $36 = HEAP32[$1>>2]|0;
  $37 = HEAP32[$3>>2]|0;
  $38 = ($36>>>0)<($37>>>0);
  if ($38) {
   $39 = (($36) + 1|0);
   HEAP32[$1>>2] = $39;
   $40 = HEAP8[$36]|0;
   $41 = $40&255;
   $c$1$be = $41;
  } else {
   $42 = (___shgetc($f)|0);
   $c$1$be = $42;
  }
  $43 = (($c$1$be) + -48)|0;
  $44 = ($43>>>0)<(10);
  $45 = ($35|0)<(214748364);
  $$ = $44 & $45;
  if (!($$)) {
   break;
  }
  $phitmp16 = ($35*10)|0;
  $c$18 = $c$1$be;$x$09 = $phitmp16;
 }
 $46 = ($35|0)<(0);
 $47 = $46 << 31 >> 31;
 $48 = (($c$1$be) + -48)|0;
 $49 = ($48>>>0)<(10);
 if ($49) {
  $54 = $35;$55 = $47;$c$23 = $c$1$be;
  while(1) {
   $56 = (___muldi3(($54|0),($55|0),10,0)|0);
   $57 = tempRet0;
   $58 = ($c$23|0)<(0);
   $59 = $58 << 31 >> 31;
   $60 = (_i64Add(($c$23|0),($59|0),-48,-1)|0);
   $61 = tempRet0;
   $62 = (_i64Add(($60|0),($61|0),($56|0),($57|0))|0);
   $63 = tempRet0;
   $64 = HEAP32[$1>>2]|0;
   $65 = HEAP32[$3>>2]|0;
   $66 = ($64>>>0)<($65>>>0);
   if ($66) {
    $67 = (($64) + 1|0);
    HEAP32[$1>>2] = $67;
    $68 = HEAP8[$64]|0;
    $69 = $68&255;
    $c$2$be = $69;
   } else {
    $70 = (___shgetc($f)|0);
    $c$2$be = $70;
   }
   $71 = (($c$2$be) + -48)|0;
   $72 = ($71>>>0)<(10);
   $73 = ($63|0)<(21474836);
   $74 = ($63|0)==(21474836);
   $75 = ($62>>>0)<(2061584302);
   $76 = $74 & $75;
   $77 = $73 | $76;
   $or$cond2 = $72 & $77;
   if ($or$cond2) {
    $55$phi = $63;$54$phi = $62;$c$23 = $c$2$be;$55 = $55$phi;$54 = $54$phi;
   } else {
    $50 = $62;$51 = $63;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $50 = $35;$51 = $47;$c$2$lcssa = $c$1$be;
 }
 $52 = (($c$2$lcssa) + -48)|0;
 $53 = ($52>>>0)<(10);
 if ($53) {
  while(1) {
   $78 = HEAP32[$1>>2]|0;
   $79 = HEAP32[$3>>2]|0;
   $80 = ($78>>>0)<($79>>>0);
   if ($80) {
    $81 = (($78) + 1|0);
    HEAP32[$1>>2] = $81;
    $82 = HEAP8[$78]|0;
    $83 = $82&255;
    $c$3$be = $83;
   } else {
    $84 = (___shgetc($f)|0);
    $c$3$be = $84;
   }
   $85 = (($c$3$be) + -48)|0;
   $86 = ($85>>>0)<(10);
   if (!($86)) {
    break;
   }
  }
 }
 $87 = HEAP32[$3>>2]|0;
 $88 = ($87|0)==(0|0);
 if (!($88)) {
  $89 = HEAP32[$1>>2]|0;
  $90 = (($89) + -1|0);
  HEAP32[$1>>2] = $90;
 }
 $91 = ($neg$0|0)!=(0);
 $92 = (_i64Subtract(0,0,($50|0),($51|0))|0);
 $93 = tempRet0;
 $94 = $91 ? $92 : $50;
 $95 = $91 ? $93 : $51;
 $96 = $94;$97 = $95;
 tempRet0 = $97;
 STACKTOP = sp;return ($96|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($f) + 104|0);
 HEAP32[$1>>2] = $lim;
 $2 = (($f) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($f) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 $7 = $5;
 $8 = (($6) - ($7))|0;
 $9 = (($f) + 108|0);
 HEAP32[$9>>2] = $8;
 $10 = ($lim|0)!=(0);
 $11 = ($8|0)>($lim|0);
 $or$cond = $10 & $11;
 if ($or$cond) {
  $12 = (($5) + ($lim)|0);
  $13 = (($f) + 100|0);
  HEAP32[$13>>2] = $12;
  STACKTOP = sp;return;
 } else {
  $14 = (($f) + 100|0);
  HEAP32[$14>>2] = $3;
  STACKTOP = sp;return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($f) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = (($f) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = (___uflow($f)|0);
   $8 = ($7|0)<(0);
   if ($8) {
    break;
   }
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   do {
    if ($11) {
     label = 8;
    } else {
     $12 = (($f) + 4|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = $$pre;
     $15 = $13;
     $16 = (($14) - ($15))|0;
     $17 = (($f) + 108|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = (($10) - ($18))|0;
     $20 = (($19) + -1)|0;
     $21 = ($16|0)>($20|0);
     if (!($21)) {
      label = 8;
      break;
     }
     $22 = (($13) + ($20)|0);
     $23 = (($f) + 100|0);
     HEAP32[$23>>2] = $22;
    }
   } while(0);
   if ((label|0) == 8) {
    $24 = (($f) + 100|0);
    HEAP32[$24>>2] = $$pre;
   }
   $25 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($25)) {
    $26 = $$pre;
    $27 = $$pre3;
    $28 = (($f) + 108|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($26) + 1)|0;
    $31 = (($30) - ($27))|0;
    $32 = (($31) + ($29))|0;
    HEAP32[$28>>2] = $32;
   }
   $33 = (($$pre3) + -1|0);
   $34 = HEAP8[$33]|0;
   $35 = $34&255;
   $36 = ($35|0)==($7|0);
   if ($36) {
    $$0 = $7;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = $7&255;
   HEAP8[$33] = $37;
   $$0 = $7;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $9 = (($f) + 100|0);
 HEAP32[$9>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0.0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($n|0)>(1023);
 do {
  if ($1) {
   $2 = $x * 8.98846567431157953864E+307;
   $3 = (($n) + -1023)|0;
   $4 = ($3|0)>(1023);
   if (!($4)) {
    $$0 = $3;$y$0 = $2;
    break;
   }
   $5 = $2 * 8.98846567431157953864E+307;
   $6 = (($n) + -2046)|0;
   $7 = ($6|0)>(1023);
   $$ = $7 ? 1023 : $6;
   $$0 = $$;$y$0 = $5;
  } else {
   $8 = ($n|0)<(-1022);
   if (!($8)) {
    $$0 = $n;$y$0 = $x;
    break;
   }
   $9 = $x * 2.22507385850720138309E-308;
   $10 = (($n) + 1022)|0;
   $11 = ($10|0)<(-1022);
   if (!($11)) {
    $$0 = $10;$y$0 = $9;
    break;
   }
   $12 = $9 * 2.22507385850720138309E-308;
   $13 = (($n) + 2044)|0;
   $14 = ($13|0)<(-1022);
   $$1 = $14 ? -1022 : $13;
   $$0 = $$1;$y$0 = $12;
  }
 } while(0);
 $15 = (($$0) + 1023)|0;
 $16 = (_bitshift64Shl(($15|0),0,52)|0);
 $17 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $16;HEAP32[tempDoublePtr+4>>2] = $17;$18 = +HEAPF64[tempDoublePtr>>3];
 $19 = $y$0 * $18;
 STACKTOP = sp;return (+$19);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$1);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($f) + 74|0);
 $2 = HEAP8[$1]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1] = $6;
 $7 = (($f) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($f) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 63]($f,0,0)|0);
 }
 $14 = (($f) + 16|0);
 HEAP32[$14>>2] = 0;
 $15 = (($f) + 28|0);
 HEAP32[$15>>2] = 0;
 HEAP32[$7>>2] = 0;
 $16 = ($f);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 20;
 $19 = ($18|0)==(0);
 if ($19) {
  $23 = HEAP32[$9>>2]|0;
  $24 = (($f) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = (($f) + 4|0);
  HEAP32[$25>>2] = $23;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $17 & 4;
 $21 = ($20|0)==(0);
 if ($21) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $22 = $17 | 32;
 HEAP32[$16>>2] = $22;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8|0;
 $c = sp;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___toread($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $6 = (($f) + 32|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (FUNCTION_TABLE_iiii[$7 & 63]($f,$c,1)|0);
   $9 = ($8|0)==(1);
   if (!($9)) {
    $$0 = -1;
    break;
   }
   $10 = HEAP8[$c]|0;
   $11 = $10&255;
   $$0 = $11;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _strtold_l($s,$p,$loc) {
 $s = $s|0;
 $p = $p|0;
 $loc = $loc|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $f$i$i = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f$i$i = sp;
 $1 = $f$i$i;
 dest=$1+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));;
 $2 = (($f$i$i) + 4|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i$i) + 8|0);
 HEAP32[$3>>2] = (-1);
 $4 = (($f$i$i) + 44|0);
 HEAP32[$4>>2] = $s;
 $5 = (($f$i$i) + 76|0);
 HEAP32[$5>>2] = -1;
 ___shlim($f$i$i,0);
 $6 = (+___floatscan($f$i$i,2,1));
 $7 = (($f$i$i) + 108|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$2>>2]|0;
 $10 = HEAP32[$3>>2]|0;
 $11 = $9;
 $12 = $10;
 $13 = (($11) - ($12))|0;
 $14 = (($13) + ($8))|0;
 $15 = ($p|0)==(0|0);
 if ($15) {
  STACKTOP = sp;return (+$6);
 }
 $16 = ($14|0)==(0);
 if ($16) {
  $18 = $s;
 } else {
  $17 = (($s) + ($14)|0);
  $18 = $17;
 }
 HEAP32[$p>>2] = $18;
 STACKTOP = sp;return (+$6);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($n|0)==(0);
 L1: do {
  if ($1) {
   $12 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $2 = HEAP8[$l$04]|0;
    $3 = HEAP8[$r$05]|0;
    $4 = ($2<<24>>24)==($3<<24>>24);
    if (!($4)) {
     break;
    }
    $5 = (($$03) + -1)|0;
    $6 = (($l$04) + 1|0);
    $7 = (($r$05) + 1|0);
    $8 = ($5|0)==(0);
    if ($8) {
     $12 = 0;
     break L1;
    } else {
     $$03 = $5;$l$04 = $6;$r$05 = $7;
    }
   }
   $9 = $2&255;
   $10 = $3&255;
   $11 = (($9) - ($10))|0;
   $12 = $11;
  }
 } while(0);
 STACKTOP = sp;return ($12|0);
}
function runPostSets() {
 HEAP32[624] = __ZTISt9exception;HEAP32[1370] = __ZTISt9exception;HEAP32[1396] = __ZTISt9exception;HEAP32[4276] = __ZTISt9exception;HEAP32[4506] = __ZTISt9exception;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[(dest)]=((HEAP8[(src)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[(dest)]=((HEAP8[(src)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[(dest)]=((HEAP8[(src)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[(curr)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[(ptr)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[(ptr)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))|0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))|0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))|0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))|0)])|0) + 24)|0;
}
function _rand_r(seedp) {
    seedp = seedp|0; 
    var val = 0;
    val = ((Math_imul(((HEAP32[((seedp)>>2)])|0), 31010991)|0) + 0x676e6177 ) & 2147483647; // assumes RAND_MAX is in bit mask form (power of 2 minus 1)
    HEAP32[((seedp)>>2)]=val;
    return val|0;
}
function _rand() {
    return _rand_r(___rand_seed)|0;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))|0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))|0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))|0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))|0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

  
  function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
    return FUNCTION_TABLE_iiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
  }


  function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    FUNCTION_TABLE_viiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0);
  }


  function dynCall_vid(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=+a2;
    FUNCTION_TABLE_vid[index&1](a1|0,+a2);
  }


  function dynCall_vi(index,a1) {
    index = index|0;
    a1=a1|0;
    FUNCTION_TABLE_vi[index&255](a1|0);
  }


  function dynCall_vii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    FUNCTION_TABLE_vii[index&127](a1|0,a2|0);
  }


  function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
    return FUNCTION_TABLE_iiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
  }


  function dynCall_ii(index,a1) {
    index = index|0;
    a1=a1|0;
    return FUNCTION_TABLE_ii[index&127](a1|0)|0;
  }


  function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
    return FUNCTION_TABLE_iiiiiiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
  }


  function dynCall_vidd(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=+a2; a3=+a3;
    FUNCTION_TABLE_vidd[index&3](a1|0,+a2,+a3);
  }


  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&63](a1|0,a2|0,a3|0)|0;
  }


  function dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
    FUNCTION_TABLE_viiiiiiiiiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
  }


  function dynCall_viiiiid(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
    FUNCTION_TABLE_viiiiid[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
  }


  function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
    FUNCTION_TABLE_viiiiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
  }


  function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
    FUNCTION_TABLE_viiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
  }


  function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
    FUNCTION_TABLE_viiiiiii[index&63](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
  }


  function dynCall_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
    FUNCTION_TABLE_viiiiiid[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
  }


  function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
    FUNCTION_TABLE_viiiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
  }


  function dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
    FUNCTION_TABLE_viiiiiiiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
  }


  function dynCall_iii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return FUNCTION_TABLE_iii[index&63](a1|0,a2|0)|0;
  }


  function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    return FUNCTION_TABLE_iiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
  }


  function dynCall_diii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return +FUNCTION_TABLE_diii[index&3](a1|0,a2|0,a3|0);
  }


  function dynCall_i(index) {
    index = index|0;
    
    return FUNCTION_TABLE_i[index&15]()|0;
  }


  function dynCall_iiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
    return FUNCTION_TABLE_iiiiiiiiii[index&1](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0)|0;
  }


  function dynCall_viii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    FUNCTION_TABLE_viii[index&31](a1|0,a2|0,a3|0);
  }


  function dynCall_v(index) {
    index = index|0;
    
    FUNCTION_TABLE_v[index&7]();
  }


  function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
    return FUNCTION_TABLE_iiiiiiiii[index&15](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
  }


  function dynCall_iiiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    return FUNCTION_TABLE_iiiii[index&31](a1|0,a2|0,a3|0,a4|0)|0;
  }


  function dynCall_viiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    FUNCTION_TABLE_viiii[index&31](a1|0,a2|0,a3|0,a4|0);
  }

function b0(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0; }
  function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1); }
  function _glFramebufferTexture2D__wrapper(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _glFramebufferTexture2D(p0|0,p1|0,p2|0,p3|0,p4|0); }
  function b2(p0,p1) { p0 = p0|0;p1 = +p1; nullFunc_vid(2); }
  function b3(p0) { p0 = p0|0; nullFunc_vi(3); }
  function _glfwSetWindowTitle__wrapper(p0) { p0 = p0|0; _glfwSetWindowTitle(p0|0); }
  function _glfwSetKeyCallback__wrapper(p0) { p0 = p0|0; _glfwSetKeyCallback(p0|0); }
  function _glfwSetMousePosCallback__wrapper(p0) { p0 = p0|0; _glfwSetMousePosCallback(p0|0); }
  function _glfwSetWindowSizeCallback__wrapper(p0) { p0 = p0|0; _glfwSetWindowSizeCallback(p0|0); }
  function _glCompileShader__wrapper(p0) { p0 = p0|0; _glCompileShader(p0|0); }
  function _glDeleteShader__wrapper(p0) { p0 = p0|0; _glDeleteShader(p0|0); }
  function _glLinkProgram__wrapper(p0) { p0 = p0|0; _glLinkProgram(p0|0); }
  function _glDeleteProgram__wrapper(p0) { p0 = p0|0; _glDeleteProgram(p0|0); }
  function _glUseProgram__wrapper(p0) { p0 = p0|0; _glUseProgram(p0|0); }
  function _glBindVertexArray__wrapper(p0) { p0 = p0|0; _glBindVertexArray(p0|0); }
  function _glEnableVertexAttribArray__wrapper(p0) { p0 = p0|0; _glEnableVertexAttribArray(p0|0); }
  function _glActiveTexture__wrapper(p0) { p0 = p0|0; _glActiveTexture(p0|0); }
  function _glEnable__wrapper(p0) { p0 = p0|0; _glEnable(p0|0); }
  function _exit__wrapper(p0) { p0 = p0|0; _exit(p0|0); }
  function _freelocale__wrapper(p0) { p0 = p0|0; _freelocale(p0|0); }
  function b4(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(4); }
  function _glAttachShader__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _glAttachShader(p0|0,p1|0); }
  function _glGenBuffers__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _glGenBuffers(p0|0,p1|0); }
  function _glBindBuffer__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _glBindBuffer(p0|0,p1|0); }
  function _glGenVertexArrays__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _glGenVertexArrays(p0|0,p1|0); }
  function _glGenFramebuffers__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _glGenFramebuffers(p0|0,p1|0); }
  function _glGenTextures__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _glGenTextures(p0|0,p1|0); }
  function _glBindFramebuffer__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _glBindFramebuffer(p0|0,p1|0); }
  function _glBindTexture__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; _glBindTexture(p0|0,p1|0); }
  function b5(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(5);return 0; }
  function _clGetProgramBuildInfo__wrapper(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; return _clGetProgramBuildInfo(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0)|0; }
  function _clCreateBuffer__wrapper(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; return _clCreateBuffer(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0)|0; }
  function _clCreateContextFromType__wrapper(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; return _clCreateContextFromType(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0)|0; }
  function b6(p0) { p0 = p0|0; nullFunc_ii(6);return 0; }
  function _strlen__wrapper(p0) { p0 = p0|0; return _strlen(p0|0)|0; }
  function _glCreateShader__wrapper(p0) { p0 = p0|0; return _glCreateShader(p0|0)|0; }
  function _fclose__wrapper(p0) { p0 = p0|0; return _fclose(p0|0)|0; }
  function _pthread_mutex_unlock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0; }
  function _pthread_mutex_lock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_lock(p0|0)|0; }
  function _pthread_cond_broadcast__wrapper(p0) { p0 = p0|0; return _pthread_cond_broadcast(p0|0)|0; }
  function _uselocale__wrapper(p0) { p0 = p0|0; return _uselocale(p0|0)|0; }
  function b7(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(7);return 0; }
  function b8(p0,p1,p2) { p0 = p0|0;p1 = +p1;p2 = +p2; nullFunc_vidd(8); }
  function b9(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(9);return 0; }
  function _clCreateKernel__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _clCreateKernel(p0|0,p1|0,p2|0)|0; }
  function _newlocale__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _newlocale(p0|0,p1|0,p2|0)|0; }
  function _vasprintf__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _vasprintf(p0|0,p1|0,p2|0)|0; }
  function b10(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0;p13 = p13|0;p14 = p14|0; nullFunc_viiiiiiiiiiiiiii(10); }
  function b11(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_viiiiid(11); }
  function b12(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_viiiiiiii(12); }
  function b13(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(13); }
  function _glVertexAttribPointer__wrapper(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; _glVertexAttribPointer(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0); }
  function b14(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(14); }
  function b15(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = +p6; nullFunc_viiiiiid(15); }
  function b16(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(16); }
  function _glTexImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _glTexImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0); }
  function b17(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_viiiiiiiiii(17); }
  function b18(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(18);return 0; }
  function _printf__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _printf(p0|0,p1|0)|0; }
  function _isxdigit_l__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _isxdigit_l(p0|0,p1|0)|0; }
  function _isdigit_l__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _isdigit_l(p0|0,p1|0)|0; }
  function b19(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(19);return 0; }
  function _clGetContextInfo__wrapper(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; return _clGetContextInfo(p0|0,p1|0,p2|0,p3|0,p4|0)|0; }
  function _clCreateFromGLBuffer__wrapper(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; return _clCreateFromGLBuffer(p0|0,p1|0,p2|0,p3|0,p4|0)|0; }
  function _clCreateCommandQueue__wrapper(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; return _clCreateCommandQueue(p0|0,p1|0,p2|0,p3|0,p4|0)|0; }
  function _clCreateProgramWithSource__wrapper(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; return _clCreateProgramWithSource(p0|0,p1|0,p2|0,p3|0,p4|0)|0; }
  function b20(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(20);return +0; }
  function b21() { ; nullFunc_i(21);return 0; }
  function _glewInit__wrapper() { ; return _glewInit()|0; }
  function _glCreateProgram__wrapper() { ; return _glCreateProgram()|0; }
  function ___ctype_b_loc__wrapper() { ; return ___ctype_b_loc()|0; }
  function ___ctype_toupper_loc__wrapper() { ; return ___ctype_toupper_loc()|0; }
  function ___ctype_tolower_loc__wrapper() { ; return ___ctype_tolower_loc()|0; }
  function b22(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_iiiiiiiiii(22);return 0; }
  function _glfwOpenWindow__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; return _glfwOpenWindow(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0)|0; }
  function b23(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(23); }
  function ___cxa_throw__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; ___cxa_throw(p0|0,p1|0,p2|0); }
  function _glGetShaderiv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _glGetShaderiv(p0|0,p1|0,p2|0); }
  function _glBindAttribLocation__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _glBindAttribLocation(p0|0,p1|0,p2|0); }
  function _glGetProgramiv__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _glGetProgramiv(p0|0,p1|0,p2|0); }
  function _glTexParameteri__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; _glTexParameteri(p0|0,p1|0,p2|0); }
  function b24() { ; nullFunc_v(24); }
  function ___cxa_pure_virtual__wrapper() { ; ___cxa_pure_virtual(); }
  function _glfwTerminate__wrapper() { ; _glfwTerminate(); }
  function _glfwCloseWindow__wrapper() { ; _glfwCloseWindow(); }
  function ___cxa_end_catch__wrapper() { ; ___cxa_end_catch(); }
  function ___cxa_rethrow__wrapper() { ; ___cxa_rethrow(); }
  function b25(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(25);return 0; }
  function b26(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(26);return 0; }
  function _catgets__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _catgets(p0|0,p1|0,p2|0,p3|0)|0; }
  function b27(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(27); }
  function _glViewport__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glViewport(p0|0,p1|0,p2|0,p3|0); }
  function _glShaderSource__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glShaderSource(p0|0,p1|0,p2|0,p3|0); }
  function _glGetShaderInfoLog__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glGetShaderInfoLog(p0|0,p1|0,p2|0,p3|0); }
  function _glGetProgramInfoLog__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glGetProgramInfoLog(p0|0,p1|0,p2|0,p3|0); }
  function _glBufferData__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glBufferData(p0|0,p1|0,p2|0,p3|0); }
  function _glBlendFuncSeparate__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glBlendFuncSeparate(p0|0,p1|0,p2|0,p3|0); }
  function _glBufferSubData__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _glBufferSubData(p0|0,p1|0,p2|0,p3|0); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiiiiiii = [b0,__ZNK2cl12CommandQueue20enqueueNDRangeKernelERKNS_6KernelERKNS_7NDRangeES6_S6_PKNSt3__16vectorINS_5EventENS7_9allocatorIS9_EEEEPS9_,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb];
  var FUNCTION_TABLE_viiiii = [b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,_glFramebufferTexture2D__wrapper,b1,b1,b1];
  var FUNCTION_TABLE_vid = [b2,__ZN19LorenzAttractorDemo6renderEf];
  var FUNCTION_TABLE_vi = [b3,__ZN11ApplicationD2Ev,__ZN11ApplicationD0Ev,__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZThn8_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZThn8_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__114basic_iostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__114basic_ifstreamIcNS_11char_traitsIcEEED0Ev
  ,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEED0Ev,__ZN19LorenzAttractorDemoD2Ev,__ZN19LorenzAttractorDemoD0Ev,__ZN19LorenzAttractorDemo6updateEv,__ZN19LorenzAttractorDemo4initEv,__ZN4DemoD1Ev,__ZN4DemoD0Ev,__ZN27LorenzAttractorOpenCLSolverD2Ev,__ZN27LorenzAttractorOpenCLSolverD0Ev,__ZN27LorenzAttractorOpenCLSolver4initEv,__ZN2cl5ErrorD1Ev,__ZN2cl5ErrorD0Ev,__ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZN6SolverD1Ev,__ZN6SolverD0Ev,__ZNSt3__111__stdoutbufIwED1Ev,__ZNSt3__111__stdoutbufIwED0Ev,__ZNSt3__110__stdinbufIwED1Ev,__ZNSt3__110__stdinbufIwED0Ev,__ZNSt3__111__stdoutbufIcED1Ev,__ZNSt3__111__stdoutbufIcED0Ev,__ZNSt3__110__stdinbufIcED1Ev,__ZNSt3__110__stdinbufIcED0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt13runtime_errorD2Ev
  ,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt14overflow_errorD0Ev,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED1Ev,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__119__iostream_categoryD1Ev,__ZNSt3__119__iostream_categoryD0Ev,__ZNSt3__17collateIcED1Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,__ZNSt3__17collateIwED1Ev,__ZNSt3__17collateIwED0Ev
  ,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__110moneypunctIcLb0EED1Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,__ZNSt3__110moneypunctIcLb1EED1Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,__ZNSt3__110moneypunctIwLb0EED1Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,__ZNSt3__110moneypunctIwLb1EED1Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev
  ,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18messagesIcED1Ev,__ZNSt3__18messagesIcED0Ev,__ZNSt3__18messagesIwED1Ev,__ZNSt3__18messagesIwED0Ev,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev
  ,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZN11ApplicationC2Ev,_glfwSetWindowTitle__wrapper,_glfwSetKeyCallback__wrapper,_glfwSetMousePosCallback__wrapper,_glfwSetWindowSizeCallback__wrapper,__ZN19LorenzAttractorDemoC2Ev,__ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv,__ZN10ParametersD1Ev,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEEC1Ev,_glCompileShader__wrapper,_glDeleteShader__wrapper,_glLinkProgram__wrapper,_glDeleteProgram__wrapper,_glUseProgram__wrapper,_glBindVertexArray__wrapper,_glEnableVertexAttribArray__wrapper,_glActiveTexture__wrapper,_glEnable__wrapper,__ZN2cl7NDRangeD1Ev,__ZN2cl7ContextC1Ev,__ZN2cl7ProgramC1Ev,__ZN2cl6KernelC1Ev,__ZN2cl12CommandQueueC1Ev,__ZN2cl6BufferC1Ev,__ZN27LorenzAttractorOpenCLSolver6__initEv,__ZN11Application3runEv
  ,_exit__wrapper,__ZN27LorenzAttractorOpenCLSolverC2Ev,__ZNSt3__121__throw_runtime_errorEPKc,__ZNSt3__18ios_base4InitD2Ev,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,_free,_freelocale__wrapper,__ZNSt3__112__do_nothingEPv,___cxx_global_array_dtor120,___cxx_global_array_dtor105,___cxx_global_array_dtor81,___cxx_global_array_dtor56,___cxx_global_array_dtor53,___cxx_global_array_dtor,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3];
  var FUNCTION_TABLE_vii = [b4,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv
  ,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__18messagesIcE8do_closeEi,__ZNKSt3__18messagesIwE8do_closeEi,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,__Z12key_callbackii,__Z19cursor_pos_callbackii,__Z25framebuffer_size_callbackii,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_,__ZNSt3__18ios_base4initEPv,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE,__ZNKSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv,__ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_,__ZNKSt3__18ios_base6getlocEv,__ZNSt3__18ios_base5clearEj,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,__ZNSt3__16vectorIcNS_9allocatorIcEEEC1Ej,__ZNSt3__16vectorIcNS_9allocatorIcEEE8allocateEj,__ZNSt3__16vectorIcNS_9allocatorIcEEE18__construct_at_endEj,__ZNSt3__14listIjNS_9allocatorIjEEE9push_backEOj,_glAttachShader__wrapper,_glGenBuffers__wrapper,_glBindBuffer__wrapper,_glGenVertexArrays__wrapper,__ZNSt3__16vectorIjNS_9allocatorIjEEE6resizeEj,_glGenFramebuffers__wrapper,_glGenTextures__wrapper,_glBindFramebuffer__wrapper,_glBindTexture__wrapper,__ZNSt3__114__split_bufferIjRNS_9allocatorIjEEE18__construct_at_endEj,__ZNSt3__16vectorIjNS_9allocatorIjEEE26__swap_out_circular_bufferERNS_14__split_bufferIjRS2_EE,__ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE7reserveEj,__ZN2cl6MemoryC1ERKS0_,__ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE21__push_back_slow_pathIRKS2_EEvOT_,__ZNSt3__16vectorIN2cl6MemoryENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE,__ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEE8allocateEj,__ZN2cl6vectorIjLj3EE9push_backERKj,__ZN10Parameters6enableERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZN10Parameters7disableERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,__ZNSt13runtime_errorC2EPKc,__ZNSt11logic_errorC2EPKc,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj,__ZNSt3__16locale5__impC2Ej,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_iiiiiii = [b5,_clGetProgramBuildInfo__wrapper,_clCreateBuffer__wrapper,_clCreateContextFromType__wrapper];
  var FUNCTION_TABLE_ii = [b6,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9underflowEv,__ZNK2cl5Error4whatEv,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,__ZNKSt11logic_error4whatEv,__ZNKSt13runtime_error4whatEv,__ZNKSt3__119__iostream_category4nameEv,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv
  ,__ZNKSt3__120__time_get_c_storageIcE3__XEv,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv
  ,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,__ZNKSt8bad_cast4whatEv,__ZNKSt9bad_alloc4whatEv,_strlen__wrapper,__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_,_glCreateShader__wrapper,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE5closeEv,_fclose__wrapper,__ZNK2cl5Error3errEv,__ZN2cl8Platform3getEPNSt3__16vectorIS0_NS1_9allocatorIS0_EEEE,__ZN2cl6detail7WrapperIP15_cl_platform_idEclEv,__ZNK2cl6detail7WrapperIP7_cl_memE7releaseEv,__ZNK2cl6detail7WrapperIP13_cl_device_idE7releaseEv,__ZNK2cl6detail7WrapperIP15_cl_platform_idE7releaseEv,__ZNK2cl6detail7WrapperIP11_cl_contextEclEv,__ZNK2cl6detail7WrapperIP13_cl_device_idEclEv,__ZNK2cl6detail7WrapperIP17_cl_command_queueE7releaseEv,__ZNK2cl6detail7WrapperIP11_cl_programEclEv,__ZNK2cl6detail7WrapperIP10_cl_kernelE7releaseEv,__ZNK2cl6detail7WrapperIP11_cl_programE7releaseEv,__ZNK2cl6detail7WrapperIP11_cl_contextE7releaseEv,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv,__Znaj
  ,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,__Znwj,_uselocale__wrapper,_wcslen,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6];
  var FUNCTION_TABLE_iiiiiiiiiiii = [b7,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b7];
  var FUNCTION_TABLE_vidd = [b8,__ZN27LorenzAttractorOpenCLSolver4stepEff,__ZN27LorenzAttractorOpenCLSolver6__stepEff,b8];
  var FUNCTION_TABLE_iiii = [b9,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,__ZNKSt3__17collateIcE7do_hashEPKcS3_,__ZNKSt3__17collateIwE7do_hashEPKwS3_,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__15ctypeIcE9do_narrowEcc,__ZNKSt3__15ctypeIwE5do_isEtw,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__15ctypeIwE9do_narrowEwc,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,__ZNK10Parameters6getIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,_memcmp,__ZNSt3__121__murmur2_or_cityhashIjLj32EEclEPKvj,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE4openEPKcj,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj
  ,__ZNK10Parameters6getPtrERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPv,__ZNK10Parameters9getGLuintERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj,__ZNK2cl7Context7getInfoINSt3__16vectorINS_6DeviceENS2_9allocatorIS4_EEEEEEijPT_,__ZN2cl6Kernel6setArgINS_6BufferEEEijT_,_clCreateKernel__wrapper,_newlocale__wrapper,_vasprintf__wrapper,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,_wcrtomb,_mbtowc,_mbrlen,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9];
  var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b10,__ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i,__ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b10];
  var FUNCTION_TABLE_viiiiid = [b11,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b11,b11,b11];
  var FUNCTION_TABLE_viiiiiiii = [b12,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b12];
  var FUNCTION_TABLE_viiiiii = [b13,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,_glVertexAttribPointer__wrapper,__ZN2cl12CommandQueueC1ERKNS_7ContextERKNS_6DeviceEyPi,__ZN2cl8BufferGLC1ERKNS_7ContextEyjPi,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13];
  var FUNCTION_TABLE_viiiiiii = [b14,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
  ,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,__ZN2cl7ContextC1EyPiPFvPKcPKvjPvES6_S1_,__ZN2cl6BufferC1ERKNS_7ContextEyjPvPi,__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,__ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14];
  var FUNCTION_TABLE_viiiiiid = [b15,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b15];
  var FUNCTION_TABLE_viiiiiiiii = [b16,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,_glTexImage2D__wrapper];
  var FUNCTION_TABLE_viiiiiiiiii = [b17,__ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri,__ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri,__ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,__ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b17,b17,b17];
  var FUNCTION_TABLE_iii = [b18,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE8overflowEi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__111__stdoutbufIwE8overflowEj,__ZNSt3__110__stdinbufIwE9pbackfailEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__111__stdoutbufIcE8overflowEi,__ZNSt3__110__stdinbufIcE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNKSt3__15ctypeIcE10do_toupperEc,__ZNKSt3__15ctypeIcE10do_tolowerEc,__ZNKSt3__15ctypeIcE8do_widenEc,__ZNKSt3__15ctypeIwE10do_toupperEw,__ZNKSt3__15ctypeIwE10do_tolowerEw,__ZNKSt3__15ctypeIwE8do_widenEc,__ZN10Parameters9isEnabledERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,_printf__wrapper,__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi,__ZNKSt3__16locale9use_facetERNS0_2idE,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEPNS_15basic_streambufIcS2_EE,__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE,__ZNKSt3__16locale9has_facetERNS0_2idE,__ZN7gltools13compileShaderERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj,__ZN2cl7ContextaSERKS0_
  ,__ZN2cl7ProgramaSERKS0_,__ZN2cl6KernelaSERKS0_,__ZN2cl12CommandQueueaSERKS0_,__ZN2cl6BufferaSERKS0_,__ZN2cl6detailL10errHandlerEiPKc,__ZN2cl8PlatformaSERKS0_,_isxdigit_l__wrapper,_isdigit_l__wrapper,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18];
  var FUNCTION_TABLE_iiiiii = [b19,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNK2cl7Program5buildERKNSt3__16vectorINS_6DeviceENS1_9allocatorIS3_EEEEPKcPFvP11_cl_programPvESD_,_clGetContextInfo__wrapper,_clCreateFromGLBuffer__wrapper,_clCreateCommandQueue__wrapper,_clCreateProgramWithSource__wrapper,_wcsnrtombs,_mbsnrtowcs,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19];
  var FUNCTION_TABLE_diii = [b20,__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj];
  var FUNCTION_TABLE_i = [b21,_glewInit__wrapper,__ZN6global3parEv,_glCreateProgram__wrapper,__ZN11Application3getEv,___ctype_b_loc__wrapper,__ZNSt3__16locale8__globalEv,___ctype_toupper_loc__wrapper,___ctype_tolower_loc__wrapper,b21,b21,b21,b21,b21,b21,b21];
  var FUNCTION_TABLE_iiiiiiiiii = [b22,_glfwOpenWindow__wrapper];
  var FUNCTION_TABLE_viii = [b23,__ZN19LorenzAttractorDemo12resizeWindowEii,__ZNKSt3__114error_category23default_error_conditionEi,__ZNKSt3__119__iostream_category7messageEi,__ZN5error8throw_exEPKcS1_i,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,__ZN10Parameters6setIntERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEi,__ZN10Parameters9setStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_,__ZN10Parameters6setPtrERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEPv,__ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEjEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS8_PvEE,__ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_EENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS8_PvEE,__ZNSt3__112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_22__unordered_map_hasherIS7_S8_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_S8_NS_8equal_toIS7_EELb1EEENS5_IS8_EEE20__node_insert_uniqueEPNS_11__hash_nodeIS8_PvEE,___cxa_throw__wrapper,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,_glGetShaderiv__wrapper,_glBindAttribLocation__wrapper,_glGetProgramiv__wrapper,__ZN10Parameters9setGLuintERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj,__ZNK11Application13getWindowSizeERiS0_,_glTexParameteri__wrapper,__ZNK2cl7Context7getInfoILi4225EEENS_6detail12param_traitsINS2_15cl_context_infoEXT_EE10param_typeEPi,__ZNSt3__16vectorINS_4pairIPKcjEENS_9allocatorIS4_EEEC1EjRKS4_,__ZN2cl5ErrorC1EiPKc,__ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNSt3__112system_errorC2ENS_10error_codeEPKc,__ZNSt3__111__call_onceERVmPvPFvS2_E,__ZNSt3__16locale5__imp7installEPNS0_5facetEl,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj,b23
  ,b23,b23,b23];
  var FUNCTION_TABLE_v = [b24,___cxa_pure_virtual__wrapper,_glfwTerminate__wrapper,_glfwCloseWindow__wrapper,__Z24emscripten_loop_callbackv,___cxa_end_catch__wrapper,___cxa_rethrow__wrapper,__ZSt17__throw_bad_allocv];
  var FUNCTION_TABLE_iiiiiiiii = [b25,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,__ZNK2cl12CommandQueue17enqueueReadBufferERKNS_6BufferEjjjPvPKNSt3__16vectorINS_5EventENS5_9allocatorIS7_EEEEPS7_,b25,b25,b25,b25,b25,b25];
  var FUNCTION_TABLE_iiiii = [b26,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,__ZNK2cl7Program12getBuildInfoINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEiRKNS_6DeviceEjPT_,__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji,__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji,__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z,__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz,_mbsrtowcs,_catgets__wrapper,_mbrtowc,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26];
  var FUNCTION_TABLE_viiii = [b27,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__113basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__17collateIcE12do_transformEPKcS3_,__ZNKSt3__17collateIwE12do_transformEPKwS3_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10Parameters9getStringERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6_,_glViewport__wrapper,_glShaderSource__wrapper,_glGetShaderInfoLog__wrapper,_glGetProgramInfoLog__wrapper,_glBufferData__wrapper,_glBlendFuncSeparate__wrapper,_glBufferSubData__wrapper,__ZN2cl7ProgramC1ERKNS_7ContextERKNSt3__16vectorINS4_4pairIPKcjEENS4_9allocatorIS9_EEEEPi,__ZNK2cl7Program12getBuildInfoILi4483EEENS_6detail12param_traitsINS2_21cl_program_build_infoEXT_EE10param_typeERKNS_6DeviceEPi,__ZN2cl6KernelC1ERKNS_7ProgramEPKcPi,b27,b27,b27,b27,b27,b27,b27,b27
  ,b27,b27,b27];

  return { _strlen: _strlen, _free: _free, _main: _main, _rand_r: _rand_r, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _llvm_ctlz_i32: _llvm_ctlz_i32, _rand: _rand, _i64Subtract: _i64Subtract, _bitshift64Shl: _bitshift64Shl, __GLOBAL__I_a: __GLOBAL__I_a, __GLOBAL__I_a121: __GLOBAL__I_a121, __GLOBAL__I_a149: __GLOBAL__I_a149, __GLOBAL__I_a263: __GLOBAL__I_a263, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, setTempRet1: setTempRet1, setTempRet2: setTempRet2, setTempRet3: setTempRet3, setTempRet4: setTempRet4, setTempRet5: setTempRet5, setTempRet6: setTempRet6, setTempRet7: setTempRet7, setTempRet8: setTempRet8, setTempRet9: setTempRet9, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_vid: dynCall_vid, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_vidd: dynCall_vidd, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, dynCall_viiiiid: dynCall_viiiiid, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiid: dynCall_viiiiiid, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_diii: dynCall_diii, dynCall_i: dynCall_i, dynCall_iiiiiiiiii: dynCall_iiiiiiiiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiii: dynCall_iiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vid": nullFunc_vid, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_vidd": nullFunc_vidd, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_viiiiid": nullFunc_viiiiid, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiid": nullFunc_viiiiiid, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_diii": nullFunc_diii, "nullFunc_i": nullFunc_i, "nullFunc_iiiiiiiiii": nullFunc_iiiiiiiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_vid": invoke_vid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_ii": invoke_ii, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_vidd": invoke_vidd, "invoke_iiii": invoke_iiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viiiiid": invoke_viiiiid, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiid": invoke_viiiiiid, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_diii": invoke_diii, "invoke_i": invoke_i, "invoke_iiiiiiiiii": invoke_iiiiiiiiii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiii": invoke_iiiii, "invoke_viiii": invoke_viiii, "_glUseProgram": _glUseProgram, "_fabs": _fabs, "_clReleaseProgram": _clReleaseProgram, "_vsscanf": _vsscanf, "__ZSt9terminatev": __ZSt9terminatev, "_glUniformMatrix4fv": _glUniformMatrix4fv, "_clEnqueueReleaseGLObjects": _clEnqueueReleaseGLObjects, "___cxa_guard_acquire": ___cxa_guard_acquire, "__reallyNegative": __reallyNegative, "_clEnqueueNDRangeKernel": _clEnqueueNDRangeKernel, "___assert_fail": ___assert_fail, "_glDeleteProgram": _glDeleteProgram, "_clCreateProgramWithSource": _clCreateProgramWithSource, "_glfwSwapBuffers": _glfwSwapBuffers, "_glBindBuffer": _glBindBuffer, "_glGetShaderInfoLog": _glGetShaderInfoLog, "__addDays": __addDays, "_fsync": _fsync, "_catgets": _catgets, "_sbrk": _sbrk, "___cxa_begin_catch": ___cxa_begin_catch, "_sinf": _sinf, "_sysconf": _sysconf, "_clRetainKernel": _clRetainKernel, "_close": _close, "_tanf": _tanf, "___cxa_throw": ___cxa_throw, "_fileno": _fileno, "_glfwTerminate": _glfwTerminate, "_clCreateCommandQueue": _clCreateCommandQueue, "_clCreateContextFromType": _clCreateContextFromType, "_glfwSetWindowSizeCallback": _glfwSetWindowSizeCallback, "_glfwInit": _glfwInit, "_write": _write, "__isLeapYear": __isLeapYear, "_ftell": _ftell, "_glGenBuffers": _glGenBuffers, "_glShaderSource": _glShaderSource, "__ZNSt9exceptionD2Ev": __ZNSt9exceptionD2Ev, "___cxa_does_inherit": ___cxa_does_inherit, "_strtoll_l": _strtoll_l, "_strstr": _strstr, "___cxa_rethrow": ___cxa_rethrow, "_catclose": _catclose, "_glTexParameteri": _glTexParameteri, "_llvm_lifetime_end": _llvm_lifetime_end, "_glEnableVertexAttribArray": _glEnableVertexAttribArray, "_glVertexAttribPointer": _glVertexAttribPointer, "_send": _send, "_clReleaseKernel": _clReleaseKernel, "_glGetProgramInfoLog": _glGetProgramInfoLog, "___cxa_is_number_type": ___cxa_is_number_type, "_glfwOpenWindow": _glfwOpenWindow, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_isxdigit_l": _isxdigit_l, "_clGetProgramBuildInfo": _clGetProgramBuildInfo, "___cxa_guard_release": ___cxa_guard_release, "_glBufferSubData": _glBufferSubData, "_strerror_r": _strerror_r, "_glViewport": _glViewport, "___setErrNo": ___setErrNo, "_newlocale": _newlocale, "_isdigit_l": _isdigit_l, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_freelocale": _freelocale, "___cxa_call_unexpected": ___cxa_call_unexpected, "_glTexImage2D": _glTexImage2D, "_glEnable": _glEnable, "_printf": _printf, "_glGenTextures": _glGenTextures, "_clReleaseCommandQueue": _clReleaseCommandQueue, "_glGetString": _glGetString, "_fopen": _fopen, "_vasprintf": _vasprintf, "_glCreateShader": _glCreateShader, "_glBindFramebuffer": _glBindFramebuffer, "_glAttachShader": _glAttachShader, "_vsnprintf": _vsnprintf, "_glCreateProgram": _glCreateProgram, "_strtoull_l": _strtoull_l, "_clCreateKernel": _clCreateKernel, "_clSetKernelArg": _clSetKernelArg, "_fwrite": _fwrite, "_time": _time, "_pthread_mutex_lock": _pthread_mutex_lock, "_sprintf": _sprintf, "_glGenFramebuffers": _glGenFramebuffers, "_catopen": _catopen, "_exit": _exit, "___cxa_guard_abort": ___cxa_guard_abort, "_glfwPollEvents": _glfwPollEvents, "___ctype_b_loc": ___ctype_b_loc, "_fmod": _fmod, "_lseek": _lseek, "_fread": _fread, "___cxa_allocate_exception": ___cxa_allocate_exception, "_ceilf": _ceilf, "_glBlendFuncSeparate": _glBlendFuncSeparate, "_strtoll": _strtoll, "_glfwSetMousePosCallback": _glfwSetMousePosCallback, "_pwrite": _pwrite, "_glFinish": _glFinish, "_open": _open, "_uselocale": _uselocale, "_glBindTexture": _glBindTexture, "_glUniform1f": _glUniform1f, "_snprintf": _snprintf, "_clReleaseMemObject": _clReleaseMemObject, "___cxa_end_catch": ___cxa_end_catch, "_clGetPlatformIDs": _clGetPlatformIDs, "_glUniform1i": _glUniform1i, "_strtoull": _strtoull, "_strftime": _strftime, "_glDrawArrays": _glDrawArrays, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_clFinish": _clFinish, "_fseek": _fseek, "_clEnqueueAcquireGLObjects": _clEnqueueAcquireGLObjects, "_fclose": _fclose, "_sqrtf": _sqrtf, "_glActiveTexture": _glActiveTexture, "_pthread_cond_broadcast": _pthread_cond_broadcast, "_clCreateBuffer": _clCreateBuffer, "_recv": _recv, "_fgetc": _fgetc, "_glCompileShader": _glCompileShader, "__parseInt64": __parseInt64, "__getFloat": __getFloat, "_abort": _abort, "_glBindVertexArray": _glBindVertexArray, "_clBuildProgram": _clBuildProgram, "_glBufferData": _glBufferData, "_isspace": _isspace, "_glewInit": _glewInit, "_clGetContextInfo": _clGetContextInfo, "___cxa_pure_virtual": ___cxa_pure_virtual, "_pthread_cond_wait": _pthread_cond_wait, "_llvm_lifetime_start": _llvm_lifetime_start, "_cosf": _cosf, "_glGetProgramiv": _glGetProgramiv, "_glfwSetKeyCallback": _glfwSetKeyCallback, "_glfwGetTime": _glfwGetTime, "_clReleaseContext": _clReleaseContext, "_clCreateFromGLBuffer": _clCreateFromGLBuffer, "_glGenVertexArrays": _glGenVertexArrays, "_glDeleteShader": _glDeleteShader, "___gxx_personality_v0": ___gxx_personality_v0, "_glfwGetWindowSize": _glfwGetWindowSize, "_glfwCloseWindow": _glfwCloseWindow, "_ungetc": _ungetc, "_clEnqueueWriteBuffer": _clEnqueueWriteBuffer, "_clRetainContext": _clRetainContext, "_glLinkProgram": _glLinkProgram, "_strftime_l": _strftime_l, "_fprintf": _fprintf, "_sscanf": _sscanf, "_llvm_eh_typeid_for": _llvm_eh_typeid_for, "_glGetUniformLocation": _glGetUniformLocation, "_strerror": _strerror, "_clRetainCommandQueue": _clRetainCommandQueue, "_glClear": _glClear, "_asprintf": _asprintf, "_read": _read, "__exit": __exit, "___ctype_toupper_loc": ___ctype_toupper_loc, "_glBindAttribLocation": _glBindAttribLocation, "__arraySum": __arraySum, "_glGetShaderiv": _glGetShaderiv, "___ctype_tolower_loc": ___ctype_tolower_loc, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_pread": _pread, "_mkport": _mkport, "_glFramebufferTexture2D": _glFramebufferTexture2D, "_clRetainProgram": _clRetainProgram, "_fflush": _fflush, "_clEnqueueReadBuffer": _clEnqueueReadBuffer, "___errno_location": ___errno_location, "_copysign": _copysign, "_isxdigit": _isxdigit, "__scanString": __scanString, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_isdigit": _isdigit, "_emscripten_cancel_main_loop": _emscripten_cancel_main_loop, "__formatString": __formatString, "_atexit": _atexit, "_glfwSetWindowTitle": _glfwSetWindowTitle, "_clRetainMemObject": _clRetainMemObject, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "___rand_seed": ___rand_seed, "NaN": NaN, "Infinity": Infinity, "__ZTISt9exception": __ZTISt9exception, "__ZTVSt9exception": __ZTVSt9exception, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout }, buffer);
var _strlen = Module["_strlen"] = asm["_strlen"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _rand_r = Module["_rand_r"] = asm["_rand_r"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _llvm_ctlz_i32 = Module["_llvm_ctlz_i32"] = asm["_llvm_ctlz_i32"];
var _rand = Module["_rand"] = asm["_rand"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var __GLOBAL__I_a = Module["__GLOBAL__I_a"] = asm["__GLOBAL__I_a"];
var __GLOBAL__I_a121 = Module["__GLOBAL__I_a121"] = asm["__GLOBAL__I_a121"];
var __GLOBAL__I_a149 = Module["__GLOBAL__I_a149"] = asm["__GLOBAL__I_a149"];
var __GLOBAL__I_a263 = Module["__GLOBAL__I_a263"] = asm["__GLOBAL__I_a263"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiid = Module["dynCall_viiiiiid"] = asm["dynCall_viiiiiid"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiiiiiiii = Module["dynCall_iiiiiiiiii"] = asm["dynCall_iiiiiiiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = function(size) { return asm['stackAlloc'](size) };
Runtime.stackSave = function() { return asm['stackSave']() };
Runtime.stackRestore = function(top) { asm['stackRestore'](top) };


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');
  }

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  throw 'abort() at ' + stackTrace();
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



